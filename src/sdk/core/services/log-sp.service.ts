/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { AmimsLogSpDto } from '../models/amims-log-sp-dto';
import { logSpControllerCreate } from '../fn/log-sp/log-sp-controller-create';
import { LogSpControllerCreate$Params } from '../fn/log-sp/log-sp-controller-create';
import { logSpControllerFindAll } from '../fn/log-sp/log-sp-controller-find-all';
import { LogSpControllerFindAll$Params } from '../fn/log-sp/log-sp-controller-find-all';
import { logSpControllerFindOne } from '../fn/log-sp/log-sp-controller-find-one';
import { LogSpControllerFindOne$Params } from '../fn/log-sp/log-sp-controller-find-one';
import { logSpControllerRemove } from '../fn/log-sp/log-sp-controller-remove';
import { LogSpControllerRemove$Params } from '../fn/log-sp/log-sp-controller-remove';
import { logSpControllerUpdate } from '../fn/log-sp/log-sp-controller-update';
import { LogSpControllerUpdate$Params } from '../fn/log-sp/log-sp-controller-update';

@Injectable({ providedIn: 'root' })
export class LogSpService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `logSpControllerFindAll()` */
  static readonly LogSpControllerFindAllPath = '/amims/log_sp/log_sp';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `logSpControllerFindAll()` instead.
   *
   * This method doesn't expect any request body.
   */
  logSpControllerFindAll$Response(params?: LogSpControllerFindAll$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: Array<AmimsLogSpDto>;
'total'?: number;
}>> {
    return logSpControllerFindAll(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `logSpControllerFindAll$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  logSpControllerFindAll(params?: LogSpControllerFindAll$Params, context?: HttpContext): Observable<{
'code'?: number;
'pesan'?: string;
'data'?: Array<AmimsLogSpDto>;
'total'?: number;
}> {
    return this.logSpControllerFindAll$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: Array<AmimsLogSpDto>;
'total'?: number;
}>): {
'code'?: number;
'pesan'?: string;
'data'?: Array<AmimsLogSpDto>;
'total'?: number;
} => r.body)
    );
  }

  /** Path part for operation `logSpControllerCreate()` */
  static readonly LogSpControllerCreatePath = '/amims/log_sp/log_sp';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `logSpControllerCreate()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  logSpControllerCreate$Response(params: LogSpControllerCreate$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsLogSpDto;
}>> {
    return logSpControllerCreate(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `logSpControllerCreate$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  logSpControllerCreate(params: LogSpControllerCreate$Params, context?: HttpContext): Observable<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsLogSpDto;
}> {
    return this.logSpControllerCreate$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsLogSpDto;
}>): {
'code'?: number;
'pesan'?: string;
'data'?: AmimsLogSpDto;
} => r.body)
    );
  }

  /** Path part for operation `logSpControllerFindOne()` */
  static readonly LogSpControllerFindOnePath = '/amims/log_sp/log_sp/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `logSpControllerFindOne()` instead.
   *
   * This method doesn't expect any request body.
   */
  logSpControllerFindOne$Response(params: LogSpControllerFindOne$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsLogSpDto;
}>> {
    return logSpControllerFindOne(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `logSpControllerFindOne$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  logSpControllerFindOne(params: LogSpControllerFindOne$Params, context?: HttpContext): Observable<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsLogSpDto;
}> {
    return this.logSpControllerFindOne$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsLogSpDto;
}>): {
'code'?: number;
'pesan'?: string;
'data'?: AmimsLogSpDto;
} => r.body)
    );
  }

  /** Path part for operation `logSpControllerUpdate()` */
  static readonly LogSpControllerUpdatePath = '/amims/log_sp/log_sp/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `logSpControllerUpdate()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  logSpControllerUpdate$Response(params: LogSpControllerUpdate$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsLogSpDto;
}>> {
    return logSpControllerUpdate(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `logSpControllerUpdate$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  logSpControllerUpdate(params: LogSpControllerUpdate$Params, context?: HttpContext): Observable<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsLogSpDto;
}> {
    return this.logSpControllerUpdate$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsLogSpDto;
}>): {
'code'?: number;
'pesan'?: string;
'data'?: AmimsLogSpDto;
} => r.body)
    );
  }

  /** Path part for operation `logSpControllerRemove()` */
  static readonly LogSpControllerRemovePath = '/amims/log_sp/log_sp/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `logSpControllerRemove()` instead.
   *
   * This method doesn't expect any request body.
   */
  logSpControllerRemove$Response(params: LogSpControllerRemove$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsLogSpDto;
}>> {
    return logSpControllerRemove(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `logSpControllerRemove$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  logSpControllerRemove(params: LogSpControllerRemove$Params, context?: HttpContext): Observable<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsLogSpDto;
}> {
    return this.logSpControllerRemove$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsLogSpDto;
}>): {
'code'?: number;
'pesan'?: string;
'data'?: AmimsLogSpDto;
} => r.body)
    );
  }

}

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { actypeControllerCreate } from '../fn/actype/actype-controller-create';
import { ActypeControllerCreate$Params } from '../fn/actype/actype-controller-create';
import { actypeControllerFindAll } from '../fn/actype/actype-controller-find-all';
import { ActypeControllerFindAll$Params } from '../fn/actype/actype-controller-find-all';
import { actypeControllerFindOne } from '../fn/actype/actype-controller-find-one';
import { ActypeControllerFindOne$Params } from '../fn/actype/actype-controller-find-one';
import { actypeControllerRemove } from '../fn/actype/actype-controller-remove';
import { ActypeControllerRemove$Params } from '../fn/actype/actype-controller-remove';
import { actypeControllerUpdate } from '../fn/actype/actype-controller-update';
import { ActypeControllerUpdate$Params } from '../fn/actype/actype-controller-update';
import { AmimsActypeDto } from '../models/amims-actype-dto';

@Injectable({ providedIn: 'root' })
export class ActypeService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `actypeControllerFindAll()` */
  static readonly ActypeControllerFindAllPath = '/amims/actype/actype';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `actypeControllerFindAll()` instead.
   *
   * This method doesn't expect any request body.
   */
  actypeControllerFindAll$Response(params?: ActypeControllerFindAll$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: Array<AmimsActypeDto>;
'total'?: number;
}>> {
    return actypeControllerFindAll(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `actypeControllerFindAll$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  actypeControllerFindAll(params?: ActypeControllerFindAll$Params, context?: HttpContext): Observable<{
'code'?: number;
'pesan'?: string;
'data'?: Array<AmimsActypeDto>;
'total'?: number;
}> {
    return this.actypeControllerFindAll$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: Array<AmimsActypeDto>;
'total'?: number;
}>): {
'code'?: number;
'pesan'?: string;
'data'?: Array<AmimsActypeDto>;
'total'?: number;
} => r.body)
    );
  }

  /** Path part for operation `actypeControllerCreate()` */
  static readonly ActypeControllerCreatePath = '/amims/actype/actype';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `actypeControllerCreate()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  actypeControllerCreate$Response(params: ActypeControllerCreate$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsActypeDto;
}>> {
    return actypeControllerCreate(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `actypeControllerCreate$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  actypeControllerCreate(params: ActypeControllerCreate$Params, context?: HttpContext): Observable<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsActypeDto;
}> {
    return this.actypeControllerCreate$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsActypeDto;
}>): {
'code'?: number;
'pesan'?: string;
'data'?: AmimsActypeDto;
} => r.body)
    );
  }

  /** Path part for operation `actypeControllerFindOne()` */
  static readonly ActypeControllerFindOnePath = '/amims/actype/actype/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `actypeControllerFindOne()` instead.
   *
   * This method doesn't expect any request body.
   */
  actypeControllerFindOne$Response(params: ActypeControllerFindOne$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsActypeDto;
}>> {
    return actypeControllerFindOne(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `actypeControllerFindOne$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  actypeControllerFindOne(params: ActypeControllerFindOne$Params, context?: HttpContext): Observable<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsActypeDto;
}> {
    return this.actypeControllerFindOne$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsActypeDto;
}>): {
'code'?: number;
'pesan'?: string;
'data'?: AmimsActypeDto;
} => r.body)
    );
  }

  /** Path part for operation `actypeControllerUpdate()` */
  static readonly ActypeControllerUpdatePath = '/amims/actype/actype/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `actypeControllerUpdate()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  actypeControllerUpdate$Response(params: ActypeControllerUpdate$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsActypeDto;
}>> {
    return actypeControllerUpdate(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `actypeControllerUpdate$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  actypeControllerUpdate(params: ActypeControllerUpdate$Params, context?: HttpContext): Observable<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsActypeDto;
}> {
    return this.actypeControllerUpdate$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsActypeDto;
}>): {
'code'?: number;
'pesan'?: string;
'data'?: AmimsActypeDto;
} => r.body)
    );
  }

  /** Path part for operation `actypeControllerRemove()` */
  static readonly ActypeControllerRemovePath = '/amims/actype/actype/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `actypeControllerRemove()` instead.
   *
   * This method doesn't expect any request body.
   */
  actypeControllerRemove$Response(params: ActypeControllerRemove$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsActypeDto;
}>> {
    return actypeControllerRemove(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `actypeControllerRemove$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  actypeControllerRemove(params: ActypeControllerRemove$Params, context?: HttpContext): Observable<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsActypeDto;
}> {
    return this.actypeControllerRemove$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsActypeDto;
}>): {
'code'?: number;
'pesan'?: string;
'data'?: AmimsActypeDto;
} => r.body)
    );
  }

}

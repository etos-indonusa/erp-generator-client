/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { companyConfigControllerCreate } from '../fn/company-config/company-config-controller-create';
import { CompanyConfigControllerCreate$Params } from '../fn/company-config/company-config-controller-create';
import { companyConfigControllerFindAll } from '../fn/company-config/company-config-controller-find-all';
import { CompanyConfigControllerFindAll$Params } from '../fn/company-config/company-config-controller-find-all';
import { companyConfigControllerFindOne } from '../fn/company-config/company-config-controller-find-one';
import { CompanyConfigControllerFindOne$Params } from '../fn/company-config/company-config-controller-find-one';
import { companyConfigControllerRemove } from '../fn/company-config/company-config-controller-remove';
import { CompanyConfigControllerRemove$Params } from '../fn/company-config/company-config-controller-remove';
import { companyConfigControllerUpdate } from '../fn/company-config/company-config-controller-update';
import { CompanyConfigControllerUpdate$Params } from '../fn/company-config/company-config-controller-update';
import { CompanyConfigDto } from '../models/company-config-dto';

@Injectable({ providedIn: 'root' })
export class CompanyConfigService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `companyConfigControllerFindAll()` */
  static readonly CompanyConfigControllerFindAllPath = '/nonauth/company_config/company_config';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `companyConfigControllerFindAll()` instead.
   *
   * This method doesn't expect any request body.
   */
  companyConfigControllerFindAll$Response(params?: CompanyConfigControllerFindAll$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: Array<CompanyConfigDto>;
'total'?: number;
}>> {
    return companyConfigControllerFindAll(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `companyConfigControllerFindAll$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  companyConfigControllerFindAll(params?: CompanyConfigControllerFindAll$Params, context?: HttpContext): Observable<{
'code'?: number;
'pesan'?: string;
'data'?: Array<CompanyConfigDto>;
'total'?: number;
}> {
    return this.companyConfigControllerFindAll$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: Array<CompanyConfigDto>;
'total'?: number;
}>): {
'code'?: number;
'pesan'?: string;
'data'?: Array<CompanyConfigDto>;
'total'?: number;
} => r.body)
    );
  }

  /** Path part for operation `companyConfigControllerCreate()` */
  static readonly CompanyConfigControllerCreatePath = '/nonauth/company_config/company_config';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `companyConfigControllerCreate()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  companyConfigControllerCreate$Response(params: CompanyConfigControllerCreate$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: CompanyConfigDto;
}>> {
    return companyConfigControllerCreate(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `companyConfigControllerCreate$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  companyConfigControllerCreate(params: CompanyConfigControllerCreate$Params, context?: HttpContext): Observable<{
'code'?: number;
'pesan'?: string;
'data'?: CompanyConfigDto;
}> {
    return this.companyConfigControllerCreate$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: CompanyConfigDto;
}>): {
'code'?: number;
'pesan'?: string;
'data'?: CompanyConfigDto;
} => r.body)
    );
  }

  /** Path part for operation `companyConfigControllerFindOne()` */
  static readonly CompanyConfigControllerFindOnePath = '/nonauth/company_config/company_config/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `companyConfigControllerFindOne()` instead.
   *
   * This method doesn't expect any request body.
   */
  companyConfigControllerFindOne$Response(params: CompanyConfigControllerFindOne$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: CompanyConfigDto;
}>> {
    return companyConfigControllerFindOne(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `companyConfigControllerFindOne$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  companyConfigControllerFindOne(params: CompanyConfigControllerFindOne$Params, context?: HttpContext): Observable<{
'code'?: number;
'pesan'?: string;
'data'?: CompanyConfigDto;
}> {
    return this.companyConfigControllerFindOne$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: CompanyConfigDto;
}>): {
'code'?: number;
'pesan'?: string;
'data'?: CompanyConfigDto;
} => r.body)
    );
  }

  /** Path part for operation `companyConfigControllerUpdate()` */
  static readonly CompanyConfigControllerUpdatePath = '/nonauth/company_config/company_config/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `companyConfigControllerUpdate()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  companyConfigControllerUpdate$Response(params: CompanyConfigControllerUpdate$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: CompanyConfigDto;
}>> {
    return companyConfigControllerUpdate(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `companyConfigControllerUpdate$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  companyConfigControllerUpdate(params: CompanyConfigControllerUpdate$Params, context?: HttpContext): Observable<{
'code'?: number;
'pesan'?: string;
'data'?: CompanyConfigDto;
}> {
    return this.companyConfigControllerUpdate$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: CompanyConfigDto;
}>): {
'code'?: number;
'pesan'?: string;
'data'?: CompanyConfigDto;
} => r.body)
    );
  }

  /** Path part for operation `companyConfigControllerRemove()` */
  static readonly CompanyConfigControllerRemovePath = '/nonauth/company_config/company_config/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `companyConfigControllerRemove()` instead.
   *
   * This method doesn't expect any request body.
   */
  companyConfigControllerRemove$Response(params: CompanyConfigControllerRemove$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: CompanyConfigDto;
}>> {
    return companyConfigControllerRemove(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `companyConfigControllerRemove$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  companyConfigControllerRemove(params: CompanyConfigControllerRemove$Params, context?: HttpContext): Observable<{
'code'?: number;
'pesan'?: string;
'data'?: CompanyConfigDto;
}> {
    return this.companyConfigControllerRemove$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: CompanyConfigDto;
}>): {
'code'?: number;
'pesan'?: string;
'data'?: CompanyConfigDto;
} => r.body)
    );
  }

}

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { AmimsStockDto } from '../models/amims-stock-dto';
import { stockControllerCreate } from '../fn/stock/stock-controller-create';
import { StockControllerCreate$Params } from '../fn/stock/stock-controller-create';
import { stockControllerFindAll } from '../fn/stock/stock-controller-find-all';
import { StockControllerFindAll$Params } from '../fn/stock/stock-controller-find-all';
import { stockControllerFindOne } from '../fn/stock/stock-controller-find-one';
import { StockControllerFindOne$Params } from '../fn/stock/stock-controller-find-one';
import { stockControllerRemove } from '../fn/stock/stock-controller-remove';
import { StockControllerRemove$Params } from '../fn/stock/stock-controller-remove';
import { stockControllerUpdate } from '../fn/stock/stock-controller-update';
import { StockControllerUpdate$Params } from '../fn/stock/stock-controller-update';

@Injectable({ providedIn: 'root' })
export class StockService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `stockControllerFindAll()` */
  static readonly StockControllerFindAllPath = '/amims/stock/stock';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `stockControllerFindAll()` instead.
   *
   * This method doesn't expect any request body.
   */
  stockControllerFindAll$Response(params?: StockControllerFindAll$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: Array<AmimsStockDto>;
'total'?: number;
}>> {
    return stockControllerFindAll(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `stockControllerFindAll$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  stockControllerFindAll(params?: StockControllerFindAll$Params, context?: HttpContext): Observable<{
'code'?: number;
'pesan'?: string;
'data'?: Array<AmimsStockDto>;
'total'?: number;
}> {
    return this.stockControllerFindAll$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: Array<AmimsStockDto>;
'total'?: number;
}>): {
'code'?: number;
'pesan'?: string;
'data'?: Array<AmimsStockDto>;
'total'?: number;
} => r.body)
    );
  }

  /** Path part for operation `stockControllerCreate()` */
  static readonly StockControllerCreatePath = '/amims/stock/stock';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `stockControllerCreate()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  stockControllerCreate$Response(params: StockControllerCreate$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsStockDto;
}>> {
    return stockControllerCreate(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `stockControllerCreate$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  stockControllerCreate(params: StockControllerCreate$Params, context?: HttpContext): Observable<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsStockDto;
}> {
    return this.stockControllerCreate$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsStockDto;
}>): {
'code'?: number;
'pesan'?: string;
'data'?: AmimsStockDto;
} => r.body)
    );
  }

  /** Path part for operation `stockControllerFindOne()` */
  static readonly StockControllerFindOnePath = '/amims/stock/stock/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `stockControllerFindOne()` instead.
   *
   * This method doesn't expect any request body.
   */
  stockControllerFindOne$Response(params: StockControllerFindOne$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsStockDto;
}>> {
    return stockControllerFindOne(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `stockControllerFindOne$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  stockControllerFindOne(params: StockControllerFindOne$Params, context?: HttpContext): Observable<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsStockDto;
}> {
    return this.stockControllerFindOne$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsStockDto;
}>): {
'code'?: number;
'pesan'?: string;
'data'?: AmimsStockDto;
} => r.body)
    );
  }

  /** Path part for operation `stockControllerUpdate()` */
  static readonly StockControllerUpdatePath = '/amims/stock/stock/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `stockControllerUpdate()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  stockControllerUpdate$Response(params: StockControllerUpdate$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsStockDto;
}>> {
    return stockControllerUpdate(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `stockControllerUpdate$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  stockControllerUpdate(params: StockControllerUpdate$Params, context?: HttpContext): Observable<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsStockDto;
}> {
    return this.stockControllerUpdate$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsStockDto;
}>): {
'code'?: number;
'pesan'?: string;
'data'?: AmimsStockDto;
} => r.body)
    );
  }

  /** Path part for operation `stockControllerRemove()` */
  static readonly StockControllerRemovePath = '/amims/stock/stock/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `stockControllerRemove()` instead.
   *
   * This method doesn't expect any request body.
   */
  stockControllerRemove$Response(params: StockControllerRemove$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsStockDto;
}>> {
    return stockControllerRemove(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `stockControllerRemove$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  stockControllerRemove(params: StockControllerRemove$Params, context?: HttpContext): Observable<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsStockDto;
}> {
    return this.stockControllerRemove$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsStockDto;
}>): {
'code'?: number;
'pesan'?: string;
'data'?: AmimsStockDto;
} => r.body)
    );
  }

}

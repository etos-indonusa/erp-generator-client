/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { AmimsWarrantyDto } from '../models/amims-warranty-dto';
import { warrantyControllerCreate } from '../fn/warranty/warranty-controller-create';
import { WarrantyControllerCreate$Params } from '../fn/warranty/warranty-controller-create';
import { warrantyControllerFindAll } from '../fn/warranty/warranty-controller-find-all';
import { WarrantyControllerFindAll$Params } from '../fn/warranty/warranty-controller-find-all';
import { warrantyControllerFindOne } from '../fn/warranty/warranty-controller-find-one';
import { WarrantyControllerFindOne$Params } from '../fn/warranty/warranty-controller-find-one';
import { warrantyControllerRemove } from '../fn/warranty/warranty-controller-remove';
import { WarrantyControllerRemove$Params } from '../fn/warranty/warranty-controller-remove';
import { warrantyControllerUpdate } from '../fn/warranty/warranty-controller-update';
import { WarrantyControllerUpdate$Params } from '../fn/warranty/warranty-controller-update';

@Injectable({ providedIn: 'root' })
export class WarrantyService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `warrantyControllerFindAll()` */
  static readonly WarrantyControllerFindAllPath = '/amims/warranty/warranty';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `warrantyControllerFindAll()` instead.
   *
   * This method doesn't expect any request body.
   */
  warrantyControllerFindAll$Response(params?: WarrantyControllerFindAll$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: Array<AmimsWarrantyDto>;
'total'?: number;
}>> {
    return warrantyControllerFindAll(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `warrantyControllerFindAll$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  warrantyControllerFindAll(params?: WarrantyControllerFindAll$Params, context?: HttpContext): Observable<{
'code'?: number;
'pesan'?: string;
'data'?: Array<AmimsWarrantyDto>;
'total'?: number;
}> {
    return this.warrantyControllerFindAll$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: Array<AmimsWarrantyDto>;
'total'?: number;
}>): {
'code'?: number;
'pesan'?: string;
'data'?: Array<AmimsWarrantyDto>;
'total'?: number;
} => r.body)
    );
  }

  /** Path part for operation `warrantyControllerCreate()` */
  static readonly WarrantyControllerCreatePath = '/amims/warranty/warranty';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `warrantyControllerCreate()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  warrantyControllerCreate$Response(params: WarrantyControllerCreate$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsWarrantyDto;
}>> {
    return warrantyControllerCreate(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `warrantyControllerCreate$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  warrantyControllerCreate(params: WarrantyControllerCreate$Params, context?: HttpContext): Observable<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsWarrantyDto;
}> {
    return this.warrantyControllerCreate$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsWarrantyDto;
}>): {
'code'?: number;
'pesan'?: string;
'data'?: AmimsWarrantyDto;
} => r.body)
    );
  }

  /** Path part for operation `warrantyControllerFindOne()` */
  static readonly WarrantyControllerFindOnePath = '/amims/warranty/warranty/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `warrantyControllerFindOne()` instead.
   *
   * This method doesn't expect any request body.
   */
  warrantyControllerFindOne$Response(params: WarrantyControllerFindOne$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsWarrantyDto;
}>> {
    return warrantyControllerFindOne(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `warrantyControllerFindOne$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  warrantyControllerFindOne(params: WarrantyControllerFindOne$Params, context?: HttpContext): Observable<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsWarrantyDto;
}> {
    return this.warrantyControllerFindOne$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsWarrantyDto;
}>): {
'code'?: number;
'pesan'?: string;
'data'?: AmimsWarrantyDto;
} => r.body)
    );
  }

  /** Path part for operation `warrantyControllerUpdate()` */
  static readonly WarrantyControllerUpdatePath = '/amims/warranty/warranty/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `warrantyControllerUpdate()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  warrantyControllerUpdate$Response(params: WarrantyControllerUpdate$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsWarrantyDto;
}>> {
    return warrantyControllerUpdate(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `warrantyControllerUpdate$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  warrantyControllerUpdate(params: WarrantyControllerUpdate$Params, context?: HttpContext): Observable<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsWarrantyDto;
}> {
    return this.warrantyControllerUpdate$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsWarrantyDto;
}>): {
'code'?: number;
'pesan'?: string;
'data'?: AmimsWarrantyDto;
} => r.body)
    );
  }

  /** Path part for operation `warrantyControllerRemove()` */
  static readonly WarrantyControllerRemovePath = '/amims/warranty/warranty/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `warrantyControllerRemove()` instead.
   *
   * This method doesn't expect any request body.
   */
  warrantyControllerRemove$Response(params: WarrantyControllerRemove$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsWarrantyDto;
}>> {
    return warrantyControllerRemove(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `warrantyControllerRemove$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  warrantyControllerRemove(params: WarrantyControllerRemove$Params, context?: HttpContext): Observable<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsWarrantyDto;
}> {
    return this.warrantyControllerRemove$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsWarrantyDto;
}>): {
'code'?: number;
'pesan'?: string;
'data'?: AmimsWarrantyDto;
} => r.body)
    );
  }

}

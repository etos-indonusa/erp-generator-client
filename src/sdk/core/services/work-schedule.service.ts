/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { workScheduleControllerCreate } from '../fn/work-schedule/work-schedule-controller-create';
import { WorkScheduleControllerCreate$Params } from '../fn/work-schedule/work-schedule-controller-create';
import { workScheduleControllerFindAll } from '../fn/work-schedule/work-schedule-controller-find-all';
import { WorkScheduleControllerFindAll$Params } from '../fn/work-schedule/work-schedule-controller-find-all';
import { workScheduleControllerFindOne } from '../fn/work-schedule/work-schedule-controller-find-one';
import { WorkScheduleControllerFindOne$Params } from '../fn/work-schedule/work-schedule-controller-find-one';
import { workScheduleControllerRemove } from '../fn/work-schedule/work-schedule-controller-remove';
import { WorkScheduleControllerRemove$Params } from '../fn/work-schedule/work-schedule-controller-remove';
import { workScheduleControllerUpdate } from '../fn/work-schedule/work-schedule-controller-update';
import { WorkScheduleControllerUpdate$Params } from '../fn/work-schedule/work-schedule-controller-update';
import { WorkScheduleDto } from '../models/work-schedule-dto';

@Injectable({ providedIn: 'root' })
export class WorkScheduleService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `workScheduleControllerFindAll()` */
  static readonly WorkScheduleControllerFindAllPath = '/nonauth/work_schedule/work_schedule';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `workScheduleControllerFindAll()` instead.
   *
   * This method doesn't expect any request body.
   */
  workScheduleControllerFindAll$Response(params?: WorkScheduleControllerFindAll$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: Array<WorkScheduleDto>;
'total'?: number;
}>> {
    return workScheduleControllerFindAll(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `workScheduleControllerFindAll$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  workScheduleControllerFindAll(params?: WorkScheduleControllerFindAll$Params, context?: HttpContext): Observable<{
'code'?: number;
'pesan'?: string;
'data'?: Array<WorkScheduleDto>;
'total'?: number;
}> {
    return this.workScheduleControllerFindAll$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: Array<WorkScheduleDto>;
'total'?: number;
}>): {
'code'?: number;
'pesan'?: string;
'data'?: Array<WorkScheduleDto>;
'total'?: number;
} => r.body)
    );
  }

  /** Path part for operation `workScheduleControllerCreate()` */
  static readonly WorkScheduleControllerCreatePath = '/nonauth/work_schedule/work_schedule';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `workScheduleControllerCreate()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  workScheduleControllerCreate$Response(params: WorkScheduleControllerCreate$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: WorkScheduleDto;
}>> {
    return workScheduleControllerCreate(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `workScheduleControllerCreate$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  workScheduleControllerCreate(params: WorkScheduleControllerCreate$Params, context?: HttpContext): Observable<{
'code'?: number;
'pesan'?: string;
'data'?: WorkScheduleDto;
}> {
    return this.workScheduleControllerCreate$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: WorkScheduleDto;
}>): {
'code'?: number;
'pesan'?: string;
'data'?: WorkScheduleDto;
} => r.body)
    );
  }

  /** Path part for operation `workScheduleControllerFindOne()` */
  static readonly WorkScheduleControllerFindOnePath = '/nonauth/work_schedule/work_schedule/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `workScheduleControllerFindOne()` instead.
   *
   * This method doesn't expect any request body.
   */
  workScheduleControllerFindOne$Response(params: WorkScheduleControllerFindOne$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: WorkScheduleDto;
}>> {
    return workScheduleControllerFindOne(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `workScheduleControllerFindOne$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  workScheduleControllerFindOne(params: WorkScheduleControllerFindOne$Params, context?: HttpContext): Observable<{
'code'?: number;
'pesan'?: string;
'data'?: WorkScheduleDto;
}> {
    return this.workScheduleControllerFindOne$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: WorkScheduleDto;
}>): {
'code'?: number;
'pesan'?: string;
'data'?: WorkScheduleDto;
} => r.body)
    );
  }

  /** Path part for operation `workScheduleControllerUpdate()` */
  static readonly WorkScheduleControllerUpdatePath = '/nonauth/work_schedule/work_schedule/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `workScheduleControllerUpdate()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  workScheduleControllerUpdate$Response(params: WorkScheduleControllerUpdate$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: WorkScheduleDto;
}>> {
    return workScheduleControllerUpdate(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `workScheduleControllerUpdate$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  workScheduleControllerUpdate(params: WorkScheduleControllerUpdate$Params, context?: HttpContext): Observable<{
'code'?: number;
'pesan'?: string;
'data'?: WorkScheduleDto;
}> {
    return this.workScheduleControllerUpdate$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: WorkScheduleDto;
}>): {
'code'?: number;
'pesan'?: string;
'data'?: WorkScheduleDto;
} => r.body)
    );
  }

  /** Path part for operation `workScheduleControllerRemove()` */
  static readonly WorkScheduleControllerRemovePath = '/nonauth/work_schedule/work_schedule/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `workScheduleControllerRemove()` instead.
   *
   * This method doesn't expect any request body.
   */
  workScheduleControllerRemove$Response(params: WorkScheduleControllerRemove$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: WorkScheduleDto;
}>> {
    return workScheduleControllerRemove(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `workScheduleControllerRemove$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  workScheduleControllerRemove(params: WorkScheduleControllerRemove$Params, context?: HttpContext): Observable<{
'code'?: number;
'pesan'?: string;
'data'?: WorkScheduleDto;
}> {
    return this.workScheduleControllerRemove$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: WorkScheduleDto;
}>): {
'code'?: number;
'pesan'?: string;
'data'?: WorkScheduleDto;
} => r.body)
    );
  }

}

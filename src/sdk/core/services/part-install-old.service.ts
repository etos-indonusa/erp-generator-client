/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { AmimsPartInstallOldDto } from '../models/amims-part-install-old-dto';
import { partInstallOldControllerCreate } from '../fn/part-install-old/part-install-old-controller-create';
import { PartInstallOldControllerCreate$Params } from '../fn/part-install-old/part-install-old-controller-create';
import { partInstallOldControllerFindAll } from '../fn/part-install-old/part-install-old-controller-find-all';
import { PartInstallOldControllerFindAll$Params } from '../fn/part-install-old/part-install-old-controller-find-all';
import { partInstallOldControllerFindOne } from '../fn/part-install-old/part-install-old-controller-find-one';
import { PartInstallOldControllerFindOne$Params } from '../fn/part-install-old/part-install-old-controller-find-one';
import { partInstallOldControllerRemove } from '../fn/part-install-old/part-install-old-controller-remove';
import { PartInstallOldControllerRemove$Params } from '../fn/part-install-old/part-install-old-controller-remove';
import { partInstallOldControllerUpdate } from '../fn/part-install-old/part-install-old-controller-update';
import { PartInstallOldControllerUpdate$Params } from '../fn/part-install-old/part-install-old-controller-update';

@Injectable({ providedIn: 'root' })
export class PartInstallOldService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `partInstallOldControllerFindAll()` */
  static readonly PartInstallOldControllerFindAllPath = '/amims/part_install_old/part_install_old';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `partInstallOldControllerFindAll()` instead.
   *
   * This method doesn't expect any request body.
   */
  partInstallOldControllerFindAll$Response(params?: PartInstallOldControllerFindAll$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: Array<AmimsPartInstallOldDto>;
'total'?: number;
}>> {
    return partInstallOldControllerFindAll(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `partInstallOldControllerFindAll$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  partInstallOldControllerFindAll(params?: PartInstallOldControllerFindAll$Params, context?: HttpContext): Observable<{
'code'?: number;
'pesan'?: string;
'data'?: Array<AmimsPartInstallOldDto>;
'total'?: number;
}> {
    return this.partInstallOldControllerFindAll$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: Array<AmimsPartInstallOldDto>;
'total'?: number;
}>): {
'code'?: number;
'pesan'?: string;
'data'?: Array<AmimsPartInstallOldDto>;
'total'?: number;
} => r.body)
    );
  }

  /** Path part for operation `partInstallOldControllerCreate()` */
  static readonly PartInstallOldControllerCreatePath = '/amims/part_install_old/part_install_old';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `partInstallOldControllerCreate()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  partInstallOldControllerCreate$Response(params: PartInstallOldControllerCreate$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsPartInstallOldDto;
}>> {
    return partInstallOldControllerCreate(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `partInstallOldControllerCreate$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  partInstallOldControllerCreate(params: PartInstallOldControllerCreate$Params, context?: HttpContext): Observable<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsPartInstallOldDto;
}> {
    return this.partInstallOldControllerCreate$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsPartInstallOldDto;
}>): {
'code'?: number;
'pesan'?: string;
'data'?: AmimsPartInstallOldDto;
} => r.body)
    );
  }

  /** Path part for operation `partInstallOldControllerFindOne()` */
  static readonly PartInstallOldControllerFindOnePath = '/amims/part_install_old/part_install_old/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `partInstallOldControllerFindOne()` instead.
   *
   * This method doesn't expect any request body.
   */
  partInstallOldControllerFindOne$Response(params: PartInstallOldControllerFindOne$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsPartInstallOldDto;
}>> {
    return partInstallOldControllerFindOne(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `partInstallOldControllerFindOne$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  partInstallOldControllerFindOne(params: PartInstallOldControllerFindOne$Params, context?: HttpContext): Observable<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsPartInstallOldDto;
}> {
    return this.partInstallOldControllerFindOne$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsPartInstallOldDto;
}>): {
'code'?: number;
'pesan'?: string;
'data'?: AmimsPartInstallOldDto;
} => r.body)
    );
  }

  /** Path part for operation `partInstallOldControllerUpdate()` */
  static readonly PartInstallOldControllerUpdatePath = '/amims/part_install_old/part_install_old/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `partInstallOldControllerUpdate()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  partInstallOldControllerUpdate$Response(params: PartInstallOldControllerUpdate$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsPartInstallOldDto;
}>> {
    return partInstallOldControllerUpdate(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `partInstallOldControllerUpdate$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  partInstallOldControllerUpdate(params: PartInstallOldControllerUpdate$Params, context?: HttpContext): Observable<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsPartInstallOldDto;
}> {
    return this.partInstallOldControllerUpdate$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsPartInstallOldDto;
}>): {
'code'?: number;
'pesan'?: string;
'data'?: AmimsPartInstallOldDto;
} => r.body)
    );
  }

  /** Path part for operation `partInstallOldControllerRemove()` */
  static readonly PartInstallOldControllerRemovePath = '/amims/part_install_old/part_install_old/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `partInstallOldControllerRemove()` instead.
   *
   * This method doesn't expect any request body.
   */
  partInstallOldControllerRemove$Response(params: PartInstallOldControllerRemove$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsPartInstallOldDto;
}>> {
    return partInstallOldControllerRemove(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `partInstallOldControllerRemove$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  partInstallOldControllerRemove(params: PartInstallOldControllerRemove$Params, context?: HttpContext): Observable<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsPartInstallOldDto;
}> {
    return this.partInstallOldControllerRemove$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsPartInstallOldDto;
}>): {
'code'?: number;
'pesan'?: string;
'data'?: AmimsPartInstallOldDto;
} => r.body)
    );
  }

}

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { AmimsShippingDto } from '../models/amims-shipping-dto';
import { shippingControllerCreate } from '../fn/shipping/shipping-controller-create';
import { ShippingControllerCreate$Params } from '../fn/shipping/shipping-controller-create';
import { shippingControllerFindAll } from '../fn/shipping/shipping-controller-find-all';
import { ShippingControllerFindAll$Params } from '../fn/shipping/shipping-controller-find-all';
import { shippingControllerFindOne } from '../fn/shipping/shipping-controller-find-one';
import { ShippingControllerFindOne$Params } from '../fn/shipping/shipping-controller-find-one';
import { shippingControllerRemove } from '../fn/shipping/shipping-controller-remove';
import { ShippingControllerRemove$Params } from '../fn/shipping/shipping-controller-remove';
import { shippingControllerUpdate } from '../fn/shipping/shipping-controller-update';
import { ShippingControllerUpdate$Params } from '../fn/shipping/shipping-controller-update';

@Injectable({ providedIn: 'root' })
export class ShippingService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `shippingControllerFindAll()` */
  static readonly ShippingControllerFindAllPath = '/amims/shipping/shipping';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `shippingControllerFindAll()` instead.
   *
   * This method doesn't expect any request body.
   */
  shippingControllerFindAll$Response(params?: ShippingControllerFindAll$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: Array<AmimsShippingDto>;
'total'?: number;
}>> {
    return shippingControllerFindAll(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `shippingControllerFindAll$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  shippingControllerFindAll(params?: ShippingControllerFindAll$Params, context?: HttpContext): Observable<{
'code'?: number;
'pesan'?: string;
'data'?: Array<AmimsShippingDto>;
'total'?: number;
}> {
    return this.shippingControllerFindAll$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: Array<AmimsShippingDto>;
'total'?: number;
}>): {
'code'?: number;
'pesan'?: string;
'data'?: Array<AmimsShippingDto>;
'total'?: number;
} => r.body)
    );
  }

  /** Path part for operation `shippingControllerCreate()` */
  static readonly ShippingControllerCreatePath = '/amims/shipping/shipping';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `shippingControllerCreate()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  shippingControllerCreate$Response(params: ShippingControllerCreate$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsShippingDto;
}>> {
    return shippingControllerCreate(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `shippingControllerCreate$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  shippingControllerCreate(params: ShippingControllerCreate$Params, context?: HttpContext): Observable<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsShippingDto;
}> {
    return this.shippingControllerCreate$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsShippingDto;
}>): {
'code'?: number;
'pesan'?: string;
'data'?: AmimsShippingDto;
} => r.body)
    );
  }

  /** Path part for operation `shippingControllerFindOne()` */
  static readonly ShippingControllerFindOnePath = '/amims/shipping/shipping/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `shippingControllerFindOne()` instead.
   *
   * This method doesn't expect any request body.
   */
  shippingControllerFindOne$Response(params: ShippingControllerFindOne$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsShippingDto;
}>> {
    return shippingControllerFindOne(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `shippingControllerFindOne$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  shippingControllerFindOne(params: ShippingControllerFindOne$Params, context?: HttpContext): Observable<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsShippingDto;
}> {
    return this.shippingControllerFindOne$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsShippingDto;
}>): {
'code'?: number;
'pesan'?: string;
'data'?: AmimsShippingDto;
} => r.body)
    );
  }

  /** Path part for operation `shippingControllerUpdate()` */
  static readonly ShippingControllerUpdatePath = '/amims/shipping/shipping/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `shippingControllerUpdate()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  shippingControllerUpdate$Response(params: ShippingControllerUpdate$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsShippingDto;
}>> {
    return shippingControllerUpdate(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `shippingControllerUpdate$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  shippingControllerUpdate(params: ShippingControllerUpdate$Params, context?: HttpContext): Observable<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsShippingDto;
}> {
    return this.shippingControllerUpdate$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsShippingDto;
}>): {
'code'?: number;
'pesan'?: string;
'data'?: AmimsShippingDto;
} => r.body)
    );
  }

  /** Path part for operation `shippingControllerRemove()` */
  static readonly ShippingControllerRemovePath = '/amims/shipping/shipping/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `shippingControllerRemove()` instead.
   *
   * This method doesn't expect any request body.
   */
  shippingControllerRemove$Response(params: ShippingControllerRemove$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsShippingDto;
}>> {
    return shippingControllerRemove(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `shippingControllerRemove$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  shippingControllerRemove(params: ShippingControllerRemove$Params, context?: HttpContext): Observable<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsShippingDto;
}> {
    return this.shippingControllerRemove$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsShippingDto;
}>): {
'code'?: number;
'pesan'?: string;
'data'?: AmimsShippingDto;
} => r.body)
    );
  }

}

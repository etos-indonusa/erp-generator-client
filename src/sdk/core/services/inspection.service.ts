/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { AmimsInspectionDto } from '../models/amims-inspection-dto';
import { inspectionControllerCreate } from '../fn/inspection/inspection-controller-create';
import { InspectionControllerCreate$Params } from '../fn/inspection/inspection-controller-create';
import { inspectionControllerFindAll } from '../fn/inspection/inspection-controller-find-all';
import { InspectionControllerFindAll$Params } from '../fn/inspection/inspection-controller-find-all';
import { inspectionControllerFindOne } from '../fn/inspection/inspection-controller-find-one';
import { InspectionControllerFindOne$Params } from '../fn/inspection/inspection-controller-find-one';
import { inspectionControllerRemove } from '../fn/inspection/inspection-controller-remove';
import { InspectionControllerRemove$Params } from '../fn/inspection/inspection-controller-remove';
import { inspectionControllerUpdate } from '../fn/inspection/inspection-controller-update';
import { InspectionControllerUpdate$Params } from '../fn/inspection/inspection-controller-update';

@Injectable({ providedIn: 'root' })
export class InspectionService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `inspectionControllerFindAll()` */
  static readonly InspectionControllerFindAllPath = '/amims/inspection/inspection';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `inspectionControllerFindAll()` instead.
   *
   * This method doesn't expect any request body.
   */
  inspectionControllerFindAll$Response(params?: InspectionControllerFindAll$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: Array<AmimsInspectionDto>;
'total'?: number;
}>> {
    return inspectionControllerFindAll(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `inspectionControllerFindAll$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  inspectionControllerFindAll(params?: InspectionControllerFindAll$Params, context?: HttpContext): Observable<{
'code'?: number;
'pesan'?: string;
'data'?: Array<AmimsInspectionDto>;
'total'?: number;
}> {
    return this.inspectionControllerFindAll$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: Array<AmimsInspectionDto>;
'total'?: number;
}>): {
'code'?: number;
'pesan'?: string;
'data'?: Array<AmimsInspectionDto>;
'total'?: number;
} => r.body)
    );
  }

  /** Path part for operation `inspectionControllerCreate()` */
  static readonly InspectionControllerCreatePath = '/amims/inspection/inspection';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `inspectionControllerCreate()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  inspectionControllerCreate$Response(params: InspectionControllerCreate$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsInspectionDto;
}>> {
    return inspectionControllerCreate(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `inspectionControllerCreate$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  inspectionControllerCreate(params: InspectionControllerCreate$Params, context?: HttpContext): Observable<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsInspectionDto;
}> {
    return this.inspectionControllerCreate$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsInspectionDto;
}>): {
'code'?: number;
'pesan'?: string;
'data'?: AmimsInspectionDto;
} => r.body)
    );
  }

  /** Path part for operation `inspectionControllerFindOne()` */
  static readonly InspectionControllerFindOnePath = '/amims/inspection/inspection/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `inspectionControllerFindOne()` instead.
   *
   * This method doesn't expect any request body.
   */
  inspectionControllerFindOne$Response(params: InspectionControllerFindOne$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsInspectionDto;
}>> {
    return inspectionControllerFindOne(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `inspectionControllerFindOne$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  inspectionControllerFindOne(params: InspectionControllerFindOne$Params, context?: HttpContext): Observable<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsInspectionDto;
}> {
    return this.inspectionControllerFindOne$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsInspectionDto;
}>): {
'code'?: number;
'pesan'?: string;
'data'?: AmimsInspectionDto;
} => r.body)
    );
  }

  /** Path part for operation `inspectionControllerUpdate()` */
  static readonly InspectionControllerUpdatePath = '/amims/inspection/inspection/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `inspectionControllerUpdate()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  inspectionControllerUpdate$Response(params: InspectionControllerUpdate$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsInspectionDto;
}>> {
    return inspectionControllerUpdate(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `inspectionControllerUpdate$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  inspectionControllerUpdate(params: InspectionControllerUpdate$Params, context?: HttpContext): Observable<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsInspectionDto;
}> {
    return this.inspectionControllerUpdate$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsInspectionDto;
}>): {
'code'?: number;
'pesan'?: string;
'data'?: AmimsInspectionDto;
} => r.body)
    );
  }

  /** Path part for operation `inspectionControllerRemove()` */
  static readonly InspectionControllerRemovePath = '/amims/inspection/inspection/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `inspectionControllerRemove()` instead.
   *
   * This method doesn't expect any request body.
   */
  inspectionControllerRemove$Response(params: InspectionControllerRemove$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsInspectionDto;
}>> {
    return inspectionControllerRemove(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `inspectionControllerRemove$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  inspectionControllerRemove(params: InspectionControllerRemove$Params, context?: HttpContext): Observable<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsInspectionDto;
}> {
    return this.inspectionControllerRemove$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsInspectionDto;
}>): {
'code'?: number;
'pesan'?: string;
'data'?: AmimsInspectionDto;
} => r.body)
    );
  }

}

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { AmimsPartidDto } from '../models/amims-partid-dto';
import { partidControllerCreate } from '../fn/partid/partid-controller-create';
import { PartidControllerCreate$Params } from '../fn/partid/partid-controller-create';
import { partidControllerFindAll } from '../fn/partid/partid-controller-find-all';
import { PartidControllerFindAll$Params } from '../fn/partid/partid-controller-find-all';
import { partidControllerFindOne } from '../fn/partid/partid-controller-find-one';
import { PartidControllerFindOne$Params } from '../fn/partid/partid-controller-find-one';
import { partidControllerRemove } from '../fn/partid/partid-controller-remove';
import { PartidControllerRemove$Params } from '../fn/partid/partid-controller-remove';
import { partidControllerUpdate } from '../fn/partid/partid-controller-update';
import { PartidControllerUpdate$Params } from '../fn/partid/partid-controller-update';

@Injectable({ providedIn: 'root' })
export class PartidService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `partidControllerFindAll()` */
  static readonly PartidControllerFindAllPath = '/amims/partid/partid';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `partidControllerFindAll()` instead.
   *
   * This method doesn't expect any request body.
   */
  partidControllerFindAll$Response(params?: PartidControllerFindAll$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: Array<AmimsPartidDto>;
'total'?: number;
}>> {
    return partidControllerFindAll(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `partidControllerFindAll$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  partidControllerFindAll(params?: PartidControllerFindAll$Params, context?: HttpContext): Observable<{
'code'?: number;
'pesan'?: string;
'data'?: Array<AmimsPartidDto>;
'total'?: number;
}> {
    return this.partidControllerFindAll$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: Array<AmimsPartidDto>;
'total'?: number;
}>): {
'code'?: number;
'pesan'?: string;
'data'?: Array<AmimsPartidDto>;
'total'?: number;
} => r.body)
    );
  }

  /** Path part for operation `partidControllerCreate()` */
  static readonly PartidControllerCreatePath = '/amims/partid/partid';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `partidControllerCreate()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  partidControllerCreate$Response(params: PartidControllerCreate$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsPartidDto;
}>> {
    return partidControllerCreate(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `partidControllerCreate$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  partidControllerCreate(params: PartidControllerCreate$Params, context?: HttpContext): Observable<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsPartidDto;
}> {
    return this.partidControllerCreate$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsPartidDto;
}>): {
'code'?: number;
'pesan'?: string;
'data'?: AmimsPartidDto;
} => r.body)
    );
  }

  /** Path part for operation `partidControllerFindOne()` */
  static readonly PartidControllerFindOnePath = '/amims/partid/partid/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `partidControllerFindOne()` instead.
   *
   * This method doesn't expect any request body.
   */
  partidControllerFindOne$Response(params: PartidControllerFindOne$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsPartidDto;
}>> {
    return partidControllerFindOne(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `partidControllerFindOne$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  partidControllerFindOne(params: PartidControllerFindOne$Params, context?: HttpContext): Observable<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsPartidDto;
}> {
    return this.partidControllerFindOne$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsPartidDto;
}>): {
'code'?: number;
'pesan'?: string;
'data'?: AmimsPartidDto;
} => r.body)
    );
  }

  /** Path part for operation `partidControllerUpdate()` */
  static readonly PartidControllerUpdatePath = '/amims/partid/partid/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `partidControllerUpdate()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  partidControllerUpdate$Response(params: PartidControllerUpdate$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsPartidDto;
}>> {
    return partidControllerUpdate(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `partidControllerUpdate$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  partidControllerUpdate(params: PartidControllerUpdate$Params, context?: HttpContext): Observable<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsPartidDto;
}> {
    return this.partidControllerUpdate$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsPartidDto;
}>): {
'code'?: number;
'pesan'?: string;
'data'?: AmimsPartidDto;
} => r.body)
    );
  }

  /** Path part for operation `partidControllerRemove()` */
  static readonly PartidControllerRemovePath = '/amims/partid/partid/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `partidControllerRemove()` instead.
   *
   * This method doesn't expect any request body.
   */
  partidControllerRemove$Response(params: PartidControllerRemove$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsPartidDto;
}>> {
    return partidControllerRemove(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `partidControllerRemove$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  partidControllerRemove(params: PartidControllerRemove$Params, context?: HttpContext): Observable<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsPartidDto;
}> {
    return this.partidControllerRemove$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsPartidDto;
}>): {
'code'?: number;
'pesan'?: string;
'data'?: AmimsPartidDto;
} => r.body)
    );
  }

}

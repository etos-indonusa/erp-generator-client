/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { AmimsCompanyDto } from '../models/amims-company-dto';
import { companyControllerCreate } from '../fn/company/company-controller-create';
import { CompanyControllerCreate$Params } from '../fn/company/company-controller-create';
import { companyControllerFindAll } from '../fn/company/company-controller-find-all';
import { CompanyControllerFindAll$Params } from '../fn/company/company-controller-find-all';
import { companyControllerFindOne } from '../fn/company/company-controller-find-one';
import { CompanyControllerFindOne$Params } from '../fn/company/company-controller-find-one';
import { companyControllerRemove } from '../fn/company/company-controller-remove';
import { CompanyControllerRemove$Params } from '../fn/company/company-controller-remove';
import { companyControllerUpdate } from '../fn/company/company-controller-update';
import { CompanyControllerUpdate$Params } from '../fn/company/company-controller-update';

@Injectable({ providedIn: 'root' })
export class CompanyService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `companyControllerFindAll()` */
  static readonly CompanyControllerFindAllPath = '/amims/company/company';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `companyControllerFindAll()` instead.
   *
   * This method doesn't expect any request body.
   */
  companyControllerFindAll$Response(params?: CompanyControllerFindAll$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: Array<AmimsCompanyDto>;
'total'?: number;
}>> {
    return companyControllerFindAll(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `companyControllerFindAll$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  companyControllerFindAll(params?: CompanyControllerFindAll$Params, context?: HttpContext): Observable<{
'code'?: number;
'pesan'?: string;
'data'?: Array<AmimsCompanyDto>;
'total'?: number;
}> {
    return this.companyControllerFindAll$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: Array<AmimsCompanyDto>;
'total'?: number;
}>): {
'code'?: number;
'pesan'?: string;
'data'?: Array<AmimsCompanyDto>;
'total'?: number;
} => r.body)
    );
  }

  /** Path part for operation `companyControllerCreate()` */
  static readonly CompanyControllerCreatePath = '/amims/company/company';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `companyControllerCreate()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  companyControllerCreate$Response(params: CompanyControllerCreate$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsCompanyDto;
}>> {
    return companyControllerCreate(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `companyControllerCreate$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  companyControllerCreate(params: CompanyControllerCreate$Params, context?: HttpContext): Observable<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsCompanyDto;
}> {
    return this.companyControllerCreate$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsCompanyDto;
}>): {
'code'?: number;
'pesan'?: string;
'data'?: AmimsCompanyDto;
} => r.body)
    );
  }

  /** Path part for operation `companyControllerFindOne()` */
  static readonly CompanyControllerFindOnePath = '/amims/company/company/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `companyControllerFindOne()` instead.
   *
   * This method doesn't expect any request body.
   */
  companyControllerFindOne$Response(params: CompanyControllerFindOne$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsCompanyDto;
}>> {
    return companyControllerFindOne(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `companyControllerFindOne$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  companyControllerFindOne(params: CompanyControllerFindOne$Params, context?: HttpContext): Observable<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsCompanyDto;
}> {
    return this.companyControllerFindOne$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsCompanyDto;
}>): {
'code'?: number;
'pesan'?: string;
'data'?: AmimsCompanyDto;
} => r.body)
    );
  }

  /** Path part for operation `companyControllerUpdate()` */
  static readonly CompanyControllerUpdatePath = '/amims/company/company/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `companyControllerUpdate()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  companyControllerUpdate$Response(params: CompanyControllerUpdate$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsCompanyDto;
}>> {
    return companyControllerUpdate(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `companyControllerUpdate$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  companyControllerUpdate(params: CompanyControllerUpdate$Params, context?: HttpContext): Observable<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsCompanyDto;
}> {
    return this.companyControllerUpdate$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsCompanyDto;
}>): {
'code'?: number;
'pesan'?: string;
'data'?: AmimsCompanyDto;
} => r.body)
    );
  }

  /** Path part for operation `companyControllerRemove()` */
  static readonly CompanyControllerRemovePath = '/amims/company/company/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `companyControllerRemove()` instead.
   *
   * This method doesn't expect any request body.
   */
  companyControllerRemove$Response(params: CompanyControllerRemove$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsCompanyDto;
}>> {
    return companyControllerRemove(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `companyControllerRemove$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  companyControllerRemove(params: CompanyControllerRemove$Params, context?: HttpContext): Observable<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsCompanyDto;
}> {
    return this.companyControllerRemove$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsCompanyDto;
}>): {
'code'?: number;
'pesan'?: string;
'data'?: AmimsCompanyDto;
} => r.body)
    );
  }

}

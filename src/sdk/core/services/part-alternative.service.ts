/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { AmimsPartAlternativeDto } from '../models/amims-part-alternative-dto';
import { partAlternativeControllerCreate } from '../fn/part-alternative/part-alternative-controller-create';
import { PartAlternativeControllerCreate$Params } from '../fn/part-alternative/part-alternative-controller-create';
import { partAlternativeControllerFindAll } from '../fn/part-alternative/part-alternative-controller-find-all';
import { PartAlternativeControllerFindAll$Params } from '../fn/part-alternative/part-alternative-controller-find-all';
import { partAlternativeControllerFindOne } from '../fn/part-alternative/part-alternative-controller-find-one';
import { PartAlternativeControllerFindOne$Params } from '../fn/part-alternative/part-alternative-controller-find-one';
import { partAlternativeControllerRemove } from '../fn/part-alternative/part-alternative-controller-remove';
import { PartAlternativeControllerRemove$Params } from '../fn/part-alternative/part-alternative-controller-remove';
import { partAlternativeControllerUpdate } from '../fn/part-alternative/part-alternative-controller-update';
import { PartAlternativeControllerUpdate$Params } from '../fn/part-alternative/part-alternative-controller-update';

@Injectable({ providedIn: 'root' })
export class PartAlternativeService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `partAlternativeControllerFindAll()` */
  static readonly PartAlternativeControllerFindAllPath = '/amims/part_alternative/part_alternative';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `partAlternativeControllerFindAll()` instead.
   *
   * This method doesn't expect any request body.
   */
  partAlternativeControllerFindAll$Response(params?: PartAlternativeControllerFindAll$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: Array<AmimsPartAlternativeDto>;
'total'?: number;
}>> {
    return partAlternativeControllerFindAll(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `partAlternativeControllerFindAll$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  partAlternativeControllerFindAll(params?: PartAlternativeControllerFindAll$Params, context?: HttpContext): Observable<{
'code'?: number;
'pesan'?: string;
'data'?: Array<AmimsPartAlternativeDto>;
'total'?: number;
}> {
    return this.partAlternativeControllerFindAll$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: Array<AmimsPartAlternativeDto>;
'total'?: number;
}>): {
'code'?: number;
'pesan'?: string;
'data'?: Array<AmimsPartAlternativeDto>;
'total'?: number;
} => r.body)
    );
  }

  /** Path part for operation `partAlternativeControllerCreate()` */
  static readonly PartAlternativeControllerCreatePath = '/amims/part_alternative/part_alternative';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `partAlternativeControllerCreate()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  partAlternativeControllerCreate$Response(params: PartAlternativeControllerCreate$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsPartAlternativeDto;
}>> {
    return partAlternativeControllerCreate(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `partAlternativeControllerCreate$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  partAlternativeControllerCreate(params: PartAlternativeControllerCreate$Params, context?: HttpContext): Observable<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsPartAlternativeDto;
}> {
    return this.partAlternativeControllerCreate$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsPartAlternativeDto;
}>): {
'code'?: number;
'pesan'?: string;
'data'?: AmimsPartAlternativeDto;
} => r.body)
    );
  }

  /** Path part for operation `partAlternativeControllerFindOne()` */
  static readonly PartAlternativeControllerFindOnePath = '/amims/part_alternative/part_alternative/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `partAlternativeControllerFindOne()` instead.
   *
   * This method doesn't expect any request body.
   */
  partAlternativeControllerFindOne$Response(params: PartAlternativeControllerFindOne$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsPartAlternativeDto;
}>> {
    return partAlternativeControllerFindOne(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `partAlternativeControllerFindOne$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  partAlternativeControllerFindOne(params: PartAlternativeControllerFindOne$Params, context?: HttpContext): Observable<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsPartAlternativeDto;
}> {
    return this.partAlternativeControllerFindOne$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsPartAlternativeDto;
}>): {
'code'?: number;
'pesan'?: string;
'data'?: AmimsPartAlternativeDto;
} => r.body)
    );
  }

  /** Path part for operation `partAlternativeControllerUpdate()` */
  static readonly PartAlternativeControllerUpdatePath = '/amims/part_alternative/part_alternative/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `partAlternativeControllerUpdate()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  partAlternativeControllerUpdate$Response(params: PartAlternativeControllerUpdate$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsPartAlternativeDto;
}>> {
    return partAlternativeControllerUpdate(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `partAlternativeControllerUpdate$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  partAlternativeControllerUpdate(params: PartAlternativeControllerUpdate$Params, context?: HttpContext): Observable<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsPartAlternativeDto;
}> {
    return this.partAlternativeControllerUpdate$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsPartAlternativeDto;
}>): {
'code'?: number;
'pesan'?: string;
'data'?: AmimsPartAlternativeDto;
} => r.body)
    );
  }

  /** Path part for operation `partAlternativeControllerRemove()` */
  static readonly PartAlternativeControllerRemovePath = '/amims/part_alternative/part_alternative/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `partAlternativeControllerRemove()` instead.
   *
   * This method doesn't expect any request body.
   */
  partAlternativeControllerRemove$Response(params: PartAlternativeControllerRemove$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsPartAlternativeDto;
}>> {
    return partAlternativeControllerRemove(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `partAlternativeControllerRemove$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  partAlternativeControllerRemove(params: PartAlternativeControllerRemove$Params, context?: HttpContext): Observable<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsPartAlternativeDto;
}> {
    return this.partAlternativeControllerRemove$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsPartAlternativeDto;
}>): {
'code'?: number;
'pesan'?: string;
'data'?: AmimsPartAlternativeDto;
} => r.body)
    );
  }

}

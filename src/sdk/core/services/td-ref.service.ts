/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { AmimsTdRefDto } from '../models/amims-td-ref-dto';
import { tdRefControllerCreate } from '../fn/td-ref/td-ref-controller-create';
import { TdRefControllerCreate$Params } from '../fn/td-ref/td-ref-controller-create';
import { tdRefControllerFindAll } from '../fn/td-ref/td-ref-controller-find-all';
import { TdRefControllerFindAll$Params } from '../fn/td-ref/td-ref-controller-find-all';
import { tdRefControllerFindOne } from '../fn/td-ref/td-ref-controller-find-one';
import { TdRefControllerFindOne$Params } from '../fn/td-ref/td-ref-controller-find-one';
import { tdRefControllerRemove } from '../fn/td-ref/td-ref-controller-remove';
import { TdRefControllerRemove$Params } from '../fn/td-ref/td-ref-controller-remove';
import { tdRefControllerUpdate } from '../fn/td-ref/td-ref-controller-update';
import { TdRefControllerUpdate$Params } from '../fn/td-ref/td-ref-controller-update';

@Injectable({ providedIn: 'root' })
export class TdRefService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `tdRefControllerFindAll()` */
  static readonly TdRefControllerFindAllPath = '/amims/td_ref/td_ref';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `tdRefControllerFindAll()` instead.
   *
   * This method doesn't expect any request body.
   */
  tdRefControllerFindAll$Response(params?: TdRefControllerFindAll$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: Array<AmimsTdRefDto>;
'total'?: number;
}>> {
    return tdRefControllerFindAll(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `tdRefControllerFindAll$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  tdRefControllerFindAll(params?: TdRefControllerFindAll$Params, context?: HttpContext): Observable<{
'code'?: number;
'pesan'?: string;
'data'?: Array<AmimsTdRefDto>;
'total'?: number;
}> {
    return this.tdRefControllerFindAll$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: Array<AmimsTdRefDto>;
'total'?: number;
}>): {
'code'?: number;
'pesan'?: string;
'data'?: Array<AmimsTdRefDto>;
'total'?: number;
} => r.body)
    );
  }

  /** Path part for operation `tdRefControllerCreate()` */
  static readonly TdRefControllerCreatePath = '/amims/td_ref/td_ref';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `tdRefControllerCreate()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  tdRefControllerCreate$Response(params: TdRefControllerCreate$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsTdRefDto;
}>> {
    return tdRefControllerCreate(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `tdRefControllerCreate$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  tdRefControllerCreate(params: TdRefControllerCreate$Params, context?: HttpContext): Observable<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsTdRefDto;
}> {
    return this.tdRefControllerCreate$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsTdRefDto;
}>): {
'code'?: number;
'pesan'?: string;
'data'?: AmimsTdRefDto;
} => r.body)
    );
  }

  /** Path part for operation `tdRefControllerFindOne()` */
  static readonly TdRefControllerFindOnePath = '/amims/td_ref/td_ref/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `tdRefControllerFindOne()` instead.
   *
   * This method doesn't expect any request body.
   */
  tdRefControllerFindOne$Response(params: TdRefControllerFindOne$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsTdRefDto;
}>> {
    return tdRefControllerFindOne(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `tdRefControllerFindOne$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  tdRefControllerFindOne(params: TdRefControllerFindOne$Params, context?: HttpContext): Observable<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsTdRefDto;
}> {
    return this.tdRefControllerFindOne$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsTdRefDto;
}>): {
'code'?: number;
'pesan'?: string;
'data'?: AmimsTdRefDto;
} => r.body)
    );
  }

  /** Path part for operation `tdRefControllerUpdate()` */
  static readonly TdRefControllerUpdatePath = '/amims/td_ref/td_ref/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `tdRefControllerUpdate()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  tdRefControllerUpdate$Response(params: TdRefControllerUpdate$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsTdRefDto;
}>> {
    return tdRefControllerUpdate(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `tdRefControllerUpdate$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  tdRefControllerUpdate(params: TdRefControllerUpdate$Params, context?: HttpContext): Observable<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsTdRefDto;
}> {
    return this.tdRefControllerUpdate$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsTdRefDto;
}>): {
'code'?: number;
'pesan'?: string;
'data'?: AmimsTdRefDto;
} => r.body)
    );
  }

  /** Path part for operation `tdRefControllerRemove()` */
  static readonly TdRefControllerRemovePath = '/amims/td_ref/td_ref/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `tdRefControllerRemove()` instead.
   *
   * This method doesn't expect any request body.
   */
  tdRefControllerRemove$Response(params: TdRefControllerRemove$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsTdRefDto;
}>> {
    return tdRefControllerRemove(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `tdRefControllerRemove$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  tdRefControllerRemove(params: TdRefControllerRemove$Params, context?: HttpContext): Observable<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsTdRefDto;
}> {
    return this.tdRefControllerRemove$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsTdRefDto;
}>): {
'code'?: number;
'pesan'?: string;
'data'?: AmimsTdRefDto;
} => r.body)
    );
  }

}

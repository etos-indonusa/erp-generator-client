/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { AmimsTechLogEngineDto } from '../models/amims-tech-log-engine-dto';
import { techLogEngineControllerCreate } from '../fn/tech-log-engine/tech-log-engine-controller-create';
import { TechLogEngineControllerCreate$Params } from '../fn/tech-log-engine/tech-log-engine-controller-create';
import { techLogEngineControllerFindAll } from '../fn/tech-log-engine/tech-log-engine-controller-find-all';
import { TechLogEngineControllerFindAll$Params } from '../fn/tech-log-engine/tech-log-engine-controller-find-all';
import { techLogEngineControllerFindOne } from '../fn/tech-log-engine/tech-log-engine-controller-find-one';
import { TechLogEngineControllerFindOne$Params } from '../fn/tech-log-engine/tech-log-engine-controller-find-one';
import { techLogEngineControllerRemove } from '../fn/tech-log-engine/tech-log-engine-controller-remove';
import { TechLogEngineControllerRemove$Params } from '../fn/tech-log-engine/tech-log-engine-controller-remove';
import { techLogEngineControllerUpdate } from '../fn/tech-log-engine/tech-log-engine-controller-update';
import { TechLogEngineControllerUpdate$Params } from '../fn/tech-log-engine/tech-log-engine-controller-update';

@Injectable({ providedIn: 'root' })
export class TechLogEngineService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `techLogEngineControllerFindAll()` */
  static readonly TechLogEngineControllerFindAllPath = '/amims/tech_log_engine/tech_log_engine';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `techLogEngineControllerFindAll()` instead.
   *
   * This method doesn't expect any request body.
   */
  techLogEngineControllerFindAll$Response(params?: TechLogEngineControllerFindAll$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: Array<AmimsTechLogEngineDto>;
'total'?: number;
}>> {
    return techLogEngineControllerFindAll(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `techLogEngineControllerFindAll$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  techLogEngineControllerFindAll(params?: TechLogEngineControllerFindAll$Params, context?: HttpContext): Observable<{
'code'?: number;
'pesan'?: string;
'data'?: Array<AmimsTechLogEngineDto>;
'total'?: number;
}> {
    return this.techLogEngineControllerFindAll$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: Array<AmimsTechLogEngineDto>;
'total'?: number;
}>): {
'code'?: number;
'pesan'?: string;
'data'?: Array<AmimsTechLogEngineDto>;
'total'?: number;
} => r.body)
    );
  }

  /** Path part for operation `techLogEngineControllerCreate()` */
  static readonly TechLogEngineControllerCreatePath = '/amims/tech_log_engine/tech_log_engine';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `techLogEngineControllerCreate()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  techLogEngineControllerCreate$Response(params: TechLogEngineControllerCreate$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsTechLogEngineDto;
}>> {
    return techLogEngineControllerCreate(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `techLogEngineControllerCreate$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  techLogEngineControllerCreate(params: TechLogEngineControllerCreate$Params, context?: HttpContext): Observable<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsTechLogEngineDto;
}> {
    return this.techLogEngineControllerCreate$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsTechLogEngineDto;
}>): {
'code'?: number;
'pesan'?: string;
'data'?: AmimsTechLogEngineDto;
} => r.body)
    );
  }

  /** Path part for operation `techLogEngineControllerFindOne()` */
  static readonly TechLogEngineControllerFindOnePath = '/amims/tech_log_engine/tech_log_engine/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `techLogEngineControllerFindOne()` instead.
   *
   * This method doesn't expect any request body.
   */
  techLogEngineControllerFindOne$Response(params: TechLogEngineControllerFindOne$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsTechLogEngineDto;
}>> {
    return techLogEngineControllerFindOne(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `techLogEngineControllerFindOne$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  techLogEngineControllerFindOne(params: TechLogEngineControllerFindOne$Params, context?: HttpContext): Observable<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsTechLogEngineDto;
}> {
    return this.techLogEngineControllerFindOne$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsTechLogEngineDto;
}>): {
'code'?: number;
'pesan'?: string;
'data'?: AmimsTechLogEngineDto;
} => r.body)
    );
  }

  /** Path part for operation `techLogEngineControllerUpdate()` */
  static readonly TechLogEngineControllerUpdatePath = '/amims/tech_log_engine/tech_log_engine/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `techLogEngineControllerUpdate()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  techLogEngineControllerUpdate$Response(params: TechLogEngineControllerUpdate$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsTechLogEngineDto;
}>> {
    return techLogEngineControllerUpdate(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `techLogEngineControllerUpdate$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  techLogEngineControllerUpdate(params: TechLogEngineControllerUpdate$Params, context?: HttpContext): Observable<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsTechLogEngineDto;
}> {
    return this.techLogEngineControllerUpdate$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsTechLogEngineDto;
}>): {
'code'?: number;
'pesan'?: string;
'data'?: AmimsTechLogEngineDto;
} => r.body)
    );
  }

  /** Path part for operation `techLogEngineControllerRemove()` */
  static readonly TechLogEngineControllerRemovePath = '/amims/tech_log_engine/tech_log_engine/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `techLogEngineControllerRemove()` instead.
   *
   * This method doesn't expect any request body.
   */
  techLogEngineControllerRemove$Response(params: TechLogEngineControllerRemove$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsTechLogEngineDto;
}>> {
    return techLogEngineControllerRemove(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `techLogEngineControllerRemove$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  techLogEngineControllerRemove(params: TechLogEngineControllerRemove$Params, context?: HttpContext): Observable<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsTechLogEngineDto;
}> {
    return this.techLogEngineControllerRemove$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsTechLogEngineDto;
}>): {
'code'?: number;
'pesan'?: string;
'data'?: AmimsTechLogEngineDto;
} => r.body)
    );
  }

}

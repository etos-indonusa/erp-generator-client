/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { AmimsConditionMonitoringDto } from '../models/amims-condition-monitoring-dto';
import { conditionMonitoringControllerCreate } from '../fn/condition-monitoring/condition-monitoring-controller-create';
import { ConditionMonitoringControllerCreate$Params } from '../fn/condition-monitoring/condition-monitoring-controller-create';
import { conditionMonitoringControllerFindAll } from '../fn/condition-monitoring/condition-monitoring-controller-find-all';
import { ConditionMonitoringControllerFindAll$Params } from '../fn/condition-monitoring/condition-monitoring-controller-find-all';
import { conditionMonitoringControllerFindOne } from '../fn/condition-monitoring/condition-monitoring-controller-find-one';
import { ConditionMonitoringControllerFindOne$Params } from '../fn/condition-monitoring/condition-monitoring-controller-find-one';
import { conditionMonitoringControllerRemove } from '../fn/condition-monitoring/condition-monitoring-controller-remove';
import { ConditionMonitoringControllerRemove$Params } from '../fn/condition-monitoring/condition-monitoring-controller-remove';
import { conditionMonitoringControllerUpdate } from '../fn/condition-monitoring/condition-monitoring-controller-update';
import { ConditionMonitoringControllerUpdate$Params } from '../fn/condition-monitoring/condition-monitoring-controller-update';

@Injectable({ providedIn: 'root' })
export class ConditionMonitoringService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `conditionMonitoringControllerFindAll()` */
  static readonly ConditionMonitoringControllerFindAllPath = '/amims/condition_monitoring/condition_monitoring';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `conditionMonitoringControllerFindAll()` instead.
   *
   * This method doesn't expect any request body.
   */
  conditionMonitoringControllerFindAll$Response(params?: ConditionMonitoringControllerFindAll$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: Array<AmimsConditionMonitoringDto>;
'total'?: number;
}>> {
    return conditionMonitoringControllerFindAll(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `conditionMonitoringControllerFindAll$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  conditionMonitoringControllerFindAll(params?: ConditionMonitoringControllerFindAll$Params, context?: HttpContext): Observable<{
'code'?: number;
'pesan'?: string;
'data'?: Array<AmimsConditionMonitoringDto>;
'total'?: number;
}> {
    return this.conditionMonitoringControllerFindAll$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: Array<AmimsConditionMonitoringDto>;
'total'?: number;
}>): {
'code'?: number;
'pesan'?: string;
'data'?: Array<AmimsConditionMonitoringDto>;
'total'?: number;
} => r.body)
    );
  }

  /** Path part for operation `conditionMonitoringControllerCreate()` */
  static readonly ConditionMonitoringControllerCreatePath = '/amims/condition_monitoring/condition_monitoring';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `conditionMonitoringControllerCreate()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  conditionMonitoringControllerCreate$Response(params: ConditionMonitoringControllerCreate$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsConditionMonitoringDto;
}>> {
    return conditionMonitoringControllerCreate(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `conditionMonitoringControllerCreate$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  conditionMonitoringControllerCreate(params: ConditionMonitoringControllerCreate$Params, context?: HttpContext): Observable<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsConditionMonitoringDto;
}> {
    return this.conditionMonitoringControllerCreate$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsConditionMonitoringDto;
}>): {
'code'?: number;
'pesan'?: string;
'data'?: AmimsConditionMonitoringDto;
} => r.body)
    );
  }

  /** Path part for operation `conditionMonitoringControllerFindOne()` */
  static readonly ConditionMonitoringControllerFindOnePath = '/amims/condition_monitoring/condition_monitoring/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `conditionMonitoringControllerFindOne()` instead.
   *
   * This method doesn't expect any request body.
   */
  conditionMonitoringControllerFindOne$Response(params: ConditionMonitoringControllerFindOne$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsConditionMonitoringDto;
}>> {
    return conditionMonitoringControllerFindOne(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `conditionMonitoringControllerFindOne$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  conditionMonitoringControllerFindOne(params: ConditionMonitoringControllerFindOne$Params, context?: HttpContext): Observable<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsConditionMonitoringDto;
}> {
    return this.conditionMonitoringControllerFindOne$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsConditionMonitoringDto;
}>): {
'code'?: number;
'pesan'?: string;
'data'?: AmimsConditionMonitoringDto;
} => r.body)
    );
  }

  /** Path part for operation `conditionMonitoringControllerUpdate()` */
  static readonly ConditionMonitoringControllerUpdatePath = '/amims/condition_monitoring/condition_monitoring/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `conditionMonitoringControllerUpdate()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  conditionMonitoringControllerUpdate$Response(params: ConditionMonitoringControllerUpdate$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsConditionMonitoringDto;
}>> {
    return conditionMonitoringControllerUpdate(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `conditionMonitoringControllerUpdate$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  conditionMonitoringControllerUpdate(params: ConditionMonitoringControllerUpdate$Params, context?: HttpContext): Observable<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsConditionMonitoringDto;
}> {
    return this.conditionMonitoringControllerUpdate$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsConditionMonitoringDto;
}>): {
'code'?: number;
'pesan'?: string;
'data'?: AmimsConditionMonitoringDto;
} => r.body)
    );
  }

  /** Path part for operation `conditionMonitoringControllerRemove()` */
  static readonly ConditionMonitoringControllerRemovePath = '/amims/condition_monitoring/condition_monitoring/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `conditionMonitoringControllerRemove()` instead.
   *
   * This method doesn't expect any request body.
   */
  conditionMonitoringControllerRemove$Response(params: ConditionMonitoringControllerRemove$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsConditionMonitoringDto;
}>> {
    return conditionMonitoringControllerRemove(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `conditionMonitoringControllerRemove$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  conditionMonitoringControllerRemove(params: ConditionMonitoringControllerRemove$Params, context?: HttpContext): Observable<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsConditionMonitoringDto;
}> {
    return this.conditionMonitoringControllerRemove$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsConditionMonitoringDto;
}>): {
'code'?: number;
'pesan'?: string;
'data'?: AmimsConditionMonitoringDto;
} => r.body)
    );
  }

}

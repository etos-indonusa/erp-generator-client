/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { AmimsPartActypeDto } from '../models/amims-part-actype-dto';
import { partActypeControllerCreate } from '../fn/part-actype/part-actype-controller-create';
import { PartActypeControllerCreate$Params } from '../fn/part-actype/part-actype-controller-create';
import { partActypeControllerFindAll } from '../fn/part-actype/part-actype-controller-find-all';
import { PartActypeControllerFindAll$Params } from '../fn/part-actype/part-actype-controller-find-all';
import { partActypeControllerFindOne } from '../fn/part-actype/part-actype-controller-find-one';
import { PartActypeControllerFindOne$Params } from '../fn/part-actype/part-actype-controller-find-one';
import { partActypeControllerRemove } from '../fn/part-actype/part-actype-controller-remove';
import { PartActypeControllerRemove$Params } from '../fn/part-actype/part-actype-controller-remove';
import { partActypeControllerUpdate } from '../fn/part-actype/part-actype-controller-update';
import { PartActypeControllerUpdate$Params } from '../fn/part-actype/part-actype-controller-update';

@Injectable({ providedIn: 'root' })
export class PartActypeService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `partActypeControllerFindAll()` */
  static readonly PartActypeControllerFindAllPath = '/amims/part_actype/part_actype';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `partActypeControllerFindAll()` instead.
   *
   * This method doesn't expect any request body.
   */
  partActypeControllerFindAll$Response(params?: PartActypeControllerFindAll$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: Array<AmimsPartActypeDto>;
'total'?: number;
}>> {
    return partActypeControllerFindAll(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `partActypeControllerFindAll$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  partActypeControllerFindAll(params?: PartActypeControllerFindAll$Params, context?: HttpContext): Observable<{
'code'?: number;
'pesan'?: string;
'data'?: Array<AmimsPartActypeDto>;
'total'?: number;
}> {
    return this.partActypeControllerFindAll$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: Array<AmimsPartActypeDto>;
'total'?: number;
}>): {
'code'?: number;
'pesan'?: string;
'data'?: Array<AmimsPartActypeDto>;
'total'?: number;
} => r.body)
    );
  }

  /** Path part for operation `partActypeControllerCreate()` */
  static readonly PartActypeControllerCreatePath = '/amims/part_actype/part_actype';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `partActypeControllerCreate()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  partActypeControllerCreate$Response(params: PartActypeControllerCreate$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsPartActypeDto;
}>> {
    return partActypeControllerCreate(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `partActypeControllerCreate$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  partActypeControllerCreate(params: PartActypeControllerCreate$Params, context?: HttpContext): Observable<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsPartActypeDto;
}> {
    return this.partActypeControllerCreate$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsPartActypeDto;
}>): {
'code'?: number;
'pesan'?: string;
'data'?: AmimsPartActypeDto;
} => r.body)
    );
  }

  /** Path part for operation `partActypeControllerFindOne()` */
  static readonly PartActypeControllerFindOnePath = '/amims/part_actype/part_actype/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `partActypeControllerFindOne()` instead.
   *
   * This method doesn't expect any request body.
   */
  partActypeControllerFindOne$Response(params: PartActypeControllerFindOne$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsPartActypeDto;
}>> {
    return partActypeControllerFindOne(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `partActypeControllerFindOne$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  partActypeControllerFindOne(params: PartActypeControllerFindOne$Params, context?: HttpContext): Observable<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsPartActypeDto;
}> {
    return this.partActypeControllerFindOne$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsPartActypeDto;
}>): {
'code'?: number;
'pesan'?: string;
'data'?: AmimsPartActypeDto;
} => r.body)
    );
  }

  /** Path part for operation `partActypeControllerUpdate()` */
  static readonly PartActypeControllerUpdatePath = '/amims/part_actype/part_actype/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `partActypeControllerUpdate()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  partActypeControllerUpdate$Response(params: PartActypeControllerUpdate$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsPartActypeDto;
}>> {
    return partActypeControllerUpdate(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `partActypeControllerUpdate$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  partActypeControllerUpdate(params: PartActypeControllerUpdate$Params, context?: HttpContext): Observable<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsPartActypeDto;
}> {
    return this.partActypeControllerUpdate$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsPartActypeDto;
}>): {
'code'?: number;
'pesan'?: string;
'data'?: AmimsPartActypeDto;
} => r.body)
    );
  }

  /** Path part for operation `partActypeControllerRemove()` */
  static readonly PartActypeControllerRemovePath = '/amims/part_actype/part_actype/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `partActypeControllerRemove()` instead.
   *
   * This method doesn't expect any request body.
   */
  partActypeControllerRemove$Response(params: PartActypeControllerRemove$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsPartActypeDto;
}>> {
    return partActypeControllerRemove(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `partActypeControllerRemove$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  partActypeControllerRemove(params: PartActypeControllerRemove$Params, context?: HttpContext): Observable<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsPartActypeDto;
}> {
    return this.partActypeControllerRemove$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsPartActypeDto;
}>): {
'code'?: number;
'pesan'?: string;
'data'?: AmimsPartActypeDto;
} => r.body)
    );
  }

}

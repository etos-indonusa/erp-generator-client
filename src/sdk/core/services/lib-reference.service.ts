/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { AmimsLibReferenceDto } from '../models/amims-lib-reference-dto';
import { libReferenceControllerCreate } from '../fn/lib-reference/lib-reference-controller-create';
import { LibReferenceControllerCreate$Params } from '../fn/lib-reference/lib-reference-controller-create';
import { libReferenceControllerFindAll } from '../fn/lib-reference/lib-reference-controller-find-all';
import { LibReferenceControllerFindAll$Params } from '../fn/lib-reference/lib-reference-controller-find-all';
import { libReferenceControllerFindOne } from '../fn/lib-reference/lib-reference-controller-find-one';
import { LibReferenceControllerFindOne$Params } from '../fn/lib-reference/lib-reference-controller-find-one';
import { libReferenceControllerRemove } from '../fn/lib-reference/lib-reference-controller-remove';
import { LibReferenceControllerRemove$Params } from '../fn/lib-reference/lib-reference-controller-remove';
import { libReferenceControllerUpdate } from '../fn/lib-reference/lib-reference-controller-update';
import { LibReferenceControllerUpdate$Params } from '../fn/lib-reference/lib-reference-controller-update';

@Injectable({ providedIn: 'root' })
export class LibReferenceService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `libReferenceControllerFindAll()` */
  static readonly LibReferenceControllerFindAllPath = '/amims/lib_reference/lib_reference';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `libReferenceControllerFindAll()` instead.
   *
   * This method doesn't expect any request body.
   */
  libReferenceControllerFindAll$Response(params?: LibReferenceControllerFindAll$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: Array<AmimsLibReferenceDto>;
'total'?: number;
}>> {
    return libReferenceControllerFindAll(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `libReferenceControllerFindAll$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  libReferenceControllerFindAll(params?: LibReferenceControllerFindAll$Params, context?: HttpContext): Observable<{
'code'?: number;
'pesan'?: string;
'data'?: Array<AmimsLibReferenceDto>;
'total'?: number;
}> {
    return this.libReferenceControllerFindAll$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: Array<AmimsLibReferenceDto>;
'total'?: number;
}>): {
'code'?: number;
'pesan'?: string;
'data'?: Array<AmimsLibReferenceDto>;
'total'?: number;
} => r.body)
    );
  }

  /** Path part for operation `libReferenceControllerCreate()` */
  static readonly LibReferenceControllerCreatePath = '/amims/lib_reference/lib_reference';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `libReferenceControllerCreate()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  libReferenceControllerCreate$Response(params: LibReferenceControllerCreate$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsLibReferenceDto;
}>> {
    return libReferenceControllerCreate(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `libReferenceControllerCreate$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  libReferenceControllerCreate(params: LibReferenceControllerCreate$Params, context?: HttpContext): Observable<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsLibReferenceDto;
}> {
    return this.libReferenceControllerCreate$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsLibReferenceDto;
}>): {
'code'?: number;
'pesan'?: string;
'data'?: AmimsLibReferenceDto;
} => r.body)
    );
  }

  /** Path part for operation `libReferenceControllerFindOne()` */
  static readonly LibReferenceControllerFindOnePath = '/amims/lib_reference/lib_reference/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `libReferenceControllerFindOne()` instead.
   *
   * This method doesn't expect any request body.
   */
  libReferenceControllerFindOne$Response(params: LibReferenceControllerFindOne$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsLibReferenceDto;
}>> {
    return libReferenceControllerFindOne(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `libReferenceControllerFindOne$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  libReferenceControllerFindOne(params: LibReferenceControllerFindOne$Params, context?: HttpContext): Observable<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsLibReferenceDto;
}> {
    return this.libReferenceControllerFindOne$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsLibReferenceDto;
}>): {
'code'?: number;
'pesan'?: string;
'data'?: AmimsLibReferenceDto;
} => r.body)
    );
  }

  /** Path part for operation `libReferenceControllerUpdate()` */
  static readonly LibReferenceControllerUpdatePath = '/amims/lib_reference/lib_reference/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `libReferenceControllerUpdate()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  libReferenceControllerUpdate$Response(params: LibReferenceControllerUpdate$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsLibReferenceDto;
}>> {
    return libReferenceControllerUpdate(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `libReferenceControllerUpdate$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  libReferenceControllerUpdate(params: LibReferenceControllerUpdate$Params, context?: HttpContext): Observable<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsLibReferenceDto;
}> {
    return this.libReferenceControllerUpdate$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsLibReferenceDto;
}>): {
'code'?: number;
'pesan'?: string;
'data'?: AmimsLibReferenceDto;
} => r.body)
    );
  }

  /** Path part for operation `libReferenceControllerRemove()` */
  static readonly LibReferenceControllerRemovePath = '/amims/lib_reference/lib_reference/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `libReferenceControllerRemove()` instead.
   *
   * This method doesn't expect any request body.
   */
  libReferenceControllerRemove$Response(params: LibReferenceControllerRemove$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsLibReferenceDto;
}>> {
    return libReferenceControllerRemove(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `libReferenceControllerRemove$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  libReferenceControllerRemove(params: LibReferenceControllerRemove$Params, context?: HttpContext): Observable<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsLibReferenceDto;
}> {
    return this.libReferenceControllerRemove$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsLibReferenceDto;
}>): {
'code'?: number;
'pesan'?: string;
'data'?: AmimsLibReferenceDto;
} => r.body)
    );
  }

}

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { AmimsSiteDto } from '../models/amims-site-dto';
import { siteControllerCreate } from '../fn/site/site-controller-create';
import { SiteControllerCreate$Params } from '../fn/site/site-controller-create';
import { siteControllerFindAll } from '../fn/site/site-controller-find-all';
import { SiteControllerFindAll$Params } from '../fn/site/site-controller-find-all';
import { siteControllerFindOne } from '../fn/site/site-controller-find-one';
import { SiteControllerFindOne$Params } from '../fn/site/site-controller-find-one';
import { siteControllerRemove } from '../fn/site/site-controller-remove';
import { SiteControllerRemove$Params } from '../fn/site/site-controller-remove';
import { siteControllerUpdate } from '../fn/site/site-controller-update';
import { SiteControllerUpdate$Params } from '../fn/site/site-controller-update';

@Injectable({ providedIn: 'root' })
export class SiteService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `siteControllerFindAll()` */
  static readonly SiteControllerFindAllPath = '/amims/site/site';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `siteControllerFindAll()` instead.
   *
   * This method doesn't expect any request body.
   */
  siteControllerFindAll$Response(params?: SiteControllerFindAll$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: Array<AmimsSiteDto>;
'total'?: number;
}>> {
    return siteControllerFindAll(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `siteControllerFindAll$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  siteControllerFindAll(params?: SiteControllerFindAll$Params, context?: HttpContext): Observable<{
'code'?: number;
'pesan'?: string;
'data'?: Array<AmimsSiteDto>;
'total'?: number;
}> {
    return this.siteControllerFindAll$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: Array<AmimsSiteDto>;
'total'?: number;
}>): {
'code'?: number;
'pesan'?: string;
'data'?: Array<AmimsSiteDto>;
'total'?: number;
} => r.body)
    );
  }

  /** Path part for operation `siteControllerCreate()` */
  static readonly SiteControllerCreatePath = '/amims/site/site';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `siteControllerCreate()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  siteControllerCreate$Response(params: SiteControllerCreate$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsSiteDto;
}>> {
    return siteControllerCreate(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `siteControllerCreate$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  siteControllerCreate(params: SiteControllerCreate$Params, context?: HttpContext): Observable<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsSiteDto;
}> {
    return this.siteControllerCreate$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsSiteDto;
}>): {
'code'?: number;
'pesan'?: string;
'data'?: AmimsSiteDto;
} => r.body)
    );
  }

  /** Path part for operation `siteControllerFindOne()` */
  static readonly SiteControllerFindOnePath = '/amims/site/site/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `siteControllerFindOne()` instead.
   *
   * This method doesn't expect any request body.
   */
  siteControllerFindOne$Response(params: SiteControllerFindOne$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsSiteDto;
}>> {
    return siteControllerFindOne(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `siteControllerFindOne$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  siteControllerFindOne(params: SiteControllerFindOne$Params, context?: HttpContext): Observable<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsSiteDto;
}> {
    return this.siteControllerFindOne$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsSiteDto;
}>): {
'code'?: number;
'pesan'?: string;
'data'?: AmimsSiteDto;
} => r.body)
    );
  }

  /** Path part for operation `siteControllerUpdate()` */
  static readonly SiteControllerUpdatePath = '/amims/site/site/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `siteControllerUpdate()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  siteControllerUpdate$Response(params: SiteControllerUpdate$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsSiteDto;
}>> {
    return siteControllerUpdate(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `siteControllerUpdate$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  siteControllerUpdate(params: SiteControllerUpdate$Params, context?: HttpContext): Observable<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsSiteDto;
}> {
    return this.siteControllerUpdate$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsSiteDto;
}>): {
'code'?: number;
'pesan'?: string;
'data'?: AmimsSiteDto;
} => r.body)
    );
  }

  /** Path part for operation `siteControllerRemove()` */
  static readonly SiteControllerRemovePath = '/amims/site/site/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `siteControllerRemove()` instead.
   *
   * This method doesn't expect any request body.
   */
  siteControllerRemove$Response(params: SiteControllerRemove$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsSiteDto;
}>> {
    return siteControllerRemove(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `siteControllerRemove$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  siteControllerRemove(params: SiteControllerRemove$Params, context?: HttpContext): Observable<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsSiteDto;
}> {
    return this.siteControllerRemove$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsSiteDto;
}>): {
'code'?: number;
'pesan'?: string;
'data'?: AmimsSiteDto;
} => r.body)
    );
  }

}

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { userGroupAccessControllerCreate } from '../fn/user-group-access/user-group-access-controller-create';
import { UserGroupAccessControllerCreate$Params } from '../fn/user-group-access/user-group-access-controller-create';
import { userGroupAccessControllerFindAll } from '../fn/user-group-access/user-group-access-controller-find-all';
import { UserGroupAccessControllerFindAll$Params } from '../fn/user-group-access/user-group-access-controller-find-all';
import { userGroupAccessControllerFindOne } from '../fn/user-group-access/user-group-access-controller-find-one';
import { UserGroupAccessControllerFindOne$Params } from '../fn/user-group-access/user-group-access-controller-find-one';
import { userGroupAccessControllerRemove } from '../fn/user-group-access/user-group-access-controller-remove';
import { UserGroupAccessControllerRemove$Params } from '../fn/user-group-access/user-group-access-controller-remove';
import { userGroupAccessControllerUpdate } from '../fn/user-group-access/user-group-access-controller-update';
import { UserGroupAccessControllerUpdate$Params } from '../fn/user-group-access/user-group-access-controller-update';
import { UserGroupAccessDto } from '../models/user-group-access-dto';

@Injectable({ providedIn: 'root' })
export class UserGroupAccessService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `userGroupAccessControllerFindAll()` */
  static readonly UserGroupAccessControllerFindAllPath = '/nonauth/user_group_access/user_group_access';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `userGroupAccessControllerFindAll()` instead.
   *
   * This method doesn't expect any request body.
   */
  userGroupAccessControllerFindAll$Response(params?: UserGroupAccessControllerFindAll$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: Array<UserGroupAccessDto>;
'total'?: number;
}>> {
    return userGroupAccessControllerFindAll(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `userGroupAccessControllerFindAll$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  userGroupAccessControllerFindAll(params?: UserGroupAccessControllerFindAll$Params, context?: HttpContext): Observable<{
'code'?: number;
'pesan'?: string;
'data'?: Array<UserGroupAccessDto>;
'total'?: number;
}> {
    return this.userGroupAccessControllerFindAll$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: Array<UserGroupAccessDto>;
'total'?: number;
}>): {
'code'?: number;
'pesan'?: string;
'data'?: Array<UserGroupAccessDto>;
'total'?: number;
} => r.body)
    );
  }

  /** Path part for operation `userGroupAccessControllerCreate()` */
  static readonly UserGroupAccessControllerCreatePath = '/nonauth/user_group_access/user_group_access';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `userGroupAccessControllerCreate()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  userGroupAccessControllerCreate$Response(params: UserGroupAccessControllerCreate$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: UserGroupAccessDto;
}>> {
    return userGroupAccessControllerCreate(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `userGroupAccessControllerCreate$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  userGroupAccessControllerCreate(params: UserGroupAccessControllerCreate$Params, context?: HttpContext): Observable<{
'code'?: number;
'pesan'?: string;
'data'?: UserGroupAccessDto;
}> {
    return this.userGroupAccessControllerCreate$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: UserGroupAccessDto;
}>): {
'code'?: number;
'pesan'?: string;
'data'?: UserGroupAccessDto;
} => r.body)
    );
  }

  /** Path part for operation `userGroupAccessControllerFindOne()` */
  static readonly UserGroupAccessControllerFindOnePath = '/nonauth/user_group_access/user_group_access/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `userGroupAccessControllerFindOne()` instead.
   *
   * This method doesn't expect any request body.
   */
  userGroupAccessControllerFindOne$Response(params: UserGroupAccessControllerFindOne$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: UserGroupAccessDto;
}>> {
    return userGroupAccessControllerFindOne(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `userGroupAccessControllerFindOne$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  userGroupAccessControllerFindOne(params: UserGroupAccessControllerFindOne$Params, context?: HttpContext): Observable<{
'code'?: number;
'pesan'?: string;
'data'?: UserGroupAccessDto;
}> {
    return this.userGroupAccessControllerFindOne$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: UserGroupAccessDto;
}>): {
'code'?: number;
'pesan'?: string;
'data'?: UserGroupAccessDto;
} => r.body)
    );
  }

  /** Path part for operation `userGroupAccessControllerUpdate()` */
  static readonly UserGroupAccessControllerUpdatePath = '/nonauth/user_group_access/user_group_access/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `userGroupAccessControllerUpdate()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  userGroupAccessControllerUpdate$Response(params: UserGroupAccessControllerUpdate$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: UserGroupAccessDto;
}>> {
    return userGroupAccessControllerUpdate(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `userGroupAccessControllerUpdate$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  userGroupAccessControllerUpdate(params: UserGroupAccessControllerUpdate$Params, context?: HttpContext): Observable<{
'code'?: number;
'pesan'?: string;
'data'?: UserGroupAccessDto;
}> {
    return this.userGroupAccessControllerUpdate$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: UserGroupAccessDto;
}>): {
'code'?: number;
'pesan'?: string;
'data'?: UserGroupAccessDto;
} => r.body)
    );
  }

  /** Path part for operation `userGroupAccessControllerRemove()` */
  static readonly UserGroupAccessControllerRemovePath = '/nonauth/user_group_access/user_group_access/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `userGroupAccessControllerRemove()` instead.
   *
   * This method doesn't expect any request body.
   */
  userGroupAccessControllerRemove$Response(params: UserGroupAccessControllerRemove$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: UserGroupAccessDto;
}>> {
    return userGroupAccessControllerRemove(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `userGroupAccessControllerRemove$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  userGroupAccessControllerRemove(params: UserGroupAccessControllerRemove$Params, context?: HttpContext): Observable<{
'code'?: number;
'pesan'?: string;
'data'?: UserGroupAccessDto;
}> {
    return this.userGroupAccessControllerRemove$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: UserGroupAccessDto;
}>): {
'code'?: number;
'pesan'?: string;
'data'?: UserGroupAccessDto;
} => r.body)
    );
  }

}

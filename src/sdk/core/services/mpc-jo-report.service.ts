/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { AmimsMpcJoReportDto } from '../models/amims-mpc-jo-report-dto';
import { mpcJoReportControllerFindAll } from '../fn/mpc-jo-report/mpc-jo-report-controller-find-all';
import { MpcJoReportControllerFindAll$Params } from '../fn/mpc-jo-report/mpc-jo-report-controller-find-all';
import { mpcJoReportControllerFindOne } from '../fn/mpc-jo-report/mpc-jo-report-controller-find-one';
import { MpcJoReportControllerFindOne$Params } from '../fn/mpc-jo-report/mpc-jo-report-controller-find-one';

@Injectable({ providedIn: 'root' })
export class MpcJoReportService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `mpcJoReportControllerFindAll()` */
  static readonly MpcJoReportControllerFindAllPath = '/amims/mpc_jo/mpc_jo_report/list';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `mpcJoReportControllerFindAll()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  mpcJoReportControllerFindAll$Response(params: MpcJoReportControllerFindAll$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: Array<AmimsMpcJoReportDto>;
'total'?: number;
}>> {
    return mpcJoReportControllerFindAll(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `mpcJoReportControllerFindAll$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  mpcJoReportControllerFindAll(params: MpcJoReportControllerFindAll$Params, context?: HttpContext): Observable<{
'code'?: number;
'pesan'?: string;
'data'?: Array<AmimsMpcJoReportDto>;
'total'?: number;
}> {
    return this.mpcJoReportControllerFindAll$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: Array<AmimsMpcJoReportDto>;
'total'?: number;
}>): {
'code'?: number;
'pesan'?: string;
'data'?: Array<AmimsMpcJoReportDto>;
'total'?: number;
} => r.body)
    );
  }

  /** Path part for operation `mpcJoReportControllerFindOne()` */
  static readonly MpcJoReportControllerFindOnePath = '/amims/mpc_jo/mpc_jo_report/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `mpcJoReportControllerFindOne()` instead.
   *
   * This method doesn't expect any request body.
   */
  mpcJoReportControllerFindOne$Response(params: MpcJoReportControllerFindOne$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsMpcJoReportDto;
}>> {
    return mpcJoReportControllerFindOne(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `mpcJoReportControllerFindOne$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  mpcJoReportControllerFindOne(params: MpcJoReportControllerFindOne$Params, context?: HttpContext): Observable<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsMpcJoReportDto;
}> {
    return this.mpcJoReportControllerFindOne$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsMpcJoReportDto;
}>): {
'code'?: number;
'pesan'?: string;
'data'?: AmimsMpcJoReportDto;
} => r.body)
    );
  }

}

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { AmimsQaRpdDispotitionDto } from '../models/amims-qa-rpd-dispotition-dto';
import { qaRpdDispotitionControllerCreate } from '../fn/qa-rpd-dispotition/qa-rpd-dispotition-controller-create';
import { QaRpdDispotitionControllerCreate$Params } from '../fn/qa-rpd-dispotition/qa-rpd-dispotition-controller-create';
import { qaRpdDispotitionControllerFindAll } from '../fn/qa-rpd-dispotition/qa-rpd-dispotition-controller-find-all';
import { QaRpdDispotitionControllerFindAll$Params } from '../fn/qa-rpd-dispotition/qa-rpd-dispotition-controller-find-all';
import { qaRpdDispotitionControllerFindOne } from '../fn/qa-rpd-dispotition/qa-rpd-dispotition-controller-find-one';
import { QaRpdDispotitionControllerFindOne$Params } from '../fn/qa-rpd-dispotition/qa-rpd-dispotition-controller-find-one';
import { qaRpdDispotitionControllerRemove } from '../fn/qa-rpd-dispotition/qa-rpd-dispotition-controller-remove';
import { QaRpdDispotitionControllerRemove$Params } from '../fn/qa-rpd-dispotition/qa-rpd-dispotition-controller-remove';
import { qaRpdDispotitionControllerUpdate } from '../fn/qa-rpd-dispotition/qa-rpd-dispotition-controller-update';
import { QaRpdDispotitionControllerUpdate$Params } from '../fn/qa-rpd-dispotition/qa-rpd-dispotition-controller-update';

@Injectable({ providedIn: 'root' })
export class QaRpdDispotitionService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `qaRpdDispotitionControllerFindAll()` */
  static readonly QaRpdDispotitionControllerFindAllPath = '/amims/qa_rpd_dispotition/qa_rpd_dispotition';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `qaRpdDispotitionControllerFindAll()` instead.
   *
   * This method doesn't expect any request body.
   */
  qaRpdDispotitionControllerFindAll$Response(params?: QaRpdDispotitionControllerFindAll$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: Array<AmimsQaRpdDispotitionDto>;
'total'?: number;
}>> {
    return qaRpdDispotitionControllerFindAll(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `qaRpdDispotitionControllerFindAll$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  qaRpdDispotitionControllerFindAll(params?: QaRpdDispotitionControllerFindAll$Params, context?: HttpContext): Observable<{
'code'?: number;
'pesan'?: string;
'data'?: Array<AmimsQaRpdDispotitionDto>;
'total'?: number;
}> {
    return this.qaRpdDispotitionControllerFindAll$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: Array<AmimsQaRpdDispotitionDto>;
'total'?: number;
}>): {
'code'?: number;
'pesan'?: string;
'data'?: Array<AmimsQaRpdDispotitionDto>;
'total'?: number;
} => r.body)
    );
  }

  /** Path part for operation `qaRpdDispotitionControllerCreate()` */
  static readonly QaRpdDispotitionControllerCreatePath = '/amims/qa_rpd_dispotition/qa_rpd_dispotition';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `qaRpdDispotitionControllerCreate()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  qaRpdDispotitionControllerCreate$Response(params: QaRpdDispotitionControllerCreate$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsQaRpdDispotitionDto;
}>> {
    return qaRpdDispotitionControllerCreate(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `qaRpdDispotitionControllerCreate$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  qaRpdDispotitionControllerCreate(params: QaRpdDispotitionControllerCreate$Params, context?: HttpContext): Observable<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsQaRpdDispotitionDto;
}> {
    return this.qaRpdDispotitionControllerCreate$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsQaRpdDispotitionDto;
}>): {
'code'?: number;
'pesan'?: string;
'data'?: AmimsQaRpdDispotitionDto;
} => r.body)
    );
  }

  /** Path part for operation `qaRpdDispotitionControllerFindOne()` */
  static readonly QaRpdDispotitionControllerFindOnePath = '/amims/qa_rpd_dispotition/qa_rpd_dispotition/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `qaRpdDispotitionControllerFindOne()` instead.
   *
   * This method doesn't expect any request body.
   */
  qaRpdDispotitionControllerFindOne$Response(params: QaRpdDispotitionControllerFindOne$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsQaRpdDispotitionDto;
}>> {
    return qaRpdDispotitionControllerFindOne(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `qaRpdDispotitionControllerFindOne$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  qaRpdDispotitionControllerFindOne(params: QaRpdDispotitionControllerFindOne$Params, context?: HttpContext): Observable<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsQaRpdDispotitionDto;
}> {
    return this.qaRpdDispotitionControllerFindOne$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsQaRpdDispotitionDto;
}>): {
'code'?: number;
'pesan'?: string;
'data'?: AmimsQaRpdDispotitionDto;
} => r.body)
    );
  }

  /** Path part for operation `qaRpdDispotitionControllerUpdate()` */
  static readonly QaRpdDispotitionControllerUpdatePath = '/amims/qa_rpd_dispotition/qa_rpd_dispotition/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `qaRpdDispotitionControllerUpdate()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  qaRpdDispotitionControllerUpdate$Response(params: QaRpdDispotitionControllerUpdate$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsQaRpdDispotitionDto;
}>> {
    return qaRpdDispotitionControllerUpdate(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `qaRpdDispotitionControllerUpdate$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  qaRpdDispotitionControllerUpdate(params: QaRpdDispotitionControllerUpdate$Params, context?: HttpContext): Observable<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsQaRpdDispotitionDto;
}> {
    return this.qaRpdDispotitionControllerUpdate$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsQaRpdDispotitionDto;
}>): {
'code'?: number;
'pesan'?: string;
'data'?: AmimsQaRpdDispotitionDto;
} => r.body)
    );
  }

  /** Path part for operation `qaRpdDispotitionControllerRemove()` */
  static readonly QaRpdDispotitionControllerRemovePath = '/amims/qa_rpd_dispotition/qa_rpd_dispotition/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `qaRpdDispotitionControllerRemove()` instead.
   *
   * This method doesn't expect any request body.
   */
  qaRpdDispotitionControllerRemove$Response(params: QaRpdDispotitionControllerRemove$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsQaRpdDispotitionDto;
}>> {
    return qaRpdDispotitionControllerRemove(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `qaRpdDispotitionControllerRemove$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  qaRpdDispotitionControllerRemove(params: QaRpdDispotitionControllerRemove$Params, context?: HttpContext): Observable<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsQaRpdDispotitionDto;
}> {
    return this.qaRpdDispotitionControllerRemove$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsQaRpdDispotitionDto;
}>): {
'code'?: number;
'pesan'?: string;
'data'?: AmimsQaRpdDispotitionDto;
} => r.body)
    );
  }

}

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { ToolsWorkflowDto } from '../models/tools-workflow-dto';
import { workflowControllerCreate } from '../fn/workflow/workflow-controller-create';
import { WorkflowControllerCreate$Params } from '../fn/workflow/workflow-controller-create';
import { workflowControllerFindAll } from '../fn/workflow/workflow-controller-find-all';
import { WorkflowControllerFindAll$Params } from '../fn/workflow/workflow-controller-find-all';
import { workflowControllerFindOne } from '../fn/workflow/workflow-controller-find-one';
import { WorkflowControllerFindOne$Params } from '../fn/workflow/workflow-controller-find-one';
import { workflowControllerRemove } from '../fn/workflow/workflow-controller-remove';
import { WorkflowControllerRemove$Params } from '../fn/workflow/workflow-controller-remove';
import { workflowControllerUpdate } from '../fn/workflow/workflow-controller-update';
import { WorkflowControllerUpdate$Params } from '../fn/workflow/workflow-controller-update';

@Injectable({ providedIn: 'root' })
export class WorkflowService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `workflowControllerFindAll()` */
  static readonly WorkflowControllerFindAllPath = '/auth/workflow/workflow';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `workflowControllerFindAll()` instead.
   *
   * This method doesn't expect any request body.
   */
  workflowControllerFindAll$Response(params?: WorkflowControllerFindAll$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: Array<ToolsWorkflowDto>;
'total'?: number;
}>> {
    return workflowControllerFindAll(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `workflowControllerFindAll$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  workflowControllerFindAll(params?: WorkflowControllerFindAll$Params, context?: HttpContext): Observable<{
'code'?: number;
'pesan'?: string;
'data'?: Array<ToolsWorkflowDto>;
'total'?: number;
}> {
    return this.workflowControllerFindAll$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: Array<ToolsWorkflowDto>;
'total'?: number;
}>): {
'code'?: number;
'pesan'?: string;
'data'?: Array<ToolsWorkflowDto>;
'total'?: number;
} => r.body)
    );
  }

  /** Path part for operation `workflowControllerCreate()` */
  static readonly WorkflowControllerCreatePath = '/auth/workflow/workflow';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `workflowControllerCreate()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  workflowControllerCreate$Response(params: WorkflowControllerCreate$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: ToolsWorkflowDto;
}>> {
    return workflowControllerCreate(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `workflowControllerCreate$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  workflowControllerCreate(params: WorkflowControllerCreate$Params, context?: HttpContext): Observable<{
'code'?: number;
'pesan'?: string;
'data'?: ToolsWorkflowDto;
}> {
    return this.workflowControllerCreate$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: ToolsWorkflowDto;
}>): {
'code'?: number;
'pesan'?: string;
'data'?: ToolsWorkflowDto;
} => r.body)
    );
  }

  /** Path part for operation `workflowControllerFindOne()` */
  static readonly WorkflowControllerFindOnePath = '/auth/workflow/workflow/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `workflowControllerFindOne()` instead.
   *
   * This method doesn't expect any request body.
   */
  workflowControllerFindOne$Response(params: WorkflowControllerFindOne$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: ToolsWorkflowDto;
}>> {
    return workflowControllerFindOne(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `workflowControllerFindOne$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  workflowControllerFindOne(params: WorkflowControllerFindOne$Params, context?: HttpContext): Observable<{
'code'?: number;
'pesan'?: string;
'data'?: ToolsWorkflowDto;
}> {
    return this.workflowControllerFindOne$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: ToolsWorkflowDto;
}>): {
'code'?: number;
'pesan'?: string;
'data'?: ToolsWorkflowDto;
} => r.body)
    );
  }

  /** Path part for operation `workflowControllerUpdate()` */
  static readonly WorkflowControllerUpdatePath = '/auth/workflow/workflow/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `workflowControllerUpdate()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  workflowControllerUpdate$Response(params: WorkflowControllerUpdate$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: ToolsWorkflowDto;
}>> {
    return workflowControllerUpdate(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `workflowControllerUpdate$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  workflowControllerUpdate(params: WorkflowControllerUpdate$Params, context?: HttpContext): Observable<{
'code'?: number;
'pesan'?: string;
'data'?: ToolsWorkflowDto;
}> {
    return this.workflowControllerUpdate$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: ToolsWorkflowDto;
}>): {
'code'?: number;
'pesan'?: string;
'data'?: ToolsWorkflowDto;
} => r.body)
    );
  }

  /** Path part for operation `workflowControllerRemove()` */
  static readonly WorkflowControllerRemovePath = '/auth/workflow/workflow/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `workflowControllerRemove()` instead.
   *
   * This method doesn't expect any request body.
   */
  workflowControllerRemove$Response(params: WorkflowControllerRemove$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: ToolsWorkflowDto;
}>> {
    return workflowControllerRemove(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `workflowControllerRemove$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  workflowControllerRemove(params: WorkflowControllerRemove$Params, context?: HttpContext): Observable<{
'code'?: number;
'pesan'?: string;
'data'?: ToolsWorkflowDto;
}> {
    return this.workflowControllerRemove$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: ToolsWorkflowDto;
}>): {
'code'?: number;
'pesan'?: string;
'data'?: ToolsWorkflowDto;
} => r.body)
    );
  }

}

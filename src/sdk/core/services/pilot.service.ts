/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { AmimsPilotDto } from '../models/amims-pilot-dto';
import { pilotControllerCreate } from '../fn/pilot/pilot-controller-create';
import { PilotControllerCreate$Params } from '../fn/pilot/pilot-controller-create';
import { pilotControllerFindAll } from '../fn/pilot/pilot-controller-find-all';
import { PilotControllerFindAll$Params } from '../fn/pilot/pilot-controller-find-all';
import { pilotControllerFindOne } from '../fn/pilot/pilot-controller-find-one';
import { PilotControllerFindOne$Params } from '../fn/pilot/pilot-controller-find-one';
import { pilotControllerRemove } from '../fn/pilot/pilot-controller-remove';
import { PilotControllerRemove$Params } from '../fn/pilot/pilot-controller-remove';
import { pilotControllerUpdate } from '../fn/pilot/pilot-controller-update';
import { PilotControllerUpdate$Params } from '../fn/pilot/pilot-controller-update';

@Injectable({ providedIn: 'root' })
export class PilotService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `pilotControllerFindAll()` */
  static readonly PilotControllerFindAllPath = '/amims/pilot/pilot';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `pilotControllerFindAll()` instead.
   *
   * This method doesn't expect any request body.
   */
  pilotControllerFindAll$Response(params?: PilotControllerFindAll$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: Array<AmimsPilotDto>;
'total'?: number;
}>> {
    return pilotControllerFindAll(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `pilotControllerFindAll$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  pilotControllerFindAll(params?: PilotControllerFindAll$Params, context?: HttpContext): Observable<{
'code'?: number;
'pesan'?: string;
'data'?: Array<AmimsPilotDto>;
'total'?: number;
}> {
    return this.pilotControllerFindAll$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: Array<AmimsPilotDto>;
'total'?: number;
}>): {
'code'?: number;
'pesan'?: string;
'data'?: Array<AmimsPilotDto>;
'total'?: number;
} => r.body)
    );
  }

  /** Path part for operation `pilotControllerCreate()` */
  static readonly PilotControllerCreatePath = '/amims/pilot/pilot';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `pilotControllerCreate()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  pilotControllerCreate$Response(params: PilotControllerCreate$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsPilotDto;
}>> {
    return pilotControllerCreate(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `pilotControllerCreate$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  pilotControllerCreate(params: PilotControllerCreate$Params, context?: HttpContext): Observable<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsPilotDto;
}> {
    return this.pilotControllerCreate$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsPilotDto;
}>): {
'code'?: number;
'pesan'?: string;
'data'?: AmimsPilotDto;
} => r.body)
    );
  }

  /** Path part for operation `pilotControllerFindOne()` */
  static readonly PilotControllerFindOnePath = '/amims/pilot/pilot/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `pilotControllerFindOne()` instead.
   *
   * This method doesn't expect any request body.
   */
  pilotControllerFindOne$Response(params: PilotControllerFindOne$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsPilotDto;
}>> {
    return pilotControllerFindOne(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `pilotControllerFindOne$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  pilotControllerFindOne(params: PilotControllerFindOne$Params, context?: HttpContext): Observable<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsPilotDto;
}> {
    return this.pilotControllerFindOne$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsPilotDto;
}>): {
'code'?: number;
'pesan'?: string;
'data'?: AmimsPilotDto;
} => r.body)
    );
  }

  /** Path part for operation `pilotControllerUpdate()` */
  static readonly PilotControllerUpdatePath = '/amims/pilot/pilot/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `pilotControllerUpdate()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  pilotControllerUpdate$Response(params: PilotControllerUpdate$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsPilotDto;
}>> {
    return pilotControllerUpdate(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `pilotControllerUpdate$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  pilotControllerUpdate(params: PilotControllerUpdate$Params, context?: HttpContext): Observable<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsPilotDto;
}> {
    return this.pilotControllerUpdate$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsPilotDto;
}>): {
'code'?: number;
'pesan'?: string;
'data'?: AmimsPilotDto;
} => r.body)
    );
  }

  /** Path part for operation `pilotControllerRemove()` */
  static readonly PilotControllerRemovePath = '/amims/pilot/pilot/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `pilotControllerRemove()` instead.
   *
   * This method doesn't expect any request body.
   */
  pilotControllerRemove$Response(params: PilotControllerRemove$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsPilotDto;
}>> {
    return pilotControllerRemove(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `pilotControllerRemove$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  pilotControllerRemove(params: PilotControllerRemove$Params, context?: HttpContext): Observable<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsPilotDto;
}> {
    return this.pilotControllerRemove$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsPilotDto;
}>): {
'code'?: number;
'pesan'?: string;
'data'?: AmimsPilotDto;
} => r.body)
    );
  }

}

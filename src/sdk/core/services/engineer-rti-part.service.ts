/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { AmimsEngineerRtiPartDto } from '../models/amims-engineer-rti-part-dto';
import { engineerRtiPartControllerCreate } from '../fn/engineer-rti-part/engineer-rti-part-controller-create';
import { EngineerRtiPartControllerCreate$Params } from '../fn/engineer-rti-part/engineer-rti-part-controller-create';
import { engineerRtiPartControllerFindAll } from '../fn/engineer-rti-part/engineer-rti-part-controller-find-all';
import { EngineerRtiPartControllerFindAll$Params } from '../fn/engineer-rti-part/engineer-rti-part-controller-find-all';
import { engineerRtiPartControllerFindOne } from '../fn/engineer-rti-part/engineer-rti-part-controller-find-one';
import { EngineerRtiPartControllerFindOne$Params } from '../fn/engineer-rti-part/engineer-rti-part-controller-find-one';
import { engineerRtiPartControllerRemove } from '../fn/engineer-rti-part/engineer-rti-part-controller-remove';
import { EngineerRtiPartControllerRemove$Params } from '../fn/engineer-rti-part/engineer-rti-part-controller-remove';
import { engineerRtiPartControllerUpdate } from '../fn/engineer-rti-part/engineer-rti-part-controller-update';
import { EngineerRtiPartControllerUpdate$Params } from '../fn/engineer-rti-part/engineer-rti-part-controller-update';

@Injectable({ providedIn: 'root' })
export class EngineerRtiPartService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `engineerRtiPartControllerFindAll()` */
  static readonly EngineerRtiPartControllerFindAllPath = '/amims/engineer_rti_part/engineer_rti_part';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `engineerRtiPartControllerFindAll()` instead.
   *
   * This method doesn't expect any request body.
   */
  engineerRtiPartControllerFindAll$Response(params?: EngineerRtiPartControllerFindAll$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: Array<AmimsEngineerRtiPartDto>;
'total'?: number;
}>> {
    return engineerRtiPartControllerFindAll(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `engineerRtiPartControllerFindAll$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  engineerRtiPartControllerFindAll(params?: EngineerRtiPartControllerFindAll$Params, context?: HttpContext): Observable<{
'code'?: number;
'pesan'?: string;
'data'?: Array<AmimsEngineerRtiPartDto>;
'total'?: number;
}> {
    return this.engineerRtiPartControllerFindAll$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: Array<AmimsEngineerRtiPartDto>;
'total'?: number;
}>): {
'code'?: number;
'pesan'?: string;
'data'?: Array<AmimsEngineerRtiPartDto>;
'total'?: number;
} => r.body)
    );
  }

  /** Path part for operation `engineerRtiPartControllerCreate()` */
  static readonly EngineerRtiPartControllerCreatePath = '/amims/engineer_rti_part/engineer_rti_part';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `engineerRtiPartControllerCreate()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  engineerRtiPartControllerCreate$Response(params: EngineerRtiPartControllerCreate$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsEngineerRtiPartDto;
}>> {
    return engineerRtiPartControllerCreate(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `engineerRtiPartControllerCreate$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  engineerRtiPartControllerCreate(params: EngineerRtiPartControllerCreate$Params, context?: HttpContext): Observable<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsEngineerRtiPartDto;
}> {
    return this.engineerRtiPartControllerCreate$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsEngineerRtiPartDto;
}>): {
'code'?: number;
'pesan'?: string;
'data'?: AmimsEngineerRtiPartDto;
} => r.body)
    );
  }

  /** Path part for operation `engineerRtiPartControllerFindOne()` */
  static readonly EngineerRtiPartControllerFindOnePath = '/amims/engineer_rti_part/engineer_rti_part/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `engineerRtiPartControllerFindOne()` instead.
   *
   * This method doesn't expect any request body.
   */
  engineerRtiPartControllerFindOne$Response(params: EngineerRtiPartControllerFindOne$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsEngineerRtiPartDto;
}>> {
    return engineerRtiPartControllerFindOne(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `engineerRtiPartControllerFindOne$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  engineerRtiPartControllerFindOne(params: EngineerRtiPartControllerFindOne$Params, context?: HttpContext): Observable<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsEngineerRtiPartDto;
}> {
    return this.engineerRtiPartControllerFindOne$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsEngineerRtiPartDto;
}>): {
'code'?: number;
'pesan'?: string;
'data'?: AmimsEngineerRtiPartDto;
} => r.body)
    );
  }

  /** Path part for operation `engineerRtiPartControllerUpdate()` */
  static readonly EngineerRtiPartControllerUpdatePath = '/amims/engineer_rti_part/engineer_rti_part/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `engineerRtiPartControllerUpdate()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  engineerRtiPartControllerUpdate$Response(params: EngineerRtiPartControllerUpdate$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsEngineerRtiPartDto;
}>> {
    return engineerRtiPartControllerUpdate(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `engineerRtiPartControllerUpdate$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  engineerRtiPartControllerUpdate(params: EngineerRtiPartControllerUpdate$Params, context?: HttpContext): Observable<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsEngineerRtiPartDto;
}> {
    return this.engineerRtiPartControllerUpdate$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsEngineerRtiPartDto;
}>): {
'code'?: number;
'pesan'?: string;
'data'?: AmimsEngineerRtiPartDto;
} => r.body)
    );
  }

  /** Path part for operation `engineerRtiPartControllerRemove()` */
  static readonly EngineerRtiPartControllerRemovePath = '/amims/engineer_rti_part/engineer_rti_part/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `engineerRtiPartControllerRemove()` instead.
   *
   * This method doesn't expect any request body.
   */
  engineerRtiPartControllerRemove$Response(params: EngineerRtiPartControllerRemove$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsEngineerRtiPartDto;
}>> {
    return engineerRtiPartControllerRemove(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `engineerRtiPartControllerRemove$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  engineerRtiPartControllerRemove(params: EngineerRtiPartControllerRemove$Params, context?: HttpContext): Observable<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsEngineerRtiPartDto;
}> {
    return this.engineerRtiPartControllerRemove$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsEngineerRtiPartDto;
}>): {
'code'?: number;
'pesan'?: string;
'data'?: AmimsEngineerRtiPartDto;
} => r.body)
    );
  }

}

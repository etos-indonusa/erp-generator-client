/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { invoiceControllerCreate } from '../fn/invoice/invoice-controller-create';
import { InvoiceControllerCreate$Params } from '../fn/invoice/invoice-controller-create';
import { invoiceControllerFindAll } from '../fn/invoice/invoice-controller-find-all';
import { InvoiceControllerFindAll$Params } from '../fn/invoice/invoice-controller-find-all';
import { invoiceControllerFindOne } from '../fn/invoice/invoice-controller-find-one';
import { InvoiceControllerFindOne$Params } from '../fn/invoice/invoice-controller-find-one';
import { invoiceControllerRemove } from '../fn/invoice/invoice-controller-remove';
import { InvoiceControllerRemove$Params } from '../fn/invoice/invoice-controller-remove';
import { invoiceControllerUpdate } from '../fn/invoice/invoice-controller-update';
import { InvoiceControllerUpdate$Params } from '../fn/invoice/invoice-controller-update';
import { InvoiceDto } from '../models/invoice-dto';

@Injectable({ providedIn: 'root' })
export class InvoiceService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `invoiceControllerFindAll()` */
  static readonly InvoiceControllerFindAllPath = '/nonauth/invoice/invoice';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `invoiceControllerFindAll()` instead.
   *
   * This method doesn't expect any request body.
   */
  invoiceControllerFindAll$Response(params?: InvoiceControllerFindAll$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: Array<InvoiceDto>;
'total'?: number;
}>> {
    return invoiceControllerFindAll(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `invoiceControllerFindAll$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  invoiceControllerFindAll(params?: InvoiceControllerFindAll$Params, context?: HttpContext): Observable<{
'code'?: number;
'pesan'?: string;
'data'?: Array<InvoiceDto>;
'total'?: number;
}> {
    return this.invoiceControllerFindAll$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: Array<InvoiceDto>;
'total'?: number;
}>): {
'code'?: number;
'pesan'?: string;
'data'?: Array<InvoiceDto>;
'total'?: number;
} => r.body)
    );
  }

  /** Path part for operation `invoiceControllerCreate()` */
  static readonly InvoiceControllerCreatePath = '/nonauth/invoice/invoice';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `invoiceControllerCreate()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  invoiceControllerCreate$Response(params: InvoiceControllerCreate$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: InvoiceDto;
}>> {
    return invoiceControllerCreate(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `invoiceControllerCreate$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  invoiceControllerCreate(params: InvoiceControllerCreate$Params, context?: HttpContext): Observable<{
'code'?: number;
'pesan'?: string;
'data'?: InvoiceDto;
}> {
    return this.invoiceControllerCreate$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: InvoiceDto;
}>): {
'code'?: number;
'pesan'?: string;
'data'?: InvoiceDto;
} => r.body)
    );
  }

  /** Path part for operation `invoiceControllerFindOne()` */
  static readonly InvoiceControllerFindOnePath = '/nonauth/invoice/invoice/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `invoiceControllerFindOne()` instead.
   *
   * This method doesn't expect any request body.
   */
  invoiceControllerFindOne$Response(params: InvoiceControllerFindOne$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: InvoiceDto;
}>> {
    return invoiceControllerFindOne(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `invoiceControllerFindOne$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  invoiceControllerFindOne(params: InvoiceControllerFindOne$Params, context?: HttpContext): Observable<{
'code'?: number;
'pesan'?: string;
'data'?: InvoiceDto;
}> {
    return this.invoiceControllerFindOne$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: InvoiceDto;
}>): {
'code'?: number;
'pesan'?: string;
'data'?: InvoiceDto;
} => r.body)
    );
  }

  /** Path part for operation `invoiceControllerUpdate()` */
  static readonly InvoiceControllerUpdatePath = '/nonauth/invoice/invoice/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `invoiceControllerUpdate()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  invoiceControllerUpdate$Response(params: InvoiceControllerUpdate$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: InvoiceDto;
}>> {
    return invoiceControllerUpdate(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `invoiceControllerUpdate$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  invoiceControllerUpdate(params: InvoiceControllerUpdate$Params, context?: HttpContext): Observable<{
'code'?: number;
'pesan'?: string;
'data'?: InvoiceDto;
}> {
    return this.invoiceControllerUpdate$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: InvoiceDto;
}>): {
'code'?: number;
'pesan'?: string;
'data'?: InvoiceDto;
} => r.body)
    );
  }

  /** Path part for operation `invoiceControllerRemove()` */
  static readonly InvoiceControllerRemovePath = '/nonauth/invoice/invoice/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `invoiceControllerRemove()` instead.
   *
   * This method doesn't expect any request body.
   */
  invoiceControllerRemove$Response(params: InvoiceControllerRemove$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: InvoiceDto;
}>> {
    return invoiceControllerRemove(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `invoiceControllerRemove$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  invoiceControllerRemove(params: InvoiceControllerRemove$Params, context?: HttpContext): Observable<{
'code'?: number;
'pesan'?: string;
'data'?: InvoiceDto;
}> {
    return this.invoiceControllerRemove$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: InvoiceDto;
}>): {
'code'?: number;
'pesan'?: string;
'data'?: InvoiceDto;
} => r.body)
    );
  }

}

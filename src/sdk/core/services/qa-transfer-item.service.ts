/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { AmimsQaTransferItemDto } from '../models/amims-qa-transfer-item-dto';
import { qaTransferItemControllerCreate } from '../fn/qa-transfer-item/qa-transfer-item-controller-create';
import { QaTransferItemControllerCreate$Params } from '../fn/qa-transfer-item/qa-transfer-item-controller-create';
import { qaTransferItemControllerFindAll } from '../fn/qa-transfer-item/qa-transfer-item-controller-find-all';
import { QaTransferItemControllerFindAll$Params } from '../fn/qa-transfer-item/qa-transfer-item-controller-find-all';
import { qaTransferItemControllerFindOne } from '../fn/qa-transfer-item/qa-transfer-item-controller-find-one';
import { QaTransferItemControllerFindOne$Params } from '../fn/qa-transfer-item/qa-transfer-item-controller-find-one';
import { qaTransferItemControllerRemove } from '../fn/qa-transfer-item/qa-transfer-item-controller-remove';
import { QaTransferItemControllerRemove$Params } from '../fn/qa-transfer-item/qa-transfer-item-controller-remove';
import { qaTransferItemControllerUpdate } from '../fn/qa-transfer-item/qa-transfer-item-controller-update';
import { QaTransferItemControllerUpdate$Params } from '../fn/qa-transfer-item/qa-transfer-item-controller-update';

@Injectable({ providedIn: 'root' })
export class QaTransferItemService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `qaTransferItemControllerFindAll()` */
  static readonly QaTransferItemControllerFindAllPath = '/amims/qa_transfer_item/qa_transfer_item';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `qaTransferItemControllerFindAll()` instead.
   *
   * This method doesn't expect any request body.
   */
  qaTransferItemControllerFindAll$Response(params?: QaTransferItemControllerFindAll$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: Array<AmimsQaTransferItemDto>;
'total'?: number;
}>> {
    return qaTransferItemControllerFindAll(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `qaTransferItemControllerFindAll$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  qaTransferItemControllerFindAll(params?: QaTransferItemControllerFindAll$Params, context?: HttpContext): Observable<{
'code'?: number;
'pesan'?: string;
'data'?: Array<AmimsQaTransferItemDto>;
'total'?: number;
}> {
    return this.qaTransferItemControllerFindAll$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: Array<AmimsQaTransferItemDto>;
'total'?: number;
}>): {
'code'?: number;
'pesan'?: string;
'data'?: Array<AmimsQaTransferItemDto>;
'total'?: number;
} => r.body)
    );
  }

  /** Path part for operation `qaTransferItemControllerCreate()` */
  static readonly QaTransferItemControllerCreatePath = '/amims/qa_transfer_item/qa_transfer_item';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `qaTransferItemControllerCreate()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  qaTransferItemControllerCreate$Response(params: QaTransferItemControllerCreate$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsQaTransferItemDto;
}>> {
    return qaTransferItemControllerCreate(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `qaTransferItemControllerCreate$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  qaTransferItemControllerCreate(params: QaTransferItemControllerCreate$Params, context?: HttpContext): Observable<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsQaTransferItemDto;
}> {
    return this.qaTransferItemControllerCreate$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsQaTransferItemDto;
}>): {
'code'?: number;
'pesan'?: string;
'data'?: AmimsQaTransferItemDto;
} => r.body)
    );
  }

  /** Path part for operation `qaTransferItemControllerFindOne()` */
  static readonly QaTransferItemControllerFindOnePath = '/amims/qa_transfer_item/qa_transfer_item/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `qaTransferItemControllerFindOne()` instead.
   *
   * This method doesn't expect any request body.
   */
  qaTransferItemControllerFindOne$Response(params: QaTransferItemControllerFindOne$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsQaTransferItemDto;
}>> {
    return qaTransferItemControllerFindOne(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `qaTransferItemControllerFindOne$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  qaTransferItemControllerFindOne(params: QaTransferItemControllerFindOne$Params, context?: HttpContext): Observable<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsQaTransferItemDto;
}> {
    return this.qaTransferItemControllerFindOne$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsQaTransferItemDto;
}>): {
'code'?: number;
'pesan'?: string;
'data'?: AmimsQaTransferItemDto;
} => r.body)
    );
  }

  /** Path part for operation `qaTransferItemControllerUpdate()` */
  static readonly QaTransferItemControllerUpdatePath = '/amims/qa_transfer_item/qa_transfer_item/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `qaTransferItemControllerUpdate()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  qaTransferItemControllerUpdate$Response(params: QaTransferItemControllerUpdate$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsQaTransferItemDto;
}>> {
    return qaTransferItemControllerUpdate(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `qaTransferItemControllerUpdate$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  qaTransferItemControllerUpdate(params: QaTransferItemControllerUpdate$Params, context?: HttpContext): Observable<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsQaTransferItemDto;
}> {
    return this.qaTransferItemControllerUpdate$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsQaTransferItemDto;
}>): {
'code'?: number;
'pesan'?: string;
'data'?: AmimsQaTransferItemDto;
} => r.body)
    );
  }

  /** Path part for operation `qaTransferItemControllerRemove()` */
  static readonly QaTransferItemControllerRemovePath = '/amims/qa_transfer_item/qa_transfer_item/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `qaTransferItemControllerRemove()` instead.
   *
   * This method doesn't expect any request body.
   */
  qaTransferItemControllerRemove$Response(params: QaTransferItemControllerRemove$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsQaTransferItemDto;
}>> {
    return qaTransferItemControllerRemove(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `qaTransferItemControllerRemove$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  qaTransferItemControllerRemove(params: QaTransferItemControllerRemove$Params, context?: HttpContext): Observable<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsQaTransferItemDto;
}> {
    return this.qaTransferItemControllerRemove$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsQaTransferItemDto;
}>): {
'code'?: number;
'pesan'?: string;
'data'?: AmimsQaTransferItemDto;
} => r.body)
    );
  }

}

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { AmimsEngineerPmtrItemDto } from '../models/amims-engineer-pmtr-item-dto';
import { engineerPmtrItemControllerCreate } from '../fn/engineer-pmtr-item/engineer-pmtr-item-controller-create';
import { EngineerPmtrItemControllerCreate$Params } from '../fn/engineer-pmtr-item/engineer-pmtr-item-controller-create';
import { engineerPmtrItemControllerFindAll } from '../fn/engineer-pmtr-item/engineer-pmtr-item-controller-find-all';
import { EngineerPmtrItemControllerFindAll$Params } from '../fn/engineer-pmtr-item/engineer-pmtr-item-controller-find-all';
import { engineerPmtrItemControllerFindOne } from '../fn/engineer-pmtr-item/engineer-pmtr-item-controller-find-one';
import { EngineerPmtrItemControllerFindOne$Params } from '../fn/engineer-pmtr-item/engineer-pmtr-item-controller-find-one';
import { engineerPmtrItemControllerRemove } from '../fn/engineer-pmtr-item/engineer-pmtr-item-controller-remove';
import { EngineerPmtrItemControllerRemove$Params } from '../fn/engineer-pmtr-item/engineer-pmtr-item-controller-remove';
import { engineerPmtrItemControllerUpdate } from '../fn/engineer-pmtr-item/engineer-pmtr-item-controller-update';
import { EngineerPmtrItemControllerUpdate$Params } from '../fn/engineer-pmtr-item/engineer-pmtr-item-controller-update';

@Injectable({ providedIn: 'root' })
export class EngineerPmtrItemService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `engineerPmtrItemControllerFindAll()` */
  static readonly EngineerPmtrItemControllerFindAllPath = '/amims/engineer_pmtr_item/engineer_pmtr_item';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `engineerPmtrItemControllerFindAll()` instead.
   *
   * This method doesn't expect any request body.
   */
  engineerPmtrItemControllerFindAll$Response(params?: EngineerPmtrItemControllerFindAll$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: Array<AmimsEngineerPmtrItemDto>;
'total'?: number;
}>> {
    return engineerPmtrItemControllerFindAll(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `engineerPmtrItemControllerFindAll$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  engineerPmtrItemControllerFindAll(params?: EngineerPmtrItemControllerFindAll$Params, context?: HttpContext): Observable<{
'code'?: number;
'pesan'?: string;
'data'?: Array<AmimsEngineerPmtrItemDto>;
'total'?: number;
}> {
    return this.engineerPmtrItemControllerFindAll$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: Array<AmimsEngineerPmtrItemDto>;
'total'?: number;
}>): {
'code'?: number;
'pesan'?: string;
'data'?: Array<AmimsEngineerPmtrItemDto>;
'total'?: number;
} => r.body)
    );
  }

  /** Path part for operation `engineerPmtrItemControllerCreate()` */
  static readonly EngineerPmtrItemControllerCreatePath = '/amims/engineer_pmtr_item/engineer_pmtr_item';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `engineerPmtrItemControllerCreate()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  engineerPmtrItemControllerCreate$Response(params: EngineerPmtrItemControllerCreate$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsEngineerPmtrItemDto;
}>> {
    return engineerPmtrItemControllerCreate(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `engineerPmtrItemControllerCreate$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  engineerPmtrItemControllerCreate(params: EngineerPmtrItemControllerCreate$Params, context?: HttpContext): Observable<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsEngineerPmtrItemDto;
}> {
    return this.engineerPmtrItemControllerCreate$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsEngineerPmtrItemDto;
}>): {
'code'?: number;
'pesan'?: string;
'data'?: AmimsEngineerPmtrItemDto;
} => r.body)
    );
  }

  /** Path part for operation `engineerPmtrItemControllerFindOne()` */
  static readonly EngineerPmtrItemControllerFindOnePath = '/amims/engineer_pmtr_item/engineer_pmtr_item/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `engineerPmtrItemControllerFindOne()` instead.
   *
   * This method doesn't expect any request body.
   */
  engineerPmtrItemControllerFindOne$Response(params: EngineerPmtrItemControllerFindOne$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsEngineerPmtrItemDto;
}>> {
    return engineerPmtrItemControllerFindOne(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `engineerPmtrItemControllerFindOne$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  engineerPmtrItemControllerFindOne(params: EngineerPmtrItemControllerFindOne$Params, context?: HttpContext): Observable<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsEngineerPmtrItemDto;
}> {
    return this.engineerPmtrItemControllerFindOne$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsEngineerPmtrItemDto;
}>): {
'code'?: number;
'pesan'?: string;
'data'?: AmimsEngineerPmtrItemDto;
} => r.body)
    );
  }

  /** Path part for operation `engineerPmtrItemControllerUpdate()` */
  static readonly EngineerPmtrItemControllerUpdatePath = '/amims/engineer_pmtr_item/engineer_pmtr_item/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `engineerPmtrItemControllerUpdate()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  engineerPmtrItemControllerUpdate$Response(params: EngineerPmtrItemControllerUpdate$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsEngineerPmtrItemDto;
}>> {
    return engineerPmtrItemControllerUpdate(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `engineerPmtrItemControllerUpdate$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  engineerPmtrItemControllerUpdate(params: EngineerPmtrItemControllerUpdate$Params, context?: HttpContext): Observable<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsEngineerPmtrItemDto;
}> {
    return this.engineerPmtrItemControllerUpdate$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsEngineerPmtrItemDto;
}>): {
'code'?: number;
'pesan'?: string;
'data'?: AmimsEngineerPmtrItemDto;
} => r.body)
    );
  }

  /** Path part for operation `engineerPmtrItemControllerRemove()` */
  static readonly EngineerPmtrItemControllerRemovePath = '/amims/engineer_pmtr_item/engineer_pmtr_item/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `engineerPmtrItemControllerRemove()` instead.
   *
   * This method doesn't expect any request body.
   */
  engineerPmtrItemControllerRemove$Response(params: EngineerPmtrItemControllerRemove$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsEngineerPmtrItemDto;
}>> {
    return engineerPmtrItemControllerRemove(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `engineerPmtrItemControllerRemove$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  engineerPmtrItemControllerRemove(params: EngineerPmtrItemControllerRemove$Params, context?: HttpContext): Observable<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsEngineerPmtrItemDto;
}> {
    return this.engineerPmtrItemControllerRemove$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsEngineerPmtrItemDto;
}>): {
'code'?: number;
'pesan'?: string;
'data'?: AmimsEngineerPmtrItemDto;
} => r.body)
    );
  }

}

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { workScheduleTeknisiControllerCreate } from '../fn/work-schedule-teknisi/work-schedule-teknisi-controller-create';
import { WorkScheduleTeknisiControllerCreate$Params } from '../fn/work-schedule-teknisi/work-schedule-teknisi-controller-create';
import { workScheduleTeknisiControllerFindAll } from '../fn/work-schedule-teknisi/work-schedule-teknisi-controller-find-all';
import { WorkScheduleTeknisiControllerFindAll$Params } from '../fn/work-schedule-teknisi/work-schedule-teknisi-controller-find-all';
import { workScheduleTeknisiControllerFindOne } from '../fn/work-schedule-teknisi/work-schedule-teknisi-controller-find-one';
import { WorkScheduleTeknisiControllerFindOne$Params } from '../fn/work-schedule-teknisi/work-schedule-teknisi-controller-find-one';
import { workScheduleTeknisiControllerRemove } from '../fn/work-schedule-teknisi/work-schedule-teknisi-controller-remove';
import { WorkScheduleTeknisiControllerRemove$Params } from '../fn/work-schedule-teknisi/work-schedule-teknisi-controller-remove';
import { workScheduleTeknisiControllerUpdate } from '../fn/work-schedule-teknisi/work-schedule-teknisi-controller-update';
import { WorkScheduleTeknisiControllerUpdate$Params } from '../fn/work-schedule-teknisi/work-schedule-teknisi-controller-update';
import { WorkScheduleTeknisiDto } from '../models/work-schedule-teknisi-dto';

@Injectable({ providedIn: 'root' })
export class WorkScheduleTeknisiService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `workScheduleTeknisiControllerFindAll()` */
  static readonly WorkScheduleTeknisiControllerFindAllPath = '/nonauth/work_schedule_teknisi/work_schedule_teknisi';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `workScheduleTeknisiControllerFindAll()` instead.
   *
   * This method doesn't expect any request body.
   */
  workScheduleTeknisiControllerFindAll$Response(params?: WorkScheduleTeknisiControllerFindAll$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: Array<WorkScheduleTeknisiDto>;
'total'?: number;
}>> {
    return workScheduleTeknisiControllerFindAll(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `workScheduleTeknisiControllerFindAll$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  workScheduleTeknisiControllerFindAll(params?: WorkScheduleTeknisiControllerFindAll$Params, context?: HttpContext): Observable<{
'code'?: number;
'pesan'?: string;
'data'?: Array<WorkScheduleTeknisiDto>;
'total'?: number;
}> {
    return this.workScheduleTeknisiControllerFindAll$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: Array<WorkScheduleTeknisiDto>;
'total'?: number;
}>): {
'code'?: number;
'pesan'?: string;
'data'?: Array<WorkScheduleTeknisiDto>;
'total'?: number;
} => r.body)
    );
  }

  /** Path part for operation `workScheduleTeknisiControllerCreate()` */
  static readonly WorkScheduleTeknisiControllerCreatePath = '/nonauth/work_schedule_teknisi/work_schedule_teknisi';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `workScheduleTeknisiControllerCreate()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  workScheduleTeknisiControllerCreate$Response(params: WorkScheduleTeknisiControllerCreate$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: WorkScheduleTeknisiDto;
}>> {
    return workScheduleTeknisiControllerCreate(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `workScheduleTeknisiControllerCreate$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  workScheduleTeknisiControllerCreate(params: WorkScheduleTeknisiControllerCreate$Params, context?: HttpContext): Observable<{
'code'?: number;
'pesan'?: string;
'data'?: WorkScheduleTeknisiDto;
}> {
    return this.workScheduleTeknisiControllerCreate$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: WorkScheduleTeknisiDto;
}>): {
'code'?: number;
'pesan'?: string;
'data'?: WorkScheduleTeknisiDto;
} => r.body)
    );
  }

  /** Path part for operation `workScheduleTeknisiControllerFindOne()` */
  static readonly WorkScheduleTeknisiControllerFindOnePath = '/nonauth/work_schedule_teknisi/work_schedule_teknisi/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `workScheduleTeknisiControllerFindOne()` instead.
   *
   * This method doesn't expect any request body.
   */
  workScheduleTeknisiControllerFindOne$Response(params: WorkScheduleTeknisiControllerFindOne$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: WorkScheduleTeknisiDto;
}>> {
    return workScheduleTeknisiControllerFindOne(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `workScheduleTeknisiControllerFindOne$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  workScheduleTeknisiControllerFindOne(params: WorkScheduleTeknisiControllerFindOne$Params, context?: HttpContext): Observable<{
'code'?: number;
'pesan'?: string;
'data'?: WorkScheduleTeknisiDto;
}> {
    return this.workScheduleTeknisiControllerFindOne$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: WorkScheduleTeknisiDto;
}>): {
'code'?: number;
'pesan'?: string;
'data'?: WorkScheduleTeknisiDto;
} => r.body)
    );
  }

  /** Path part for operation `workScheduleTeknisiControllerUpdate()` */
  static readonly WorkScheduleTeknisiControllerUpdatePath = '/nonauth/work_schedule_teknisi/work_schedule_teknisi/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `workScheduleTeknisiControllerUpdate()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  workScheduleTeknisiControllerUpdate$Response(params: WorkScheduleTeknisiControllerUpdate$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: WorkScheduleTeknisiDto;
}>> {
    return workScheduleTeknisiControllerUpdate(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `workScheduleTeknisiControllerUpdate$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  workScheduleTeknisiControllerUpdate(params: WorkScheduleTeknisiControllerUpdate$Params, context?: HttpContext): Observable<{
'code'?: number;
'pesan'?: string;
'data'?: WorkScheduleTeknisiDto;
}> {
    return this.workScheduleTeknisiControllerUpdate$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: WorkScheduleTeknisiDto;
}>): {
'code'?: number;
'pesan'?: string;
'data'?: WorkScheduleTeknisiDto;
} => r.body)
    );
  }

  /** Path part for operation `workScheduleTeknisiControllerRemove()` */
  static readonly WorkScheduleTeknisiControllerRemovePath = '/nonauth/work_schedule_teknisi/work_schedule_teknisi/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `workScheduleTeknisiControllerRemove()` instead.
   *
   * This method doesn't expect any request body.
   */
  workScheduleTeknisiControllerRemove$Response(params: WorkScheduleTeknisiControllerRemove$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: WorkScheduleTeknisiDto;
}>> {
    return workScheduleTeknisiControllerRemove(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `workScheduleTeknisiControllerRemove$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  workScheduleTeknisiControllerRemove(params: WorkScheduleTeknisiControllerRemove$Params, context?: HttpContext): Observable<{
'code'?: number;
'pesan'?: string;
'data'?: WorkScheduleTeknisiDto;
}> {
    return this.workScheduleTeknisiControllerRemove$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: WorkScheduleTeknisiDto;
}>): {
'code'?: number;
'pesan'?: string;
'data'?: WorkScheduleTeknisiDto;
} => r.body)
    );
  }

}

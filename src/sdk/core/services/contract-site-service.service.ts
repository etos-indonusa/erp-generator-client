/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { contractSiteServiceControllerCreate } from '../fn/contract-site-service/contract-site-service-controller-create';
import { ContractSiteServiceControllerCreate$Params } from '../fn/contract-site-service/contract-site-service-controller-create';
import { contractSiteServiceControllerFindAll } from '../fn/contract-site-service/contract-site-service-controller-find-all';
import { ContractSiteServiceControllerFindAll$Params } from '../fn/contract-site-service/contract-site-service-controller-find-all';
import { contractSiteServiceControllerFindOne } from '../fn/contract-site-service/contract-site-service-controller-find-one';
import { ContractSiteServiceControllerFindOne$Params } from '../fn/contract-site-service/contract-site-service-controller-find-one';
import { contractSiteServiceControllerRemove } from '../fn/contract-site-service/contract-site-service-controller-remove';
import { ContractSiteServiceControllerRemove$Params } from '../fn/contract-site-service/contract-site-service-controller-remove';
import { contractSiteServiceControllerUpdate } from '../fn/contract-site-service/contract-site-service-controller-update';
import { ContractSiteServiceControllerUpdate$Params } from '../fn/contract-site-service/contract-site-service-controller-update';
import { ContractSiteServiceDto } from '../models/contract-site-service-dto';

@Injectable({ providedIn: 'root' })
export class ContractSiteServiceService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `contractSiteServiceControllerFindAll()` */
  static readonly ContractSiteServiceControllerFindAllPath = '/nonauth/contract_site_service/contract_site_service';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `contractSiteServiceControllerFindAll()` instead.
   *
   * This method doesn't expect any request body.
   */
  contractSiteServiceControllerFindAll$Response(params?: ContractSiteServiceControllerFindAll$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: Array<ContractSiteServiceDto>;
'total'?: number;
}>> {
    return contractSiteServiceControllerFindAll(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `contractSiteServiceControllerFindAll$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  contractSiteServiceControllerFindAll(params?: ContractSiteServiceControllerFindAll$Params, context?: HttpContext): Observable<{
'code'?: number;
'pesan'?: string;
'data'?: Array<ContractSiteServiceDto>;
'total'?: number;
}> {
    return this.contractSiteServiceControllerFindAll$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: Array<ContractSiteServiceDto>;
'total'?: number;
}>): {
'code'?: number;
'pesan'?: string;
'data'?: Array<ContractSiteServiceDto>;
'total'?: number;
} => r.body)
    );
  }

  /** Path part for operation `contractSiteServiceControllerCreate()` */
  static readonly ContractSiteServiceControllerCreatePath = '/nonauth/contract_site_service/contract_site_service';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `contractSiteServiceControllerCreate()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  contractSiteServiceControllerCreate$Response(params: ContractSiteServiceControllerCreate$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: ContractSiteServiceDto;
}>> {
    return contractSiteServiceControllerCreate(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `contractSiteServiceControllerCreate$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  contractSiteServiceControllerCreate(params: ContractSiteServiceControllerCreate$Params, context?: HttpContext): Observable<{
'code'?: number;
'pesan'?: string;
'data'?: ContractSiteServiceDto;
}> {
    return this.contractSiteServiceControllerCreate$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: ContractSiteServiceDto;
}>): {
'code'?: number;
'pesan'?: string;
'data'?: ContractSiteServiceDto;
} => r.body)
    );
  }

  /** Path part for operation `contractSiteServiceControllerFindOne()` */
  static readonly ContractSiteServiceControllerFindOnePath = '/nonauth/contract_site_service/contract_site_service/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `contractSiteServiceControllerFindOne()` instead.
   *
   * This method doesn't expect any request body.
   */
  contractSiteServiceControllerFindOne$Response(params: ContractSiteServiceControllerFindOne$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: ContractSiteServiceDto;
}>> {
    return contractSiteServiceControllerFindOne(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `contractSiteServiceControllerFindOne$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  contractSiteServiceControllerFindOne(params: ContractSiteServiceControllerFindOne$Params, context?: HttpContext): Observable<{
'code'?: number;
'pesan'?: string;
'data'?: ContractSiteServiceDto;
}> {
    return this.contractSiteServiceControllerFindOne$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: ContractSiteServiceDto;
}>): {
'code'?: number;
'pesan'?: string;
'data'?: ContractSiteServiceDto;
} => r.body)
    );
  }

  /** Path part for operation `contractSiteServiceControllerUpdate()` */
  static readonly ContractSiteServiceControllerUpdatePath = '/nonauth/contract_site_service/contract_site_service/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `contractSiteServiceControllerUpdate()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  contractSiteServiceControllerUpdate$Response(params: ContractSiteServiceControllerUpdate$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: ContractSiteServiceDto;
}>> {
    return contractSiteServiceControllerUpdate(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `contractSiteServiceControllerUpdate$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  contractSiteServiceControllerUpdate(params: ContractSiteServiceControllerUpdate$Params, context?: HttpContext): Observable<{
'code'?: number;
'pesan'?: string;
'data'?: ContractSiteServiceDto;
}> {
    return this.contractSiteServiceControllerUpdate$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: ContractSiteServiceDto;
}>): {
'code'?: number;
'pesan'?: string;
'data'?: ContractSiteServiceDto;
} => r.body)
    );
  }

  /** Path part for operation `contractSiteServiceControllerRemove()` */
  static readonly ContractSiteServiceControllerRemovePath = '/nonauth/contract_site_service/contract_site_service/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `contractSiteServiceControllerRemove()` instead.
   *
   * This method doesn't expect any request body.
   */
  contractSiteServiceControllerRemove$Response(params: ContractSiteServiceControllerRemove$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: ContractSiteServiceDto;
}>> {
    return contractSiteServiceControllerRemove(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `contractSiteServiceControllerRemove$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  contractSiteServiceControllerRemove(params: ContractSiteServiceControllerRemove$Params, context?: HttpContext): Observable<{
'code'?: number;
'pesan'?: string;
'data'?: ContractSiteServiceDto;
}> {
    return this.contractSiteServiceControllerRemove$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: ContractSiteServiceDto;
}>): {
'code'?: number;
'pesan'?: string;
'data'?: ContractSiteServiceDto;
} => r.body)
    );
  }

}

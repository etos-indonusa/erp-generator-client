/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { userTokensControllerCreate } from '../fn/user-tokens/user-tokens-controller-create';
import { UserTokensControllerCreate$Params } from '../fn/user-tokens/user-tokens-controller-create';
import { userTokensControllerFindAll } from '../fn/user-tokens/user-tokens-controller-find-all';
import { UserTokensControllerFindAll$Params } from '../fn/user-tokens/user-tokens-controller-find-all';
import { userTokensControllerFindOne } from '../fn/user-tokens/user-tokens-controller-find-one';
import { UserTokensControllerFindOne$Params } from '../fn/user-tokens/user-tokens-controller-find-one';
import { userTokensControllerRemove } from '../fn/user-tokens/user-tokens-controller-remove';
import { UserTokensControllerRemove$Params } from '../fn/user-tokens/user-tokens-controller-remove';
import { userTokensControllerUpdate } from '../fn/user-tokens/user-tokens-controller-update';
import { UserTokensControllerUpdate$Params } from '../fn/user-tokens/user-tokens-controller-update';
import { UserTokensDto } from '../models/user-tokens-dto';

@Injectable({ providedIn: 'root' })
export class UserTokensService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `userTokensControllerFindAll()` */
  static readonly UserTokensControllerFindAllPath = '/nonauth/user_tokens/user_tokens';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `userTokensControllerFindAll()` instead.
   *
   * This method doesn't expect any request body.
   */
  userTokensControllerFindAll$Response(params?: UserTokensControllerFindAll$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: Array<UserTokensDto>;
'total'?: number;
}>> {
    return userTokensControllerFindAll(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `userTokensControllerFindAll$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  userTokensControllerFindAll(params?: UserTokensControllerFindAll$Params, context?: HttpContext): Observable<{
'code'?: number;
'pesan'?: string;
'data'?: Array<UserTokensDto>;
'total'?: number;
}> {
    return this.userTokensControllerFindAll$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: Array<UserTokensDto>;
'total'?: number;
}>): {
'code'?: number;
'pesan'?: string;
'data'?: Array<UserTokensDto>;
'total'?: number;
} => r.body)
    );
  }

  /** Path part for operation `userTokensControllerCreate()` */
  static readonly UserTokensControllerCreatePath = '/nonauth/user_tokens/user_tokens';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `userTokensControllerCreate()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  userTokensControllerCreate$Response(params: UserTokensControllerCreate$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: UserTokensDto;
}>> {
    return userTokensControllerCreate(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `userTokensControllerCreate$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  userTokensControllerCreate(params: UserTokensControllerCreate$Params, context?: HttpContext): Observable<{
'code'?: number;
'pesan'?: string;
'data'?: UserTokensDto;
}> {
    return this.userTokensControllerCreate$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: UserTokensDto;
}>): {
'code'?: number;
'pesan'?: string;
'data'?: UserTokensDto;
} => r.body)
    );
  }

  /** Path part for operation `userTokensControllerFindOne()` */
  static readonly UserTokensControllerFindOnePath = '/nonauth/user_tokens/user_tokens/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `userTokensControllerFindOne()` instead.
   *
   * This method doesn't expect any request body.
   */
  userTokensControllerFindOne$Response(params: UserTokensControllerFindOne$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: UserTokensDto;
}>> {
    return userTokensControllerFindOne(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `userTokensControllerFindOne$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  userTokensControllerFindOne(params: UserTokensControllerFindOne$Params, context?: HttpContext): Observable<{
'code'?: number;
'pesan'?: string;
'data'?: UserTokensDto;
}> {
    return this.userTokensControllerFindOne$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: UserTokensDto;
}>): {
'code'?: number;
'pesan'?: string;
'data'?: UserTokensDto;
} => r.body)
    );
  }

  /** Path part for operation `userTokensControllerUpdate()` */
  static readonly UserTokensControllerUpdatePath = '/nonauth/user_tokens/user_tokens/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `userTokensControllerUpdate()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  userTokensControllerUpdate$Response(params: UserTokensControllerUpdate$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: UserTokensDto;
}>> {
    return userTokensControllerUpdate(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `userTokensControllerUpdate$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  userTokensControllerUpdate(params: UserTokensControllerUpdate$Params, context?: HttpContext): Observable<{
'code'?: number;
'pesan'?: string;
'data'?: UserTokensDto;
}> {
    return this.userTokensControllerUpdate$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: UserTokensDto;
}>): {
'code'?: number;
'pesan'?: string;
'data'?: UserTokensDto;
} => r.body)
    );
  }

  /** Path part for operation `userTokensControllerRemove()` */
  static readonly UserTokensControllerRemovePath = '/nonauth/user_tokens/user_tokens/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `userTokensControllerRemove()` instead.
   *
   * This method doesn't expect any request body.
   */
  userTokensControllerRemove$Response(params: UserTokensControllerRemove$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: UserTokensDto;
}>> {
    return userTokensControllerRemove(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `userTokensControllerRemove$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  userTokensControllerRemove(params: UserTokensControllerRemove$Params, context?: HttpContext): Observable<{
'code'?: number;
'pesan'?: string;
'data'?: UserTokensDto;
}> {
    return this.userTokensControllerRemove$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: UserTokensDto;
}>): {
'code'?: number;
'pesan'?: string;
'data'?: UserTokensDto;
} => r.body)
    );
  }

}

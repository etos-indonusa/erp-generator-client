/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { AmimsPurPrclDto } from '../models/amims-pur-prcl-dto';
import { purPrclControllerCreate } from '../fn/pur-prcl/pur-prcl-controller-create';
import { PurPrclControllerCreate$Params } from '../fn/pur-prcl/pur-prcl-controller-create';
import { purPrclControllerFindAll } from '../fn/pur-prcl/pur-prcl-controller-find-all';
import { PurPrclControllerFindAll$Params } from '../fn/pur-prcl/pur-prcl-controller-find-all';
import { purPrclControllerFindOne } from '../fn/pur-prcl/pur-prcl-controller-find-one';
import { PurPrclControllerFindOne$Params } from '../fn/pur-prcl/pur-prcl-controller-find-one';
import { purPrclControllerRemove } from '../fn/pur-prcl/pur-prcl-controller-remove';
import { PurPrclControllerRemove$Params } from '../fn/pur-prcl/pur-prcl-controller-remove';
import { purPrclControllerUpdate } from '../fn/pur-prcl/pur-prcl-controller-update';
import { PurPrclControllerUpdate$Params } from '../fn/pur-prcl/pur-prcl-controller-update';

@Injectable({ providedIn: 'root' })
export class PurPrclService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `purPrclControllerFindAll()` */
  static readonly PurPrclControllerFindAllPath = '/amims/pur_prcl/pur_prcl';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `purPrclControllerFindAll()` instead.
   *
   * This method doesn't expect any request body.
   */
  purPrclControllerFindAll$Response(params?: PurPrclControllerFindAll$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: Array<AmimsPurPrclDto>;
'total'?: number;
}>> {
    return purPrclControllerFindAll(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `purPrclControllerFindAll$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  purPrclControllerFindAll(params?: PurPrclControllerFindAll$Params, context?: HttpContext): Observable<{
'code'?: number;
'pesan'?: string;
'data'?: Array<AmimsPurPrclDto>;
'total'?: number;
}> {
    return this.purPrclControllerFindAll$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: Array<AmimsPurPrclDto>;
'total'?: number;
}>): {
'code'?: number;
'pesan'?: string;
'data'?: Array<AmimsPurPrclDto>;
'total'?: number;
} => r.body)
    );
  }

  /** Path part for operation `purPrclControllerCreate()` */
  static readonly PurPrclControllerCreatePath = '/amims/pur_prcl/pur_prcl';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `purPrclControllerCreate()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  purPrclControllerCreate$Response(params: PurPrclControllerCreate$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsPurPrclDto;
}>> {
    return purPrclControllerCreate(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `purPrclControllerCreate$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  purPrclControllerCreate(params: PurPrclControllerCreate$Params, context?: HttpContext): Observable<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsPurPrclDto;
}> {
    return this.purPrclControllerCreate$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsPurPrclDto;
}>): {
'code'?: number;
'pesan'?: string;
'data'?: AmimsPurPrclDto;
} => r.body)
    );
  }

  /** Path part for operation `purPrclControllerFindOne()` */
  static readonly PurPrclControllerFindOnePath = '/amims/pur_prcl/pur_prcl/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `purPrclControllerFindOne()` instead.
   *
   * This method doesn't expect any request body.
   */
  purPrclControllerFindOne$Response(params: PurPrclControllerFindOne$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsPurPrclDto;
}>> {
    return purPrclControllerFindOne(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `purPrclControllerFindOne$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  purPrclControllerFindOne(params: PurPrclControllerFindOne$Params, context?: HttpContext): Observable<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsPurPrclDto;
}> {
    return this.purPrclControllerFindOne$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsPurPrclDto;
}>): {
'code'?: number;
'pesan'?: string;
'data'?: AmimsPurPrclDto;
} => r.body)
    );
  }

  /** Path part for operation `purPrclControllerUpdate()` */
  static readonly PurPrclControllerUpdatePath = '/amims/pur_prcl/pur_prcl/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `purPrclControllerUpdate()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  purPrclControllerUpdate$Response(params: PurPrclControllerUpdate$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsPurPrclDto;
}>> {
    return purPrclControllerUpdate(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `purPrclControllerUpdate$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  purPrclControllerUpdate(params: PurPrclControllerUpdate$Params, context?: HttpContext): Observable<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsPurPrclDto;
}> {
    return this.purPrclControllerUpdate$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsPurPrclDto;
}>): {
'code'?: number;
'pesan'?: string;
'data'?: AmimsPurPrclDto;
} => r.body)
    );
  }

  /** Path part for operation `purPrclControllerRemove()` */
  static readonly PurPrclControllerRemovePath = '/amims/pur_prcl/pur_prcl/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `purPrclControllerRemove()` instead.
   *
   * This method doesn't expect any request body.
   */
  purPrclControllerRemove$Response(params: PurPrclControllerRemove$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsPurPrclDto;
}>> {
    return purPrclControllerRemove(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `purPrclControllerRemove$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  purPrclControllerRemove(params: PurPrclControllerRemove$Params, context?: HttpContext): Observable<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsPurPrclDto;
}> {
    return this.purPrclControllerRemove$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsPurPrclDto;
}>): {
'code'?: number;
'pesan'?: string;
'data'?: AmimsPurPrclDto;
} => r.body)
    );
  }

}

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { AmimsMpcSelfMaintenanceDto } from '../models/amims-mpc-self-maintenance-dto';
import { mpcSelfMaintenanceControllerCreate } from '../fn/mpc-self-maintenance/mpc-self-maintenance-controller-create';
import { MpcSelfMaintenanceControllerCreate$Params } from '../fn/mpc-self-maintenance/mpc-self-maintenance-controller-create';
import { mpcSelfMaintenanceControllerFindAll } from '../fn/mpc-self-maintenance/mpc-self-maintenance-controller-find-all';
import { MpcSelfMaintenanceControllerFindAll$Params } from '../fn/mpc-self-maintenance/mpc-self-maintenance-controller-find-all';
import { mpcSelfMaintenanceControllerFindOne } from '../fn/mpc-self-maintenance/mpc-self-maintenance-controller-find-one';
import { MpcSelfMaintenanceControllerFindOne$Params } from '../fn/mpc-self-maintenance/mpc-self-maintenance-controller-find-one';
import { mpcSelfMaintenanceControllerRemove } from '../fn/mpc-self-maintenance/mpc-self-maintenance-controller-remove';
import { MpcSelfMaintenanceControllerRemove$Params } from '../fn/mpc-self-maintenance/mpc-self-maintenance-controller-remove';
import { mpcSelfMaintenanceControllerUpdate } from '../fn/mpc-self-maintenance/mpc-self-maintenance-controller-update';
import { MpcSelfMaintenanceControllerUpdate$Params } from '../fn/mpc-self-maintenance/mpc-self-maintenance-controller-update';

@Injectable({ providedIn: 'root' })
export class MpcSelfMaintenanceService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `mpcSelfMaintenanceControllerFindAll()` */
  static readonly MpcSelfMaintenanceControllerFindAllPath = '/amims/mpc_self_maintenance/mpc_self_maintenance';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `mpcSelfMaintenanceControllerFindAll()` instead.
   *
   * This method doesn't expect any request body.
   */
  mpcSelfMaintenanceControllerFindAll$Response(params?: MpcSelfMaintenanceControllerFindAll$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: Array<AmimsMpcSelfMaintenanceDto>;
'total'?: number;
}>> {
    return mpcSelfMaintenanceControllerFindAll(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `mpcSelfMaintenanceControllerFindAll$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  mpcSelfMaintenanceControllerFindAll(params?: MpcSelfMaintenanceControllerFindAll$Params, context?: HttpContext): Observable<{
'code'?: number;
'pesan'?: string;
'data'?: Array<AmimsMpcSelfMaintenanceDto>;
'total'?: number;
}> {
    return this.mpcSelfMaintenanceControllerFindAll$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: Array<AmimsMpcSelfMaintenanceDto>;
'total'?: number;
}>): {
'code'?: number;
'pesan'?: string;
'data'?: Array<AmimsMpcSelfMaintenanceDto>;
'total'?: number;
} => r.body)
    );
  }

  /** Path part for operation `mpcSelfMaintenanceControllerCreate()` */
  static readonly MpcSelfMaintenanceControllerCreatePath = '/amims/mpc_self_maintenance/mpc_self_maintenance';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `mpcSelfMaintenanceControllerCreate()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  mpcSelfMaintenanceControllerCreate$Response(params: MpcSelfMaintenanceControllerCreate$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsMpcSelfMaintenanceDto;
}>> {
    return mpcSelfMaintenanceControllerCreate(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `mpcSelfMaintenanceControllerCreate$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  mpcSelfMaintenanceControllerCreate(params: MpcSelfMaintenanceControllerCreate$Params, context?: HttpContext): Observable<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsMpcSelfMaintenanceDto;
}> {
    return this.mpcSelfMaintenanceControllerCreate$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsMpcSelfMaintenanceDto;
}>): {
'code'?: number;
'pesan'?: string;
'data'?: AmimsMpcSelfMaintenanceDto;
} => r.body)
    );
  }

  /** Path part for operation `mpcSelfMaintenanceControllerFindOne()` */
  static readonly MpcSelfMaintenanceControllerFindOnePath = '/amims/mpc_self_maintenance/mpc_self_maintenance/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `mpcSelfMaintenanceControllerFindOne()` instead.
   *
   * This method doesn't expect any request body.
   */
  mpcSelfMaintenanceControllerFindOne$Response(params: MpcSelfMaintenanceControllerFindOne$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsMpcSelfMaintenanceDto;
}>> {
    return mpcSelfMaintenanceControllerFindOne(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `mpcSelfMaintenanceControllerFindOne$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  mpcSelfMaintenanceControllerFindOne(params: MpcSelfMaintenanceControllerFindOne$Params, context?: HttpContext): Observable<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsMpcSelfMaintenanceDto;
}> {
    return this.mpcSelfMaintenanceControllerFindOne$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsMpcSelfMaintenanceDto;
}>): {
'code'?: number;
'pesan'?: string;
'data'?: AmimsMpcSelfMaintenanceDto;
} => r.body)
    );
  }

  /** Path part for operation `mpcSelfMaintenanceControllerUpdate()` */
  static readonly MpcSelfMaintenanceControllerUpdatePath = '/amims/mpc_self_maintenance/mpc_self_maintenance/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `mpcSelfMaintenanceControllerUpdate()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  mpcSelfMaintenanceControllerUpdate$Response(params: MpcSelfMaintenanceControllerUpdate$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsMpcSelfMaintenanceDto;
}>> {
    return mpcSelfMaintenanceControllerUpdate(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `mpcSelfMaintenanceControllerUpdate$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  mpcSelfMaintenanceControllerUpdate(params: MpcSelfMaintenanceControllerUpdate$Params, context?: HttpContext): Observable<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsMpcSelfMaintenanceDto;
}> {
    return this.mpcSelfMaintenanceControllerUpdate$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsMpcSelfMaintenanceDto;
}>): {
'code'?: number;
'pesan'?: string;
'data'?: AmimsMpcSelfMaintenanceDto;
} => r.body)
    );
  }

  /** Path part for operation `mpcSelfMaintenanceControllerRemove()` */
  static readonly MpcSelfMaintenanceControllerRemovePath = '/amims/mpc_self_maintenance/mpc_self_maintenance/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `mpcSelfMaintenanceControllerRemove()` instead.
   *
   * This method doesn't expect any request body.
   */
  mpcSelfMaintenanceControllerRemove$Response(params: MpcSelfMaintenanceControllerRemove$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsMpcSelfMaintenanceDto;
}>> {
    return mpcSelfMaintenanceControllerRemove(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `mpcSelfMaintenanceControllerRemove$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  mpcSelfMaintenanceControllerRemove(params: MpcSelfMaintenanceControllerRemove$Params, context?: HttpContext): Observable<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsMpcSelfMaintenanceDto;
}> {
    return this.mpcSelfMaintenanceControllerRemove$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsMpcSelfMaintenanceDto;
}>): {
'code'?: number;
'pesan'?: string;
'data'?: AmimsMpcSelfMaintenanceDto;
} => r.body)
    );
  }

}

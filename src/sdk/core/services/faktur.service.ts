/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { fakturControllerCreate } from '../fn/faktur/faktur-controller-create';
import { FakturControllerCreate$Params } from '../fn/faktur/faktur-controller-create';
import { fakturControllerFindAll } from '../fn/faktur/faktur-controller-find-all';
import { FakturControllerFindAll$Params } from '../fn/faktur/faktur-controller-find-all';
import { fakturControllerFindOne } from '../fn/faktur/faktur-controller-find-one';
import { FakturControllerFindOne$Params } from '../fn/faktur/faktur-controller-find-one';
import { fakturControllerRemove } from '../fn/faktur/faktur-controller-remove';
import { FakturControllerRemove$Params } from '../fn/faktur/faktur-controller-remove';
import { fakturControllerUpdate } from '../fn/faktur/faktur-controller-update';
import { FakturControllerUpdate$Params } from '../fn/faktur/faktur-controller-update';
import { FakturDto } from '../models/faktur-dto';

@Injectable({ providedIn: 'root' })
export class FakturService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `fakturControllerFindAll()` */
  static readonly FakturControllerFindAllPath = '/nonauth/faktur/faktur';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `fakturControllerFindAll()` instead.
   *
   * This method doesn't expect any request body.
   */
  fakturControllerFindAll$Response(params?: FakturControllerFindAll$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: Array<FakturDto>;
'total'?: number;
}>> {
    return fakturControllerFindAll(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `fakturControllerFindAll$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  fakturControllerFindAll(params?: FakturControllerFindAll$Params, context?: HttpContext): Observable<{
'code'?: number;
'pesan'?: string;
'data'?: Array<FakturDto>;
'total'?: number;
}> {
    return this.fakturControllerFindAll$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: Array<FakturDto>;
'total'?: number;
}>): {
'code'?: number;
'pesan'?: string;
'data'?: Array<FakturDto>;
'total'?: number;
} => r.body)
    );
  }

  /** Path part for operation `fakturControllerCreate()` */
  static readonly FakturControllerCreatePath = '/nonauth/faktur/faktur';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `fakturControllerCreate()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  fakturControllerCreate$Response(params: FakturControllerCreate$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: FakturDto;
}>> {
    return fakturControllerCreate(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `fakturControllerCreate$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  fakturControllerCreate(params: FakturControllerCreate$Params, context?: HttpContext): Observable<{
'code'?: number;
'pesan'?: string;
'data'?: FakturDto;
}> {
    return this.fakturControllerCreate$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: FakturDto;
}>): {
'code'?: number;
'pesan'?: string;
'data'?: FakturDto;
} => r.body)
    );
  }

  /** Path part for operation `fakturControllerFindOne()` */
  static readonly FakturControllerFindOnePath = '/nonauth/faktur/faktur/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `fakturControllerFindOne()` instead.
   *
   * This method doesn't expect any request body.
   */
  fakturControllerFindOne$Response(params: FakturControllerFindOne$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: FakturDto;
}>> {
    return fakturControllerFindOne(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `fakturControllerFindOne$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  fakturControllerFindOne(params: FakturControllerFindOne$Params, context?: HttpContext): Observable<{
'code'?: number;
'pesan'?: string;
'data'?: FakturDto;
}> {
    return this.fakturControllerFindOne$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: FakturDto;
}>): {
'code'?: number;
'pesan'?: string;
'data'?: FakturDto;
} => r.body)
    );
  }

  /** Path part for operation `fakturControllerUpdate()` */
  static readonly FakturControllerUpdatePath = '/nonauth/faktur/faktur/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `fakturControllerUpdate()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  fakturControllerUpdate$Response(params: FakturControllerUpdate$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: FakturDto;
}>> {
    return fakturControllerUpdate(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `fakturControllerUpdate$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  fakturControllerUpdate(params: FakturControllerUpdate$Params, context?: HttpContext): Observable<{
'code'?: number;
'pesan'?: string;
'data'?: FakturDto;
}> {
    return this.fakturControllerUpdate$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: FakturDto;
}>): {
'code'?: number;
'pesan'?: string;
'data'?: FakturDto;
} => r.body)
    );
  }

  /** Path part for operation `fakturControllerRemove()` */
  static readonly FakturControllerRemovePath = '/nonauth/faktur/faktur/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `fakturControllerRemove()` instead.
   *
   * This method doesn't expect any request body.
   */
  fakturControllerRemove$Response(params: FakturControllerRemove$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: FakturDto;
}>> {
    return fakturControllerRemove(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `fakturControllerRemove$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  fakturControllerRemove(params: FakturControllerRemove$Params, context?: HttpContext): Observable<{
'code'?: number;
'pesan'?: string;
'data'?: FakturDto;
}> {
    return this.fakturControllerRemove$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: FakturDto;
}>): {
'code'?: number;
'pesan'?: string;
'data'?: FakturDto;
} => r.body)
    );
  }

}

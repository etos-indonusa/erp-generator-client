/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { AmimsMpcWpDto } from '../models/amims-mpc-wp-dto';
import { mpcWpControllerCreate } from '../fn/mpc-wp/mpc-wp-controller-create';
import { MpcWpControllerCreate$Params } from '../fn/mpc-wp/mpc-wp-controller-create';
import { mpcWpControllerFindAll } from '../fn/mpc-wp/mpc-wp-controller-find-all';
import { MpcWpControllerFindAll$Params } from '../fn/mpc-wp/mpc-wp-controller-find-all';
import { mpcWpControllerFindOne } from '../fn/mpc-wp/mpc-wp-controller-find-one';
import { MpcWpControllerFindOne$Params } from '../fn/mpc-wp/mpc-wp-controller-find-one';
import { mpcWpControllerRemove } from '../fn/mpc-wp/mpc-wp-controller-remove';
import { MpcWpControllerRemove$Params } from '../fn/mpc-wp/mpc-wp-controller-remove';
import { mpcWpControllerUpdate } from '../fn/mpc-wp/mpc-wp-controller-update';
import { MpcWpControllerUpdate$Params } from '../fn/mpc-wp/mpc-wp-controller-update';

@Injectable({ providedIn: 'root' })
export class MpcWpService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `mpcWpControllerFindAll()` */
  static readonly MpcWpControllerFindAllPath = '/amims/mpc_wp/mpc_wp';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `mpcWpControllerFindAll()` instead.
   *
   * This method doesn't expect any request body.
   */
  mpcWpControllerFindAll$Response(params?: MpcWpControllerFindAll$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: Array<AmimsMpcWpDto>;
'total'?: number;
}>> {
    return mpcWpControllerFindAll(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `mpcWpControllerFindAll$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  mpcWpControllerFindAll(params?: MpcWpControllerFindAll$Params, context?: HttpContext): Observable<{
'code'?: number;
'pesan'?: string;
'data'?: Array<AmimsMpcWpDto>;
'total'?: number;
}> {
    return this.mpcWpControllerFindAll$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: Array<AmimsMpcWpDto>;
'total'?: number;
}>): {
'code'?: number;
'pesan'?: string;
'data'?: Array<AmimsMpcWpDto>;
'total'?: number;
} => r.body)
    );
  }

  /** Path part for operation `mpcWpControllerCreate()` */
  static readonly MpcWpControllerCreatePath = '/amims/mpc_wp/mpc_wp';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `mpcWpControllerCreate()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  mpcWpControllerCreate$Response(params: MpcWpControllerCreate$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsMpcWpDto;
}>> {
    return mpcWpControllerCreate(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `mpcWpControllerCreate$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  mpcWpControllerCreate(params: MpcWpControllerCreate$Params, context?: HttpContext): Observable<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsMpcWpDto;
}> {
    return this.mpcWpControllerCreate$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsMpcWpDto;
}>): {
'code'?: number;
'pesan'?: string;
'data'?: AmimsMpcWpDto;
} => r.body)
    );
  }

  /** Path part for operation `mpcWpControllerFindOne()` */
  static readonly MpcWpControllerFindOnePath = '/amims/mpc_wp/mpc_wp/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `mpcWpControllerFindOne()` instead.
   *
   * This method doesn't expect any request body.
   */
  mpcWpControllerFindOne$Response(params: MpcWpControllerFindOne$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsMpcWpDto;
}>> {
    return mpcWpControllerFindOne(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `mpcWpControllerFindOne$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  mpcWpControllerFindOne(params: MpcWpControllerFindOne$Params, context?: HttpContext): Observable<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsMpcWpDto;
}> {
    return this.mpcWpControllerFindOne$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsMpcWpDto;
}>): {
'code'?: number;
'pesan'?: string;
'data'?: AmimsMpcWpDto;
} => r.body)
    );
  }

  /** Path part for operation `mpcWpControllerUpdate()` */
  static readonly MpcWpControllerUpdatePath = '/amims/mpc_wp/mpc_wp/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `mpcWpControllerUpdate()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  mpcWpControllerUpdate$Response(params: MpcWpControllerUpdate$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsMpcWpDto;
}>> {
    return mpcWpControllerUpdate(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `mpcWpControllerUpdate$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  mpcWpControllerUpdate(params: MpcWpControllerUpdate$Params, context?: HttpContext): Observable<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsMpcWpDto;
}> {
    return this.mpcWpControllerUpdate$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsMpcWpDto;
}>): {
'code'?: number;
'pesan'?: string;
'data'?: AmimsMpcWpDto;
} => r.body)
    );
  }

  /** Path part for operation `mpcWpControllerRemove()` */
  static readonly MpcWpControllerRemovePath = '/amims/mpc_wp/mpc_wp/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `mpcWpControllerRemove()` instead.
   *
   * This method doesn't expect any request body.
   */
  mpcWpControllerRemove$Response(params: MpcWpControllerRemove$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsMpcWpDto;
}>> {
    return mpcWpControllerRemove(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `mpcWpControllerRemove$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  mpcWpControllerRemove(params: MpcWpControllerRemove$Params, context?: HttpContext): Observable<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsMpcWpDto;
}> {
    return this.mpcWpControllerRemove$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsMpcWpDto;
}>): {
'code'?: number;
'pesan'?: string;
'data'?: AmimsMpcWpDto;
} => r.body)
    );
  }

}

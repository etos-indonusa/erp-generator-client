/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { AmimsPurPoDto } from '../models/amims-pur-po-dto';
import { purPoControllerCreate } from '../fn/pur-po/pur-po-controller-create';
import { PurPoControllerCreate$Params } from '../fn/pur-po/pur-po-controller-create';
import { purPoControllerFindAll } from '../fn/pur-po/pur-po-controller-find-all';
import { PurPoControllerFindAll$Params } from '../fn/pur-po/pur-po-controller-find-all';
import { purPoControllerFindOne } from '../fn/pur-po/pur-po-controller-find-one';
import { PurPoControllerFindOne$Params } from '../fn/pur-po/pur-po-controller-find-one';
import { purPoControllerRemove } from '../fn/pur-po/pur-po-controller-remove';
import { PurPoControllerRemove$Params } from '../fn/pur-po/pur-po-controller-remove';
import { purPoControllerUpdate } from '../fn/pur-po/pur-po-controller-update';
import { PurPoControllerUpdate$Params } from '../fn/pur-po/pur-po-controller-update';

@Injectable({ providedIn: 'root' })
export class PurPoService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `purPoControllerFindAll()` */
  static readonly PurPoControllerFindAllPath = '/amims/pur_po/pur_po';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `purPoControllerFindAll()` instead.
   *
   * This method doesn't expect any request body.
   */
  purPoControllerFindAll$Response(params?: PurPoControllerFindAll$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: Array<AmimsPurPoDto>;
'total'?: number;
}>> {
    return purPoControllerFindAll(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `purPoControllerFindAll$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  purPoControllerFindAll(params?: PurPoControllerFindAll$Params, context?: HttpContext): Observable<{
'code'?: number;
'pesan'?: string;
'data'?: Array<AmimsPurPoDto>;
'total'?: number;
}> {
    return this.purPoControllerFindAll$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: Array<AmimsPurPoDto>;
'total'?: number;
}>): {
'code'?: number;
'pesan'?: string;
'data'?: Array<AmimsPurPoDto>;
'total'?: number;
} => r.body)
    );
  }

  /** Path part for operation `purPoControllerCreate()` */
  static readonly PurPoControllerCreatePath = '/amims/pur_po/pur_po';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `purPoControllerCreate()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  purPoControllerCreate$Response(params: PurPoControllerCreate$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsPurPoDto;
}>> {
    return purPoControllerCreate(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `purPoControllerCreate$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  purPoControllerCreate(params: PurPoControllerCreate$Params, context?: HttpContext): Observable<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsPurPoDto;
}> {
    return this.purPoControllerCreate$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsPurPoDto;
}>): {
'code'?: number;
'pesan'?: string;
'data'?: AmimsPurPoDto;
} => r.body)
    );
  }

  /** Path part for operation `purPoControllerFindOne()` */
  static readonly PurPoControllerFindOnePath = '/amims/pur_po/pur_po/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `purPoControllerFindOne()` instead.
   *
   * This method doesn't expect any request body.
   */
  purPoControllerFindOne$Response(params: PurPoControllerFindOne$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsPurPoDto;
}>> {
    return purPoControllerFindOne(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `purPoControllerFindOne$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  purPoControllerFindOne(params: PurPoControllerFindOne$Params, context?: HttpContext): Observable<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsPurPoDto;
}> {
    return this.purPoControllerFindOne$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsPurPoDto;
}>): {
'code'?: number;
'pesan'?: string;
'data'?: AmimsPurPoDto;
} => r.body)
    );
  }

  /** Path part for operation `purPoControllerUpdate()` */
  static readonly PurPoControllerUpdatePath = '/amims/pur_po/pur_po/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `purPoControllerUpdate()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  purPoControllerUpdate$Response(params: PurPoControllerUpdate$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsPurPoDto;
}>> {
    return purPoControllerUpdate(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `purPoControllerUpdate$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  purPoControllerUpdate(params: PurPoControllerUpdate$Params, context?: HttpContext): Observable<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsPurPoDto;
}> {
    return this.purPoControllerUpdate$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsPurPoDto;
}>): {
'code'?: number;
'pesan'?: string;
'data'?: AmimsPurPoDto;
} => r.body)
    );
  }

  /** Path part for operation `purPoControllerRemove()` */
  static readonly PurPoControllerRemovePath = '/amims/pur_po/pur_po/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `purPoControllerRemove()` instead.
   *
   * This method doesn't expect any request body.
   */
  purPoControllerRemove$Response(params: PurPoControllerRemove$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsPurPoDto;
}>> {
    return purPoControllerRemove(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `purPoControllerRemove$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  purPoControllerRemove(params: PurPoControllerRemove$Params, context?: HttpContext): Observable<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsPurPoDto;
}> {
    return this.purPoControllerRemove$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsPurPoDto;
}>): {
'code'?: number;
'pesan'?: string;
'data'?: AmimsPurPoDto;
} => r.body)
    );
  }

}

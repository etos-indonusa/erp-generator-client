/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { AmimsBinDto } from '../models/amims-bin-dto';
import { binControllerCreate } from '../fn/bin/bin-controller-create';
import { BinControllerCreate$Params } from '../fn/bin/bin-controller-create';
import { binControllerFindAll } from '../fn/bin/bin-controller-find-all';
import { BinControllerFindAll$Params } from '../fn/bin/bin-controller-find-all';
import { binControllerFindOne } from '../fn/bin/bin-controller-find-one';
import { BinControllerFindOne$Params } from '../fn/bin/bin-controller-find-one';
import { binControllerRemove } from '../fn/bin/bin-controller-remove';
import { BinControllerRemove$Params } from '../fn/bin/bin-controller-remove';
import { binControllerUpdate } from '../fn/bin/bin-controller-update';
import { BinControllerUpdate$Params } from '../fn/bin/bin-controller-update';

@Injectable({ providedIn: 'root' })
export class BinService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `binControllerFindAll()` */
  static readonly BinControllerFindAllPath = '/amims/bin/bin';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `binControllerFindAll()` instead.
   *
   * This method doesn't expect any request body.
   */
  binControllerFindAll$Response(params?: BinControllerFindAll$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: Array<AmimsBinDto>;
'total'?: number;
}>> {
    return binControllerFindAll(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `binControllerFindAll$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  binControllerFindAll(params?: BinControllerFindAll$Params, context?: HttpContext): Observable<{
'code'?: number;
'pesan'?: string;
'data'?: Array<AmimsBinDto>;
'total'?: number;
}> {
    return this.binControllerFindAll$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: Array<AmimsBinDto>;
'total'?: number;
}>): {
'code'?: number;
'pesan'?: string;
'data'?: Array<AmimsBinDto>;
'total'?: number;
} => r.body)
    );
  }

  /** Path part for operation `binControllerCreate()` */
  static readonly BinControllerCreatePath = '/amims/bin/bin';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `binControllerCreate()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  binControllerCreate$Response(params: BinControllerCreate$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsBinDto;
}>> {
    return binControllerCreate(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `binControllerCreate$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  binControllerCreate(params: BinControllerCreate$Params, context?: HttpContext): Observable<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsBinDto;
}> {
    return this.binControllerCreate$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsBinDto;
}>): {
'code'?: number;
'pesan'?: string;
'data'?: AmimsBinDto;
} => r.body)
    );
  }

  /** Path part for operation `binControllerFindOne()` */
  static readonly BinControllerFindOnePath = '/amims/bin/bin/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `binControllerFindOne()` instead.
   *
   * This method doesn't expect any request body.
   */
  binControllerFindOne$Response(params: BinControllerFindOne$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsBinDto;
}>> {
    return binControllerFindOne(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `binControllerFindOne$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  binControllerFindOne(params: BinControllerFindOne$Params, context?: HttpContext): Observable<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsBinDto;
}> {
    return this.binControllerFindOne$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsBinDto;
}>): {
'code'?: number;
'pesan'?: string;
'data'?: AmimsBinDto;
} => r.body)
    );
  }

  /** Path part for operation `binControllerUpdate()` */
  static readonly BinControllerUpdatePath = '/amims/bin/bin/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `binControllerUpdate()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  binControllerUpdate$Response(params: BinControllerUpdate$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsBinDto;
}>> {
    return binControllerUpdate(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `binControllerUpdate$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  binControllerUpdate(params: BinControllerUpdate$Params, context?: HttpContext): Observable<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsBinDto;
}> {
    return this.binControllerUpdate$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsBinDto;
}>): {
'code'?: number;
'pesan'?: string;
'data'?: AmimsBinDto;
} => r.body)
    );
  }

  /** Path part for operation `binControllerRemove()` */
  static readonly BinControllerRemovePath = '/amims/bin/bin/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `binControllerRemove()` instead.
   *
   * This method doesn't expect any request body.
   */
  binControllerRemove$Response(params: BinControllerRemove$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsBinDto;
}>> {
    return binControllerRemove(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `binControllerRemove$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  binControllerRemove(params: BinControllerRemove$Params, context?: HttpContext): Observable<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsBinDto;
}> {
    return this.binControllerRemove$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsBinDto;
}>): {
'code'?: number;
'pesan'?: string;
'data'?: AmimsBinDto;
} => r.body)
    );
  }

}

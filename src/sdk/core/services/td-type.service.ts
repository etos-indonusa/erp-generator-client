/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { AmimsTdTypeDto } from '../models/amims-td-type-dto';
import { tdTypeControllerCreate } from '../fn/td-type/td-type-controller-create';
import { TdTypeControllerCreate$Params } from '../fn/td-type/td-type-controller-create';
import { tdTypeControllerFindAll } from '../fn/td-type/td-type-controller-find-all';
import { TdTypeControllerFindAll$Params } from '../fn/td-type/td-type-controller-find-all';
import { tdTypeControllerFindOne } from '../fn/td-type/td-type-controller-find-one';
import { TdTypeControllerFindOne$Params } from '../fn/td-type/td-type-controller-find-one';
import { tdTypeControllerRemove } from '../fn/td-type/td-type-controller-remove';
import { TdTypeControllerRemove$Params } from '../fn/td-type/td-type-controller-remove';
import { tdTypeControllerUpdate } from '../fn/td-type/td-type-controller-update';
import { TdTypeControllerUpdate$Params } from '../fn/td-type/td-type-controller-update';

@Injectable({ providedIn: 'root' })
export class TdTypeService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `tdTypeControllerFindAll()` */
  static readonly TdTypeControllerFindAllPath = '/amims/td_type/td_type';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `tdTypeControllerFindAll()` instead.
   *
   * This method doesn't expect any request body.
   */
  tdTypeControllerFindAll$Response(params?: TdTypeControllerFindAll$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: Array<AmimsTdTypeDto>;
'total'?: number;
}>> {
    return tdTypeControllerFindAll(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `tdTypeControllerFindAll$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  tdTypeControllerFindAll(params?: TdTypeControllerFindAll$Params, context?: HttpContext): Observable<{
'code'?: number;
'pesan'?: string;
'data'?: Array<AmimsTdTypeDto>;
'total'?: number;
}> {
    return this.tdTypeControllerFindAll$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: Array<AmimsTdTypeDto>;
'total'?: number;
}>): {
'code'?: number;
'pesan'?: string;
'data'?: Array<AmimsTdTypeDto>;
'total'?: number;
} => r.body)
    );
  }

  /** Path part for operation `tdTypeControllerCreate()` */
  static readonly TdTypeControllerCreatePath = '/amims/td_type/td_type';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `tdTypeControllerCreate()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  tdTypeControllerCreate$Response(params: TdTypeControllerCreate$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsTdTypeDto;
}>> {
    return tdTypeControllerCreate(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `tdTypeControllerCreate$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  tdTypeControllerCreate(params: TdTypeControllerCreate$Params, context?: HttpContext): Observable<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsTdTypeDto;
}> {
    return this.tdTypeControllerCreate$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsTdTypeDto;
}>): {
'code'?: number;
'pesan'?: string;
'data'?: AmimsTdTypeDto;
} => r.body)
    );
  }

  /** Path part for operation `tdTypeControllerFindOne()` */
  static readonly TdTypeControllerFindOnePath = '/amims/td_type/td_type/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `tdTypeControllerFindOne()` instead.
   *
   * This method doesn't expect any request body.
   */
  tdTypeControllerFindOne$Response(params: TdTypeControllerFindOne$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsTdTypeDto;
}>> {
    return tdTypeControllerFindOne(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `tdTypeControllerFindOne$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  tdTypeControllerFindOne(params: TdTypeControllerFindOne$Params, context?: HttpContext): Observable<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsTdTypeDto;
}> {
    return this.tdTypeControllerFindOne$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsTdTypeDto;
}>): {
'code'?: number;
'pesan'?: string;
'data'?: AmimsTdTypeDto;
} => r.body)
    );
  }

  /** Path part for operation `tdTypeControllerUpdate()` */
  static readonly TdTypeControllerUpdatePath = '/amims/td_type/td_type/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `tdTypeControllerUpdate()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  tdTypeControllerUpdate$Response(params: TdTypeControllerUpdate$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsTdTypeDto;
}>> {
    return tdTypeControllerUpdate(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `tdTypeControllerUpdate$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  tdTypeControllerUpdate(params: TdTypeControllerUpdate$Params, context?: HttpContext): Observable<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsTdTypeDto;
}> {
    return this.tdTypeControllerUpdate$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsTdTypeDto;
}>): {
'code'?: number;
'pesan'?: string;
'data'?: AmimsTdTypeDto;
} => r.body)
    );
  }

  /** Path part for operation `tdTypeControllerRemove()` */
  static readonly TdTypeControllerRemovePath = '/amims/td_type/td_type/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `tdTypeControllerRemove()` instead.
   *
   * This method doesn't expect any request body.
   */
  tdTypeControllerRemove$Response(params: TdTypeControllerRemove$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsTdTypeDto;
}>> {
    return tdTypeControllerRemove(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `tdTypeControllerRemove$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  tdTypeControllerRemove(params: TdTypeControllerRemove$Params, context?: HttpContext): Observable<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsTdTypeDto;
}> {
    return this.tdTypeControllerRemove$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsTdTypeDto;
}>): {
'code'?: number;
'pesan'?: string;
'data'?: AmimsTdTypeDto;
} => r.body)
    );
  }

}

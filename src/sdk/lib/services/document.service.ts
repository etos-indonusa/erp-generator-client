/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { documentControllerDownloadFile } from '../fn/document/document-controller-download-file';
import { DocumentControllerDownloadFile$Params } from '../fn/document/document-controller-download-file';
import { documentControllerFindAll } from '../fn/document/document-controller-find-all';
import { DocumentControllerFindAll$Params } from '../fn/document/document-controller-find-all';
import { documentControllerFindOne } from '../fn/document/document-controller-find-one';
import { DocumentControllerFindOne$Params } from '../fn/document/document-controller-find-one';
import { documentControllerRemove } from '../fn/document/document-controller-remove';
import { DocumentControllerRemove$Params } from '../fn/document/document-controller-remove';
import { documentControllerUpdate } from '../fn/document/document-controller-update';
import { DocumentControllerUpdate$Params } from '../fn/document/document-controller-update';
import { documentControllerUploadFile } from '../fn/document/document-controller-upload-file';
import { DocumentControllerUploadFile$Params } from '../fn/document/document-controller-upload-file';
import { DocumentDto } from '../models/document-dto';

@Injectable({ providedIn: 'root' })
export class DocumentService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `documentControllerFindAll()` */
  static readonly DocumentControllerFindAllPath = '/nonauth/document/document';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `documentControllerFindAll()` instead.
   *
   * This method doesn't expect any request body.
   */
  documentControllerFindAll$Response(params?: DocumentControllerFindAll$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: Array<DocumentDto>;
'total'?: number;
}>> {
    return documentControllerFindAll(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `documentControllerFindAll$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  documentControllerFindAll(params?: DocumentControllerFindAll$Params, context?: HttpContext): Observable<{
'code'?: number;
'pesan'?: string;
'data'?: Array<DocumentDto>;
'total'?: number;
}> {
    return this.documentControllerFindAll$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: Array<DocumentDto>;
'total'?: number;
}>): {
'code'?: number;
'pesan'?: string;
'data'?: Array<DocumentDto>;
'total'?: number;
} => r.body)
    );
  }

  /** Path part for operation `documentControllerFindOne()` */
  static readonly DocumentControllerFindOnePath = '/nonauth/document/document/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `documentControllerFindOne()` instead.
   *
   * This method doesn't expect any request body.
   */
  documentControllerFindOne$Response(params: DocumentControllerFindOne$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: DocumentDto;
}>> {
    return documentControllerFindOne(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `documentControllerFindOne$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  documentControllerFindOne(params: DocumentControllerFindOne$Params, context?: HttpContext): Observable<{
'code'?: number;
'pesan'?: string;
'data'?: DocumentDto;
}> {
    return this.documentControllerFindOne$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: DocumentDto;
}>): {
'code'?: number;
'pesan'?: string;
'data'?: DocumentDto;
} => r.body)
    );
  }

  /** Path part for operation `documentControllerUpdate()` */
  static readonly DocumentControllerUpdatePath = '/nonauth/document/document/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `documentControllerUpdate()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  documentControllerUpdate$Response(params: DocumentControllerUpdate$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: DocumentDto;
}>> {
    return documentControllerUpdate(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `documentControllerUpdate$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  documentControllerUpdate(params: DocumentControllerUpdate$Params, context?: HttpContext): Observable<{
'code'?: number;
'pesan'?: string;
'data'?: DocumentDto;
}> {
    return this.documentControllerUpdate$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: DocumentDto;
}>): {
'code'?: number;
'pesan'?: string;
'data'?: DocumentDto;
} => r.body)
    );
  }

  /** Path part for operation `documentControllerRemove()` */
  static readonly DocumentControllerRemovePath = '/nonauth/document/document/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `documentControllerRemove()` instead.
   *
   * This method doesn't expect any request body.
   */
  documentControllerRemove$Response(params: DocumentControllerRemove$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: DocumentDto;
}>> {
    return documentControllerRemove(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `documentControllerRemove$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  documentControllerRemove(params: DocumentControllerRemove$Params, context?: HttpContext): Observable<{
'code'?: number;
'pesan'?: string;
'data'?: DocumentDto;
}> {
    return this.documentControllerRemove$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: DocumentDto;
}>): {
'code'?: number;
'pesan'?: string;
'data'?: DocumentDto;
} => r.body)
    );
  }

  /** Path part for operation `documentControllerDownloadFile()` */
  static readonly DocumentControllerDownloadFilePath = '/nonauth/document/document/{id}/download';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `documentControllerDownloadFile()` instead.
   *
   * This method doesn't expect any request body.
   */
  documentControllerDownloadFile$Response(params: DocumentControllerDownloadFile$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return documentControllerDownloadFile(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `documentControllerDownloadFile$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  documentControllerDownloadFile(params: DocumentControllerDownloadFile$Params, context?: HttpContext): Observable<void> {
    return this.documentControllerDownloadFile$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `documentControllerUploadFile()` */
  static readonly DocumentControllerUploadFilePath = '/nonauth/document/document/upload';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `documentControllerUploadFile()` instead.
   *
   * This method sends `multipart/form-data` and handles request body of type `multipart/form-data`.
   */
  documentControllerUploadFile$Response(params: DocumentControllerUploadFile$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return documentControllerUploadFile(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `documentControllerUploadFile$Response()` instead.
   *
   * This method sends `multipart/form-data` and handles request body of type `multipart/form-data`.
   */
  documentControllerUploadFile(params: DocumentControllerUploadFile$Params, context?: HttpContext): Observable<void> {
    return this.documentControllerUploadFile$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

}

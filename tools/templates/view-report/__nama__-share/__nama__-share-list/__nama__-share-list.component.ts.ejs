import { DatePipe } from '@angular/common';
import { Component, EventEmitter, Input, Output, SimpleChanges } from '@angular/core';
import { Router } from '@angular/router';
import { NzDrawerService } from 'ng-zorro-antd/drawer';
import { NzTableQueryParams } from 'ng-zorro-antd/table';
import { AclService } from 'src/app/services/acl.service';
import { TokenService } from 'src/app/services/token.service';
import { UserInfoService } from 'src/app/services/user-info.service';
import { PesanService } from 'src/app/shared/services/pesan.service';
import { environment } from 'src/environments/environment.prod';
import { <%= Nama_report %>Service, <%= Nama %>Service } from 'src/sdk/core/services';
import { <%= Prefix %><%= Nama %>Dto } from 'src/sdk/core/models';
import { <%= Nama %>ShareAddComponent } from '../<%= nama %>-share-add/<%= nama %>-share-add.component';
import { <%= Nama %>ShareDetailComponent } from '../<%= nama %>-share-detail/<%= nama %>-share-detail.component';
<% if (relationInjects && relationInjects.length) { -%>
<% relationInjects.forEach(inj => { -%>
import { <%- inj.split(':')[1].trim() %> } from 'src/sdk/core/services';
<% }) -%>
<% } -%>
 


@Component({
    selector: 'app-<%= nama %>-share-list',
    templateUrl: './<%= nama %>-share-list.component.html',
    styleUrl: './<%= nama %>-share-list.component.scss'
})
export class <%= Nama %>ShareListComponent {
    @Input('status') status: string | null = null;
    @Output('out_filter') out_filter = new EventEmitter<any>();
    @Input('filter-extra') filter_extra = true;
    @Input('enable-crud') enable_crud = true;
    //untuak filter dari prent
    <% relationNamas.forEach(rv => { %> 
    @Input('id<%= rv %>') id<%= rv %>: string | null  = null;
    <% }) %>

    constructor(
        private pesanService: PesanService,
        private drawerService: NzDrawerService,
        private acl: AclService,
        private router: Router,
        private userInfoService: UserInfoService,
        private <%= nama_object_report %>Service: <%= Nama_report %>Service,
        private <%= nama_object %>Service: <%= Nama %>Service,
        private tokenService: TokenService,

        <% if (relationInjects && relationInjects.length) { -%>
        <% relationInjects.forEach(inj => { -%>
        <%- inj %>,
        <% }) -%>
        <% } -%>
    ) {}

    ngOnChanges(changes: SimpleChanges): void {
        this.filter.status<%= nama_object %> = this.status == 'semua' ? null : this.status;

            <% relationNamas.forEach(rv => { %>
           
            if (changes.id<%= rv %>)
            {
                this.filter<%= rv %>.id<%= rv %> = this.id<%= rv %>
            }
            <% }) %>
        

        this.searchData();
    }

    ngOnInit(): void {
        this.currentUser = this.userInfoService.getUser;
        this.resetParam();

        <% if (relationInitCalls && relationInitCalls.length) { -%>
        <% relationInitCalls.forEach(line => { -%>
            <%- line %>
        <% }) -%>
        <% } -%>
    }

    <% relationVars.forEach(rv => { %>
    <%= rv %> 
    <% }) %>
    //untuak filter dari prent
    <% relationNamas.forEach(rv => { %>
    filter<%= rv %>:any = {} 
    <% }) %>

    // untuk fungsi get ALL relation
    <% if (relationFunctions && relationFunctions.length) { -%>
    <% relationFunctions.forEach(f => { -%>
    <%- f %>
    <% }) -%>
    <% } -%>

    currentUser: any = {};
    filter: any = {
    <%- filterLines %>
    };
 
    expandSet = new Set<string>();
    onExpandChange(id: string, checked: boolean): void {
        if (checked) {
            this.expandSet.add(id);
        } else {
            this.expandSet.delete(id);
        }
    }

    pageIndex = 1;
    pageSize = 30;
    total = 0;
    listOfData: any[] = [];
    loading = true;
    sortValue: string | null = 'asc';
    sortKey: string | null = 'created_at';
    search: string | null = null;
    search_field: string[] = <%- JSON.stringify(searchFields) %>;
 
    breadCrumbItems = [{ label: 'List', active: false }];

    resetParam() {
        this.pageIndex = 1;
        this.pageSize = 30;
        this.sortValue = 'asc';
        this.sortKey = 'created_at';
        this.search = null;
        this.filter = {
            <%- filterLines %>
        };
        this.filter.status<%= nama_object %> = this.status == 'semua' ? null : this.status;
    }

    resetData() {
        this.resetParam();
        this.searchData();
    }

    get validSortValue(): 'asc' | 'desc' | undefined {
        if (this.sortValue === 'ascend') return 'asc';
        if (this.sortValue === 'descend') return 'desc';
        return undefined;
    }

    searchData(reset: boolean = false): void {
        if (reset) this.pageIndex = 1;
        this.loading = true;

        const finalFilter: any = this.buildFilterForBackend(this.filter);
        finalFilter[`id_<%= id_primary %>`] = { isNotNull: 'aktif' };

        this.<%= nama_object_report %>Service.<%= nama_object_report %>ControllerFindAll({
            body: {
                filter: finalFilter,
                joinWhere: [
                    <% joinWhereKeys.forEach((key, index) => { -%>
                    {
                        <%- `"${key}": this.filter${pascalCase(key)}, type: 'inner'` %>
                    }<%= index < joinWhereKeys.length - 1 ? ',' : '' %>
                    <% }) -%>
                    ],
                search_field: this.search_field,
                search_keyword: this.search || undefined,
                include:  <%- JSON.stringify(autoInclude, null, 2) %>,
                sortKey: this.sortKey ?? undefined,
                sortValue: this.validSortValue,
                pageIndex: this.pageIndex,
                pageSize: this.pageSize
            }
        }).subscribe(data => {
            this.loading = false;
            this.total = data.total || 0;
            this.listOfData = data.data || [];
        }, err => {
            this.loading = false;
        });
    }

    currentSort: any = {};
    onQueryParamsChange(params: NzTableQueryParams): void {
        this.pageIndex = params.pageIndex;
        this.pageSize = params.pageSize;
        this.currentSort = params.sort.find(item => item.value !== null);
        this.sortKey = (this.currentSort && this.currentSort.key) || 'created_at';
        this.sortValue = (this.currentSort && this.currentSort.value) || 'asc';
        this.searchData();
    }

    buildFilterForBackend(filter: any): any {
        const backendFilter: any = {};
        for (const key of Object.keys(filter)) {
            const val = filter[key];
            if (val == null || val === '') continue;

            if (key.endsWith('Min')) {
                const field = key.replace(/Min$/, '');
                backendFilter[field] = backendFilter[field] || {};
                backendFilter[field].gte = val;
            } else if (key.endsWith('Max')) {
                const field = key.replace(/Max$/, '');
                backendFilter[field] = backendFilter[field] || {};
                backendFilter[field].lte = val;
            } else if (key.endsWith('Range') && Array.isArray(val)) {
                const field = key.replace(/Range$/, '');
                backendFilter[field] = {
                    between: val
                };
            } else {
                backendFilter[key] = val;
            }
        }

        return backendFilter;
    }
    add() {
    if (!this.acl.can('<%= nama %>', 'can_add') || !this.enable_crud) return;

        const drawerRef = this.drawerService.create<<%= Nama %>ShareAddComponent, {}, string>({
            nzTitle: 'Add',
            nzContent: <%= Nama %>ShareAddComponent,
        nzWidth: (500) + 'px',
        });
 
        drawerRef.afterClose.subscribe(() => {
            this.searchData();
        });
    }

     

    detail(data:<%= Prefix %><%= Nama %>Dto) {
        if (!this.acl.can('contract-site', 'can_list')) return;

        const drawerRef = this.drawerService.create<<%= Nama %>ShareDetailComponent, {}, string>({
            nzTitle: 'Detail',
            nzContent: <%= Nama %>ShareDetailComponent,
            nzWidth: (window.innerWidth * 0.8) + 'px',
            nzContentParams:{
                id<%= Nama %>:data.id<%= Nama %>
            }
        });

        drawerRef.afterClose.subscribe(() => {
            this.searchData();
        });
    }

    update(data: any) {}
    delete(id: string) {} 

    print() {
        let url = environment.srv_document + '/pdfAkutansi/vouchers?filter=' + JSON.stringify(this.filter) + '&token=' + this.tokenService.getToken();
        window.open(url, '_blank');
    }
}
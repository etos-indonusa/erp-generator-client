/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
import { HttpClient } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { map } from 'rxjs/operators';
import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { conditionMonitoringControllerCreate } from '../fn/condition-monitoring/condition-monitoring-controller-create';
import { conditionMonitoringControllerFindAll } from '../fn/condition-monitoring/condition-monitoring-controller-find-all';
import { conditionMonitoringControllerFindOne } from '../fn/condition-monitoring/condition-monitoring-controller-find-one';
import { conditionMonitoringControllerRemove } from '../fn/condition-monitoring/condition-monitoring-controller-remove';
import { conditionMonitoringControllerUpdate } from '../fn/condition-monitoring/condition-monitoring-controller-update';
import * as i0 from "@angular/core";
import * as i1 from "../api-configuration";
import * as i2 from "@angular/common/http";
export class ConditionMonitoringService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `conditionMonitoringControllerFindAll()` */
    static { this.ConditionMonitoringControllerFindAllPath = '/amims/condition_monitoring/condition_monitoring'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `conditionMonitoringControllerFindAll()` instead.
     *
     * This method doesn't expect any request body.
     */
    conditionMonitoringControllerFindAll$Response(params, context) {
        return conditionMonitoringControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `conditionMonitoringControllerFindAll$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    conditionMonitoringControllerFindAll(params, context) {
        return this.conditionMonitoringControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `conditionMonitoringControllerCreate()` */
    static { this.ConditionMonitoringControllerCreatePath = '/amims/condition_monitoring/condition_monitoring'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `conditionMonitoringControllerCreate()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    conditionMonitoringControllerCreate$Response(params, context) {
        return conditionMonitoringControllerCreate(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `conditionMonitoringControllerCreate$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    conditionMonitoringControllerCreate(params, context) {
        return this.conditionMonitoringControllerCreate$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `conditionMonitoringControllerFindOne()` */
    static { this.ConditionMonitoringControllerFindOnePath = '/amims/condition_monitoring/condition_monitoring/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `conditionMonitoringControllerFindOne()` instead.
     *
     * This method doesn't expect any request body.
     */
    conditionMonitoringControllerFindOne$Response(params, context) {
        return conditionMonitoringControllerFindOne(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `conditionMonitoringControllerFindOne$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    conditionMonitoringControllerFindOne(params, context) {
        return this.conditionMonitoringControllerFindOne$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `conditionMonitoringControllerUpdate()` */
    static { this.ConditionMonitoringControllerUpdatePath = '/amims/condition_monitoring/condition_monitoring/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `conditionMonitoringControllerUpdate()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    conditionMonitoringControllerUpdate$Response(params, context) {
        return conditionMonitoringControllerUpdate(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `conditionMonitoringControllerUpdate$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    conditionMonitoringControllerUpdate(params, context) {
        return this.conditionMonitoringControllerUpdate$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `conditionMonitoringControllerRemove()` */
    static { this.ConditionMonitoringControllerRemovePath = '/amims/condition_monitoring/condition_monitoring/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `conditionMonitoringControllerRemove()` instead.
     *
     * This method doesn't expect any request body.
     */
    conditionMonitoringControllerRemove$Response(params, context) {
        return conditionMonitoringControllerRemove(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `conditionMonitoringControllerRemove$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    conditionMonitoringControllerRemove(params, context) {
        return this.conditionMonitoringControllerRemove$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: ConditionMonitoringService, deps: [{ token: i1.ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: ConditionMonitoringService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: ConditionMonitoringService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: i1.ApiConfiguration }, { type: i2.HttpClient }] });
//# sourceMappingURL=data:application/json;base64,
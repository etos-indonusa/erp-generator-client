/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
import { HttpClient } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { map } from 'rxjs/operators';
import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { tdDetailWidgetControllerFindAll } from '../fn/td-detail-widget/td-detail-widget-controller-find-all';
import * as i0 from "@angular/core";
import * as i1 from "../api-configuration";
import * as i2 from "@angular/common/http";
export class TdDetailWidgetService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `tdDetailWidgetControllerFindAll()` */
    static { this.TdDetailWidgetControllerFindAllPath = '/amims/td_detail/td_detail_widget'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `tdDetailWidgetControllerFindAll()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    tdDetailWidgetControllerFindAll$Response(params, context) {
        return tdDetailWidgetControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `tdDetailWidgetControllerFindAll$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    tdDetailWidgetControllerFindAll(params, context) {
        return this.tdDetailWidgetControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: TdDetailWidgetService, deps: [{ token: i1.ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: TdDetailWidgetService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: TdDetailWidgetService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: i1.ApiConfiguration }, { type: i2.HttpClient }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGQtZGV0YWlsLXdpZGdldC5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvc2RrY29yZS9zcmMvbGliL3NlcnZpY2VzL3RkLWRldGFpbC13aWRnZXQuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxvQkFBb0I7QUFDcEIsb0JBQW9CO0FBQ3BCLG1EQUFtRDtBQUVuRCxPQUFPLEVBQUUsVUFBVSxFQUFlLE1BQU0sc0JBQXNCLENBQUM7QUFDL0QsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUUzQyxPQUFPLEVBQUUsR0FBRyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFFckMsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQzlDLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLHNCQUFzQixDQUFDO0FBSXhELE9BQU8sRUFBRSwrQkFBK0IsRUFBRSxNQUFNLDZEQUE2RCxDQUFDOzs7O0FBSTlHLE1BQU0sT0FBTyxxQkFBc0IsU0FBUSxXQUFXO0lBQ3BELFlBQVksTUFBd0IsRUFBRSxJQUFnQjtRQUNwRCxLQUFLLENBQUMsTUFBTSxFQUFFLElBQUksQ0FBQyxDQUFDO0lBQ3RCLENBQUM7SUFFRCxrRUFBa0U7YUFDbEQsd0NBQW1DLEdBQUcsbUNBQW1DLEFBQXRDLENBQXVDO0lBRTFGOzs7OztPQUtHO0lBQ0gsd0NBQXdDLENBQUMsTUFBOEMsRUFBRSxPQUFxQjtRQU01RyxPQUFPLCtCQUErQixDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLE9BQU8sRUFBRSxNQUFNLEVBQUUsT0FBTyxDQUFDLENBQUM7SUFDbkYsQ0FBQztJQUVEOzs7OztPQUtHO0lBQ0gsK0JBQStCLENBQUMsTUFBOEMsRUFBRSxPQUFxQjtRQU1uRyxPQUFPLElBQUksQ0FBQyx3Q0FBd0MsQ0FBQyxNQUFNLEVBQUUsT0FBTyxDQUFDLENBQUMsSUFBSSxDQUN4RSxHQUFHLENBQUMsQ0FBQyxDQUtULEVBS0EsRUFBRSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FDUCxDQUFDO0lBQ0osQ0FBQzsrR0FoRFUscUJBQXFCO21IQUFyQixxQkFBcUIsY0FEUixNQUFNOzs0RkFDbkIscUJBQXFCO2tCQURqQyxVQUFVO21CQUFDLEVBQUUsVUFBVSxFQUFFLE1BQU0sRUFBRSIsInNvdXJjZXNDb250ZW50IjpbIi8qIHRzbGludDpkaXNhYmxlICovXG4vKiBlc2xpbnQtZGlzYWJsZSAqL1xuLyogQ29kZSBnZW5lcmF0ZWQgYnkgbmctb3BlbmFwaS1nZW4gRE8gTk9UIEVESVQuICovXG5cbmltcG9ydCB7IEh0dHBDbGllbnQsIEh0dHBDb250ZXh0IH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uL2h0dHAnO1xuaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgbWFwIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuXG5pbXBvcnQgeyBCYXNlU2VydmljZSB9IGZyb20gJy4uL2Jhc2Utc2VydmljZSc7XG5pbXBvcnQgeyBBcGlDb25maWd1cmF0aW9uIH0gZnJvbSAnLi4vYXBpLWNvbmZpZ3VyYXRpb24nO1xuaW1wb3J0IHsgU3RyaWN0SHR0cFJlc3BvbnNlIH0gZnJvbSAnLi4vc3RyaWN0LWh0dHAtcmVzcG9uc2UnO1xuXG5pbXBvcnQgeyBBbWltc1RkRGV0YWlsV2lkZ2V0RHRvIH0gZnJvbSAnLi4vbW9kZWxzL2FtaW1zLXRkLWRldGFpbC13aWRnZXQtZHRvJztcbmltcG9ydCB7IHRkRGV0YWlsV2lkZ2V0Q29udHJvbGxlckZpbmRBbGwgfSBmcm9tICcuLi9mbi90ZC1kZXRhaWwtd2lkZ2V0L3RkLWRldGFpbC13aWRnZXQtY29udHJvbGxlci1maW5kLWFsbCc7XG5pbXBvcnQgeyBUZERldGFpbFdpZGdldENvbnRyb2xsZXJGaW5kQWxsJFBhcmFtcyB9IGZyb20gJy4uL2ZuL3RkLWRldGFpbC13aWRnZXQvdGQtZGV0YWlsLXdpZGdldC1jb250cm9sbGVyLWZpbmQtYWxsJztcblxuQEluamVjdGFibGUoeyBwcm92aWRlZEluOiAncm9vdCcgfSlcbmV4cG9ydCBjbGFzcyBUZERldGFpbFdpZGdldFNlcnZpY2UgZXh0ZW5kcyBCYXNlU2VydmljZSB7XG4gIGNvbnN0cnVjdG9yKGNvbmZpZzogQXBpQ29uZmlndXJhdGlvbiwgaHR0cDogSHR0cENsaWVudCkge1xuICAgIHN1cGVyKGNvbmZpZywgaHR0cCk7XG4gIH1cblxuICAvKiogUGF0aCBwYXJ0IGZvciBvcGVyYXRpb24gYHRkRGV0YWlsV2lkZ2V0Q29udHJvbGxlckZpbmRBbGwoKWAgKi9cbiAgc3RhdGljIHJlYWRvbmx5IFRkRGV0YWlsV2lkZ2V0Q29udHJvbGxlckZpbmRBbGxQYXRoID0gJy9hbWltcy90ZF9kZXRhaWwvdGRfZGV0YWlsX3dpZGdldCc7XG5cbiAgLyoqXG4gICAqIFRoaXMgbWV0aG9kIHByb3ZpZGVzIGFjY2VzcyB0byB0aGUgZnVsbCBgSHR0cFJlc3BvbnNlYCwgYWxsb3dpbmcgYWNjZXNzIHRvIHJlc3BvbnNlIGhlYWRlcnMuXG4gICAqIFRvIGFjY2VzcyBvbmx5IHRoZSByZXNwb25zZSBib2R5LCB1c2UgYHRkRGV0YWlsV2lkZ2V0Q29udHJvbGxlckZpbmRBbGwoKWAgaW5zdGVhZC5cbiAgICpcbiAgICogVGhpcyBtZXRob2Qgc2VuZHMgYGFwcGxpY2F0aW9uL2pzb25gIGFuZCBoYW5kbGVzIHJlcXVlc3QgYm9keSBvZiB0eXBlIGBhcHBsaWNhdGlvbi9qc29uYC5cbiAgICovXG4gIHRkRGV0YWlsV2lkZ2V0Q29udHJvbGxlckZpbmRBbGwkUmVzcG9uc2UocGFyYW1zOiBUZERldGFpbFdpZGdldENvbnRyb2xsZXJGaW5kQWxsJFBhcmFtcywgY29udGV4dD86IEh0dHBDb250ZXh0KTogT2JzZXJ2YWJsZTxTdHJpY3RIdHRwUmVzcG9uc2U8e1xuJ2NvZGUnPzogbnVtYmVyO1xuJ3Blc2FuJz86IHN0cmluZztcbidkYXRhJz86IEFycmF5PEFtaW1zVGREZXRhaWxXaWRnZXREdG8+O1xuJ3RvdGFsJz86IG51bWJlcjtcbn0+PiB7XG4gICAgcmV0dXJuIHRkRGV0YWlsV2lkZ2V0Q29udHJvbGxlckZpbmRBbGwodGhpcy5odHRwLCB0aGlzLnJvb3RVcmwsIHBhcmFtcywgY29udGV4dCk7XG4gIH1cblxuICAvKipcbiAgICogVGhpcyBtZXRob2QgcHJvdmlkZXMgYWNjZXNzIG9ubHkgdG8gdGhlIHJlc3BvbnNlIGJvZHkuXG4gICAqIFRvIGFjY2VzcyB0aGUgZnVsbCByZXNwb25zZSAoZm9yIGhlYWRlcnMsIGZvciBleGFtcGxlKSwgYHRkRGV0YWlsV2lkZ2V0Q29udHJvbGxlckZpbmRBbGwkUmVzcG9uc2UoKWAgaW5zdGVhZC5cbiAgICpcbiAgICogVGhpcyBtZXRob2Qgc2VuZHMgYGFwcGxpY2F0aW9uL2pzb25gIGFuZCBoYW5kbGVzIHJlcXVlc3QgYm9keSBvZiB0eXBlIGBhcHBsaWNhdGlvbi9qc29uYC5cbiAgICovXG4gIHRkRGV0YWlsV2lkZ2V0Q29udHJvbGxlckZpbmRBbGwocGFyYW1zOiBUZERldGFpbFdpZGdldENvbnRyb2xsZXJGaW5kQWxsJFBhcmFtcywgY29udGV4dD86IEh0dHBDb250ZXh0KTogT2JzZXJ2YWJsZTx7XG4nY29kZSc/OiBudW1iZXI7XG4ncGVzYW4nPzogc3RyaW5nO1xuJ2RhdGEnPzogQXJyYXk8QW1pbXNUZERldGFpbFdpZGdldER0bz47XG4ndG90YWwnPzogbnVtYmVyO1xufT4ge1xuICAgIHJldHVybiB0aGlzLnRkRGV0YWlsV2lkZ2V0Q29udHJvbGxlckZpbmRBbGwkUmVzcG9uc2UocGFyYW1zLCBjb250ZXh0KS5waXBlKFxuICAgICAgbWFwKChyOiBTdHJpY3RIdHRwUmVzcG9uc2U8e1xuJ2NvZGUnPzogbnVtYmVyO1xuJ3Blc2FuJz86IHN0cmluZztcbidkYXRhJz86IEFycmF5PEFtaW1zVGREZXRhaWxXaWRnZXREdG8+O1xuJ3RvdGFsJz86IG51bWJlcjtcbn0+KToge1xuJ2NvZGUnPzogbnVtYmVyO1xuJ3Blc2FuJz86IHN0cmluZztcbidkYXRhJz86IEFycmF5PEFtaW1zVGREZXRhaWxXaWRnZXREdG8+O1xuJ3RvdGFsJz86IG51bWJlcjtcbn0gPT4gci5ib2R5KVxuICAgICk7XG4gIH1cblxufVxuIl19
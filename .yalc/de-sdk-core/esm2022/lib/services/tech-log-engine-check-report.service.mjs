/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
import { HttpClient } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { map } from 'rxjs/operators';
import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { techLogEngineCheckReportControllerFindAll } from '../fn/tech-log-engine-check-report/tech-log-engine-check-report-controller-find-all';
import { techLogEngineCheckReportControllerFindOne } from '../fn/tech-log-engine-check-report/tech-log-engine-check-report-controller-find-one';
import * as i0 from "@angular/core";
import * as i1 from "../api-configuration";
import * as i2 from "@angular/common/http";
export class TechLogEngineCheckReportService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `techLogEngineCheckReportControllerFindAll()` */
    static { this.TechLogEngineCheckReportControllerFindAllPath = '/amims/tech_log_engine_check/tech_log_engine_check_report/list'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `techLogEngineCheckReportControllerFindAll()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    techLogEngineCheckReportControllerFindAll$Response(params, context) {
        return techLogEngineCheckReportControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `techLogEngineCheckReportControllerFindAll$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    techLogEngineCheckReportControllerFindAll(params, context) {
        return this.techLogEngineCheckReportControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `techLogEngineCheckReportControllerFindOne()` */
    static { this.TechLogEngineCheckReportControllerFindOnePath = '/amims/tech_log_engine_check/tech_log_engine_check_report/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `techLogEngineCheckReportControllerFindOne()` instead.
     *
     * This method doesn't expect any request body.
     */
    techLogEngineCheckReportControllerFindOne$Response(params, context) {
        return techLogEngineCheckReportControllerFindOne(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `techLogEngineCheckReportControllerFindOne$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    techLogEngineCheckReportControllerFindOne(params, context) {
        return this.techLogEngineCheckReportControllerFindOne$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: TechLogEngineCheckReportService, deps: [{ token: i1.ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: TechLogEngineCheckReportService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: TechLogEngineCheckReportService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: i1.ApiConfiguration }, { type: i2.HttpClient }] });
//# sourceMappingURL=data:application/json;base64,
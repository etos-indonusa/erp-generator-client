/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
import { HttpClient } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { map } from 'rxjs/operators';
import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { aircraftDetailControllerCreate } from '../fn/aircraft-detail/aircraft-detail-controller-create';
import { aircraftDetailControllerFindAll } from '../fn/aircraft-detail/aircraft-detail-controller-find-all';
import { aircraftDetailControllerFindOne } from '../fn/aircraft-detail/aircraft-detail-controller-find-one';
import { aircraftDetailControllerRemove } from '../fn/aircraft-detail/aircraft-detail-controller-remove';
import { aircraftDetailControllerUpdate } from '../fn/aircraft-detail/aircraft-detail-controller-update';
import * as i0 from "@angular/core";
import * as i1 from "../api-configuration";
import * as i2 from "@angular/common/http";
export class AircraftDetailService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `aircraftDetailControllerFindAll()` */
    static { this.AircraftDetailControllerFindAllPath = '/amims/aircraft_detail/aircraft_detail'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `aircraftDetailControllerFindAll()` instead.
     *
     * This method doesn't expect any request body.
     */
    aircraftDetailControllerFindAll$Response(params, context) {
        return aircraftDetailControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `aircraftDetailControllerFindAll$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    aircraftDetailControllerFindAll(params, context) {
        return this.aircraftDetailControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `aircraftDetailControllerCreate()` */
    static { this.AircraftDetailControllerCreatePath = '/amims/aircraft_detail/aircraft_detail'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `aircraftDetailControllerCreate()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    aircraftDetailControllerCreate$Response(params, context) {
        return aircraftDetailControllerCreate(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `aircraftDetailControllerCreate$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    aircraftDetailControllerCreate(params, context) {
        return this.aircraftDetailControllerCreate$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `aircraftDetailControllerFindOne()` */
    static { this.AircraftDetailControllerFindOnePath = '/amims/aircraft_detail/aircraft_detail/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `aircraftDetailControllerFindOne()` instead.
     *
     * This method doesn't expect any request body.
     */
    aircraftDetailControllerFindOne$Response(params, context) {
        return aircraftDetailControllerFindOne(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `aircraftDetailControllerFindOne$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    aircraftDetailControllerFindOne(params, context) {
        return this.aircraftDetailControllerFindOne$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `aircraftDetailControllerUpdate()` */
    static { this.AircraftDetailControllerUpdatePath = '/amims/aircraft_detail/aircraft_detail/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `aircraftDetailControllerUpdate()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    aircraftDetailControllerUpdate$Response(params, context) {
        return aircraftDetailControllerUpdate(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `aircraftDetailControllerUpdate$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    aircraftDetailControllerUpdate(params, context) {
        return this.aircraftDetailControllerUpdate$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `aircraftDetailControllerRemove()` */
    static { this.AircraftDetailControllerRemovePath = '/amims/aircraft_detail/aircraft_detail/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `aircraftDetailControllerRemove()` instead.
     *
     * This method doesn't expect any request body.
     */
    aircraftDetailControllerRemove$Response(params, context) {
        return aircraftDetailControllerRemove(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `aircraftDetailControllerRemove$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    aircraftDetailControllerRemove(params, context) {
        return this.aircraftDetailControllerRemove$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: AircraftDetailService, deps: [{ token: i1.ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: AircraftDetailService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: AircraftDetailService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: i1.ApiConfiguration }, { type: i2.HttpClient }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWlyY3JhZnQtZGV0YWlsLnNlcnZpY2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9zZGtjb3JlL3NyYy9saWIvc2VydmljZXMvYWlyY3JhZnQtZGV0YWlsLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsb0JBQW9CO0FBQ3BCLG9CQUFvQjtBQUNwQixtREFBbUQ7QUFFbkQsT0FBTyxFQUFFLFVBQVUsRUFBZSxNQUFNLHNCQUFzQixDQUFDO0FBQy9ELE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFM0MsT0FBTyxFQUFFLEdBQUcsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBRXJDLE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUM5QyxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQztBQUd4RCxPQUFPLEVBQUUsOEJBQThCLEVBQUUsTUFBTSx5REFBeUQsQ0FBQztBQUV6RyxPQUFPLEVBQUUsK0JBQStCLEVBQUUsTUFBTSwyREFBMkQsQ0FBQztBQUU1RyxPQUFPLEVBQUUsK0JBQStCLEVBQUUsTUFBTSwyREFBMkQsQ0FBQztBQUU1RyxPQUFPLEVBQUUsOEJBQThCLEVBQUUsTUFBTSx5REFBeUQsQ0FBQztBQUV6RyxPQUFPLEVBQUUsOEJBQThCLEVBQUUsTUFBTSx5REFBeUQsQ0FBQzs7OztBQUt6RyxNQUFNLE9BQU8scUJBQXNCLFNBQVEsV0FBVztJQUNwRCxZQUFZLE1BQXdCLEVBQUUsSUFBZ0I7UUFDcEQsS0FBSyxDQUFDLE1BQU0sRUFBRSxJQUFJLENBQUMsQ0FBQztJQUN0QixDQUFDO0lBRUQsa0VBQWtFO2FBQ2xELHdDQUFtQyxHQUFHLHdDQUF3QyxBQUEzQyxDQUE0QztJQUUvRjs7Ozs7T0FLRztJQUNILHdDQUF3QyxDQUFDLE1BQStDLEVBQUUsT0FBcUI7UUFNN0csT0FBTywrQkFBK0IsQ0FBQyxJQUFJLENB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UCxDQUFDO0lBQ0osQ0FBQzsrR0FwTlUscUJBQXFCO21IQUFyQixxQkFBcUIsY0FEUixNQUFNOzs0RkFDbkIscUJBQXFCO2tCQURqQyxVQUFVO21CQUFDLEVBQUUsVUFBVSxFQUFFLE1BQU0sRUFBRSIsInNvdXJjZXNDb250ZW50IjpbIi8qIHRzbGludDpkaXNhYmxlICovXG4vKiBlc2xpbnQtZGlzYWJsZSAqL1xuLyogQ29kZSBnZW5lcmF0ZWQgYnkgbmctb3BlbmFwaS1nZW4gRE8gTk9UIEVESVQuICovXG5cbmltcG9ydCB7IEh0dHBDbGllbnQsIEh0dHBDb250ZXh0IH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uL2h0dHAnO1xuaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgbWFwIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuXG5pbXBvcnQgeyBCYXNlU2VydmljZSB9IGZyb20gJy4uL2Jhc2Utc2VydmljZSc7XG5pbXBvcnQgeyBBcGlDb25maWd1cmF0aW9uIH0gZnJvbSAnLi4vYXBpLWNvbmZpZ3VyYXRpb24nO1xuaW1wb3J0IHsgU3RyaWN0SHR0cFJlc3BvbnNlIH0gZnJvbSAnLi4vc3RyaWN0LWh0dHAtcmVzcG9uc2UnO1xuXG5pbXBvcnQgeyBhaXJjcmFmdERldGFpbENvbnRyb2xsZXJDcmVhdGUgfSBmcm9tICcuLi9mbi9haXJjcmFmdC1kZXRhaWwvYWlyY3JhZnQtZGV0YWlsLWNvbnRyb2xsZXItY3JlYXRlJztcbmltcG9ydCB7IEFpcmNyYWZ0RGV0YWlsQ29udHJvbGxlckNyZWF0ZSRQYXJhbXMgfSBmcm9tICcuLi9mbi9haXJjcmFmdC1kZXRhaWwvYWlyY3JhZnQtZGV0YWlsLWNvbnRyb2xsZXItY3JlYXRlJztcbmltcG9ydCB7IGFpcmNyYWZ0RGV0YWlsQ29udHJvbGxlckZpbmRBbGwgfSBmcm9tICcuLi9mbi9haXJjcmFmdC1kZXRhaWwvYWlyY3JhZnQtZGV0YWlsLWNvbnRyb2xsZXItZmluZC1hbGwnO1xuaW1wb3J0IHsgQWlyY3JhZnREZXRhaWxDb250cm9sbGVyRmluZEFsbCRQYXJhbXMgfSBmcm9tICcuLi9mbi9haXJjcmFmdC1kZXRhaWwvYWlyY3JhZnQtZGV0YWlsLWNvbnRyb2xsZXItZmluZC1hbGwnO1xuaW1wb3J0IHsgYWlyY3JhZnREZXRhaWxDb250cm9sbGVyRmluZE9uZSB9IGZyb20gJy4uL2ZuL2FpcmNyYWZ0LWRldGFpbC9haXJjcmFmdC1kZXRhaWwtY29udHJvbGxlci1maW5kLW9uZSc7XG5pbXBvcnQgeyBBaXJjcmFmdERldGFpbENvbnRyb2xsZXJGaW5kT25lJFBhcmFtcyB9IGZyb20gJy4uL2ZuL2FpcmNyYWZ0LWRldGFpbC9haXJjcmFmdC1kZXRhaWwtY29udHJvbGxlci1maW5kLW9uZSc7XG5pbXBvcnQgeyBhaXJjcmFmdERldGFpbENvbnRyb2xsZXJSZW1vdmUgfSBmcm9tICcuLi9mbi9haXJjcmFmdC1kZXRhaWwvYWlyY3JhZnQtZGV0YWlsLWNvbnRyb2xsZXItcmVtb3ZlJztcbmltcG9ydCB7IEFpcmNyYWZ0RGV0YWlsQ29udHJvbGxlclJlbW92ZSRQYXJhbXMgfSBmcm9tICcuLi9mbi9haXJjcmFmdC1kZXRhaWwvYWlyY3JhZnQtZGV0YWlsLWNvbnRyb2xsZXItcmVtb3ZlJztcbmltcG9ydCB7IGFpcmNyYWZ0RGV0YWlsQ29udHJvbGxlclVwZGF0ZSB9IGZyb20gJy4uL2ZuL2FpcmNyYWZ0LWRldGFpbC9haXJjcmFmdC1kZXRhaWwtY29udHJvbGxlci11cGRhdGUnO1xuaW1wb3J0IHsgQWlyY3JhZnREZXRhaWxDb250cm9sbGVyVXBkYXRlJFBhcmFtcyB9IGZyb20gJy4uL2ZuL2FpcmNyYWZ0LWRldGFpbC9haXJjcmFmdC1kZXRhaWwtY29udHJvbGxlci11cGRhdGUnO1xuaW1wb3J0IHsgQW1pbXNBaXJjcmFmdERldGFpbER0byB9IGZyb20gJy4uL21vZGVscy9hbWltcy1haXJjcmFmdC1kZXRhaWwtZHRvJztcblxuQEluamVjdGFibGUoeyBwcm92aWRlZEluOiAncm9vdCcgfSlcbmV4cG9ydCBjbGFzcyBBaXJjcmFmdERldGFpbFNlcnZpY2UgZXh0ZW5kcyBCYXNlU2VydmljZSB7XG4gIGNvbnN0cnVjdG9yKGNvbmZpZzogQXBpQ29uZmlndXJhdGlvbiwgaHR0cDogSHR0cENsaWVudCkge1xuICAgIHN1cGVyKGNvbmZpZywgaHR0cCk7XG4gIH1cblxuICAvKiogUGF0aCBwYXJ0IGZvciBvcGVyYXRpb24gYGFpcmNyYWZ0RGV0YWlsQ29udHJvbGxlckZpbmRBbGwoKWAgKi9cbiAgc3RhdGljIHJlYWRvbmx5IEFpcmNyYWZ0RGV0YWlsQ29udHJvbGxlckZpbmRBbGxQYXRoID0gJy9hbWltcy9haXJjcmFmdF9kZXRhaWwvYWlyY3JhZnRfZGV0YWlsJztcblxuICAvKipcbiAgICogVGhpcyBtZXRob2QgcHJvdmlkZXMgYWNjZXNzIHRvIHRoZSBmdWxsIGBIdHRwUmVzcG9uc2VgLCBhbGxvd2luZyBhY2Nlc3MgdG8gcmVzcG9uc2UgaGVhZGVycy5cbiAgICogVG8gYWNjZXNzIG9ubHkgdGhlIHJlc3BvbnNlIGJvZHksIHVzZSBgYWlyY3JhZnREZXRhaWxDb250cm9sbGVyRmluZEFsbCgpYCBpbnN0ZWFkLlxuICAgKlxuICAgKiBUaGlzIG1ldGhvZCBkb2Vzbid0IGV4cGVjdCBhbnkgcmVxdWVzdCBib2R5LlxuICAgKi9cbiAgYWlyY3JhZnREZXRhaWxDb250cm9sbGVyRmluZEFsbCRSZXNwb25zZShwYXJhbXM/OiBBaXJjcmFmdERldGFpbENvbnRyb2xsZXJGaW5kQWxsJFBhcmFtcywgY29udGV4dD86IEh0dHBDb250ZXh0KTogT2JzZXJ2YWJsZTxTdHJpY3RIdHRwUmVzcG9uc2U8e1xuJ2NvZGUnPzogbnVtYmVyO1xuJ3Blc2FuJz86IHN0cmluZztcbidkYXRhJz86IEFycmF5PEFtaW1zQWlyY3JhZnREZXRhaWxEdG8+O1xuJ3RvdGFsJz86IG51bWJlcjtcbn0+PiB7XG4gICAgcmV0dXJuIGFpcmNyYWZ0RGV0YWlsQ29udHJvbGxlckZpbmRBbGwodGhpcy5odHRwLCB0aGlzLnJvb3RVcmwsIHBhcmFtcywgY29udGV4dCk7XG4gIH1cblxuICAvKipcbiAgICogVGhpcyBtZXRob2QgcHJvdmlkZXMgYWNjZXNzIG9ubHkgdG8gdGhlIHJlc3BvbnNlIGJvZHkuXG4gICAqIFRvIGFjY2VzcyB0aGUgZnVsbCByZXNwb25zZSAoZm9yIGhlYWRlcnMsIGZvciBleGFtcGxlKSwgYGFpcmNyYWZ0RGV0YWlsQ29udHJvbGxlckZpbmRBbGwkUmVzcG9uc2UoKWAgaW5zdGVhZC5cbiAgICpcbiAgICogVGhpcyBtZXRob2QgZG9lc24ndCBleHBlY3QgYW55IHJlcXVlc3QgYm9keS5cbiAgICovXG4gIGFpcmNyYWZ0RGV0YWlsQ29udHJvbGxlckZpbmRBbGwocGFyYW1zPzogQWlyY3JhZnREZXRhaWxDb250cm9sbGVyRmluZEFsbCRQYXJhbXMsIGNvbnRleHQ/OiBIdHRwQ29udGV4dCk6IE9ic2VydmFibGU8e1xuJ2NvZGUnPzogbnVtYmVyO1xuJ3Blc2FuJz86IHN0cmluZztcbidkYXRhJz86IEFycmF5PEFtaW1zQWlyY3JhZnREZXRhaWxEdG8+O1xuJ3RvdGFsJz86IG51bWJlcjtcbn0+IHtcbiAgICByZXR1cm4gdGhpcy5haXJjcmFmdERldGFpbENvbnRyb2xsZXJGaW5kQWxsJFJlc3BvbnNlKHBhcmFtcywgY29udGV4dCkucGlwZShcbiAgICAgIG1hcCgocjogU3RyaWN0SHR0cFJlc3BvbnNlPHtcbidjb2RlJz86IG51bWJlcjtcbidwZXNhbic/OiBzdHJpbmc7XG4nZGF0YSc/OiBBcnJheTxBbWltc0FpcmNyYWZ0RGV0YWlsRHRvPjtcbid0b3RhbCc/OiBudW1iZXI7XG59Pik6IHtcbidjb2RlJz86IG51bWJlcjtcbidwZXNhbic/OiBzdHJpbmc7XG4nZGF0YSc/OiBBcnJheTxBbWltc0FpcmNyYWZ0RGV0YWlsRHRvPjtcbid0b3RhbCc/OiBudW1iZXI7XG59ID0+IHIuYm9keSlcbiAgICApO1xuICB9XG5cbiAgLyoqIFBhdGggcGFydCBmb3Igb3BlcmF0aW9uIGBhaXJjcmFmdERldGFpbENvbnRyb2xsZXJDcmVhdGUoKWAgKi9cbiAgc3RhdGljIHJlYWRvbmx5IEFpcmNyYWZ0RGV0YWlsQ29udHJvbGxlckNyZWF0ZVBhdGggPSAnL2FtaW1zL2FpcmNyYWZ0X2RldGFpbC9haXJjcmFmdF9kZXRhaWwnO1xuXG4gIC8qKlxuICAgKiBUaGlzIG1ldGhvZCBwcm92aWRlcyBhY2Nlc3MgdG8gdGhlIGZ1bGwgYEh0dHBSZXNwb25zZWAsIGFsbG93aW5nIGFjY2VzcyB0byByZXNwb25zZSBoZWFkZXJzLlxuICAgKiBUbyBhY2Nlc3Mgb25seSB0aGUgcmVzcG9uc2UgYm9keSwgdXNlIGBhaXJjcmFmdERldGFpbENvbnRyb2xsZXJDcmVhdGUoKWAgaW5zdGVhZC5cbiAgICpcbiAgICogVGhpcyBtZXRob2Qgc2VuZHMgYGFwcGxpY2F0aW9uL2pzb25gIGFuZCBoYW5kbGVzIHJlcXVlc3QgYm9keSBvZiB0eXBlIGBhcHBsaWNhdGlvbi9qc29uYC5cbiAgICovXG4gIGFpcmNyYWZ0RGV0YWlsQ29udHJvbGxlckNyZWF0ZSRSZXNwb25zZShwYXJhbXM6IEFpcmNyYWZ0RGV0YWlsQ29udHJvbGxlckNyZWF0ZSRQYXJhbXMsIGNvbnRleHQ/OiBIdHRwQ29udGV4dCk6IE9ic2VydmFibGU8U3RyaWN0SHR0cFJlc3BvbnNlPHtcbidjb2RlJz86IG51bWJlcjtcbidwZXNhbic/OiBzdHJpbmc7XG4nZGF0YSc/OiBBbWltc0FpcmNyYWZ0RGV0YWlsRHRvO1xufT4+IHtcbiAgICByZXR1cm4gYWlyY3JhZnREZXRhaWxDb250cm9sbGVyQ3JlYXRlKHRoaXMuaHR0cCwgdGhpcy5yb290VXJsLCBwYXJhbXMsIGNvbnRleHQpO1xuICB9XG5cbiAgLyoqXG4gICAqIFRoaXMgbWV0aG9kIHByb3ZpZGVzIGFjY2VzcyBvbmx5IHRvIHRoZSByZXNwb25zZSBib2R5LlxuICAgKiBUbyBhY2Nlc3MgdGhlIGZ1bGwgcmVzcG9uc2UgKGZvciBoZWFkZXJzLCBmb3IgZXhhbXBsZSksIGBhaXJjcmFmdERldGFpbENvbnRyb2xsZXJDcmVhdGUkUmVzcG9uc2UoKWAgaW5zdGVhZC5cbiAgICpcbiAgICogVGhpcyBtZXRob2Qgc2VuZHMgYGFwcGxpY2F0aW9uL2pzb25gIGFuZCBoYW5kbGVzIHJlcXVlc3QgYm9keSBvZiB0eXBlIGBhcHBsaWNhdGlvbi9qc29uYC5cbiAgICovXG4gIGFpcmNyYWZ0RGV0YWlsQ29udHJvbGxlckNyZWF0ZShwYXJhbXM6IEFpcmNyYWZ0RGV0YWlsQ29udHJvbGxlckNyZWF0ZSRQYXJhbXMsIGNvbnRleHQ/OiBIdHRwQ29udGV4dCk6IE9ic2VydmFibGU8e1xuJ2NvZGUnPzogbnVtYmVyO1xuJ3Blc2FuJz86IHN0cmluZztcbidkYXRhJz86IEFtaW1zQWlyY3JhZnREZXRhaWxEdG87XG59PiB7XG4gICAgcmV0dXJuIHRoaXMuYWlyY3JhZnREZXRhaWxDb250cm9sbGVyQ3JlYXRlJFJlc3BvbnNlKHBhcmFtcywgY29udGV4dCkucGlwZShcbiAgICAgIG1hcCgocjogU3RyaWN0SHR0cFJlc3BvbnNlPHtcbidjb2RlJz86IG51bWJlcjtcbidwZXNhbic/OiBzdHJpbmc7XG4nZGF0YSc/OiBBbWltc0FpcmNyYWZ0RGV0YWlsRHRvO1xufT4pOiB7XG4nY29kZSc/OiBudW1iZXI7XG4ncGVzYW4nPzogc3RyaW5nO1xuJ2RhdGEnPzogQW1pbXNBaXJjcmFmdERldGFpbER0bztcbn0gPT4gci5ib2R5KVxuICAgICk7XG4gIH1cblxuICAvKiogUGF0aCBwYXJ0IGZvciBvcGVyYXRpb24gYGFpcmNyYWZ0RGV0YWlsQ29udHJvbGxlckZpbmRPbmUoKWAgKi9cbiAgc3RhdGljIHJlYWRvbmx5IEFpcmNyYWZ0RGV0YWlsQ29udHJvbGxlckZpbmRPbmVQYXRoID0gJy9hbWltcy9haXJjcmFmdF9kZXRhaWwvYWlyY3JhZnRfZGV0YWlsL3tpZH0nO1xuXG4gIC8qKlxuICAgKiBUaGlzIG1ldGhvZCBwcm92aWRlcyBhY2Nlc3MgdG8gdGhlIGZ1bGwgYEh0dHBSZXNwb25zZWAsIGFsbG93aW5nIGFjY2VzcyB0byByZXNwb25zZSBoZWFkZXJzLlxuICAgKiBUbyBhY2Nlc3Mgb25seSB0aGUgcmVzcG9uc2UgYm9keSwgdXNlIGBhaXJjcmFmdERldGFpbENvbnRyb2xsZXJGaW5kT25lKClgIGluc3RlYWQuXG4gICAqXG4gICAqIFRoaXMgbWV0aG9kIGRvZXNuJ3QgZXhwZWN0IGFueSByZXF1ZXN0IGJvZHkuXG4gICAqL1xuICBhaXJjcmFmdERldGFpbENvbnRyb2xsZXJGaW5kT25lJFJlc3BvbnNlKHBhcmFtczogQWlyY3JhZnREZXRhaWxDb250cm9sbGVyRmluZE9uZSRQYXJhbXMsIGNvbnRleHQ/OiBIdHRwQ29udGV4dCk6IE9ic2VydmFibGU8U3RyaWN0SHR0cFJlc3BvbnNlPHtcbidjb2RlJz86IG51bWJlcjtcbidwZXNhbic/OiBzdHJpbmc7XG4nZGF0YSc/OiBBbWltc0FpcmNyYWZ0RGV0YWlsRHRvO1xufT4+IHtcbiAgICByZXR1cm4gYWlyY3JhZnREZXRhaWxDb250cm9sbGVyRmluZE9uZSh0aGlzLmh0dHAsIHRoaXMucm9vdFVybCwgcGFyYW1zLCBjb250ZXh0KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGlzIG1ldGhvZCBwcm92aWRlcyBhY2Nlc3Mgb25seSB0byB0aGUgcmVzcG9uc2UgYm9keS5cbiAgICogVG8gYWNjZXNzIHRoZSBmdWxsIHJlc3BvbnNlIChmb3IgaGVhZGVycywgZm9yIGV4YW1wbGUpLCBgYWlyY3JhZnREZXRhaWxDb250cm9sbGVyRmluZE9uZSRSZXNwb25zZSgpYCBpbnN0ZWFkLlxuICAgKlxuICAgKiBUaGlzIG1ldGhvZCBkb2Vzbid0IGV4cGVjdCBhbnkgcmVxdWVzdCBib2R5LlxuICAgKi9cbiAgYWlyY3JhZnREZXRhaWxDb250cm9sbGVyRmluZE9uZShwYXJhbXM6IEFpcmNyYWZ0RGV0YWlsQ29udHJvbGxlckZpbmRPbmUkUGFyYW1zLCBjb250ZXh0PzogSHR0cENvbnRleHQpOiBPYnNlcnZhYmxlPHtcbidjb2RlJz86IG51bWJlcjtcbidwZXNhbic/OiBzdHJpbmc7XG4nZGF0YSc/OiBBbWltc0FpcmNyYWZ0RGV0YWlsRHRvO1xufT4ge1xuICAgIHJldHVybiB0aGlzLmFpcmNyYWZ0RGV0YWlsQ29udHJvbGxlckZpbmRPbmUkUmVzcG9uc2UocGFyYW1zLCBjb250ZXh0KS5waXBlKFxuICAgICAgbWFwKChyOiBTdHJpY3RIdHRwUmVzcG9uc2U8e1xuJ2NvZGUnPzogbnVtYmVyO1xuJ3Blc2FuJz86IHN0cmluZztcbidkYXRhJz86IEFtaW1zQWlyY3JhZnREZXRhaWxEdG87XG59Pik6IHtcbidjb2RlJz86IG51bWJlcjtcbidwZXNhbic/OiBzdHJpbmc7XG4nZGF0YSc/OiBBbWltc0FpcmNyYWZ0RGV0YWlsRHRvO1xufSA9PiByLmJvZHkpXG4gICAgKTtcbiAgfVxuXG4gIC8qKiBQYXRoIHBhcnQgZm9yIG9wZXJhdGlvbiBgYWlyY3JhZnREZXRhaWxDb250cm9sbGVyVXBkYXRlKClgICovXG4gIHN0YXRpYyByZWFkb25seSBBaXJjcmFmdERldGFpbENvbnRyb2xsZXJVcGRhdGVQYXRoID0gJy9hbWltcy9haXJjcmFmdF9kZXRhaWwvYWlyY3JhZnRfZGV0YWlsL3tpZH0nO1xuXG4gIC8qKlxuICAgKiBUaGlzIG1ldGhvZCBwcm92aWRlcyBhY2Nlc3MgdG8gdGhlIGZ1bGwgYEh0dHBSZXNwb25zZWAsIGFsbG93aW5nIGFjY2VzcyB0byByZXNwb25zZSBoZWFkZXJzLlxuICAgKiBUbyBhY2Nlc3Mgb25seSB0aGUgcmVzcG9uc2UgYm9keSwgdXNlIGBhaXJjcmFmdERldGFpbENvbnRyb2xsZXJVcGRhdGUoKWAgaW5zdGVhZC5cbiAgICpcbiAgICogVGhpcyBtZXRob2Qgc2VuZHMgYGFwcGxpY2F0aW9uL2pzb25gIGFuZCBoYW5kbGVzIHJlcXVlc3QgYm9keSBvZiB0eXBlIGBhcHBsaWNhdGlvbi9qc29uYC5cbiAgICovXG4gIGFpcmNyYWZ0RGV0YWlsQ29udHJvbGxlclVwZGF0ZSRSZXNwb25zZShwYXJhbXM6IEFpcmNyYWZ0RGV0YWlsQ29udHJvbGxlclVwZGF0ZSRQYXJhbXMsIGNvbnRleHQ/OiBIdHRwQ29udGV4dCk6IE9ic2VydmFibGU8U3RyaWN0SHR0cFJlc3BvbnNlPHtcbidjb2RlJz86IG51bWJlcjtcbidwZXNhbic/OiBzdHJpbmc7XG4nZGF0YSc/OiBBbWltc0FpcmNyYWZ0RGV0YWlsRHRvO1xufT4+IHtcbiAgICByZXR1cm4gYWlyY3JhZnREZXRhaWxDb250cm9sbGVyVXBkYXRlKHRoaXMuaHR0cCwgdGhpcy5yb290VXJsLCBwYXJhbXMsIGNvbnRleHQpO1xuICB9XG5cbiAgLyoqXG4gICAqIFRoaXMgbWV0aG9kIHByb3ZpZGVzIGFjY2VzcyBvbmx5IHRvIHRoZSByZXNwb25zZSBib2R5LlxuICAgKiBUbyBhY2Nlc3MgdGhlIGZ1bGwgcmVzcG9uc2UgKGZvciBoZWFkZXJzLCBmb3IgZXhhbXBsZSksIGBhaXJjcmFmdERldGFpbENvbnRyb2xsZXJVcGRhdGUkUmVzcG9uc2UoKWAgaW5zdGVhZC5cbiAgICpcbiAgICogVGhpcyBtZXRob2Qgc2VuZHMgYGFwcGxpY2F0aW9uL2pzb25gIGFuZCBoYW5kbGVzIHJlcXVlc3QgYm9keSBvZiB0eXBlIGBhcHBsaWNhdGlvbi9qc29uYC5cbiAgICovXG4gIGFpcmNyYWZ0RGV0YWlsQ29udHJvbGxlclVwZGF0ZShwYXJhbXM6IEFpcmNyYWZ0RGV0YWlsQ29udHJvbGxlclVwZGF0ZSRQYXJhbXMsIGNvbnRleHQ/OiBIdHRwQ29udGV4dCk6IE9ic2VydmFibGU8e1xuJ2NvZGUnPzogbnVtYmVyO1xuJ3Blc2FuJz86IHN0cmluZztcbidkYXRhJz86IEFtaW1zQWlyY3JhZnREZXRhaWxEdG87XG59PiB7XG4gICAgcmV0dXJuIHRoaXMuYWlyY3JhZnREZXRhaWxDb250cm9sbGVyVXBkYXRlJFJlc3BvbnNlKHBhcmFtcywgY29udGV4dCkucGlwZShcbiAgICAgIG1hcCgocjogU3RyaWN0SHR0cFJlc3BvbnNlPHtcbidjb2RlJz86IG51bWJlcjtcbidwZXNhbic/OiBzdHJpbmc7XG4nZGF0YSc/OiBBbWltc0FpcmNyYWZ0RGV0YWlsRHRvO1xufT4pOiB7XG4nY29kZSc/OiBudW1iZXI7XG4ncGVzYW4nPzogc3RyaW5nO1xuJ2RhdGEnPzogQW1pbXNBaXJjcmFmdERldGFpbER0bztcbn0gPT4gci5ib2R5KVxuICAgICk7XG4gIH1cblxuICAvKiogUGF0aCBwYXJ0IGZvciBvcGVyYXRpb24gYGFpcmNyYWZ0RGV0YWlsQ29udHJvbGxlclJlbW92ZSgpYCAqL1xuICBzdGF0aWMgcmVhZG9ubHkgQWlyY3JhZnREZXRhaWxDb250cm9sbGVyUmVtb3ZlUGF0aCA9ICcvYW1pbXMvYWlyY3JhZnRfZGV0YWlsL2FpcmNyYWZ0X2RldGFpbC97aWR9JztcblxuICAvKipcbiAgICogVGhpcyBtZXRob2QgcHJvdmlkZXMgYWNjZXNzIHRvIHRoZSBmdWxsIGBIdHRwUmVzcG9uc2VgLCBhbGxvd2luZyBhY2Nlc3MgdG8gcmVzcG9uc2UgaGVhZGVycy5cbiAgICogVG8gYWNjZXNzIG9ubHkgdGhlIHJlc3BvbnNlIGJvZHksIHVzZSBgYWlyY3JhZnREZXRhaWxDb250cm9sbGVyUmVtb3ZlKClgIGluc3RlYWQuXG4gICAqXG4gICAqIFRoaXMgbWV0aG9kIGRvZXNuJ3QgZXhwZWN0IGFueSByZXF1ZXN0IGJvZHkuXG4gICAqL1xuICBhaXJjcmFmdERldGFpbENvbnRyb2xsZXJSZW1vdmUkUmVzcG9uc2UocGFyYW1zOiBBaXJjcmFmdERldGFpbENvbnRyb2xsZXJSZW1vdmUkUGFyYW1zLCBjb250ZXh0PzogSHR0cENvbnRleHQpOiBPYnNlcnZhYmxlPFN0cmljdEh0dHBSZXNwb25zZTx7XG4nY29kZSc/OiBudW1iZXI7XG4ncGVzYW4nPzogc3RyaW5nO1xuJ2RhdGEnPzogQW1pbXNBaXJjcmFmdERldGFpbER0bztcbn0+PiB7XG4gICAgcmV0dXJuIGFpcmNyYWZ0RGV0YWlsQ29udHJvbGxlclJlbW92ZSh0aGlzLmh0dHAsIHRoaXMucm9vdFVybCwgcGFyYW1zLCBjb250ZXh0KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGlzIG1ldGhvZCBwcm92aWRlcyBhY2Nlc3Mgb25seSB0byB0aGUgcmVzcG9uc2UgYm9keS5cbiAgICogVG8gYWNjZXNzIHRoZSBmdWxsIHJlc3BvbnNlIChmb3IgaGVhZGVycywgZm9yIGV4YW1wbGUpLCBgYWlyY3JhZnREZXRhaWxDb250cm9sbGVyUmVtb3ZlJFJlc3BvbnNlKClgIGluc3RlYWQuXG4gICAqXG4gICAqIFRoaXMgbWV0aG9kIGRvZXNuJ3QgZXhwZWN0IGFueSByZXF1ZXN0IGJvZHkuXG4gICAqL1xuICBhaXJjcmFmdERldGFpbENvbnRyb2xsZXJSZW1vdmUocGFyYW1zOiBBaXJjcmFmdERldGFpbENvbnRyb2xsZXJSZW1vdmUkUGFyYW1zLCBjb250ZXh0PzogSHR0cENvbnRleHQpOiBPYnNlcnZhYmxlPHtcbidjb2RlJz86IG51bWJlcjtcbidwZXNhbic/OiBzdHJpbmc7XG4nZGF0YSc/OiBBbWltc0FpcmNyYWZ0RGV0YWlsRHRvO1xufT4ge1xuICAgIHJldHVybiB0aGlzLmFpcmNyYWZ0RGV0YWlsQ29udHJvbGxlclJlbW92ZSRSZXNwb25zZShwYXJhbXMsIGNvbnRleHQpLnBpcGUoXG4gICAgICBtYXAoKHI6IFN0cmljdEh0dHBSZXNwb25zZTx7XG4nY29kZSc/OiBudW1iZXI7XG4ncGVzYW4nPzogc3RyaW5nO1xuJ2RhdGEnPzogQW1pbXNBaXJjcmFmdERldGFpbER0bztcbn0+KToge1xuJ2NvZGUnPzogbnVtYmVyO1xuJ3Blc2FuJz86IHN0cmluZztcbidkYXRhJz86IEFtaW1zQWlyY3JhZnREZXRhaWxEdG87XG59ID0+IHIuYm9keSlcbiAgICApO1xuICB9XG5cbn1cbiJdfQ==
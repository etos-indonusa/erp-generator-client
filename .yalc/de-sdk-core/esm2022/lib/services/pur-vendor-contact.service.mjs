/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
import { HttpClient } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { map } from 'rxjs/operators';
import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { purVendorContactControllerCreate } from '../fn/pur-vendor-contact/pur-vendor-contact-controller-create';
import { purVendorContactControllerFindAll } from '../fn/pur-vendor-contact/pur-vendor-contact-controller-find-all';
import { purVendorContactControllerFindOne } from '../fn/pur-vendor-contact/pur-vendor-contact-controller-find-one';
import { purVendorContactControllerRemove } from '../fn/pur-vendor-contact/pur-vendor-contact-controller-remove';
import { purVendorContactControllerUpdate } from '../fn/pur-vendor-contact/pur-vendor-contact-controller-update';
import * as i0 from "@angular/core";
import * as i1 from "../api-configuration";
import * as i2 from "@angular/common/http";
export class PurVendorContactService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `purVendorContactControllerFindAll()` */
    static { this.PurVendorContactControllerFindAllPath = '/amims/pur_vendor_contact/pur_vendor_contact'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `purVendorContactControllerFindAll()` instead.
     *
     * This method doesn't expect any request body.
     */
    purVendorContactControllerFindAll$Response(params, context) {
        return purVendorContactControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `purVendorContactControllerFindAll$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    purVendorContactControllerFindAll(params, context) {
        return this.purVendorContactControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `purVendorContactControllerCreate()` */
    static { this.PurVendorContactControllerCreatePath = '/amims/pur_vendor_contact/pur_vendor_contact'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `purVendorContactControllerCreate()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    purVendorContactControllerCreate$Response(params, context) {
        return purVendorContactControllerCreate(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `purVendorContactControllerCreate$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    purVendorContactControllerCreate(params, context) {
        return this.purVendorContactControllerCreate$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `purVendorContactControllerFindOne()` */
    static { this.PurVendorContactControllerFindOnePath = '/amims/pur_vendor_contact/pur_vendor_contact/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `purVendorContactControllerFindOne()` instead.
     *
     * This method doesn't expect any request body.
     */
    purVendorContactControllerFindOne$Response(params, context) {
        return purVendorContactControllerFindOne(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `purVendorContactControllerFindOne$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    purVendorContactControllerFindOne(params, context) {
        return this.purVendorContactControllerFindOne$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `purVendorContactControllerUpdate()` */
    static { this.PurVendorContactControllerUpdatePath = '/amims/pur_vendor_contact/pur_vendor_contact/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `purVendorContactControllerUpdate()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    purVendorContactControllerUpdate$Response(params, context) {
        return purVendorContactControllerUpdate(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `purVendorContactControllerUpdate$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    purVendorContactControllerUpdate(params, context) {
        return this.purVendorContactControllerUpdate$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `purVendorContactControllerRemove()` */
    static { this.PurVendorContactControllerRemovePath = '/amims/pur_vendor_contact/pur_vendor_contact/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `purVendorContactControllerRemove()` instead.
     *
     * This method doesn't expect any request body.
     */
    purVendorContactControllerRemove$Response(params, context) {
        return purVendorContactControllerRemove(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `purVendorContactControllerRemove$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    purVendorContactControllerRemove(params, context) {
        return this.purVendorContactControllerRemove$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: PurVendorContactService, deps: [{ token: i1.ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: PurVendorContactService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: PurVendorContactService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: i1.ApiConfiguration }, { type: i2.HttpClient }] });
//# sourceMappingURL=data:application/json;base64,
/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
import { HttpClient } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { map } from 'rxjs/operators';
import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { purGrnControllerCreate } from '../fn/pur-grn/pur-grn-controller-create';
import { purGrnControllerFindAll } from '../fn/pur-grn/pur-grn-controller-find-all';
import { purGrnControllerFindOne } from '../fn/pur-grn/pur-grn-controller-find-one';
import { purGrnControllerRemove } from '../fn/pur-grn/pur-grn-controller-remove';
import { purGrnControllerUpdate } from '../fn/pur-grn/pur-grn-controller-update';
import * as i0 from "@angular/core";
import * as i1 from "../api-configuration";
import * as i2 from "@angular/common/http";
export class PurGrnService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `purGrnControllerFindAll()` */
    static { this.PurGrnControllerFindAllPath = '/amims/pur_grn/pur_grn'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `purGrnControllerFindAll()` instead.
     *
     * This method doesn't expect any request body.
     */
    purGrnControllerFindAll$Response(params, context) {
        return purGrnControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `purGrnControllerFindAll$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    purGrnControllerFindAll(params, context) {
        return this.purGrnControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `purGrnControllerCreate()` */
    static { this.PurGrnControllerCreatePath = '/amims/pur_grn/pur_grn'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `purGrnControllerCreate()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    purGrnControllerCreate$Response(params, context) {
        return purGrnControllerCreate(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `purGrnControllerCreate$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    purGrnControllerCreate(params, context) {
        return this.purGrnControllerCreate$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `purGrnControllerFindOne()` */
    static { this.PurGrnControllerFindOnePath = '/amims/pur_grn/pur_grn/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `purGrnControllerFindOne()` instead.
     *
     * This method doesn't expect any request body.
     */
    purGrnControllerFindOne$Response(params, context) {
        return purGrnControllerFindOne(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `purGrnControllerFindOne$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    purGrnControllerFindOne(params, context) {
        return this.purGrnControllerFindOne$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `purGrnControllerUpdate()` */
    static { this.PurGrnControllerUpdatePath = '/amims/pur_grn/pur_grn/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `purGrnControllerUpdate()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    purGrnControllerUpdate$Response(params, context) {
        return purGrnControllerUpdate(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `purGrnControllerUpdate$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    purGrnControllerUpdate(params, context) {
        return this.purGrnControllerUpdate$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `purGrnControllerRemove()` */
    static { this.PurGrnControllerRemovePath = '/amims/pur_grn/pur_grn/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `purGrnControllerRemove()` instead.
     *
     * This method doesn't expect any request body.
     */
    purGrnControllerRemove$Response(params, context) {
        return purGrnControllerRemove(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `purGrnControllerRemove$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    purGrnControllerRemove(params, context) {
        return this.purGrnControllerRemove$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: PurGrnService, deps: [{ token: i1.ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: PurGrnService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: PurGrnService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: i1.ApiConfiguration }, { type: i2.HttpClient }] });
//# sourceMappingURL=data:application/json;base64,
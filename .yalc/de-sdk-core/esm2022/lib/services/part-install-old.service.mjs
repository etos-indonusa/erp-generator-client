/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
import { HttpClient } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { map } from 'rxjs/operators';
import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { partInstallOldControllerCreate } from '../fn/part-install-old/part-install-old-controller-create';
import { partInstallOldControllerFindAll } from '../fn/part-install-old/part-install-old-controller-find-all';
import { partInstallOldControllerFindOne } from '../fn/part-install-old/part-install-old-controller-find-one';
import { partInstallOldControllerRemove } from '../fn/part-install-old/part-install-old-controller-remove';
import { partInstallOldControllerUpdate } from '../fn/part-install-old/part-install-old-controller-update';
import * as i0 from "@angular/core";
import * as i1 from "../api-configuration";
import * as i2 from "@angular/common/http";
export class PartInstallOldService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `partInstallOldControllerFindAll()` */
    static { this.PartInstallOldControllerFindAllPath = '/amims/part_install_old/part_install_old'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `partInstallOldControllerFindAll()` instead.
     *
     * This method doesn't expect any request body.
     */
    partInstallOldControllerFindAll$Response(params, context) {
        return partInstallOldControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `partInstallOldControllerFindAll$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    partInstallOldControllerFindAll(params, context) {
        return this.partInstallOldControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `partInstallOldControllerCreate()` */
    static { this.PartInstallOldControllerCreatePath = '/amims/part_install_old/part_install_old'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `partInstallOldControllerCreate()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    partInstallOldControllerCreate$Response(params, context) {
        return partInstallOldControllerCreate(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `partInstallOldControllerCreate$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    partInstallOldControllerCreate(params, context) {
        return this.partInstallOldControllerCreate$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `partInstallOldControllerFindOne()` */
    static { this.PartInstallOldControllerFindOnePath = '/amims/part_install_old/part_install_old/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `partInstallOldControllerFindOne()` instead.
     *
     * This method doesn't expect any request body.
     */
    partInstallOldControllerFindOne$Response(params, context) {
        return partInstallOldControllerFindOne(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `partInstallOldControllerFindOne$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    partInstallOldControllerFindOne(params, context) {
        return this.partInstallOldControllerFindOne$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `partInstallOldControllerUpdate()` */
    static { this.PartInstallOldControllerUpdatePath = '/amims/part_install_old/part_install_old/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `partInstallOldControllerUpdate()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    partInstallOldControllerUpdate$Response(params, context) {
        return partInstallOldControllerUpdate(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `partInstallOldControllerUpdate$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    partInstallOldControllerUpdate(params, context) {
        return this.partInstallOldControllerUpdate$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `partInstallOldControllerRemove()` */
    static { this.PartInstallOldControllerRemovePath = '/amims/part_install_old/part_install_old/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `partInstallOldControllerRemove()` instead.
     *
     * This method doesn't expect any request body.
     */
    partInstallOldControllerRemove$Response(params, context) {
        return partInstallOldControllerRemove(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `partInstallOldControllerRemove$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    partInstallOldControllerRemove(params, context) {
        return this.partInstallOldControllerRemove$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: PartInstallOldService, deps: [{ token: i1.ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: PartInstallOldService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: PartInstallOldService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: i1.ApiConfiguration }, { type: i2.HttpClient }] });
//# sourceMappingURL=data:application/json;base64,
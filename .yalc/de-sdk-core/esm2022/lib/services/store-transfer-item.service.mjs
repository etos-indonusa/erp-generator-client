/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
import { HttpClient } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { map } from 'rxjs/operators';
import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { storeTransferItemControllerCreate } from '../fn/store-transfer-item/store-transfer-item-controller-create';
import { storeTransferItemControllerFindAll } from '../fn/store-transfer-item/store-transfer-item-controller-find-all';
import { storeTransferItemControllerFindOne } from '../fn/store-transfer-item/store-transfer-item-controller-find-one';
import { storeTransferItemControllerRemove } from '../fn/store-transfer-item/store-transfer-item-controller-remove';
import { storeTransferItemControllerUpdate } from '../fn/store-transfer-item/store-transfer-item-controller-update';
import * as i0 from "@angular/core";
import * as i1 from "../api-configuration";
import * as i2 from "@angular/common/http";
export class StoreTransferItemService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `storeTransferItemControllerFindAll()` */
    static { this.StoreTransferItemControllerFindAllPath = '/amims/store_transfer_item/store_transfer_item'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `storeTransferItemControllerFindAll()` instead.
     *
     * This method doesn't expect any request body.
     */
    storeTransferItemControllerFindAll$Response(params, context) {
        return storeTransferItemControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `storeTransferItemControllerFindAll$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    storeTransferItemControllerFindAll(params, context) {
        return this.storeTransferItemControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `storeTransferItemControllerCreate()` */
    static { this.StoreTransferItemControllerCreatePath = '/amims/store_transfer_item/store_transfer_item'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `storeTransferItemControllerCreate()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    storeTransferItemControllerCreate$Response(params, context) {
        return storeTransferItemControllerCreate(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `storeTransferItemControllerCreate$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    storeTransferItemControllerCreate(params, context) {
        return this.storeTransferItemControllerCreate$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `storeTransferItemControllerFindOne()` */
    static { this.StoreTransferItemControllerFindOnePath = '/amims/store_transfer_item/store_transfer_item/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `storeTransferItemControllerFindOne()` instead.
     *
     * This method doesn't expect any request body.
     */
    storeTransferItemControllerFindOne$Response(params, context) {
        return storeTransferItemControllerFindOne(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `storeTransferItemControllerFindOne$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    storeTransferItemControllerFindOne(params, context) {
        return this.storeTransferItemControllerFindOne$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `storeTransferItemControllerUpdate()` */
    static { this.StoreTransferItemControllerUpdatePath = '/amims/store_transfer_item/store_transfer_item/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `storeTransferItemControllerUpdate()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    storeTransferItemControllerUpdate$Response(params, context) {
        return storeTransferItemControllerUpdate(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `storeTransferItemControllerUpdate$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    storeTransferItemControllerUpdate(params, context) {
        return this.storeTransferItemControllerUpdate$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `storeTransferItemControllerRemove()` */
    static { this.StoreTransferItemControllerRemovePath = '/amims/store_transfer_item/store_transfer_item/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `storeTransferItemControllerRemove()` instead.
     *
     * This method doesn't expect any request body.
     */
    storeTransferItemControllerRemove$Response(params, context) {
        return storeTransferItemControllerRemove(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `storeTransferItemControllerRemove$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    storeTransferItemControllerRemove(params, context) {
        return this.storeTransferItemControllerRemove$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: StoreTransferItemService, deps: [{ token: i1.ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: StoreTransferItemService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: StoreTransferItemService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: i1.ApiConfiguration }, { type: i2.HttpClient }] });
//# sourceMappingURL=data:application/json;base64,
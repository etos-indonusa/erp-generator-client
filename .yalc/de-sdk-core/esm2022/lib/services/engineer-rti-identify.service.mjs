/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
import { HttpClient } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { map } from 'rxjs/operators';
import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { engineerRtiIdentifyControllerCreate } from '../fn/engineer-rti-identify/engineer-rti-identify-controller-create';
import { engineerRtiIdentifyControllerFindAll } from '../fn/engineer-rti-identify/engineer-rti-identify-controller-find-all';
import { engineerRtiIdentifyControllerFindOne } from '../fn/engineer-rti-identify/engineer-rti-identify-controller-find-one';
import { engineerRtiIdentifyControllerRemove } from '../fn/engineer-rti-identify/engineer-rti-identify-controller-remove';
import { engineerRtiIdentifyControllerUpdate } from '../fn/engineer-rti-identify/engineer-rti-identify-controller-update';
import * as i0 from "@angular/core";
import * as i1 from "../api-configuration";
import * as i2 from "@angular/common/http";
export class EngineerRtiIdentifyService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `engineerRtiIdentifyControllerFindAll()` */
    static { this.EngineerRtiIdentifyControllerFindAllPath = '/amims/engineer_rti_identify/engineer_rti_identify'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `engineerRtiIdentifyControllerFindAll()` instead.
     *
     * This method doesn't expect any request body.
     */
    engineerRtiIdentifyControllerFindAll$Response(params, context) {
        return engineerRtiIdentifyControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `engineerRtiIdentifyControllerFindAll$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    engineerRtiIdentifyControllerFindAll(params, context) {
        return this.engineerRtiIdentifyControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `engineerRtiIdentifyControllerCreate()` */
    static { this.EngineerRtiIdentifyControllerCreatePath = '/amims/engineer_rti_identify/engineer_rti_identify'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `engineerRtiIdentifyControllerCreate()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    engineerRtiIdentifyControllerCreate$Response(params, context) {
        return engineerRtiIdentifyControllerCreate(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `engineerRtiIdentifyControllerCreate$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    engineerRtiIdentifyControllerCreate(params, context) {
        return this.engineerRtiIdentifyControllerCreate$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `engineerRtiIdentifyControllerFindOne()` */
    static { this.EngineerRtiIdentifyControllerFindOnePath = '/amims/engineer_rti_identify/engineer_rti_identify/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `engineerRtiIdentifyControllerFindOne()` instead.
     *
     * This method doesn't expect any request body.
     */
    engineerRtiIdentifyControllerFindOne$Response(params, context) {
        return engineerRtiIdentifyControllerFindOne(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `engineerRtiIdentifyControllerFindOne$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    engineerRtiIdentifyControllerFindOne(params, context) {
        return this.engineerRtiIdentifyControllerFindOne$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `engineerRtiIdentifyControllerUpdate()` */
    static { this.EngineerRtiIdentifyControllerUpdatePath = '/amims/engineer_rti_identify/engineer_rti_identify/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `engineerRtiIdentifyControllerUpdate()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    engineerRtiIdentifyControllerUpdate$Response(params, context) {
        return engineerRtiIdentifyControllerUpdate(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `engineerRtiIdentifyControllerUpdate$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    engineerRtiIdentifyControllerUpdate(params, context) {
        return this.engineerRtiIdentifyControllerUpdate$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `engineerRtiIdentifyControllerRemove()` */
    static { this.EngineerRtiIdentifyControllerRemovePath = '/amims/engineer_rti_identify/engineer_rti_identify/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `engineerRtiIdentifyControllerRemove()` instead.
     *
     * This method doesn't expect any request body.
     */
    engineerRtiIdentifyControllerRemove$Response(params, context) {
        return engineerRtiIdentifyControllerRemove(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `engineerRtiIdentifyControllerRemove$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    engineerRtiIdentifyControllerRemove(params, context) {
        return this.engineerRtiIdentifyControllerRemove$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: EngineerRtiIdentifyService, deps: [{ token: i1.ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: EngineerRtiIdentifyService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: EngineerRtiIdentifyService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: i1.ApiConfiguration }, { type: i2.HttpClient }] });
//# sourceMappingURL=data:application/json;base64,
/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
import { HttpClient } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { map } from 'rxjs/operators';
import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { storeTransferItemReportControllerFindAll } from '../fn/store-transfer-item-report/store-transfer-item-report-controller-find-all';
import { storeTransferItemReportControllerFindOne } from '../fn/store-transfer-item-report/store-transfer-item-report-controller-find-one';
import * as i0 from "@angular/core";
import * as i1 from "../api-configuration";
import * as i2 from "@angular/common/http";
export class StoreTransferItemReportService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `storeTransferItemReportControllerFindAll()` */
    static { this.StoreTransferItemReportControllerFindAllPath = '/amims/store_transfer_item/store_transfer_item_report/list'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `storeTransferItemReportControllerFindAll()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    storeTransferItemReportControllerFindAll$Response(params, context) {
        return storeTransferItemReportControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `storeTransferItemReportControllerFindAll$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    storeTransferItemReportControllerFindAll(params, context) {
        return this.storeTransferItemReportControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `storeTransferItemReportControllerFindOne()` */
    static { this.StoreTransferItemReportControllerFindOnePath = '/amims/store_transfer_item/store_transfer_item_report/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `storeTransferItemReportControllerFindOne()` instead.
     *
     * This method doesn't expect any request body.
     */
    storeTransferItemReportControllerFindOne$Response(params, context) {
        return storeTransferItemReportControllerFindOne(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `storeTransferItemReportControllerFindOne$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    storeTransferItemReportControllerFindOne(params, context) {
        return this.storeTransferItemReportControllerFindOne$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: StoreTransferItemReportService, deps: [{ token: i1.ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: StoreTransferItemReportService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: StoreTransferItemReportService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: i1.ApiConfiguration }, { type: i2.HttpClient }] });
//# sourceMappingURL=data:application/json;base64,
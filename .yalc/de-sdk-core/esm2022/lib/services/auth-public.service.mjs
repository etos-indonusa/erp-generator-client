/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
import { HttpClient } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { map } from 'rxjs/operators';
import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { authControllerForgotPassword } from '../fn/auth-public/auth-controller-forgot-password';
import { authControllerLogin } from '../fn/auth-public/auth-controller-login';
import { authControllerLogout } from '../fn/auth-public/auth-controller-logout';
import { authControllerRefresh } from '../fn/auth-public/auth-controller-refresh';
import { authControllerResetPassword } from '../fn/auth-public/auth-controller-reset-password';
import * as i0 from "@angular/core";
import * as i1 from "../api-configuration";
import * as i2 from "@angular/common/http";
export class AuthPublicService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `authControllerLogin()` */
    static { this.AuthControllerLoginPath = '/nonauth/auth/auth/login'; }
    /**
     * Login user.
     *
     *
     *
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `authControllerLogin()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    authControllerLogin$Response(params, context) {
        return authControllerLogin(this.http, this.rootUrl, params, context);
    }
    /**
     * Login user.
     *
     *
     *
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `authControllerLogin$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    authControllerLogin(params, context) {
        return this.authControllerLogin$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `authControllerRefresh()` */
    static { this.AuthControllerRefreshPath = '/nonauth/auth/auth/refresh-token'; }
    /**
     * Refresh token.
     *
     *
     *
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `authControllerRefresh()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    authControllerRefresh$Response(params, context) {
        return authControllerRefresh(this.http, this.rootUrl, params, context);
    }
    /**
     * Refresh token.
     *
     *
     *
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `authControllerRefresh$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    authControllerRefresh(params, context) {
        return this.authControllerRefresh$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `authControllerForgotPassword()` */
    static { this.AuthControllerForgotPasswordPath = '/nonauth/auth/auth/forgot-password'; }
    /**
     * Lupa password.
     *
     *
     *
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `authControllerForgotPassword()` instead.
     *
     * This method doesn't expect any request body.
     */
    authControllerForgotPassword$Response(params, context) {
        return authControllerForgotPassword(this.http, this.rootUrl, params, context);
    }
    /**
     * Lupa password.
     *
     *
     *
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `authControllerForgotPassword$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    authControllerForgotPassword(params, context) {
        return this.authControllerForgotPassword$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `authControllerResetPassword()` */
    static { this.AuthControllerResetPasswordPath = '/nonauth/auth/auth/reset-password'; }
    /**
     * Reset password.
     *
     *
     *
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `authControllerResetPassword()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    authControllerResetPassword$Response(params, context) {
        return authControllerResetPassword(this.http, this.rootUrl, params, context);
    }
    /**
     * Reset password.
     *
     *
     *
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `authControllerResetPassword$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    authControllerResetPassword(params, context) {
        return this.authControllerResetPassword$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `authControllerLogout()` */
    static { this.AuthControllerLogoutPath = '/nonauth/auth/auth/logout'; }
    /**
     * Logout user.
     *
     *
     *
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `authControllerLogout()` instead.
     *
     * This method doesn't expect any request body.
     */
    authControllerLogout$Response(params, context) {
        return authControllerLogout(this.http, this.rootUrl, params, context);
    }
    /**
     * Logout user.
     *
     *
     *
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `authControllerLogout$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    authControllerLogout(params, context) {
        return this.authControllerLogout$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: AuthPublicService, deps: [{ token: i1.ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: AuthPublicService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: AuthPublicService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: i1.ApiConfiguration }, { type: i2.HttpClient }] });
//# sourceMappingURL=data:application/json;base64,
/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
import { HttpClient } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { map } from 'rxjs/operators';
import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { tdControllerCreate } from '../fn/td/td-controller-create';
import { tdControllerFindAll } from '../fn/td/td-controller-find-all';
import { tdControllerFindOne } from '../fn/td/td-controller-find-one';
import { tdControllerRemove } from '../fn/td/td-controller-remove';
import { tdControllerUpdate } from '../fn/td/td-controller-update';
import * as i0 from "@angular/core";
import * as i1 from "../api-configuration";
import * as i2 from "@angular/common/http";
export class TdService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `tdControllerFindAll()` */
    static { this.TdControllerFindAllPath = '/amims/td/td'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `tdControllerFindAll()` instead.
     *
     * This method doesn't expect any request body.
     */
    tdControllerFindAll$Response(params, context) {
        return tdControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `tdControllerFindAll$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    tdControllerFindAll(params, context) {
        return this.tdControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `tdControllerCreate()` */
    static { this.TdControllerCreatePath = '/amims/td/td'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `tdControllerCreate()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    tdControllerCreate$Response(params, context) {
        return tdControllerCreate(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `tdControllerCreate$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    tdControllerCreate(params, context) {
        return this.tdControllerCreate$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `tdControllerFindOne()` */
    static { this.TdControllerFindOnePath = '/amims/td/td/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `tdControllerFindOne()` instead.
     *
     * This method doesn't expect any request body.
     */
    tdControllerFindOne$Response(params, context) {
        return tdControllerFindOne(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `tdControllerFindOne$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    tdControllerFindOne(params, context) {
        return this.tdControllerFindOne$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `tdControllerUpdate()` */
    static { this.TdControllerUpdatePath = '/amims/td/td/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `tdControllerUpdate()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    tdControllerUpdate$Response(params, context) {
        return tdControllerUpdate(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `tdControllerUpdate$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    tdControllerUpdate(params, context) {
        return this.tdControllerUpdate$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `tdControllerRemove()` */
    static { this.TdControllerRemovePath = '/amims/td/td/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `tdControllerRemove()` instead.
     *
     * This method doesn't expect any request body.
     */
    tdControllerRemove$Response(params, context) {
        return tdControllerRemove(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `tdControllerRemove$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    tdControllerRemove(params, context) {
        return this.tdControllerRemove$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: TdService, deps: [{ token: i1.ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: TdService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: TdService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: i1.ApiConfiguration }, { type: i2.HttpClient }] });
//# sourceMappingURL=data:application/json;base64,
/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
import { HttpClient } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { map } from 'rxjs/operators';
import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { logTransferControllerCreate } from '../fn/log-transfer/log-transfer-controller-create';
import { logTransferControllerFindAll } from '../fn/log-transfer/log-transfer-controller-find-all';
import { logTransferControllerFindOne } from '../fn/log-transfer/log-transfer-controller-find-one';
import { logTransferControllerRemove } from '../fn/log-transfer/log-transfer-controller-remove';
import { logTransferControllerUpdate } from '../fn/log-transfer/log-transfer-controller-update';
import * as i0 from "@angular/core";
import * as i1 from "../api-configuration";
import * as i2 from "@angular/common/http";
export class LogTransferService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `logTransferControllerFindAll()` */
    static { this.LogTransferControllerFindAllPath = '/amims/log_transfer/log_transfer'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `logTransferControllerFindAll()` instead.
     *
     * This method doesn't expect any request body.
     */
    logTransferControllerFindAll$Response(params, context) {
        return logTransferControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `logTransferControllerFindAll$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    logTransferControllerFindAll(params, context) {
        return this.logTransferControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `logTransferControllerCreate()` */
    static { this.LogTransferControllerCreatePath = '/amims/log_transfer/log_transfer'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `logTransferControllerCreate()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    logTransferControllerCreate$Response(params, context) {
        return logTransferControllerCreate(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `logTransferControllerCreate$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    logTransferControllerCreate(params, context) {
        return this.logTransferControllerCreate$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `logTransferControllerFindOne()` */
    static { this.LogTransferControllerFindOnePath = '/amims/log_transfer/log_transfer/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `logTransferControllerFindOne()` instead.
     *
     * This method doesn't expect any request body.
     */
    logTransferControllerFindOne$Response(params, context) {
        return logTransferControllerFindOne(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `logTransferControllerFindOne$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    logTransferControllerFindOne(params, context) {
        return this.logTransferControllerFindOne$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `logTransferControllerUpdate()` */
    static { this.LogTransferControllerUpdatePath = '/amims/log_transfer/log_transfer/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `logTransferControllerUpdate()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    logTransferControllerUpdate$Response(params, context) {
        return logTransferControllerUpdate(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `logTransferControllerUpdate$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    logTransferControllerUpdate(params, context) {
        return this.logTransferControllerUpdate$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `logTransferControllerRemove()` */
    static { this.LogTransferControllerRemovePath = '/amims/log_transfer/log_transfer/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `logTransferControllerRemove()` instead.
     *
     * This method doesn't expect any request body.
     */
    logTransferControllerRemove$Response(params, context) {
        return logTransferControllerRemove(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `logTransferControllerRemove$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    logTransferControllerRemove(params, context) {
        return this.logTransferControllerRemove$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: LogTransferService, deps: [{ token: i1.ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: LogTransferService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: LogTransferService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: i1.ApiConfiguration }, { type: i2.HttpClient }] });
//# sourceMappingURL=data:application/json;base64,
/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
import { HttpClient } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { map } from 'rxjs/operators';
import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { workflowStepControllerCreate } from '../fn/workflow-step/workflow-step-controller-create';
import { workflowStepControllerFindAll } from '../fn/workflow-step/workflow-step-controller-find-all';
import { workflowStepControllerFindOne } from '../fn/workflow-step/workflow-step-controller-find-one';
import { workflowStepControllerRemove } from '../fn/workflow-step/workflow-step-controller-remove';
import { workflowStepControllerUpdate } from '../fn/workflow-step/workflow-step-controller-update';
import * as i0 from "@angular/core";
import * as i1 from "../api-configuration";
import * as i2 from "@angular/common/http";
export class WorkflowStepService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `workflowStepControllerFindAll()` */
    static { this.WorkflowStepControllerFindAllPath = '/auth/workflow_step/workflow_step'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `workflowStepControllerFindAll()` instead.
     *
     * This method doesn't expect any request body.
     */
    workflowStepControllerFindAll$Response(params, context) {
        return workflowStepControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `workflowStepControllerFindAll$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    workflowStepControllerFindAll(params, context) {
        return this.workflowStepControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `workflowStepControllerCreate()` */
    static { this.WorkflowStepControllerCreatePath = '/auth/workflow_step/workflow_step'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `workflowStepControllerCreate()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    workflowStepControllerCreate$Response(params, context) {
        return workflowStepControllerCreate(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `workflowStepControllerCreate$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    workflowStepControllerCreate(params, context) {
        return this.workflowStepControllerCreate$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `workflowStepControllerFindOne()` */
    static { this.WorkflowStepControllerFindOnePath = '/auth/workflow_step/workflow_step/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `workflowStepControllerFindOne()` instead.
     *
     * This method doesn't expect any request body.
     */
    workflowStepControllerFindOne$Response(params, context) {
        return workflowStepControllerFindOne(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `workflowStepControllerFindOne$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    workflowStepControllerFindOne(params, context) {
        return this.workflowStepControllerFindOne$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `workflowStepControllerUpdate()` */
    static { this.WorkflowStepControllerUpdatePath = '/auth/workflow_step/workflow_step/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `workflowStepControllerUpdate()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    workflowStepControllerUpdate$Response(params, context) {
        return workflowStepControllerUpdate(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `workflowStepControllerUpdate$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    workflowStepControllerUpdate(params, context) {
        return this.workflowStepControllerUpdate$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `workflowStepControllerRemove()` */
    static { this.WorkflowStepControllerRemovePath = '/auth/workflow_step/workflow_step/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `workflowStepControllerRemove()` instead.
     *
     * This method doesn't expect any request body.
     */
    workflowStepControllerRemove$Response(params, context) {
        return workflowStepControllerRemove(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `workflowStepControllerRemove$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    workflowStepControllerRemove(params, context) {
        return this.workflowStepControllerRemove$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: WorkflowStepService, deps: [{ token: i1.ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: WorkflowStepService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: WorkflowStepService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: i1.ApiConfiguration }, { type: i2.HttpClient }] });
//# sourceMappingURL=data:application/json;base64,
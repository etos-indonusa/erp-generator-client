/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
import { HttpClient } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { map } from 'rxjs/operators';
import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { partAlternativeControllerCreate } from '../fn/part-alternative/part-alternative-controller-create';
import { partAlternativeControllerFindAll } from '../fn/part-alternative/part-alternative-controller-find-all';
import { partAlternativeControllerFindOne } from '../fn/part-alternative/part-alternative-controller-find-one';
import { partAlternativeControllerRemove } from '../fn/part-alternative/part-alternative-controller-remove';
import { partAlternativeControllerUpdate } from '../fn/part-alternative/part-alternative-controller-update';
import * as i0 from "@angular/core";
import * as i1 from "../api-configuration";
import * as i2 from "@angular/common/http";
export class PartAlternativeService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `partAlternativeControllerFindAll()` */
    static { this.PartAlternativeControllerFindAllPath = '/amims/part_alternative/part_alternative'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `partAlternativeControllerFindAll()` instead.
     *
     * This method doesn't expect any request body.
     */
    partAlternativeControllerFindAll$Response(params, context) {
        return partAlternativeControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `partAlternativeControllerFindAll$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    partAlternativeControllerFindAll(params, context) {
        return this.partAlternativeControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `partAlternativeControllerCreate()` */
    static { this.PartAlternativeControllerCreatePath = '/amims/part_alternative/part_alternative'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `partAlternativeControllerCreate()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    partAlternativeControllerCreate$Response(params, context) {
        return partAlternativeControllerCreate(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `partAlternativeControllerCreate$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    partAlternativeControllerCreate(params, context) {
        return this.partAlternativeControllerCreate$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `partAlternativeControllerFindOne()` */
    static { this.PartAlternativeControllerFindOnePath = '/amims/part_alternative/part_alternative/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `partAlternativeControllerFindOne()` instead.
     *
     * This method doesn't expect any request body.
     */
    partAlternativeControllerFindOne$Response(params, context) {
        return partAlternativeControllerFindOne(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `partAlternativeControllerFindOne$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    partAlternativeControllerFindOne(params, context) {
        return this.partAlternativeControllerFindOne$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `partAlternativeControllerUpdate()` */
    static { this.PartAlternativeControllerUpdatePath = '/amims/part_alternative/part_alternative/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `partAlternativeControllerUpdate()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    partAlternativeControllerUpdate$Response(params, context) {
        return partAlternativeControllerUpdate(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `partAlternativeControllerUpdate$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    partAlternativeControllerUpdate(params, context) {
        return this.partAlternativeControllerUpdate$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `partAlternativeControllerRemove()` */
    static { this.PartAlternativeControllerRemovePath = '/amims/part_alternative/part_alternative/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `partAlternativeControllerRemove()` instead.
     *
     * This method doesn't expect any request body.
     */
    partAlternativeControllerRemove$Response(params, context) {
        return partAlternativeControllerRemove(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `partAlternativeControllerRemove$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    partAlternativeControllerRemove(params, context) {
        return this.partAlternativeControllerRemove$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: PartAlternativeService, deps: [{ token: i1.ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: PartAlternativeService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: PartAlternativeService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: i1.ApiConfiguration }, { type: i2.HttpClient }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGFydC1hbHRlcm5hdGl2ZS5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvc2RrY29yZS9zcmMvbGliL3NlcnZpY2VzL3BhcnQtYWx0ZXJuYXRpdmUuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxvQkFBb0I7QUFDcEIsb0JBQW9CO0FBQ3BCLG1EQUFtRDtBQUVuRCxPQUFPLEVBQUUsVUFBVSxFQUFlLE1BQU0sc0JBQXNCLENBQUM7QUFDL0QsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUUzQyxPQUFPLEVBQUUsR0FBRyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFFckMsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQzlDLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLHNCQUFzQixDQUFDO0FBSXhELE9BQU8sRUFBRSwrQkFBK0IsRUFBRSxNQUFNLDJEQUEyRCxDQUFDO0FBRTVHLE9BQU8sRUFBRSxnQ0FBZ0MsRUFBRSxNQUFNLDZEQUE2RCxDQUFDO0FBRS9HLE9BQU8sRUFBRSxnQ0FBZ0MsRUFBRSxNQUFNLDZEQUE2RCxDQUFDO0FBRS9HLE9BQU8sRUFBRSwrQkFBK0IsRUFBRSxNQUFNLDJEQUEyRCxDQUFDO0FBRTVHLE9BQU8sRUFBRSwrQkFBK0IsRUFBRSxNQUFNLDJEQUEyRCxDQUFDOzs7O0FBSTVHLE1BQU0sT0FBTyxzQkFBdUIsU0FBUSxXQUFXO0lBQ3JELFlBQVksTUFBd0IsRUFBRSxJQUFnQjtRQUNwRCxLQUFLLENBQUMsTUFBTSxFQUFFLElBQUksQ0FBQyxDQUFDO0lBQ3RCLENBQUM7SUFFRCxtRUFBbUU7YUFDbkQseUNBQW9DLEdBQUcsMENBQTBDLEFBQTdDLENBQThDO0lBRWxHOzs7OztPQUtHO0lBQ0gseUNBQXlDLENBQUMsTUFBZ0QsRUFBRSxPQUFxQjtRQU0vRyxPQUFPLGdDQUFnQyxDQUFDLElBQUks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QUNQLENBQUM7SUFDSixDQUFDOytHQXBOVSxzQkFBc0I7bUhBQXRCLHNCQUFzQixjQURULE1BQU07OzRGQUNuQixzQkFBc0I7a0JBRGxDLFVBQVU7bUJBQUMsRUFBRSxVQUFVLEVBQUUsTUFBTSxFQUFFIiwic291cmNlc0NvbnRlbnQiOlsiLyogdHNsaW50OmRpc2FibGUgKi9cbi8qIGVzbGludC1kaXNhYmxlICovXG4vKiBDb2RlIGdlbmVyYXRlZCBieSBuZy1vcGVuYXBpLWdlbiBETyBOT1QgRURJVC4gKi9cblxuaW1wb3J0IHsgSHR0cENsaWVudCwgSHR0cENvbnRleHQgfSBmcm9tICdAYW5ndWxhci9jb21tb24vaHR0cCc7XG5pbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBtYXAgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5cbmltcG9ydCB7IEJhc2VTZXJ2aWNlIH0gZnJvbSAnLi4vYmFzZS1zZXJ2aWNlJztcbmltcG9ydCB7IEFwaUNvbmZpZ3VyYXRpb24gfSBmcm9tICcuLi9hcGktY29uZmlndXJhdGlvbic7XG5pbXBvcnQgeyBTdHJpY3RIdHRwUmVzcG9uc2UgfSBmcm9tICcuLi9zdHJpY3QtaHR0cC1yZXNwb25zZSc7XG5cbmltcG9ydCB7IEFtaW1zUGFydEFsdGVybmF0aXZlRHRvIH0gZnJvbSAnLi4vbW9kZWxzL2FtaW1zLXBhcnQtYWx0ZXJuYXRpdmUtZHRvJztcbmltcG9ydCB7IHBhcnRBbHRlcm5hdGl2ZUNvbnRyb2xsZXJDcmVhdGUgfSBmcm9tICcuLi9mbi9wYXJ0LWFsdGVybmF0aXZlL3BhcnQtYWx0ZXJuYXRpdmUtY29udHJvbGxlci1jcmVhdGUnO1xuaW1wb3J0IHsgUGFydEFsdGVybmF0aXZlQ29udHJvbGxlckNyZWF0ZSRQYXJhbXMgfSBmcm9tICcuLi9mbi9wYXJ0LWFsdGVybmF0aXZlL3BhcnQtYWx0ZXJuYXRpdmUtY29udHJvbGxlci1jcmVhdGUnO1xuaW1wb3J0IHsgcGFydEFsdGVybmF0aXZlQ29udHJvbGxlckZpbmRBbGwgfSBmcm9tICcuLi9mbi9wYXJ0LWFsdGVybmF0aXZlL3BhcnQtYWx0ZXJuYXRpdmUtY29udHJvbGxlci1maW5kLWFsbCc7XG5pbXBvcnQgeyBQYXJ0QWx0ZXJuYXRpdmVDb250cm9sbGVyRmluZEFsbCRQYXJhbXMgfSBmcm9tICcuLi9mbi9wYXJ0LWFsdGVybmF0aXZlL3BhcnQtYWx0ZXJuYXRpdmUtY29udHJvbGxlci1maW5kLWFsbCc7XG5pbXBvcnQgeyBwYXJ0QWx0ZXJuYXRpdmVDb250cm9sbGVyRmluZE9uZSB9IGZyb20gJy4uL2ZuL3BhcnQtYWx0ZXJuYXRpdmUvcGFydC1hbHRlcm5hdGl2ZS1jb250cm9sbGVyLWZpbmQtb25lJztcbmltcG9ydCB7IFBhcnRBbHRlcm5hdGl2ZUNvbnRyb2xsZXJGaW5kT25lJFBhcmFtcyB9IGZyb20gJy4uL2ZuL3BhcnQtYWx0ZXJuYXRpdmUvcGFydC1hbHRlcm5hdGl2ZS1jb250cm9sbGVyLWZpbmQtb25lJztcbmltcG9ydCB7IHBhcnRBbHRlcm5hdGl2ZUNvbnRyb2xsZXJSZW1vdmUgfSBmcm9tICcuLi9mbi9wYXJ0LWFsdGVybmF0aXZlL3BhcnQtYWx0ZXJuYXRpdmUtY29udHJvbGxlci1yZW1vdmUnO1xuaW1wb3J0IHsgUGFydEFsdGVybmF0aXZlQ29udHJvbGxlclJlbW92ZSRQYXJhbXMgfSBmcm9tICcuLi9mbi9wYXJ0LWFsdGVybmF0aXZlL3BhcnQtYWx0ZXJuYXRpdmUtY29udHJvbGxlci1yZW1vdmUnO1xuaW1wb3J0IHsgcGFydEFsdGVybmF0aXZlQ29udHJvbGxlclVwZGF0ZSB9IGZyb20gJy4uL2ZuL3BhcnQtYWx0ZXJuYXRpdmUvcGFydC1hbHRlcm5hdGl2ZS1jb250cm9sbGVyLXVwZGF0ZSc7XG5pbXBvcnQgeyBQYXJ0QWx0ZXJuYXRpdmVDb250cm9sbGVyVXBkYXRlJFBhcmFtcyB9IGZyb20gJy4uL2ZuL3BhcnQtYWx0ZXJuYXRpdmUvcGFydC1hbHRlcm5hdGl2ZS1jb250cm9sbGVyLXVwZGF0ZSc7XG5cbkBJbmplY3RhYmxlKHsgcHJvdmlkZWRJbjogJ3Jvb3QnIH0pXG5leHBvcnQgY2xhc3MgUGFydEFsdGVybmF0aXZlU2VydmljZSBleHRlbmRzIEJhc2VTZXJ2aWNlIHtcbiAgY29uc3RydWN0b3IoY29uZmlnOiBBcGlDb25maWd1cmF0aW9uLCBodHRwOiBIdHRwQ2xpZW50KSB7XG4gICAgc3VwZXIoY29uZmlnLCBodHRwKTtcbiAgfVxuXG4gIC8qKiBQYXRoIHBhcnQgZm9yIG9wZXJhdGlvbiBgcGFydEFsdGVybmF0aXZlQ29udHJvbGxlckZpbmRBbGwoKWAgKi9cbiAgc3RhdGljIHJlYWRvbmx5IFBhcnRBbHRlcm5hdGl2ZUNvbnRyb2xsZXJGaW5kQWxsUGF0aCA9ICcvYW1pbXMvcGFydF9hbHRlcm5hdGl2ZS9wYXJ0X2FsdGVybmF0aXZlJztcblxuICAvKipcbiAgICogVGhpcyBtZXRob2QgcHJvdmlkZXMgYWNjZXNzIHRvIHRoZSBmdWxsIGBIdHRwUmVzcG9uc2VgLCBhbGxvd2luZyBhY2Nlc3MgdG8gcmVzcG9uc2UgaGVhZGVycy5cbiAgICogVG8gYWNjZXNzIG9ubHkgdGhlIHJlc3BvbnNlIGJvZHksIHVzZSBgcGFydEFsdGVybmF0aXZlQ29udHJvbGxlckZpbmRBbGwoKWAgaW5zdGVhZC5cbiAgICpcbiAgICogVGhpcyBtZXRob2QgZG9lc24ndCBleHBlY3QgYW55IHJlcXVlc3QgYm9keS5cbiAgICovXG4gIHBhcnRBbHRlcm5hdGl2ZUNvbnRyb2xsZXJGaW5kQWxsJFJlc3BvbnNlKHBhcmFtcz86IFBhcnRBbHRlcm5hdGl2ZUNvbnRyb2xsZXJGaW5kQWxsJFBhcmFtcywgY29udGV4dD86IEh0dHBDb250ZXh0KTogT2JzZXJ2YWJsZTxTdHJpY3RIdHRwUmVzcG9uc2U8e1xuJ2NvZGUnPzogbnVtYmVyO1xuJ3Blc2FuJz86IHN0cmluZztcbidkYXRhJz86IEFycmF5PEFtaW1zUGFydEFsdGVybmF0aXZlRHRvPjtcbid0b3RhbCc/OiBudW1iZXI7XG59Pj4ge1xuICAgIHJldHVybiBwYXJ0QWx0ZXJuYXRpdmVDb250cm9sbGVyRmluZEFsbCh0aGlzLmh0dHAsIHRoaXMucm9vdFVybCwgcGFyYW1zLCBjb250ZXh0KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGlzIG1ldGhvZCBwcm92aWRlcyBhY2Nlc3Mgb25seSB0byB0aGUgcmVzcG9uc2UgYm9keS5cbiAgICogVG8gYWNjZXNzIHRoZSBmdWxsIHJlc3BvbnNlIChmb3IgaGVhZGVycywgZm9yIGV4YW1wbGUpLCBgcGFydEFsdGVybmF0aXZlQ29udHJvbGxlckZpbmRBbGwkUmVzcG9uc2UoKWAgaW5zdGVhZC5cbiAgICpcbiAgICogVGhpcyBtZXRob2QgZG9lc24ndCBleHBlY3QgYW55IHJlcXVlc3QgYm9keS5cbiAgICovXG4gIHBhcnRBbHRlcm5hdGl2ZUNvbnRyb2xsZXJGaW5kQWxsKHBhcmFtcz86IFBhcnRBbHRlcm5hdGl2ZUNvbnRyb2xsZXJGaW5kQWxsJFBhcmFtcywgY29udGV4dD86IEh0dHBDb250ZXh0KTogT2JzZXJ2YWJsZTx7XG4nY29kZSc/OiBudW1iZXI7XG4ncGVzYW4nPzogc3RyaW5nO1xuJ2RhdGEnPzogQXJyYXk8QW1pbXNQYXJ0QWx0ZXJuYXRpdmVEdG8+O1xuJ3RvdGFsJz86IG51bWJlcjtcbn0+IHtcbiAgICByZXR1cm4gdGhpcy5wYXJ0QWx0ZXJuYXRpdmVDb250cm9sbGVyRmluZEFsbCRSZXNwb25zZShwYXJhbXMsIGNvbnRleHQpLnBpcGUoXG4gICAgICBtYXAoKHI6IFN0cmljdEh0dHBSZXNwb25zZTx7XG4nY29kZSc/OiBudW1iZXI7XG4ncGVzYW4nPzogc3RyaW5nO1xuJ2RhdGEnPzogQXJyYXk8QW1pbXNQYXJ0QWx0ZXJuYXRpdmVEdG8+O1xuJ3RvdGFsJz86IG51bWJlcjtcbn0+KToge1xuJ2NvZGUnPzogbnVtYmVyO1xuJ3Blc2FuJz86IHN0cmluZztcbidkYXRhJz86IEFycmF5PEFtaW1zUGFydEFsdGVybmF0aXZlRHRvPjtcbid0b3RhbCc/OiBudW1iZXI7XG59ID0+IHIuYm9keSlcbiAgICApO1xuICB9XG5cbiAgLyoqIFBhdGggcGFydCBmb3Igb3BlcmF0aW9uIGBwYXJ0QWx0ZXJuYXRpdmVDb250cm9sbGVyQ3JlYXRlKClgICovXG4gIHN0YXRpYyByZWFkb25seSBQYXJ0QWx0ZXJuYXRpdmVDb250cm9sbGVyQ3JlYXRlUGF0aCA9ICcvYW1pbXMvcGFydF9hbHRlcm5hdGl2ZS9wYXJ0X2FsdGVybmF0aXZlJztcblxuICAvKipcbiAgICogVGhpcyBtZXRob2QgcHJvdmlkZXMgYWNjZXNzIHRvIHRoZSBmdWxsIGBIdHRwUmVzcG9uc2VgLCBhbGxvd2luZyBhY2Nlc3MgdG8gcmVzcG9uc2UgaGVhZGVycy5cbiAgICogVG8gYWNjZXNzIG9ubHkgdGhlIHJlc3BvbnNlIGJvZHksIHVzZSBgcGFydEFsdGVybmF0aXZlQ29udHJvbGxlckNyZWF0ZSgpYCBpbnN0ZWFkLlxuICAgKlxuICAgKiBUaGlzIG1ldGhvZCBzZW5kcyBgYXBwbGljYXRpb24vanNvbmAgYW5kIGhhbmRsZXMgcmVxdWVzdCBib2R5IG9mIHR5cGUgYGFwcGxpY2F0aW9uL2pzb25gLlxuICAgKi9cbiAgcGFydEFsdGVybmF0aXZlQ29udHJvbGxlckNyZWF0ZSRSZXNwb25zZShwYXJhbXM6IFBhcnRBbHRlcm5hdGl2ZUNvbnRyb2xsZXJDcmVhdGUkUGFyYW1zLCBjb250ZXh0PzogSHR0cENvbnRleHQpOiBPYnNlcnZhYmxlPFN0cmljdEh0dHBSZXNwb25zZTx7XG4nY29kZSc/OiBudW1iZXI7XG4ncGVzYW4nPzogc3RyaW5nO1xuJ2RhdGEnPzogQW1pbXNQYXJ0QWx0ZXJuYXRpdmVEdG87XG59Pj4ge1xuICAgIHJldHVybiBwYXJ0QWx0ZXJuYXRpdmVDb250cm9sbGVyQ3JlYXRlKHRoaXMuaHR0cCwgdGhpcy5yb290VXJsLCBwYXJhbXMsIGNvbnRleHQpO1xuICB9XG5cbiAgLyoqXG4gICAqIFRoaXMgbWV0aG9kIHByb3ZpZGVzIGFjY2VzcyBvbmx5IHRvIHRoZSByZXNwb25zZSBib2R5LlxuICAgKiBUbyBhY2Nlc3MgdGhlIGZ1bGwgcmVzcG9uc2UgKGZvciBoZWFkZXJzLCBmb3IgZXhhbXBsZSksIGBwYXJ0QWx0ZXJuYXRpdmVDb250cm9sbGVyQ3JlYXRlJFJlc3BvbnNlKClgIGluc3RlYWQuXG4gICAqXG4gICAqIFRoaXMgbWV0aG9kIHNlbmRzIGBhcHBsaWNhdGlvbi9qc29uYCBhbmQgaGFuZGxlcyByZXF1ZXN0IGJvZHkgb2YgdHlwZSBgYXBwbGljYXRpb24vanNvbmAuXG4gICAqL1xuICBwYXJ0QWx0ZXJuYXRpdmVDb250cm9sbGVyQ3JlYXRlKHBhcmFtczogUGFydEFsdGVybmF0aXZlQ29udHJvbGxlckNyZWF0ZSRQYXJhbXMsIGNvbnRleHQ/OiBIdHRwQ29udGV4dCk6IE9ic2VydmFibGU8e1xuJ2NvZGUnPzogbnVtYmVyO1xuJ3Blc2FuJz86IHN0cmluZztcbidkYXRhJz86IEFtaW1zUGFydEFsdGVybmF0aXZlRHRvO1xufT4ge1xuICAgIHJldHVybiB0aGlzLnBhcnRBbHRlcm5hdGl2ZUNvbnRyb2xsZXJDcmVhdGUkUmVzcG9uc2UocGFyYW1zLCBjb250ZXh0KS5waXBlKFxuICAgICAgbWFwKChyOiBTdHJpY3RIdHRwUmVzcG9uc2U8e1xuJ2NvZGUnPzogbnVtYmVyO1xuJ3Blc2FuJz86IHN0cmluZztcbidkYXRhJz86IEFtaW1zUGFydEFsdGVybmF0aXZlRHRvO1xufT4pOiB7XG4nY29kZSc/OiBudW1iZXI7XG4ncGVzYW4nPzogc3RyaW5nO1xuJ2RhdGEnPzogQW1pbXNQYXJ0QWx0ZXJuYXRpdmVEdG87XG59ID0+IHIuYm9keSlcbiAgICApO1xuICB9XG5cbiAgLyoqIFBhdGggcGFydCBmb3Igb3BlcmF0aW9uIGBwYXJ0QWx0ZXJuYXRpdmVDb250cm9sbGVyRmluZE9uZSgpYCAqL1xuICBzdGF0aWMgcmVhZG9ubHkgUGFydEFsdGVybmF0aXZlQ29udHJvbGxlckZpbmRPbmVQYXRoID0gJy9hbWltcy9wYXJ0X2FsdGVybmF0aXZlL3BhcnRfYWx0ZXJuYXRpdmUve2lkfSc7XG5cbiAgLyoqXG4gICAqIFRoaXMgbWV0aG9kIHByb3ZpZGVzIGFjY2VzcyB0byB0aGUgZnVsbCBgSHR0cFJlc3BvbnNlYCwgYWxsb3dpbmcgYWNjZXNzIHRvIHJlc3BvbnNlIGhlYWRlcnMuXG4gICAqIFRvIGFjY2VzcyBvbmx5IHRoZSByZXNwb25zZSBib2R5LCB1c2UgYHBhcnRBbHRlcm5hdGl2ZUNvbnRyb2xsZXJGaW5kT25lKClgIGluc3RlYWQuXG4gICAqXG4gICAqIFRoaXMgbWV0aG9kIGRvZXNuJ3QgZXhwZWN0IGFueSByZXF1ZXN0IGJvZHkuXG4gICAqL1xuICBwYXJ0QWx0ZXJuYXRpdmVDb250cm9sbGVyRmluZE9uZSRSZXNwb25zZShwYXJhbXM6IFBhcnRBbHRlcm5hdGl2ZUNvbnRyb2xsZXJGaW5kT25lJFBhcmFtcywgY29udGV4dD86IEh0dHBDb250ZXh0KTogT2JzZXJ2YWJsZTxTdHJpY3RIdHRwUmVzcG9uc2U8e1xuJ2NvZGUnPzogbnVtYmVyO1xuJ3Blc2FuJz86IHN0cmluZztcbidkYXRhJz86IEFtaW1zUGFydEFsdGVybmF0aXZlRHRvO1xufT4+IHtcbiAgICByZXR1cm4gcGFydEFsdGVybmF0aXZlQ29udHJvbGxlckZpbmRPbmUodGhpcy5odHRwLCB0aGlzLnJvb3RVcmwsIHBhcmFtcywgY29udGV4dCk7XG4gIH1cblxuICAvKipcbiAgICogVGhpcyBtZXRob2QgcHJvdmlkZXMgYWNjZXNzIG9ubHkgdG8gdGhlIHJlc3BvbnNlIGJvZHkuXG4gICAqIFRvIGFjY2VzcyB0aGUgZnVsbCByZXNwb25zZSAoZm9yIGhlYWRlcnMsIGZvciBleGFtcGxlKSwgYHBhcnRBbHRlcm5hdGl2ZUNvbnRyb2xsZXJGaW5kT25lJFJlc3BvbnNlKClgIGluc3RlYWQuXG4gICAqXG4gICAqIFRoaXMgbWV0aG9kIGRvZXNuJ3QgZXhwZWN0IGFueSByZXF1ZXN0IGJvZHkuXG4gICAqL1xuICBwYXJ0QWx0ZXJuYXRpdmVDb250cm9sbGVyRmluZE9uZShwYXJhbXM6IFBhcnRBbHRlcm5hdGl2ZUNvbnRyb2xsZXJGaW5kT25lJFBhcmFtcywgY29udGV4dD86IEh0dHBDb250ZXh0KTogT2JzZXJ2YWJsZTx7XG4nY29kZSc/OiBudW1iZXI7XG4ncGVzYW4nPzogc3RyaW5nO1xuJ2RhdGEnPzogQW1pbXNQYXJ0QWx0ZXJuYXRpdmVEdG87XG59PiB7XG4gICAgcmV0dXJuIHRoaXMucGFydEFsdGVybmF0aXZlQ29udHJvbGxlckZpbmRPbmUkUmVzcG9uc2UocGFyYW1zLCBjb250ZXh0KS5waXBlKFxuICAgICAgbWFwKChyOiBTdHJpY3RIdHRwUmVzcG9uc2U8e1xuJ2NvZGUnPzogbnVtYmVyO1xuJ3Blc2FuJz86IHN0cmluZztcbidkYXRhJz86IEFtaW1zUGFydEFsdGVybmF0aXZlRHRvO1xufT4pOiB7XG4nY29kZSc/OiBudW1iZXI7XG4ncGVzYW4nPzogc3RyaW5nO1xuJ2RhdGEnPzogQW1pbXNQYXJ0QWx0ZXJuYXRpdmVEdG87XG59ID0+IHIuYm9keSlcbiAgICApO1xuICB9XG5cbiAgLyoqIFBhdGggcGFydCBmb3Igb3BlcmF0aW9uIGBwYXJ0QWx0ZXJuYXRpdmVDb250cm9sbGVyVXBkYXRlKClgICovXG4gIHN0YXRpYyByZWFkb25seSBQYXJ0QWx0ZXJuYXRpdmVDb250cm9sbGVyVXBkYXRlUGF0aCA9ICcvYW1pbXMvcGFydF9hbHRlcm5hdGl2ZS9wYXJ0X2FsdGVybmF0aXZlL3tpZH0nO1xuXG4gIC8qKlxuICAgKiBUaGlzIG1ldGhvZCBwcm92aWRlcyBhY2Nlc3MgdG8gdGhlIGZ1bGwgYEh0dHBSZXNwb25zZWAsIGFsbG93aW5nIGFjY2VzcyB0byByZXNwb25zZSBoZWFkZXJzLlxuICAgKiBUbyBhY2Nlc3Mgb25seSB0aGUgcmVzcG9uc2UgYm9keSwgdXNlIGBwYXJ0QWx0ZXJuYXRpdmVDb250cm9sbGVyVXBkYXRlKClgIGluc3RlYWQuXG4gICAqXG4gICAqIFRoaXMgbWV0aG9kIHNlbmRzIGBhcHBsaWNhdGlvbi9qc29uYCBhbmQgaGFuZGxlcyByZXF1ZXN0IGJvZHkgb2YgdHlwZSBgYXBwbGljYXRpb24vanNvbmAuXG4gICAqL1xuICBwYXJ0QWx0ZXJuYXRpdmVDb250cm9sbGVyVXBkYXRlJFJlc3BvbnNlKHBhcmFtczogUGFydEFsdGVybmF0aXZlQ29udHJvbGxlclVwZGF0ZSRQYXJhbXMsIGNvbnRleHQ/OiBIdHRwQ29udGV4dCk6IE9ic2VydmFibGU8U3RyaWN0SHR0cFJlc3BvbnNlPHtcbidjb2RlJz86IG51bWJlcjtcbidwZXNhbic/OiBzdHJpbmc7XG4nZGF0YSc/OiBBbWltc1BhcnRBbHRlcm5hdGl2ZUR0bztcbn0+PiB7XG4gICAgcmV0dXJuIHBhcnRBbHRlcm5hdGl2ZUNvbnRyb2xsZXJVcGRhdGUodGhpcy5odHRwLCB0aGlzLnJvb3RVcmwsIHBhcmFtcywgY29udGV4dCk7XG4gIH1cblxuICAvKipcbiAgICogVGhpcyBtZXRob2QgcHJvdmlkZXMgYWNjZXNzIG9ubHkgdG8gdGhlIHJlc3BvbnNlIGJvZHkuXG4gICAqIFRvIGFjY2VzcyB0aGUgZnVsbCByZXNwb25zZSAoZm9yIGhlYWRlcnMsIGZvciBleGFtcGxlKSwgYHBhcnRBbHRlcm5hdGl2ZUNvbnRyb2xsZXJVcGRhdGUkUmVzcG9uc2UoKWAgaW5zdGVhZC5cbiAgICpcbiAgICogVGhpcyBtZXRob2Qgc2VuZHMgYGFwcGxpY2F0aW9uL2pzb25gIGFuZCBoYW5kbGVzIHJlcXVlc3QgYm9keSBvZiB0eXBlIGBhcHBsaWNhdGlvbi9qc29uYC5cbiAgICovXG4gIHBhcnRBbHRlcm5hdGl2ZUNvbnRyb2xsZXJVcGRhdGUocGFyYW1zOiBQYXJ0QWx0ZXJuYXRpdmVDb250cm9sbGVyVXBkYXRlJFBhcmFtcywgY29udGV4dD86IEh0dHBDb250ZXh0KTogT2JzZXJ2YWJsZTx7XG4nY29kZSc/OiBudW1iZXI7XG4ncGVzYW4nPzogc3RyaW5nO1xuJ2RhdGEnPzogQW1pbXNQYXJ0QWx0ZXJuYXRpdmVEdG87XG59PiB7XG4gICAgcmV0dXJuIHRoaXMucGFydEFsdGVybmF0aXZlQ29udHJvbGxlclVwZGF0ZSRSZXNwb25zZShwYXJhbXMsIGNvbnRleHQpLnBpcGUoXG4gICAgICBtYXAoKHI6IFN0cmljdEh0dHBSZXNwb25zZTx7XG4nY29kZSc/OiBudW1iZXI7XG4ncGVzYW4nPzogc3RyaW5nO1xuJ2RhdGEnPzogQW1pbXNQYXJ0QWx0ZXJuYXRpdmVEdG87XG59Pik6IHtcbidjb2RlJz86IG51bWJlcjtcbidwZXNhbic/OiBzdHJpbmc7XG4nZGF0YSc/OiBBbWltc1BhcnRBbHRlcm5hdGl2ZUR0bztcbn0gPT4gci5ib2R5KVxuICAgICk7XG4gIH1cblxuICAvKiogUGF0aCBwYXJ0IGZvciBvcGVyYXRpb24gYHBhcnRBbHRlcm5hdGl2ZUNvbnRyb2xsZXJSZW1vdmUoKWAgKi9cbiAgc3RhdGljIHJlYWRvbmx5IFBhcnRBbHRlcm5hdGl2ZUNvbnRyb2xsZXJSZW1vdmVQYXRoID0gJy9hbWltcy9wYXJ0X2FsdGVybmF0aXZlL3BhcnRfYWx0ZXJuYXRpdmUve2lkfSc7XG5cbiAgLyoqXG4gICAqIFRoaXMgbWV0aG9kIHByb3ZpZGVzIGFjY2VzcyB0byB0aGUgZnVsbCBgSHR0cFJlc3BvbnNlYCwgYWxsb3dpbmcgYWNjZXNzIHRvIHJlc3BvbnNlIGhlYWRlcnMuXG4gICAqIFRvIGFjY2VzcyBvbmx5IHRoZSByZXNwb25zZSBib2R5LCB1c2UgYHBhcnRBbHRlcm5hdGl2ZUNvbnRyb2xsZXJSZW1vdmUoKWAgaW5zdGVhZC5cbiAgICpcbiAgICogVGhpcyBtZXRob2QgZG9lc24ndCBleHBlY3QgYW55IHJlcXVlc3QgYm9keS5cbiAgICovXG4gIHBhcnRBbHRlcm5hdGl2ZUNvbnRyb2xsZXJSZW1vdmUkUmVzcG9uc2UocGFyYW1zOiBQYXJ0QWx0ZXJuYXRpdmVDb250cm9sbGVyUmVtb3ZlJFBhcmFtcywgY29udGV4dD86IEh0dHBDb250ZXh0KTogT2JzZXJ2YWJsZTxTdHJpY3RIdHRwUmVzcG9uc2U8e1xuJ2NvZGUnPzogbnVtYmVyO1xuJ3Blc2FuJz86IHN0cmluZztcbidkYXRhJz86IEFtaW1zUGFydEFsdGVybmF0aXZlRHRvO1xufT4+IHtcbiAgICByZXR1cm4gcGFydEFsdGVybmF0aXZlQ29udHJvbGxlclJlbW92ZSh0aGlzLmh0dHAsIHRoaXMucm9vdFVybCwgcGFyYW1zLCBjb250ZXh0KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGlzIG1ldGhvZCBwcm92aWRlcyBhY2Nlc3Mgb25seSB0byB0aGUgcmVzcG9uc2UgYm9keS5cbiAgICogVG8gYWNjZXNzIHRoZSBmdWxsIHJlc3BvbnNlIChmb3IgaGVhZGVycywgZm9yIGV4YW1wbGUpLCBgcGFydEFsdGVybmF0aXZlQ29udHJvbGxlclJlbW92ZSRSZXNwb25zZSgpYCBpbnN0ZWFkLlxuICAgKlxuICAgKiBUaGlzIG1ldGhvZCBkb2Vzbid0IGV4cGVjdCBhbnkgcmVxdWVzdCBib2R5LlxuICAgKi9cbiAgcGFydEFsdGVybmF0aXZlQ29udHJvbGxlclJlbW92ZShwYXJhbXM6IFBhcnRBbHRlcm5hdGl2ZUNvbnRyb2xsZXJSZW1vdmUkUGFyYW1zLCBjb250ZXh0PzogSHR0cENvbnRleHQpOiBPYnNlcnZhYmxlPHtcbidjb2RlJz86IG51bWJlcjtcbidwZXNhbic/OiBzdHJpbmc7XG4nZGF0YSc/OiBBbWltc1BhcnRBbHRlcm5hdGl2ZUR0bztcbn0+IHtcbiAgICByZXR1cm4gdGhpcy5wYXJ0QWx0ZXJuYXRpdmVDb250cm9sbGVyUmVtb3ZlJFJlc3BvbnNlKHBhcmFtcywgY29udGV4dCkucGlwZShcbiAgICAgIG1hcCgocjogU3RyaWN0SHR0cFJlc3BvbnNlPHtcbidjb2RlJz86IG51bWJlcjtcbidwZXNhbic/OiBzdHJpbmc7XG4nZGF0YSc/OiBBbWltc1BhcnRBbHRlcm5hdGl2ZUR0bztcbn0+KToge1xuJ2NvZGUnPzogbnVtYmVyO1xuJ3Blc2FuJz86IHN0cmluZztcbidkYXRhJz86IEFtaW1zUGFydEFsdGVybmF0aXZlRHRvO1xufSA9PiByLmJvZHkpXG4gICAgKTtcbiAgfVxuXG59XG4iXX0=
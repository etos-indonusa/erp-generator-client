/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
import { HttpClient } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { map } from 'rxjs/operators';
import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { techLogEngineControllerCreate } from '../fn/tech-log-engine/tech-log-engine-controller-create';
import { techLogEngineControllerFindAll } from '../fn/tech-log-engine/tech-log-engine-controller-find-all';
import { techLogEngineControllerFindOne } from '../fn/tech-log-engine/tech-log-engine-controller-find-one';
import { techLogEngineControllerRemove } from '../fn/tech-log-engine/tech-log-engine-controller-remove';
import { techLogEngineControllerUpdate } from '../fn/tech-log-engine/tech-log-engine-controller-update';
import * as i0 from "@angular/core";
import * as i1 from "../api-configuration";
import * as i2 from "@angular/common/http";
export class TechLogEngineService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `techLogEngineControllerFindAll()` */
    static { this.TechLogEngineControllerFindAllPath = '/amims/tech_log_engine/tech_log_engine'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `techLogEngineControllerFindAll()` instead.
     *
     * This method doesn't expect any request body.
     */
    techLogEngineControllerFindAll$Response(params, context) {
        return techLogEngineControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `techLogEngineControllerFindAll$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    techLogEngineControllerFindAll(params, context) {
        return this.techLogEngineControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `techLogEngineControllerCreate()` */
    static { this.TechLogEngineControllerCreatePath = '/amims/tech_log_engine/tech_log_engine'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `techLogEngineControllerCreate()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    techLogEngineControllerCreate$Response(params, context) {
        return techLogEngineControllerCreate(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `techLogEngineControllerCreate$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    techLogEngineControllerCreate(params, context) {
        return this.techLogEngineControllerCreate$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `techLogEngineControllerFindOne()` */
    static { this.TechLogEngineControllerFindOnePath = '/amims/tech_log_engine/tech_log_engine/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `techLogEngineControllerFindOne()` instead.
     *
     * This method doesn't expect any request body.
     */
    techLogEngineControllerFindOne$Response(params, context) {
        return techLogEngineControllerFindOne(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `techLogEngineControllerFindOne$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    techLogEngineControllerFindOne(params, context) {
        return this.techLogEngineControllerFindOne$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `techLogEngineControllerUpdate()` */
    static { this.TechLogEngineControllerUpdatePath = '/amims/tech_log_engine/tech_log_engine/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `techLogEngineControllerUpdate()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    techLogEngineControllerUpdate$Response(params, context) {
        return techLogEngineControllerUpdate(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `techLogEngineControllerUpdate$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    techLogEngineControllerUpdate(params, context) {
        return this.techLogEngineControllerUpdate$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `techLogEngineControllerRemove()` */
    static { this.TechLogEngineControllerRemovePath = '/amims/tech_log_engine/tech_log_engine/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `techLogEngineControllerRemove()` instead.
     *
     * This method doesn't expect any request body.
     */
    techLogEngineControllerRemove$Response(params, context) {
        return techLogEngineControllerRemove(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `techLogEngineControllerRemove$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    techLogEngineControllerRemove(params, context) {
        return this.techLogEngineControllerRemove$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: TechLogEngineService, deps: [{ token: i1.ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: TechLogEngineService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: TechLogEngineService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: i1.ApiConfiguration }, { type: i2.HttpClient }] });
//# sourceMappingURL=data:application/json;base64,
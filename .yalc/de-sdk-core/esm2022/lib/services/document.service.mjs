/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
import { HttpClient } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { map } from 'rxjs/operators';
import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { documentControllerCreate } from '../fn/document/document-controller-create';
import { documentControllerFindAll } from '../fn/document/document-controller-find-all';
import { documentControllerFindOne } from '../fn/document/document-controller-find-one';
import { documentControllerRemove } from '../fn/document/document-controller-remove';
import { documentControllerUpdate } from '../fn/document/document-controller-update';
import { documentControllerUploadFile } from '../fn/document/document-controller-upload-file';
import * as i0 from "@angular/core";
import * as i1 from "../api-configuration";
import * as i2 from "@angular/common/http";
export class DocumentService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `documentControllerFindAll()` */
    static { this.DocumentControllerFindAllPath = '/auth/document/document'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `documentControllerFindAll()` instead.
     *
     * This method doesn't expect any request body.
     */
    documentControllerFindAll$Response(params, context) {
        return documentControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `documentControllerFindAll$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    documentControllerFindAll(params, context) {
        return this.documentControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `documentControllerCreate()` */
    static { this.DocumentControllerCreatePath = '/auth/document/document'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `documentControllerCreate()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    documentControllerCreate$Response(params, context) {
        return documentControllerCreate(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `documentControllerCreate$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    documentControllerCreate(params, context) {
        return this.documentControllerCreate$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `documentControllerUploadFile()` */
    static { this.DocumentControllerUploadFilePath = '/auth/document/document/upload'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `documentControllerUploadFile()` instead.
     *
     * This method sends `multipart/form-data` and handles request body of type `multipart/form-data`.
     */
    documentControllerUploadFile$Response(params, context) {
        return documentControllerUploadFile(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `documentControllerUploadFile$Response()` instead.
     *
     * This method sends `multipart/form-data` and handles request body of type `multipart/form-data`.
     */
    documentControllerUploadFile(params, context) {
        return this.documentControllerUploadFile$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `documentControllerFindOne()` */
    static { this.DocumentControllerFindOnePath = '/auth/document/document/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `documentControllerFindOne()` instead.
     *
     * This method doesn't expect any request body.
     */
    documentControllerFindOne$Response(params, context) {
        return documentControllerFindOne(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `documentControllerFindOne$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    documentControllerFindOne(params, context) {
        return this.documentControllerFindOne$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `documentControllerUpdate()` */
    static { this.DocumentControllerUpdatePath = '/auth/document/document/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `documentControllerUpdate()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    documentControllerUpdate$Response(params, context) {
        return documentControllerUpdate(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `documentControllerUpdate$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    documentControllerUpdate(params, context) {
        return this.documentControllerUpdate$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `documentControllerRemove()` */
    static { this.DocumentControllerRemovePath = '/auth/document/document/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `documentControllerRemove()` instead.
     *
     * This method doesn't expect any request body.
     */
    documentControllerRemove$Response(params, context) {
        return documentControllerRemove(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `documentControllerRemove$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    documentControllerRemove(params, context) {
        return this.documentControllerRemove$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: DocumentService, deps: [{ token: i1.ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: DocumentService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: DocumentService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: i1.ApiConfiguration }, { type: i2.HttpClient }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZG9jdW1lbnQuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL3Nka2NvcmUvc3JjL2xpYi9zZXJ2aWNlcy9kb2N1bWVudC5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQixvQkFBb0I7QUFDcEIsbURBQW1EO0FBRW5ELE9BQU8sRUFBRSxVQUFVLEVBQWUsTUFBTSxzQkFBc0IsQ0FBQztBQUMvRCxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRTNDLE9BQU8sRUFBRSxHQUFHLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUVyQyxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFDOUMsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0sc0JBQXNCLENBQUM7QUFHeEQsT0FBTyxFQUFFLHdCQUF3QixFQUFFLE1BQU0sMkNBQTJDLENBQUM7QUFFckYsT0FBTyxFQUFFLHlCQUF5QixFQUFFLE1BQU0sNkNBQTZDLENBQUM7QUFFeEYsT0FBTyxFQUFFLHlCQUF5QixFQUFFLE1BQU0sNkNBQTZDLENBQUM7QUFFeEYsT0FBTyxFQUFFLHdCQUF3QixFQUFFLE1BQU0sMkNBQTJDLENBQUM7QUFFckYsT0FBTyxFQUFFLHdCQUF3QixFQUFFLE1BQU0sMkNBQTJDLENBQUM7QUFFckYsT0FBTyxFQUFFLDRCQUE0QixFQUFFLE1BQU0sZ0RBQWdELENBQUM7Ozs7QUFLOUYsTUFBTSxPQUFPLGVBQWdCLFNBQVEsV0FBVztJQUM5QyxZQUFZLE1BQXdCLEVBQUUsSUFBZ0I7UUFDcEQsS0FBSyxDQUFDLE1BQU0sRUFBRSxJQUFJLENBQUMsQ0FBQztJQUN0QixDQUFDO0lBRUQsNERBQTREO2FBQzVDLGtDQUE2QixHQUFHLHlCQUF5QixBQUE1QixDQUE2QjtJQUUxRTs7Ozs7T0FLRztJQUNILGtDQUFrQyxDQUFDLE1BQXlDLEVBQUUsT0FBcUI7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QUFFLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUNQLENBQUM7SUFDSixDQUFDO0lBRUQsMkRBQTJEO2FBQzNDLGlDQUE0QixHQUFHLDhCQUE4QixBQUFqQyxDQUFrQztJQUU5RTs7Ozs7T0FLRztJQUNILGlDQUFpQyxDQUFDLE1BQXVDLEVBQUUsT0FBcUI7UUFLOUYsT0FBTyx3QkFBd0IsQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxPQUFPLEVBQUUsTUFBTSxFQUFFLE9BQU8sQ0FBQyxDQUFDO0lBQzVFLENBQUM7SUFFRDs7Ozs7T0FLRztJQUNILHdCQUF3QixDQUFDLE1BQXVDLEVBQUUsT0FBcUI7UUFLckYsT0FBTyxJQUFJLENBQUMsaUNBQWlDLENBQUMsTUFBTSxFQUFFLE9BQU8sQ0FBQyxDQUFDLElBQUksQ0FDakUsR0FBRyxDQUFDLENBQUMsQ0FJVCxFQUlBLEVBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQ1AsQ0FBQztJQUNKLENBQUM7K0dBN09VLGVBQWU7bUhBQWYsZUFBZSxjQURGLE1BQU07OzRGQUNuQixlQUFlO2tCQUQzQixVQUFVO21CQUFDLEVBQUUsVUFBVSxFQUFFLE1BQU0sRUFBRSIsInNvdXJjZXNDb250ZW50IjpbIi8qIHRzbGludDpkaXNhYmxlICovXG4vKiBlc2xpbnQtZGlzYWJsZSAqL1xuLyogQ29kZSBnZW5lcmF0ZWQgYnkgbmctb3BlbmFwaS1nZW4gRE8gTk9UIEVESVQuICovXG5cbmltcG9ydCB7IEh0dHBDbGllbnQsIEh0dHBDb250ZXh0IH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uL2h0dHAnO1xuaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgbWFwIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuXG5pbXBvcnQgeyBCYXNlU2VydmljZSB9IGZyb20gJy4uL2Jhc2Utc2VydmljZSc7XG5pbXBvcnQgeyBBcGlDb25maWd1cmF0aW9uIH0gZnJvbSAnLi4vYXBpLWNvbmZpZ3VyYXRpb24nO1xuaW1wb3J0IHsgU3RyaWN0SHR0cFJlc3BvbnNlIH0gZnJvbSAnLi4vc3RyaWN0LWh0dHAtcmVzcG9uc2UnO1xuXG5pbXBvcnQgeyBkb2N1bWVudENvbnRyb2xsZXJDcmVhdGUgfSBmcm9tICcuLi9mbi9kb2N1bWVudC9kb2N1bWVudC1jb250cm9sbGVyLWNyZWF0ZSc7XG5pbXBvcnQgeyBEb2N1bWVudENvbnRyb2xsZXJDcmVhdGUkUGFyYW1zIH0gZnJvbSAnLi4vZm4vZG9jdW1lbnQvZG9jdW1lbnQtY29udHJvbGxlci1jcmVhdGUnO1xuaW1wb3J0IHsgZG9jdW1lbnRDb250cm9sbGVyRmluZEFsbCB9IGZyb20gJy4uL2ZuL2RvY3VtZW50L2RvY3VtZW50LWNvbnRyb2xsZXItZmluZC1hbGwnO1xuaW1wb3J0IHsgRG9jdW1lbnRDb250cm9sbGVyRmluZEFsbCRQYXJhbXMgfSBmcm9tICcuLi9mbi9kb2N1bWVudC9kb2N1bWVudC1jb250cm9sbGVyLWZpbmQtYWxsJztcbmltcG9ydCB7IGRvY3VtZW50Q29udHJvbGxlckZpbmRPbmUgfSBmcm9tICcuLi9mbi9kb2N1bWVudC9kb2N1bWVudC1jb250cm9sbGVyLWZpbmQtb25lJztcbmltcG9ydCB7IERvY3VtZW50Q29udHJvbGxlckZpbmRPbmUkUGFyYW1zIH0gZnJvbSAnLi4vZm4vZG9jdW1lbnQvZG9jdW1lbnQtY29udHJvbGxlci1maW5kLW9uZSc7XG5pbXBvcnQgeyBkb2N1bWVudENvbnRyb2xsZXJSZW1vdmUgfSBmcm9tICcuLi9mbi9kb2N1bWVudC9kb2N1bWVudC1jb250cm9sbGVyLXJlbW92ZSc7XG5pbXBvcnQgeyBEb2N1bWVudENvbnRyb2xsZXJSZW1vdmUkUGFyYW1zIH0gZnJvbSAnLi4vZm4vZG9jdW1lbnQvZG9jdW1lbnQtY29udHJvbGxlci1yZW1vdmUnO1xuaW1wb3J0IHsgZG9jdW1lbnRDb250cm9sbGVyVXBkYXRlIH0gZnJvbSAnLi4vZm4vZG9jdW1lbnQvZG9jdW1lbnQtY29udHJvbGxlci11cGRhdGUnO1xuaW1wb3J0IHsgRG9jdW1lbnRDb250cm9sbGVyVXBkYXRlJFBhcmFtcyB9IGZyb20gJy4uL2ZuL2RvY3VtZW50L2RvY3VtZW50LWNvbnRyb2xsZXItdXBkYXRlJztcbmltcG9ydCB7IGRvY3VtZW50Q29udHJvbGxlclVwbG9hZEZpbGUgfSBmcm9tICcuLi9mbi9kb2N1bWVudC9kb2N1bWVudC1jb250cm9sbGVyLXVwbG9hZC1maWxlJztcbmltcG9ydCB7IERvY3VtZW50Q29udHJvbGxlclVwbG9hZEZpbGUkUGFyYW1zIH0gZnJvbSAnLi4vZm4vZG9jdW1lbnQvZG9jdW1lbnQtY29udHJvbGxlci11cGxvYWQtZmlsZSc7XG5pbXBvcnQgeyBEb2N1bWVudERvY3VtZW50RHRvIH0gZnJvbSAnLi4vbW9kZWxzL2RvY3VtZW50LWRvY3VtZW50LWR0byc7XG5cbkBJbmplY3RhYmxlKHsgcHJvdmlkZWRJbjogJ3Jvb3QnIH0pXG5leHBvcnQgY2xhc3MgRG9jdW1lbnRTZXJ2aWNlIGV4dGVuZHMgQmFzZVNlcnZpY2Uge1xuICBjb25zdHJ1Y3Rvcihjb25maWc6IEFwaUNvbmZpZ3VyYXRpb24sIGh0dHA6IEh0dHBDbGllbnQpIHtcbiAgICBzdXBlcihjb25maWcsIGh0dHApO1xuICB9XG5cbiAgLyoqIFBhdGggcGFydCBmb3Igb3BlcmF0aW9uIGBkb2N1bWVudENvbnRyb2xsZXJGaW5kQWxsKClgICovXG4gIHN0YXRpYyByZWFkb25seSBEb2N1bWVudENvbnRyb2xsZXJGaW5kQWxsUGF0aCA9ICcvYXV0aC9kb2N1bWVudC9kb2N1bWVudCc7XG5cbiAgLyoqXG4gICAqIFRoaXMgbWV0aG9kIHByb3ZpZGVzIGFjY2VzcyB0byB0aGUgZnVsbCBgSHR0cFJlc3BvbnNlYCwgYWxsb3dpbmcgYWNjZXNzIHRvIHJlc3BvbnNlIGhlYWRlcnMuXG4gICAqIFRvIGFjY2VzcyBvbmx5IHRoZSByZXNwb25zZSBib2R5LCB1c2UgYGRvY3VtZW50Q29udHJvbGxlckZpbmRBbGwoKWAgaW5zdGVhZC5cbiAgICpcbiAgICogVGhpcyBtZXRob2QgZG9lc24ndCBleHBlY3QgYW55IHJlcXVlc3QgYm9keS5cbiAgICovXG4gIGRvY3VtZW50Q29udHJvbGxlckZpbmRBbGwkUmVzcG9uc2UocGFyYW1zPzogRG9jdW1lbnRDb250cm9sbGVyRmluZEFsbCRQYXJhbXMsIGNvbnRleHQ/OiBIdHRwQ29udGV4dCk6IE9ic2VydmFibGU8U3RyaWN0SHR0cFJlc3BvbnNlPHtcbidjb2RlJz86IG51bWJlcjtcbidwZXNhbic/OiBzdHJpbmc7XG4nZGF0YSc/OiBBcnJheTxEb2N1bWVudERvY3VtZW50RHRvPjtcbid0b3RhbCc/OiBudW1iZXI7XG59Pj4ge1xuICAgIHJldHVybiBkb2N1bWVudENvbnRyb2xsZXJGaW5kQWxsKHRoaXMuaHR0cCwgdGhpcy5yb290VXJsLCBwYXJhbXMsIGNvbnRleHQpO1xuICB9XG5cbiAgLyoqXG4gICAqIFRoaXMgbWV0aG9kIHByb3ZpZGVzIGFjY2VzcyBvbmx5IHRvIHRoZSByZXNwb25zZSBib2R5LlxuICAgKiBUbyBhY2Nlc3MgdGhlIGZ1bGwgcmVzcG9uc2UgKGZvciBoZWFkZXJzLCBmb3IgZXhhbXBsZSksIGBkb2N1bWVudENvbnRyb2xsZXJGaW5kQWxsJFJlc3BvbnNlKClgIGluc3RlYWQuXG4gICAqXG4gICAqIFRoaXMgbWV0aG9kIGRvZXNuJ3QgZXhwZWN0IGFueSByZXF1ZXN0IGJvZHkuXG4gICAqL1xuICBkb2N1bWVudENvbnRyb2xsZXJGaW5kQWxsKHBhcmFtcz86IERvY3VtZW50Q29udHJvbGxlckZpbmRBbGwkUGFyYW1zLCBjb250ZXh0PzogSHR0cENvbnRleHQpOiBPYnNlcnZhYmxlPHtcbidjb2RlJz86IG51bWJlcjtcbidwZXNhbic/OiBzdHJpbmc7XG4nZGF0YSc/OiBBcnJheTxEb2N1bWVudERvY3VtZW50RHRvPjtcbid0b3RhbCc/OiBudW1iZXI7XG59PiB7XG4gICAgcmV0dXJuIHRoaXMuZG9jdW1lbnRDb250cm9sbGVyRmluZEFsbCRSZXNwb25zZShwYXJhbXMsIGNvbnRleHQpLnBpcGUoXG4gICAgICBtYXAoKHI6IFN0cmljdEh0dHBSZXNwb25zZTx7XG4nY29kZSc/OiBudW1iZXI7XG4ncGVzYW4nPzogc3RyaW5nO1xuJ2RhdGEnPzogQXJyYXk8RG9jdW1lbnREb2N1bWVudER0bz47XG4ndG90YWwnPzogbnVtYmVyO1xufT4pOiB7XG4nY29kZSc/OiBudW1iZXI7XG4ncGVzYW4nPzogc3RyaW5nO1xuJ2RhdGEnPzogQXJyYXk8RG9jdW1lbnREb2N1bWVudER0bz47XG4ndG90YWwnPzogbnVtYmVyO1xufSA9PiByLmJvZHkpXG4gICAgKTtcbiAgfVxuXG4gIC8qKiBQYXRoIHBhcnQgZm9yIG9wZXJhdGlvbiBgZG9jdW1lbnRDb250cm9sbGVyQ3JlYXRlKClgICovXG4gIHN0YXRpYyByZWFkb25seSBEb2N1bWVudENvbnRyb2xsZXJDcmVhdGVQYXRoID0gJy9hdXRoL2RvY3VtZW50L2RvY3VtZW50JztcblxuICAvKipcbiAgICogVGhpcyBtZXRob2QgcHJvdmlkZXMgYWNjZXNzIHRvIHRoZSBmdWxsIGBIdHRwUmVzcG9uc2VgLCBhbGxvd2luZyBhY2Nlc3MgdG8gcmVzcG9uc2UgaGVhZGVycy5cbiAgICogVG8gYWNjZXNzIG9ubHkgdGhlIHJlc3BvbnNlIGJvZHksIHVzZSBgZG9jdW1lbnRDb250cm9sbGVyQ3JlYXRlKClgIGluc3RlYWQuXG4gICAqXG4gICAqIFRoaXMgbWV0aG9kIHNlbmRzIGBhcHBsaWNhdGlvbi9qc29uYCBhbmQgaGFuZGxlcyByZXF1ZXN0IGJvZHkgb2YgdHlwZSBgYXBwbGljYXRpb24vanNvbmAuXG4gICAqL1xuICBkb2N1bWVudENvbnRyb2xsZXJDcmVhdGUkUmVzcG9uc2UocGFyYW1zOiBEb2N1bWVudENvbnRyb2xsZXJDcmVhdGUkUGFyYW1zLCBjb250ZXh0PzogSHR0cENvbnRleHQpOiBPYnNlcnZhYmxlPFN0cmljdEh0dHBSZXNwb25zZTx7XG4nY29kZSc/OiBudW1iZXI7XG4ncGVzYW4nPzogc3RyaW5nO1xuJ2RhdGEnPzogRG9jdW1lbnREb2N1bWVudER0bztcbn0+PiB7XG4gICAgcmV0dXJuIGRvY3VtZW50Q29udHJvbGxlckNyZWF0ZSh0aGlzLmh0dHAsIHRoaXMucm9vdFVybCwgcGFyYW1zLCBjb250ZXh0KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGlzIG1ldGhvZCBwcm92aWRlcyBhY2Nlc3Mgb25seSB0byB0aGUgcmVzcG9uc2UgYm9keS5cbiAgICogVG8gYWNjZXNzIHRoZSBmdWxsIHJlc3BvbnNlIChmb3IgaGVhZGVycywgZm9yIGV4YW1wbGUpLCBgZG9jdW1lbnRDb250cm9sbGVyQ3JlYXRlJFJlc3BvbnNlKClgIGluc3RlYWQuXG4gICAqXG4gICAqIFRoaXMgbWV0aG9kIHNlbmRzIGBhcHBsaWNhdGlvbi9qc29uYCBhbmQgaGFuZGxlcyByZXF1ZXN0IGJvZHkgb2YgdHlwZSBgYXBwbGljYXRpb24vanNvbmAuXG4gICAqL1xuICBkb2N1bWVudENvbnRyb2xsZXJDcmVhdGUocGFyYW1zOiBEb2N1bWVudENvbnRyb2xsZXJDcmVhdGUkUGFyYW1zLCBjb250ZXh0PzogSHR0cENvbnRleHQpOiBPYnNlcnZhYmxlPHtcbidjb2RlJz86IG51bWJlcjtcbidwZXNhbic/OiBzdHJpbmc7XG4nZGF0YSc/OiBEb2N1bWVudERvY3VtZW50RHRvO1xufT4ge1xuICAgIHJldHVybiB0aGlzLmRvY3VtZW50Q29udHJvbGxlckNyZWF0ZSRSZXNwb25zZShwYXJhbXMsIGNvbnRleHQpLnBpcGUoXG4gICAgICBtYXAoKHI6IFN0cmljdEh0dHBSZXNwb25zZTx7XG4nY29kZSc/OiBudW1iZXI7XG4ncGVzYW4nPzogc3RyaW5nO1xuJ2RhdGEnPzogRG9jdW1lbnREb2N1bWVudER0bztcbn0+KToge1xuJ2NvZGUnPzogbnVtYmVyO1xuJ3Blc2FuJz86IHN0cmluZztcbidkYXRhJz86IERvY3VtZW50RG9jdW1lbnREdG87XG59ID0+IHIuYm9keSlcbiAgICApO1xuICB9XG5cbiAgLyoqIFBhdGggcGFydCBmb3Igb3BlcmF0aW9uIGBkb2N1bWVudENvbnRyb2xsZXJVcGxvYWRGaWxlKClgICovXG4gIHN0YXRpYyByZWFkb25seSBEb2N1bWVudENvbnRyb2xsZXJVcGxvYWRGaWxlUGF0aCA9ICcvYXV0aC9kb2N1bWVudC9kb2N1bWVudC91cGxvYWQnO1xuXG4gIC8qKlxuICAgKiBUaGlzIG1ldGhvZCBwcm92aWRlcyBhY2Nlc3MgdG8gdGhlIGZ1bGwgYEh0dHBSZXNwb25zZWAsIGFsbG93aW5nIGFjY2VzcyB0byByZXNwb25zZSBoZWFkZXJzLlxuICAgKiBUbyBhY2Nlc3Mgb25seSB0aGUgcmVzcG9uc2UgYm9keSwgdXNlIGBkb2N1bWVudENvbnRyb2xsZXJVcGxvYWRGaWxlKClgIGluc3RlYWQuXG4gICAqXG4gICAqIFRoaXMgbWV0aG9kIHNlbmRzIGBtdWx0aXBhcnQvZm9ybS1kYXRhYCBhbmQgaGFuZGxlcyByZXF1ZXN0IGJvZHkgb2YgdHlwZSBgbXVsdGlwYXJ0L2Zvcm0tZGF0YWAuXG4gICAqL1xuICBkb2N1bWVudENvbnRyb2xsZXJVcGxvYWRGaWxlJFJlc3BvbnNlKHBhcmFtczogRG9jdW1lbnRDb250cm9sbGVyVXBsb2FkRmlsZSRQYXJhbXMsIGNvbnRleHQ/OiBIdHRwQ29udGV4dCk6IE9ic2VydmFibGU8U3RyaWN0SHR0cFJlc3BvbnNlPHZvaWQ+PiB7XG4gICAgcmV0dXJuIGRvY3VtZW50Q29udHJvbGxlclVwbG9hZEZpbGUodGhpcy5odHRwLCB0aGlzLnJvb3RVcmwsIHBhcmFtcywgY29udGV4dCk7XG4gIH1cblxuICAvKipcbiAgICogVGhpcyBtZXRob2QgcHJvdmlkZXMgYWNjZXNzIG9ubHkgdG8gdGhlIHJlc3BvbnNlIGJvZHkuXG4gICAqIFRvIGFjY2VzcyB0aGUgZnVsbCByZXNwb25zZSAoZm9yIGhlYWRlcnMsIGZvciBleGFtcGxlKSwgYGRvY3VtZW50Q29udHJvbGxlclVwbG9hZEZpbGUkUmVzcG9uc2UoKWAgaW5zdGVhZC5cbiAgICpcbiAgICogVGhpcyBtZXRob2Qgc2VuZHMgYG11bHRpcGFydC9mb3JtLWRhdGFgIGFuZCBoYW5kbGVzIHJlcXVlc3QgYm9keSBvZiB0eXBlIGBtdWx0aXBhcnQvZm9ybS1kYXRhYC5cbiAgICovXG4gIGRvY3VtZW50Q29udHJvbGxlclVwbG9hZEZpbGUocGFyYW1zOiBEb2N1bWVudENvbnRyb2xsZXJVcGxvYWRGaWxlJFBhcmFtcywgY29udGV4dD86IEh0dHBDb250ZXh0KTogT2JzZXJ2YWJsZTx2b2lkPiB7XG4gICAgcmV0dXJuIHRoaXMuZG9jdW1lbnRDb250cm9sbGVyVXBsb2FkRmlsZSRSZXNwb25zZShwYXJhbXMsIGNvbnRleHQpLnBpcGUoXG4gICAgICBtYXAoKHI6IFN0cmljdEh0dHBSZXNwb25zZTx2b2lkPik6IHZvaWQgPT4gci5ib2R5KVxuICAgICk7XG4gIH1cblxuICAvKiogUGF0aCBwYXJ0IGZvciBvcGVyYXRpb24gYGRvY3VtZW50Q29udHJvbGxlckZpbmRPbmUoKWAgKi9cbiAgc3RhdGljIHJlYWRvbmx5IERvY3VtZW50Q29udHJvbGxlckZpbmRPbmVQYXRoID0gJy9hdXRoL2RvY3VtZW50L2RvY3VtZW50L3tpZH0nO1xuXG4gIC8qKlxuICAgKiBUaGlzIG1ldGhvZCBwcm92aWRlcyBhY2Nlc3MgdG8gdGhlIGZ1bGwgYEh0dHBSZXNwb25zZWAsIGFsbG93aW5nIGFjY2VzcyB0byByZXNwb25zZSBoZWFkZXJzLlxuICAgKiBUbyBhY2Nlc3Mgb25seSB0aGUgcmVzcG9uc2UgYm9keSwgdXNlIGBkb2N1bWVudENvbnRyb2xsZXJGaW5kT25lKClgIGluc3RlYWQuXG4gICAqXG4gICAqIFRoaXMgbWV0aG9kIGRvZXNuJ3QgZXhwZWN0IGFueSByZXF1ZXN0IGJvZHkuXG4gICAqL1xuICBkb2N1bWVudENvbnRyb2xsZXJGaW5kT25lJFJlc3BvbnNlKHBhcmFtczogRG9jdW1lbnRDb250cm9sbGVyRmluZE9uZSRQYXJhbXMsIGNvbnRleHQ/OiBIdHRwQ29udGV4dCk6IE9ic2VydmFibGU8U3RyaWN0SHR0cFJlc3BvbnNlPHtcbidjb2RlJz86IG51bWJlcjtcbidwZXNhbic/OiBzdHJpbmc7XG4nZGF0YSc/OiBEb2N1bWVudERvY3VtZW50RHRvO1xufT4+IHtcbiAgICByZXR1cm4gZG9jdW1lbnRDb250cm9sbGVyRmluZE9uZSh0aGlzLmh0dHAsIHRoaXMucm9vdFVybCwgcGFyYW1zLCBjb250ZXh0KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGlzIG1ldGhvZCBwcm92aWRlcyBhY2Nlc3Mgb25seSB0byB0aGUgcmVzcG9uc2UgYm9keS5cbiAgICogVG8gYWNjZXNzIHRoZSBmdWxsIHJlc3BvbnNlIChmb3IgaGVhZGVycywgZm9yIGV4YW1wbGUpLCBgZG9jdW1lbnRDb250cm9sbGVyRmluZE9uZSRSZXNwb25zZSgpYCBpbnN0ZWFkLlxuICAgKlxuICAgKiBUaGlzIG1ldGhvZCBkb2Vzbid0IGV4cGVjdCBhbnkgcmVxdWVzdCBib2R5LlxuICAgKi9cbiAgZG9jdW1lbnRDb250cm9sbGVyRmluZE9uZShwYXJhbXM6IERvY3VtZW50Q29udHJvbGxlckZpbmRPbmUkUGFyYW1zLCBjb250ZXh0PzogSHR0cENvbnRleHQpOiBPYnNlcnZhYmxlPHtcbidjb2RlJz86IG51bWJlcjtcbidwZXNhbic/OiBzdHJpbmc7XG4nZGF0YSc/OiBEb2N1bWVudERvY3VtZW50RHRvO1xufT4ge1xuICAgIHJldHVybiB0aGlzLmRvY3VtZW50Q29udHJvbGxlckZpbmRPbmUkUmVzcG9uc2UocGFyYW1zLCBjb250ZXh0KS5waXBlKFxuICAgICAgbWFwKChyOiBTdHJpY3RIdHRwUmVzcG9uc2U8e1xuJ2NvZGUnPzogbnVtYmVyO1xuJ3Blc2FuJz86IHN0cmluZztcbidkYXRhJz86IERvY3VtZW50RG9jdW1lbnREdG87XG59Pik6IHtcbidjb2RlJz86IG51bWJlcjtcbidwZXNhbic/OiBzdHJpbmc7XG4nZGF0YSc/OiBEb2N1bWVudERvY3VtZW50RHRvO1xufSA9PiByLmJvZHkpXG4gICAgKTtcbiAgfVxuXG4gIC8qKiBQYXRoIHBhcnQgZm9yIG9wZXJhdGlvbiBgZG9jdW1lbnRDb250cm9sbGVyVXBkYXRlKClgICovXG4gIHN0YXRpYyByZWFkb25seSBEb2N1bWVudENvbnRyb2xsZXJVcGRhdGVQYXRoID0gJy9hdXRoL2RvY3VtZW50L2RvY3VtZW50L3tpZH0nO1xuXG4gIC8qKlxuICAgKiBUaGlzIG1ldGhvZCBwcm92aWRlcyBhY2Nlc3MgdG8gdGhlIGZ1bGwgYEh0dHBSZXNwb25zZWAsIGFsbG93aW5nIGFjY2VzcyB0byByZXNwb25zZSBoZWFkZXJzLlxuICAgKiBUbyBhY2Nlc3Mgb25seSB0aGUgcmVzcG9uc2UgYm9keSwgdXNlIGBkb2N1bWVudENvbnRyb2xsZXJVcGRhdGUoKWAgaW5zdGVhZC5cbiAgICpcbiAgICogVGhpcyBtZXRob2Qgc2VuZHMgYGFwcGxpY2F0aW9uL2pzb25gIGFuZCBoYW5kbGVzIHJlcXVlc3QgYm9keSBvZiB0eXBlIGBhcHBsaWNhdGlvbi9qc29uYC5cbiAgICovXG4gIGRvY3VtZW50Q29udHJvbGxlclVwZGF0ZSRSZXNwb25zZShwYXJhbXM6IERvY3VtZW50Q29udHJvbGxlclVwZGF0ZSRQYXJhbXMsIGNvbnRleHQ/OiBIdHRwQ29udGV4dCk6IE9ic2VydmFibGU8U3RyaWN0SHR0cFJlc3BvbnNlPHtcbidjb2RlJz86IG51bWJlcjtcbidwZXNhbic/OiBzdHJpbmc7XG4nZGF0YSc/OiBEb2N1bWVudERvY3VtZW50RHRvO1xufT4+IHtcbiAgICByZXR1cm4gZG9jdW1lbnRDb250cm9sbGVyVXBkYXRlKHRoaXMuaHR0cCwgdGhpcy5yb290VXJsLCBwYXJhbXMsIGNvbnRleHQpO1xuICB9XG5cbiAgLyoqXG4gICAqIFRoaXMgbWV0aG9kIHByb3ZpZGVzIGFjY2VzcyBvbmx5IHRvIHRoZSByZXNwb25zZSBib2R5LlxuICAgKiBUbyBhY2Nlc3MgdGhlIGZ1bGwgcmVzcG9uc2UgKGZvciBoZWFkZXJzLCBmb3IgZXhhbXBsZSksIGBkb2N1bWVudENvbnRyb2xsZXJVcGRhdGUkUmVzcG9uc2UoKWAgaW5zdGVhZC5cbiAgICpcbiAgICogVGhpcyBtZXRob2Qgc2VuZHMgYGFwcGxpY2F0aW9uL2pzb25gIGFuZCBoYW5kbGVzIHJlcXVlc3QgYm9keSBvZiB0eXBlIGBhcHBsaWNhdGlvbi9qc29uYC5cbiAgICovXG4gIGRvY3VtZW50Q29udHJvbGxlclVwZGF0ZShwYXJhbXM6IERvY3VtZW50Q29udHJvbGxlclVwZGF0ZSRQYXJhbXMsIGNvbnRleHQ/OiBIdHRwQ29udGV4dCk6IE9ic2VydmFibGU8e1xuJ2NvZGUnPzogbnVtYmVyO1xuJ3Blc2FuJz86IHN0cmluZztcbidkYXRhJz86IERvY3VtZW50RG9jdW1lbnREdG87XG59PiB7XG4gICAgcmV0dXJuIHRoaXMuZG9jdW1lbnRDb250cm9sbGVyVXBkYXRlJFJlc3BvbnNlKHBhcmFtcywgY29udGV4dCkucGlwZShcbiAgICAgIG1hcCgocjogU3RyaWN0SHR0cFJlc3BvbnNlPHtcbidjb2RlJz86IG51bWJlcjtcbidwZXNhbic/OiBzdHJpbmc7XG4nZGF0YSc/OiBEb2N1bWVudERvY3VtZW50RHRvO1xufT4pOiB7XG4nY29kZSc/OiBudW1iZXI7XG4ncGVzYW4nPzogc3RyaW5nO1xuJ2RhdGEnPzogRG9jdW1lbnREb2N1bWVudER0bztcbn0gPT4gci5ib2R5KVxuICAgICk7XG4gIH1cblxuICAvKiogUGF0aCBwYXJ0IGZvciBvcGVyYXRpb24gYGRvY3VtZW50Q29udHJvbGxlclJlbW92ZSgpYCAqL1xuICBzdGF0aWMgcmVhZG9ubHkgRG9jdW1lbnRDb250cm9sbGVyUmVtb3ZlUGF0aCA9ICcvYXV0aC9kb2N1bWVudC9kb2N1bWVudC97aWR9JztcblxuICAvKipcbiAgICogVGhpcyBtZXRob2QgcHJvdmlkZXMgYWNjZXNzIHRvIHRoZSBmdWxsIGBIdHRwUmVzcG9uc2VgLCBhbGxvd2luZyBhY2Nlc3MgdG8gcmVzcG9uc2UgaGVhZGVycy5cbiAgICogVG8gYWNjZXNzIG9ubHkgdGhlIHJlc3BvbnNlIGJvZHksIHVzZSBgZG9jdW1lbnRDb250cm9sbGVyUmVtb3ZlKClgIGluc3RlYWQuXG4gICAqXG4gICAqIFRoaXMgbWV0aG9kIGRvZXNuJ3QgZXhwZWN0IGFueSByZXF1ZXN0IGJvZHkuXG4gICAqL1xuICBkb2N1bWVudENvbnRyb2xsZXJSZW1vdmUkUmVzcG9uc2UocGFyYW1zOiBEb2N1bWVudENvbnRyb2xsZXJSZW1vdmUkUGFyYW1zLCBjb250ZXh0PzogSHR0cENvbnRleHQpOiBPYnNlcnZhYmxlPFN0cmljdEh0dHBSZXNwb25zZTx7XG4nY29kZSc/OiBudW1iZXI7XG4ncGVzYW4nPzogc3RyaW5nO1xuJ2RhdGEnPzogRG9jdW1lbnREb2N1bWVudER0bztcbn0+PiB7XG4gICAgcmV0dXJuIGRvY3VtZW50Q29udHJvbGxlclJlbW92ZSh0aGlzLmh0dHAsIHRoaXMucm9vdFVybCwgcGFyYW1zLCBjb250ZXh0KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGlzIG1ldGhvZCBwcm92aWRlcyBhY2Nlc3Mgb25seSB0byB0aGUgcmVzcG9uc2UgYm9keS5cbiAgICogVG8gYWNjZXNzIHRoZSBmdWxsIHJlc3BvbnNlIChmb3IgaGVhZGVycywgZm9yIGV4YW1wbGUpLCBgZG9jdW1lbnRDb250cm9sbGVyUmVtb3ZlJFJlc3BvbnNlKClgIGluc3RlYWQuXG4gICAqXG4gICAqIFRoaXMgbWV0aG9kIGRvZXNuJ3QgZXhwZWN0IGFueSByZXF1ZXN0IGJvZHkuXG4gICAqL1xuICBkb2N1bWVudENvbnRyb2xsZXJSZW1vdmUocGFyYW1zOiBEb2N1bWVudENvbnRyb2xsZXJSZW1vdmUkUGFyYW1zLCBjb250ZXh0PzogSHR0cENvbnRleHQpOiBPYnNlcnZhYmxlPHtcbidjb2RlJz86IG51bWJlcjtcbidwZXNhbic/OiBzdHJpbmc7XG4nZGF0YSc/OiBEb2N1bWVudERvY3VtZW50RHRvO1xufT4ge1xuICAgIHJldHVybiB0aGlzLmRvY3VtZW50Q29udHJvbGxlclJlbW92ZSRSZXNwb25zZShwYXJhbXMsIGNvbnRleHQpLnBpcGUoXG4gICAgICBtYXAoKHI6IFN0cmljdEh0dHBSZXNwb25zZTx7XG4nY29kZSc/OiBudW1iZXI7XG4ncGVzYW4nPzogc3RyaW5nO1xuJ2RhdGEnPzogRG9jdW1lbnREb2N1bWVudER0bztcbn0+KToge1xuJ2NvZGUnPzogbnVtYmVyO1xuJ3Blc2FuJz86IHN0cmluZztcbidkYXRhJz86IERvY3VtZW50RG9jdW1lbnREdG87XG59ID0+IHIuYm9keSlcbiAgICApO1xuICB9XG5cbn1cbiJdfQ==
/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
import { HttpClient } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { map } from 'rxjs/operators';
import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { maintenanceCodeFormIssuedControllerCreate } from '../fn/maintenance-code-form-issued/maintenance-code-form-issued-controller-create';
import { maintenanceCodeFormIssuedControllerFindAll } from '../fn/maintenance-code-form-issued/maintenance-code-form-issued-controller-find-all';
import { maintenanceCodeFormIssuedControllerFindOne } from '../fn/maintenance-code-form-issued/maintenance-code-form-issued-controller-find-one';
import { maintenanceCodeFormIssuedControllerRemove } from '../fn/maintenance-code-form-issued/maintenance-code-form-issued-controller-remove';
import { maintenanceCodeFormIssuedControllerUpdate } from '../fn/maintenance-code-form-issued/maintenance-code-form-issued-controller-update';
import * as i0 from "@angular/core";
import * as i1 from "../api-configuration";
import * as i2 from "@angular/common/http";
export class MaintenanceCodeFormIssuedService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `maintenanceCodeFormIssuedControllerFindAll()` */
    static { this.MaintenanceCodeFormIssuedControllerFindAllPath = '/amims/maintenance_code_form_issued/maintenance_code_form_issued'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `maintenanceCodeFormIssuedControllerFindAll()` instead.
     *
     * This method doesn't expect any request body.
     */
    maintenanceCodeFormIssuedControllerFindAll$Response(params, context) {
        return maintenanceCodeFormIssuedControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `maintenanceCodeFormIssuedControllerFindAll$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    maintenanceCodeFormIssuedControllerFindAll(params, context) {
        return this.maintenanceCodeFormIssuedControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `maintenanceCodeFormIssuedControllerCreate()` */
    static { this.MaintenanceCodeFormIssuedControllerCreatePath = '/amims/maintenance_code_form_issued/maintenance_code_form_issued'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `maintenanceCodeFormIssuedControllerCreate()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    maintenanceCodeFormIssuedControllerCreate$Response(params, context) {
        return maintenanceCodeFormIssuedControllerCreate(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `maintenanceCodeFormIssuedControllerCreate$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    maintenanceCodeFormIssuedControllerCreate(params, context) {
        return this.maintenanceCodeFormIssuedControllerCreate$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `maintenanceCodeFormIssuedControllerFindOne()` */
    static { this.MaintenanceCodeFormIssuedControllerFindOnePath = '/amims/maintenance_code_form_issued/maintenance_code_form_issued/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `maintenanceCodeFormIssuedControllerFindOne()` instead.
     *
     * This method doesn't expect any request body.
     */
    maintenanceCodeFormIssuedControllerFindOne$Response(params, context) {
        return maintenanceCodeFormIssuedControllerFindOne(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `maintenanceCodeFormIssuedControllerFindOne$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    maintenanceCodeFormIssuedControllerFindOne(params, context) {
        return this.maintenanceCodeFormIssuedControllerFindOne$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `maintenanceCodeFormIssuedControllerUpdate()` */
    static { this.MaintenanceCodeFormIssuedControllerUpdatePath = '/amims/maintenance_code_form_issued/maintenance_code_form_issued/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `maintenanceCodeFormIssuedControllerUpdate()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    maintenanceCodeFormIssuedControllerUpdate$Response(params, context) {
        return maintenanceCodeFormIssuedControllerUpdate(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `maintenanceCodeFormIssuedControllerUpdate$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    maintenanceCodeFormIssuedControllerUpdate(params, context) {
        return this.maintenanceCodeFormIssuedControllerUpdate$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `maintenanceCodeFormIssuedControllerRemove()` */
    static { this.MaintenanceCodeFormIssuedControllerRemovePath = '/amims/maintenance_code_form_issued/maintenance_code_form_issued/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `maintenanceCodeFormIssuedControllerRemove()` instead.
     *
     * This method doesn't expect any request body.
     */
    maintenanceCodeFormIssuedControllerRemove$Response(params, context) {
        return maintenanceCodeFormIssuedControllerRemove(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `maintenanceCodeFormIssuedControllerRemove$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    maintenanceCodeFormIssuedControllerRemove(params, context) {
        return this.maintenanceCodeFormIssuedControllerRemove$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: MaintenanceCodeFormIssuedService, deps: [{ token: i1.ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: MaintenanceCodeFormIssuedService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: MaintenanceCodeFormIssuedService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: i1.ApiConfiguration }, { type: i2.HttpClient }] });
//# sourceMappingURL=data:application/json;base64,
/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
import { HttpClient } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { map } from 'rxjs/operators';
import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { tdRefControllerCreate } from '../fn/td-ref/td-ref-controller-create';
import { tdRefControllerFindAll } from '../fn/td-ref/td-ref-controller-find-all';
import { tdRefControllerFindOne } from '../fn/td-ref/td-ref-controller-find-one';
import { tdRefControllerRemove } from '../fn/td-ref/td-ref-controller-remove';
import { tdRefControllerUpdate } from '../fn/td-ref/td-ref-controller-update';
import * as i0 from "@angular/core";
import * as i1 from "../api-configuration";
import * as i2 from "@angular/common/http";
export class TdRefService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `tdRefControllerFindAll()` */
    static { this.TdRefControllerFindAllPath = '/amims/td_ref/td_ref'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `tdRefControllerFindAll()` instead.
     *
     * This method doesn't expect any request body.
     */
    tdRefControllerFindAll$Response(params, context) {
        return tdRefControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `tdRefControllerFindAll$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    tdRefControllerFindAll(params, context) {
        return this.tdRefControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `tdRefControllerCreate()` */
    static { this.TdRefControllerCreatePath = '/amims/td_ref/td_ref'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `tdRefControllerCreate()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    tdRefControllerCreate$Response(params, context) {
        return tdRefControllerCreate(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `tdRefControllerCreate$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    tdRefControllerCreate(params, context) {
        return this.tdRefControllerCreate$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `tdRefControllerFindOne()` */
    static { this.TdRefControllerFindOnePath = '/amims/td_ref/td_ref/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `tdRefControllerFindOne()` instead.
     *
     * This method doesn't expect any request body.
     */
    tdRefControllerFindOne$Response(params, context) {
        return tdRefControllerFindOne(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `tdRefControllerFindOne$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    tdRefControllerFindOne(params, context) {
        return this.tdRefControllerFindOne$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `tdRefControllerUpdate()` */
    static { this.TdRefControllerUpdatePath = '/amims/td_ref/td_ref/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `tdRefControllerUpdate()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    tdRefControllerUpdate$Response(params, context) {
        return tdRefControllerUpdate(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `tdRefControllerUpdate$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    tdRefControllerUpdate(params, context) {
        return this.tdRefControllerUpdate$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `tdRefControllerRemove()` */
    static { this.TdRefControllerRemovePath = '/amims/td_ref/td_ref/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `tdRefControllerRemove()` instead.
     *
     * This method doesn't expect any request body.
     */
    tdRefControllerRemove$Response(params, context) {
        return tdRefControllerRemove(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `tdRefControllerRemove$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    tdRefControllerRemove(params, context) {
        return this.tdRefControllerRemove$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: TdRefService, deps: [{ token: i1.ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: TdRefService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: TdRefService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: i1.ApiConfiguration }, { type: i2.HttpClient }] });
//# sourceMappingURL=data:application/json;base64,
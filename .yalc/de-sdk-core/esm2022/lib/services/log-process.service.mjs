/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
import { HttpClient } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { map } from 'rxjs/operators';
import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { logProcessControllerCreate } from '../fn/log-process/log-process-controller-create';
import { logProcessControllerFindAll } from '../fn/log-process/log-process-controller-find-all';
import { logProcessControllerFindOne } from '../fn/log-process/log-process-controller-find-one';
import { logProcessControllerRemove } from '../fn/log-process/log-process-controller-remove';
import { logProcessControllerUpdate } from '../fn/log-process/log-process-controller-update';
import * as i0 from "@angular/core";
import * as i1 from "../api-configuration";
import * as i2 from "@angular/common/http";
export class LogProcessService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `logProcessControllerFindAll()` */
    static { this.LogProcessControllerFindAllPath = '/amims/log_process/log_process'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `logProcessControllerFindAll()` instead.
     *
     * This method doesn't expect any request body.
     */
    logProcessControllerFindAll$Response(params, context) {
        return logProcessControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `logProcessControllerFindAll$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    logProcessControllerFindAll(params, context) {
        return this.logProcessControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `logProcessControllerCreate()` */
    static { this.LogProcessControllerCreatePath = '/amims/log_process/log_process'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `logProcessControllerCreate()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    logProcessControllerCreate$Response(params, context) {
        return logProcessControllerCreate(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `logProcessControllerCreate$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    logProcessControllerCreate(params, context) {
        return this.logProcessControllerCreate$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `logProcessControllerFindOne()` */
    static { this.LogProcessControllerFindOnePath = '/amims/log_process/log_process/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `logProcessControllerFindOne()` instead.
     *
     * This method doesn't expect any request body.
     */
    logProcessControllerFindOne$Response(params, context) {
        return logProcessControllerFindOne(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `logProcessControllerFindOne$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    logProcessControllerFindOne(params, context) {
        return this.logProcessControllerFindOne$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `logProcessControllerUpdate()` */
    static { this.LogProcessControllerUpdatePath = '/amims/log_process/log_process/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `logProcessControllerUpdate()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    logProcessControllerUpdate$Response(params, context) {
        return logProcessControllerUpdate(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `logProcessControllerUpdate$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    logProcessControllerUpdate(params, context) {
        return this.logProcessControllerUpdate$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `logProcessControllerRemove()` */
    static { this.LogProcessControllerRemovePath = '/amims/log_process/log_process/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `logProcessControllerRemove()` instead.
     *
     * This method doesn't expect any request body.
     */
    logProcessControllerRemove$Response(params, context) {
        return logProcessControllerRemove(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `logProcessControllerRemove$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    logProcessControllerRemove(params, context) {
        return this.logProcessControllerRemove$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: LogProcessService, deps: [{ token: i1.ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: LogProcessService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: LogProcessService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: i1.ApiConfiguration }, { type: i2.HttpClient }] });
//# sourceMappingURL=data:application/json;base64,
/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
import { HttpClient } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { map } from 'rxjs/operators';
import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { techDiscrepanciesControllerCreate } from '../fn/tech-discrepancies/tech-discrepancies-controller-create';
import { techDiscrepanciesControllerFindAll } from '../fn/tech-discrepancies/tech-discrepancies-controller-find-all';
import { techDiscrepanciesControllerFindOne } from '../fn/tech-discrepancies/tech-discrepancies-controller-find-one';
import { techDiscrepanciesControllerRemove } from '../fn/tech-discrepancies/tech-discrepancies-controller-remove';
import { techDiscrepanciesControllerUpdate } from '../fn/tech-discrepancies/tech-discrepancies-controller-update';
import * as i0 from "@angular/core";
import * as i1 from "../api-configuration";
import * as i2 from "@angular/common/http";
export class TechDiscrepanciesService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `techDiscrepanciesControllerFindAll()` */
    static { this.TechDiscrepanciesControllerFindAllPath = '/amims/tech_discrepancies/tech_discrepancies'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `techDiscrepanciesControllerFindAll()` instead.
     *
     * This method doesn't expect any request body.
     */
    techDiscrepanciesControllerFindAll$Response(params, context) {
        return techDiscrepanciesControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `techDiscrepanciesControllerFindAll$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    techDiscrepanciesControllerFindAll(params, context) {
        return this.techDiscrepanciesControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `techDiscrepanciesControllerCreate()` */
    static { this.TechDiscrepanciesControllerCreatePath = '/amims/tech_discrepancies/tech_discrepancies'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `techDiscrepanciesControllerCreate()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    techDiscrepanciesControllerCreate$Response(params, context) {
        return techDiscrepanciesControllerCreate(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `techDiscrepanciesControllerCreate$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    techDiscrepanciesControllerCreate(params, context) {
        return this.techDiscrepanciesControllerCreate$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `techDiscrepanciesControllerFindOne()` */
    static { this.TechDiscrepanciesControllerFindOnePath = '/amims/tech_discrepancies/tech_discrepancies/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `techDiscrepanciesControllerFindOne()` instead.
     *
     * This method doesn't expect any request body.
     */
    techDiscrepanciesControllerFindOne$Response(params, context) {
        return techDiscrepanciesControllerFindOne(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `techDiscrepanciesControllerFindOne$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    techDiscrepanciesControllerFindOne(params, context) {
        return this.techDiscrepanciesControllerFindOne$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `techDiscrepanciesControllerUpdate()` */
    static { this.TechDiscrepanciesControllerUpdatePath = '/amims/tech_discrepancies/tech_discrepancies/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `techDiscrepanciesControllerUpdate()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    techDiscrepanciesControllerUpdate$Response(params, context) {
        return techDiscrepanciesControllerUpdate(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `techDiscrepanciesControllerUpdate$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    techDiscrepanciesControllerUpdate(params, context) {
        return this.techDiscrepanciesControllerUpdate$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `techDiscrepanciesControllerRemove()` */
    static { this.TechDiscrepanciesControllerRemovePath = '/amims/tech_discrepancies/tech_discrepancies/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `techDiscrepanciesControllerRemove()` instead.
     *
     * This method doesn't expect any request body.
     */
    techDiscrepanciesControllerRemove$Response(params, context) {
        return techDiscrepanciesControllerRemove(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `techDiscrepanciesControllerRemove$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    techDiscrepanciesControllerRemove(params, context) {
        return this.techDiscrepanciesControllerRemove$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: TechDiscrepanciesService, deps: [{ token: i1.ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: TechDiscrepanciesService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: TechDiscrepanciesService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: i1.ApiConfiguration }, { type: i2.HttpClient }] });
//# sourceMappingURL=data:application/json;base64,
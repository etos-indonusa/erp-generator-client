/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
import { HttpClient } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { map } from 'rxjs/operators';
import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { logTsnTsoControllerCreate } from '../fn/log-tsn-tso/log-tsn-tso-controller-create';
import { logTsnTsoControllerFindAll } from '../fn/log-tsn-tso/log-tsn-tso-controller-find-all';
import { logTsnTsoControllerFindOne } from '../fn/log-tsn-tso/log-tsn-tso-controller-find-one';
import { logTsnTsoControllerRemove } from '../fn/log-tsn-tso/log-tsn-tso-controller-remove';
import { logTsnTsoControllerUpdate } from '../fn/log-tsn-tso/log-tsn-tso-controller-update';
import * as i0 from "@angular/core";
import * as i1 from "../api-configuration";
import * as i2 from "@angular/common/http";
export class LogTsnTsoService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `logTsnTsoControllerFindAll()` */
    static { this.LogTsnTsoControllerFindAllPath = '/amims/log_tsn_tso/log_tsn_tso'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `logTsnTsoControllerFindAll()` instead.
     *
     * This method doesn't expect any request body.
     */
    logTsnTsoControllerFindAll$Response(params, context) {
        return logTsnTsoControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `logTsnTsoControllerFindAll$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    logTsnTsoControllerFindAll(params, context) {
        return this.logTsnTsoControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `logTsnTsoControllerCreate()` */
    static { this.LogTsnTsoControllerCreatePath = '/amims/log_tsn_tso/log_tsn_tso'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `logTsnTsoControllerCreate()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    logTsnTsoControllerCreate$Response(params, context) {
        return logTsnTsoControllerCreate(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `logTsnTsoControllerCreate$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    logTsnTsoControllerCreate(params, context) {
        return this.logTsnTsoControllerCreate$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `logTsnTsoControllerFindOne()` */
    static { this.LogTsnTsoControllerFindOnePath = '/amims/log_tsn_tso/log_tsn_tso/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `logTsnTsoControllerFindOne()` instead.
     *
     * This method doesn't expect any request body.
     */
    logTsnTsoControllerFindOne$Response(params, context) {
        return logTsnTsoControllerFindOne(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `logTsnTsoControllerFindOne$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    logTsnTsoControllerFindOne(params, context) {
        return this.logTsnTsoControllerFindOne$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `logTsnTsoControllerUpdate()` */
    static { this.LogTsnTsoControllerUpdatePath = '/amims/log_tsn_tso/log_tsn_tso/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `logTsnTsoControllerUpdate()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    logTsnTsoControllerUpdate$Response(params, context) {
        return logTsnTsoControllerUpdate(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `logTsnTsoControllerUpdate$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    logTsnTsoControllerUpdate(params, context) {
        return this.logTsnTsoControllerUpdate$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `logTsnTsoControllerRemove()` */
    static { this.LogTsnTsoControllerRemovePath = '/amims/log_tsn_tso/log_tsn_tso/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `logTsnTsoControllerRemove()` instead.
     *
     * This method doesn't expect any request body.
     */
    logTsnTsoControllerRemove$Response(params, context) {
        return logTsnTsoControllerRemove(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `logTsnTsoControllerRemove$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    logTsnTsoControllerRemove(params, context) {
        return this.logTsnTsoControllerRemove$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: LogTsnTsoService, deps: [{ token: i1.ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: LogTsnTsoService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: LogTsnTsoService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: i1.ApiConfiguration }, { type: i2.HttpClient }] });
//# sourceMappingURL=data:application/json;base64,
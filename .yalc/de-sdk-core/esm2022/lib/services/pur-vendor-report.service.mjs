/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
import { HttpClient } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { map } from 'rxjs/operators';
import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { purVendorReportControllerFindAll } from '../fn/pur-vendor-report/pur-vendor-report-controller-find-all';
import { purVendorReportControllerFindOne } from '../fn/pur-vendor-report/pur-vendor-report-controller-find-one';
import * as i0 from "@angular/core";
import * as i1 from "../api-configuration";
import * as i2 from "@angular/common/http";
export class PurVendorReportService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `purVendorReportControllerFindAll()` */
    static { this.PurVendorReportControllerFindAllPath = '/amims/pur_vendor/pur_vendor_report/list'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `purVendorReportControllerFindAll()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    purVendorReportControllerFindAll$Response(params, context) {
        return purVendorReportControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `purVendorReportControllerFindAll$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    purVendorReportControllerFindAll(params, context) {
        return this.purVendorReportControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `purVendorReportControllerFindOne()` */
    static { this.PurVendorReportControllerFindOnePath = '/amims/pur_vendor/pur_vendor_report/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `purVendorReportControllerFindOne()` instead.
     *
     * This method doesn't expect any request body.
     */
    purVendorReportControllerFindOne$Response(params, context) {
        return purVendorReportControllerFindOne(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `purVendorReportControllerFindOne$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    purVendorReportControllerFindOne(params, context) {
        return this.purVendorReportControllerFindOne$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: PurVendorReportService, deps: [{ token: i1.ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: PurVendorReportService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: PurVendorReportService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: i1.ApiConfiguration }, { type: i2.HttpClient }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHVyLXZlbmRvci1yZXBvcnQuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL3Nka2NvcmUvc3JjL2xpYi9zZXJ2aWNlcy9wdXItdmVuZG9yLXJlcG9ydC5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQixvQkFBb0I7QUFDcEIsbURBQW1EO0FBRW5ELE9BQU8sRUFBRSxVQUFVLEVBQWUsTUFBTSxzQkFBc0IsQ0FBQztBQUMvRCxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRTNDLE9BQU8sRUFBRSxHQUFHLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUVyQyxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFDOUMsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0sc0JBQXNCLENBQUM7QUFJeEQsT0FBTyxFQUFFLGdDQUFnQyxFQUFFLE1BQU0sK0RBQStELENBQUM7QUFFakgsT0FBTyxFQUFFLGdDQUFnQyxFQUFFLE1BQU0sK0RBQStELENBQUM7Ozs7QUFJakgsTUFBTSxPQUFPLHNCQUF1QixTQUFRLFdBQVc7SUFDckQsWUFBWSxNQUF3QixFQUFFLElBQWdCO1FBQ3BELEtBQUssQ0FBQyxNQUFNLEVBQUUsSUFBSSxDQUFDLENBQUM7SUFDdEIsQ0FBQztJQUVELG1FQUFtRTthQUNuRCx5Q0FBb0MsR0FBRywwQ0FBMEMsQUFBN0MsQ0FBOEM7SUFFbEc7Ozs7O09BS0c7SUFDSCx5Q0FBeUMsQ0FBQyxNQUErQyxFQUFFLE9BQXFCO1FBTTlHLE9BQU8sZ0NBQWdDLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsT0FBTyxFQUFFLE1BQU0sRUFBRSxPQUFPLENBQUMsQ0FBQztJQUNwRixDQUFDO0lBRUQ7Ozs7O09BS0c7SUFDSCxnQ0FBZ0MsQ0FBQyxNQUErQyxFQUFFLE9BQXFCO1FBTXJHLE9BQU8sSUFBSSxDQUFDLHlDQUF5QyxDQUFDLE1BQU0sRUFBRSxPQUFPLENBQUMsQ0FBQyxJQUFJLENBQ3pFLEdBQUcsQ0FBQyxDQUFDLENBS1QsRUFLQSxFQUFFLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUNQLENBQUM7SUFDSixDQUFDO0lBRUQsbUVBQW1FO2FBQ25ELHlDQUFvQyxHQUFHLDBDQUEwQyxBQUE3QyxDQUE4QztJQUVsRzs7Ozs7T0FLRztJQUNILHlDQUF5QyxDQUFDLE1BQStDLEVBQUUsT0FBcUI7UUFLOUcsT0FBTyxnQ0FBZ0MsQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxPQUFPLEVBQUUsTUFBTSxFQUFFLE9BQU8sQ0FBQyxDQUFDO0lBQ3BGLENBQUM7SUFFRDs7Ozs7T0FLRztJQUNILGdDQUFnQyxDQUFDLE1BQStDLEVBQUUsT0FBcUI7UUFLckcsT0FBTyxJQUFJLENBQUMseUNBQXlDLENBQUMsTUFBTSxFQUFFLE9BQU8sQ0FBQyxDQUFDLElBQUksQ0FDekUsR0FBRyxDQUFDLENBQUMsQ0FJVCxFQUlBLEVBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQ1AsQ0FBQztJQUNKLENBQUM7K0dBekZVLHNCQUFzQjttSEFBdEIsc0JBQXNCLGNBRFQsTUFBTTs7NEZBQ25CLHNCQUFzQjtrQkFEbEMsVUFBVTttQkFBQyxFQUFFLFVBQVUsRUFBRSxNQUFNLEVBQUUiLCJzb3VyY2VzQ29udGVudCI6WyIvKiB0c2xpbnQ6ZGlzYWJsZSAqL1xuLyogZXNsaW50LWRpc2FibGUgKi9cbi8qIENvZGUgZ2VuZXJhdGVkIGJ5IG5nLW9wZW5hcGktZ2VuIERPIE5PVCBFRElULiAqL1xuXG5pbXBvcnQgeyBIdHRwQ2xpZW50LCBIdHRwQ29udGV4dCB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbi9odHRwJztcbmltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IG1hcCB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcblxuaW1wb3J0IHsgQmFzZVNlcnZpY2UgfSBmcm9tICcuLi9iYXNlLXNlcnZpY2UnO1xuaW1wb3J0IHsgQXBpQ29uZmlndXJhdGlvbiB9IGZyb20gJy4uL2FwaS1jb25maWd1cmF0aW9uJztcbmltcG9ydCB7IFN0cmljdEh0dHBSZXNwb25zZSB9IGZyb20gJy4uL3N0cmljdC1odHRwLXJlc3BvbnNlJztcblxuaW1wb3J0IHsgQW1pbXNQdXJWZW5kb3JSZXBvcnREdG8gfSBmcm9tICcuLi9tb2RlbHMvYW1pbXMtcHVyLXZlbmRvci1yZXBvcnQtZHRvJztcbmltcG9ydCB7IHB1clZlbmRvclJlcG9ydENvbnRyb2xsZXJGaW5kQWxsIH0gZnJvbSAnLi4vZm4vcHVyLXZlbmRvci1yZXBvcnQvcHVyLXZlbmRvci1yZXBvcnQtY29udHJvbGxlci1maW5kLWFsbCc7XG5pbXBvcnQgeyBQdXJWZW5kb3JSZXBvcnRDb250cm9sbGVyRmluZEFsbCRQYXJhbXMgfSBmcm9tICcuLi9mbi9wdXItdmVuZG9yLXJlcG9ydC9wdXItdmVuZG9yLXJlcG9ydC1jb250cm9sbGVyLWZpbmQtYWxsJztcbmltcG9ydCB7IHB1clZlbmRvclJlcG9ydENvbnRyb2xsZXJGaW5kT25lIH0gZnJvbSAnLi4vZm4vcHVyLXZlbmRvci1yZXBvcnQvcHVyLXZlbmRvci1yZXBvcnQtY29udHJvbGxlci1maW5kLW9uZSc7XG5pbXBvcnQgeyBQdXJWZW5kb3JSZXBvcnRDb250cm9sbGVyRmluZE9uZSRQYXJhbXMgfSBmcm9tICcuLi9mbi9wdXItdmVuZG9yLXJlcG9ydC9wdXItdmVuZG9yLXJlcG9ydC1jb250cm9sbGVyLWZpbmQtb25lJztcblxuQEluamVjdGFibGUoeyBwcm92aWRlZEluOiAncm9vdCcgfSlcbmV4cG9ydCBjbGFzcyBQdXJWZW5kb3JSZXBvcnRTZXJ2aWNlIGV4dGVuZHMgQmFzZVNlcnZpY2Uge1xuICBjb25zdHJ1Y3Rvcihjb25maWc6IEFwaUNvbmZpZ3VyYXRpb24sIGh0dHA6IEh0dHBDbGllbnQpIHtcbiAgICBzdXBlcihjb25maWcsIGh0dHApO1xuICB9XG5cbiAgLyoqIFBhdGggcGFydCBmb3Igb3BlcmF0aW9uIGBwdXJWZW5kb3JSZXBvcnRDb250cm9sbGVyRmluZEFsbCgpYCAqL1xuICBzdGF0aWMgcmVhZG9ubHkgUHVyVmVuZG9yUmVwb3J0Q29udHJvbGxlckZpbmRBbGxQYXRoID0gJy9hbWltcy9wdXJfdmVuZG9yL3B1cl92ZW5kb3JfcmVwb3J0L2xpc3QnO1xuXG4gIC8qKlxuICAgKiBUaGlzIG1ldGhvZCBwcm92aWRlcyBhY2Nlc3MgdG8gdGhlIGZ1bGwgYEh0dHBSZXNwb25zZWAsIGFsbG93aW5nIGFjY2VzcyB0byByZXNwb25zZSBoZWFkZXJzLlxuICAgKiBUbyBhY2Nlc3Mgb25seSB0aGUgcmVzcG9uc2UgYm9keSwgdXNlIGBwdXJWZW5kb3JSZXBvcnRDb250cm9sbGVyRmluZEFsbCgpYCBpbnN0ZWFkLlxuICAgKlxuICAgKiBUaGlzIG1ldGhvZCBzZW5kcyBgYXBwbGljYXRpb24vanNvbmAgYW5kIGhhbmRsZXMgcmVxdWVzdCBib2R5IG9mIHR5cGUgYGFwcGxpY2F0aW9uL2pzb25gLlxuICAgKi9cbiAgcHVyVmVuZG9yUmVwb3J0Q29udHJvbGxlckZpbmRBbGwkUmVzcG9uc2UocGFyYW1zOiBQdXJWZW5kb3JSZXBvcnRDb250cm9sbGVyRmluZEFsbCRQYXJhbXMsIGNvbnRleHQ/OiBIdHRwQ29udGV4dCk6IE9ic2VydmFibGU8U3RyaWN0SHR0cFJlc3BvbnNlPHtcbidjb2RlJz86IG51bWJlcjtcbidwZXNhbic/OiBzdHJpbmc7XG4nZGF0YSc/OiBBcnJheTxBbWltc1B1clZlbmRvclJlcG9ydER0bz47XG4ndG90YWwnPzogbnVtYmVyO1xufT4+IHtcbiAgICByZXR1cm4gcHVyVmVuZG9yUmVwb3J0Q29udHJvbGxlckZpbmRBbGwodGhpcy5odHRwLCB0aGlzLnJvb3RVcmwsIHBhcmFtcywgY29udGV4dCk7XG4gIH1cblxuICAvKipcbiAgICogVGhpcyBtZXRob2QgcHJvdmlkZXMgYWNjZXNzIG9ubHkgdG8gdGhlIHJlc3BvbnNlIGJvZHkuXG4gICAqIFRvIGFjY2VzcyB0aGUgZnVsbCByZXNwb25zZSAoZm9yIGhlYWRlcnMsIGZvciBleGFtcGxlKSwgYHB1clZlbmRvclJlcG9ydENvbnRyb2xsZXJGaW5kQWxsJFJlc3BvbnNlKClgIGluc3RlYWQuXG4gICAqXG4gICAqIFRoaXMgbWV0aG9kIHNlbmRzIGBhcHBsaWNhdGlvbi9qc29uYCBhbmQgaGFuZGxlcyByZXF1ZXN0IGJvZHkgb2YgdHlwZSBgYXBwbGljYXRpb24vanNvbmAuXG4gICAqL1xuICBwdXJWZW5kb3JSZXBvcnRDb250cm9sbGVyRmluZEFsbChwYXJhbXM6IFB1clZlbmRvclJlcG9ydENvbnRyb2xsZXJGaW5kQWxsJFBhcmFtcywgY29udGV4dD86IEh0dHBDb250ZXh0KTogT2JzZXJ2YWJsZTx7XG4nY29kZSc/OiBudW1iZXI7XG4ncGVzYW4nPzogc3RyaW5nO1xuJ2RhdGEnPzogQXJyYXk8QW1pbXNQdXJWZW5kb3JSZXBvcnREdG8+O1xuJ3RvdGFsJz86IG51bWJlcjtcbn0+IHtcbiAgICByZXR1cm4gdGhpcy5wdXJWZW5kb3JSZXBvcnRDb250cm9sbGVyRmluZEFsbCRSZXNwb25zZShwYXJhbXMsIGNvbnRleHQpLnBpcGUoXG4gICAgICBtYXAoKHI6IFN0cmljdEh0dHBSZXNwb25zZTx7XG4nY29kZSc/OiBudW1iZXI7XG4ncGVzYW4nPzogc3RyaW5nO1xuJ2RhdGEnPzogQXJyYXk8QW1pbXNQdXJWZW5kb3JSZXBvcnREdG8+O1xuJ3RvdGFsJz86IG51bWJlcjtcbn0+KToge1xuJ2NvZGUnPzogbnVtYmVyO1xuJ3Blc2FuJz86IHN0cmluZztcbidkYXRhJz86IEFycmF5PEFtaW1zUHVyVmVuZG9yUmVwb3J0RHRvPjtcbid0b3RhbCc/OiBudW1iZXI7XG59ID0+IHIuYm9keSlcbiAgICApO1xuICB9XG5cbiAgLyoqIFBhdGggcGFydCBmb3Igb3BlcmF0aW9uIGBwdXJWZW5kb3JSZXBvcnRDb250cm9sbGVyRmluZE9uZSgpYCAqL1xuICBzdGF0aWMgcmVhZG9ubHkgUHVyVmVuZG9yUmVwb3J0Q29udHJvbGxlckZpbmRPbmVQYXRoID0gJy9hbWltcy9wdXJfdmVuZG9yL3B1cl92ZW5kb3JfcmVwb3J0L3tpZH0nO1xuXG4gIC8qKlxuICAgKiBUaGlzIG1ldGhvZCBwcm92aWRlcyBhY2Nlc3MgdG8gdGhlIGZ1bGwgYEh0dHBSZXNwb25zZWAsIGFsbG93aW5nIGFjY2VzcyB0byByZXNwb25zZSBoZWFkZXJzLlxuICAgKiBUbyBhY2Nlc3Mgb25seSB0aGUgcmVzcG9uc2UgYm9keSwgdXNlIGBwdXJWZW5kb3JSZXBvcnRDb250cm9sbGVyRmluZE9uZSgpYCBpbnN0ZWFkLlxuICAgKlxuICAgKiBUaGlzIG1ldGhvZCBkb2Vzbid0IGV4cGVjdCBhbnkgcmVxdWVzdCBib2R5LlxuICAgKi9cbiAgcHVyVmVuZG9yUmVwb3J0Q29udHJvbGxlckZpbmRPbmUkUmVzcG9uc2UocGFyYW1zOiBQdXJWZW5kb3JSZXBvcnRDb250cm9sbGVyRmluZE9uZSRQYXJhbXMsIGNvbnRleHQ/OiBIdHRwQ29udGV4dCk6IE9ic2VydmFibGU8U3RyaWN0SHR0cFJlc3BvbnNlPHtcbidjb2RlJz86IG51bWJlcjtcbidwZXNhbic/OiBzdHJpbmc7XG4nZGF0YSc/OiBBbWltc1B1clZlbmRvclJlcG9ydER0bztcbn0+PiB7XG4gICAgcmV0dXJuIHB1clZlbmRvclJlcG9ydENvbnRyb2xsZXJGaW5kT25lKHRoaXMuaHR0cCwgdGhpcy5yb290VXJsLCBwYXJhbXMsIGNvbnRleHQpO1xuICB9XG5cbiAgLyoqXG4gICAqIFRoaXMgbWV0aG9kIHByb3ZpZGVzIGFjY2VzcyBvbmx5IHRvIHRoZSByZXNwb25zZSBib2R5LlxuICAgKiBUbyBhY2Nlc3MgdGhlIGZ1bGwgcmVzcG9uc2UgKGZvciBoZWFkZXJzLCBmb3IgZXhhbXBsZSksIGBwdXJWZW5kb3JSZXBvcnRDb250cm9sbGVyRmluZE9uZSRSZXNwb25zZSgpYCBpbnN0ZWFkLlxuICAgKlxuICAgKiBUaGlzIG1ldGhvZCBkb2Vzbid0IGV4cGVjdCBhbnkgcmVxdWVzdCBib2R5LlxuICAgKi9cbiAgcHVyVmVuZG9yUmVwb3J0Q29udHJvbGxlckZpbmRPbmUocGFyYW1zOiBQdXJWZW5kb3JSZXBvcnRDb250cm9sbGVyRmluZE9uZSRQYXJhbXMsIGNvbnRleHQ/OiBIdHRwQ29udGV4dCk6IE9ic2VydmFibGU8e1xuJ2NvZGUnPzogbnVtYmVyO1xuJ3Blc2FuJz86IHN0cmluZztcbidkYXRhJz86IEFtaW1zUHVyVmVuZG9yUmVwb3J0RHRvO1xufT4ge1xuICAgIHJldHVybiB0aGlzLnB1clZlbmRvclJlcG9ydENvbnRyb2xsZXJGaW5kT25lJFJlc3BvbnNlKHBhcmFtcywgY29udGV4dCkucGlwZShcbiAgICAgIG1hcCgocjogU3RyaWN0SHR0cFJlc3BvbnNlPHtcbidjb2RlJz86IG51bWJlcjtcbidwZXNhbic/OiBzdHJpbmc7XG4nZGF0YSc/OiBBbWltc1B1clZlbmRvclJlcG9ydER0bztcbn0+KToge1xuJ2NvZGUnPzogbnVtYmVyO1xuJ3Blc2FuJz86IHN0cmluZztcbidkYXRhJz86IEFtaW1zUHVyVmVuZG9yUmVwb3J0RHRvO1xufSA9PiByLmJvZHkpXG4gICAgKTtcbiAgfVxuXG59XG4iXX0=
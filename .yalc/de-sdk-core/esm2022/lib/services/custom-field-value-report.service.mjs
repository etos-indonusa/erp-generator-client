/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
import { HttpClient } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { map } from 'rxjs/operators';
import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { customFieldValueReportControllerFindAll } from '../fn/custom-field-value-report/custom-field-value-report-controller-find-all';
import { customFieldValueReportControllerFindOne } from '../fn/custom-field-value-report/custom-field-value-report-controller-find-one';
import * as i0 from "@angular/core";
import * as i1 from "../api-configuration";
import * as i2 from "@angular/common/http";
export class CustomFieldValueReportService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `customFieldValueReportControllerFindAll()` */
    static { this.CustomFieldValueReportControllerFindAllPath = '/auth/custom_field_value/custom_field_value_report/list'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `customFieldValueReportControllerFindAll()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    customFieldValueReportControllerFindAll$Response(params, context) {
        return customFieldValueReportControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `customFieldValueReportControllerFindAll$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    customFieldValueReportControllerFindAll(params, context) {
        return this.customFieldValueReportControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `customFieldValueReportControllerFindOne()` */
    static { this.CustomFieldValueReportControllerFindOnePath = '/auth/custom_field_value/custom_field_value_report/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `customFieldValueReportControllerFindOne()` instead.
     *
     * This method doesn't expect any request body.
     */
    customFieldValueReportControllerFindOne$Response(params, context) {
        return customFieldValueReportControllerFindOne(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `customFieldValueReportControllerFindOne$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    customFieldValueReportControllerFindOne(params, context) {
        return this.customFieldValueReportControllerFindOne$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: CustomFieldValueReportService, deps: [{ token: i1.ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: CustomFieldValueReportService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: CustomFieldValueReportService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: i1.ApiConfiguration }, { type: i2.HttpClient }] });
//# sourceMappingURL=data:application/json;base64,
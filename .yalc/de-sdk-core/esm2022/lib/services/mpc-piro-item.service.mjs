/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
import { HttpClient } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { map } from 'rxjs/operators';
import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { mpcPiroItemControllerCreate } from '../fn/mpc-piro-item/mpc-piro-item-controller-create';
import { mpcPiroItemControllerFindAll } from '../fn/mpc-piro-item/mpc-piro-item-controller-find-all';
import { mpcPiroItemControllerFindOne } from '../fn/mpc-piro-item/mpc-piro-item-controller-find-one';
import { mpcPiroItemControllerRemove } from '../fn/mpc-piro-item/mpc-piro-item-controller-remove';
import { mpcPiroItemControllerUpdate } from '../fn/mpc-piro-item/mpc-piro-item-controller-update';
import * as i0 from "@angular/core";
import * as i1 from "../api-configuration";
import * as i2 from "@angular/common/http";
export class MpcPiroItemService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `mpcPiroItemControllerFindAll()` */
    static { this.MpcPiroItemControllerFindAllPath = '/amims/mpc_piro_item/mpc_piro_item'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `mpcPiroItemControllerFindAll()` instead.
     *
     * This method doesn't expect any request body.
     */
    mpcPiroItemControllerFindAll$Response(params, context) {
        return mpcPiroItemControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `mpcPiroItemControllerFindAll$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    mpcPiroItemControllerFindAll(params, context) {
        return this.mpcPiroItemControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `mpcPiroItemControllerCreate()` */
    static { this.MpcPiroItemControllerCreatePath = '/amims/mpc_piro_item/mpc_piro_item'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `mpcPiroItemControllerCreate()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    mpcPiroItemControllerCreate$Response(params, context) {
        return mpcPiroItemControllerCreate(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `mpcPiroItemControllerCreate$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    mpcPiroItemControllerCreate(params, context) {
        return this.mpcPiroItemControllerCreate$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `mpcPiroItemControllerFindOne()` */
    static { this.MpcPiroItemControllerFindOnePath = '/amims/mpc_piro_item/mpc_piro_item/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `mpcPiroItemControllerFindOne()` instead.
     *
     * This method doesn't expect any request body.
     */
    mpcPiroItemControllerFindOne$Response(params, context) {
        return mpcPiroItemControllerFindOne(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `mpcPiroItemControllerFindOne$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    mpcPiroItemControllerFindOne(params, context) {
        return this.mpcPiroItemControllerFindOne$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `mpcPiroItemControllerUpdate()` */
    static { this.MpcPiroItemControllerUpdatePath = '/amims/mpc_piro_item/mpc_piro_item/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `mpcPiroItemControllerUpdate()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    mpcPiroItemControllerUpdate$Response(params, context) {
        return mpcPiroItemControllerUpdate(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `mpcPiroItemControllerUpdate$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    mpcPiroItemControllerUpdate(params, context) {
        return this.mpcPiroItemControllerUpdate$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `mpcPiroItemControllerRemove()` */
    static { this.MpcPiroItemControllerRemovePath = '/amims/mpc_piro_item/mpc_piro_item/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `mpcPiroItemControllerRemove()` instead.
     *
     * This method doesn't expect any request body.
     */
    mpcPiroItemControllerRemove$Response(params, context) {
        return mpcPiroItemControllerRemove(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `mpcPiroItemControllerRemove$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    mpcPiroItemControllerRemove(params, context) {
        return this.mpcPiroItemControllerRemove$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: MpcPiroItemService, deps: [{ token: i1.ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: MpcPiroItemService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: MpcPiroItemService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: i1.ApiConfiguration }, { type: i2.HttpClient }] });
//# sourceMappingURL=data:application/json;base64,
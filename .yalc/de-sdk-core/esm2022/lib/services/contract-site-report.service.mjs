/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
import { HttpClient } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { map } from 'rxjs/operators';
import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { contractSiteReportControllerFindAll } from '../fn/contract-site-report/contract-site-report-controller-find-all';
import { contractSiteReportControllerFindOne } from '../fn/contract-site-report/contract-site-report-controller-find-one';
import * as i0 from "@angular/core";
import * as i1 from "../api-configuration";
import * as i2 from "@angular/common/http";
export class ContractSiteReportService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `contractSiteReportControllerFindAll()` */
    static { this.ContractSiteReportControllerFindAllPath = '/auth/contract_site/contract_site_report/list'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `contractSiteReportControllerFindAll()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    contractSiteReportControllerFindAll$Response(params, context) {
        return contractSiteReportControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `contractSiteReportControllerFindAll$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    contractSiteReportControllerFindAll(params, context) {
        return this.contractSiteReportControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `contractSiteReportControllerFindOne()` */
    static { this.ContractSiteReportControllerFindOnePath = '/auth/contract_site/contract_site_report/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `contractSiteReportControllerFindOne()` instead.
     *
     * This method doesn't expect any request body.
     */
    contractSiteReportControllerFindOne$Response(params, context) {
        return contractSiteReportControllerFindOne(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `contractSiteReportControllerFindOne$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    contractSiteReportControllerFindOne(params, context) {
        return this.contractSiteReportControllerFindOne$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: ContractSiteReportService, deps: [{ token: i1.ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: ContractSiteReportService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: ContractSiteReportService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: i1.ApiConfiguration }, { type: i2.HttpClient }] });
//# sourceMappingURL=data:application/json;base64,
/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
import { HttpClient } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { map } from 'rxjs/operators';
import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { partInstallOldReportControllerFindAll } from '../fn/part-install-old-report/part-install-old-report-controller-find-all';
import { partInstallOldReportControllerFindOne } from '../fn/part-install-old-report/part-install-old-report-controller-find-one';
import * as i0 from "@angular/core";
import * as i1 from "../api-configuration";
import * as i2 from "@angular/common/http";
export class PartInstallOldReportService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `partInstallOldReportControllerFindAll()` */
    static { this.PartInstallOldReportControllerFindAllPath = '/amims/part_install_old/part_install_old_report/list'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `partInstallOldReportControllerFindAll()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    partInstallOldReportControllerFindAll$Response(params, context) {
        return partInstallOldReportControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `partInstallOldReportControllerFindAll$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    partInstallOldReportControllerFindAll(params, context) {
        return this.partInstallOldReportControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `partInstallOldReportControllerFindOne()` */
    static { this.PartInstallOldReportControllerFindOnePath = '/amims/part_install_old/part_install_old_report/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `partInstallOldReportControllerFindOne()` instead.
     *
     * This method doesn't expect any request body.
     */
    partInstallOldReportControllerFindOne$Response(params, context) {
        return partInstallOldReportControllerFindOne(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `partInstallOldReportControllerFindOne$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    partInstallOldReportControllerFindOne(params, context) {
        return this.partInstallOldReportControllerFindOne$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: PartInstallOldReportService, deps: [{ token: i1.ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: PartInstallOldReportService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: PartInstallOldReportService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: i1.ApiConfiguration }, { type: i2.HttpClient }] });
//# sourceMappingURL=data:application/json;base64,
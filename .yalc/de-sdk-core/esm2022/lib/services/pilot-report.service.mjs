/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
import { HttpClient } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { map } from 'rxjs/operators';
import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { pilotReportControllerFindAll } from '../fn/pilot-report/pilot-report-controller-find-all';
import { pilotReportControllerFindOne } from '../fn/pilot-report/pilot-report-controller-find-one';
import * as i0 from "@angular/core";
import * as i1 from "../api-configuration";
import * as i2 from "@angular/common/http";
export class PilotReportService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `pilotReportControllerFindAll()` */
    static { this.PilotReportControllerFindAllPath = '/amims/pilot/pilot_report/list'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `pilotReportControllerFindAll()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    pilotReportControllerFindAll$Response(params, context) {
        return pilotReportControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `pilotReportControllerFindAll$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    pilotReportControllerFindAll(params, context) {
        return this.pilotReportControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `pilotReportControllerFindOne()` */
    static { this.PilotReportControllerFindOnePath = '/amims/pilot/pilot_report/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `pilotReportControllerFindOne()` instead.
     *
     * This method doesn't expect any request body.
     */
    pilotReportControllerFindOne$Response(params, context) {
        return pilotReportControllerFindOne(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `pilotReportControllerFindOne$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    pilotReportControllerFindOne(params, context) {
        return this.pilotReportControllerFindOne$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: PilotReportService, deps: [{ token: i1.ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: PilotReportService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: PilotReportService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: i1.ApiConfiguration }, { type: i2.HttpClient }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGlsb3QtcmVwb3J0LnNlcnZpY2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9zZGtjb3JlL3NyYy9saWIvc2VydmljZXMvcGlsb3QtcmVwb3J0LnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsb0JBQW9CO0FBQ3BCLG9CQUFvQjtBQUNwQixtREFBbUQ7QUFFbkQsT0FBTyxFQUFFLFVBQVUsRUFBZSxNQUFNLHNCQUFzQixDQUFDO0FBQy9ELE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFM0MsT0FBTyxFQUFFLEdBQUcsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBRXJDLE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUM5QyxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQztBQUl4RCxPQUFPLEVBQUUsNEJBQTRCLEVBQUUsTUFBTSxxREFBcUQsQ0FBQztBQUVuRyxPQUFPLEVBQUUsNEJBQTRCLEVBQUUsTUFBTSxxREFBcUQsQ0FBQzs7OztBQUluRyxNQUFNLE9BQU8sa0JBQW1CLFNBQVEsV0FBVztJQUNqRCxZQUFZLE1BQXdCLEVBQUUsSUFBZ0I7UUFDcEQsS0FBSyxDQUFDLE1BQU0sRUFBRSxJQUFJLENBQUMsQ0FBQztJQUN0QixDQUFDO0lBRUQsK0RBQStEO2FBQy9DLHFDQUFnQyxHQUFHLGdDQUFnQyxBQUFuQyxDQUFvQztJQUVwRjs7Ozs7T0FLRztJQUNILHFDQUFxQyxDQUFDLE1BQTJDLEVBQUUsT0FBcUI7UUFNdEcsT0FBTyw0QkFBNEIsQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxPQUFPLEVBQUUsTUFBTSxFQUFFLE9BQU8sQ0FBQyxDQUFDO0lBQ2hGLENBQUM7SUFFRDs7Ozs7T0FLRztJQUNILDRCQUE0QixDQUFDLE1BQTJDLEVBQUUsT0FBcUI7UUFNN0YsT0FBTyxJQUFJLENBQUMscUNBQXFDLENBQUMsTUFBTSxFQUFFLE9BQU8sQ0FBQyxDQUFDLElBQUksQ0FDckUsR0FBRyxDQUFDLENBQUMsQ0FLVCxFQUtBLEVBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQ1AsQ0FBQztJQUNKLENBQUM7SUFFRCwrREFBK0Q7YUFDL0MscUNBQWdDLEdBQUcsZ0NBQWdDLEFBQW5DLENBQW9DO0lBRXBGOzs7OztPQUtHO0lBQ0gscUNBQXFDLENBQUMsTUFBMkMsRUFBRSxPQUFxQjtRQUt0RyxPQUFPLDRCQUE0QixDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLE9BQU8sRUFBRSxNQUFNLEVBQUUsT0FBTyxDQUFDLENBQUM7SUFDaEYsQ0FBQztJQUVEOzs7OztPQUtHO0lBQ0gsNEJBQTRCLENBQUMsTUFBMkMsRUFBRSxPQUFxQjtRQUs3RixPQUFPLElBQUksQ0FBQyxxQ0FBcUMsQ0FBQyxNQUFNLEVBQUUsT0FBTyxDQUFDLENBQUMsSUFBSSxDQUNyRSxHQUFHLENBQUMsQ0FBQyxDQUlULEVBSUEsRUFBRSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FDUCxDQUFDO0lBQ0osQ0FBQzsrR0F6RlUsa0JBQWtCO21IQUFsQixrQkFBa0IsY0FETCxNQUFNOzs0RkFDbkIsa0JBQWtCO2tCQUQ5QixVQUFVO21CQUFDLEVBQUUsVUFBVSxFQUFFLE1BQU0sRUFBRSIsInNvdXJjZXNDb250ZW50IjpbIi8qIHRzbGludDpkaXNhYmxlICovXG4vKiBlc2xpbnQtZGlzYWJsZSAqL1xuLyogQ29kZSBnZW5lcmF0ZWQgYnkgbmctb3BlbmFwaS1nZW4gRE8gTk9UIEVESVQuICovXG5cbmltcG9ydCB7IEh0dHBDbGllbnQsIEh0dHBDb250ZXh0IH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uL2h0dHAnO1xuaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgbWFwIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuXG5pbXBvcnQgeyBCYXNlU2VydmljZSB9IGZyb20gJy4uL2Jhc2Utc2VydmljZSc7XG5pbXBvcnQgeyBBcGlDb25maWd1cmF0aW9uIH0gZnJvbSAnLi4vYXBpLWNvbmZpZ3VyYXRpb24nO1xuaW1wb3J0IHsgU3RyaWN0SHR0cFJlc3BvbnNlIH0gZnJvbSAnLi4vc3RyaWN0LWh0dHAtcmVzcG9uc2UnO1xuXG5pbXBvcnQgeyBBbWltc1BpbG90UmVwb3J0RHRvIH0gZnJvbSAnLi4vbW9kZWxzL2FtaW1zLXBpbG90LXJlcG9ydC1kdG8nO1xuaW1wb3J0IHsgcGlsb3RSZXBvcnRDb250cm9sbGVyRmluZEFsbCB9IGZyb20gJy4uL2ZuL3BpbG90LXJlcG9ydC9waWxvdC1yZXBvcnQtY29udHJvbGxlci1maW5kLWFsbCc7XG5pbXBvcnQgeyBQaWxvdFJlcG9ydENvbnRyb2xsZXJGaW5kQWxsJFBhcmFtcyB9IGZyb20gJy4uL2ZuL3BpbG90LXJlcG9ydC9waWxvdC1yZXBvcnQtY29udHJvbGxlci1maW5kLWFsbCc7XG5pbXBvcnQgeyBwaWxvdFJlcG9ydENvbnRyb2xsZXJGaW5kT25lIH0gZnJvbSAnLi4vZm4vcGlsb3QtcmVwb3J0L3BpbG90LXJlcG9ydC1jb250cm9sbGVyLWZpbmQtb25lJztcbmltcG9ydCB7IFBpbG90UmVwb3J0Q29udHJvbGxlckZpbmRPbmUkUGFyYW1zIH0gZnJvbSAnLi4vZm4vcGlsb3QtcmVwb3J0L3BpbG90LXJlcG9ydC1jb250cm9sbGVyLWZpbmQtb25lJztcblxuQEluamVjdGFibGUoeyBwcm92aWRlZEluOiAncm9vdCcgfSlcbmV4cG9ydCBjbGFzcyBQaWxvdFJlcG9ydFNlcnZpY2UgZXh0ZW5kcyBCYXNlU2VydmljZSB7XG4gIGNvbnN0cnVjdG9yKGNvbmZpZzogQXBpQ29uZmlndXJhdGlvbiwgaHR0cDogSHR0cENsaWVudCkge1xuICAgIHN1cGVyKGNvbmZpZywgaHR0cCk7XG4gIH1cblxuICAvKiogUGF0aCBwYXJ0IGZvciBvcGVyYXRpb24gYHBpbG90UmVwb3J0Q29udHJvbGxlckZpbmRBbGwoKWAgKi9cbiAgc3RhdGljIHJlYWRvbmx5IFBpbG90UmVwb3J0Q29udHJvbGxlckZpbmRBbGxQYXRoID0gJy9hbWltcy9waWxvdC9waWxvdF9yZXBvcnQvbGlzdCc7XG5cbiAgLyoqXG4gICAqIFRoaXMgbWV0aG9kIHByb3ZpZGVzIGFjY2VzcyB0byB0aGUgZnVsbCBgSHR0cFJlc3BvbnNlYCwgYWxsb3dpbmcgYWNjZXNzIHRvIHJlc3BvbnNlIGhlYWRlcnMuXG4gICAqIFRvIGFjY2VzcyBvbmx5IHRoZSByZXNwb25zZSBib2R5LCB1c2UgYHBpbG90UmVwb3J0Q29udHJvbGxlckZpbmRBbGwoKWAgaW5zdGVhZC5cbiAgICpcbiAgICogVGhpcyBtZXRob2Qgc2VuZHMgYGFwcGxpY2F0aW9uL2pzb25gIGFuZCBoYW5kbGVzIHJlcXVlc3QgYm9keSBvZiB0eXBlIGBhcHBsaWNhdGlvbi9qc29uYC5cbiAgICovXG4gIHBpbG90UmVwb3J0Q29udHJvbGxlckZpbmRBbGwkUmVzcG9uc2UocGFyYW1zOiBQaWxvdFJlcG9ydENvbnRyb2xsZXJGaW5kQWxsJFBhcmFtcywgY29udGV4dD86IEh0dHBDb250ZXh0KTogT2JzZXJ2YWJsZTxTdHJpY3RIdHRwUmVzcG9uc2U8e1xuJ2NvZGUnPzogbnVtYmVyO1xuJ3Blc2FuJz86IHN0cmluZztcbidkYXRhJz86IEFycmF5PEFtaW1zUGlsb3RSZXBvcnREdG8+O1xuJ3RvdGFsJz86IG51bWJlcjtcbn0+PiB7XG4gICAgcmV0dXJuIHBpbG90UmVwb3J0Q29udHJvbGxlckZpbmRBbGwodGhpcy5odHRwLCB0aGlzLnJvb3RVcmwsIHBhcmFtcywgY29udGV4dCk7XG4gIH1cblxuICAvKipcbiAgICogVGhpcyBtZXRob2QgcHJvdmlkZXMgYWNjZXNzIG9ubHkgdG8gdGhlIHJlc3BvbnNlIGJvZHkuXG4gICAqIFRvIGFjY2VzcyB0aGUgZnVsbCByZXNwb25zZSAoZm9yIGhlYWRlcnMsIGZvciBleGFtcGxlKSwgYHBpbG90UmVwb3J0Q29udHJvbGxlckZpbmRBbGwkUmVzcG9uc2UoKWAgaW5zdGVhZC5cbiAgICpcbiAgICogVGhpcyBtZXRob2Qgc2VuZHMgYGFwcGxpY2F0aW9uL2pzb25gIGFuZCBoYW5kbGVzIHJlcXVlc3QgYm9keSBvZiB0eXBlIGBhcHBsaWNhdGlvbi9qc29uYC5cbiAgICovXG4gIHBpbG90UmVwb3J0Q29udHJvbGxlckZpbmRBbGwocGFyYW1zOiBQaWxvdFJlcG9ydENvbnRyb2xsZXJGaW5kQWxsJFBhcmFtcywgY29udGV4dD86IEh0dHBDb250ZXh0KTogT2JzZXJ2YWJsZTx7XG4nY29kZSc/OiBudW1iZXI7XG4ncGVzYW4nPzogc3RyaW5nO1xuJ2RhdGEnPzogQXJyYXk8QW1pbXNQaWxvdFJlcG9ydER0bz47XG4ndG90YWwnPzogbnVtYmVyO1xufT4ge1xuICAgIHJldHVybiB0aGlzLnBpbG90UmVwb3J0Q29udHJvbGxlckZpbmRBbGwkUmVzcG9uc2UocGFyYW1zLCBjb250ZXh0KS5waXBlKFxuICAgICAgbWFwKChyOiBTdHJpY3RIdHRwUmVzcG9uc2U8e1xuJ2NvZGUnPzogbnVtYmVyO1xuJ3Blc2FuJz86IHN0cmluZztcbidkYXRhJz86IEFycmF5PEFtaW1zUGlsb3RSZXBvcnREdG8+O1xuJ3RvdGFsJz86IG51bWJlcjtcbn0+KToge1xuJ2NvZGUnPzogbnVtYmVyO1xuJ3Blc2FuJz86IHN0cmluZztcbidkYXRhJz86IEFycmF5PEFtaW1zUGlsb3RSZXBvcnREdG8+O1xuJ3RvdGFsJz86IG51bWJlcjtcbn0gPT4gci5ib2R5KVxuICAgICk7XG4gIH1cblxuICAvKiogUGF0aCBwYXJ0IGZvciBvcGVyYXRpb24gYHBpbG90UmVwb3J0Q29udHJvbGxlckZpbmRPbmUoKWAgKi9cbiAgc3RhdGljIHJlYWRvbmx5IFBpbG90UmVwb3J0Q29udHJvbGxlckZpbmRPbmVQYXRoID0gJy9hbWltcy9waWxvdC9waWxvdF9yZXBvcnQve2lkfSc7XG5cbiAgLyoqXG4gICAqIFRoaXMgbWV0aG9kIHByb3ZpZGVzIGFjY2VzcyB0byB0aGUgZnVsbCBgSHR0cFJlc3BvbnNlYCwgYWxsb3dpbmcgYWNjZXNzIHRvIHJlc3BvbnNlIGhlYWRlcnMuXG4gICAqIFRvIGFjY2VzcyBvbmx5IHRoZSByZXNwb25zZSBib2R5LCB1c2UgYHBpbG90UmVwb3J0Q29udHJvbGxlckZpbmRPbmUoKWAgaW5zdGVhZC5cbiAgICpcbiAgICogVGhpcyBtZXRob2QgZG9lc24ndCBleHBlY3QgYW55IHJlcXVlc3QgYm9keS5cbiAgICovXG4gIHBpbG90UmVwb3J0Q29udHJvbGxlckZpbmRPbmUkUmVzcG9uc2UocGFyYW1zOiBQaWxvdFJlcG9ydENvbnRyb2xsZXJGaW5kT25lJFBhcmFtcywgY29udGV4dD86IEh0dHBDb250ZXh0KTogT2JzZXJ2YWJsZTxTdHJpY3RIdHRwUmVzcG9uc2U8e1xuJ2NvZGUnPzogbnVtYmVyO1xuJ3Blc2FuJz86IHN0cmluZztcbidkYXRhJz86IEFtaW1zUGlsb3RSZXBvcnREdG87XG59Pj4ge1xuICAgIHJldHVybiBwaWxvdFJlcG9ydENvbnRyb2xsZXJGaW5kT25lKHRoaXMuaHR0cCwgdGhpcy5yb290VXJsLCBwYXJhbXMsIGNvbnRleHQpO1xuICB9XG5cbiAgLyoqXG4gICAqIFRoaXMgbWV0aG9kIHByb3ZpZGVzIGFjY2VzcyBvbmx5IHRvIHRoZSByZXNwb25zZSBib2R5LlxuICAgKiBUbyBhY2Nlc3MgdGhlIGZ1bGwgcmVzcG9uc2UgKGZvciBoZWFkZXJzLCBmb3IgZXhhbXBsZSksIGBwaWxvdFJlcG9ydENvbnRyb2xsZXJGaW5kT25lJFJlc3BvbnNlKClgIGluc3RlYWQuXG4gICAqXG4gICAqIFRoaXMgbWV0aG9kIGRvZXNuJ3QgZXhwZWN0IGFueSByZXF1ZXN0IGJvZHkuXG4gICAqL1xuICBwaWxvdFJlcG9ydENvbnRyb2xsZXJGaW5kT25lKHBhcmFtczogUGlsb3RSZXBvcnRDb250cm9sbGVyRmluZE9uZSRQYXJhbXMsIGNvbnRleHQ/OiBIdHRwQ29udGV4dCk6IE9ic2VydmFibGU8e1xuJ2NvZGUnPzogbnVtYmVyO1xuJ3Blc2FuJz86IHN0cmluZztcbidkYXRhJz86IEFtaW1zUGlsb3RSZXBvcnREdG87XG59PiB7XG4gICAgcmV0dXJuIHRoaXMucGlsb3RSZXBvcnRDb250cm9sbGVyRmluZE9uZSRSZXNwb25zZShwYXJhbXMsIGNvbnRleHQpLnBpcGUoXG4gICAgICBtYXAoKHI6IFN0cmljdEh0dHBSZXNwb25zZTx7XG4nY29kZSc/OiBudW1iZXI7XG4ncGVzYW4nPzogc3RyaW5nO1xuJ2RhdGEnPzogQW1pbXNQaWxvdFJlcG9ydER0bztcbn0+KToge1xuJ2NvZGUnPzogbnVtYmVyO1xuJ3Blc2FuJz86IHN0cmluZztcbidkYXRhJz86IEFtaW1zUGlsb3RSZXBvcnREdG87XG59ID0+IHIuYm9keSlcbiAgICApO1xuICB9XG5cbn1cbiJdfQ==
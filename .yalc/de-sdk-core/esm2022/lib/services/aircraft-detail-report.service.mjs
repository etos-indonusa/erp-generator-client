/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
import { HttpClient } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { map } from 'rxjs/operators';
import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { aircraftDetailReportControllerFindAll } from '../fn/aircraft-detail-report/aircraft-detail-report-controller-find-all';
import { aircraftDetailReportControllerFindOne } from '../fn/aircraft-detail-report/aircraft-detail-report-controller-find-one';
import * as i0 from "@angular/core";
import * as i1 from "../api-configuration";
import * as i2 from "@angular/common/http";
export class AircraftDetailReportService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `aircraftDetailReportControllerFindAll()` */
    static { this.AircraftDetailReportControllerFindAllPath = '/amims/aircraft_detail/aircraft_detail_report/list'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `aircraftDetailReportControllerFindAll()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    aircraftDetailReportControllerFindAll$Response(params, context) {
        return aircraftDetailReportControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `aircraftDetailReportControllerFindAll$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    aircraftDetailReportControllerFindAll(params, context) {
        return this.aircraftDetailReportControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `aircraftDetailReportControllerFindOne()` */
    static { this.AircraftDetailReportControllerFindOnePath = '/amims/aircraft_detail/aircraft_detail_report/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `aircraftDetailReportControllerFindOne()` instead.
     *
     * This method doesn't expect any request body.
     */
    aircraftDetailReportControllerFindOne$Response(params, context) {
        return aircraftDetailReportControllerFindOne(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `aircraftDetailReportControllerFindOne$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    aircraftDetailReportControllerFindOne(params, context) {
        return this.aircraftDetailReportControllerFindOne$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: AircraftDetailReportService, deps: [{ token: i1.ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: AircraftDetailReportService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: AircraftDetailReportService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: i1.ApiConfiguration }, { type: i2.HttpClient }] });
//# sourceMappingURL=data:application/json;base64,
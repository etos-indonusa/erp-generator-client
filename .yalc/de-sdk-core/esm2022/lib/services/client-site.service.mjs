/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
import { HttpClient } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { map } from 'rxjs/operators';
import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { clientSiteControllerCreate } from '../fn/client-site/client-site-controller-create';
import { clientSiteControllerFindAll } from '../fn/client-site/client-site-controller-find-all';
import { clientSiteControllerFindOne } from '../fn/client-site/client-site-controller-find-one';
import { clientSiteControllerRemove } from '../fn/client-site/client-site-controller-remove';
import { clientSiteControllerUpdate } from '../fn/client-site/client-site-controller-update';
import * as i0 from "@angular/core";
import * as i1 from "../api-configuration";
import * as i2 from "@angular/common/http";
export class ClientSiteService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `clientSiteControllerFindAll()` */
    static { this.ClientSiteControllerFindAllPath = '/pelanggan/client_site/client_site'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `clientSiteControllerFindAll()` instead.
     *
     * This method doesn't expect any request body.
     */
    clientSiteControllerFindAll$Response(params, context) {
        return clientSiteControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `clientSiteControllerFindAll$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    clientSiteControllerFindAll(params, context) {
        return this.clientSiteControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `clientSiteControllerCreate()` */
    static { this.ClientSiteControllerCreatePath = '/pelanggan/client_site/client_site'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `clientSiteControllerCreate()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    clientSiteControllerCreate$Response(params, context) {
        return clientSiteControllerCreate(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `clientSiteControllerCreate$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    clientSiteControllerCreate(params, context) {
        return this.clientSiteControllerCreate$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `clientSiteControllerFindOne()` */
    static { this.ClientSiteControllerFindOnePath = '/pelanggan/client_site/client_site/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `clientSiteControllerFindOne()` instead.
     *
     * This method doesn't expect any request body.
     */
    clientSiteControllerFindOne$Response(params, context) {
        return clientSiteControllerFindOne(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `clientSiteControllerFindOne$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    clientSiteControllerFindOne(params, context) {
        return this.clientSiteControllerFindOne$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `clientSiteControllerUpdate()` */
    static { this.ClientSiteControllerUpdatePath = '/pelanggan/client_site/client_site/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `clientSiteControllerUpdate()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    clientSiteControllerUpdate$Response(params, context) {
        return clientSiteControllerUpdate(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `clientSiteControllerUpdate$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    clientSiteControllerUpdate(params, context) {
        return this.clientSiteControllerUpdate$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `clientSiteControllerRemove()` */
    static { this.ClientSiteControllerRemovePath = '/pelanggan/client_site/client_site/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `clientSiteControllerRemove()` instead.
     *
     * This method doesn't expect any request body.
     */
    clientSiteControllerRemove$Response(params, context) {
        return clientSiteControllerRemove(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `clientSiteControllerRemove$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    clientSiteControllerRemove(params, context) {
        return this.clientSiteControllerRemove$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: ClientSiteService, deps: [{ token: i1.ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: ClientSiteService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: ClientSiteService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: i1.ApiConfiguration }, { type: i2.HttpClient }] });
//# sourceMappingURL=data:application/json;base64,
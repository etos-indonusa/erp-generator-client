/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
import { HttpClient } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { map } from 'rxjs/operators';
import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { maintenanceCodeReferenceControllerCreate } from '../fn/maintenance-code-reference/maintenance-code-reference-controller-create';
import { maintenanceCodeReferenceControllerFindAll } from '../fn/maintenance-code-reference/maintenance-code-reference-controller-find-all';
import { maintenanceCodeReferenceControllerFindOne } from '../fn/maintenance-code-reference/maintenance-code-reference-controller-find-one';
import { maintenanceCodeReferenceControllerRemove } from '../fn/maintenance-code-reference/maintenance-code-reference-controller-remove';
import { maintenanceCodeReferenceControllerUpdate } from '../fn/maintenance-code-reference/maintenance-code-reference-controller-update';
import * as i0 from "@angular/core";
import * as i1 from "../api-configuration";
import * as i2 from "@angular/common/http";
export class MaintenanceCodeReferenceService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `maintenanceCodeReferenceControllerFindAll()` */
    static { this.MaintenanceCodeReferenceControllerFindAllPath = '/amims/maintenance_code_reference/maintenance_code_reference'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `maintenanceCodeReferenceControllerFindAll()` instead.
     *
     * This method doesn't expect any request body.
     */
    maintenanceCodeReferenceControllerFindAll$Response(params, context) {
        return maintenanceCodeReferenceControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `maintenanceCodeReferenceControllerFindAll$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    maintenanceCodeReferenceControllerFindAll(params, context) {
        return this.maintenanceCodeReferenceControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `maintenanceCodeReferenceControllerCreate()` */
    static { this.MaintenanceCodeReferenceControllerCreatePath = '/amims/maintenance_code_reference/maintenance_code_reference'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `maintenanceCodeReferenceControllerCreate()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    maintenanceCodeReferenceControllerCreate$Response(params, context) {
        return maintenanceCodeReferenceControllerCreate(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `maintenanceCodeReferenceControllerCreate$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    maintenanceCodeReferenceControllerCreate(params, context) {
        return this.maintenanceCodeReferenceControllerCreate$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `maintenanceCodeReferenceControllerFindOne()` */
    static { this.MaintenanceCodeReferenceControllerFindOnePath = '/amims/maintenance_code_reference/maintenance_code_reference/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `maintenanceCodeReferenceControllerFindOne()` instead.
     *
     * This method doesn't expect any request body.
     */
    maintenanceCodeReferenceControllerFindOne$Response(params, context) {
        return maintenanceCodeReferenceControllerFindOne(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `maintenanceCodeReferenceControllerFindOne$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    maintenanceCodeReferenceControllerFindOne(params, context) {
        return this.maintenanceCodeReferenceControllerFindOne$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `maintenanceCodeReferenceControllerUpdate()` */
    static { this.MaintenanceCodeReferenceControllerUpdatePath = '/amims/maintenance_code_reference/maintenance_code_reference/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `maintenanceCodeReferenceControllerUpdate()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    maintenanceCodeReferenceControllerUpdate$Response(params, context) {
        return maintenanceCodeReferenceControllerUpdate(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `maintenanceCodeReferenceControllerUpdate$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    maintenanceCodeReferenceControllerUpdate(params, context) {
        return this.maintenanceCodeReferenceControllerUpdate$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `maintenanceCodeReferenceControllerRemove()` */
    static { this.MaintenanceCodeReferenceControllerRemovePath = '/amims/maintenance_code_reference/maintenance_code_reference/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `maintenanceCodeReferenceControllerRemove()` instead.
     *
     * This method doesn't expect any request body.
     */
    maintenanceCodeReferenceControllerRemove$Response(params, context) {
        return maintenanceCodeReferenceControllerRemove(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `maintenanceCodeReferenceControllerRemove$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    maintenanceCodeReferenceControllerRemove(params, context) {
        return this.maintenanceCodeReferenceControllerRemove$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: MaintenanceCodeReferenceService, deps: [{ token: i1.ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: MaintenanceCodeReferenceService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: MaintenanceCodeReferenceService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: i1.ApiConfiguration }, { type: i2.HttpClient }] });
//# sourceMappingURL=data:application/json;base64,
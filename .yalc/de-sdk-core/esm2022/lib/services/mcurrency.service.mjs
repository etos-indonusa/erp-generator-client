/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
import { HttpClient } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { map } from 'rxjs/operators';
import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { mcurrencyControllerCreate } from '../fn/mcurrency/mcurrency-controller-create';
import { mcurrencyControllerFindAll } from '../fn/mcurrency/mcurrency-controller-find-all';
import { mcurrencyControllerFindOne } from '../fn/mcurrency/mcurrency-controller-find-one';
import { mcurrencyControllerRemove } from '../fn/mcurrency/mcurrency-controller-remove';
import { mcurrencyControllerUpdate } from '../fn/mcurrency/mcurrency-controller-update';
import * as i0 from "@angular/core";
import * as i1 from "../api-configuration";
import * as i2 from "@angular/common/http";
export class McurrencyService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `mcurrencyControllerFindAll()` */
    static { this.McurrencyControllerFindAllPath = '/amims/mcurrency/mcurrency'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `mcurrencyControllerFindAll()` instead.
     *
     * This method doesn't expect any request body.
     */
    mcurrencyControllerFindAll$Response(params, context) {
        return mcurrencyControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `mcurrencyControllerFindAll$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    mcurrencyControllerFindAll(params, context) {
        return this.mcurrencyControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `mcurrencyControllerCreate()` */
    static { this.McurrencyControllerCreatePath = '/amims/mcurrency/mcurrency'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `mcurrencyControllerCreate()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    mcurrencyControllerCreate$Response(params, context) {
        return mcurrencyControllerCreate(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `mcurrencyControllerCreate$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    mcurrencyControllerCreate(params, context) {
        return this.mcurrencyControllerCreate$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `mcurrencyControllerFindOne()` */
    static { this.McurrencyControllerFindOnePath = '/amims/mcurrency/mcurrency/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `mcurrencyControllerFindOne()` instead.
     *
     * This method doesn't expect any request body.
     */
    mcurrencyControllerFindOne$Response(params, context) {
        return mcurrencyControllerFindOne(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `mcurrencyControllerFindOne$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    mcurrencyControllerFindOne(params, context) {
        return this.mcurrencyControllerFindOne$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `mcurrencyControllerUpdate()` */
    static { this.McurrencyControllerUpdatePath = '/amims/mcurrency/mcurrency/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `mcurrencyControllerUpdate()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    mcurrencyControllerUpdate$Response(params, context) {
        return mcurrencyControllerUpdate(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `mcurrencyControllerUpdate$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    mcurrencyControllerUpdate(params, context) {
        return this.mcurrencyControllerUpdate$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `mcurrencyControllerRemove()` */
    static { this.McurrencyControllerRemovePath = '/amims/mcurrency/mcurrency/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `mcurrencyControllerRemove()` instead.
     *
     * This method doesn't expect any request body.
     */
    mcurrencyControllerRemove$Response(params, context) {
        return mcurrencyControllerRemove(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `mcurrencyControllerRemove$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    mcurrencyControllerRemove(params, context) {
        return this.mcurrencyControllerRemove$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: McurrencyService, deps: [{ token: i1.ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: McurrencyService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: McurrencyService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: i1.ApiConfiguration }, { type: i2.HttpClient }] });
//# sourceMappingURL=data:application/json;base64,
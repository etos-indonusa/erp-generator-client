/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
import { HttpClient } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { map } from 'rxjs/operators';
import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { workflowLogControllerCreate } from '../fn/workflow-log/workflow-log-controller-create';
import { workflowLogControllerFindAll } from '../fn/workflow-log/workflow-log-controller-find-all';
import { workflowLogControllerFindOne } from '../fn/workflow-log/workflow-log-controller-find-one';
import { workflowLogControllerRemove } from '../fn/workflow-log/workflow-log-controller-remove';
import { workflowLogControllerUpdate } from '../fn/workflow-log/workflow-log-controller-update';
import * as i0 from "@angular/core";
import * as i1 from "../api-configuration";
import * as i2 from "@angular/common/http";
export class WorkflowLogService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `workflowLogControllerFindAll()` */
    static { this.WorkflowLogControllerFindAllPath = '/auth/workflow_log/workflow_log'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `workflowLogControllerFindAll()` instead.
     *
     * This method doesn't expect any request body.
     */
    workflowLogControllerFindAll$Response(params, context) {
        return workflowLogControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `workflowLogControllerFindAll$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    workflowLogControllerFindAll(params, context) {
        return this.workflowLogControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `workflowLogControllerCreate()` */
    static { this.WorkflowLogControllerCreatePath = '/auth/workflow_log/workflow_log'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `workflowLogControllerCreate()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    workflowLogControllerCreate$Response(params, context) {
        return workflowLogControllerCreate(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `workflowLogControllerCreate$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    workflowLogControllerCreate(params, context) {
        return this.workflowLogControllerCreate$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `workflowLogControllerFindOne()` */
    static { this.WorkflowLogControllerFindOnePath = '/auth/workflow_log/workflow_log/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `workflowLogControllerFindOne()` instead.
     *
     * This method doesn't expect any request body.
     */
    workflowLogControllerFindOne$Response(params, context) {
        return workflowLogControllerFindOne(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `workflowLogControllerFindOne$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    workflowLogControllerFindOne(params, context) {
        return this.workflowLogControllerFindOne$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `workflowLogControllerUpdate()` */
    static { this.WorkflowLogControllerUpdatePath = '/auth/workflow_log/workflow_log/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `workflowLogControllerUpdate()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    workflowLogControllerUpdate$Response(params, context) {
        return workflowLogControllerUpdate(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `workflowLogControllerUpdate$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    workflowLogControllerUpdate(params, context) {
        return this.workflowLogControllerUpdate$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `workflowLogControllerRemove()` */
    static { this.WorkflowLogControllerRemovePath = '/auth/workflow_log/workflow_log/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `workflowLogControllerRemove()` instead.
     *
     * This method doesn't expect any request body.
     */
    workflowLogControllerRemove$Response(params, context) {
        return workflowLogControllerRemove(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `workflowLogControllerRemove$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    workflowLogControllerRemove(params, context) {
        return this.workflowLogControllerRemove$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: WorkflowLogService, deps: [{ token: i1.ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: WorkflowLogService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: WorkflowLogService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: i1.ApiConfiguration }, { type: i2.HttpClient }] });
//# sourceMappingURL=data:application/json;base64,
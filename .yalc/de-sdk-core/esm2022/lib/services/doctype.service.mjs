/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
import { HttpClient } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { map } from 'rxjs/operators';
import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { doctypeControllerCreate } from '../fn/doctype/doctype-controller-create';
import { doctypeControllerFindAll } from '../fn/doctype/doctype-controller-find-all';
import { doctypeControllerFindOne } from '../fn/doctype/doctype-controller-find-one';
import { doctypeControllerRemove } from '../fn/doctype/doctype-controller-remove';
import { doctypeControllerUpdate } from '../fn/doctype/doctype-controller-update';
import * as i0 from "@angular/core";
import * as i1 from "../api-configuration";
import * as i2 from "@angular/common/http";
export class DoctypeService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `doctypeControllerFindAll()` */
    static { this.DoctypeControllerFindAllPath = '/amims/doctype/doctype'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `doctypeControllerFindAll()` instead.
     *
     * This method doesn't expect any request body.
     */
    doctypeControllerFindAll$Response(params, context) {
        return doctypeControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `doctypeControllerFindAll$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    doctypeControllerFindAll(params, context) {
        return this.doctypeControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `doctypeControllerCreate()` */
    static { this.DoctypeControllerCreatePath = '/amims/doctype/doctype'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `doctypeControllerCreate()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    doctypeControllerCreate$Response(params, context) {
        return doctypeControllerCreate(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `doctypeControllerCreate$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    doctypeControllerCreate(params, context) {
        return this.doctypeControllerCreate$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `doctypeControllerFindOne()` */
    static { this.DoctypeControllerFindOnePath = '/amims/doctype/doctype/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `doctypeControllerFindOne()` instead.
     *
     * This method doesn't expect any request body.
     */
    doctypeControllerFindOne$Response(params, context) {
        return doctypeControllerFindOne(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `doctypeControllerFindOne$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    doctypeControllerFindOne(params, context) {
        return this.doctypeControllerFindOne$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `doctypeControllerUpdate()` */
    static { this.DoctypeControllerUpdatePath = '/amims/doctype/doctype/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `doctypeControllerUpdate()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    doctypeControllerUpdate$Response(params, context) {
        return doctypeControllerUpdate(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `doctypeControllerUpdate$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    doctypeControllerUpdate(params, context) {
        return this.doctypeControllerUpdate$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `doctypeControllerRemove()` */
    static { this.DoctypeControllerRemovePath = '/amims/doctype/doctype/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `doctypeControllerRemove()` instead.
     *
     * This method doesn't expect any request body.
     */
    doctypeControllerRemove$Response(params, context) {
        return doctypeControllerRemove(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `doctypeControllerRemove$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    doctypeControllerRemove(params, context) {
        return this.doctypeControllerRemove$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: DoctypeService, deps: [{ token: i1.ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: DoctypeService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: DoctypeService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: i1.ApiConfiguration }, { type: i2.HttpClient }] });
//# sourceMappingURL=data:application/json;base64,
/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
import { HttpClient } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { map } from 'rxjs/operators';
import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { engineerPrisReturnItemControllerCreate } from '../fn/engineer-pris-return-item/engineer-pris-return-item-controller-create';
import { engineerPrisReturnItemControllerFindAll } from '../fn/engineer-pris-return-item/engineer-pris-return-item-controller-find-all';
import { engineerPrisReturnItemControllerFindOne } from '../fn/engineer-pris-return-item/engineer-pris-return-item-controller-find-one';
import { engineerPrisReturnItemControllerRemove } from '../fn/engineer-pris-return-item/engineer-pris-return-item-controller-remove';
import { engineerPrisReturnItemControllerUpdate } from '../fn/engineer-pris-return-item/engineer-pris-return-item-controller-update';
import * as i0 from "@angular/core";
import * as i1 from "../api-configuration";
import * as i2 from "@angular/common/http";
export class EngineerPrisReturnItemService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `engineerPrisReturnItemControllerFindAll()` */
    static { this.EngineerPrisReturnItemControllerFindAllPath = '/amims/engineer_pris_return_item/engineer_pris_return_item'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `engineerPrisReturnItemControllerFindAll()` instead.
     *
     * This method doesn't expect any request body.
     */
    engineerPrisReturnItemControllerFindAll$Response(params, context) {
        return engineerPrisReturnItemControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `engineerPrisReturnItemControllerFindAll$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    engineerPrisReturnItemControllerFindAll(params, context) {
        return this.engineerPrisReturnItemControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `engineerPrisReturnItemControllerCreate()` */
    static { this.EngineerPrisReturnItemControllerCreatePath = '/amims/engineer_pris_return_item/engineer_pris_return_item'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `engineerPrisReturnItemControllerCreate()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    engineerPrisReturnItemControllerCreate$Response(params, context) {
        return engineerPrisReturnItemControllerCreate(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `engineerPrisReturnItemControllerCreate$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    engineerPrisReturnItemControllerCreate(params, context) {
        return this.engineerPrisReturnItemControllerCreate$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `engineerPrisReturnItemControllerFindOne()` */
    static { this.EngineerPrisReturnItemControllerFindOnePath = '/amims/engineer_pris_return_item/engineer_pris_return_item/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `engineerPrisReturnItemControllerFindOne()` instead.
     *
     * This method doesn't expect any request body.
     */
    engineerPrisReturnItemControllerFindOne$Response(params, context) {
        return engineerPrisReturnItemControllerFindOne(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `engineerPrisReturnItemControllerFindOne$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    engineerPrisReturnItemControllerFindOne(params, context) {
        return this.engineerPrisReturnItemControllerFindOne$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `engineerPrisReturnItemControllerUpdate()` */
    static { this.EngineerPrisReturnItemControllerUpdatePath = '/amims/engineer_pris_return_item/engineer_pris_return_item/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `engineerPrisReturnItemControllerUpdate()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    engineerPrisReturnItemControllerUpdate$Response(params, context) {
        return engineerPrisReturnItemControllerUpdate(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `engineerPrisReturnItemControllerUpdate$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    engineerPrisReturnItemControllerUpdate(params, context) {
        return this.engineerPrisReturnItemControllerUpdate$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `engineerPrisReturnItemControllerRemove()` */
    static { this.EngineerPrisReturnItemControllerRemovePath = '/amims/engineer_pris_return_item/engineer_pris_return_item/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `engineerPrisReturnItemControllerRemove()` instead.
     *
     * This method doesn't expect any request body.
     */
    engineerPrisReturnItemControllerRemove$Response(params, context) {
        return engineerPrisReturnItemControllerRemove(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `engineerPrisReturnItemControllerRemove$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    engineerPrisReturnItemControllerRemove(params, context) {
        return this.engineerPrisReturnItemControllerRemove$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: EngineerPrisReturnItemService, deps: [{ token: i1.ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: EngineerPrisReturnItemService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: EngineerPrisReturnItemService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: i1.ApiConfiguration }, { type: i2.HttpClient }] });
//# sourceMappingURL=data:application/json;base64,
/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
import { HttpClient } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { map } from 'rxjs/operators';
import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { maintenanceCodeControllerCreate } from '../fn/maintenance-code/maintenance-code-controller-create';
import { maintenanceCodeControllerFindAll } from '../fn/maintenance-code/maintenance-code-controller-find-all';
import { maintenanceCodeControllerFindOne } from '../fn/maintenance-code/maintenance-code-controller-find-one';
import { maintenanceCodeControllerRemove } from '../fn/maintenance-code/maintenance-code-controller-remove';
import { maintenanceCodeControllerUpdate } from '../fn/maintenance-code/maintenance-code-controller-update';
import * as i0 from "@angular/core";
import * as i1 from "../api-configuration";
import * as i2 from "@angular/common/http";
export class MaintenanceCodeService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `maintenanceCodeControllerFindAll()` */
    static { this.MaintenanceCodeControllerFindAllPath = '/amims/maintenance_code/maintenance_code'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `maintenanceCodeControllerFindAll()` instead.
     *
     * This method doesn't expect any request body.
     */
    maintenanceCodeControllerFindAll$Response(params, context) {
        return maintenanceCodeControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `maintenanceCodeControllerFindAll$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    maintenanceCodeControllerFindAll(params, context) {
        return this.maintenanceCodeControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `maintenanceCodeControllerCreate()` */
    static { this.MaintenanceCodeControllerCreatePath = '/amims/maintenance_code/maintenance_code'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `maintenanceCodeControllerCreate()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    maintenanceCodeControllerCreate$Response(params, context) {
        return maintenanceCodeControllerCreate(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `maintenanceCodeControllerCreate$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    maintenanceCodeControllerCreate(params, context) {
        return this.maintenanceCodeControllerCreate$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `maintenanceCodeControllerFindOne()` */
    static { this.MaintenanceCodeControllerFindOnePath = '/amims/maintenance_code/maintenance_code/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `maintenanceCodeControllerFindOne()` instead.
     *
     * This method doesn't expect any request body.
     */
    maintenanceCodeControllerFindOne$Response(params, context) {
        return maintenanceCodeControllerFindOne(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `maintenanceCodeControllerFindOne$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    maintenanceCodeControllerFindOne(params, context) {
        return this.maintenanceCodeControllerFindOne$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `maintenanceCodeControllerUpdate()` */
    static { this.MaintenanceCodeControllerUpdatePath = '/amims/maintenance_code/maintenance_code/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `maintenanceCodeControllerUpdate()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    maintenanceCodeControllerUpdate$Response(params, context) {
        return maintenanceCodeControllerUpdate(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `maintenanceCodeControllerUpdate$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    maintenanceCodeControllerUpdate(params, context) {
        return this.maintenanceCodeControllerUpdate$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `maintenanceCodeControllerRemove()` */
    static { this.MaintenanceCodeControllerRemovePath = '/amims/maintenance_code/maintenance_code/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `maintenanceCodeControllerRemove()` instead.
     *
     * This method doesn't expect any request body.
     */
    maintenanceCodeControllerRemove$Response(params, context) {
        return maintenanceCodeControllerRemove(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `maintenanceCodeControllerRemove$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    maintenanceCodeControllerRemove(params, context) {
        return this.maintenanceCodeControllerRemove$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: MaintenanceCodeService, deps: [{ token: i1.ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: MaintenanceCodeService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: MaintenanceCodeService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: i1.ApiConfiguration }, { type: i2.HttpClient }] });
//# sourceMappingURL=data:application/json;base64,
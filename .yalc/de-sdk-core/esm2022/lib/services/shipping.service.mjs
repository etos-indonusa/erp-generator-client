/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
import { HttpClient } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { map } from 'rxjs/operators';
import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { shippingControllerCreate } from '../fn/shipping/shipping-controller-create';
import { shippingControllerFindAll } from '../fn/shipping/shipping-controller-find-all';
import { shippingControllerFindOne } from '../fn/shipping/shipping-controller-find-one';
import { shippingControllerRemove } from '../fn/shipping/shipping-controller-remove';
import { shippingControllerUpdate } from '../fn/shipping/shipping-controller-update';
import * as i0 from "@angular/core";
import * as i1 from "../api-configuration";
import * as i2 from "@angular/common/http";
export class ShippingService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `shippingControllerFindAll()` */
    static { this.ShippingControllerFindAllPath = '/amims/shipping/shipping'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `shippingControllerFindAll()` instead.
     *
     * This method doesn't expect any request body.
     */
    shippingControllerFindAll$Response(params, context) {
        return shippingControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `shippingControllerFindAll$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    shippingControllerFindAll(params, context) {
        return this.shippingControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `shippingControllerCreate()` */
    static { this.ShippingControllerCreatePath = '/amims/shipping/shipping'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `shippingControllerCreate()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    shippingControllerCreate$Response(params, context) {
        return shippingControllerCreate(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `shippingControllerCreate$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    shippingControllerCreate(params, context) {
        return this.shippingControllerCreate$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `shippingControllerFindOne()` */
    static { this.ShippingControllerFindOnePath = '/amims/shipping/shipping/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `shippingControllerFindOne()` instead.
     *
     * This method doesn't expect any request body.
     */
    shippingControllerFindOne$Response(params, context) {
        return shippingControllerFindOne(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `shippingControllerFindOne$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    shippingControllerFindOne(params, context) {
        return this.shippingControllerFindOne$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `shippingControllerUpdate()` */
    static { this.ShippingControllerUpdatePath = '/amims/shipping/shipping/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `shippingControllerUpdate()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    shippingControllerUpdate$Response(params, context) {
        return shippingControllerUpdate(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `shippingControllerUpdate$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    shippingControllerUpdate(params, context) {
        return this.shippingControllerUpdate$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `shippingControllerRemove()` */
    static { this.ShippingControllerRemovePath = '/amims/shipping/shipping/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `shippingControllerRemove()` instead.
     *
     * This method doesn't expect any request body.
     */
    shippingControllerRemove$Response(params, context) {
        return shippingControllerRemove(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `shippingControllerRemove$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    shippingControllerRemove(params, context) {
        return this.shippingControllerRemove$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: ShippingService, deps: [{ token: i1.ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: ShippingService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: ShippingService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: i1.ApiConfiguration }, { type: i2.HttpClient }] });
//# sourceMappingURL=data:application/json;base64,
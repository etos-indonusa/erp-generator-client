/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
import { HttpClient } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { map } from 'rxjs/operators';
import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { usersControllerCreate } from '../fn/users/users-controller-create';
import { usersControllerFindAll } from '../fn/users/users-controller-find-all';
import { usersControllerFindOne } from '../fn/users/users-controller-find-one';
import { usersControllerRemove } from '../fn/users/users-controller-remove';
import { usersControllerUpdate } from '../fn/users/users-controller-update';
import * as i0 from "@angular/core";
import * as i1 from "../api-configuration";
import * as i2 from "@angular/common/http";
export class UsersService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `usersControllerFindAll()` */
    static { this.UsersControllerFindAllPath = '/auth/users/users'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `usersControllerFindAll()` instead.
     *
     * This method doesn't expect any request body.
     */
    usersControllerFindAll$Response(params, context) {
        return usersControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `usersControllerFindAll$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    usersControllerFindAll(params, context) {
        return this.usersControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `usersControllerCreate()` */
    static { this.UsersControllerCreatePath = '/auth/users/users'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `usersControllerCreate()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    usersControllerCreate$Response(params, context) {
        return usersControllerCreate(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `usersControllerCreate$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    usersControllerCreate(params, context) {
        return this.usersControllerCreate$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `usersControllerFindOne()` */
    static { this.UsersControllerFindOnePath = '/auth/users/users/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `usersControllerFindOne()` instead.
     *
     * This method doesn't expect any request body.
     */
    usersControllerFindOne$Response(params, context) {
        return usersControllerFindOne(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `usersControllerFindOne$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    usersControllerFindOne(params, context) {
        return this.usersControllerFindOne$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `usersControllerUpdate()` */
    static { this.UsersControllerUpdatePath = '/auth/users/users/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `usersControllerUpdate()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    usersControllerUpdate$Response(params, context) {
        return usersControllerUpdate(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `usersControllerUpdate$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    usersControllerUpdate(params, context) {
        return this.usersControllerUpdate$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `usersControllerRemove()` */
    static { this.UsersControllerRemovePath = '/auth/users/users/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `usersControllerRemove()` instead.
     *
     * This method doesn't expect any request body.
     */
    usersControllerRemove$Response(params, context) {
        return usersControllerRemove(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `usersControllerRemove$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    usersControllerRemove(params, context) {
        return this.usersControllerRemove$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: UsersService, deps: [{ token: i1.ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: UsersService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: UsersService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: i1.ApiConfiguration }, { type: i2.HttpClient }] });
//# sourceMappingURL=data:application/json;base64,
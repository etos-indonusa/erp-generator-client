/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
import { HttpClient } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { map } from 'rxjs/operators';
import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { techLogEngineCheckControllerCreate } from '../fn/tech-log-engine-check/tech-log-engine-check-controller-create';
import { techLogEngineCheckControllerFindAll } from '../fn/tech-log-engine-check/tech-log-engine-check-controller-find-all';
import { techLogEngineCheckControllerFindOne } from '../fn/tech-log-engine-check/tech-log-engine-check-controller-find-one';
import { techLogEngineCheckControllerRemove } from '../fn/tech-log-engine-check/tech-log-engine-check-controller-remove';
import { techLogEngineCheckControllerUpdate } from '../fn/tech-log-engine-check/tech-log-engine-check-controller-update';
import * as i0 from "@angular/core";
import * as i1 from "../api-configuration";
import * as i2 from "@angular/common/http";
export class TechLogEngineCheckService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `techLogEngineCheckControllerFindAll()` */
    static { this.TechLogEngineCheckControllerFindAllPath = '/amims/tech_log_engine_check/tech_log_engine_check'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `techLogEngineCheckControllerFindAll()` instead.
     *
     * This method doesn't expect any request body.
     */
    techLogEngineCheckControllerFindAll$Response(params, context) {
        return techLogEngineCheckControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `techLogEngineCheckControllerFindAll$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    techLogEngineCheckControllerFindAll(params, context) {
        return this.techLogEngineCheckControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `techLogEngineCheckControllerCreate()` */
    static { this.TechLogEngineCheckControllerCreatePath = '/amims/tech_log_engine_check/tech_log_engine_check'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `techLogEngineCheckControllerCreate()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    techLogEngineCheckControllerCreate$Response(params, context) {
        return techLogEngineCheckControllerCreate(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `techLogEngineCheckControllerCreate$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    techLogEngineCheckControllerCreate(params, context) {
        return this.techLogEngineCheckControllerCreate$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `techLogEngineCheckControllerFindOne()` */
    static { this.TechLogEngineCheckControllerFindOnePath = '/amims/tech_log_engine_check/tech_log_engine_check/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `techLogEngineCheckControllerFindOne()` instead.
     *
     * This method doesn't expect any request body.
     */
    techLogEngineCheckControllerFindOne$Response(params, context) {
        return techLogEngineCheckControllerFindOne(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `techLogEngineCheckControllerFindOne$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    techLogEngineCheckControllerFindOne(params, context) {
        return this.techLogEngineCheckControllerFindOne$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `techLogEngineCheckControllerUpdate()` */
    static { this.TechLogEngineCheckControllerUpdatePath = '/amims/tech_log_engine_check/tech_log_engine_check/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `techLogEngineCheckControllerUpdate()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    techLogEngineCheckControllerUpdate$Response(params, context) {
        return techLogEngineCheckControllerUpdate(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `techLogEngineCheckControllerUpdate$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    techLogEngineCheckControllerUpdate(params, context) {
        return this.techLogEngineCheckControllerUpdate$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `techLogEngineCheckControllerRemove()` */
    static { this.TechLogEngineCheckControllerRemovePath = '/amims/tech_log_engine_check/tech_log_engine_check/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `techLogEngineCheckControllerRemove()` instead.
     *
     * This method doesn't expect any request body.
     */
    techLogEngineCheckControllerRemove$Response(params, context) {
        return techLogEngineCheckControllerRemove(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `techLogEngineCheckControllerRemove$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    techLogEngineCheckControllerRemove(params, context) {
        return this.techLogEngineCheckControllerRemove$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: TechLogEngineCheckService, deps: [{ token: i1.ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: TechLogEngineCheckService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: TechLogEngineCheckService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: i1.ApiConfiguration }, { type: i2.HttpClient }] });
//# sourceMappingURL=data:application/json;base64,
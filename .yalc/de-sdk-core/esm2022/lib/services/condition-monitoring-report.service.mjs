/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
import { HttpClient } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { map } from 'rxjs/operators';
import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { conditionMonitoringReportControllerFindAll } from '../fn/condition-monitoring-report/condition-monitoring-report-controller-find-all';
import { conditionMonitoringReportControllerFindOne } from '../fn/condition-monitoring-report/condition-monitoring-report-controller-find-one';
import * as i0 from "@angular/core";
import * as i1 from "../api-configuration";
import * as i2 from "@angular/common/http";
export class ConditionMonitoringReportService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `conditionMonitoringReportControllerFindAll()` */
    static { this.ConditionMonitoringReportControllerFindAllPath = '/amims/condition_monitoring/condition_monitoring_report/list'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `conditionMonitoringReportControllerFindAll()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    conditionMonitoringReportControllerFindAll$Response(params, context) {
        return conditionMonitoringReportControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `conditionMonitoringReportControllerFindAll$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    conditionMonitoringReportControllerFindAll(params, context) {
        return this.conditionMonitoringReportControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `conditionMonitoringReportControllerFindOne()` */
    static { this.ConditionMonitoringReportControllerFindOnePath = '/amims/condition_monitoring/condition_monitoring_report/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `conditionMonitoringReportControllerFindOne()` instead.
     *
     * This method doesn't expect any request body.
     */
    conditionMonitoringReportControllerFindOne$Response(params, context) {
        return conditionMonitoringReportControllerFindOne(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `conditionMonitoringReportControllerFindOne$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    conditionMonitoringReportControllerFindOne(params, context) {
        return this.conditionMonitoringReportControllerFindOne$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: ConditionMonitoringReportService, deps: [{ token: i1.ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: ConditionMonitoringReportService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: ConditionMonitoringReportService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: i1.ApiConfiguration }, { type: i2.HttpClient }] });
//# sourceMappingURL=data:application/json;base64,
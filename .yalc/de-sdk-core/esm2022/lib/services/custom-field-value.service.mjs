/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
import { HttpClient } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { map } from 'rxjs/operators';
import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { customFieldValueControllerCreate } from '../fn/custom-field-value/custom-field-value-controller-create';
import { customFieldValueControllerFindAll } from '../fn/custom-field-value/custom-field-value-controller-find-all';
import { customFieldValueControllerFindOne } from '../fn/custom-field-value/custom-field-value-controller-find-one';
import { customFieldValueControllerRemove } from '../fn/custom-field-value/custom-field-value-controller-remove';
import { customFieldValueControllerUpdate } from '../fn/custom-field-value/custom-field-value-controller-update';
import * as i0 from "@angular/core";
import * as i1 from "../api-configuration";
import * as i2 from "@angular/common/http";
export class CustomFieldValueService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `customFieldValueControllerFindAll()` */
    static { this.CustomFieldValueControllerFindAllPath = '/auth/custom_field_value/custom_field_value'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `customFieldValueControllerFindAll()` instead.
     *
     * This method doesn't expect any request body.
     */
    customFieldValueControllerFindAll$Response(params, context) {
        return customFieldValueControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `customFieldValueControllerFindAll$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    customFieldValueControllerFindAll(params, context) {
        return this.customFieldValueControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `customFieldValueControllerCreate()` */
    static { this.CustomFieldValueControllerCreatePath = '/auth/custom_field_value/custom_field_value'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `customFieldValueControllerCreate()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    customFieldValueControllerCreate$Response(params, context) {
        return customFieldValueControllerCreate(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `customFieldValueControllerCreate$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    customFieldValueControllerCreate(params, context) {
        return this.customFieldValueControllerCreate$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `customFieldValueControllerFindOne()` */
    static { this.CustomFieldValueControllerFindOnePath = '/auth/custom_field_value/custom_field_value/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `customFieldValueControllerFindOne()` instead.
     *
     * This method doesn't expect any request body.
     */
    customFieldValueControllerFindOne$Response(params, context) {
        return customFieldValueControllerFindOne(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `customFieldValueControllerFindOne$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    customFieldValueControllerFindOne(params, context) {
        return this.customFieldValueControllerFindOne$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `customFieldValueControllerUpdate()` */
    static { this.CustomFieldValueControllerUpdatePath = '/auth/custom_field_value/custom_field_value/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `customFieldValueControllerUpdate()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    customFieldValueControllerUpdate$Response(params, context) {
        return customFieldValueControllerUpdate(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `customFieldValueControllerUpdate$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    customFieldValueControllerUpdate(params, context) {
        return this.customFieldValueControllerUpdate$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `customFieldValueControllerRemove()` */
    static { this.CustomFieldValueControllerRemovePath = '/auth/custom_field_value/custom_field_value/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `customFieldValueControllerRemove()` instead.
     *
     * This method doesn't expect any request body.
     */
    customFieldValueControllerRemove$Response(params, context) {
        return customFieldValueControllerRemove(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `customFieldValueControllerRemove$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    customFieldValueControllerRemove(params, context) {
        return this.customFieldValueControllerRemove$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: CustomFieldValueService, deps: [{ token: i1.ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: CustomFieldValueService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: CustomFieldValueService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: i1.ApiConfiguration }, { type: i2.HttpClient }] });
//# sourceMappingURL=data:application/json;base64,
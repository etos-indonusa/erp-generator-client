/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
import { HttpClient } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { map } from 'rxjs/operators';
import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { locationFlightControllerCreate } from '../fn/location-flight/location-flight-controller-create';
import { locationFlightControllerFindAll } from '../fn/location-flight/location-flight-controller-find-all';
import { locationFlightControllerFindOne } from '../fn/location-flight/location-flight-controller-find-one';
import { locationFlightControllerRemove } from '../fn/location-flight/location-flight-controller-remove';
import { locationFlightControllerUpdate } from '../fn/location-flight/location-flight-controller-update';
import * as i0 from "@angular/core";
import * as i1 from "../api-configuration";
import * as i2 from "@angular/common/http";
export class LocationFlightService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `locationFlightControllerFindAll()` */
    static { this.LocationFlightControllerFindAllPath = '/amims/location_flight/location_flight'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `locationFlightControllerFindAll()` instead.
     *
     * This method doesn't expect any request body.
     */
    locationFlightControllerFindAll$Response(params, context) {
        return locationFlightControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `locationFlightControllerFindAll$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    locationFlightControllerFindAll(params, context) {
        return this.locationFlightControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `locationFlightControllerCreate()` */
    static { this.LocationFlightControllerCreatePath = '/amims/location_flight/location_flight'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `locationFlightControllerCreate()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    locationFlightControllerCreate$Response(params, context) {
        return locationFlightControllerCreate(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `locationFlightControllerCreate$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    locationFlightControllerCreate(params, context) {
        return this.locationFlightControllerCreate$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `locationFlightControllerFindOne()` */
    static { this.LocationFlightControllerFindOnePath = '/amims/location_flight/location_flight/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `locationFlightControllerFindOne()` instead.
     *
     * This method doesn't expect any request body.
     */
    locationFlightControllerFindOne$Response(params, context) {
        return locationFlightControllerFindOne(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `locationFlightControllerFindOne$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    locationFlightControllerFindOne(params, context) {
        return this.locationFlightControllerFindOne$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `locationFlightControllerUpdate()` */
    static { this.LocationFlightControllerUpdatePath = '/amims/location_flight/location_flight/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `locationFlightControllerUpdate()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    locationFlightControllerUpdate$Response(params, context) {
        return locationFlightControllerUpdate(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `locationFlightControllerUpdate$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    locationFlightControllerUpdate(params, context) {
        return this.locationFlightControllerUpdate$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `locationFlightControllerRemove()` */
    static { this.LocationFlightControllerRemovePath = '/amims/location_flight/location_flight/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `locationFlightControllerRemove()` instead.
     *
     * This method doesn't expect any request body.
     */
    locationFlightControllerRemove$Response(params, context) {
        return locationFlightControllerRemove(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `locationFlightControllerRemove$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    locationFlightControllerRemove(params, context) {
        return this.locationFlightControllerRemove$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: LocationFlightService, deps: [{ token: i1.ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: LocationFlightService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: LocationFlightService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: i1.ApiConfiguration }, { type: i2.HttpClient }] });
//# sourceMappingURL=data:application/json;base64,
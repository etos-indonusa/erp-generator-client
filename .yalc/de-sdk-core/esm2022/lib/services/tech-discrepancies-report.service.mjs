/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
import { HttpClient } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { map } from 'rxjs/operators';
import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { techDiscrepanciesReportControllerFindAll } from '../fn/tech-discrepancies-report/tech-discrepancies-report-controller-find-all';
import { techDiscrepanciesReportControllerFindOne } from '../fn/tech-discrepancies-report/tech-discrepancies-report-controller-find-one';
import * as i0 from "@angular/core";
import * as i1 from "../api-configuration";
import * as i2 from "@angular/common/http";
export class TechDiscrepanciesReportService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `techDiscrepanciesReportControllerFindAll()` */
    static { this.TechDiscrepanciesReportControllerFindAllPath = '/amims/tech_discrepancies/tech_discrepancies_report/list'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `techDiscrepanciesReportControllerFindAll()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    techDiscrepanciesReportControllerFindAll$Response(params, context) {
        return techDiscrepanciesReportControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `techDiscrepanciesReportControllerFindAll$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    techDiscrepanciesReportControllerFindAll(params, context) {
        return this.techDiscrepanciesReportControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `techDiscrepanciesReportControllerFindOne()` */
    static { this.TechDiscrepanciesReportControllerFindOnePath = '/amims/tech_discrepancies/tech_discrepancies_report/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `techDiscrepanciesReportControllerFindOne()` instead.
     *
     * This method doesn't expect any request body.
     */
    techDiscrepanciesReportControllerFindOne$Response(params, context) {
        return techDiscrepanciesReportControllerFindOne(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `techDiscrepanciesReportControllerFindOne$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    techDiscrepanciesReportControllerFindOne(params, context) {
        return this.techDiscrepanciesReportControllerFindOne$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: TechDiscrepanciesReportService, deps: [{ token: i1.ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: TechDiscrepanciesReportService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: TechDiscrepanciesReportService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: i1.ApiConfiguration }, { type: i2.HttpClient }] });
//# sourceMappingURL=data:application/json;base64,
/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
import { HttpClient } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { map } from 'rxjs/operators';
import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { workflowApplyControllerApplyStep } from '../fn/workflow-apply/workflow-apply-controller-apply-step';
import * as i0 from "@angular/core";
import * as i1 from "../api-configuration";
import * as i2 from "@angular/common/http";
export class WorkflowApplyService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `workflowApplyControllerApplyStep()` */
    static { this.WorkflowApplyControllerApplyStepPath = '/auth/workflow/workflow/apply'; }
    /**
     * Apply workflow step.
     *
     *
     *
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `workflowApplyControllerApplyStep()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    workflowApplyControllerApplyStep$Response(params, context) {
        return workflowApplyControllerApplyStep(this.http, this.rootUrl, params, context);
    }
    /**
     * Apply workflow step.
     *
     *
     *
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `workflowApplyControllerApplyStep$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    workflowApplyControllerApplyStep(params, context) {
        return this.workflowApplyControllerApplyStep$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: WorkflowApplyService, deps: [{ token: i1.ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: WorkflowApplyService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: WorkflowApplyService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: i1.ApiConfiguration }, { type: i2.HttpClient }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid29ya2Zsb3ctYXBwbHkuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL3Nka2NvcmUvc3JjL2xpYi9zZXJ2aWNlcy93b3JrZmxvdy1hcHBseS5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQixvQkFBb0I7QUFDcEIsbURBQW1EO0FBRW5ELE9BQU8sRUFBRSxVQUFVLEVBQWUsTUFBTSxzQkFBc0IsQ0FBQztBQUMvRCxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRTNDLE9BQU8sRUFBRSxHQUFHLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUVyQyxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFDOUMsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0sc0JBQXNCLENBQUM7QUFHeEQsT0FBTyxFQUFFLGdDQUFnQyxFQUFFLE1BQU0sMkRBQTJELENBQUM7Ozs7QUFJN0csTUFBTSxPQUFPLG9CQUFxQixTQUFRLFdBQVc7SUFDbkQsWUFBWSxNQUF3QixFQUFFLElBQWdCO1FBQ3BELEtBQUssQ0FBQyxNQUFNLEVBQUUsSUFBSSxDQUFDLENBQUM7SUFDdEIsQ0FBQztJQUVELG1FQUFtRTthQUNuRCx5Q0FBb0MsR0FBRywrQkFBK0IsQUFBbEMsQ0FBbUM7SUFFdkY7Ozs7Ozs7OztPQVNHO0lBQ0gseUNBQXlDLENBQUMsTUFBK0MsRUFBRSxPQUFxQjtRQUM5RyxPQUFPLGdDQUFnQyxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLE9BQU8sRUFBRSxNQUFNLEVBQUUsT0FBTyxDQUFDLENBQUM7SUFDcEYsQ0FBQztJQUVEOzs7Ozs7Ozs7T0FTRztJQUNILGdDQUFnQyxDQUFDLE1BQStDLEVBQUUsT0FBcUI7UUFDckcsT0FBTyxJQUFJLENBQUMseUNBQXlDLENBQUMsTUFBTSxFQUFFLE9BQU8sQ0FBQyxDQUFDLElBQUksQ0FDekUsR0FBRyxDQUFDLENBQUMsQ0FBMkIsRUFBUSxFQUFFLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUNuRCxDQUFDO0lBQ0osQ0FBQzsrR0FwQ1Usb0JBQW9CO21IQUFwQixvQkFBb0IsY0FEUCxNQUFNOzs0RkFDbkIsb0JBQW9CO2tCQURoQyxVQUFVO21CQUFDLEVBQUUsVUFBVSxFQUFFLE1BQU0sRUFBRSIsInNvdXJjZXNDb250ZW50IjpbIi8qIHRzbGludDpkaXNhYmxlICovXG4vKiBlc2xpbnQtZGlzYWJsZSAqL1xuLyogQ29kZSBnZW5lcmF0ZWQgYnkgbmctb3BlbmFwaS1nZW4gRE8gTk9UIEVESVQuICovXG5cbmltcG9ydCB7IEh0dHBDbGllbnQsIEh0dHBDb250ZXh0IH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uL2h0dHAnO1xuaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgbWFwIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuXG5pbXBvcnQgeyBCYXNlU2VydmljZSB9IGZyb20gJy4uL2Jhc2Utc2VydmljZSc7XG5pbXBvcnQgeyBBcGlDb25maWd1cmF0aW9uIH0gZnJvbSAnLi4vYXBpLWNvbmZpZ3VyYXRpb24nO1xuaW1wb3J0IHsgU3RyaWN0SHR0cFJlc3BvbnNlIH0gZnJvbSAnLi4vc3RyaWN0LWh0dHAtcmVzcG9uc2UnO1xuXG5pbXBvcnQgeyB3b3JrZmxvd0FwcGx5Q29udHJvbGxlckFwcGx5U3RlcCB9IGZyb20gJy4uL2ZuL3dvcmtmbG93LWFwcGx5L3dvcmtmbG93LWFwcGx5LWNvbnRyb2xsZXItYXBwbHktc3RlcCc7XG5pbXBvcnQgeyBXb3JrZmxvd0FwcGx5Q29udHJvbGxlckFwcGx5U3RlcCRQYXJhbXMgfSBmcm9tICcuLi9mbi93b3JrZmxvdy1hcHBseS93b3JrZmxvdy1hcHBseS1jb250cm9sbGVyLWFwcGx5LXN0ZXAnO1xuXG5ASW5qZWN0YWJsZSh7IHByb3ZpZGVkSW46ICdyb290JyB9KVxuZXhwb3J0IGNsYXNzIFdvcmtmbG93QXBwbHlTZXJ2aWNlIGV4dGVuZHMgQmFzZVNlcnZpY2Uge1xuICBjb25zdHJ1Y3Rvcihjb25maWc6IEFwaUNvbmZpZ3VyYXRpb24sIGh0dHA6IEh0dHBDbGllbnQpIHtcbiAgICBzdXBlcihjb25maWcsIGh0dHApO1xuICB9XG5cbiAgLyoqIFBhdGggcGFydCBmb3Igb3BlcmF0aW9uIGB3b3JrZmxvd0FwcGx5Q29udHJvbGxlckFwcGx5U3RlcCgpYCAqL1xuICBzdGF0aWMgcmVhZG9ubHkgV29ya2Zsb3dBcHBseUNvbnRyb2xsZXJBcHBseVN0ZXBQYXRoID0gJy9hdXRoL3dvcmtmbG93L3dvcmtmbG93L2FwcGx5JztcblxuICAvKipcbiAgICogQXBwbHkgd29ya2Zsb3cgc3RlcC5cbiAgICpcbiAgICpcbiAgICpcbiAgICogVGhpcyBtZXRob2QgcHJvdmlkZXMgYWNjZXNzIHRvIHRoZSBmdWxsIGBIdHRwUmVzcG9uc2VgLCBhbGxvd2luZyBhY2Nlc3MgdG8gcmVzcG9uc2UgaGVhZGVycy5cbiAgICogVG8gYWNjZXNzIG9ubHkgdGhlIHJlc3BvbnNlIGJvZHksIHVzZSBgd29ya2Zsb3dBcHBseUNvbnRyb2xsZXJBcHBseVN0ZXAoKWAgaW5zdGVhZC5cbiAgICpcbiAgICogVGhpcyBtZXRob2Qgc2VuZHMgYGFwcGxpY2F0aW9uL2pzb25gIGFuZCBoYW5kbGVzIHJlcXVlc3QgYm9keSBvZiB0eXBlIGBhcHBsaWNhdGlvbi9qc29uYC5cbiAgICovXG4gIHdvcmtmbG93QXBwbHlDb250cm9sbGVyQXBwbHlTdGVwJFJlc3BvbnNlKHBhcmFtczogV29ya2Zsb3dBcHBseUNvbnRyb2xsZXJBcHBseVN0ZXAkUGFyYW1zLCBjb250ZXh0PzogSHR0cENvbnRleHQpOiBPYnNlcnZhYmxlPFN0cmljdEh0dHBSZXNwb25zZTx2b2lkPj4ge1xuICAgIHJldHVybiB3b3JrZmxvd0FwcGx5Q29udHJvbGxlckFwcGx5U3RlcCh0aGlzLmh0dHAsIHRoaXMucm9vdFVybCwgcGFyYW1zLCBjb250ZXh0KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBBcHBseSB3b3JrZmxvdyBzdGVwLlxuICAgKlxuICAgKlxuICAgKlxuICAgKiBUaGlzIG1ldGhvZCBwcm92aWRlcyBhY2Nlc3Mgb25seSB0byB0aGUgcmVzcG9uc2UgYm9keS5cbiAgICogVG8gYWNjZXNzIHRoZSBmdWxsIHJlc3BvbnNlIChmb3IgaGVhZGVycywgZm9yIGV4YW1wbGUpLCBgd29ya2Zsb3dBcHBseUNvbnRyb2xsZXJBcHBseVN0ZXAkUmVzcG9uc2UoKWAgaW5zdGVhZC5cbiAgICpcbiAgICogVGhpcyBtZXRob2Qgc2VuZHMgYGFwcGxpY2F0aW9uL2pzb25gIGFuZCBoYW5kbGVzIHJlcXVlc3QgYm9keSBvZiB0eXBlIGBhcHBsaWNhdGlvbi9qc29uYC5cbiAgICovXG4gIHdvcmtmbG93QXBwbHlDb250cm9sbGVyQXBwbHlTdGVwKHBhcmFtczogV29ya2Zsb3dBcHBseUNvbnRyb2xsZXJBcHBseVN0ZXAkUGFyYW1zLCBjb250ZXh0PzogSHR0cENvbnRleHQpOiBPYnNlcnZhYmxlPHZvaWQ+IHtcbiAgICByZXR1cm4gdGhpcy53b3JrZmxvd0FwcGx5Q29udHJvbGxlckFwcGx5U3RlcCRSZXNwb25zZShwYXJhbXMsIGNvbnRleHQpLnBpcGUoXG4gICAgICBtYXAoKHI6IFN0cmljdEh0dHBSZXNwb25zZTx2b2lkPik6IHZvaWQgPT4gci5ib2R5KVxuICAgICk7XG4gIH1cblxufVxuIl19
/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
import { HttpClient } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { map } from 'rxjs/operators';
import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { contractSiteWidgetControllerFindAll } from '../fn/contract-site-widget/contract-site-widget-controller-find-all';
import * as i0 from "@angular/core";
import * as i1 from "../api-configuration";
import * as i2 from "@angular/common/http";
export class ContractSiteWidgetService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `contractSiteWidgetControllerFindAll()` */
    static { this.ContractSiteWidgetControllerFindAllPath = '/pelanggan/contract_site/contract_site_widget'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `contractSiteWidgetControllerFindAll()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    contractSiteWidgetControllerFindAll$Response(params, context) {
        return contractSiteWidgetControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `contractSiteWidgetControllerFindAll$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    contractSiteWidgetControllerFindAll(params, context) {
        return this.contractSiteWidgetControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: ContractSiteWidgetService, deps: [{ token: i1.ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: ContractSiteWidgetService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: ContractSiteWidgetService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: i1.ApiConfiguration }, { type: i2.HttpClient }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29udHJhY3Qtc2l0ZS13aWRnZXQuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL3Nka2NvcmUvc3JjL2xpYi9zZXJ2aWNlcy9jb250cmFjdC1zaXRlLXdpZGdldC5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQixvQkFBb0I7QUFDcEIsbURBQW1EO0FBRW5ELE9BQU8sRUFBRSxVQUFVLEVBQWUsTUFBTSxzQkFBc0IsQ0FBQztBQUMvRCxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRTNDLE9BQU8sRUFBRSxHQUFHLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUVyQyxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFDOUMsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0sc0JBQXNCLENBQUM7QUFHeEQsT0FBTyxFQUFFLG1DQUFtQyxFQUFFLE1BQU0scUVBQXFFLENBQUM7Ozs7QUFLMUgsTUFBTSxPQUFPLHlCQUEwQixTQUFRLFdBQVc7SUFDeEQsWUFBWSxNQUF3QixFQUFFLElBQWdCO1FBQ3BELEtBQUssQ0FBQyxNQUFNLEVBQUUsSUFBSSxDQUFDLENBQUM7SUFDdEIsQ0FBQztJQUVELHNFQUFzRTthQUN0RCw0Q0FBdUMsR0FBRywrQ0FBK0MsQUFBbEQsQ0FBbUQ7SUFFMUc7Ozs7O09BS0c7SUFDSCw0Q0FBNEMsQ0FBQyxNQUFrRCxFQUFFLE9BQXFCO1FBTXBILE9BQU8sbUNBQW1DLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsT0FBTyxFQUFFLE1BQU0sRUFBRSxPQUFPLENBQUMsQ0FBQztJQUN2RixDQUFDO0lBRUQ7Ozs7O09BS0c7SUFDSCxtQ0FBbUMsQ0FBQyxNQUFrRCxFQUFFLE9BQXFCO1FBTTNHLE9BQU8sSUFBSSxDQUFDLDRDQUE0QyxDQUFDLE1BQU0sRUFBRSxPQUFPLENBQUMsQ0FBQyxJQUFJLENBQzVFLEdBQUcsQ0FBQyxDQUFDLENBS1QsRUFLQSxFQUFFLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUNQLENBQUM7SUFDSixDQUFDOytHQWhEVSx5QkFBeUI7bUhBQXpCLHlCQUF5QixjQURaLE1BQU07OzRGQUNuQix5QkFBeUI7a0JBRHJDLFVBQVU7bUJBQUMsRUFBRSxVQUFVLEVBQUUsTUFBTSxFQUFFIiwic291cmNlc0NvbnRlbnQiOlsiLyogdHNsaW50OmRpc2FibGUgKi9cbi8qIGVzbGludC1kaXNhYmxlICovXG4vKiBDb2RlIGdlbmVyYXRlZCBieSBuZy1vcGVuYXBpLWdlbiBETyBOT1QgRURJVC4gKi9cblxuaW1wb3J0IHsgSHR0cENsaWVudCwgSHR0cENvbnRleHQgfSBmcm9tICdAYW5ndWxhci9jb21tb24vaHR0cCc7XG5pbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBtYXAgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5cbmltcG9ydCB7IEJhc2VTZXJ2aWNlIH0gZnJvbSAnLi4vYmFzZS1zZXJ2aWNlJztcbmltcG9ydCB7IEFwaUNvbmZpZ3VyYXRpb24gfSBmcm9tICcuLi9hcGktY29uZmlndXJhdGlvbic7XG5pbXBvcnQgeyBTdHJpY3RIdHRwUmVzcG9uc2UgfSBmcm9tICcuLi9zdHJpY3QtaHR0cC1yZXNwb25zZSc7XG5cbmltcG9ydCB7IGNvbnRyYWN0U2l0ZVdpZGdldENvbnRyb2xsZXJGaW5kQWxsIH0gZnJvbSAnLi4vZm4vY29udHJhY3Qtc2l0ZS13aWRnZXQvY29udHJhY3Qtc2l0ZS13aWRnZXQtY29udHJvbGxlci1maW5kLWFsbCc7XG5pbXBvcnQgeyBDb250cmFjdFNpdGVXaWRnZXRDb250cm9sbGVyRmluZEFsbCRQYXJhbXMgfSBmcm9tICcuLi9mbi9jb250cmFjdC1zaXRlLXdpZGdldC9jb250cmFjdC1zaXRlLXdpZGdldC1jb250cm9sbGVyLWZpbmQtYWxsJztcbmltcG9ydCB7IFBlbGFuZ2dhbkNvbnRyYWN0U2l0ZVdpZGdldER0byB9IGZyb20gJy4uL21vZGVscy9wZWxhbmdnYW4tY29udHJhY3Qtc2l0ZS13aWRnZXQtZHRvJztcblxuQEluamVjdGFibGUoeyBwcm92aWRlZEluOiAncm9vdCcgfSlcbmV4cG9ydCBjbGFzcyBDb250cmFjdFNpdGVXaWRnZXRTZXJ2aWNlIGV4dGVuZHMgQmFzZVNlcnZpY2Uge1xuICBjb25zdHJ1Y3Rvcihjb25maWc6IEFwaUNvbmZpZ3VyYXRpb24sIGh0dHA6IEh0dHBDbGllbnQpIHtcbiAgICBzdXBlcihjb25maWcsIGh0dHApO1xuICB9XG5cbiAgLyoqIFBhdGggcGFydCBmb3Igb3BlcmF0aW9uIGBjb250cmFjdFNpdGVXaWRnZXRDb250cm9sbGVyRmluZEFsbCgpYCAqL1xuICBzdGF0aWMgcmVhZG9ubHkgQ29udHJhY3RTaXRlV2lkZ2V0Q29udHJvbGxlckZpbmRBbGxQYXRoID0gJy9wZWxhbmdnYW4vY29udHJhY3Rfc2l0ZS9jb250cmFjdF9zaXRlX3dpZGdldCc7XG5cbiAgLyoqXG4gICAqIFRoaXMgbWV0aG9kIHByb3ZpZGVzIGFjY2VzcyB0byB0aGUgZnVsbCBgSHR0cFJlc3BvbnNlYCwgYWxsb3dpbmcgYWNjZXNzIHRvIHJlc3BvbnNlIGhlYWRlcnMuXG4gICAqIFRvIGFjY2VzcyBvbmx5IHRoZSByZXNwb25zZSBib2R5LCB1c2UgYGNvbnRyYWN0U2l0ZVdpZGdldENvbnRyb2xsZXJGaW5kQWxsKClgIGluc3RlYWQuXG4gICAqXG4gICAqIFRoaXMgbWV0aG9kIHNlbmRzIGBhcHBsaWNhdGlvbi9qc29uYCBhbmQgaGFuZGxlcyByZXF1ZXN0IGJvZHkgb2YgdHlwZSBgYXBwbGljYXRpb24vanNvbmAuXG4gICAqL1xuICBjb250cmFjdFNpdGVXaWRnZXRDb250cm9sbGVyRmluZEFsbCRSZXNwb25zZShwYXJhbXM6IENvbnRyYWN0U2l0ZVdpZGdldENvbnRyb2xsZXJGaW5kQWxsJFBhcmFtcywgY29udGV4dD86IEh0dHBDb250ZXh0KTogT2JzZXJ2YWJsZTxTdHJpY3RIdHRwUmVzcG9uc2U8e1xuJ2NvZGUnPzogbnVtYmVyO1xuJ3Blc2FuJz86IHN0cmluZztcbidkYXRhJz86IEFycmF5PFBlbGFuZ2dhbkNvbnRyYWN0U2l0ZVdpZGdldER0bz47XG4ndG90YWwnPzogbnVtYmVyO1xufT4+IHtcbiAgICByZXR1cm4gY29udHJhY3RTaXRlV2lkZ2V0Q29udHJvbGxlckZpbmRBbGwodGhpcy5odHRwLCB0aGlzLnJvb3RVcmwsIHBhcmFtcywgY29udGV4dCk7XG4gIH1cblxuICAvKipcbiAgICogVGhpcyBtZXRob2QgcHJvdmlkZXMgYWNjZXNzIG9ubHkgdG8gdGhlIHJlc3BvbnNlIGJvZHkuXG4gICAqIFRvIGFjY2VzcyB0aGUgZnVsbCByZXNwb25zZSAoZm9yIGhlYWRlcnMsIGZvciBleGFtcGxlKSwgYGNvbnRyYWN0U2l0ZVdpZGdldENvbnRyb2xsZXJGaW5kQWxsJFJlc3BvbnNlKClgIGluc3RlYWQuXG4gICAqXG4gICAqIFRoaXMgbWV0aG9kIHNlbmRzIGBhcHBsaWNhdGlvbi9qc29uYCBhbmQgaGFuZGxlcyByZXF1ZXN0IGJvZHkgb2YgdHlwZSBgYXBwbGljYXRpb24vanNvbmAuXG4gICAqL1xuICBjb250cmFjdFNpdGVXaWRnZXRDb250cm9sbGVyRmluZEFsbChwYXJhbXM6IENvbnRyYWN0U2l0ZVdpZGdldENvbnRyb2xsZXJGaW5kQWxsJFBhcmFtcywgY29udGV4dD86IEh0dHBDb250ZXh0KTogT2JzZXJ2YWJsZTx7XG4nY29kZSc/OiBudW1iZXI7XG4ncGVzYW4nPzogc3RyaW5nO1xuJ2RhdGEnPzogQXJyYXk8UGVsYW5nZ2FuQ29udHJhY3RTaXRlV2lkZ2V0RHRvPjtcbid0b3RhbCc/OiBudW1iZXI7XG59PiB7XG4gICAgcmV0dXJuIHRoaXMuY29udHJhY3RTaXRlV2lkZ2V0Q29udHJvbGxlckZpbmRBbGwkUmVzcG9uc2UocGFyYW1zLCBjb250ZXh0KS5waXBlKFxuICAgICAgbWFwKChyOiBTdHJpY3RIdHRwUmVzcG9uc2U8e1xuJ2NvZGUnPzogbnVtYmVyO1xuJ3Blc2FuJz86IHN0cmluZztcbidkYXRhJz86IEFycmF5PFBlbGFuZ2dhbkNvbnRyYWN0U2l0ZVdpZGdldER0bz47XG4ndG90YWwnPzogbnVtYmVyO1xufT4pOiB7XG4nY29kZSc/OiBudW1iZXI7XG4ncGVzYW4nPzogc3RyaW5nO1xuJ2RhdGEnPzogQXJyYXk8UGVsYW5nZ2FuQ29udHJhY3RTaXRlV2lkZ2V0RHRvPjtcbid0b3RhbCc/OiBudW1iZXI7XG59ID0+IHIuYm9keSlcbiAgICApO1xuICB9XG5cbn1cbiJdfQ==
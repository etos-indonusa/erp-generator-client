/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
import { HttpClient } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { map } from 'rxjs/operators';
import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { engineerPrisReturnItemReportControllerFindAll } from '../fn/engineer-pris-return-item-report/engineer-pris-return-item-report-controller-find-all';
import { engineerPrisReturnItemReportControllerFindOne } from '../fn/engineer-pris-return-item-report/engineer-pris-return-item-report-controller-find-one';
import * as i0 from "@angular/core";
import * as i1 from "../api-configuration";
import * as i2 from "@angular/common/http";
export class EngineerPrisReturnItemReportService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `engineerPrisReturnItemReportControllerFindAll()` */
    static { this.EngineerPrisReturnItemReportControllerFindAllPath = '/amims/engineer_pris_return_item/engineer_pris_return_item_report/list'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `engineerPrisReturnItemReportControllerFindAll()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    engineerPrisReturnItemReportControllerFindAll$Response(params, context) {
        return engineerPrisReturnItemReportControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `engineerPrisReturnItemReportControllerFindAll$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    engineerPrisReturnItemReportControllerFindAll(params, context) {
        return this.engineerPrisReturnItemReportControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `engineerPrisReturnItemReportControllerFindOne()` */
    static { this.EngineerPrisReturnItemReportControllerFindOnePath = '/amims/engineer_pris_return_item/engineer_pris_return_item_report/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `engineerPrisReturnItemReportControllerFindOne()` instead.
     *
     * This method doesn't expect any request body.
     */
    engineerPrisReturnItemReportControllerFindOne$Response(params, context) {
        return engineerPrisReturnItemReportControllerFindOne(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `engineerPrisReturnItemReportControllerFindOne$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    engineerPrisReturnItemReportControllerFindOne(params, context) {
        return this.engineerPrisReturnItemReportControllerFindOne$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: EngineerPrisReturnItemReportService, deps: [{ token: i1.ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: EngineerPrisReturnItemReportService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: EngineerPrisReturnItemReportService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: i1.ApiConfiguration }, { type: i2.HttpClient }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZW5naW5lZXItcHJpcy1yZXR1cm4taXRlbS1yZXBvcnQuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL3Nka2NvcmUvc3JjL2xpYi9zZXJ2aWNlcy9lbmdpbmVlci1wcmlzLXJldHVybi1pdGVtLXJlcG9ydC5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQixvQkFBb0I7QUFDcEIsbURBQW1EO0FBRW5ELE9BQU8sRUFBRSxVQUFVLEVBQWUsTUFBTSxzQkFBc0IsQ0FBQztBQUMvRCxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRTNDLE9BQU8sRUFBRSxHQUFHLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUVyQyxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFDOUMsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0sc0JBQXNCLENBQUM7QUFJeEQsT0FBTyxFQUFFLDZDQUE2QyxFQUFFLE1BQU0sNkZBQTZGLENBQUM7QUFFNUosT0FBTyxFQUFFLDZDQUE2QyxFQUFFLE1BQU0sNkZBQTZGLENBQUM7Ozs7QUFJNUosTUFBTSxPQUFPLG1DQUFvQyxTQUFRLFdBQVc7SUFDbEUsWUFBWSxNQUF3QixFQUFFLElBQWdCO1FBQ3BELEtBQUssQ0FBQyxNQUFNLEVBQUUsSUFBSSxDQUFDLENBQUM7SUFDdEIsQ0FBQztJQUVELGdGQUFnRjthQUNoRSxzREFBaUQsR0FBRyx3RUFBd0UsQUFBM0UsQ0FBNEU7SUFFN0k7Ozs7O09BS0c7SUFDSCxzREFBc0QsQ0FBQyxNQUE0RCxFQUFFLE9BQXFCO1FBTXhJLE9BQU8sNkNBQTZDLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsT0FBTyxFQUFFLE1BQU0sRUFBRSxPQUFPLENBQUMsQ0FBQztJQUNqRyxDQUFDO0lBRUQ7Ozs7O09BS0c7SUFDSCw2Q0FBNkMsQ0FBQyxNQUE0RCxFQUFFLE9BQXFCO1FBTS9ILE9BQU8sSUFBSSxDQUFDLHNEQUFzRCxDQUFDLE1BQU0sRUFBRSxPQUFPLENBQUMsQ0FBQyxJQUFJLENBQ3RGLEdBQUcsQ0FBQyxDQUFDLENBS1QsRUFLQSxFQUFFLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUNQLENBQUM7SUFDSixDQUFDO0lBRUQsZ0ZBQWdGO2FBQ2hFLHNEQUFpRCxHQUFHLHdFQUF3RSxBQUEzRSxDQUE0RTtJQUU3STs7Ozs7T0FLRztJQUNILHNEQUFzRCxDQUFDLE1BQTRELEVBQUUsT0FBcUI7UUFLeEksT0FBTyw2Q0FBNkMsQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxPQUFPLEVBQUUsTUFBTSxFQUFFLE9BQU8sQ0FBQyxDQUFDO0lBQ2pHLENBQUM7SUFFRDs7Ozs7T0FLRztJQUNILDZDQUE2QyxDQUFDLE1BQTRELEVBQUUsT0FBcUI7UUFLL0gsT0FBTyxJQUFJLENBQUMsc0RBQXNELENBQUMsTUFBTSxFQUFFLE9BQU8sQ0FBQyxDQUFDLElBQUksQ0FDdEYsR0FBRyxDQUFDLENBQUMsQ0FJVCxFQUlBLEVBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQ1AsQ0FBQztJQUNKLENBQUM7K0dBekZVLG1DQUFtQzttSEFBbkMsbUNBQW1DLGNBRHRCLE1BQU07OzRGQUNuQixtQ0FBbUM7a0JBRC9DLFVBQVU7bUJBQUMsRUFBRSxVQUFVLEVBQUUsTUFBTSxFQUFFIiwic291cmNlc0NvbnRlbnQiOlsiLyogdHNsaW50OmRpc2FibGUgKi9cbi8qIGVzbGludC1kaXNhYmxlICovXG4vKiBDb2RlIGdlbmVyYXRlZCBieSBuZy1vcGVuYXBpLWdlbiBETyBOT1QgRURJVC4gKi9cblxuaW1wb3J0IHsgSHR0cENsaWVudCwgSHR0cENvbnRleHQgfSBmcm9tICdAYW5ndWxhci9jb21tb24vaHR0cCc7XG5pbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBtYXAgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5cbmltcG9ydCB7IEJhc2VTZXJ2aWNlIH0gZnJvbSAnLi4vYmFzZS1zZXJ2aWNlJztcbmltcG9ydCB7IEFwaUNvbmZpZ3VyYXRpb24gfSBmcm9tICcuLi9hcGktY29uZmlndXJhdGlvbic7XG5pbXBvcnQgeyBTdHJpY3RIdHRwUmVzcG9uc2UgfSBmcm9tICcuLi9zdHJpY3QtaHR0cC1yZXNwb25zZSc7XG5cbmltcG9ydCB7IEFtaW1zRW5naW5lZXJQcmlzUmV0dXJuSXRlbVJlcG9ydER0byB9IGZyb20gJy4uL21vZGVscy9hbWltcy1lbmdpbmVlci1wcmlzLXJldHVybi1pdGVtLXJlcG9ydC1kdG8nO1xuaW1wb3J0IHsgZW5naW5lZXJQcmlzUmV0dXJuSXRlbVJlcG9ydENvbnRyb2xsZXJGaW5kQWxsIH0gZnJvbSAnLi4vZm4vZW5naW5lZXItcHJpcy1yZXR1cm4taXRlbS1yZXBvcnQvZW5naW5lZXItcHJpcy1yZXR1cm4taXRlbS1yZXBvcnQtY29udHJvbGxlci1maW5kLWFsbCc7XG5pbXBvcnQgeyBFbmdpbmVlclByaXNSZXR1cm5JdGVtUmVwb3J0Q29udHJvbGxlckZpbmRBbGwkUGFyYW1zIH0gZnJvbSAnLi4vZm4vZW5naW5lZXItcHJpcy1yZXR1cm4taXRlbS1yZXBvcnQvZW5naW5lZXItcHJpcy1yZXR1cm4taXRlbS1yZXBvcnQtY29udHJvbGxlci1maW5kLWFsbCc7XG5pbXBvcnQgeyBlbmdpbmVlclByaXNSZXR1cm5JdGVtUmVwb3J0Q29udHJvbGxlckZpbmRPbmUgfSBmcm9tICcuLi9mbi9lbmdpbmVlci1wcmlzLXJldHVybi1pdGVtLXJlcG9ydC9lbmdpbmVlci1wcmlzLXJldHVybi1pdGVtLXJlcG9ydC1jb250cm9sbGVyLWZpbmQtb25lJztcbmltcG9ydCB7IEVuZ2luZWVyUHJpc1JldHVybkl0ZW1SZXBvcnRDb250cm9sbGVyRmluZE9uZSRQYXJhbXMgfSBmcm9tICcuLi9mbi9lbmdpbmVlci1wcmlzLXJldHVybi1pdGVtLXJlcG9ydC9lbmdpbmVlci1wcmlzLXJldHVybi1pdGVtLXJlcG9ydC1jb250cm9sbGVyLWZpbmQtb25lJztcblxuQEluamVjdGFibGUoeyBwcm92aWRlZEluOiAncm9vdCcgfSlcbmV4cG9ydCBjbGFzcyBFbmdpbmVlclByaXNSZXR1cm5JdGVtUmVwb3J0U2VydmljZSBleHRlbmRzIEJhc2VTZXJ2aWNlIHtcbiAgY29uc3RydWN0b3IoY29uZmlnOiBBcGlDb25maWd1cmF0aW9uLCBodHRwOiBIdHRwQ2xpZW50KSB7XG4gICAgc3VwZXIoY29uZmlnLCBodHRwKTtcbiAgfVxuXG4gIC8qKiBQYXRoIHBhcnQgZm9yIG9wZXJhdGlvbiBgZW5naW5lZXJQcmlzUmV0dXJuSXRlbVJlcG9ydENvbnRyb2xsZXJGaW5kQWxsKClgICovXG4gIHN0YXRpYyByZWFkb25seSBFbmdpbmVlclByaXNSZXR1cm5JdGVtUmVwb3J0Q29udHJvbGxlckZpbmRBbGxQYXRoID0gJy9hbWltcy9lbmdpbmVlcl9wcmlzX3JldHVybl9pdGVtL2VuZ2luZWVyX3ByaXNfcmV0dXJuX2l0ZW1fcmVwb3J0L2xpc3QnO1xuXG4gIC8qKlxuICAgKiBUaGlzIG1ldGhvZCBwcm92aWRlcyBhY2Nlc3MgdG8gdGhlIGZ1bGwgYEh0dHBSZXNwb25zZWAsIGFsbG93aW5nIGFjY2VzcyB0byByZXNwb25zZSBoZWFkZXJzLlxuICAgKiBUbyBhY2Nlc3Mgb25seSB0aGUgcmVzcG9uc2UgYm9keSwgdXNlIGBlbmdpbmVlclByaXNSZXR1cm5JdGVtUmVwb3J0Q29udHJvbGxlckZpbmRBbGwoKWAgaW5zdGVhZC5cbiAgICpcbiAgICogVGhpcyBtZXRob2Qgc2VuZHMgYGFwcGxpY2F0aW9uL2pzb25gIGFuZCBoYW5kbGVzIHJlcXVlc3QgYm9keSBvZiB0eXBlIGBhcHBsaWNhdGlvbi9qc29uYC5cbiAgICovXG4gIGVuZ2luZWVyUHJpc1JldHVybkl0ZW1SZXBvcnRDb250cm9sbGVyRmluZEFsbCRSZXNwb25zZShwYXJhbXM6IEVuZ2luZWVyUHJpc1JldHVybkl0ZW1SZXBvcnRDb250cm9sbGVyRmluZEFsbCRQYXJhbXMsIGNvbnRleHQ/OiBIdHRwQ29udGV4dCk6IE9ic2VydmFibGU8U3RyaWN0SHR0cFJlc3BvbnNlPHtcbidjb2RlJz86IG51bWJlcjtcbidwZXNhbic/OiBzdHJpbmc7XG4nZGF0YSc/OiBBcnJheTxBbWltc0VuZ2luZWVyUHJpc1JldHVybkl0ZW1SZXBvcnREdG8+O1xuJ3RvdGFsJz86IG51bWJlcjtcbn0+PiB7XG4gICAgcmV0dXJuIGVuZ2luZWVyUHJpc1JldHVybkl0ZW1SZXBvcnRDb250cm9sbGVyRmluZEFsbCh0aGlzLmh0dHAsIHRoaXMucm9vdFVybCwgcGFyYW1zLCBjb250ZXh0KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGlzIG1ldGhvZCBwcm92aWRlcyBhY2Nlc3Mgb25seSB0byB0aGUgcmVzcG9uc2UgYm9keS5cbiAgICogVG8gYWNjZXNzIHRoZSBmdWxsIHJlc3BvbnNlIChmb3IgaGVhZGVycywgZm9yIGV4YW1wbGUpLCBgZW5naW5lZXJQcmlzUmV0dXJuSXRlbVJlcG9ydENvbnRyb2xsZXJGaW5kQWxsJFJlc3BvbnNlKClgIGluc3RlYWQuXG4gICAqXG4gICAqIFRoaXMgbWV0aG9kIHNlbmRzIGBhcHBsaWNhdGlvbi9qc29uYCBhbmQgaGFuZGxlcyByZXF1ZXN0IGJvZHkgb2YgdHlwZSBgYXBwbGljYXRpb24vanNvbmAuXG4gICAqL1xuICBlbmdpbmVlclByaXNSZXR1cm5JdGVtUmVwb3J0Q29udHJvbGxlckZpbmRBbGwocGFyYW1zOiBFbmdpbmVlclByaXNSZXR1cm5JdGVtUmVwb3J0Q29udHJvbGxlckZpbmRBbGwkUGFyYW1zLCBjb250ZXh0PzogSHR0cENvbnRleHQpOiBPYnNlcnZhYmxlPHtcbidjb2RlJz86IG51bWJlcjtcbidwZXNhbic/OiBzdHJpbmc7XG4nZGF0YSc/OiBBcnJheTxBbWltc0VuZ2luZWVyUHJpc1JldHVybkl0ZW1SZXBvcnREdG8+O1xuJ3RvdGFsJz86IG51bWJlcjtcbn0+IHtcbiAgICByZXR1cm4gdGhpcy5lbmdpbmVlclByaXNSZXR1cm5JdGVtUmVwb3J0Q29udHJvbGxlckZpbmRBbGwkUmVzcG9uc2UocGFyYW1zLCBjb250ZXh0KS5waXBlKFxuICAgICAgbWFwKChyOiBTdHJpY3RIdHRwUmVzcG9uc2U8e1xuJ2NvZGUnPzogbnVtYmVyO1xuJ3Blc2FuJz86IHN0cmluZztcbidkYXRhJz86IEFycmF5PEFtaW1zRW5naW5lZXJQcmlzUmV0dXJuSXRlbVJlcG9ydER0bz47XG4ndG90YWwnPzogbnVtYmVyO1xufT4pOiB7XG4nY29kZSc/OiBudW1iZXI7XG4ncGVzYW4nPzogc3RyaW5nO1xuJ2RhdGEnPzogQXJyYXk8QW1pbXNFbmdpbmVlclByaXNSZXR1cm5JdGVtUmVwb3J0RHRvPjtcbid0b3RhbCc/OiBudW1iZXI7XG59ID0+IHIuYm9keSlcbiAgICApO1xuICB9XG5cbiAgLyoqIFBhdGggcGFydCBmb3Igb3BlcmF0aW9uIGBlbmdpbmVlclByaXNSZXR1cm5JdGVtUmVwb3J0Q29udHJvbGxlckZpbmRPbmUoKWAgKi9cbiAgc3RhdGljIHJlYWRvbmx5IEVuZ2luZWVyUHJpc1JldHVybkl0ZW1SZXBvcnRDb250cm9sbGVyRmluZE9uZVBhdGggPSAnL2FtaW1zL2VuZ2luZWVyX3ByaXNfcmV0dXJuX2l0ZW0vZW5naW5lZXJfcHJpc19yZXR1cm5faXRlbV9yZXBvcnQve2lkfSc7XG5cbiAgLyoqXG4gICAqIFRoaXMgbWV0aG9kIHByb3ZpZGVzIGFjY2VzcyB0byB0aGUgZnVsbCBgSHR0cFJlc3BvbnNlYCwgYWxsb3dpbmcgYWNjZXNzIHRvIHJlc3BvbnNlIGhlYWRlcnMuXG4gICAqIFRvIGFjY2VzcyBvbmx5IHRoZSByZXNwb25zZSBib2R5LCB1c2UgYGVuZ2luZWVyUHJpc1JldHVybkl0ZW1SZXBvcnRDb250cm9sbGVyRmluZE9uZSgpYCBpbnN0ZWFkLlxuICAgKlxuICAgKiBUaGlzIG1ldGhvZCBkb2Vzbid0IGV4cGVjdCBhbnkgcmVxdWVzdCBib2R5LlxuICAgKi9cbiAgZW5naW5lZXJQcmlzUmV0dXJuSXRlbVJlcG9ydENvbnRyb2xsZXJGaW5kT25lJFJlc3BvbnNlKHBhcmFtczogRW5naW5lZXJQcmlzUmV0dXJuSXRlbVJlcG9ydENvbnRyb2xsZXJGaW5kT25lJFBhcmFtcywgY29udGV4dD86IEh0dHBDb250ZXh0KTogT2JzZXJ2YWJsZTxTdHJpY3RIdHRwUmVzcG9uc2U8e1xuJ2NvZGUnPzogbnVtYmVyO1xuJ3Blc2FuJz86IHN0cmluZztcbidkYXRhJz86IEFtaW1zRW5naW5lZXJQcmlzUmV0dXJuSXRlbVJlcG9ydER0bztcbn0+PiB7XG4gICAgcmV0dXJuIGVuZ2luZWVyUHJpc1JldHVybkl0ZW1SZXBvcnRDb250cm9sbGVyRmluZE9uZSh0aGlzLmh0dHAsIHRoaXMucm9vdFVybCwgcGFyYW1zLCBjb250ZXh0KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGlzIG1ldGhvZCBwcm92aWRlcyBhY2Nlc3Mgb25seSB0byB0aGUgcmVzcG9uc2UgYm9keS5cbiAgICogVG8gYWNjZXNzIHRoZSBmdWxsIHJlc3BvbnNlIChmb3IgaGVhZGVycywgZm9yIGV4YW1wbGUpLCBgZW5naW5lZXJQcmlzUmV0dXJuSXRlbVJlcG9ydENvbnRyb2xsZXJGaW5kT25lJFJlc3BvbnNlKClgIGluc3RlYWQuXG4gICAqXG4gICAqIFRoaXMgbWV0aG9kIGRvZXNuJ3QgZXhwZWN0IGFueSByZXF1ZXN0IGJvZHkuXG4gICAqL1xuICBlbmdpbmVlclByaXNSZXR1cm5JdGVtUmVwb3J0Q29udHJvbGxlckZpbmRPbmUocGFyYW1zOiBFbmdpbmVlclByaXNSZXR1cm5JdGVtUmVwb3J0Q29udHJvbGxlckZpbmRPbmUkUGFyYW1zLCBjb250ZXh0PzogSHR0cENvbnRleHQpOiBPYnNlcnZhYmxlPHtcbidjb2RlJz86IG51bWJlcjtcbidwZXNhbic/OiBzdHJpbmc7XG4nZGF0YSc/OiBBbWltc0VuZ2luZWVyUHJpc1JldHVybkl0ZW1SZXBvcnREdG87XG59PiB7XG4gICAgcmV0dXJuIHRoaXMuZW5naW5lZXJQcmlzUmV0dXJuSXRlbVJlcG9ydENvbnRyb2xsZXJGaW5kT25lJFJlc3BvbnNlKHBhcmFtcywgY29udGV4dCkucGlwZShcbiAgICAgIG1hcCgocjogU3RyaWN0SHR0cFJlc3BvbnNlPHtcbidjb2RlJz86IG51bWJlcjtcbidwZXNhbic/OiBzdHJpbmc7XG4nZGF0YSc/OiBBbWltc0VuZ2luZWVyUHJpc1JldHVybkl0ZW1SZXBvcnREdG87XG59Pik6IHtcbidjb2RlJz86IG51bWJlcjtcbidwZXNhbic/OiBzdHJpbmc7XG4nZGF0YSc/OiBBbWltc0VuZ2luZWVyUHJpc1JldHVybkl0ZW1SZXBvcnREdG87XG59ID0+IHIuYm9keSlcbiAgICApO1xuICB9XG5cbn1cbiJdfQ==
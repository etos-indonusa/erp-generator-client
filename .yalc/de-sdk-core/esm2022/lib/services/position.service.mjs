/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
import { HttpClient } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { map } from 'rxjs/operators';
import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { positionControllerCreate } from '../fn/position/position-controller-create';
import { positionControllerFindAll } from '../fn/position/position-controller-find-all';
import { positionControllerFindOne } from '../fn/position/position-controller-find-one';
import { positionControllerRemove } from '../fn/position/position-controller-remove';
import { positionControllerUpdate } from '../fn/position/position-controller-update';
import * as i0 from "@angular/core";
import * as i1 from "../api-configuration";
import * as i2 from "@angular/common/http";
export class PositionService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `positionControllerFindAll()` */
    static { this.PositionControllerFindAllPath = '/amims/position/position'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `positionControllerFindAll()` instead.
     *
     * This method doesn't expect any request body.
     */
    positionControllerFindAll$Response(params, context) {
        return positionControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `positionControllerFindAll$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    positionControllerFindAll(params, context) {
        return this.positionControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `positionControllerCreate()` */
    static { this.PositionControllerCreatePath = '/amims/position/position'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `positionControllerCreate()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    positionControllerCreate$Response(params, context) {
        return positionControllerCreate(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `positionControllerCreate$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    positionControllerCreate(params, context) {
        return this.positionControllerCreate$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `positionControllerFindOne()` */
    static { this.PositionControllerFindOnePath = '/amims/position/position/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `positionControllerFindOne()` instead.
     *
     * This method doesn't expect any request body.
     */
    positionControllerFindOne$Response(params, context) {
        return positionControllerFindOne(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `positionControllerFindOne$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    positionControllerFindOne(params, context) {
        return this.positionControllerFindOne$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `positionControllerUpdate()` */
    static { this.PositionControllerUpdatePath = '/amims/position/position/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `positionControllerUpdate()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    positionControllerUpdate$Response(params, context) {
        return positionControllerUpdate(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `positionControllerUpdate$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    positionControllerUpdate(params, context) {
        return this.positionControllerUpdate$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `positionControllerRemove()` */
    static { this.PositionControllerRemovePath = '/amims/position/position/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `positionControllerRemove()` instead.
     *
     * This method doesn't expect any request body.
     */
    positionControllerRemove$Response(params, context) {
        return positionControllerRemove(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `positionControllerRemove$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    positionControllerRemove(params, context) {
        return this.positionControllerRemove$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: PositionService, deps: [{ token: i1.ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: PositionService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: PositionService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: i1.ApiConfiguration }, { type: i2.HttpClient }] });
//# sourceMappingURL=data:application/json;base64,
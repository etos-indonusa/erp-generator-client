/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
import { HttpClient } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { map } from 'rxjs/operators';
import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { authProtectedControllerGetMe } from '../fn/auth-protect/auth-protected-controller-get-me';
import { authProtectedControllerLogout } from '../fn/auth-protect/auth-protected-controller-logout';
import * as i0 from "@angular/core";
import * as i1 from "../api-configuration";
import * as i2 from "@angular/common/http";
export class AuthProtectService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `authProtectedControllerGetMe()` */
    static { this.AuthProtectedControllerGetMePath = '/auth/auth-protect/auth-protect/me'; }
    /**
     * Get current user.
     *
     *
     *
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `authProtectedControllerGetMe()` instead.
     *
     * This method doesn't expect any request body.
     */
    authProtectedControllerGetMe$Response(params, context) {
        return authProtectedControllerGetMe(this.http, this.rootUrl, params, context);
    }
    /**
     * Get current user.
     *
     *
     *
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `authProtectedControllerGetMe$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    authProtectedControllerGetMe(params, context) {
        return this.authProtectedControllerGetMe$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `authProtectedControllerLogout()` */
    static { this.AuthProtectedControllerLogoutPath = '/auth/auth-protect/auth-protect/logout'; }
    /**
     * Logout user.
     *
     *
     *
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `authProtectedControllerLogout()` instead.
     *
     * This method doesn't expect any request body.
     */
    authProtectedControllerLogout$Response(params, context) {
        return authProtectedControllerLogout(this.http, this.rootUrl, params, context);
    }
    /**
     * Logout user.
     *
     *
     *
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `authProtectedControllerLogout$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    authProtectedControllerLogout(params, context) {
        return this.authProtectedControllerLogout$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: AuthProtectService, deps: [{ token: i1.ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: AuthProtectService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: AuthProtectService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: i1.ApiConfiguration }, { type: i2.HttpClient }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXV0aC1wcm90ZWN0LnNlcnZpY2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9zZGtjb3JlL3NyYy9saWIvc2VydmljZXMvYXV0aC1wcm90ZWN0LnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsb0JBQW9CO0FBQ3BCLG9CQUFvQjtBQUNwQixtREFBbUQ7QUFFbkQsT0FBTyxFQUFFLFVBQVUsRUFBZSxNQUFNLHNCQUFzQixDQUFDO0FBQy9ELE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFM0MsT0FBTyxFQUFFLEdBQUcsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBRXJDLE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUM5QyxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQztBQUd4RCxPQUFPLEVBQUUsNEJBQTRCLEVBQUUsTUFBTSxxREFBcUQsQ0FBQztBQUVuRyxPQUFPLEVBQUUsNkJBQTZCLEVBQUUsTUFBTSxxREFBcUQsQ0FBQzs7OztBQU1wRyxNQUFNLE9BQU8sa0JBQW1CLFNBQVEsV0FBVztJQUNqRCxZQUFZLE1BQXdCLEVBQUUsSUFBZ0I7UUFDcEQsS0FBSyxDQUFDLE1BQU0sRUFBRSxJQUFJLENBQUMsQ0FBQztJQUN0QixDQUFDO0lBRUQsK0RBQStEO2FBQy9DLHFDQUFnQyxHQUFHLG9DQUFvQyxBQUF2QyxDQUF3QztJQUV4Rjs7Ozs7Ozs7O09BU0c7SUFDSCxxQ0FBcUMsQ0FBQyxNQUE0QyxFQUFFLE9BQXFCO1FBQ3ZHLE9BQU8sNEJBQTRCLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsT0FBTyxFQUFFLE1BQU0sRUFBRSxPQUFPLENBQUMsQ0FBQztJQUNoRixDQUFDO0lBRUQ7Ozs7Ozs7OztPQVNHO0lBQ0gsNEJBQTRCLENBQUMsTUFBNEMsRUFBRSxPQUFxQjtRQUM5RixPQUFPLElBQUksQ0FBQyxxQ0FBcUMsQ0FBQyxNQUFNLEVBQUUsT0FBTyxDQUFDLENBQUMsSUFBSSxDQUNyRSxHQUFHLENBQUMsQ0FBQyxDQUE2QyxFQUEwQixFQUFFLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUN2RixDQUFDO0lBQ0osQ0FBQztJQUVELGdFQUFnRTthQUNoRCxzQ0FBaUMsR0FBRyx3Q0FBd0MsQUFBM0MsQ0FBNEM7SUFFN0Y7Ozs7Ozs7OztPQVNHO0lBQ0gsc0NBQXNDLENBQUMsTUFBNkMsRUFBRSxPQUFxQjtRQUN6RyxPQUFPLDZCQUE2QixDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLE9BQU8sRUFBRSxNQUFNLEVBQUUsT0FBTyxDQUFDLENBQUM7SUFDakYsQ0FBQztJQUVEOzs7Ozs7Ozs7T0FTRztJQUNILDZCQUE2QixDQUFDLE1BQTZDLEVBQUUsT0FBcUI7UUFDaEcsT0FBTyxJQUFJLENBQUMsc0NBQXNDLENBQUMsTUFBTSxFQUFFLE9BQU8sQ0FBQyxDQUFDLElBQUksQ0FDdEUsR0FBRyxDQUFDLENBQUMsQ0FBdUMsRUFBb0IsRUFBRSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FDM0UsQ0FBQztJQUNKLENBQUM7K0dBckVVLGtCQUFrQjttSEFBbEIsa0JBQWtCLGNBREwsTUFBTTs7NEZBQ25CLGtCQUFrQjtrQkFEOUIsVUFBVTttQkFBQyxFQUFFLFVBQVUsRUFBRSxNQUFNLEVBQUUiLCJzb3VyY2VzQ29udGVudCI6WyIvKiB0c2xpbnQ6ZGlzYWJsZSAqL1xuLyogZXNsaW50LWRpc2FibGUgKi9cbi8qIENvZGUgZ2VuZXJhdGVkIGJ5IG5nLW9wZW5hcGktZ2VuIERPIE5PVCBFRElULiAqL1xuXG5pbXBvcnQgeyBIdHRwQ2xpZW50LCBIdHRwQ29udGV4dCB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbi9odHRwJztcbmltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IG1hcCB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcblxuaW1wb3J0IHsgQmFzZVNlcnZpY2UgfSBmcm9tICcuLi9iYXNlLXNlcnZpY2UnO1xuaW1wb3J0IHsgQXBpQ29uZmlndXJhdGlvbiB9IGZyb20gJy4uL2FwaS1jb25maWd1cmF0aW9uJztcbmltcG9ydCB7IFN0cmljdEh0dHBSZXNwb25zZSB9IGZyb20gJy4uL3N0cmljdC1odHRwLXJlc3BvbnNlJztcblxuaW1wb3J0IHsgYXV0aFByb3RlY3RlZENvbnRyb2xsZXJHZXRNZSB9IGZyb20gJy4uL2ZuL2F1dGgtcHJvdGVjdC9hdXRoLXByb3RlY3RlZC1jb250cm9sbGVyLWdldC1tZSc7XG5pbXBvcnQgeyBBdXRoUHJvdGVjdGVkQ29udHJvbGxlckdldE1lJFBhcmFtcyB9IGZyb20gJy4uL2ZuL2F1dGgtcHJvdGVjdC9hdXRoLXByb3RlY3RlZC1jb250cm9sbGVyLWdldC1tZSc7XG5pbXBvcnQgeyBhdXRoUHJvdGVjdGVkQ29udHJvbGxlckxvZ291dCB9IGZyb20gJy4uL2ZuL2F1dGgtcHJvdGVjdC9hdXRoLXByb3RlY3RlZC1jb250cm9sbGVyLWxvZ291dCc7XG5pbXBvcnQgeyBBdXRoUHJvdGVjdGVkQ29udHJvbGxlckxvZ291dCRQYXJhbXMgfSBmcm9tICcuLi9mbi9hdXRoLXByb3RlY3QvYXV0aC1wcm90ZWN0ZWQtY29udHJvbGxlci1sb2dvdXQnO1xuaW1wb3J0IHsgQ3VycmVudFVzZXJSZXNwb25zZUR0byB9IGZyb20gJy4uL21vZGVscy9jdXJyZW50LXVzZXItcmVzcG9uc2UtZHRvJztcbmltcG9ydCB7IFNpbXBsZU1lc3NhZ2VEdG8gfSBmcm9tICcuLi9tb2RlbHMvc2ltcGxlLW1lc3NhZ2UtZHRvJztcblxuQEluamVjdGFibGUoeyBwcm92aWRlZEluOiAncm9vdCcgfSlcbmV4cG9ydCBjbGFzcyBBdXRoUHJvdGVjdFNlcnZpY2UgZXh0ZW5kcyBCYXNlU2VydmljZSB7XG4gIGNvbnN0cnVjdG9yKGNvbmZpZzogQXBpQ29uZmlndXJhdGlvbiwgaHR0cDogSHR0cENsaWVudCkge1xuICAgIHN1cGVyKGNvbmZpZywgaHR0cCk7XG4gIH1cblxuICAvKiogUGF0aCBwYXJ0IGZvciBvcGVyYXRpb24gYGF1dGhQcm90ZWN0ZWRDb250cm9sbGVyR2V0TWUoKWAgKi9cbiAgc3RhdGljIHJlYWRvbmx5IEF1dGhQcm90ZWN0ZWRDb250cm9sbGVyR2V0TWVQYXRoID0gJy9hdXRoL2F1dGgtcHJvdGVjdC9hdXRoLXByb3RlY3QvbWUnO1xuXG4gIC8qKlxuICAgKiBHZXQgY3VycmVudCB1c2VyLlxuICAgKlxuICAgKlxuICAgKlxuICAgKiBUaGlzIG1ldGhvZCBwcm92aWRlcyBhY2Nlc3MgdG8gdGhlIGZ1bGwgYEh0dHBSZXNwb25zZWAsIGFsbG93aW5nIGFjY2VzcyB0byByZXNwb25zZSBoZWFkZXJzLlxuICAgKiBUbyBhY2Nlc3Mgb25seSB0aGUgcmVzcG9uc2UgYm9keSwgdXNlIGBhdXRoUHJvdGVjdGVkQ29udHJvbGxlckdldE1lKClgIGluc3RlYWQuXG4gICAqXG4gICAqIFRoaXMgbWV0aG9kIGRvZXNuJ3QgZXhwZWN0IGFueSByZXF1ZXN0IGJvZHkuXG4gICAqL1xuICBhdXRoUHJvdGVjdGVkQ29udHJvbGxlckdldE1lJFJlc3BvbnNlKHBhcmFtcz86IEF1dGhQcm90ZWN0ZWRDb250cm9sbGVyR2V0TWUkUGFyYW1zLCBjb250ZXh0PzogSHR0cENvbnRleHQpOiBPYnNlcnZhYmxlPFN0cmljdEh0dHBSZXNwb25zZTxDdXJyZW50VXNlclJlc3BvbnNlRHRvPj4ge1xuICAgIHJldHVybiBhdXRoUHJvdGVjdGVkQ29udHJvbGxlckdldE1lKHRoaXMuaHR0cCwgdGhpcy5yb290VXJsLCBwYXJhbXMsIGNvbnRleHQpO1xuICB9XG5cbiAgLyoqXG4gICAqIEdldCBjdXJyZW50IHVzZXIuXG4gICAqXG4gICAqXG4gICAqXG4gICAqIFRoaXMgbWV0aG9kIHByb3ZpZGVzIGFjY2VzcyBvbmx5IHRvIHRoZSByZXNwb25zZSBib2R5LlxuICAgKiBUbyBhY2Nlc3MgdGhlIGZ1bGwgcmVzcG9uc2UgKGZvciBoZWFkZXJzLCBmb3IgZXhhbXBsZSksIGBhdXRoUHJvdGVjdGVkQ29udHJvbGxlckdldE1lJFJlc3BvbnNlKClgIGluc3RlYWQuXG4gICAqXG4gICAqIFRoaXMgbWV0aG9kIGRvZXNuJ3QgZXhwZWN0IGFueSByZXF1ZXN0IGJvZHkuXG4gICAqL1xuICBhdXRoUHJvdGVjdGVkQ29udHJvbGxlckdldE1lKHBhcmFtcz86IEF1dGhQcm90ZWN0ZWRDb250cm9sbGVyR2V0TWUkUGFyYW1zLCBjb250ZXh0PzogSHR0cENvbnRleHQpOiBPYnNlcnZhYmxlPEN1cnJlbnRVc2VyUmVzcG9uc2VEdG8+IHtcbiAgICByZXR1cm4gdGhpcy5hdXRoUHJvdGVjdGVkQ29udHJvbGxlckdldE1lJFJlc3BvbnNlKHBhcmFtcywgY29udGV4dCkucGlwZShcbiAgICAgIG1hcCgocjogU3RyaWN0SHR0cFJlc3BvbnNlPEN1cnJlbnRVc2VyUmVzcG9uc2VEdG8+KTogQ3VycmVudFVzZXJSZXNwb25zZUR0byA9PiByLmJvZHkpXG4gICAgKTtcbiAgfVxuXG4gIC8qKiBQYXRoIHBhcnQgZm9yIG9wZXJhdGlvbiBgYXV0aFByb3RlY3RlZENvbnRyb2xsZXJMb2dvdXQoKWAgKi9cbiAgc3RhdGljIHJlYWRvbmx5IEF1dGhQcm90ZWN0ZWRDb250cm9sbGVyTG9nb3V0UGF0aCA9ICcvYXV0aC9hdXRoLXByb3RlY3QvYXV0aC1wcm90ZWN0L2xvZ291dCc7XG5cbiAgLyoqXG4gICAqIExvZ291dCB1c2VyLlxuICAgKlxuICAgKlxuICAgKlxuICAgKiBUaGlzIG1ldGhvZCBwcm92aWRlcyBhY2Nlc3MgdG8gdGhlIGZ1bGwgYEh0dHBSZXNwb25zZWAsIGFsbG93aW5nIGFjY2VzcyB0byByZXNwb25zZSBoZWFkZXJzLlxuICAgKiBUbyBhY2Nlc3Mgb25seSB0aGUgcmVzcG9uc2UgYm9keSwgdXNlIGBhdXRoUHJvdGVjdGVkQ29udHJvbGxlckxvZ291dCgpYCBpbnN0ZWFkLlxuICAgKlxuICAgKiBUaGlzIG1ldGhvZCBkb2Vzbid0IGV4cGVjdCBhbnkgcmVxdWVzdCBib2R5LlxuICAgKi9cbiAgYXV0aFByb3RlY3RlZENvbnRyb2xsZXJMb2dvdXQkUmVzcG9uc2UocGFyYW1zPzogQXV0aFByb3RlY3RlZENvbnRyb2xsZXJMb2dvdXQkUGFyYW1zLCBjb250ZXh0PzogSHR0cENvbnRleHQpOiBPYnNlcnZhYmxlPFN0cmljdEh0dHBSZXNwb25zZTxTaW1wbGVNZXNzYWdlRHRvPj4ge1xuICAgIHJldHVybiBhdXRoUHJvdGVjdGVkQ29udHJvbGxlckxvZ291dCh0aGlzLmh0dHAsIHRoaXMucm9vdFVybCwgcGFyYW1zLCBjb250ZXh0KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBMb2dvdXQgdXNlci5cbiAgICpcbiAgICpcbiAgICpcbiAgICogVGhpcyBtZXRob2QgcHJvdmlkZXMgYWNjZXNzIG9ubHkgdG8gdGhlIHJlc3BvbnNlIGJvZHkuXG4gICAqIFRvIGFjY2VzcyB0aGUgZnVsbCByZXNwb25zZSAoZm9yIGhlYWRlcnMsIGZvciBleGFtcGxlKSwgYGF1dGhQcm90ZWN0ZWRDb250cm9sbGVyTG9nb3V0JFJlc3BvbnNlKClgIGluc3RlYWQuXG4gICAqXG4gICAqIFRoaXMgbWV0aG9kIGRvZXNuJ3QgZXhwZWN0IGFueSByZXF1ZXN0IGJvZHkuXG4gICAqL1xuICBhdXRoUHJvdGVjdGVkQ29udHJvbGxlckxvZ291dChwYXJhbXM/OiBBdXRoUHJvdGVjdGVkQ29udHJvbGxlckxvZ291dCRQYXJhbXMsIGNvbnRleHQ/OiBIdHRwQ29udGV4dCk6IE9ic2VydmFibGU8U2ltcGxlTWVzc2FnZUR0bz4ge1xuICAgIHJldHVybiB0aGlzLmF1dGhQcm90ZWN0ZWRDb250cm9sbGVyTG9nb3V0JFJlc3BvbnNlKHBhcmFtcywgY29udGV4dCkucGlwZShcbiAgICAgIG1hcCgocjogU3RyaWN0SHR0cFJlc3BvbnNlPFNpbXBsZU1lc3NhZ2VEdG8+KTogU2ltcGxlTWVzc2FnZUR0byA9PiByLmJvZHkpXG4gICAgKTtcbiAgfVxuXG59XG4iXX0=
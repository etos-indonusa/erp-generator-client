/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
import { HttpClient } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { map } from 'rxjs/operators';
import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { mpcPiroItemReportControllerFindAll } from '../fn/mpc-piro-item-report/mpc-piro-item-report-controller-find-all';
import { mpcPiroItemReportControllerFindOne } from '../fn/mpc-piro-item-report/mpc-piro-item-report-controller-find-one';
import * as i0 from "@angular/core";
import * as i1 from "../api-configuration";
import * as i2 from "@angular/common/http";
export class MpcPiroItemReportService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `mpcPiroItemReportControllerFindAll()` */
    static { this.MpcPiroItemReportControllerFindAllPath = '/amims/mpc_piro_item/mpc_piro_item_report/list'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `mpcPiroItemReportControllerFindAll()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    mpcPiroItemReportControllerFindAll$Response(params, context) {
        return mpcPiroItemReportControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `mpcPiroItemReportControllerFindAll$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    mpcPiroItemReportControllerFindAll(params, context) {
        return this.mpcPiroItemReportControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `mpcPiroItemReportControllerFindOne()` */
    static { this.MpcPiroItemReportControllerFindOnePath = '/amims/mpc_piro_item/mpc_piro_item_report/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `mpcPiroItemReportControllerFindOne()` instead.
     *
     * This method doesn't expect any request body.
     */
    mpcPiroItemReportControllerFindOne$Response(params, context) {
        return mpcPiroItemReportControllerFindOne(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `mpcPiroItemReportControllerFindOne$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    mpcPiroItemReportControllerFindOne(params, context) {
        return this.mpcPiroItemReportControllerFindOne$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: MpcPiroItemReportService, deps: [{ token: i1.ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: MpcPiroItemReportService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: MpcPiroItemReportService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: i1.ApiConfiguration }, { type: i2.HttpClient }] });
//# sourceMappingURL=data:application/json;base64,
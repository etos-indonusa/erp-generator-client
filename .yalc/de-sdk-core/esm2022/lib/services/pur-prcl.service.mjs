/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
import { HttpClient } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { map } from 'rxjs/operators';
import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { purPrclControllerCreate } from '../fn/pur-prcl/pur-prcl-controller-create';
import { purPrclControllerFindAll } from '../fn/pur-prcl/pur-prcl-controller-find-all';
import { purPrclControllerFindOne } from '../fn/pur-prcl/pur-prcl-controller-find-one';
import { purPrclControllerRemove } from '../fn/pur-prcl/pur-prcl-controller-remove';
import { purPrclControllerUpdate } from '../fn/pur-prcl/pur-prcl-controller-update';
import * as i0 from "@angular/core";
import * as i1 from "../api-configuration";
import * as i2 from "@angular/common/http";
export class PurPrclService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `purPrclControllerFindAll()` */
    static { this.PurPrclControllerFindAllPath = '/amims/pur_prcl/pur_prcl'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `purPrclControllerFindAll()` instead.
     *
     * This method doesn't expect any request body.
     */
    purPrclControllerFindAll$Response(params, context) {
        return purPrclControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `purPrclControllerFindAll$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    purPrclControllerFindAll(params, context) {
        return this.purPrclControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `purPrclControllerCreate()` */
    static { this.PurPrclControllerCreatePath = '/amims/pur_prcl/pur_prcl'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `purPrclControllerCreate()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    purPrclControllerCreate$Response(params, context) {
        return purPrclControllerCreate(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `purPrclControllerCreate$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    purPrclControllerCreate(params, context) {
        return this.purPrclControllerCreate$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `purPrclControllerFindOne()` */
    static { this.PurPrclControllerFindOnePath = '/amims/pur_prcl/pur_prcl/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `purPrclControllerFindOne()` instead.
     *
     * This method doesn't expect any request body.
     */
    purPrclControllerFindOne$Response(params, context) {
        return purPrclControllerFindOne(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `purPrclControllerFindOne$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    purPrclControllerFindOne(params, context) {
        return this.purPrclControllerFindOne$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `purPrclControllerUpdate()` */
    static { this.PurPrclControllerUpdatePath = '/amims/pur_prcl/pur_prcl/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `purPrclControllerUpdate()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    purPrclControllerUpdate$Response(params, context) {
        return purPrclControllerUpdate(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `purPrclControllerUpdate$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    purPrclControllerUpdate(params, context) {
        return this.purPrclControllerUpdate$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `purPrclControllerRemove()` */
    static { this.PurPrclControllerRemovePath = '/amims/pur_prcl/pur_prcl/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `purPrclControllerRemove()` instead.
     *
     * This method doesn't expect any request body.
     */
    purPrclControllerRemove$Response(params, context) {
        return purPrclControllerRemove(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `purPrclControllerRemove$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    purPrclControllerRemove(params, context) {
        return this.purPrclControllerRemove$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: PurPrclService, deps: [{ token: i1.ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: PurPrclService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: PurPrclService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: i1.ApiConfiguration }, { type: i2.HttpClient }] });
//# sourceMappingURL=data:application/json;base64,
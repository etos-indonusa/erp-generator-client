/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
import { HttpClient } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { map } from 'rxjs/operators';
import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { qaRpdDispotitionControllerCreate } from '../fn/qa-rpd-dispotition/qa-rpd-dispotition-controller-create';
import { qaRpdDispotitionControllerFindAll } from '../fn/qa-rpd-dispotition/qa-rpd-dispotition-controller-find-all';
import { qaRpdDispotitionControllerFindOne } from '../fn/qa-rpd-dispotition/qa-rpd-dispotition-controller-find-one';
import { qaRpdDispotitionControllerRemove } from '../fn/qa-rpd-dispotition/qa-rpd-dispotition-controller-remove';
import { qaRpdDispotitionControllerUpdate } from '../fn/qa-rpd-dispotition/qa-rpd-dispotition-controller-update';
import * as i0 from "@angular/core";
import * as i1 from "../api-configuration";
import * as i2 from "@angular/common/http";
export class QaRpdDispotitionService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `qaRpdDispotitionControllerFindAll()` */
    static { this.QaRpdDispotitionControllerFindAllPath = '/amims/qa_rpd_dispotition/qa_rpd_dispotition'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `qaRpdDispotitionControllerFindAll()` instead.
     *
     * This method doesn't expect any request body.
     */
    qaRpdDispotitionControllerFindAll$Response(params, context) {
        return qaRpdDispotitionControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `qaRpdDispotitionControllerFindAll$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    qaRpdDispotitionControllerFindAll(params, context) {
        return this.qaRpdDispotitionControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `qaRpdDispotitionControllerCreate()` */
    static { this.QaRpdDispotitionControllerCreatePath = '/amims/qa_rpd_dispotition/qa_rpd_dispotition'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `qaRpdDispotitionControllerCreate()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    qaRpdDispotitionControllerCreate$Response(params, context) {
        return qaRpdDispotitionControllerCreate(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `qaRpdDispotitionControllerCreate$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    qaRpdDispotitionControllerCreate(params, context) {
        return this.qaRpdDispotitionControllerCreate$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `qaRpdDispotitionControllerFindOne()` */
    static { this.QaRpdDispotitionControllerFindOnePath = '/amims/qa_rpd_dispotition/qa_rpd_dispotition/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `qaRpdDispotitionControllerFindOne()` instead.
     *
     * This method doesn't expect any request body.
     */
    qaRpdDispotitionControllerFindOne$Response(params, context) {
        return qaRpdDispotitionControllerFindOne(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `qaRpdDispotitionControllerFindOne$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    qaRpdDispotitionControllerFindOne(params, context) {
        return this.qaRpdDispotitionControllerFindOne$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `qaRpdDispotitionControllerUpdate()` */
    static { this.QaRpdDispotitionControllerUpdatePath = '/amims/qa_rpd_dispotition/qa_rpd_dispotition/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `qaRpdDispotitionControllerUpdate()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    qaRpdDispotitionControllerUpdate$Response(params, context) {
        return qaRpdDispotitionControllerUpdate(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `qaRpdDispotitionControllerUpdate$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    qaRpdDispotitionControllerUpdate(params, context) {
        return this.qaRpdDispotitionControllerUpdate$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `qaRpdDispotitionControllerRemove()` */
    static { this.QaRpdDispotitionControllerRemovePath = '/amims/qa_rpd_dispotition/qa_rpd_dispotition/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `qaRpdDispotitionControllerRemove()` instead.
     *
     * This method doesn't expect any request body.
     */
    qaRpdDispotitionControllerRemove$Response(params, context) {
        return qaRpdDispotitionControllerRemove(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `qaRpdDispotitionControllerRemove$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    qaRpdDispotitionControllerRemove(params, context) {
        return this.qaRpdDispotitionControllerRemove$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: QaRpdDispotitionService, deps: [{ token: i1.ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: QaRpdDispotitionService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: QaRpdDispotitionService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: i1.ApiConfiguration }, { type: i2.HttpClient }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicWEtcnBkLWRpc3BvdGl0aW9uLnNlcnZpY2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9zZGtjb3JlL3NyYy9saWIvc2VydmljZXMvcWEtcnBkLWRpc3BvdGl0aW9uLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsb0JBQW9CO0FBQ3BCLG9CQUFvQjtBQUNwQixtREFBbUQ7QUFFbkQsT0FBTyxFQUFFLFVBQVUsRUFBZSxNQUFNLHNCQUFzQixDQUFDO0FBQy9ELE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFM0MsT0FBTyxFQUFFLEdBQUcsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBRXJDLE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUM5QyxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQztBQUl4RCxPQUFPLEVBQUUsZ0NBQWdDLEVBQUUsTUFBTSwrREFBK0QsQ0FBQztBQUVqSCxPQUFPLEVBQUUsaUNBQWlDLEVBQUUsTUFBTSxpRUFBaUUsQ0FBQztBQUVwSCxPQUFPLEVBQUUsaUNBQWlDLEVBQUUsTUFBTSxpRUFBaUUsQ0FBQztBQUVwSCxPQUFPLEVBQUUsZ0NBQWdDLEVBQUUsTUFBTSwrREFBK0QsQ0FBQztBQUVqSCxPQUFPLEVBQUUsZ0NBQWdDLEVBQUUsTUFBTSwrREFBK0QsQ0FBQzs7OztBQUlqSCxNQUFNLE9BQU8sdUJBQXdCLFNBQVEsV0FBVztJQUN0RCxZQUFZLE1BQXdCLEVBQUUsSUFBZ0I7UUFDcEQsS0FBSyxDQUFDLE1BQU0sRUFBRSxJQUFJLENBQUMsQ0FBQztJQUN0QixDQUFDO0lBRUQsb0VBQW9FO2FBQ3BELDBDQUFxQyxHQUFHLDhDQUE4QyxBQUFqRCxDQUFrRDtJQUV2Rzs7Ozs7T0FLRztJQUNILDBDQUEwQyxDQUFDLE1BQWlELEVBQUUsT0FBcUI7UUFNakgsT0FBTyxpQ0FBaUMsQ0FBQyxJ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QUMsQ0FDUCxDQUFDO0lBQ0osQ0FBQzsrR0FwTlUsdUJBQXVCO21IQUF2Qix1QkFBdUIsY0FEVixNQUFNOzs0RkFDbkIsdUJBQXVCO2tCQURuQyxVQUFVO21CQUFDLEVBQUUsVUFBVSxFQUFFLE1BQU0sRUFBRSIsInNvdXJjZXNDb250ZW50IjpbIi8qIHRzbGludDpkaXNhYmxlICovXG4vKiBlc2xpbnQtZGlzYWJsZSAqL1xuLyogQ29kZSBnZW5lcmF0ZWQgYnkgbmctb3BlbmFwaS1nZW4gRE8gTk9UIEVESVQuICovXG5cbmltcG9ydCB7IEh0dHBDbGllbnQsIEh0dHBDb250ZXh0IH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uL2h0dHAnO1xuaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgbWFwIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuXG5pbXBvcnQgeyBCYXNlU2VydmljZSB9IGZyb20gJy4uL2Jhc2Utc2VydmljZSc7XG5pbXBvcnQgeyBBcGlDb25maWd1cmF0aW9uIH0gZnJvbSAnLi4vYXBpLWNvbmZpZ3VyYXRpb24nO1xuaW1wb3J0IHsgU3RyaWN0SHR0cFJlc3BvbnNlIH0gZnJvbSAnLi4vc3RyaWN0LWh0dHAtcmVzcG9uc2UnO1xuXG5pbXBvcnQgeyBBbWltc1FhUnBkRGlzcG90aXRpb25EdG8gfSBmcm9tICcuLi9tb2RlbHMvYW1pbXMtcWEtcnBkLWRpc3BvdGl0aW9uLWR0byc7XG5pbXBvcnQgeyBxYVJwZERpc3BvdGl0aW9uQ29udHJvbGxlckNyZWF0ZSB9IGZyb20gJy4uL2ZuL3FhLXJwZC1kaXNwb3RpdGlvbi9xYS1ycGQtZGlzcG90aXRpb24tY29udHJvbGxlci1jcmVhdGUnO1xuaW1wb3J0IHsgUWFScGREaXNwb3RpdGlvbkNvbnRyb2xsZXJDcmVhdGUkUGFyYW1zIH0gZnJvbSAnLi4vZm4vcWEtcnBkLWRpc3BvdGl0aW9uL3FhLXJwZC1kaXNwb3RpdGlvbi1jb250cm9sbGVyLWNyZWF0ZSc7XG5pbXBvcnQgeyBxYVJwZERpc3BvdGl0aW9uQ29udHJvbGxlckZpbmRBbGwgfSBmcm9tICcuLi9mbi9xYS1ycGQtZGlzcG90aXRpb24vcWEtcnBkLWRpc3BvdGl0aW9uLWNvbnRyb2xsZXItZmluZC1hbGwnO1xuaW1wb3J0IHsgUWFScGREaXNwb3RpdGlvbkNvbnRyb2xsZXJGaW5kQWxsJFBhcmFtcyB9IGZyb20gJy4uL2ZuL3FhLXJwZC1kaXNwb3RpdGlvbi9xYS1ycGQtZGlzcG90aXRpb24tY29udHJvbGxlci1maW5kLWFsbCc7XG5pbXBvcnQgeyBxYVJwZERpc3BvdGl0aW9uQ29udHJvbGxlckZpbmRPbmUgfSBmcm9tICcuLi9mbi9xYS1ycGQtZGlzcG90aXRpb24vcWEtcnBkLWRpc3BvdGl0aW9uLWNvbnRyb2xsZXItZmluZC1vbmUnO1xuaW1wb3J0IHsgUWFScGREaXNwb3RpdGlvbkNvbnRyb2xsZXJGaW5kT25lJFBhcmFtcyB9IGZyb20gJy4uL2ZuL3FhLXJwZC1kaXNwb3RpdGlvbi9xYS1ycGQtZGlzcG90aXRpb24tY29udHJvbGxlci1maW5kLW9uZSc7XG5pbXBvcnQgeyBxYVJwZERpc3BvdGl0aW9uQ29udHJvbGxlclJlbW92ZSB9IGZyb20gJy4uL2ZuL3FhLXJwZC1kaXNwb3RpdGlvbi9xYS1ycGQtZGlzcG90aXRpb24tY29udHJvbGxlci1yZW1vdmUnO1xuaW1wb3J0IHsgUWFScGREaXNwb3RpdGlvbkNvbnRyb2xsZXJSZW1vdmUkUGFyYW1zIH0gZnJvbSAnLi4vZm4vcWEtcnBkLWRpc3BvdGl0aW9uL3FhLXJwZC1kaXNwb3RpdGlvbi1jb250cm9sbGVyLXJlbW92ZSc7XG5pbXBvcnQgeyBxYVJwZERpc3BvdGl0aW9uQ29udHJvbGxlclVwZGF0ZSB9IGZyb20gJy4uL2ZuL3FhLXJwZC1kaXNwb3RpdGlvbi9xYS1ycGQtZGlzcG90aXRpb24tY29udHJvbGxlci11cGRhdGUnO1xuaW1wb3J0IHsgUWFScGREaXNwb3RpdGlvbkNvbnRyb2xsZXJVcGRhdGUkUGFyYW1zIH0gZnJvbSAnLi4vZm4vcWEtcnBkLWRpc3BvdGl0aW9uL3FhLXJwZC1kaXNwb3RpdGlvbi1jb250cm9sbGVyLXVwZGF0ZSc7XG5cbkBJbmplY3RhYmxlKHsgcHJvdmlkZWRJbjogJ3Jvb3QnIH0pXG5leHBvcnQgY2xhc3MgUWFScGREaXNwb3RpdGlvblNlcnZpY2UgZXh0ZW5kcyBCYXNlU2VydmljZSB7XG4gIGNvbnN0cnVjdG9yKGNvbmZpZzogQXBpQ29uZmlndXJhdGlvbiwgaHR0cDogSHR0cENsaWVudCkge1xuICAgIHN1cGVyKGNvbmZpZywgaHR0cCk7XG4gIH1cblxuICAvKiogUGF0aCBwYXJ0IGZvciBvcGVyYXRpb24gYHFhUnBkRGlzcG90aXRpb25Db250cm9sbGVyRmluZEFsbCgpYCAqL1xuICBzdGF0aWMgcmVhZG9ubHkgUWFScGREaXNwb3RpdGlvbkNvbnRyb2xsZXJGaW5kQWxsUGF0aCA9ICcvYW1pbXMvcWFfcnBkX2Rpc3BvdGl0aW9uL3FhX3JwZF9kaXNwb3RpdGlvbic7XG5cbiAgLyoqXG4gICAqIFRoaXMgbWV0aG9kIHByb3ZpZGVzIGFjY2VzcyB0byB0aGUgZnVsbCBgSHR0cFJlc3BvbnNlYCwgYWxsb3dpbmcgYWNjZXNzIHRvIHJlc3BvbnNlIGhlYWRlcnMuXG4gICAqIFRvIGFjY2VzcyBvbmx5IHRoZSByZXNwb25zZSBib2R5LCB1c2UgYHFhUnBkRGlzcG90aXRpb25Db250cm9sbGVyRmluZEFsbCgpYCBpbnN0ZWFkLlxuICAgKlxuICAgKiBUaGlzIG1ldGhvZCBkb2Vzbid0IGV4cGVjdCBhbnkgcmVxdWVzdCBib2R5LlxuICAgKi9cbiAgcWFScGREaXNwb3RpdGlvbkNvbnRyb2xsZXJGaW5kQWxsJFJlc3BvbnNlKHBhcmFtcz86IFFhUnBkRGlzcG90aXRpb25Db250cm9sbGVyRmluZEFsbCRQYXJhbXMsIGNvbnRleHQ/OiBIdHRwQ29udGV4dCk6IE9ic2VydmFibGU8U3RyaWN0SHR0cFJlc3BvbnNlPHtcbidjb2RlJz86IG51bWJlcjtcbidwZXNhbic/OiBzdHJpbmc7XG4nZGF0YSc/OiBBcnJheTxBbWltc1FhUnBkRGlzcG90aXRpb25EdG8+O1xuJ3RvdGFsJz86IG51bWJlcjtcbn0+PiB7XG4gICAgcmV0dXJuIHFhUnBkRGlzcG90aXRpb25Db250cm9sbGVyRmluZEFsbCh0aGlzLmh0dHAsIHRoaXMucm9vdFVybCwgcGFyYW1zLCBjb250ZXh0KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGlzIG1ldGhvZCBwcm92aWRlcyBhY2Nlc3Mgb25seSB0byB0aGUgcmVzcG9uc2UgYm9keS5cbiAgICogVG8gYWNjZXNzIHRoZSBmdWxsIHJlc3BvbnNlIChmb3IgaGVhZGVycywgZm9yIGV4YW1wbGUpLCBgcWFScGREaXNwb3RpdGlvbkNvbnRyb2xsZXJGaW5kQWxsJFJlc3BvbnNlKClgIGluc3RlYWQuXG4gICAqXG4gICAqIFRoaXMgbWV0aG9kIGRvZXNuJ3QgZXhwZWN0IGFueSByZXF1ZXN0IGJvZHkuXG4gICAqL1xuICBxYVJwZERpc3BvdGl0aW9uQ29udHJvbGxlckZpbmRBbGwocGFyYW1zPzogUWFScGREaXNwb3RpdGlvbkNvbnRyb2xsZXJGaW5kQWxsJFBhcmFtcywgY29udGV4dD86IEh0dHBDb250ZXh0KTogT2JzZXJ2YWJsZTx7XG4nY29kZSc/OiBudW1iZXI7XG4ncGVzYW4nPzogc3RyaW5nO1xuJ2RhdGEnPzogQXJyYXk8QW1pbXNRYVJwZERpc3BvdGl0aW9uRHRvPjtcbid0b3RhbCc/OiBudW1iZXI7XG59PiB7XG4gICAgcmV0dXJuIHRoaXMucWFScGREaXNwb3RpdGlvbkNvbnRyb2xsZXJGaW5kQWxsJFJlc3BvbnNlKHBhcmFtcywgY29udGV4dCkucGlwZShcbiAgICAgIG1hcCgocjogU3RyaWN0SHR0cFJlc3BvbnNlPHtcbidjb2RlJz86IG51bWJlcjtcbidwZXNhbic/OiBzdHJpbmc7XG4nZGF0YSc/OiBBcnJheTxBbWltc1FhUnBkRGlzcG90aXRpb25EdG8+O1xuJ3RvdGFsJz86IG51bWJlcjtcbn0+KToge1xuJ2NvZGUnPzogbnVtYmVyO1xuJ3Blc2FuJz86IHN0cmluZztcbidkYXRhJz86IEFycmF5PEFtaW1zUWFScGREaXNwb3RpdGlvbkR0bz47XG4ndG90YWwnPzogbnVtYmVyO1xufSA9PiByLmJvZHkpXG4gICAgKTtcbiAgfVxuXG4gIC8qKiBQYXRoIHBhcnQgZm9yIG9wZXJhdGlvbiBgcWFScGREaXNwb3RpdGlvbkNvbnRyb2xsZXJDcmVhdGUoKWAgKi9cbiAgc3RhdGljIHJlYWRvbmx5IFFhUnBkRGlzcG90aXRpb25Db250cm9sbGVyQ3JlYXRlUGF0aCA9ICcvYW1pbXMvcWFfcnBkX2Rpc3BvdGl0aW9uL3FhX3JwZF9kaXNwb3RpdGlvbic7XG5cbiAgLyoqXG4gICAqIFRoaXMgbWV0aG9kIHByb3ZpZGVzIGFjY2VzcyB0byB0aGUgZnVsbCBgSHR0cFJlc3BvbnNlYCwgYWxsb3dpbmcgYWNjZXNzIHRvIHJlc3BvbnNlIGhlYWRlcnMuXG4gICAqIFRvIGFjY2VzcyBvbmx5IHRoZSByZXNwb25zZSBib2R5LCB1c2UgYHFhUnBkRGlzcG90aXRpb25Db250cm9sbGVyQ3JlYXRlKClgIGluc3RlYWQuXG4gICAqXG4gICAqIFRoaXMgbWV0aG9kIHNlbmRzIGBhcHBsaWNhdGlvbi9qc29uYCBhbmQgaGFuZGxlcyByZXF1ZXN0IGJvZHkgb2YgdHlwZSBgYXBwbGljYXRpb24vanNvbmAuXG4gICAqL1xuICBxYVJwZERpc3BvdGl0aW9uQ29udHJvbGxlckNyZWF0ZSRSZXNwb25zZShwYXJhbXM6IFFhUnBkRGlzcG90aXRpb25Db250cm9sbGVyQ3JlYXRlJFBhcmFtcywgY29udGV4dD86IEh0dHBDb250ZXh0KTogT2JzZXJ2YWJsZTxTdHJpY3RIdHRwUmVzcG9uc2U8e1xuJ2NvZGUnPzogbnVtYmVyO1xuJ3Blc2FuJz86IHN0cmluZztcbidkYXRhJz86IEFtaW1zUWFScGREaXNwb3RpdGlvbkR0bztcbn0+PiB7XG4gICAgcmV0dXJuIHFhUnBkRGlzcG90aXRpb25Db250cm9sbGVyQ3JlYXRlKHRoaXMuaHR0cCwgdGhpcy5yb290VXJsLCBwYXJhbXMsIGNvbnRleHQpO1xuICB9XG5cbiAgLyoqXG4gICAqIFRoaXMgbWV0aG9kIHByb3ZpZGVzIGFjY2VzcyBvbmx5IHRvIHRoZSByZXNwb25zZSBib2R5LlxuICAgKiBUbyBhY2Nlc3MgdGhlIGZ1bGwgcmVzcG9uc2UgKGZvciBoZWFkZXJzLCBmb3IgZXhhbXBsZSksIGBxYVJwZERpc3BvdGl0aW9uQ29udHJvbGxlckNyZWF0ZSRSZXNwb25zZSgpYCBpbnN0ZWFkLlxuICAgKlxuICAgKiBUaGlzIG1ldGhvZCBzZW5kcyBgYXBwbGljYXRpb24vanNvbmAgYW5kIGhhbmRsZXMgcmVxdWVzdCBib2R5IG9mIHR5cGUgYGFwcGxpY2F0aW9uL2pzb25gLlxuICAgKi9cbiAgcWFScGREaXNwb3RpdGlvbkNvbnRyb2xsZXJDcmVhdGUocGFyYW1zOiBRYVJwZERpc3BvdGl0aW9uQ29udHJvbGxlckNyZWF0ZSRQYXJhbXMsIGNvbnRleHQ/OiBIdHRwQ29udGV4dCk6IE9ic2VydmFibGU8e1xuJ2NvZGUnPzogbnVtYmVyO1xuJ3Blc2FuJz86IHN0cmluZztcbidkYXRhJz86IEFtaW1zUWFScGREaXNwb3RpdGlvbkR0bztcbn0+IHtcbiAgICByZXR1cm4gdGhpcy5xYVJwZERpc3BvdGl0aW9uQ29udHJvbGxlckNyZWF0ZSRSZXNwb25zZShwYXJhbXMsIGNvbnRleHQpLnBpcGUoXG4gICAgICBtYXAoKHI6IFN0cmljdEh0dHBSZXNwb25zZTx7XG4nY29kZSc/OiBudW1iZXI7XG4ncGVzYW4nPzogc3RyaW5nO1xuJ2RhdGEnPzogQW1pbXNRYVJwZERpc3BvdGl0aW9uRHRvO1xufT4pOiB7XG4nY29kZSc/OiBudW1iZXI7XG4ncGVzYW4nPzogc3RyaW5nO1xuJ2RhdGEnPzogQW1pbXNRYVJwZERpc3BvdGl0aW9uRHRvO1xufSA9PiByLmJvZHkpXG4gICAgKTtcbiAgfVxuXG4gIC8qKiBQYXRoIHBhcnQgZm9yIG9wZXJhdGlvbiBgcWFScGREaXNwb3RpdGlvbkNvbnRyb2xsZXJGaW5kT25lKClgICovXG4gIHN0YXRpYyByZWFkb25seSBRYVJwZERpc3BvdGl0aW9uQ29udHJvbGxlckZpbmRPbmVQYXRoID0gJy9hbWltcy9xYV9ycGRfZGlzcG90aXRpb24vcWFfcnBkX2Rpc3BvdGl0aW9uL3tpZH0nO1xuXG4gIC8qKlxuICAgKiBUaGlzIG1ldGhvZCBwcm92aWRlcyBhY2Nlc3MgdG8gdGhlIGZ1bGwgYEh0dHBSZXNwb25zZWAsIGFsbG93aW5nIGFjY2VzcyB0byByZXNwb25zZSBoZWFkZXJzLlxuICAgKiBUbyBhY2Nlc3Mgb25seSB0aGUgcmVzcG9uc2UgYm9keSwgdXNlIGBxYVJwZERpc3BvdGl0aW9uQ29udHJvbGxlckZpbmRPbmUoKWAgaW5zdGVhZC5cbiAgICpcbiAgICogVGhpcyBtZXRob2QgZG9lc24ndCBleHBlY3QgYW55IHJlcXVlc3QgYm9keS5cbiAgICovXG4gIHFhUnBkRGlzcG90aXRpb25Db250cm9sbGVyRmluZE9uZSRSZXNwb25zZShwYXJhbXM6IFFhUnBkRGlzcG90aXRpb25Db250cm9sbGVyRmluZE9uZSRQYXJhbXMsIGNvbnRleHQ/OiBIdHRwQ29udGV4dCk6IE9ic2VydmFibGU8U3RyaWN0SHR0cFJlc3BvbnNlPHtcbidjb2RlJz86IG51bWJlcjtcbidwZXNhbic/OiBzdHJpbmc7XG4nZGF0YSc/OiBBbWltc1FhUnBkRGlzcG90aXRpb25EdG87XG59Pj4ge1xuICAgIHJldHVybiBxYVJwZERpc3BvdGl0aW9uQ29udHJvbGxlckZpbmRPbmUodGhpcy5odHRwLCB0aGlzLnJvb3RVcmwsIHBhcmFtcywgY29udGV4dCk7XG4gIH1cblxuICAvKipcbiAgICogVGhpcyBtZXRob2QgcHJvdmlkZXMgYWNjZXNzIG9ubHkgdG8gdGhlIHJlc3BvbnNlIGJvZHkuXG4gICAqIFRvIGFjY2VzcyB0aGUgZnVsbCByZXNwb25zZSAoZm9yIGhlYWRlcnMsIGZvciBleGFtcGxlKSwgYHFhUnBkRGlzcG90aXRpb25Db250cm9sbGVyRmluZE9uZSRSZXNwb25zZSgpYCBpbnN0ZWFkLlxuICAgKlxuICAgKiBUaGlzIG1ldGhvZCBkb2Vzbid0IGV4cGVjdCBhbnkgcmVxdWVzdCBib2R5LlxuICAgKi9cbiAgcWFScGREaXNwb3RpdGlvbkNvbnRyb2xsZXJGaW5kT25lKHBhcmFtczogUWFScGREaXNwb3RpdGlvbkNvbnRyb2xsZXJGaW5kT25lJFBhcmFtcywgY29udGV4dD86IEh0dHBDb250ZXh0KTogT2JzZXJ2YWJsZTx7XG4nY29kZSc/OiBudW1iZXI7XG4ncGVzYW4nPzogc3RyaW5nO1xuJ2RhdGEnPzogQW1pbXNRYVJwZERpc3BvdGl0aW9uRHRvO1xufT4ge1xuICAgIHJldHVybiB0aGlzLnFhUnBkRGlzcG90aXRpb25Db250cm9sbGVyRmluZE9uZSRSZXNwb25zZShwYXJhbXMsIGNvbnRleHQpLnBpcGUoXG4gICAgICBtYXAoKHI6IFN0cmljdEh0dHBSZXNwb25zZTx7XG4nY29kZSc/OiBudW1iZXI7XG4ncGVzYW4nPzogc3RyaW5nO1xuJ2RhdGEnPzogQW1pbXNRYVJwZERpc3BvdGl0aW9uRHRvO1xufT4pOiB7XG4nY29kZSc/OiBudW1iZXI7XG4ncGVzYW4nPzogc3RyaW5nO1xuJ2RhdGEnPzogQW1pbXNRYVJwZERpc3BvdGl0aW9uRHRvO1xufSA9PiByLmJvZHkpXG4gICAgKTtcbiAgfVxuXG4gIC8qKiBQYXRoIHBhcnQgZm9yIG9wZXJhdGlvbiBgcWFScGREaXNwb3RpdGlvbkNvbnRyb2xsZXJVcGRhdGUoKWAgKi9cbiAgc3RhdGljIHJlYWRvbmx5IFFhUnBkRGlzcG90aXRpb25Db250cm9sbGVyVXBkYXRlUGF0aCA9ICcvYW1pbXMvcWFfcnBkX2Rpc3BvdGl0aW9uL3FhX3JwZF9kaXNwb3RpdGlvbi97aWR9JztcblxuICAvKipcbiAgICogVGhpcyBtZXRob2QgcHJvdmlkZXMgYWNjZXNzIHRvIHRoZSBmdWxsIGBIdHRwUmVzcG9uc2VgLCBhbGxvd2luZyBhY2Nlc3MgdG8gcmVzcG9uc2UgaGVhZGVycy5cbiAgICogVG8gYWNjZXNzIG9ubHkgdGhlIHJlc3BvbnNlIGJvZHksIHVzZSBgcWFScGREaXNwb3RpdGlvbkNvbnRyb2xsZXJVcGRhdGUoKWAgaW5zdGVhZC5cbiAgICpcbiAgICogVGhpcyBtZXRob2Qgc2VuZHMgYGFwcGxpY2F0aW9uL2pzb25gIGFuZCBoYW5kbGVzIHJlcXVlc3QgYm9keSBvZiB0eXBlIGBhcHBsaWNhdGlvbi9qc29uYC5cbiAgICovXG4gIHFhUnBkRGlzcG90aXRpb25Db250cm9sbGVyVXBkYXRlJFJlc3BvbnNlKHBhcmFtczogUWFScGREaXNwb3RpdGlvbkNvbnRyb2xsZXJVcGRhdGUkUGFyYW1zLCBjb250ZXh0PzogSHR0cENvbnRleHQpOiBPYnNlcnZhYmxlPFN0cmljdEh0dHBSZXNwb25zZTx7XG4nY29kZSc/OiBudW1iZXI7XG4ncGVzYW4nPzogc3RyaW5nO1xuJ2RhdGEnPzogQW1pbXNRYVJwZERpc3BvdGl0aW9uRHRvO1xufT4+IHtcbiAgICByZXR1cm4gcWFScGREaXNwb3RpdGlvbkNvbnRyb2xsZXJVcGRhdGUodGhpcy5odHRwLCB0aGlzLnJvb3RVcmwsIHBhcmFtcywgY29udGV4dCk7XG4gIH1cblxuICAvKipcbiAgICogVGhpcyBtZXRob2QgcHJvdmlkZXMgYWNjZXNzIG9ubHkgdG8gdGhlIHJlc3BvbnNlIGJvZHkuXG4gICAqIFRvIGFjY2VzcyB0aGUgZnVsbCByZXNwb25zZSAoZm9yIGhlYWRlcnMsIGZvciBleGFtcGxlKSwgYHFhUnBkRGlzcG90aXRpb25Db250cm9sbGVyVXBkYXRlJFJlc3BvbnNlKClgIGluc3RlYWQuXG4gICAqXG4gICAqIFRoaXMgbWV0aG9kIHNlbmRzIGBhcHBsaWNhdGlvbi9qc29uYCBhbmQgaGFuZGxlcyByZXF1ZXN0IGJvZHkgb2YgdHlwZSBgYXBwbGljYXRpb24vanNvbmAuXG4gICAqL1xuICBxYVJwZERpc3BvdGl0aW9uQ29udHJvbGxlclVwZGF0ZShwYXJhbXM6IFFhUnBkRGlzcG90aXRpb25Db250cm9sbGVyVXBkYXRlJFBhcmFtcywgY29udGV4dD86IEh0dHBDb250ZXh0KTogT2JzZXJ2YWJsZTx7XG4nY29kZSc/OiBudW1iZXI7XG4ncGVzYW4nPzogc3RyaW5nO1xuJ2RhdGEnPzogQW1pbXNRYVJwZERpc3BvdGl0aW9uRHRvO1xufT4ge1xuICAgIHJldHVybiB0aGlzLnFhUnBkRGlzcG90aXRpb25Db250cm9sbGVyVXBkYXRlJFJlc3BvbnNlKHBhcmFtcywgY29udGV4dCkucGlwZShcbiAgICAgIG1hcCgocjogU3RyaWN0SHR0cFJlc3BvbnNlPHtcbidjb2RlJz86IG51bWJlcjtcbidwZXNhbic/OiBzdHJpbmc7XG4nZGF0YSc/OiBBbWltc1FhUnBkRGlzcG90aXRpb25EdG87XG59Pik6IHtcbidjb2RlJz86IG51bWJlcjtcbidwZXNhbic/OiBzdHJpbmc7XG4nZGF0YSc/OiBBbWltc1FhUnBkRGlzcG90aXRpb25EdG87XG59ID0+IHIuYm9keSlcbiAgICApO1xuICB9XG5cbiAgLyoqIFBhdGggcGFydCBmb3Igb3BlcmF0aW9uIGBxYVJwZERpc3BvdGl0aW9uQ29udHJvbGxlclJlbW92ZSgpYCAqL1xuICBzdGF0aWMgcmVhZG9ubHkgUWFScGREaXNwb3RpdGlvbkNvbnRyb2xsZXJSZW1vdmVQYXRoID0gJy9hbWltcy9xYV9ycGRfZGlzcG90aXRpb24vcWFfcnBkX2Rpc3BvdGl0aW9uL3tpZH0nO1xuXG4gIC8qKlxuICAgKiBUaGlzIG1ldGhvZCBwcm92aWRlcyBhY2Nlc3MgdG8gdGhlIGZ1bGwgYEh0dHBSZXNwb25zZWAsIGFsbG93aW5nIGFjY2VzcyB0byByZXNwb25zZSBoZWFkZXJzLlxuICAgKiBUbyBhY2Nlc3Mgb25seSB0aGUgcmVzcG9uc2UgYm9keSwgdXNlIGBxYVJwZERpc3BvdGl0aW9uQ29udHJvbGxlclJlbW92ZSgpYCBpbnN0ZWFkLlxuICAgKlxuICAgKiBUaGlzIG1ldGhvZCBkb2Vzbid0IGV4cGVjdCBhbnkgcmVxdWVzdCBib2R5LlxuICAgKi9cbiAgcWFScGREaXNwb3RpdGlvbkNvbnRyb2xsZXJSZW1vdmUkUmVzcG9uc2UocGFyYW1zOiBRYVJwZERpc3BvdGl0aW9uQ29udHJvbGxlclJlbW92ZSRQYXJhbXMsIGNvbnRleHQ/OiBIdHRwQ29udGV4dCk6IE9ic2VydmFibGU8U3RyaWN0SHR0cFJlc3BvbnNlPHtcbidjb2RlJz86IG51bWJlcjtcbidwZXNhbic/OiBzdHJpbmc7XG4nZGF0YSc/OiBBbWltc1FhUnBkRGlzcG90aXRpb25EdG87XG59Pj4ge1xuICAgIHJldHVybiBxYVJwZERpc3BvdGl0aW9uQ29udHJvbGxlclJlbW92ZSh0aGlzLmh0dHAsIHRoaXMucm9vdFVybCwgcGFyYW1zLCBjb250ZXh0KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGlzIG1ldGhvZCBwcm92aWRlcyBhY2Nlc3Mgb25seSB0byB0aGUgcmVzcG9uc2UgYm9keS5cbiAgICogVG8gYWNjZXNzIHRoZSBmdWxsIHJlc3BvbnNlIChmb3IgaGVhZGVycywgZm9yIGV4YW1wbGUpLCBgcWFScGREaXNwb3RpdGlvbkNvbnRyb2xsZXJSZW1vdmUkUmVzcG9uc2UoKWAgaW5zdGVhZC5cbiAgICpcbiAgICogVGhpcyBtZXRob2QgZG9lc24ndCBleHBlY3QgYW55IHJlcXVlc3QgYm9keS5cbiAgICovXG4gIHFhUnBkRGlzcG90aXRpb25Db250cm9sbGVyUmVtb3ZlKHBhcmFtczogUWFScGREaXNwb3RpdGlvbkNvbnRyb2xsZXJSZW1vdmUkUGFyYW1zLCBjb250ZXh0PzogSHR0cENvbnRleHQpOiBPYnNlcnZhYmxlPHtcbidjb2RlJz86IG51bWJlcjtcbidwZXNhbic/OiBzdHJpbmc7XG4nZGF0YSc/OiBBbWltc1FhUnBkRGlzcG90aXRpb25EdG87XG59PiB7XG4gICAgcmV0dXJuIHRoaXMucWFScGREaXNwb3RpdGlvbkNvbnRyb2xsZXJSZW1vdmUkUmVzcG9uc2UocGFyYW1zLCBjb250ZXh0KS5waXBlKFxuICAgICAgbWFwKChyOiBTdHJpY3RIdHRwUmVzcG9uc2U8e1xuJ2NvZGUnPzogbnVtYmVyO1xuJ3Blc2FuJz86IHN0cmluZztcbidkYXRhJz86IEFtaW1zUWFScGREaXNwb3RpdGlvbkR0bztcbn0+KToge1xuJ2NvZGUnPzogbnVtYmVyO1xuJ3Blc2FuJz86IHN0cmluZztcbidkYXRhJz86IEFtaW1zUWFScGREaXNwb3RpdGlvbkR0bztcbn0gPT4gci5ib2R5KVxuICAgICk7XG4gIH1cblxufVxuIl19
/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
import { HttpClient } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { map } from 'rxjs/operators';
import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { contractSiteControllerCreate } from '../fn/contract-site/contract-site-controller-create';
import { contractSiteControllerFindAll } from '../fn/contract-site/contract-site-controller-find-all';
import { contractSiteControllerFindOne } from '../fn/contract-site/contract-site-controller-find-one';
import { contractSiteControllerRemove } from '../fn/contract-site/contract-site-controller-remove';
import { contractSiteControllerUpdate } from '../fn/contract-site/contract-site-controller-update';
import * as i0 from "@angular/core";
import * as i1 from "../api-configuration";
import * as i2 from "@angular/common/http";
export class ContractSiteService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `contractSiteControllerFindAll()` */
    static { this.ContractSiteControllerFindAllPath = '/pelanggan/contract_site/contract_site'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `contractSiteControllerFindAll()` instead.
     *
     * This method doesn't expect any request body.
     */
    contractSiteControllerFindAll$Response(params, context) {
        return contractSiteControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `contractSiteControllerFindAll$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    contractSiteControllerFindAll(params, context) {
        return this.contractSiteControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `contractSiteControllerCreate()` */
    static { this.ContractSiteControllerCreatePath = '/pelanggan/contract_site/contract_site'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `contractSiteControllerCreate()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    contractSiteControllerCreate$Response(params, context) {
        return contractSiteControllerCreate(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `contractSiteControllerCreate$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    contractSiteControllerCreate(params, context) {
        return this.contractSiteControllerCreate$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `contractSiteControllerFindOne()` */
    static { this.ContractSiteControllerFindOnePath = '/pelanggan/contract_site/contract_site/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `contractSiteControllerFindOne()` instead.
     *
     * This method doesn't expect any request body.
     */
    contractSiteControllerFindOne$Response(params, context) {
        return contractSiteControllerFindOne(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `contractSiteControllerFindOne$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    contractSiteControllerFindOne(params, context) {
        return this.contractSiteControllerFindOne$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `contractSiteControllerUpdate()` */
    static { this.ContractSiteControllerUpdatePath = '/pelanggan/contract_site/contract_site/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `contractSiteControllerUpdate()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    contractSiteControllerUpdate$Response(params, context) {
        return contractSiteControllerUpdate(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `contractSiteControllerUpdate$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    contractSiteControllerUpdate(params, context) {
        return this.contractSiteControllerUpdate$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `contractSiteControllerRemove()` */
    static { this.ContractSiteControllerRemovePath = '/pelanggan/contract_site/contract_site/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `contractSiteControllerRemove()` instead.
     *
     * This method doesn't expect any request body.
     */
    contractSiteControllerRemove$Response(params, context) {
        return contractSiteControllerRemove(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `contractSiteControllerRemove$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    contractSiteControllerRemove(params, context) {
        return this.contractSiteControllerRemove$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: ContractSiteService, deps: [{ token: i1.ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: ContractSiteService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: ContractSiteService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: i1.ApiConfiguration }, { type: i2.HttpClient }] });
//# sourceMappingURL=data:application/json;base64,
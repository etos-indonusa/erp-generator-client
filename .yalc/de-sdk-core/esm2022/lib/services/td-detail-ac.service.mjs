/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
import { HttpClient } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { map } from 'rxjs/operators';
import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { tdDetailAcControllerCreate } from '../fn/td-detail-ac/td-detail-ac-controller-create';
import { tdDetailAcControllerFindAll } from '../fn/td-detail-ac/td-detail-ac-controller-find-all';
import { tdDetailAcControllerFindOne } from '../fn/td-detail-ac/td-detail-ac-controller-find-one';
import { tdDetailAcControllerRemove } from '../fn/td-detail-ac/td-detail-ac-controller-remove';
import { tdDetailAcControllerUpdate } from '../fn/td-detail-ac/td-detail-ac-controller-update';
import * as i0 from "@angular/core";
import * as i1 from "../api-configuration";
import * as i2 from "@angular/common/http";
export class TdDetailAcService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `tdDetailAcControllerFindAll()` */
    static { this.TdDetailAcControllerFindAllPath = '/amims/td_detail_ac/td_detail_ac'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `tdDetailAcControllerFindAll()` instead.
     *
     * This method doesn't expect any request body.
     */
    tdDetailAcControllerFindAll$Response(params, context) {
        return tdDetailAcControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `tdDetailAcControllerFindAll$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    tdDetailAcControllerFindAll(params, context) {
        return this.tdDetailAcControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `tdDetailAcControllerCreate()` */
    static { this.TdDetailAcControllerCreatePath = '/amims/td_detail_ac/td_detail_ac'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `tdDetailAcControllerCreate()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    tdDetailAcControllerCreate$Response(params, context) {
        return tdDetailAcControllerCreate(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `tdDetailAcControllerCreate$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    tdDetailAcControllerCreate(params, context) {
        return this.tdDetailAcControllerCreate$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `tdDetailAcControllerFindOne()` */
    static { this.TdDetailAcControllerFindOnePath = '/amims/td_detail_ac/td_detail_ac/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `tdDetailAcControllerFindOne()` instead.
     *
     * This method doesn't expect any request body.
     */
    tdDetailAcControllerFindOne$Response(params, context) {
        return tdDetailAcControllerFindOne(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `tdDetailAcControllerFindOne$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    tdDetailAcControllerFindOne(params, context) {
        return this.tdDetailAcControllerFindOne$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `tdDetailAcControllerUpdate()` */
    static { this.TdDetailAcControllerUpdatePath = '/amims/td_detail_ac/td_detail_ac/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `tdDetailAcControllerUpdate()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    tdDetailAcControllerUpdate$Response(params, context) {
        return tdDetailAcControllerUpdate(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `tdDetailAcControllerUpdate$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    tdDetailAcControllerUpdate(params, context) {
        return this.tdDetailAcControllerUpdate$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `tdDetailAcControllerRemove()` */
    static { this.TdDetailAcControllerRemovePath = '/amims/td_detail_ac/td_detail_ac/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `tdDetailAcControllerRemove()` instead.
     *
     * This method doesn't expect any request body.
     */
    tdDetailAcControllerRemove$Response(params, context) {
        return tdDetailAcControllerRemove(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `tdDetailAcControllerRemove$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    tdDetailAcControllerRemove(params, context) {
        return this.tdDetailAcControllerRemove$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: TdDetailAcService, deps: [{ token: i1.ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: TdDetailAcService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: TdDetailAcService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: i1.ApiConfiguration }, { type: i2.HttpClient }] });
//# sourceMappingURL=data:application/json;base64,
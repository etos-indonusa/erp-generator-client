/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
import { HttpClient } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { map } from 'rxjs/operators';
import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { engineerPmtrReportControllerFindAll } from '../fn/engineer-pmtr-report/engineer-pmtr-report-controller-find-all';
import { engineerPmtrReportControllerFindOne } from '../fn/engineer-pmtr-report/engineer-pmtr-report-controller-find-one';
import * as i0 from "@angular/core";
import * as i1 from "../api-configuration";
import * as i2 from "@angular/common/http";
export class EngineerPmtrReportService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `engineerPmtrReportControllerFindAll()` */
    static { this.EngineerPmtrReportControllerFindAllPath = '/amims/engineer_pmtr/engineer_pmtr_report/list'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `engineerPmtrReportControllerFindAll()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    engineerPmtrReportControllerFindAll$Response(params, context) {
        return engineerPmtrReportControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `engineerPmtrReportControllerFindAll$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    engineerPmtrReportControllerFindAll(params, context) {
        return this.engineerPmtrReportControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `engineerPmtrReportControllerFindOne()` */
    static { this.EngineerPmtrReportControllerFindOnePath = '/amims/engineer_pmtr/engineer_pmtr_report/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `engineerPmtrReportControllerFindOne()` instead.
     *
     * This method doesn't expect any request body.
     */
    engineerPmtrReportControllerFindOne$Response(params, context) {
        return engineerPmtrReportControllerFindOne(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `engineerPmtrReportControllerFindOne$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    engineerPmtrReportControllerFindOne(params, context) {
        return this.engineerPmtrReportControllerFindOne$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: EngineerPmtrReportService, deps: [{ token: i1.ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: EngineerPmtrReportService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: EngineerPmtrReportService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: i1.ApiConfiguration }, { type: i2.HttpClient }] });
//# sourceMappingURL=data:application/json;base64,
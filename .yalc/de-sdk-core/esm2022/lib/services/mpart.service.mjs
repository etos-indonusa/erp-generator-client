/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
import { HttpClient } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { map } from 'rxjs/operators';
import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { mpartControllerCreate } from '../fn/mpart/mpart-controller-create';
import { mpartControllerFindAll } from '../fn/mpart/mpart-controller-find-all';
import { mpartControllerFindOne } from '../fn/mpart/mpart-controller-find-one';
import { mpartControllerRemove } from '../fn/mpart/mpart-controller-remove';
import { mpartControllerUpdate } from '../fn/mpart/mpart-controller-update';
import * as i0 from "@angular/core";
import * as i1 from "../api-configuration";
import * as i2 from "@angular/common/http";
export class MpartService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `mpartControllerFindAll()` */
    static { this.MpartControllerFindAllPath = '/amims/mpart/mpart'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `mpartControllerFindAll()` instead.
     *
     * This method doesn't expect any request body.
     */
    mpartControllerFindAll$Response(params, context) {
        return mpartControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `mpartControllerFindAll$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    mpartControllerFindAll(params, context) {
        return this.mpartControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `mpartControllerCreate()` */
    static { this.MpartControllerCreatePath = '/amims/mpart/mpart'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `mpartControllerCreate()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    mpartControllerCreate$Response(params, context) {
        return mpartControllerCreate(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `mpartControllerCreate$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    mpartControllerCreate(params, context) {
        return this.mpartControllerCreate$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `mpartControllerFindOne()` */
    static { this.MpartControllerFindOnePath = '/amims/mpart/mpart/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `mpartControllerFindOne()` instead.
     *
     * This method doesn't expect any request body.
     */
    mpartControllerFindOne$Response(params, context) {
        return mpartControllerFindOne(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `mpartControllerFindOne$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    mpartControllerFindOne(params, context) {
        return this.mpartControllerFindOne$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `mpartControllerUpdate()` */
    static { this.MpartControllerUpdatePath = '/amims/mpart/mpart/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `mpartControllerUpdate()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    mpartControllerUpdate$Response(params, context) {
        return mpartControllerUpdate(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `mpartControllerUpdate$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    mpartControllerUpdate(params, context) {
        return this.mpartControllerUpdate$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `mpartControllerRemove()` */
    static { this.MpartControllerRemovePath = '/amims/mpart/mpart/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `mpartControllerRemove()` instead.
     *
     * This method doesn't expect any request body.
     */
    mpartControllerRemove$Response(params, context) {
        return mpartControllerRemove(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `mpartControllerRemove$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    mpartControllerRemove(params, context) {
        return this.mpartControllerRemove$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: MpartService, deps: [{ token: i1.ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: MpartService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: MpartService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: i1.ApiConfiguration }, { type: i2.HttpClient }] });
//# sourceMappingURL=data:application/json;base64,
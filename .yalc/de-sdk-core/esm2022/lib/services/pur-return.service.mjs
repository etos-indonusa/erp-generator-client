/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
import { HttpClient } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { map } from 'rxjs/operators';
import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { purReturnControllerCreate } from '../fn/pur-return/pur-return-controller-create';
import { purReturnControllerFindAll } from '../fn/pur-return/pur-return-controller-find-all';
import { purReturnControllerFindOne } from '../fn/pur-return/pur-return-controller-find-one';
import { purReturnControllerRemove } from '../fn/pur-return/pur-return-controller-remove';
import { purReturnControllerUpdate } from '../fn/pur-return/pur-return-controller-update';
import * as i0 from "@angular/core";
import * as i1 from "../api-configuration";
import * as i2 from "@angular/common/http";
export class PurReturnService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `purReturnControllerFindAll()` */
    static { this.PurReturnControllerFindAllPath = '/amims/pur_return/pur_return'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `purReturnControllerFindAll()` instead.
     *
     * This method doesn't expect any request body.
     */
    purReturnControllerFindAll$Response(params, context) {
        return purReturnControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `purReturnControllerFindAll$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    purReturnControllerFindAll(params, context) {
        return this.purReturnControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `purReturnControllerCreate()` */
    static { this.PurReturnControllerCreatePath = '/amims/pur_return/pur_return'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `purReturnControllerCreate()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    purReturnControllerCreate$Response(params, context) {
        return purReturnControllerCreate(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `purReturnControllerCreate$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    purReturnControllerCreate(params, context) {
        return this.purReturnControllerCreate$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `purReturnControllerFindOne()` */
    static { this.PurReturnControllerFindOnePath = '/amims/pur_return/pur_return/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `purReturnControllerFindOne()` instead.
     *
     * This method doesn't expect any request body.
     */
    purReturnControllerFindOne$Response(params, context) {
        return purReturnControllerFindOne(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `purReturnControllerFindOne$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    purReturnControllerFindOne(params, context) {
        return this.purReturnControllerFindOne$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `purReturnControllerUpdate()` */
    static { this.PurReturnControllerUpdatePath = '/amims/pur_return/pur_return/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `purReturnControllerUpdate()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    purReturnControllerUpdate$Response(params, context) {
        return purReturnControllerUpdate(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `purReturnControllerUpdate$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    purReturnControllerUpdate(params, context) {
        return this.purReturnControllerUpdate$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `purReturnControllerRemove()` */
    static { this.PurReturnControllerRemovePath = '/amims/pur_return/pur_return/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `purReturnControllerRemove()` instead.
     *
     * This method doesn't expect any request body.
     */
    purReturnControllerRemove$Response(params, context) {
        return purReturnControllerRemove(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `purReturnControllerRemove$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    purReturnControllerRemove(params, context) {
        return this.purReturnControllerRemove$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: PurReturnService, deps: [{ token: i1.ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: PurReturnService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: PurReturnService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: i1.ApiConfiguration }, { type: i2.HttpClient }] });
//# sourceMappingURL=data:application/json;base64,
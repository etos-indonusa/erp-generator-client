/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
import { HttpClient } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { map } from 'rxjs/operators';
import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { invoiceControllerCreate } from '../fn/invoice/invoice-controller-create';
import { invoiceControllerFindAll } from '../fn/invoice/invoice-controller-find-all';
import { invoiceControllerFindOne } from '../fn/invoice/invoice-controller-find-one';
import { invoiceControllerRemove } from '../fn/invoice/invoice-controller-remove';
import { invoiceControllerUpdate } from '../fn/invoice/invoice-controller-update';
import * as i0 from "@angular/core";
import * as i1 from "../api-configuration";
import * as i2 from "@angular/common/http";
export class InvoiceService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `invoiceControllerFindAll()` */
    static { this.InvoiceControllerFindAllPath = '/auth/invoice/invoice'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `invoiceControllerFindAll()` instead.
     *
     * This method doesn't expect any request body.
     */
    invoiceControllerFindAll$Response(params, context) {
        return invoiceControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `invoiceControllerFindAll$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    invoiceControllerFindAll(params, context) {
        return this.invoiceControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `invoiceControllerCreate()` */
    static { this.InvoiceControllerCreatePath = '/auth/invoice/invoice'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `invoiceControllerCreate()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    invoiceControllerCreate$Response(params, context) {
        return invoiceControllerCreate(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `invoiceControllerCreate$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    invoiceControllerCreate(params, context) {
        return this.invoiceControllerCreate$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `invoiceControllerFindOne()` */
    static { this.InvoiceControllerFindOnePath = '/auth/invoice/invoice/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `invoiceControllerFindOne()` instead.
     *
     * This method doesn't expect any request body.
     */
    invoiceControllerFindOne$Response(params, context) {
        return invoiceControllerFindOne(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `invoiceControllerFindOne$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    invoiceControllerFindOne(params, context) {
        return this.invoiceControllerFindOne$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `invoiceControllerUpdate()` */
    static { this.InvoiceControllerUpdatePath = '/auth/invoice/invoice/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `invoiceControllerUpdate()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    invoiceControllerUpdate$Response(params, context) {
        return invoiceControllerUpdate(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `invoiceControllerUpdate$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    invoiceControllerUpdate(params, context) {
        return this.invoiceControllerUpdate$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `invoiceControllerRemove()` */
    static { this.InvoiceControllerRemovePath = '/auth/invoice/invoice/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `invoiceControllerRemove()` instead.
     *
     * This method doesn't expect any request body.
     */
    invoiceControllerRemove$Response(params, context) {
        return invoiceControllerRemove(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `invoiceControllerRemove$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    invoiceControllerRemove(params, context) {
        return this.invoiceControllerRemove$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: InvoiceService, deps: [{ token: i1.ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: InvoiceService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: InvoiceService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: i1.ApiConfiguration }, { type: i2.HttpClient }] });
//# sourceMappingURL=data:application/json;base64,
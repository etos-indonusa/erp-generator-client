/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
import { HttpClient } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { map } from 'rxjs/operators';
import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { typeOfworkReportControllerFindAll } from '../fn/type-ofwork-report/type-ofwork-report-controller-find-all';
import { typeOfworkReportControllerFindOne } from '../fn/type-ofwork-report/type-ofwork-report-controller-find-one';
import * as i0 from "@angular/core";
import * as i1 from "../api-configuration";
import * as i2 from "@angular/common/http";
export class TypeOfworkReportService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `typeOfworkReportControllerFindAll()` */
    static { this.TypeOfworkReportControllerFindAllPath = '/amims/type_ofwork/type_ofwork_report/list'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `typeOfworkReportControllerFindAll()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    typeOfworkReportControllerFindAll$Response(params, context) {
        return typeOfworkReportControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `typeOfworkReportControllerFindAll$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    typeOfworkReportControllerFindAll(params, context) {
        return this.typeOfworkReportControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `typeOfworkReportControllerFindOne()` */
    static { this.TypeOfworkReportControllerFindOnePath = '/amims/type_ofwork/type_ofwork_report/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `typeOfworkReportControllerFindOne()` instead.
     *
     * This method doesn't expect any request body.
     */
    typeOfworkReportControllerFindOne$Response(params, context) {
        return typeOfworkReportControllerFindOne(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `typeOfworkReportControllerFindOne$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    typeOfworkReportControllerFindOne(params, context) {
        return this.typeOfworkReportControllerFindOne$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: TypeOfworkReportService, deps: [{ token: i1.ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: TypeOfworkReportService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: TypeOfworkReportService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: i1.ApiConfiguration }, { type: i2.HttpClient }] });
//# sourceMappingURL=data:application/json;base64,
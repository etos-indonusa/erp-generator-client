/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
import { HttpClient } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { map } from 'rxjs/operators';
import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { engineerPrisControllerCreate } from '../fn/engineer-pris/engineer-pris-controller-create';
import { engineerPrisControllerFindAll } from '../fn/engineer-pris/engineer-pris-controller-find-all';
import { engineerPrisControllerFindOne } from '../fn/engineer-pris/engineer-pris-controller-find-one';
import { engineerPrisControllerRemove } from '../fn/engineer-pris/engineer-pris-controller-remove';
import { engineerPrisControllerUpdate } from '../fn/engineer-pris/engineer-pris-controller-update';
import * as i0 from "@angular/core";
import * as i1 from "../api-configuration";
import * as i2 from "@angular/common/http";
export class EngineerPrisService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `engineerPrisControllerFindAll()` */
    static { this.EngineerPrisControllerFindAllPath = '/amims/engineer_pris/engineer_pris'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `engineerPrisControllerFindAll()` instead.
     *
     * This method doesn't expect any request body.
     */
    engineerPrisControllerFindAll$Response(params, context) {
        return engineerPrisControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `engineerPrisControllerFindAll$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    engineerPrisControllerFindAll(params, context) {
        return this.engineerPrisControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `engineerPrisControllerCreate()` */
    static { this.EngineerPrisControllerCreatePath = '/amims/engineer_pris/engineer_pris'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `engineerPrisControllerCreate()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    engineerPrisControllerCreate$Response(params, context) {
        return engineerPrisControllerCreate(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `engineerPrisControllerCreate$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    engineerPrisControllerCreate(params, context) {
        return this.engineerPrisControllerCreate$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `engineerPrisControllerFindOne()` */
    static { this.EngineerPrisControllerFindOnePath = '/amims/engineer_pris/engineer_pris/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `engineerPrisControllerFindOne()` instead.
     *
     * This method doesn't expect any request body.
     */
    engineerPrisControllerFindOne$Response(params, context) {
        return engineerPrisControllerFindOne(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `engineerPrisControllerFindOne$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    engineerPrisControllerFindOne(params, context) {
        return this.engineerPrisControllerFindOne$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `engineerPrisControllerUpdate()` */
    static { this.EngineerPrisControllerUpdatePath = '/amims/engineer_pris/engineer_pris/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `engineerPrisControllerUpdate()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    engineerPrisControllerUpdate$Response(params, context) {
        return engineerPrisControllerUpdate(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `engineerPrisControllerUpdate$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    engineerPrisControllerUpdate(params, context) {
        return this.engineerPrisControllerUpdate$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `engineerPrisControllerRemove()` */
    static { this.EngineerPrisControllerRemovePath = '/amims/engineer_pris/engineer_pris/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `engineerPrisControllerRemove()` instead.
     *
     * This method doesn't expect any request body.
     */
    engineerPrisControllerRemove$Response(params, context) {
        return engineerPrisControllerRemove(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `engineerPrisControllerRemove$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    engineerPrisControllerRemove(params, context) {
        return this.engineerPrisControllerRemove$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: EngineerPrisService, deps: [{ token: i1.ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: EngineerPrisService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: EngineerPrisService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: i1.ApiConfiguration }, { type: i2.HttpClient }] });
//# sourceMappingURL=data:application/json;base64,
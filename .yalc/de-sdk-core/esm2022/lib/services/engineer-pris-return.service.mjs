/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
import { HttpClient } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { map } from 'rxjs/operators';
import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { engineerPrisReturnControllerCreate } from '../fn/engineer-pris-return/engineer-pris-return-controller-create';
import { engineerPrisReturnControllerFindAll } from '../fn/engineer-pris-return/engineer-pris-return-controller-find-all';
import { engineerPrisReturnControllerFindOne } from '../fn/engineer-pris-return/engineer-pris-return-controller-find-one';
import { engineerPrisReturnControllerRemove } from '../fn/engineer-pris-return/engineer-pris-return-controller-remove';
import { engineerPrisReturnControllerUpdate } from '../fn/engineer-pris-return/engineer-pris-return-controller-update';
import * as i0 from "@angular/core";
import * as i1 from "../api-configuration";
import * as i2 from "@angular/common/http";
export class EngineerPrisReturnService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `engineerPrisReturnControllerFindAll()` */
    static { this.EngineerPrisReturnControllerFindAllPath = '/amims/engineer_pris_return/engineer_pris_return'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `engineerPrisReturnControllerFindAll()` instead.
     *
     * This method doesn't expect any request body.
     */
    engineerPrisReturnControllerFindAll$Response(params, context) {
        return engineerPrisReturnControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `engineerPrisReturnControllerFindAll$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    engineerPrisReturnControllerFindAll(params, context) {
        return this.engineerPrisReturnControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `engineerPrisReturnControllerCreate()` */
    static { this.EngineerPrisReturnControllerCreatePath = '/amims/engineer_pris_return/engineer_pris_return'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `engineerPrisReturnControllerCreate()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    engineerPrisReturnControllerCreate$Response(params, context) {
        return engineerPrisReturnControllerCreate(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `engineerPrisReturnControllerCreate$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    engineerPrisReturnControllerCreate(params, context) {
        return this.engineerPrisReturnControllerCreate$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `engineerPrisReturnControllerFindOne()` */
    static { this.EngineerPrisReturnControllerFindOnePath = '/amims/engineer_pris_return/engineer_pris_return/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `engineerPrisReturnControllerFindOne()` instead.
     *
     * This method doesn't expect any request body.
     */
    engineerPrisReturnControllerFindOne$Response(params, context) {
        return engineerPrisReturnControllerFindOne(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `engineerPrisReturnControllerFindOne$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    engineerPrisReturnControllerFindOne(params, context) {
        return this.engineerPrisReturnControllerFindOne$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `engineerPrisReturnControllerUpdate()` */
    static { this.EngineerPrisReturnControllerUpdatePath = '/amims/engineer_pris_return/engineer_pris_return/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `engineerPrisReturnControllerUpdate()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    engineerPrisReturnControllerUpdate$Response(params, context) {
        return engineerPrisReturnControllerUpdate(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `engineerPrisReturnControllerUpdate$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    engineerPrisReturnControllerUpdate(params, context) {
        return this.engineerPrisReturnControllerUpdate$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `engineerPrisReturnControllerRemove()` */
    static { this.EngineerPrisReturnControllerRemovePath = '/amims/engineer_pris_return/engineer_pris_return/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `engineerPrisReturnControllerRemove()` instead.
     *
     * This method doesn't expect any request body.
     */
    engineerPrisReturnControllerRemove$Response(params, context) {
        return engineerPrisReturnControllerRemove(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `engineerPrisReturnControllerRemove$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    engineerPrisReturnControllerRemove(params, context) {
        return this.engineerPrisReturnControllerRemove$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: EngineerPrisReturnService, deps: [{ token: i1.ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: EngineerPrisReturnService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: EngineerPrisReturnService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: i1.ApiConfiguration }, { type: i2.HttpClient }] });
//# sourceMappingURL=data:application/json;base64,
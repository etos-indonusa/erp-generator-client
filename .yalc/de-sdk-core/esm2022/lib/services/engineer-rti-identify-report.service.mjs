/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
import { HttpClient } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { map } from 'rxjs/operators';
import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { engineerRtiIdentifyReportControllerFindAll } from '../fn/engineer-rti-identify-report/engineer-rti-identify-report-controller-find-all';
import { engineerRtiIdentifyReportControllerFindOne } from '../fn/engineer-rti-identify-report/engineer-rti-identify-report-controller-find-one';
import * as i0 from "@angular/core";
import * as i1 from "../api-configuration";
import * as i2 from "@angular/common/http";
export class EngineerRtiIdentifyReportService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `engineerRtiIdentifyReportControllerFindAll()` */
    static { this.EngineerRtiIdentifyReportControllerFindAllPath = '/amims/engineer_rti_identify/engineer_rti_identify_report/list'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `engineerRtiIdentifyReportControllerFindAll()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    engineerRtiIdentifyReportControllerFindAll$Response(params, context) {
        return engineerRtiIdentifyReportControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `engineerRtiIdentifyReportControllerFindAll$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    engineerRtiIdentifyReportControllerFindAll(params, context) {
        return this.engineerRtiIdentifyReportControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `engineerRtiIdentifyReportControllerFindOne()` */
    static { this.EngineerRtiIdentifyReportControllerFindOnePath = '/amims/engineer_rti_identify/engineer_rti_identify_report/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `engineerRtiIdentifyReportControllerFindOne()` instead.
     *
     * This method doesn't expect any request body.
     */
    engineerRtiIdentifyReportControllerFindOne$Response(params, context) {
        return engineerRtiIdentifyReportControllerFindOne(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `engineerRtiIdentifyReportControllerFindOne$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    engineerRtiIdentifyReportControllerFindOne(params, context) {
        return this.engineerRtiIdentifyReportControllerFindOne$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: EngineerRtiIdentifyReportService, deps: [{ token: i1.ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: EngineerRtiIdentifyReportService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: EngineerRtiIdentifyReportService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: i1.ApiConfiguration }, { type: i2.HttpClient }] });
//# sourceMappingURL=data:application/json;base64,
/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
import { HttpClient } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { map } from 'rxjs/operators';
import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { userGroupControllerCreate } from '../fn/user-group/user-group-controller-create';
import { userGroupControllerFindAll } from '../fn/user-group/user-group-controller-find-all';
import { userGroupControllerFindOne } from '../fn/user-group/user-group-controller-find-one';
import { userGroupControllerRemove } from '../fn/user-group/user-group-controller-remove';
import { userGroupControllerUpdate } from '../fn/user-group/user-group-controller-update';
import * as i0 from "@angular/core";
import * as i1 from "../api-configuration";
import * as i2 from "@angular/common/http";
export class UserGroupService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `userGroupControllerFindAll()` */
    static { this.UserGroupControllerFindAllPath = '/auth/user_group/user_group'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `userGroupControllerFindAll()` instead.
     *
     * This method doesn't expect any request body.
     */
    userGroupControllerFindAll$Response(params, context) {
        return userGroupControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `userGroupControllerFindAll$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    userGroupControllerFindAll(params, context) {
        return this.userGroupControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `userGroupControllerCreate()` */
    static { this.UserGroupControllerCreatePath = '/auth/user_group/user_group'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `userGroupControllerCreate()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    userGroupControllerCreate$Response(params, context) {
        return userGroupControllerCreate(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `userGroupControllerCreate$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    userGroupControllerCreate(params, context) {
        return this.userGroupControllerCreate$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `userGroupControllerFindOne()` */
    static { this.UserGroupControllerFindOnePath = '/auth/user_group/user_group/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `userGroupControllerFindOne()` instead.
     *
     * This method doesn't expect any request body.
     */
    userGroupControllerFindOne$Response(params, context) {
        return userGroupControllerFindOne(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `userGroupControllerFindOne$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    userGroupControllerFindOne(params, context) {
        return this.userGroupControllerFindOne$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `userGroupControllerUpdate()` */
    static { this.UserGroupControllerUpdatePath = '/auth/user_group/user_group/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `userGroupControllerUpdate()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    userGroupControllerUpdate$Response(params, context) {
        return userGroupControllerUpdate(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `userGroupControllerUpdate$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    userGroupControllerUpdate(params, context) {
        return this.userGroupControllerUpdate$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `userGroupControllerRemove()` */
    static { this.UserGroupControllerRemovePath = '/auth/user_group/user_group/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `userGroupControllerRemove()` instead.
     *
     * This method doesn't expect any request body.
     */
    userGroupControllerRemove$Response(params, context) {
        return userGroupControllerRemove(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `userGroupControllerRemove$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    userGroupControllerRemove(params, context) {
        return this.userGroupControllerRemove$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: UserGroupService, deps: [{ token: i1.ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: UserGroupService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: UserGroupService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: i1.ApiConfiguration }, { type: i2.HttpClient }] });
//# sourceMappingURL=data:application/json;base64,
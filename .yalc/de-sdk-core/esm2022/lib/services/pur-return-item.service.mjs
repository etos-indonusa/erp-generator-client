/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
import { HttpClient } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { map } from 'rxjs/operators';
import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { purReturnItemControllerCreate } from '../fn/pur-return-item/pur-return-item-controller-create';
import { purReturnItemControllerFindAll } from '../fn/pur-return-item/pur-return-item-controller-find-all';
import { purReturnItemControllerFindOne } from '../fn/pur-return-item/pur-return-item-controller-find-one';
import { purReturnItemControllerRemove } from '../fn/pur-return-item/pur-return-item-controller-remove';
import { purReturnItemControllerUpdate } from '../fn/pur-return-item/pur-return-item-controller-update';
import * as i0 from "@angular/core";
import * as i1 from "../api-configuration";
import * as i2 from "@angular/common/http";
export class PurReturnItemService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `purReturnItemControllerFindAll()` */
    static { this.PurReturnItemControllerFindAllPath = '/amims/pur_return_item/pur_return_item'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `purReturnItemControllerFindAll()` instead.
     *
     * This method doesn't expect any request body.
     */
    purReturnItemControllerFindAll$Response(params, context) {
        return purReturnItemControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `purReturnItemControllerFindAll$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    purReturnItemControllerFindAll(params, context) {
        return this.purReturnItemControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `purReturnItemControllerCreate()` */
    static { this.PurReturnItemControllerCreatePath = '/amims/pur_return_item/pur_return_item'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `purReturnItemControllerCreate()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    purReturnItemControllerCreate$Response(params, context) {
        return purReturnItemControllerCreate(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `purReturnItemControllerCreate$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    purReturnItemControllerCreate(params, context) {
        return this.purReturnItemControllerCreate$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `purReturnItemControllerFindOne()` */
    static { this.PurReturnItemControllerFindOnePath = '/amims/pur_return_item/pur_return_item/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `purReturnItemControllerFindOne()` instead.
     *
     * This method doesn't expect any request body.
     */
    purReturnItemControllerFindOne$Response(params, context) {
        return purReturnItemControllerFindOne(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `purReturnItemControllerFindOne$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    purReturnItemControllerFindOne(params, context) {
        return this.purReturnItemControllerFindOne$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `purReturnItemControllerUpdate()` */
    static { this.PurReturnItemControllerUpdatePath = '/amims/pur_return_item/pur_return_item/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `purReturnItemControllerUpdate()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    purReturnItemControllerUpdate$Response(params, context) {
        return purReturnItemControllerUpdate(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `purReturnItemControllerUpdate$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    purReturnItemControllerUpdate(params, context) {
        return this.purReturnItemControllerUpdate$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `purReturnItemControllerRemove()` */
    static { this.PurReturnItemControllerRemovePath = '/amims/pur_return_item/pur_return_item/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `purReturnItemControllerRemove()` instead.
     *
     * This method doesn't expect any request body.
     */
    purReturnItemControllerRemove$Response(params, context) {
        return purReturnItemControllerRemove(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `purReturnItemControllerRemove$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    purReturnItemControllerRemove(params, context) {
        return this.purReturnItemControllerRemove$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: PurReturnItemService, deps: [{ token: i1.ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: PurReturnItemService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: PurReturnItemService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: i1.ApiConfiguration }, { type: i2.HttpClient }] });
//# sourceMappingURL=data:application/json;base64,
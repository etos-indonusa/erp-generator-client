/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
import { HttpClient } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { map } from 'rxjs/operators';
import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { engineerPmtrItemControllerCreate } from '../fn/engineer-pmtr-item/engineer-pmtr-item-controller-create';
import { engineerPmtrItemControllerFindAll } from '../fn/engineer-pmtr-item/engineer-pmtr-item-controller-find-all';
import { engineerPmtrItemControllerFindOne } from '../fn/engineer-pmtr-item/engineer-pmtr-item-controller-find-one';
import { engineerPmtrItemControllerRemove } from '../fn/engineer-pmtr-item/engineer-pmtr-item-controller-remove';
import { engineerPmtrItemControllerUpdate } from '../fn/engineer-pmtr-item/engineer-pmtr-item-controller-update';
import * as i0 from "@angular/core";
import * as i1 from "../api-configuration";
import * as i2 from "@angular/common/http";
export class EngineerPmtrItemService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `engineerPmtrItemControllerFindAll()` */
    static { this.EngineerPmtrItemControllerFindAllPath = '/amims/engineer_pmtr_item/engineer_pmtr_item'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `engineerPmtrItemControllerFindAll()` instead.
     *
     * This method doesn't expect any request body.
     */
    engineerPmtrItemControllerFindAll$Response(params, context) {
        return engineerPmtrItemControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `engineerPmtrItemControllerFindAll$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    engineerPmtrItemControllerFindAll(params, context) {
        return this.engineerPmtrItemControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `engineerPmtrItemControllerCreate()` */
    static { this.EngineerPmtrItemControllerCreatePath = '/amims/engineer_pmtr_item/engineer_pmtr_item'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `engineerPmtrItemControllerCreate()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    engineerPmtrItemControllerCreate$Response(params, context) {
        return engineerPmtrItemControllerCreate(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `engineerPmtrItemControllerCreate$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    engineerPmtrItemControllerCreate(params, context) {
        return this.engineerPmtrItemControllerCreate$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `engineerPmtrItemControllerFindOne()` */
    static { this.EngineerPmtrItemControllerFindOnePath = '/amims/engineer_pmtr_item/engineer_pmtr_item/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `engineerPmtrItemControllerFindOne()` instead.
     *
     * This method doesn't expect any request body.
     */
    engineerPmtrItemControllerFindOne$Response(params, context) {
        return engineerPmtrItemControllerFindOne(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `engineerPmtrItemControllerFindOne$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    engineerPmtrItemControllerFindOne(params, context) {
        return this.engineerPmtrItemControllerFindOne$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `engineerPmtrItemControllerUpdate()` */
    static { this.EngineerPmtrItemControllerUpdatePath = '/amims/engineer_pmtr_item/engineer_pmtr_item/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `engineerPmtrItemControllerUpdate()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    engineerPmtrItemControllerUpdate$Response(params, context) {
        return engineerPmtrItemControllerUpdate(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `engineerPmtrItemControllerUpdate$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    engineerPmtrItemControllerUpdate(params, context) {
        return this.engineerPmtrItemControllerUpdate$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `engineerPmtrItemControllerRemove()` */
    static { this.EngineerPmtrItemControllerRemovePath = '/amims/engineer_pmtr_item/engineer_pmtr_item/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `engineerPmtrItemControllerRemove()` instead.
     *
     * This method doesn't expect any request body.
     */
    engineerPmtrItemControllerRemove$Response(params, context) {
        return engineerPmtrItemControllerRemove(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `engineerPmtrItemControllerRemove$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    engineerPmtrItemControllerRemove(params, context) {
        return this.engineerPmtrItemControllerRemove$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: EngineerPmtrItemService, deps: [{ token: i1.ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: EngineerPmtrItemService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: EngineerPmtrItemService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: i1.ApiConfiguration }, { type: i2.HttpClient }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZW5naW5lZXItcG10ci1pdGVtLnNlcnZpY2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9zZGtjb3JlL3NyYy9saWIvc2VydmljZXMvZW5naW5lZXItcG10ci1pdGVtLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsb0JBQW9CO0FBQ3BCLG9CQUFvQjtBQUNwQixtREFBbUQ7QUFFbkQsT0FBTyxFQUFFLFVBQVUsRUFBZSxNQUFNLHNCQUFzQixDQUFDO0FBQy9ELE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFM0MsT0FBTyxFQUFFLEdBQUcsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBRXJDLE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUM5QyxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQztBQUl4RCxPQUFPLEVBQUUsZ0NBQWdDLEVBQUUsTUFBTSwrREFBK0QsQ0FBQztBQUVqSCxPQUFPLEVBQUUsaUNBQWlDLEVBQUUsTUFBTSxpRUFBaUUsQ0FBQztBQUVwSCxPQUFPLEVBQUUsaUNBQWlDLEVBQUUsTUFBTSxpRUFBaUUsQ0FBQztBQUVwSCxPQUFPLEVBQUUsZ0NBQWdDLEVBQUUsTUFBTSwrREFBK0QsQ0FBQztBQUVqSCxPQUFPLEVBQUUsZ0NBQWdDLEVBQUUsTUFBTSwrREFBK0QsQ0FBQzs7OztBQUlqSCxNQUFNLE9BQU8sdUJBQXdCLFNBQVEsV0FBVztJQUN0RCxZQUFZLE1BQXdCLEVBQUUsSUFBZ0I7UUFDcEQsS0FBSyxDQUFDLE1BQU0sRUFBRSxJQUFJLENBQUMsQ0FBQztJQUN0QixDQUFDO0lBRUQsb0VBQW9FO2FBQ3BELDBDQUFxQyxHQUFHLDhDQUE4QyxBQUFqRCxDQUFrRDtJQUV2Rzs7Ozs7T0FLRztJQUNILDBDQUEwQyxDQUFDLE1BQWlELEVBQUUsT0FBcUI7UUFNakgsT0FBTyxpQ0FBaUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxPQUFPLEVBQUUsTUFBTSxFQUFFLE9BQU8sQ0FBQyxDQUFDO0lBQ3JGLENBQUM7SUFFRDs7Ozs7T0FLRztJQUNILGlDQUFpQyxDQUFDLE1BQWlELEVBQUUsT0FBcUI7UUFNeEcsT0FBTyxJQUFJLENBQUMsMENBQTBDLENBQUMsTUFBTSxFQUFFLE9BQU8sQ0FBQyxDQUFDLElBQUksQ0FDMUUsR0FBRyxDQUFDLENBQUMsQ0FLVCxFQUtBLEVBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQ1AsQ0FBQztJQUNKLENBQUM7SUFFRCxtRUFBbUU7YUFDbkQseUNBQW9DLEdBQUcsOENBQThDLEFBQWpELENBQWtEO0lBRXRHOzs7OztPQUtHO0lBQ0gseUNBQXlDLENBQUMsTUFBK0MsRUFBRSxPQUFxQjtRQUs5RyxPQUFPLGdDQUFnQyxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLE9BQU8sRUFBRSxNQUFNLEVBQUUsT0FBTyxDQUFDLENBQUM7SUFDcEYsQ0FBQztJQUVEOzs7OztPQUtHO0lBQ0gsZ0NBQWdDLENBQUMsTUFBK0MsRUFBRSxPQUFxQjtRQUtyRyxPQUFPLElBQUksQ0FBQyx5Q0FBeUMsQ0FBQyxNQUFNLEVBQUUsT0FBTyxDQUFDLENBQUMsSUFBSSxDQUN6RSxHQUFHLENBQUMsQ0FBQyxDQUlULEVBSUEsRUFBRSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FDUCxDQUFDO0lBQ0osQ0FBQztJQUVELG9FQUFvRTthQUNwRCwwQ0FBcUMsR0FBRyxtREFBbUQsQUFBdEQsQ0FBdUQ7SUFFNUc7Ozs7O09BS0c7SUFDSCwwQ0FBMEMsQ0FBQyxNQUFnRCxFQUFFLE9BQXFCO1FBS2hILE9BQU8saUNBQWlDLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsT0FBTyxFQUFFLE1BQU0sRUFBRSxPQUFPLENBQUMsQ0FBQztJQUNyRixDQUFDO0lBRUQ7Ozs7O09BS0c7SUFDSCxpQ0FBaUMsQ0FBQyxNQUFnRCxFQUFFLE9BQXFCO1FBS3ZHLE9BQU8sSUFBSSxDQUFDLDBDQUEwQyxDQUFDLE1BQU0sRUFBRSxPQUFPLENBQUMsQ0FBQyxJQUFJLENBQzFFLEdBQUcsQ0FBQyxDQUFDLENBSVQsRUFJQSxFQUFFLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUNQLENBQUM7SUFDSixDQUFDO0lBRUQsbUVBQW1FO2FBQ25ELHlDQUFvQyxHQUFHLG1EQUFtRCxBQUF0RCxDQUF1RDtJQUUzRzs7Ozs7T0FLRztJQUNILHlDQUF5QyxDQUFDLE1BQStDLEVBQUUsT0FBcUI7UUFLOUcsT0FBTyxnQ0FBZ0MsQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxPQUFPLEVBQUUsTUFBTSxFQUFFLE9BQU8sQ0FBQyxDQUFDO0lBQ3BGLENBQUM7SUFFRDs7Ozs7T0FLRztJQUNILGdDQUFnQyxDQUFDLE1BQStDLEVBQUUsT0FBcUI7UUFLckcsT0FBTyxJQUFJLENBQUMseUNBQXlDLENBQUMsTUFBTSxFQUFFLE9BQU8sQ0FBQyxDQUFDLElBQUksQ0FDekUsR0FBRyxDQUFDLENBQUMsQ0FJVCxFQUlBLEVBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQ1AsQ0FBQztJQUNKLENBQUM7SUFFRCxtRUFBbUU7YUFDbkQseUNBQW9DLEdBQUcsbURBQW1ELEFBQXRELENBQXVEO0lBRTNHOzs7OztPQUtHO0lBQ0gseUNBQXlDLENBQUMsTUFBK0MsRUFBRSxPQUFxQjtRQUs5RyxPQUFPLGdDQUFnQyxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLE9BQU8sRUFBRSxNQUFNLEVBQUUsT0FBTyxDQUFDLENBQUM7SUFDcEYsQ0FBQztJQUVEOzs7OztPQUtHO0lBQ0gsZ0NBQWdDLENBQUMsTUFBK0MsRUFBRSxPQUFxQjtRQUtyRyxPQUFPLElBQUksQ0FBQyx5Q0FBeUMsQ0FBQyxNQUFNLEVBQUUsT0FBTyxDQUFDLENBQUMsSUFBSSxDQUN6RSxHQUFHLENBQUMsQ0FBQyxDQUlULEVBSUEsRUFBRSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FDUCxDQUFDO0lBQ0osQ0FBQzsrR0FwTlUsdUJBQXVCO21IQUF2Qix1QkFBdUIsY0FEVixNQUFNOzs0RkFDbkIsdUJBQXVCO2tCQURuQyxVQUFVO21CQUFDLEVBQUUsVUFBVSxFQUFFLE1BQU0sRUFBRSIsInNvdXJjZXNDb250ZW50IjpbIi8qIHRzbGludDpkaXNhYmxlICovXG4vKiBlc2xpbnQtZGlzYWJsZSAqL1xuLyogQ29kZSBnZW5lcmF0ZWQgYnkgbmctb3BlbmFwaS1nZW4gRE8gTk9UIEVESVQuICovXG5cbmltcG9ydCB7IEh0dHBDbGllbnQsIEh0dHBDb250ZXh0IH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uL2h0dHAnO1xuaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgbWFwIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuXG5pbXBvcnQgeyBCYXNlU2VydmljZSB9IGZyb20gJy4uL2Jhc2Utc2VydmljZSc7XG5pbXBvcnQgeyBBcGlDb25maWd1cmF0aW9uIH0gZnJvbSAnLi4vYXBpLWNvbmZpZ3VyYXRpb24nO1xuaW1wb3J0IHsgU3RyaWN0SHR0cFJlc3BvbnNlIH0gZnJvbSAnLi4vc3RyaWN0LWh0dHAtcmVzcG9uc2UnO1xuXG5pbXBvcnQgeyBBbWltc0VuZ2luZWVyUG10ckl0ZW1EdG8gfSBmcm9tICcuLi9tb2RlbHMvYW1pbXMtZW5naW5lZXItcG10ci1pdGVtLWR0byc7XG5pbXBvcnQgeyBlbmdpbmVlclBtdHJJdGVtQ29udHJvbGxlckNyZWF0ZSB9IGZyb20gJy4uL2ZuL2VuZ2luZWVyLXBtdHItaXRlbS9lbmdpbmVlci1wbXRyLWl0ZW0tY29udHJvbGxlci1jcmVhdGUnO1xuaW1wb3J0IHsgRW5naW5lZXJQbXRySXRlbUNvbnRyb2xsZXJDcmVhdGUkUGFyYW1zIH0gZnJvbSAnLi4vZm4vZW5naW5lZXItcG10ci1pdGVtL2VuZ2luZWVyLXBtdHItaXRlbS1jb250cm9sbGVyLWNyZWF0ZSc7XG5pbXBvcnQgeyBlbmdpbmVlclBtdHJJdGVtQ29udHJvbGxlckZpbmRBbGwgfSBmcm9tICcuLi9mbi9lbmdpbmVlci1wbXRyLWl0ZW0vZW5naW5lZXItcG10ci1pdGVtLWNvbnRyb2xsZXItZmluZC1hbGwnO1xuaW1wb3J0IHsgRW5naW5lZXJQbXRySXRlbUNvbnRyb2xsZXJGaW5kQWxsJFBhcmFtcyB9IGZyb20gJy4uL2ZuL2VuZ2luZWVyLXBtdHItaXRlbS9lbmdpbmVlci1wbXRyLWl0ZW0tY29udHJvbGxlci1maW5kLWFsbCc7XG5pbXBvcnQgeyBlbmdpbmVlclBtdHJJdGVtQ29udHJvbGxlckZpbmRPbmUgfSBmcm9tICcuLi9mbi9lbmdpbmVlci1wbXRyLWl0ZW0vZW5naW5lZXItcG10ci1pdGVtLWNvbnRyb2xsZXItZmluZC1vbmUnO1xuaW1wb3J0IHsgRW5naW5lZXJQbXRySXRlbUNvbnRyb2xsZXJGaW5kT25lJFBhcmFtcyB9IGZyb20gJy4uL2ZuL2VuZ2luZWVyLXBtdHItaXRlbS9lbmdpbmVlci1wbXRyLWl0ZW0tY29udHJvbGxlci1maW5kLW9uZSc7XG5pbXBvcnQgeyBlbmdpbmVlclBtdHJJdGVtQ29udHJvbGxlclJlbW92ZSB9IGZyb20gJy4uL2ZuL2VuZ2luZWVyLXBtdHItaXRlbS9lbmdpbmVlci1wbXRyLWl0ZW0tY29udHJvbGxlci1yZW1vdmUnO1xuaW1wb3J0IHsgRW5naW5lZXJQbXRySXRlbUNvbnRyb2xsZXJSZW1vdmUkUGFyYW1zIH0gZnJvbSAnLi4vZm4vZW5naW5lZXItcG10ci1pdGVtL2VuZ2luZWVyLXBtdHItaXRlbS1jb250cm9sbGVyLXJlbW92ZSc7XG5pbXBvcnQgeyBlbmdpbmVlclBtdHJJdGVtQ29udHJvbGxlclVwZGF0ZSB9IGZyb20gJy4uL2ZuL2VuZ2luZWVyLXBtdHItaXRlbS9lbmdpbmVlci1wbXRyLWl0ZW0tY29udHJvbGxlci11cGRhdGUnO1xuaW1wb3J0IHsgRW5naW5lZXJQbXRySXRlbUNvbnRyb2xsZXJVcGRhdGUkUGFyYW1zIH0gZnJvbSAnLi4vZm4vZW5naW5lZXItcG10ci1pdGVtL2VuZ2luZWVyLXBtdHItaXRlbS1jb250cm9sbGVyLXVwZGF0ZSc7XG5cbkBJbmplY3RhYmxlKHsgcHJvdmlkZWRJbjogJ3Jvb3QnIH0pXG5leHBvcnQgY2xhc3MgRW5naW5lZXJQbXRySXRlbVNlcnZpY2UgZXh0ZW5kcyBCYXNlU2VydmljZSB7XG4gIGNvbnN0cnVjdG9yKGNvbmZpZzogQXBpQ29uZmlndXJhdGlvbiwgaHR0cDogSHR0cENsaWVudCkge1xuICAgIHN1cGVyKGNvbmZpZywgaHR0cCk7XG4gIH1cblxuICAvKiogUGF0aCBwYXJ0IGZvciBvcGVyYXRpb24gYGVuZ2luZWVyUG10ckl0ZW1Db250cm9sbGVyRmluZEFsbCgpYCAqL1xuICBzdGF0aWMgcmVhZG9ubHkgRW5naW5lZXJQbXRySXRlbUNvbnRyb2xsZXJGaW5kQWxsUGF0aCA9ICcvYW1pbXMvZW5naW5lZXJfcG10cl9pdGVtL2VuZ2luZWVyX3BtdHJfaXRlbSc7XG5cbiAgLyoqXG4gICAqIFRoaXMgbWV0aG9kIHByb3ZpZGVzIGFjY2VzcyB0byB0aGUgZnVsbCBgSHR0cFJlc3BvbnNlYCwgYWxsb3dpbmcgYWNjZXNzIHRvIHJlc3BvbnNlIGhlYWRlcnMuXG4gICAqIFRvIGFjY2VzcyBvbmx5IHRoZSByZXNwb25zZSBib2R5LCB1c2UgYGVuZ2luZWVyUG10ckl0ZW1Db250cm9sbGVyRmluZEFsbCgpYCBpbnN0ZWFkLlxuICAgKlxuICAgKiBUaGlzIG1ldGhvZCBkb2Vzbid0IGV4cGVjdCBhbnkgcmVxdWVzdCBib2R5LlxuICAgKi9cbiAgZW5naW5lZXJQbXRySXRlbUNvbnRyb2xsZXJGaW5kQWxsJFJlc3BvbnNlKHBhcmFtcz86IEVuZ2luZWVyUG10ckl0ZW1Db250cm9sbGVyRmluZEFsbCRQYXJhbXMsIGNvbnRleHQ/OiBIdHRwQ29udGV4dCk6IE9ic2VydmFibGU8U3RyaWN0SHR0cFJlc3BvbnNlPHtcbidjb2RlJz86IG51bWJlcjtcbidwZXNhbic/OiBzdHJpbmc7XG4nZGF0YSc/OiBBcnJheTxBbWltc0VuZ2luZWVyUG10ckl0ZW1EdG8+O1xuJ3RvdGFsJz86IG51bWJlcjtcbn0+PiB7XG4gICAgcmV0dXJuIGVuZ2luZWVyUG10ckl0ZW1Db250cm9sbGVyRmluZEFsbCh0aGlzLmh0dHAsIHRoaXMucm9vdFVybCwgcGFyYW1zLCBjb250ZXh0KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGlzIG1ldGhvZCBwcm92aWRlcyBhY2Nlc3Mgb25seSB0byB0aGUgcmVzcG9uc2UgYm9keS5cbiAgICogVG8gYWNjZXNzIHRoZSBmdWxsIHJlc3BvbnNlIChmb3IgaGVhZGVycywgZm9yIGV4YW1wbGUpLCBgZW5naW5lZXJQbXRySXRlbUNvbnRyb2xsZXJGaW5kQWxsJFJlc3BvbnNlKClgIGluc3RlYWQuXG4gICAqXG4gICAqIFRoaXMgbWV0aG9kIGRvZXNuJ3QgZXhwZWN0IGFueSByZXF1ZXN0IGJvZHkuXG4gICAqL1xuICBlbmdpbmVlclBtdHJJdGVtQ29udHJvbGxlckZpbmRBbGwocGFyYW1zPzogRW5naW5lZXJQbXRySXRlbUNvbnRyb2xsZXJGaW5kQWxsJFBhcmFtcywgY29udGV4dD86IEh0dHBDb250ZXh0KTogT2JzZXJ2YWJsZTx7XG4nY29kZSc/OiBudW1iZXI7XG4ncGVzYW4nPzogc3RyaW5nO1xuJ2RhdGEnPzogQXJyYXk8QW1pbXNFbmdpbmVlclBtdHJJdGVtRHRvPjtcbid0b3RhbCc/OiBudW1iZXI7XG59PiB7XG4gICAgcmV0dXJuIHRoaXMuZW5naW5lZXJQbXRySXRlbUNvbnRyb2xsZXJGaW5kQWxsJFJlc3BvbnNlKHBhcmFtcywgY29udGV4dCkucGlwZShcbiAgICAgIG1hcCgocjogU3RyaWN0SHR0cFJlc3BvbnNlPHtcbidjb2RlJz86IG51bWJlcjtcbidwZXNhbic/OiBzdHJpbmc7XG4nZGF0YSc/OiBBcnJheTxBbWltc0VuZ2luZWVyUG10ckl0ZW1EdG8+O1xuJ3RvdGFsJz86IG51bWJlcjtcbn0+KToge1xuJ2NvZGUnPzogbnVtYmVyO1xuJ3Blc2FuJz86IHN0cmluZztcbidkYXRhJz86IEFycmF5PEFtaW1zRW5naW5lZXJQbXRySXRlbUR0bz47XG4ndG90YWwnPzogbnVtYmVyO1xufSA9PiByLmJvZHkpXG4gICAgKTtcbiAgfVxuXG4gIC8qKiBQYXRoIHBhcnQgZm9yIG9wZXJhdGlvbiBgZW5naW5lZXJQbXRySXRlbUNvbnRyb2xsZXJDcmVhdGUoKWAgKi9cbiAgc3RhdGljIHJlYWRvbmx5IEVuZ2luZWVyUG10ckl0ZW1Db250cm9sbGVyQ3JlYXRlUGF0aCA9ICcvYW1pbXMvZW5naW5lZXJfcG10cl9pdGVtL2VuZ2luZWVyX3BtdHJfaXRlbSc7XG5cbiAgLyoqXG4gICAqIFRoaXMgbWV0aG9kIHByb3ZpZGVzIGFjY2VzcyB0byB0aGUgZnVsbCBgSHR0cFJlc3BvbnNlYCwgYWxsb3dpbmcgYWNjZXNzIHRvIHJlc3BvbnNlIGhlYWRlcnMuXG4gICAqIFRvIGFjY2VzcyBvbmx5IHRoZSByZXNwb25zZSBib2R5LCB1c2UgYGVuZ2luZWVyUG10ckl0ZW1Db250cm9sbGVyQ3JlYXRlKClgIGluc3RlYWQuXG4gICAqXG4gICAqIFRoaXMgbWV0aG9kIHNlbmRzIGBhcHBsaWNhdGlvbi9qc29uYCBhbmQgaGFuZGxlcyByZXF1ZXN0IGJvZHkgb2YgdHlwZSBgYXBwbGljYXRpb24vanNvbmAuXG4gICAqL1xuICBlbmdpbmVlclBtdHJJdGVtQ29udHJvbGxlckNyZWF0ZSRSZXNwb25zZShwYXJhbXM6IEVuZ2luZWVyUG10ckl0ZW1Db250cm9sbGVyQ3JlYXRlJFBhcmFtcywgY29udGV4dD86IEh0dHBDb250ZXh0KTogT2JzZXJ2YWJsZTxTdHJpY3RIdHRwUmVzcG9uc2U8e1xuJ2NvZGUnPzogbnVtYmVyO1xuJ3Blc2FuJz86IHN0cmluZztcbidkYXRhJz86IEFtaW1zRW5naW5lZXJQbXRySXRlbUR0bztcbn0+PiB7XG4gICAgcmV0dXJuIGVuZ2luZWVyUG10ckl0ZW1Db250cm9sbGVyQ3JlYXRlKHRoaXMuaHR0cCwgdGhpcy5yb290VXJsLCBwYXJhbXMsIGNvbnRleHQpO1xuICB9XG5cbiAgLyoqXG4gICAqIFRoaXMgbWV0aG9kIHByb3ZpZGVzIGFjY2VzcyBvbmx5IHRvIHRoZSByZXNwb25zZSBib2R5LlxuICAgKiBUbyBhY2Nlc3MgdGhlIGZ1bGwgcmVzcG9uc2UgKGZvciBoZWFkZXJzLCBmb3IgZXhhbXBsZSksIGBlbmdpbmVlclBtdHJJdGVtQ29udHJvbGxlckNyZWF0ZSRSZXNwb25zZSgpYCBpbnN0ZWFkLlxuICAgKlxuICAgKiBUaGlzIG1ldGhvZCBzZW5kcyBgYXBwbGljYXRpb24vanNvbmAgYW5kIGhhbmRsZXMgcmVxdWVzdCBib2R5IG9mIHR5cGUgYGFwcGxpY2F0aW9uL2pzb25gLlxuICAgKi9cbiAgZW5naW5lZXJQbXRySXRlbUNvbnRyb2xsZXJDcmVhdGUocGFyYW1zOiBFbmdpbmVlclBtdHJJdGVtQ29udHJvbGxlckNyZWF0ZSRQYXJhbXMsIGNvbnRleHQ/OiBIdHRwQ29udGV4dCk6IE9ic2VydmFibGU8e1xuJ2NvZGUnPzogbnVtYmVyO1xuJ3Blc2FuJz86IHN0cmluZztcbidkYXRhJz86IEFtaW1zRW5naW5lZXJQbXRySXRlbUR0bztcbn0+IHtcbiAgICByZXR1cm4gdGhpcy5lbmdpbmVlclBtdHJJdGVtQ29udHJvbGxlckNyZWF0ZSRSZXNwb25zZShwYXJhbXMsIGNvbnRleHQpLnBpcGUoXG4gICAgICBtYXAoKHI6IFN0cmljdEh0dHBSZXNwb25zZTx7XG4nY29kZSc/OiBudW1iZXI7XG4ncGVzYW4nPzogc3RyaW5nO1xuJ2RhdGEnPzogQW1pbXNFbmdpbmVlclBtdHJJdGVtRHRvO1xufT4pOiB7XG4nY29kZSc/OiBudW1iZXI7XG4ncGVzYW4nPzogc3RyaW5nO1xuJ2RhdGEnPzogQW1pbXNFbmdpbmVlclBtdHJJdGVtRHRvO1xufSA9PiByLmJvZHkpXG4gICAgKTtcbiAgfVxuXG4gIC8qKiBQYXRoIHBhcnQgZm9yIG9wZXJhdGlvbiBgZW5naW5lZXJQbXRySXRlbUNvbnRyb2xsZXJGaW5kT25lKClgICovXG4gIHN0YXRpYyByZWFkb25seSBFbmdpbmVlclBtdHJJdGVtQ29udHJvbGxlckZpbmRPbmVQYXRoID0gJy9hbWltcy9lbmdpbmVlcl9wbXRyX2l0ZW0vZW5naW5lZXJfcG10cl9pdGVtL3tpZH0nO1xuXG4gIC8qKlxuICAgKiBUaGlzIG1ldGhvZCBwcm92aWRlcyBhY2Nlc3MgdG8gdGhlIGZ1bGwgYEh0dHBSZXNwb25zZWAsIGFsbG93aW5nIGFjY2VzcyB0byByZXNwb25zZSBoZWFkZXJzLlxuICAgKiBUbyBhY2Nlc3Mgb25seSB0aGUgcmVzcG9uc2UgYm9keSwgdXNlIGBlbmdpbmVlclBtdHJJdGVtQ29udHJvbGxlckZpbmRPbmUoKWAgaW5zdGVhZC5cbiAgICpcbiAgICogVGhpcyBtZXRob2QgZG9lc24ndCBleHBlY3QgYW55IHJlcXVlc3QgYm9keS5cbiAgICovXG4gIGVuZ2luZWVyUG10ckl0ZW1Db250cm9sbGVyRmluZE9uZSRSZXNwb25zZShwYXJhbXM6IEVuZ2luZWVyUG10ckl0ZW1Db250cm9sbGVyRmluZE9uZSRQYXJhbXMsIGNvbnRleHQ/OiBIdHRwQ29udGV4dCk6IE9ic2VydmFibGU8U3RyaWN0SHR0cFJlc3BvbnNlPHtcbidjb2RlJz86IG51bWJlcjtcbidwZXNhbic/OiBzdHJpbmc7XG4nZGF0YSc/OiBBbWltc0VuZ2luZWVyUG10ckl0ZW1EdG87XG59Pj4ge1xuICAgIHJldHVybiBlbmdpbmVlclBtdHJJdGVtQ29udHJvbGxlckZpbmRPbmUodGhpcy5odHRwLCB0aGlzLnJvb3RVcmwsIHBhcmFtcywgY29udGV4dCk7XG4gIH1cblxuICAvKipcbiAgICogVGhpcyBtZXRob2QgcHJvdmlkZXMgYWNjZXNzIG9ubHkgdG8gdGhlIHJlc3BvbnNlIGJvZHkuXG4gICAqIFRvIGFjY2VzcyB0aGUgZnVsbCByZXNwb25zZSAoZm9yIGhlYWRlcnMsIGZvciBleGFtcGxlKSwgYGVuZ2luZWVyUG10ckl0ZW1Db250cm9sbGVyRmluZE9uZSRSZXNwb25zZSgpYCBpbnN0ZWFkLlxuICAgKlxuICAgKiBUaGlzIG1ldGhvZCBkb2Vzbid0IGV4cGVjdCBhbnkgcmVxdWVzdCBib2R5LlxuICAgKi9cbiAgZW5naW5lZXJQbXRySXRlbUNvbnRyb2xsZXJGaW5kT25lKHBhcmFtczogRW5naW5lZXJQbXRySXRlbUNvbnRyb2xsZXJGaW5kT25lJFBhcmFtcywgY29udGV4dD86IEh0dHBDb250ZXh0KTogT2JzZXJ2YWJsZTx7XG4nY29kZSc/OiBudW1iZXI7XG4ncGVzYW4nPzogc3RyaW5nO1xuJ2RhdGEnPzogQW1pbXNFbmdpbmVlclBtdHJJdGVtRHRvO1xufT4ge1xuICAgIHJldHVybiB0aGlzLmVuZ2luZWVyUG10ckl0ZW1Db250cm9sbGVyRmluZE9uZSRSZXNwb25zZShwYXJhbXMsIGNvbnRleHQpLnBpcGUoXG4gICAgICBtYXAoKHI6IFN0cmljdEh0dHBSZXNwb25zZTx7XG4nY29kZSc/OiBudW1iZXI7XG4ncGVzYW4nPzogc3RyaW5nO1xuJ2RhdGEnPzogQW1pbXNFbmdpbmVlclBtdHJJdGVtRHRvO1xufT4pOiB7XG4nY29kZSc/OiBudW1iZXI7XG4ncGVzYW4nPzogc3RyaW5nO1xuJ2RhdGEnPzogQW1pbXNFbmdpbmVlclBtdHJJdGVtRHRvO1xufSA9PiByLmJvZHkpXG4gICAgKTtcbiAgfVxuXG4gIC8qKiBQYXRoIHBhcnQgZm9yIG9wZXJhdGlvbiBgZW5naW5lZXJQbXRySXRlbUNvbnRyb2xsZXJVcGRhdGUoKWAgKi9cbiAgc3RhdGljIHJlYWRvbmx5IEVuZ2luZWVyUG10ckl0ZW1Db250cm9sbGVyVXBkYXRlUGF0aCA9ICcvYW1pbXMvZW5naW5lZXJfcG10cl9pdGVtL2VuZ2luZWVyX3BtdHJfaXRlbS97aWR9JztcblxuICAvKipcbiAgICogVGhpcyBtZXRob2QgcHJvdmlkZXMgYWNjZXNzIHRvIHRoZSBmdWxsIGBIdHRwUmVzcG9uc2VgLCBhbGxvd2luZyBhY2Nlc3MgdG8gcmVzcG9uc2UgaGVhZGVycy5cbiAgICogVG8gYWNjZXNzIG9ubHkgdGhlIHJlc3BvbnNlIGJvZHksIHVzZSBgZW5naW5lZXJQbXRySXRlbUNvbnRyb2xsZXJVcGRhdGUoKWAgaW5zdGVhZC5cbiAgICpcbiAgICogVGhpcyBtZXRob2Qgc2VuZHMgYGFwcGxpY2F0aW9uL2pzb25gIGFuZCBoYW5kbGVzIHJlcXVlc3QgYm9keSBvZiB0eXBlIGBhcHBsaWNhdGlvbi9qc29uYC5cbiAgICovXG4gIGVuZ2luZWVyUG10ckl0ZW1Db250cm9sbGVyVXBkYXRlJFJlc3BvbnNlKHBhcmFtczogRW5naW5lZXJQbXRySXRlbUNvbnRyb2xsZXJVcGRhdGUkUGFyYW1zLCBjb250ZXh0PzogSHR0cENvbnRleHQpOiBPYnNlcnZhYmxlPFN0cmljdEh0dHBSZXNwb25zZTx7XG4nY29kZSc/OiBudW1iZXI7XG4ncGVzYW4nPzogc3RyaW5nO1xuJ2RhdGEnPzogQW1pbXNFbmdpbmVlclBtdHJJdGVtRHRvO1xufT4+IHtcbiAgICByZXR1cm4gZW5naW5lZXJQbXRySXRlbUNvbnRyb2xsZXJVcGRhdGUodGhpcy5odHRwLCB0aGlzLnJvb3RVcmwsIHBhcmFtcywgY29udGV4dCk7XG4gIH1cblxuICAvKipcbiAgICogVGhpcyBtZXRob2QgcHJvdmlkZXMgYWNjZXNzIG9ubHkgdG8gdGhlIHJlc3BvbnNlIGJvZHkuXG4gICAqIFRvIGFjY2VzcyB0aGUgZnVsbCByZXNwb25zZSAoZm9yIGhlYWRlcnMsIGZvciBleGFtcGxlKSwgYGVuZ2luZWVyUG10ckl0ZW1Db250cm9sbGVyVXBkYXRlJFJlc3BvbnNlKClgIGluc3RlYWQuXG4gICAqXG4gICAqIFRoaXMgbWV0aG9kIHNlbmRzIGBhcHBsaWNhdGlvbi9qc29uYCBhbmQgaGFuZGxlcyByZXF1ZXN0IGJvZHkgb2YgdHlwZSBgYXBwbGljYXRpb24vanNvbmAuXG4gICAqL1xuICBlbmdpbmVlclBtdHJJdGVtQ29udHJvbGxlclVwZGF0ZShwYXJhbXM6IEVuZ2luZWVyUG10ckl0ZW1Db250cm9sbGVyVXBkYXRlJFBhcmFtcywgY29udGV4dD86IEh0dHBDb250ZXh0KTogT2JzZXJ2YWJsZTx7XG4nY29kZSc/OiBudW1iZXI7XG4ncGVzYW4nPzogc3RyaW5nO1xuJ2RhdGEnPzogQW1pbXNFbmdpbmVlclBtdHJJdGVtRHRvO1xufT4ge1xuICAgIHJldHVybiB0aGlzLmVuZ2luZWVyUG10ckl0ZW1Db250cm9sbGVyVXBkYXRlJFJlc3BvbnNlKHBhcmFtcywgY29udGV4dCkucGlwZShcbiAgICAgIG1hcCgocjogU3RyaWN0SHR0cFJlc3BvbnNlPHtcbidjb2RlJz86IG51bWJlcjtcbidwZXNhbic/OiBzdHJpbmc7XG4nZGF0YSc/OiBBbWltc0VuZ2luZWVyUG10ckl0ZW1EdG87XG59Pik6IHtcbidjb2RlJz86IG51bWJlcjtcbidwZXNhbic/OiBzdHJpbmc7XG4nZGF0YSc/OiBBbWltc0VuZ2luZWVyUG10ckl0ZW1EdG87XG59ID0+IHIuYm9keSlcbiAgICApO1xuICB9XG5cbiAgLyoqIFBhdGggcGFydCBmb3Igb3BlcmF0aW9uIGBlbmdpbmVlclBtdHJJdGVtQ29udHJvbGxlclJlbW92ZSgpYCAqL1xuICBzdGF0aWMgcmVhZG9ubHkgRW5naW5lZXJQbXRySXRlbUNvbnRyb2xsZXJSZW1vdmVQYXRoID0gJy9hbWltcy9lbmdpbmVlcl9wbXRyX2l0ZW0vZW5naW5lZXJfcG10cl9pdGVtL3tpZH0nO1xuXG4gIC8qKlxuICAgKiBUaGlzIG1ldGhvZCBwcm92aWRlcyBhY2Nlc3MgdG8gdGhlIGZ1bGwgYEh0dHBSZXNwb25zZWAsIGFsbG93aW5nIGFjY2VzcyB0byByZXNwb25zZSBoZWFkZXJzLlxuICAgKiBUbyBhY2Nlc3Mgb25seSB0aGUgcmVzcG9uc2UgYm9keSwgdXNlIGBlbmdpbmVlclBtdHJJdGVtQ29udHJvbGxlclJlbW92ZSgpYCBpbnN0ZWFkLlxuICAgKlxuICAgKiBUaGlzIG1ldGhvZCBkb2Vzbid0IGV4cGVjdCBhbnkgcmVxdWVzdCBib2R5LlxuICAgKi9cbiAgZW5naW5lZXJQbXRySXRlbUNvbnRyb2xsZXJSZW1vdmUkUmVzcG9uc2UocGFyYW1zOiBFbmdpbmVlclBtdHJJdGVtQ29udHJvbGxlclJlbW92ZSRQYXJhbXMsIGNvbnRleHQ/OiBIdHRwQ29udGV4dCk6IE9ic2VydmFibGU8U3RyaWN0SHR0cFJlc3BvbnNlPHtcbidjb2RlJz86IG51bWJlcjtcbidwZXNhbic/OiBzdHJpbmc7XG4nZGF0YSc/OiBBbWltc0VuZ2luZWVyUG10ckl0ZW1EdG87XG59Pj4ge1xuICAgIHJldHVybiBlbmdpbmVlclBtdHJJdGVtQ29udHJvbGxlclJlbW92ZSh0aGlzLmh0dHAsIHRoaXMucm9vdFVybCwgcGFyYW1zLCBjb250ZXh0KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGlzIG1ldGhvZCBwcm92aWRlcyBhY2Nlc3Mgb25seSB0byB0aGUgcmVzcG9uc2UgYm9keS5cbiAgICogVG8gYWNjZXNzIHRoZSBmdWxsIHJlc3BvbnNlIChmb3IgaGVhZGVycywgZm9yIGV4YW1wbGUpLCBgZW5naW5lZXJQbXRySXRlbUNvbnRyb2xsZXJSZW1vdmUkUmVzcG9uc2UoKWAgaW5zdGVhZC5cbiAgICpcbiAgICogVGhpcyBtZXRob2QgZG9lc24ndCBleHBlY3QgYW55IHJlcXVlc3QgYm9keS5cbiAgICovXG4gIGVuZ2luZWVyUG10ckl0ZW1Db250cm9sbGVyUmVtb3ZlKHBhcmFtczogRW5naW5lZXJQbXRySXRlbUNvbnRyb2xsZXJSZW1vdmUkUGFyYW1zLCBjb250ZXh0PzogSHR0cENvbnRleHQpOiBPYnNlcnZhYmxlPHtcbidjb2RlJz86IG51bWJlcjtcbidwZXNhbic/OiBzdHJpbmc7XG4nZGF0YSc/OiBBbWltc0VuZ2luZWVyUG10ckl0ZW1EdG87XG59PiB7XG4gICAgcmV0dXJuIHRoaXMuZW5naW5lZXJQbXRySXRlbUNvbnRyb2xsZXJSZW1vdmUkUmVzcG9uc2UocGFyYW1zLCBjb250ZXh0KS5waXBlKFxuICAgICAgbWFwKChyOiBTdHJpY3RIdHRwUmVzcG9uc2U8e1xuJ2NvZGUnPzogbnVtYmVyO1xuJ3Blc2FuJz86IHN0cmluZztcbidkYXRhJz86IEFtaW1zRW5naW5lZXJQbXRySXRlbUR0bztcbn0+KToge1xuJ2NvZGUnPzogbnVtYmVyO1xuJ3Blc2FuJz86IHN0cmluZztcbidkYXRhJz86IEFtaW1zRW5naW5lZXJQbXRySXRlbUR0bztcbn0gPT4gci5ib2R5KVxuICAgICk7XG4gIH1cblxufVxuIl19
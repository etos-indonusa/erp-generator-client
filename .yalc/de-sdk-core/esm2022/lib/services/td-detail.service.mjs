/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
import { HttpClient } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { map } from 'rxjs/operators';
import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { tdDetailControllerCreate } from '../fn/td-detail/td-detail-controller-create';
import { tdDetailControllerFindAll } from '../fn/td-detail/td-detail-controller-find-all';
import { tdDetailControllerFindOne } from '../fn/td-detail/td-detail-controller-find-one';
import { tdDetailControllerRemove } from '../fn/td-detail/td-detail-controller-remove';
import { tdDetailControllerUpdate } from '../fn/td-detail/td-detail-controller-update';
import * as i0 from "@angular/core";
import * as i1 from "../api-configuration";
import * as i2 from "@angular/common/http";
export class TdDetailService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `tdDetailControllerFindAll()` */
    static { this.TdDetailControllerFindAllPath = '/amims/td_detail/td_detail'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `tdDetailControllerFindAll()` instead.
     *
     * This method doesn't expect any request body.
     */
    tdDetailControllerFindAll$Response(params, context) {
        return tdDetailControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `tdDetailControllerFindAll$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    tdDetailControllerFindAll(params, context) {
        return this.tdDetailControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `tdDetailControllerCreate()` */
    static { this.TdDetailControllerCreatePath = '/amims/td_detail/td_detail'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `tdDetailControllerCreate()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    tdDetailControllerCreate$Response(params, context) {
        return tdDetailControllerCreate(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `tdDetailControllerCreate$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    tdDetailControllerCreate(params, context) {
        return this.tdDetailControllerCreate$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `tdDetailControllerFindOne()` */
    static { this.TdDetailControllerFindOnePath = '/amims/td_detail/td_detail/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `tdDetailControllerFindOne()` instead.
     *
     * This method doesn't expect any request body.
     */
    tdDetailControllerFindOne$Response(params, context) {
        return tdDetailControllerFindOne(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `tdDetailControllerFindOne$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    tdDetailControllerFindOne(params, context) {
        return this.tdDetailControllerFindOne$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `tdDetailControllerUpdate()` */
    static { this.TdDetailControllerUpdatePath = '/amims/td_detail/td_detail/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `tdDetailControllerUpdate()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    tdDetailControllerUpdate$Response(params, context) {
        return tdDetailControllerUpdate(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `tdDetailControllerUpdate$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    tdDetailControllerUpdate(params, context) {
        return this.tdDetailControllerUpdate$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `tdDetailControllerRemove()` */
    static { this.TdDetailControllerRemovePath = '/amims/td_detail/td_detail/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `tdDetailControllerRemove()` instead.
     *
     * This method doesn't expect any request body.
     */
    tdDetailControllerRemove$Response(params, context) {
        return tdDetailControllerRemove(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `tdDetailControllerRemove$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    tdDetailControllerRemove(params, context) {
        return this.tdDetailControllerRemove$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: TdDetailService, deps: [{ token: i1.ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: TdDetailService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: TdDetailService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: i1.ApiConfiguration }, { type: i2.HttpClient }] });
//# sourceMappingURL=data:application/json;base64,
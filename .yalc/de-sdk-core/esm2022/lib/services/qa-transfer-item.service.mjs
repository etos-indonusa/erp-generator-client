/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
import { HttpClient } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { map } from 'rxjs/operators';
import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { qaTransferItemControllerCreate } from '../fn/qa-transfer-item/qa-transfer-item-controller-create';
import { qaTransferItemControllerFindAll } from '../fn/qa-transfer-item/qa-transfer-item-controller-find-all';
import { qaTransferItemControllerFindOne } from '../fn/qa-transfer-item/qa-transfer-item-controller-find-one';
import { qaTransferItemControllerRemove } from '../fn/qa-transfer-item/qa-transfer-item-controller-remove';
import { qaTransferItemControllerUpdate } from '../fn/qa-transfer-item/qa-transfer-item-controller-update';
import * as i0 from "@angular/core";
import * as i1 from "../api-configuration";
import * as i2 from "@angular/common/http";
export class QaTransferItemService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `qaTransferItemControllerFindAll()` */
    static { this.QaTransferItemControllerFindAllPath = '/amims/qa_transfer_item/qa_transfer_item'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `qaTransferItemControllerFindAll()` instead.
     *
     * This method doesn't expect any request body.
     */
    qaTransferItemControllerFindAll$Response(params, context) {
        return qaTransferItemControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `qaTransferItemControllerFindAll$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    qaTransferItemControllerFindAll(params, context) {
        return this.qaTransferItemControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `qaTransferItemControllerCreate()` */
    static { this.QaTransferItemControllerCreatePath = '/amims/qa_transfer_item/qa_transfer_item'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `qaTransferItemControllerCreate()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    qaTransferItemControllerCreate$Response(params, context) {
        return qaTransferItemControllerCreate(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `qaTransferItemControllerCreate$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    qaTransferItemControllerCreate(params, context) {
        return this.qaTransferItemControllerCreate$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `qaTransferItemControllerFindOne()` */
    static { this.QaTransferItemControllerFindOnePath = '/amims/qa_transfer_item/qa_transfer_item/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `qaTransferItemControllerFindOne()` instead.
     *
     * This method doesn't expect any request body.
     */
    qaTransferItemControllerFindOne$Response(params, context) {
        return qaTransferItemControllerFindOne(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `qaTransferItemControllerFindOne$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    qaTransferItemControllerFindOne(params, context) {
        return this.qaTransferItemControllerFindOne$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `qaTransferItemControllerUpdate()` */
    static { this.QaTransferItemControllerUpdatePath = '/amims/qa_transfer_item/qa_transfer_item/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `qaTransferItemControllerUpdate()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    qaTransferItemControllerUpdate$Response(params, context) {
        return qaTransferItemControllerUpdate(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `qaTransferItemControllerUpdate$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    qaTransferItemControllerUpdate(params, context) {
        return this.qaTransferItemControllerUpdate$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `qaTransferItemControllerRemove()` */
    static { this.QaTransferItemControllerRemovePath = '/amims/qa_transfer_item/qa_transfer_item/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `qaTransferItemControllerRemove()` instead.
     *
     * This method doesn't expect any request body.
     */
    qaTransferItemControllerRemove$Response(params, context) {
        return qaTransferItemControllerRemove(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `qaTransferItemControllerRemove$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    qaTransferItemControllerRemove(params, context) {
        return this.qaTransferItemControllerRemove$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: QaTransferItemService, deps: [{ token: i1.ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: QaTransferItemService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: QaTransferItemService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: i1.ApiConfiguration }, { type: i2.HttpClient }] });
//# sourceMappingURL=data:application/json;base64,
/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
import { HttpClient } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { map } from 'rxjs/operators';
import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { storeDestroyWidgetControllerFindAll } from '../fn/store-destroy-widget/store-destroy-widget-controller-find-all';
import * as i0 from "@angular/core";
import * as i1 from "../api-configuration";
import * as i2 from "@angular/common/http";
export class StoreDestroyWidgetService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `storeDestroyWidgetControllerFindAll()` */
    static { this.StoreDestroyWidgetControllerFindAllPath = '/amims/store_destroy/store_destroy_widget'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `storeDestroyWidgetControllerFindAll()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    storeDestroyWidgetControllerFindAll$Response(params, context) {
        return storeDestroyWidgetControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `storeDestroyWidgetControllerFindAll$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    storeDestroyWidgetControllerFindAll(params, context) {
        return this.storeDestroyWidgetControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: StoreDestroyWidgetService, deps: [{ token: i1.ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: StoreDestroyWidgetService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: StoreDestroyWidgetService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: i1.ApiConfiguration }, { type: i2.HttpClient }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RvcmUtZGVzdHJveS13aWRnZXQuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL3Nka2NvcmUvc3JjL2xpYi9zZXJ2aWNlcy9zdG9yZS1kZXN0cm95LXdpZGdldC5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQixvQkFBb0I7QUFDcEIsbURBQW1EO0FBRW5ELE9BQU8sRUFBRSxVQUFVLEVBQWUsTUFBTSxzQkFBc0IsQ0FBQztBQUMvRCxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRTNDLE9BQU8sRUFBRSxHQUFHLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUVyQyxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFDOUMsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0sc0JBQXNCLENBQUM7QUFJeEQsT0FBTyxFQUFFLG1DQUFtQyxFQUFFLE1BQU0scUVBQXFFLENBQUM7Ozs7QUFJMUgsTUFBTSxPQUFPLHlCQUEwQixTQUFRLFdBQVc7SUFDeEQsWUFBWSxNQUF3QixFQUFFLElBQWdCO1FBQ3BELEtBQUssQ0FBQyxNQUFNLEVBQUUsSUFBSSxDQUFDLENBQUM7SUFDdEIsQ0FBQztJQUVELHNFQUFzRTthQUN0RCw0Q0FBdUMsR0FBRywyQ0FBMkMsQUFBOUMsQ0FBK0M7SUFFdEc7Ozs7O09BS0c7SUFDSCw0Q0FBNEMsQ0FBQyxNQUFrRCxFQUFFLE9BQXFCO1FBTXBILE9BQU8sbUNBQW1DLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsT0FBTyxFQUFFLE1BQU0sRUFBRSxPQUFPLENBQUMsQ0FBQztJQUN2RixDQUFDO0lBRUQ7Ozs7O09BS0c7SUFDSCxtQ0FBbUMsQ0FBQyxNQUFrRCxFQUFFLE9BQXFCO1FBTTNHLE9BQU8sSUFBSSxDQUFDLDRDQUE0QyxDQUFDLE1BQU0sRUFBRSxPQUFPLENBQUMsQ0FBQyxJQUFJLENBQzVFLEdBQUcsQ0FBQyxDQUFDLENBS1QsRUFLQSxFQUFFLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUNQLENBQUM7SUFDSixDQUFDOytHQWhEVSx5QkFBeUI7bUhBQXpCLHlCQUF5QixjQURaLE1BQU07OzRGQUNuQix5QkFBeUI7a0JBRHJDLFVBQVU7bUJBQUMsRUFBRSxVQUFVLEVBQUUsTUFBTSxFQUFFIiwic291cmNlc0NvbnRlbnQiOlsiLyogdHNsaW50OmRpc2FibGUgKi9cbi8qIGVzbGludC1kaXNhYmxlICovXG4vKiBDb2RlIGdlbmVyYXRlZCBieSBuZy1vcGVuYXBpLWdlbiBETyBOT1QgRURJVC4gKi9cblxuaW1wb3J0IHsgSHR0cENsaWVudCwgSHR0cENvbnRleHQgfSBmcm9tICdAYW5ndWxhci9jb21tb24vaHR0cCc7XG5pbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBtYXAgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5cbmltcG9ydCB7IEJhc2VTZXJ2aWNlIH0gZnJvbSAnLi4vYmFzZS1zZXJ2aWNlJztcbmltcG9ydCB7IEFwaUNvbmZpZ3VyYXRpb24gfSBmcm9tICcuLi9hcGktY29uZmlndXJhdGlvbic7XG5pbXBvcnQgeyBTdHJpY3RIdHRwUmVzcG9uc2UgfSBmcm9tICcuLi9zdHJpY3QtaHR0cC1yZXNwb25zZSc7XG5cbmltcG9ydCB7IEFtaW1zU3RvcmVEZXN0cm95V2lkZ2V0RHRvIH0gZnJvbSAnLi4vbW9kZWxzL2FtaW1zLXN0b3JlLWRlc3Ryb3ktd2lkZ2V0LWR0byc7XG5pbXBvcnQgeyBzdG9yZURlc3Ryb3lXaWRnZXRDb250cm9sbGVyRmluZEFsbCB9IGZyb20gJy4uL2ZuL3N0b3JlLWRlc3Ryb3ktd2lkZ2V0L3N0b3JlLWRlc3Ryb3ktd2lkZ2V0LWNvbnRyb2xsZXItZmluZC1hbGwnO1xuaW1wb3J0IHsgU3RvcmVEZXN0cm95V2lkZ2V0Q29udHJvbGxlckZpbmRBbGwkUGFyYW1zIH0gZnJvbSAnLi4vZm4vc3RvcmUtZGVzdHJveS13aWRnZXQvc3RvcmUtZGVzdHJveS13aWRnZXQtY29udHJvbGxlci1maW5kLWFsbCc7XG5cbkBJbmplY3RhYmxlKHsgcHJvdmlkZWRJbjogJ3Jvb3QnIH0pXG5leHBvcnQgY2xhc3MgU3RvcmVEZXN0cm95V2lkZ2V0U2VydmljZSBleHRlbmRzIEJhc2VTZXJ2aWNlIHtcbiAgY29uc3RydWN0b3IoY29uZmlnOiBBcGlDb25maWd1cmF0aW9uLCBodHRwOiBIdHRwQ2xpZW50KSB7XG4gICAgc3VwZXIoY29uZmlnLCBodHRwKTtcbiAgfVxuXG4gIC8qKiBQYXRoIHBhcnQgZm9yIG9wZXJhdGlvbiBgc3RvcmVEZXN0cm95V2lkZ2V0Q29udHJvbGxlckZpbmRBbGwoKWAgKi9cbiAgc3RhdGljIHJlYWRvbmx5IFN0b3JlRGVzdHJveVdpZGdldENvbnRyb2xsZXJGaW5kQWxsUGF0aCA9ICcvYW1pbXMvc3RvcmVfZGVzdHJveS9zdG9yZV9kZXN0cm95X3dpZGdldCc7XG5cbiAgLyoqXG4gICAqIFRoaXMgbWV0aG9kIHByb3ZpZGVzIGFjY2VzcyB0byB0aGUgZnVsbCBgSHR0cFJlc3BvbnNlYCwgYWxsb3dpbmcgYWNjZXNzIHRvIHJlc3BvbnNlIGhlYWRlcnMuXG4gICAqIFRvIGFjY2VzcyBvbmx5IHRoZSByZXNwb25zZSBib2R5LCB1c2UgYHN0b3JlRGVzdHJveVdpZGdldENvbnRyb2xsZXJGaW5kQWxsKClgIGluc3RlYWQuXG4gICAqXG4gICAqIFRoaXMgbWV0aG9kIHNlbmRzIGBhcHBsaWNhdGlvbi9qc29uYCBhbmQgaGFuZGxlcyByZXF1ZXN0IGJvZHkgb2YgdHlwZSBgYXBwbGljYXRpb24vanNvbmAuXG4gICAqL1xuICBzdG9yZURlc3Ryb3lXaWRnZXRDb250cm9sbGVyRmluZEFsbCRSZXNwb25zZShwYXJhbXM6IFN0b3JlRGVzdHJveVdpZGdldENvbnRyb2xsZXJGaW5kQWxsJFBhcmFtcywgY29udGV4dD86IEh0dHBDb250ZXh0KTogT2JzZXJ2YWJsZTxTdHJpY3RIdHRwUmVzcG9uc2U8e1xuJ2NvZGUnPzogbnVtYmVyO1xuJ3Blc2FuJz86IHN0cmluZztcbidkYXRhJz86IEFycmF5PEFtaW1zU3RvcmVEZXN0cm95V2lkZ2V0RHRvPjtcbid0b3RhbCc/OiBudW1iZXI7XG59Pj4ge1xuICAgIHJldHVybiBzdG9yZURlc3Ryb3lXaWRnZXRDb250cm9sbGVyRmluZEFsbCh0aGlzLmh0dHAsIHRoaXMucm9vdFVybCwgcGFyYW1zLCBjb250ZXh0KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGlzIG1ldGhvZCBwcm92aWRlcyBhY2Nlc3Mgb25seSB0byB0aGUgcmVzcG9uc2UgYm9keS5cbiAgICogVG8gYWNjZXNzIHRoZSBmdWxsIHJlc3BvbnNlIChmb3IgaGVhZGVycywgZm9yIGV4YW1wbGUpLCBgc3RvcmVEZXN0cm95V2lkZ2V0Q29udHJvbGxlckZpbmRBbGwkUmVzcG9uc2UoKWAgaW5zdGVhZC5cbiAgICpcbiAgICogVGhpcyBtZXRob2Qgc2VuZHMgYGFwcGxpY2F0aW9uL2pzb25gIGFuZCBoYW5kbGVzIHJlcXVlc3QgYm9keSBvZiB0eXBlIGBhcHBsaWNhdGlvbi9qc29uYC5cbiAgICovXG4gIHN0b3JlRGVzdHJveVdpZGdldENvbnRyb2xsZXJGaW5kQWxsKHBhcmFtczogU3RvcmVEZXN0cm95V2lkZ2V0Q29udHJvbGxlckZpbmRBbGwkUGFyYW1zLCBjb250ZXh0PzogSHR0cENvbnRleHQpOiBPYnNlcnZhYmxlPHtcbidjb2RlJz86IG51bWJlcjtcbidwZXNhbic/OiBzdHJpbmc7XG4nZGF0YSc/OiBBcnJheTxBbWltc1N0b3JlRGVzdHJveVdpZGdldER0bz47XG4ndG90YWwnPzogbnVtYmVyO1xufT4ge1xuICAgIHJldHVybiB0aGlzLnN0b3JlRGVzdHJveVdpZGdldENvbnRyb2xsZXJGaW5kQWxsJFJlc3BvbnNlKHBhcmFtcywgY29udGV4dCkucGlwZShcbiAgICAgIG1hcCgocjogU3RyaWN0SHR0cFJlc3BvbnNlPHtcbidjb2RlJz86IG51bWJlcjtcbidwZXNhbic/OiBzdHJpbmc7XG4nZGF0YSc/OiBBcnJheTxBbWltc1N0b3JlRGVzdHJveVdpZGdldER0bz47XG4ndG90YWwnPzogbnVtYmVyO1xufT4pOiB7XG4nY29kZSc/OiBudW1iZXI7XG4ncGVzYW4nPzogc3RyaW5nO1xuJ2RhdGEnPzogQXJyYXk8QW1pbXNTdG9yZURlc3Ryb3lXaWRnZXREdG8+O1xuJ3RvdGFsJz86IG51bWJlcjtcbn0gPT4gci5ib2R5KVxuICAgICk7XG4gIH1cblxufVxuIl19
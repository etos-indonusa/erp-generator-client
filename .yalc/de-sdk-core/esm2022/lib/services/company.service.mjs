/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
import { HttpClient } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { map } from 'rxjs/operators';
import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { companyControllerCreate } from '../fn/company/company-controller-create';
import { companyControllerFindAll } from '../fn/company/company-controller-find-all';
import { companyControllerFindOne } from '../fn/company/company-controller-find-one';
import { companyControllerRemove } from '../fn/company/company-controller-remove';
import { companyControllerUpdate } from '../fn/company/company-controller-update';
import * as i0 from "@angular/core";
import * as i1 from "../api-configuration";
import * as i2 from "@angular/common/http";
export class CompanyService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `companyControllerFindAll()` */
    static { this.CompanyControllerFindAllPath = '/amims/company/company'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `companyControllerFindAll()` instead.
     *
     * This method doesn't expect any request body.
     */
    companyControllerFindAll$Response(params, context) {
        return companyControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `companyControllerFindAll$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    companyControllerFindAll(params, context) {
        return this.companyControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `companyControllerCreate()` */
    static { this.CompanyControllerCreatePath = '/amims/company/company'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `companyControllerCreate()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    companyControllerCreate$Response(params, context) {
        return companyControllerCreate(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `companyControllerCreate$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    companyControllerCreate(params, context) {
        return this.companyControllerCreate$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `companyControllerFindOne()` */
    static { this.CompanyControllerFindOnePath = '/amims/company/company/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `companyControllerFindOne()` instead.
     *
     * This method doesn't expect any request body.
     */
    companyControllerFindOne$Response(params, context) {
        return companyControllerFindOne(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `companyControllerFindOne$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    companyControllerFindOne(params, context) {
        return this.companyControllerFindOne$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `companyControllerUpdate()` */
    static { this.CompanyControllerUpdatePath = '/amims/company/company/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `companyControllerUpdate()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    companyControllerUpdate$Response(params, context) {
        return companyControllerUpdate(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `companyControllerUpdate$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    companyControllerUpdate(params, context) {
        return this.companyControllerUpdate$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `companyControllerRemove()` */
    static { this.CompanyControllerRemovePath = '/amims/company/company/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `companyControllerRemove()` instead.
     *
     * This method doesn't expect any request body.
     */
    companyControllerRemove$Response(params, context) {
        return companyControllerRemove(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `companyControllerRemove$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    companyControllerRemove(params, context) {
        return this.companyControllerRemove$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: CompanyService, deps: [{ token: i1.ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: CompanyService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: CompanyService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: i1.ApiConfiguration }, { type: i2.HttpClient }] });
//# sourceMappingURL=data:application/json;base64,
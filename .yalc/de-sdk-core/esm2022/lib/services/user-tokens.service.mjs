/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
import { HttpClient } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { map } from 'rxjs/operators';
import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { userTokensControllerCreate } from '../fn/user-tokens/user-tokens-controller-create';
import { userTokensControllerFindAll } from '../fn/user-tokens/user-tokens-controller-find-all';
import { userTokensControllerFindOne } from '../fn/user-tokens/user-tokens-controller-find-one';
import { userTokensControllerRemove } from '../fn/user-tokens/user-tokens-controller-remove';
import { userTokensControllerUpdate } from '../fn/user-tokens/user-tokens-controller-update';
import * as i0 from "@angular/core";
import * as i1 from "../api-configuration";
import * as i2 from "@angular/common/http";
export class UserTokensService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `userTokensControllerFindAll()` */
    static { this.UserTokensControllerFindAllPath = '/auth/user_tokens/user_tokens'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `userTokensControllerFindAll()` instead.
     *
     * This method doesn't expect any request body.
     */
    userTokensControllerFindAll$Response(params, context) {
        return userTokensControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `userTokensControllerFindAll$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    userTokensControllerFindAll(params, context) {
        return this.userTokensControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `userTokensControllerCreate()` */
    static { this.UserTokensControllerCreatePath = '/auth/user_tokens/user_tokens'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `userTokensControllerCreate()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    userTokensControllerCreate$Response(params, context) {
        return userTokensControllerCreate(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `userTokensControllerCreate$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    userTokensControllerCreate(params, context) {
        return this.userTokensControllerCreate$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `userTokensControllerFindOne()` */
    static { this.UserTokensControllerFindOnePath = '/auth/user_tokens/user_tokens/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `userTokensControllerFindOne()` instead.
     *
     * This method doesn't expect any request body.
     */
    userTokensControllerFindOne$Response(params, context) {
        return userTokensControllerFindOne(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `userTokensControllerFindOne$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    userTokensControllerFindOne(params, context) {
        return this.userTokensControllerFindOne$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `userTokensControllerUpdate()` */
    static { this.UserTokensControllerUpdatePath = '/auth/user_tokens/user_tokens/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `userTokensControllerUpdate()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    userTokensControllerUpdate$Response(params, context) {
        return userTokensControllerUpdate(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `userTokensControllerUpdate$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    userTokensControllerUpdate(params, context) {
        return this.userTokensControllerUpdate$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `userTokensControllerRemove()` */
    static { this.UserTokensControllerRemovePath = '/auth/user_tokens/user_tokens/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `userTokensControllerRemove()` instead.
     *
     * This method doesn't expect any request body.
     */
    userTokensControllerRemove$Response(params, context) {
        return userTokensControllerRemove(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `userTokensControllerRemove$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    userTokensControllerRemove(params, context) {
        return this.userTokensControllerRemove$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: UserTokensService, deps: [{ token: i1.ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: UserTokensService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: UserTokensService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: i1.ApiConfiguration }, { type: i2.HttpClient }] });
//# sourceMappingURL=data:application/json;base64,
/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
import { HttpClient } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { map } from 'rxjs/operators';
import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { engineerRtiPartControllerCreate } from '../fn/engineer-rti-part/engineer-rti-part-controller-create';
import { engineerRtiPartControllerFindAll } from '../fn/engineer-rti-part/engineer-rti-part-controller-find-all';
import { engineerRtiPartControllerFindOne } from '../fn/engineer-rti-part/engineer-rti-part-controller-find-one';
import { engineerRtiPartControllerRemove } from '../fn/engineer-rti-part/engineer-rti-part-controller-remove';
import { engineerRtiPartControllerUpdate } from '../fn/engineer-rti-part/engineer-rti-part-controller-update';
import * as i0 from "@angular/core";
import * as i1 from "../api-configuration";
import * as i2 from "@angular/common/http";
export class EngineerRtiPartService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `engineerRtiPartControllerFindAll()` */
    static { this.EngineerRtiPartControllerFindAllPath = '/amims/engineer_rti_part/engineer_rti_part'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `engineerRtiPartControllerFindAll()` instead.
     *
     * This method doesn't expect any request body.
     */
    engineerRtiPartControllerFindAll$Response(params, context) {
        return engineerRtiPartControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `engineerRtiPartControllerFindAll$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    engineerRtiPartControllerFindAll(params, context) {
        return this.engineerRtiPartControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `engineerRtiPartControllerCreate()` */
    static { this.EngineerRtiPartControllerCreatePath = '/amims/engineer_rti_part/engineer_rti_part'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `engineerRtiPartControllerCreate()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    engineerRtiPartControllerCreate$Response(params, context) {
        return engineerRtiPartControllerCreate(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `engineerRtiPartControllerCreate$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    engineerRtiPartControllerCreate(params, context) {
        return this.engineerRtiPartControllerCreate$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `engineerRtiPartControllerFindOne()` */
    static { this.EngineerRtiPartControllerFindOnePath = '/amims/engineer_rti_part/engineer_rti_part/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `engineerRtiPartControllerFindOne()` instead.
     *
     * This method doesn't expect any request body.
     */
    engineerRtiPartControllerFindOne$Response(params, context) {
        return engineerRtiPartControllerFindOne(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `engineerRtiPartControllerFindOne$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    engineerRtiPartControllerFindOne(params, context) {
        return this.engineerRtiPartControllerFindOne$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `engineerRtiPartControllerUpdate()` */
    static { this.EngineerRtiPartControllerUpdatePath = '/amims/engineer_rti_part/engineer_rti_part/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `engineerRtiPartControllerUpdate()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    engineerRtiPartControllerUpdate$Response(params, context) {
        return engineerRtiPartControllerUpdate(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `engineerRtiPartControllerUpdate$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    engineerRtiPartControllerUpdate(params, context) {
        return this.engineerRtiPartControllerUpdate$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `engineerRtiPartControllerRemove()` */
    static { this.EngineerRtiPartControllerRemovePath = '/amims/engineer_rti_part/engineer_rti_part/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `engineerRtiPartControllerRemove()` instead.
     *
     * This method doesn't expect any request body.
     */
    engineerRtiPartControllerRemove$Response(params, context) {
        return engineerRtiPartControllerRemove(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `engineerRtiPartControllerRemove$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    engineerRtiPartControllerRemove(params, context) {
        return this.engineerRtiPartControllerRemove$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: EngineerRtiPartService, deps: [{ token: i1.ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: EngineerRtiPartService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: EngineerRtiPartService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: i1.ApiConfiguration }, { type: i2.HttpClient }] });
//# sourceMappingURL=data:application/json;base64,
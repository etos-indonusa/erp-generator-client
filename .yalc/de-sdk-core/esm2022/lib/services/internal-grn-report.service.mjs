/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
import { HttpClient } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { map } from 'rxjs/operators';
import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { internalGrnReportControllerFindAll } from '../fn/internal-grn-report/internal-grn-report-controller-find-all';
import { internalGrnReportControllerFindOne } from '../fn/internal-grn-report/internal-grn-report-controller-find-one';
import * as i0 from "@angular/core";
import * as i1 from "../api-configuration";
import * as i2 from "@angular/common/http";
export class InternalGrnReportService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `internalGrnReportControllerFindAll()` */
    static { this.InternalGrnReportControllerFindAllPath = '/amims/internal_grn/internal_grn_report/list'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `internalGrnReportControllerFindAll()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    internalGrnReportControllerFindAll$Response(params, context) {
        return internalGrnReportControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `internalGrnReportControllerFindAll$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    internalGrnReportControllerFindAll(params, context) {
        return this.internalGrnReportControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `internalGrnReportControllerFindOne()` */
    static { this.InternalGrnReportControllerFindOnePath = '/amims/internal_grn/internal_grn_report/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `internalGrnReportControllerFindOne()` instead.
     *
     * This method doesn't expect any request body.
     */
    internalGrnReportControllerFindOne$Response(params, context) {
        return internalGrnReportControllerFindOne(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `internalGrnReportControllerFindOne$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    internalGrnReportControllerFindOne(params, context) {
        return this.internalGrnReportControllerFindOne$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: InternalGrnReportService, deps: [{ token: i1.ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: InternalGrnReportService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: InternalGrnReportService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: i1.ApiConfiguration }, { type: i2.HttpClient }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW50ZXJuYWwtZ3JuLXJlcG9ydC5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvc2RrY29yZS9zcmMvbGliL3NlcnZpY2VzL2ludGVybmFsLWdybi1yZXBvcnQuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxvQkFBb0I7QUFDcEIsb0JBQW9CO0FBQ3BCLG1EQUFtRDtBQUVuRCxPQUFPLEVBQUUsVUFBVSxFQUFlLE1BQU0sc0JBQXNCLENBQUM7QUFDL0QsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUUzQyxPQUFPLEVBQUUsR0FBRyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFFckMsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQzlDLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLHNCQUFzQixDQUFDO0FBSXhELE9BQU8sRUFBRSxrQ0FBa0MsRUFBRSxNQUFNLG1FQUFtRSxDQUFDO0FBRXZILE9BQU8sRUFBRSxrQ0FBa0MsRUFBRSxNQUFNLG1FQUFtRSxDQUFDOzs7O0FBSXZILE1BQU0sT0FBTyx3QkFBeUIsU0FBUSxXQUFXO0lBQ3ZELFlBQVksTUFBd0IsRUFBRSxJQUFnQjtRQUNwRCxLQUFLLENBQUMsTUFBTSxFQUFFLElBQUksQ0FBQyxDQUFDO0lBQ3RCLENBQUM7SUFFRCxxRUFBcUU7YUFDckQsMkNBQXNDLEdBQUcsOENBQThDLEFBQWpELENBQWtEO0lBRXhHOzs7OztPQUtHO0lBQ0gsMkNBQTJDLENBQUMsTUFBaUQsRUFBRSxPQUFxQjtRQU1sSCxPQUFPLGtDQUFrQyxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLE9BQU8sRUFBRSxNQUFNLEVBQUUsT0FBTyxDQUFDLENBQUM7SUFDdEYsQ0FBQztJQUVEOzs7OztPQUtHO0lBQ0gsa0NBQWtDLENBQUMsTUFBaUQsRUFBRSxPQUFxQjtRQU16RyxPQUFPLElBQUksQ0FBQywyQ0FBMkMsQ0FBQyxNQUFNLEVBQUUsT0FBTyxDQUFDLENBQUMsSUFBSSxDQUMzRSxHQUFHLENBQUMsQ0FBQyxDQUtULEVBS0EsRUFBRSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FDUCxDQUFDO0lBQ0osQ0FBQztJQUVELHFFQUFxRTthQUNyRCwyQ0FBc0MsR0FBRyw4Q0FBOEMsQUFBakQsQ0FBa0Q7SUFFeEc7Ozs7O09BS0c7SUFDSCwyQ0FBMkMsQ0FBQyxNQUFpRCxFQUFFLE9BQXFCO1FBS2xILE9BQU8sa0NBQWtDLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsT0FBTyxFQUFFLE1BQU0sRUFBRSxPQUFPLENBQUMsQ0FBQztJQUN0RixDQUFDO0lBRUQ7Ozs7O09BS0c7SUFDSCxrQ0FBa0MsQ0FBQyxNQUFpRCxFQUFFLE9BQXFCO1FBS3pHLE9BQU8sSUFBSSxDQUFDLDJDQUEyQyxDQUFDLE1BQU0sRUFBRSxPQUFPLENBQUMsQ0FBQyxJQUFJLENBQzNFLEdBQUcsQ0FBQyxDQUFDLENBSVQsRUFJQSxFQUFFLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUNQLENBQUM7SUFDSixDQUFDOytHQXpGVSx3QkFBd0I7bUhBQXhCLHdCQUF3QixjQURYLE1BQU07OzRGQUNuQix3QkFBd0I7a0JBRHBDLFVBQVU7bUJBQUMsRUFBRSxVQUFVLEVBQUUsTUFBTSxFQUFFIiwic291cmNlc0NvbnRlbnQiOlsiLyogdHNsaW50OmRpc2FibGUgKi9cbi8qIGVzbGludC1kaXNhYmxlICovXG4vKiBDb2RlIGdlbmVyYXRlZCBieSBuZy1vcGVuYXBpLWdlbiBETyBOT1QgRURJVC4gKi9cblxuaW1wb3J0IHsgSHR0cENsaWVudCwgSHR0cENvbnRleHQgfSBmcm9tICdAYW5ndWxhci9jb21tb24vaHR0cCc7XG5pbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBtYXAgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5cbmltcG9ydCB7IEJhc2VTZXJ2aWNlIH0gZnJvbSAnLi4vYmFzZS1zZXJ2aWNlJztcbmltcG9ydCB7IEFwaUNvbmZpZ3VyYXRpb24gfSBmcm9tICcuLi9hcGktY29uZmlndXJhdGlvbic7XG5pbXBvcnQgeyBTdHJpY3RIdHRwUmVzcG9uc2UgfSBmcm9tICcuLi9zdHJpY3QtaHR0cC1yZXNwb25zZSc7XG5cbmltcG9ydCB7IEFtaW1zSW50ZXJuYWxHcm5SZXBvcnREdG8gfSBmcm9tICcuLi9tb2RlbHMvYW1pbXMtaW50ZXJuYWwtZ3JuLXJlcG9ydC1kdG8nO1xuaW1wb3J0IHsgaW50ZXJuYWxHcm5SZXBvcnRDb250cm9sbGVyRmluZEFsbCB9IGZyb20gJy4uL2ZuL2ludGVybmFsLWdybi1yZXBvcnQvaW50ZXJuYWwtZ3JuLXJlcG9ydC1jb250cm9sbGVyLWZpbmQtYWxsJztcbmltcG9ydCB7IEludGVybmFsR3JuUmVwb3J0Q29udHJvbGxlckZpbmRBbGwkUGFyYW1zIH0gZnJvbSAnLi4vZm4vaW50ZXJuYWwtZ3JuLXJlcG9ydC9pbnRlcm5hbC1ncm4tcmVwb3J0LWNvbnRyb2xsZXItZmluZC1hbGwnO1xuaW1wb3J0IHsgaW50ZXJuYWxHcm5SZXBvcnRDb250cm9sbGVyRmluZE9uZSB9IGZyb20gJy4uL2ZuL2ludGVybmFsLWdybi1yZXBvcnQvaW50ZXJuYWwtZ3JuLXJlcG9ydC1jb250cm9sbGVyLWZpbmQtb25lJztcbmltcG9ydCB7IEludGVybmFsR3JuUmVwb3J0Q29udHJvbGxlckZpbmRPbmUkUGFyYW1zIH0gZnJvbSAnLi4vZm4vaW50ZXJuYWwtZ3JuLXJlcG9ydC9pbnRlcm5hbC1ncm4tcmVwb3J0LWNvbnRyb2xsZXItZmluZC1vbmUnO1xuXG5ASW5qZWN0YWJsZSh7IHByb3ZpZGVkSW46ICdyb290JyB9KVxuZXhwb3J0IGNsYXNzIEludGVybmFsR3JuUmVwb3J0U2VydmljZSBleHRlbmRzIEJhc2VTZXJ2aWNlIHtcbiAgY29uc3RydWN0b3IoY29uZmlnOiBBcGlDb25maWd1cmF0aW9uLCBodHRwOiBIdHRwQ2xpZW50KSB7XG4gICAgc3VwZXIoY29uZmlnLCBodHRwKTtcbiAgfVxuXG4gIC8qKiBQYXRoIHBhcnQgZm9yIG9wZXJhdGlvbiBgaW50ZXJuYWxHcm5SZXBvcnRDb250cm9sbGVyRmluZEFsbCgpYCAqL1xuICBzdGF0aWMgcmVhZG9ubHkgSW50ZXJuYWxHcm5SZXBvcnRDb250cm9sbGVyRmluZEFsbFBhdGggPSAnL2FtaW1zL2ludGVybmFsX2dybi9pbnRlcm5hbF9ncm5fcmVwb3J0L2xpc3QnO1xuXG4gIC8qKlxuICAgKiBUaGlzIG1ldGhvZCBwcm92aWRlcyBhY2Nlc3MgdG8gdGhlIGZ1bGwgYEh0dHBSZXNwb25zZWAsIGFsbG93aW5nIGFjY2VzcyB0byByZXNwb25zZSBoZWFkZXJzLlxuICAgKiBUbyBhY2Nlc3Mgb25seSB0aGUgcmVzcG9uc2UgYm9keSwgdXNlIGBpbnRlcm5hbEdyblJlcG9ydENvbnRyb2xsZXJGaW5kQWxsKClgIGluc3RlYWQuXG4gICAqXG4gICAqIFRoaXMgbWV0aG9kIHNlbmRzIGBhcHBsaWNhdGlvbi9qc29uYCBhbmQgaGFuZGxlcyByZXF1ZXN0IGJvZHkgb2YgdHlwZSBgYXBwbGljYXRpb24vanNvbmAuXG4gICAqL1xuICBpbnRlcm5hbEdyblJlcG9ydENvbnRyb2xsZXJGaW5kQWxsJFJlc3BvbnNlKHBhcmFtczogSW50ZXJuYWxHcm5SZXBvcnRDb250cm9sbGVyRmluZEFsbCRQYXJhbXMsIGNvbnRleHQ/OiBIdHRwQ29udGV4dCk6IE9ic2VydmFibGU8U3RyaWN0SHR0cFJlc3BvbnNlPHtcbidjb2RlJz86IG51bWJlcjtcbidwZXNhbic/OiBzdHJpbmc7XG4nZGF0YSc/OiBBcnJheTxBbWltc0ludGVybmFsR3JuUmVwb3J0RHRvPjtcbid0b3RhbCc/OiBudW1iZXI7XG59Pj4ge1xuICAgIHJldHVybiBpbnRlcm5hbEdyblJlcG9ydENvbnRyb2xsZXJGaW5kQWxsKHRoaXMuaHR0cCwgdGhpcy5yb290VXJsLCBwYXJhbXMsIGNvbnRleHQpO1xuICB9XG5cbiAgLyoqXG4gICAqIFRoaXMgbWV0aG9kIHByb3ZpZGVzIGFjY2VzcyBvbmx5IHRvIHRoZSByZXNwb25zZSBib2R5LlxuICAgKiBUbyBhY2Nlc3MgdGhlIGZ1bGwgcmVzcG9uc2UgKGZvciBoZWFkZXJzLCBmb3IgZXhhbXBsZSksIGBpbnRlcm5hbEdyblJlcG9ydENvbnRyb2xsZXJGaW5kQWxsJFJlc3BvbnNlKClgIGluc3RlYWQuXG4gICAqXG4gICAqIFRoaXMgbWV0aG9kIHNlbmRzIGBhcHBsaWNhdGlvbi9qc29uYCBhbmQgaGFuZGxlcyByZXF1ZXN0IGJvZHkgb2YgdHlwZSBgYXBwbGljYXRpb24vanNvbmAuXG4gICAqL1xuICBpbnRlcm5hbEdyblJlcG9ydENvbnRyb2xsZXJGaW5kQWxsKHBhcmFtczogSW50ZXJuYWxHcm5SZXBvcnRDb250cm9sbGVyRmluZEFsbCRQYXJhbXMsIGNvbnRleHQ/OiBIdHRwQ29udGV4dCk6IE9ic2VydmFibGU8e1xuJ2NvZGUnPzogbnVtYmVyO1xuJ3Blc2FuJz86IHN0cmluZztcbidkYXRhJz86IEFycmF5PEFtaW1zSW50ZXJuYWxHcm5SZXBvcnREdG8+O1xuJ3RvdGFsJz86IG51bWJlcjtcbn0+IHtcbiAgICByZXR1cm4gdGhpcy5pbnRlcm5hbEdyblJlcG9ydENvbnRyb2xsZXJGaW5kQWxsJFJlc3BvbnNlKHBhcmFtcywgY29udGV4dCkucGlwZShcbiAgICAgIG1hcCgocjogU3RyaWN0SHR0cFJlc3BvbnNlPHtcbidjb2RlJz86IG51bWJlcjtcbidwZXNhbic/OiBzdHJpbmc7XG4nZGF0YSc/OiBBcnJheTxBbWltc0ludGVybmFsR3JuUmVwb3J0RHRvPjtcbid0b3RhbCc/OiBudW1iZXI7XG59Pik6IHtcbidjb2RlJz86IG51bWJlcjtcbidwZXNhbic/OiBzdHJpbmc7XG4nZGF0YSc/OiBBcnJheTxBbWltc0ludGVybmFsR3JuUmVwb3J0RHRvPjtcbid0b3RhbCc/OiBudW1iZXI7XG59ID0+IHIuYm9keSlcbiAgICApO1xuICB9XG5cbiAgLyoqIFBhdGggcGFydCBmb3Igb3BlcmF0aW9uIGBpbnRlcm5hbEdyblJlcG9ydENvbnRyb2xsZXJGaW5kT25lKClgICovXG4gIHN0YXRpYyByZWFkb25seSBJbnRlcm5hbEdyblJlcG9ydENvbnRyb2xsZXJGaW5kT25lUGF0aCA9ICcvYW1pbXMvaW50ZXJuYWxfZ3JuL2ludGVybmFsX2dybl9yZXBvcnQve2lkfSc7XG5cbiAgLyoqXG4gICAqIFRoaXMgbWV0aG9kIHByb3ZpZGVzIGFjY2VzcyB0byB0aGUgZnVsbCBgSHR0cFJlc3BvbnNlYCwgYWxsb3dpbmcgYWNjZXNzIHRvIHJlc3BvbnNlIGhlYWRlcnMuXG4gICAqIFRvIGFjY2VzcyBvbmx5IHRoZSByZXNwb25zZSBib2R5LCB1c2UgYGludGVybmFsR3JuUmVwb3J0Q29udHJvbGxlckZpbmRPbmUoKWAgaW5zdGVhZC5cbiAgICpcbiAgICogVGhpcyBtZXRob2QgZG9lc24ndCBleHBlY3QgYW55IHJlcXVlc3QgYm9keS5cbiAgICovXG4gIGludGVybmFsR3JuUmVwb3J0Q29udHJvbGxlckZpbmRPbmUkUmVzcG9uc2UocGFyYW1zOiBJbnRlcm5hbEdyblJlcG9ydENvbnRyb2xsZXJGaW5kT25lJFBhcmFtcywgY29udGV4dD86IEh0dHBDb250ZXh0KTogT2JzZXJ2YWJsZTxTdHJpY3RIdHRwUmVzcG9uc2U8e1xuJ2NvZGUnPzogbnVtYmVyO1xuJ3Blc2FuJz86IHN0cmluZztcbidkYXRhJz86IEFtaW1zSW50ZXJuYWxHcm5SZXBvcnREdG87XG59Pj4ge1xuICAgIHJldHVybiBpbnRlcm5hbEdyblJlcG9ydENvbnRyb2xsZXJGaW5kT25lKHRoaXMuaHR0cCwgdGhpcy5yb290VXJsLCBwYXJhbXMsIGNvbnRleHQpO1xuICB9XG5cbiAgLyoqXG4gICAqIFRoaXMgbWV0aG9kIHByb3ZpZGVzIGFjY2VzcyBvbmx5IHRvIHRoZSByZXNwb25zZSBib2R5LlxuICAgKiBUbyBhY2Nlc3MgdGhlIGZ1bGwgcmVzcG9uc2UgKGZvciBoZWFkZXJzLCBmb3IgZXhhbXBsZSksIGBpbnRlcm5hbEdyblJlcG9ydENvbnRyb2xsZXJGaW5kT25lJFJlc3BvbnNlKClgIGluc3RlYWQuXG4gICAqXG4gICAqIFRoaXMgbWV0aG9kIGRvZXNuJ3QgZXhwZWN0IGFueSByZXF1ZXN0IGJvZHkuXG4gICAqL1xuICBpbnRlcm5hbEdyblJlcG9ydENvbnRyb2xsZXJGaW5kT25lKHBhcmFtczogSW50ZXJuYWxHcm5SZXBvcnRDb250cm9sbGVyRmluZE9uZSRQYXJhbXMsIGNvbnRleHQ/OiBIdHRwQ29udGV4dCk6IE9ic2VydmFibGU8e1xuJ2NvZGUnPzogbnVtYmVyO1xuJ3Blc2FuJz86IHN0cmluZztcbidkYXRhJz86IEFtaW1zSW50ZXJuYWxHcm5SZXBvcnREdG87XG59PiB7XG4gICAgcmV0dXJuIHRoaXMuaW50ZXJuYWxHcm5SZXBvcnRDb250cm9sbGVyRmluZE9uZSRSZXNwb25zZShwYXJhbXMsIGNvbnRleHQpLnBpcGUoXG4gICAgICBtYXAoKHI6IFN0cmljdEh0dHBSZXNwb25zZTx7XG4nY29kZSc/OiBudW1iZXI7XG4ncGVzYW4nPzogc3RyaW5nO1xuJ2RhdGEnPzogQW1pbXNJbnRlcm5hbEdyblJlcG9ydER0bztcbn0+KToge1xuJ2NvZGUnPzogbnVtYmVyO1xuJ3Blc2FuJz86IHN0cmluZztcbidkYXRhJz86IEFtaW1zSW50ZXJuYWxHcm5SZXBvcnREdG87XG59ID0+IHIuYm9keSlcbiAgICApO1xuICB9XG5cbn1cbiJdfQ==
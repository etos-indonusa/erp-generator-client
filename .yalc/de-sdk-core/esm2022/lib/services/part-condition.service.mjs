/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
import { HttpClient } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { map } from 'rxjs/operators';
import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { partConditionControllerCreate } from '../fn/part-condition/part-condition-controller-create';
import { partConditionControllerFindAll } from '../fn/part-condition/part-condition-controller-find-all';
import { partConditionControllerFindOne } from '../fn/part-condition/part-condition-controller-find-one';
import { partConditionControllerRemove } from '../fn/part-condition/part-condition-controller-remove';
import { partConditionControllerUpdate } from '../fn/part-condition/part-condition-controller-update';
import * as i0 from "@angular/core";
import * as i1 from "../api-configuration";
import * as i2 from "@angular/common/http";
export class PartConditionService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `partConditionControllerFindAll()` */
    static { this.PartConditionControllerFindAllPath = '/amims/part_condition/part_condition'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `partConditionControllerFindAll()` instead.
     *
     * This method doesn't expect any request body.
     */
    partConditionControllerFindAll$Response(params, context) {
        return partConditionControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `partConditionControllerFindAll$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    partConditionControllerFindAll(params, context) {
        return this.partConditionControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `partConditionControllerCreate()` */
    static { this.PartConditionControllerCreatePath = '/amims/part_condition/part_condition'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `partConditionControllerCreate()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    partConditionControllerCreate$Response(params, context) {
        return partConditionControllerCreate(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `partConditionControllerCreate$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    partConditionControllerCreate(params, context) {
        return this.partConditionControllerCreate$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `partConditionControllerFindOne()` */
    static { this.PartConditionControllerFindOnePath = '/amims/part_condition/part_condition/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `partConditionControllerFindOne()` instead.
     *
     * This method doesn't expect any request body.
     */
    partConditionControllerFindOne$Response(params, context) {
        return partConditionControllerFindOne(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `partConditionControllerFindOne$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    partConditionControllerFindOne(params, context) {
        return this.partConditionControllerFindOne$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `partConditionControllerUpdate()` */
    static { this.PartConditionControllerUpdatePath = '/amims/part_condition/part_condition/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `partConditionControllerUpdate()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    partConditionControllerUpdate$Response(params, context) {
        return partConditionControllerUpdate(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `partConditionControllerUpdate$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    partConditionControllerUpdate(params, context) {
        return this.partConditionControllerUpdate$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `partConditionControllerRemove()` */
    static { this.PartConditionControllerRemovePath = '/amims/part_condition/part_condition/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `partConditionControllerRemove()` instead.
     *
     * This method doesn't expect any request body.
     */
    partConditionControllerRemove$Response(params, context) {
        return partConditionControllerRemove(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `partConditionControllerRemove$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    partConditionControllerRemove(params, context) {
        return this.partConditionControllerRemove$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: PartConditionService, deps: [{ token: i1.ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: PartConditionService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: PartConditionService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: i1.ApiConfiguration }, { type: i2.HttpClient }] });
//# sourceMappingURL=data:application/json;base64,
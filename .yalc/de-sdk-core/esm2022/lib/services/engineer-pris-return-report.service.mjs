/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
import { HttpClient } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { map } from 'rxjs/operators';
import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { engineerPrisReturnReportControllerFindAll } from '../fn/engineer-pris-return-report/engineer-pris-return-report-controller-find-all';
import { engineerPrisReturnReportControllerFindOne } from '../fn/engineer-pris-return-report/engineer-pris-return-report-controller-find-one';
import * as i0 from "@angular/core";
import * as i1 from "../api-configuration";
import * as i2 from "@angular/common/http";
export class EngineerPrisReturnReportService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `engineerPrisReturnReportControllerFindAll()` */
    static { this.EngineerPrisReturnReportControllerFindAllPath = '/amims/engineer_pris_return/engineer_pris_return_report/list'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `engineerPrisReturnReportControllerFindAll()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    engineerPrisReturnReportControllerFindAll$Response(params, context) {
        return engineerPrisReturnReportControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `engineerPrisReturnReportControllerFindAll$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    engineerPrisReturnReportControllerFindAll(params, context) {
        return this.engineerPrisReturnReportControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `engineerPrisReturnReportControllerFindOne()` */
    static { this.EngineerPrisReturnReportControllerFindOnePath = '/amims/engineer_pris_return/engineer_pris_return_report/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `engineerPrisReturnReportControllerFindOne()` instead.
     *
     * This method doesn't expect any request body.
     */
    engineerPrisReturnReportControllerFindOne$Response(params, context) {
        return engineerPrisReturnReportControllerFindOne(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `engineerPrisReturnReportControllerFindOne$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    engineerPrisReturnReportControllerFindOne(params, context) {
        return this.engineerPrisReturnReportControllerFindOne$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: EngineerPrisReturnReportService, deps: [{ token: i1.ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: EngineerPrisReturnReportService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: EngineerPrisReturnReportService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: i1.ApiConfiguration }, { type: i2.HttpClient }] });
//# sourceMappingURL=data:application/json;base64,
/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
import { HttpClient } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { map } from 'rxjs/operators';
import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { documentNumberingCounterControllerCreate } from '../fn/document-numbering-counter/document-numbering-counter-controller-create';
import { documentNumberingCounterControllerFindAll } from '../fn/document-numbering-counter/document-numbering-counter-controller-find-all';
import { documentNumberingCounterControllerFindOne } from '../fn/document-numbering-counter/document-numbering-counter-controller-find-one';
import { documentNumberingCounterControllerRemove } from '../fn/document-numbering-counter/document-numbering-counter-controller-remove';
import { documentNumberingCounterControllerUpdate } from '../fn/document-numbering-counter/document-numbering-counter-controller-update';
import * as i0 from "@angular/core";
import * as i1 from "../api-configuration";
import * as i2 from "@angular/common/http";
export class DocumentNumberingCounterService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `documentNumberingCounterControllerFindAll()` */
    static { this.DocumentNumberingCounterControllerFindAllPath = '/auth/document_numbering_counter/document_numbering_counter'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `documentNumberingCounterControllerFindAll()` instead.
     *
     * This method doesn't expect any request body.
     */
    documentNumberingCounterControllerFindAll$Response(params, context) {
        return documentNumberingCounterControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `documentNumberingCounterControllerFindAll$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    documentNumberingCounterControllerFindAll(params, context) {
        return this.documentNumberingCounterControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `documentNumberingCounterControllerCreate()` */
    static { this.DocumentNumberingCounterControllerCreatePath = '/auth/document_numbering_counter/document_numbering_counter'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `documentNumberingCounterControllerCreate()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    documentNumberingCounterControllerCreate$Response(params, context) {
        return documentNumberingCounterControllerCreate(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `documentNumberingCounterControllerCreate$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    documentNumberingCounterControllerCreate(params, context) {
        return this.documentNumberingCounterControllerCreate$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `documentNumberingCounterControllerFindOne()` */
    static { this.DocumentNumberingCounterControllerFindOnePath = '/auth/document_numbering_counter/document_numbering_counter/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `documentNumberingCounterControllerFindOne()` instead.
     *
     * This method doesn't expect any request body.
     */
    documentNumberingCounterControllerFindOne$Response(params, context) {
        return documentNumberingCounterControllerFindOne(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `documentNumberingCounterControllerFindOne$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    documentNumberingCounterControllerFindOne(params, context) {
        return this.documentNumberingCounterControllerFindOne$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `documentNumberingCounterControllerUpdate()` */
    static { this.DocumentNumberingCounterControllerUpdatePath = '/auth/document_numbering_counter/document_numbering_counter/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `documentNumberingCounterControllerUpdate()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    documentNumberingCounterControllerUpdate$Response(params, context) {
        return documentNumberingCounterControllerUpdate(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `documentNumberingCounterControllerUpdate$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    documentNumberingCounterControllerUpdate(params, context) {
        return this.documentNumberingCounterControllerUpdate$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `documentNumberingCounterControllerRemove()` */
    static { this.DocumentNumberingCounterControllerRemovePath = '/auth/document_numbering_counter/document_numbering_counter/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `documentNumberingCounterControllerRemove()` instead.
     *
     * This method doesn't expect any request body.
     */
    documentNumberingCounterControllerRemove$Response(params, context) {
        return documentNumberingCounterControllerRemove(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `documentNumberingCounterControllerRemove$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    documentNumberingCounterControllerRemove(params, context) {
        return this.documentNumberingCounterControllerRemove$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: DocumentNumberingCounterService, deps: [{ token: i1.ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: DocumentNumberingCounterService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: DocumentNumberingCounterService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: i1.ApiConfiguration }, { type: i2.HttpClient }] });
//# sourceMappingURL=data:application/json;base64,
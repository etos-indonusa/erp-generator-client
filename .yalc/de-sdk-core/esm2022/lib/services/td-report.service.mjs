/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
import { HttpClient } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { map } from 'rxjs/operators';
import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { tdReportControllerFindAll } from '../fn/td-report/td-report-controller-find-all';
import { tdReportControllerFindOne } from '../fn/td-report/td-report-controller-find-one';
import * as i0 from "@angular/core";
import * as i1 from "../api-configuration";
import * as i2 from "@angular/common/http";
export class TdReportService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `tdReportControllerFindAll()` */
    static { this.TdReportControllerFindAllPath = '/amims/td/td_report/list'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `tdReportControllerFindAll()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    tdReportControllerFindAll$Response(params, context) {
        return tdReportControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `tdReportControllerFindAll$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    tdReportControllerFindAll(params, context) {
        return this.tdReportControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `tdReportControllerFindOne()` */
    static { this.TdReportControllerFindOnePath = '/amims/td/td_report/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `tdReportControllerFindOne()` instead.
     *
     * This method doesn't expect any request body.
     */
    tdReportControllerFindOne$Response(params, context) {
        return tdReportControllerFindOne(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `tdReportControllerFindOne$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    tdReportControllerFindOne(params, context) {
        return this.tdReportControllerFindOne$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: TdReportService, deps: [{ token: i1.ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: TdReportService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: TdReportService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: i1.ApiConfiguration }, { type: i2.HttpClient }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGQtcmVwb3J0LnNlcnZpY2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9zZGtjb3JlL3NyYy9saWIvc2VydmljZXMvdGQtcmVwb3J0LnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsb0JBQW9CO0FBQ3BCLG9CQUFvQjtBQUNwQixtREFBbUQ7QUFFbkQsT0FBTyxFQUFFLFVBQVUsRUFBZSxNQUFNLHNCQUFzQixDQUFDO0FBQy9ELE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFM0MsT0FBTyxFQUFFLEdBQUcsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBRXJDLE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUM5QyxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQztBQUl4RCxPQUFPLEVBQUUseUJBQXlCLEVBQUUsTUFBTSwrQ0FBK0MsQ0FBQztBQUUxRixPQUFPLEVBQUUseUJBQXlCLEVBQUUsTUFBTSwrQ0FBK0MsQ0FBQzs7OztBQUkxRixNQUFNLE9BQU8sZUFBZ0IsU0FBUSxXQUFXO0lBQzlDLFlBQVksTUFBd0IsRUFBRSxJQUFnQjtRQUNwRCxLQUFLLENBQUMsTUFBTSxFQUFFLElBQUksQ0FBQyxDQUFDO0lBQ3RCLENBQUM7SUFFRCw0REFBNEQ7YUFDNUMsa0NBQTZCLEdBQUcsMEJBQTBCLEFBQTdCLENBQThCO0lBRTNFOzs7OztPQUtHO0lBQ0gsa0NBQWtDLENBQUMsTUFBd0MsRUFBRSxPQUFxQjtRQU1oRyxPQUFPLHlCQUF5QixDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLE9BQU8sRUFBRSxNQUFNLEVBQUUsT0FBTyxDQUFDLENBQUM7SUFDN0UsQ0FBQztJQUVEOzs7OztPQUtHO0lBQ0gseUJBQXlCLENBQUMsTUFBd0MsRUFBRSxPQUFxQjtRQU12RixPQUFPLElBQUksQ0FBQyxrQ0FBa0MsQ0FBQyxNQUFNLEVBQUUsT0FBTyxDQUFDLENBQUMsSUFBSSxDQUNsRSxHQUFHLENBQUMsQ0FBQyxDQUtULEVBS0EsRUFBRSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FDUCxDQUFDO0lBQ0osQ0FBQztJQUVELDREQUE0RDthQUM1QyxrQ0FBNkIsR0FBRywwQkFBMEIsQUFBN0IsQ0FBOEI7SUFFM0U7Ozs7O09BS0c7SUFDSCxrQ0FBa0MsQ0FBQyxNQUF3QyxFQUFFLE9BQXFCO1FBS2hHLE9BQU8seUJBQXlCLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsT0FBTyxFQUFFLE1BQU0sRUFBRSxPQUFPLENBQUMsQ0FBQztJQUM3RSxDQUFDO0lBRUQ7Ozs7O09BS0c7SUFDSCx5QkFBeUIsQ0FBQyxNQUF3QyxFQUFFLE9BQXFCO1FBS3ZGLE9BQU8sSUFBSSxDQUFDLGtDQUFrQyxDQUFDLE1BQU0sRUFBRSxPQUFPLENBQUMsQ0FBQyxJQUFJLENBQ2xFLEdBQUcsQ0FBQyxDQUFDLENBSVQsRUFJQSxFQUFFLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUNQLENBQUM7SUFDSixDQUFDOytHQXpGVSxlQUFlO21IQUFmLGVBQWUsY0FERixNQUFNOzs0RkFDbkIsZUFBZTtrQkFEM0IsVUFBVTttQkFBQyxFQUFFLFVBQVUsRUFBRSxNQUFNLEVBQUUiLCJzb3VyY2VzQ29udGVudCI6WyIvKiB0c2xpbnQ6ZGlzYWJsZSAqL1xuLyogZXNsaW50LWRpc2FibGUgKi9cbi8qIENvZGUgZ2VuZXJhdGVkIGJ5IG5nLW9wZW5hcGktZ2VuIERPIE5PVCBFRElULiAqL1xuXG5pbXBvcnQgeyBIdHRwQ2xpZW50LCBIdHRwQ29udGV4dCB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbi9odHRwJztcbmltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IG1hcCB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcblxuaW1wb3J0IHsgQmFzZVNlcnZpY2UgfSBmcm9tICcuLi9iYXNlLXNlcnZpY2UnO1xuaW1wb3J0IHsgQXBpQ29uZmlndXJhdGlvbiB9IGZyb20gJy4uL2FwaS1jb25maWd1cmF0aW9uJztcbmltcG9ydCB7IFN0cmljdEh0dHBSZXNwb25zZSB9IGZyb20gJy4uL3N0cmljdC1odHRwLXJlc3BvbnNlJztcblxuaW1wb3J0IHsgQW1pbXNUZFJlcG9ydER0byB9IGZyb20gJy4uL21vZGVscy9hbWltcy10ZC1yZXBvcnQtZHRvJztcbmltcG9ydCB7IHRkUmVwb3J0Q29udHJvbGxlckZpbmRBbGwgfSBmcm9tICcuLi9mbi90ZC1yZXBvcnQvdGQtcmVwb3J0LWNvbnRyb2xsZXItZmluZC1hbGwnO1xuaW1wb3J0IHsgVGRSZXBvcnRDb250cm9sbGVyRmluZEFsbCRQYXJhbXMgfSBmcm9tICcuLi9mbi90ZC1yZXBvcnQvdGQtcmVwb3J0LWNvbnRyb2xsZXItZmluZC1hbGwnO1xuaW1wb3J0IHsgdGRSZXBvcnRDb250cm9sbGVyRmluZE9uZSB9IGZyb20gJy4uL2ZuL3RkLXJlcG9ydC90ZC1yZXBvcnQtY29udHJvbGxlci1maW5kLW9uZSc7XG5pbXBvcnQgeyBUZFJlcG9ydENvbnRyb2xsZXJGaW5kT25lJFBhcmFtcyB9IGZyb20gJy4uL2ZuL3RkLXJlcG9ydC90ZC1yZXBvcnQtY29udHJvbGxlci1maW5kLW9uZSc7XG5cbkBJbmplY3RhYmxlKHsgcHJvdmlkZWRJbjogJ3Jvb3QnIH0pXG5leHBvcnQgY2xhc3MgVGRSZXBvcnRTZXJ2aWNlIGV4dGVuZHMgQmFzZVNlcnZpY2Uge1xuICBjb25zdHJ1Y3Rvcihjb25maWc6IEFwaUNvbmZpZ3VyYXRpb24sIGh0dHA6IEh0dHBDbGllbnQpIHtcbiAgICBzdXBlcihjb25maWcsIGh0dHApO1xuICB9XG5cbiAgLyoqIFBhdGggcGFydCBmb3Igb3BlcmF0aW9uIGB0ZFJlcG9ydENvbnRyb2xsZXJGaW5kQWxsKClgICovXG4gIHN0YXRpYyByZWFkb25seSBUZFJlcG9ydENvbnRyb2xsZXJGaW5kQWxsUGF0aCA9ICcvYW1pbXMvdGQvdGRfcmVwb3J0L2xpc3QnO1xuXG4gIC8qKlxuICAgKiBUaGlzIG1ldGhvZCBwcm92aWRlcyBhY2Nlc3MgdG8gdGhlIGZ1bGwgYEh0dHBSZXNwb25zZWAsIGFsbG93aW5nIGFjY2VzcyB0byByZXNwb25zZSBoZWFkZXJzLlxuICAgKiBUbyBhY2Nlc3Mgb25seSB0aGUgcmVzcG9uc2UgYm9keSwgdXNlIGB0ZFJlcG9ydENvbnRyb2xsZXJGaW5kQWxsKClgIGluc3RlYWQuXG4gICAqXG4gICAqIFRoaXMgbWV0aG9kIHNlbmRzIGBhcHBsaWNhdGlvbi9qc29uYCBhbmQgaGFuZGxlcyByZXF1ZXN0IGJvZHkgb2YgdHlwZSBgYXBwbGljYXRpb24vanNvbmAuXG4gICAqL1xuICB0ZFJlcG9ydENvbnRyb2xsZXJGaW5kQWxsJFJlc3BvbnNlKHBhcmFtczogVGRSZXBvcnRDb250cm9sbGVyRmluZEFsbCRQYXJhbXMsIGNvbnRleHQ/OiBIdHRwQ29udGV4dCk6IE9ic2VydmFibGU8U3RyaWN0SHR0cFJlc3BvbnNlPHtcbidjb2RlJz86IG51bWJlcjtcbidwZXNhbic/OiBzdHJpbmc7XG4nZGF0YSc/OiBBcnJheTxBbWltc1RkUmVwb3J0RHRvPjtcbid0b3RhbCc/OiBudW1iZXI7XG59Pj4ge1xuICAgIHJldHVybiB0ZFJlcG9ydENvbnRyb2xsZXJGaW5kQWxsKHRoaXMuaHR0cCwgdGhpcy5yb290VXJsLCBwYXJhbXMsIGNvbnRleHQpO1xuICB9XG5cbiAgLyoqXG4gICAqIFRoaXMgbWV0aG9kIHByb3ZpZGVzIGFjY2VzcyBvbmx5IHRvIHRoZSByZXNwb25zZSBib2R5LlxuICAgKiBUbyBhY2Nlc3MgdGhlIGZ1bGwgcmVzcG9uc2UgKGZvciBoZWFkZXJzLCBmb3IgZXhhbXBsZSksIGB0ZFJlcG9ydENvbnRyb2xsZXJGaW5kQWxsJFJlc3BvbnNlKClgIGluc3RlYWQuXG4gICAqXG4gICAqIFRoaXMgbWV0aG9kIHNlbmRzIGBhcHBsaWNhdGlvbi9qc29uYCBhbmQgaGFuZGxlcyByZXF1ZXN0IGJvZHkgb2YgdHlwZSBgYXBwbGljYXRpb24vanNvbmAuXG4gICAqL1xuICB0ZFJlcG9ydENvbnRyb2xsZXJGaW5kQWxsKHBhcmFtczogVGRSZXBvcnRDb250cm9sbGVyRmluZEFsbCRQYXJhbXMsIGNvbnRleHQ/OiBIdHRwQ29udGV4dCk6IE9ic2VydmFibGU8e1xuJ2NvZGUnPzogbnVtYmVyO1xuJ3Blc2FuJz86IHN0cmluZztcbidkYXRhJz86IEFycmF5PEFtaW1zVGRSZXBvcnREdG8+O1xuJ3RvdGFsJz86IG51bWJlcjtcbn0+IHtcbiAgICByZXR1cm4gdGhpcy50ZFJlcG9ydENvbnRyb2xsZXJGaW5kQWxsJFJlc3BvbnNlKHBhcmFtcywgY29udGV4dCkucGlwZShcbiAgICAgIG1hcCgocjogU3RyaWN0SHR0cFJlc3BvbnNlPHtcbidjb2RlJz86IG51bWJlcjtcbidwZXNhbic/OiBzdHJpbmc7XG4nZGF0YSc/OiBBcnJheTxBbWltc1RkUmVwb3J0RHRvPjtcbid0b3RhbCc/OiBudW1iZXI7XG59Pik6IHtcbidjb2RlJz86IG51bWJlcjtcbidwZXNhbic/OiBzdHJpbmc7XG4nZGF0YSc/OiBBcnJheTxBbWltc1RkUmVwb3J0RHRvPjtcbid0b3RhbCc/OiBudW1iZXI7XG59ID0+IHIuYm9keSlcbiAgICApO1xuICB9XG5cbiAgLyoqIFBhdGggcGFydCBmb3Igb3BlcmF0aW9uIGB0ZFJlcG9ydENvbnRyb2xsZXJGaW5kT25lKClgICovXG4gIHN0YXRpYyByZWFkb25seSBUZFJlcG9ydENvbnRyb2xsZXJGaW5kT25lUGF0aCA9ICcvYW1pbXMvdGQvdGRfcmVwb3J0L3tpZH0nO1xuXG4gIC8qKlxuICAgKiBUaGlzIG1ldGhvZCBwcm92aWRlcyBhY2Nlc3MgdG8gdGhlIGZ1bGwgYEh0dHBSZXNwb25zZWAsIGFsbG93aW5nIGFjY2VzcyB0byByZXNwb25zZSBoZWFkZXJzLlxuICAgKiBUbyBhY2Nlc3Mgb25seSB0aGUgcmVzcG9uc2UgYm9keSwgdXNlIGB0ZFJlcG9ydENvbnRyb2xsZXJGaW5kT25lKClgIGluc3RlYWQuXG4gICAqXG4gICAqIFRoaXMgbWV0aG9kIGRvZXNuJ3QgZXhwZWN0IGFueSByZXF1ZXN0IGJvZHkuXG4gICAqL1xuICB0ZFJlcG9ydENvbnRyb2xsZXJGaW5kT25lJFJlc3BvbnNlKHBhcmFtczogVGRSZXBvcnRDb250cm9sbGVyRmluZE9uZSRQYXJhbXMsIGNvbnRleHQ/OiBIdHRwQ29udGV4dCk6IE9ic2VydmFibGU8U3RyaWN0SHR0cFJlc3BvbnNlPHtcbidjb2RlJz86IG51bWJlcjtcbidwZXNhbic/OiBzdHJpbmc7XG4nZGF0YSc/OiBBbWltc1RkUmVwb3J0RHRvO1xufT4+IHtcbiAgICByZXR1cm4gdGRSZXBvcnRDb250cm9sbGVyRmluZE9uZSh0aGlzLmh0dHAsIHRoaXMucm9vdFVybCwgcGFyYW1zLCBjb250ZXh0KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGlzIG1ldGhvZCBwcm92aWRlcyBhY2Nlc3Mgb25seSB0byB0aGUgcmVzcG9uc2UgYm9keS5cbiAgICogVG8gYWNjZXNzIHRoZSBmdWxsIHJlc3BvbnNlIChmb3IgaGVhZGVycywgZm9yIGV4YW1wbGUpLCBgdGRSZXBvcnRDb250cm9sbGVyRmluZE9uZSRSZXNwb25zZSgpYCBpbnN0ZWFkLlxuICAgKlxuICAgKiBUaGlzIG1ldGhvZCBkb2Vzbid0IGV4cGVjdCBhbnkgcmVxdWVzdCBib2R5LlxuICAgKi9cbiAgdGRSZXBvcnRDb250cm9sbGVyRmluZE9uZShwYXJhbXM6IFRkUmVwb3J0Q29udHJvbGxlckZpbmRPbmUkUGFyYW1zLCBjb250ZXh0PzogSHR0cENvbnRleHQpOiBPYnNlcnZhYmxlPHtcbidjb2RlJz86IG51bWJlcjtcbidwZXNhbic/OiBzdHJpbmc7XG4nZGF0YSc/OiBBbWltc1RkUmVwb3J0RHRvO1xufT4ge1xuICAgIHJldHVybiB0aGlzLnRkUmVwb3J0Q29udHJvbGxlckZpbmRPbmUkUmVzcG9uc2UocGFyYW1zLCBjb250ZXh0KS5waXBlKFxuICAgICAgbWFwKChyOiBTdHJpY3RIdHRwUmVzcG9uc2U8e1xuJ2NvZGUnPzogbnVtYmVyO1xuJ3Blc2FuJz86IHN0cmluZztcbidkYXRhJz86IEFtaW1zVGRSZXBvcnREdG87XG59Pik6IHtcbidjb2RlJz86IG51bWJlcjtcbidwZXNhbic/OiBzdHJpbmc7XG4nZGF0YSc/OiBBbWltc1RkUmVwb3J0RHRvO1xufSA9PiByLmJvZHkpXG4gICAgKTtcbiAgfVxuXG59XG4iXX0=
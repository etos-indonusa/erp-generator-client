/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
import { HttpClient } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { map } from 'rxjs/operators';
import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { maintenanceControllerCreate } from '../fn/maintenance/maintenance-controller-create';
import { maintenanceControllerFindAll } from '../fn/maintenance/maintenance-controller-find-all';
import { maintenanceControllerFindOne } from '../fn/maintenance/maintenance-controller-find-one';
import { maintenanceControllerRemove } from '../fn/maintenance/maintenance-controller-remove';
import { maintenanceControllerUpdate } from '../fn/maintenance/maintenance-controller-update';
import * as i0 from "@angular/core";
import * as i1 from "../api-configuration";
import * as i2 from "@angular/common/http";
export class MaintenanceService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `maintenanceControllerFindAll()` */
    static { this.MaintenanceControllerFindAllPath = '/amims/maintenance/maintenance'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `maintenanceControllerFindAll()` instead.
     *
     * This method doesn't expect any request body.
     */
    maintenanceControllerFindAll$Response(params, context) {
        return maintenanceControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `maintenanceControllerFindAll$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    maintenanceControllerFindAll(params, context) {
        return this.maintenanceControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `maintenanceControllerCreate()` */
    static { this.MaintenanceControllerCreatePath = '/amims/maintenance/maintenance'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `maintenanceControllerCreate()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    maintenanceControllerCreate$Response(params, context) {
        return maintenanceControllerCreate(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `maintenanceControllerCreate$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    maintenanceControllerCreate(params, context) {
        return this.maintenanceControllerCreate$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `maintenanceControllerFindOne()` */
    static { this.MaintenanceControllerFindOnePath = '/amims/maintenance/maintenance/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `maintenanceControllerFindOne()` instead.
     *
     * This method doesn't expect any request body.
     */
    maintenanceControllerFindOne$Response(params, context) {
        return maintenanceControllerFindOne(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `maintenanceControllerFindOne$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    maintenanceControllerFindOne(params, context) {
        return this.maintenanceControllerFindOne$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `maintenanceControllerUpdate()` */
    static { this.MaintenanceControllerUpdatePath = '/amims/maintenance/maintenance/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `maintenanceControllerUpdate()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    maintenanceControllerUpdate$Response(params, context) {
        return maintenanceControllerUpdate(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `maintenanceControllerUpdate$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    maintenanceControllerUpdate(params, context) {
        return this.maintenanceControllerUpdate$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `maintenanceControllerRemove()` */
    static { this.MaintenanceControllerRemovePath = '/amims/maintenance/maintenance/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `maintenanceControllerRemove()` instead.
     *
     * This method doesn't expect any request body.
     */
    maintenanceControllerRemove$Response(params, context) {
        return maintenanceControllerRemove(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `maintenanceControllerRemove$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    maintenanceControllerRemove(params, context) {
        return this.maintenanceControllerRemove$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: MaintenanceService, deps: [{ token: i1.ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: MaintenanceService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: MaintenanceService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: i1.ApiConfiguration }, { type: i2.HttpClient }] });
//# sourceMappingURL=data:application/json;base64,
/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
import { HttpClient } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { map } from 'rxjs/operators';
import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { rotaryFactorControllerCreate } from '../fn/rotary-factor/rotary-factor-controller-create';
import { rotaryFactorControllerFindAll } from '../fn/rotary-factor/rotary-factor-controller-find-all';
import { rotaryFactorControllerFindOne } from '../fn/rotary-factor/rotary-factor-controller-find-one';
import { rotaryFactorControllerRemove } from '../fn/rotary-factor/rotary-factor-controller-remove';
import { rotaryFactorControllerUpdate } from '../fn/rotary-factor/rotary-factor-controller-update';
import * as i0 from "@angular/core";
import * as i1 from "../api-configuration";
import * as i2 from "@angular/common/http";
export class RotaryFactorService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `rotaryFactorControllerFindAll()` */
    static { this.RotaryFactorControllerFindAllPath = '/amims/rotary_factor/rotary_factor'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `rotaryFactorControllerFindAll()` instead.
     *
     * This method doesn't expect any request body.
     */
    rotaryFactorControllerFindAll$Response(params, context) {
        return rotaryFactorControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `rotaryFactorControllerFindAll$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    rotaryFactorControllerFindAll(params, context) {
        return this.rotaryFactorControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `rotaryFactorControllerCreate()` */
    static { this.RotaryFactorControllerCreatePath = '/amims/rotary_factor/rotary_factor'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `rotaryFactorControllerCreate()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    rotaryFactorControllerCreate$Response(params, context) {
        return rotaryFactorControllerCreate(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `rotaryFactorControllerCreate$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    rotaryFactorControllerCreate(params, context) {
        return this.rotaryFactorControllerCreate$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `rotaryFactorControllerFindOne()` */
    static { this.RotaryFactorControllerFindOnePath = '/amims/rotary_factor/rotary_factor/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `rotaryFactorControllerFindOne()` instead.
     *
     * This method doesn't expect any request body.
     */
    rotaryFactorControllerFindOne$Response(params, context) {
        return rotaryFactorControllerFindOne(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `rotaryFactorControllerFindOne$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    rotaryFactorControllerFindOne(params, context) {
        return this.rotaryFactorControllerFindOne$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `rotaryFactorControllerUpdate()` */
    static { this.RotaryFactorControllerUpdatePath = '/amims/rotary_factor/rotary_factor/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `rotaryFactorControllerUpdate()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    rotaryFactorControllerUpdate$Response(params, context) {
        return rotaryFactorControllerUpdate(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `rotaryFactorControllerUpdate$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    rotaryFactorControllerUpdate(params, context) {
        return this.rotaryFactorControllerUpdate$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `rotaryFactorControllerRemove()` */
    static { this.RotaryFactorControllerRemovePath = '/amims/rotary_factor/rotary_factor/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `rotaryFactorControllerRemove()` instead.
     *
     * This method doesn't expect any request body.
     */
    rotaryFactorControllerRemove$Response(params, context) {
        return rotaryFactorControllerRemove(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `rotaryFactorControllerRemove$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    rotaryFactorControllerRemove(params, context) {
        return this.rotaryFactorControllerRemove$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: RotaryFactorService, deps: [{ token: i1.ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: RotaryFactorService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: RotaryFactorService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: i1.ApiConfiguration }, { type: i2.HttpClient }] });
//# sourceMappingURL=data:application/json;base64,
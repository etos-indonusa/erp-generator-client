/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
import { HttpClient } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { map } from 'rxjs/operators';
import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { storeTransferItemWidgetControllerFindAll } from '../fn/store-transfer-item-widget/store-transfer-item-widget-controller-find-all';
import * as i0 from "@angular/core";
import * as i1 from "../api-configuration";
import * as i2 from "@angular/common/http";
export class StoreTransferItemWidgetService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `storeTransferItemWidgetControllerFindAll()` */
    static { this.StoreTransferItemWidgetControllerFindAllPath = '/amims/store_transfer_item/store_transfer_item_widget'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `storeTransferItemWidgetControllerFindAll()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    storeTransferItemWidgetControllerFindAll$Response(params, context) {
        return storeTransferItemWidgetControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `storeTransferItemWidgetControllerFindAll$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    storeTransferItemWidgetControllerFindAll(params, context) {
        return this.storeTransferItemWidgetControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: StoreTransferItemWidgetService, deps: [{ token: i1.ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: StoreTransferItemWidgetService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: StoreTransferItemWidgetService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: i1.ApiConfiguration }, { type: i2.HttpClient }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RvcmUtdHJhbnNmZXItaXRlbS13aWRnZXQuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL3Nka2NvcmUvc3JjL2xpYi9zZXJ2aWNlcy9zdG9yZS10cmFuc2Zlci1pdGVtLXdpZGdldC5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQixvQkFBb0I7QUFDcEIsbURBQW1EO0FBRW5ELE9BQU8sRUFBRSxVQUFVLEVBQWUsTUFBTSxzQkFBc0IsQ0FBQztBQUMvRCxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRTNDLE9BQU8sRUFBRSxHQUFHLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUVyQyxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFDOUMsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0sc0JBQXNCLENBQUM7QUFJeEQsT0FBTyxFQUFFLHdDQUF3QyxFQUFFLE1BQU0saUZBQWlGLENBQUM7Ozs7QUFJM0ksTUFBTSxPQUFPLDhCQUErQixTQUFRLFdBQVc7SUFDN0QsWUFBWSxNQUF3QixFQUFFLElBQWdCO1FBQ3BELEtBQUssQ0FBQyxNQUFNLEVBQUUsSUFBSSxDQUFDLENBQUM7SUFDdEIsQ0FBQztJQUVELDJFQUEyRTthQUMzRCxpREFBNEMsR0FBRyx1REFBdUQsQUFBMUQsQ0FBMkQ7SUFFdkg7Ozs7O09BS0c7SUFDSCxpREFBaUQsQ0FBQyxNQUF1RCxFQUFFLE9BQXFCO1FBTTlILE9BQU8sd0NBQXdDLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsT0FBTyxFQUFFLE1BQU0sRUFBRSxPQUFPLENBQUMsQ0FBQztJQUM1RixDQUFDO0lBRUQ7Ozs7O09BS0c7SUFDSCx3Q0FBd0MsQ0FBQyxNQUF1RCxFQUFFLE9BQXFCO1FBTXJILE9BQU8sSUFBSSxDQUFDLGlEQUFpRCxDQUFDLE1BQU0sRUFBRSxPQUFPLENBQUMsQ0FBQyxJQUFJLENBQ2pGLEdBQUcsQ0FBQyxDQUFDLENBS1QsRUFLQSxFQUFFLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUNQLENBQUM7SUFDSixDQUFDOytHQWhEVSw4QkFBOEI7bUhBQTlCLDhCQUE4QixjQURqQixNQUFNOzs0RkFDbkIsOEJBQThCO2tCQUQxQyxVQUFVO21CQUFDLEVBQUUsVUFBVSxFQUFFLE1BQU0sRUFBRSIsInNvdXJjZXNDb250ZW50IjpbIi8qIHRzbGludDpkaXNhYmxlICovXG4vKiBlc2xpbnQtZGlzYWJsZSAqL1xuLyogQ29kZSBnZW5lcmF0ZWQgYnkgbmctb3BlbmFwaS1nZW4gRE8gTk9UIEVESVQuICovXG5cbmltcG9ydCB7IEh0dHBDbGllbnQsIEh0dHBDb250ZXh0IH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uL2h0dHAnO1xuaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgbWFwIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuXG5pbXBvcnQgeyBCYXNlU2VydmljZSB9IGZyb20gJy4uL2Jhc2Utc2VydmljZSc7XG5pbXBvcnQgeyBBcGlDb25maWd1cmF0aW9uIH0gZnJvbSAnLi4vYXBpLWNvbmZpZ3VyYXRpb24nO1xuaW1wb3J0IHsgU3RyaWN0SHR0cFJlc3BvbnNlIH0gZnJvbSAnLi4vc3RyaWN0LWh0dHAtcmVzcG9uc2UnO1xuXG5pbXBvcnQgeyBBbWltc1N0b3JlVHJhbnNmZXJJdGVtV2lkZ2V0RHRvIH0gZnJvbSAnLi4vbW9kZWxzL2FtaW1zLXN0b3JlLXRyYW5zZmVyLWl0ZW0td2lkZ2V0LWR0byc7XG5pbXBvcnQgeyBzdG9yZVRyYW5zZmVySXRlbVdpZGdldENvbnRyb2xsZXJGaW5kQWxsIH0gZnJvbSAnLi4vZm4vc3RvcmUtdHJhbnNmZXItaXRlbS13aWRnZXQvc3RvcmUtdHJhbnNmZXItaXRlbS13aWRnZXQtY29udHJvbGxlci1maW5kLWFsbCc7XG5pbXBvcnQgeyBTdG9yZVRyYW5zZmVySXRlbVdpZGdldENvbnRyb2xsZXJGaW5kQWxsJFBhcmFtcyB9IGZyb20gJy4uL2ZuL3N0b3JlLXRyYW5zZmVyLWl0ZW0td2lkZ2V0L3N0b3JlLXRyYW5zZmVyLWl0ZW0td2lkZ2V0LWNvbnRyb2xsZXItZmluZC1hbGwnO1xuXG5ASW5qZWN0YWJsZSh7IHByb3ZpZGVkSW46ICdyb290JyB9KVxuZXhwb3J0IGNsYXNzIFN0b3JlVHJhbnNmZXJJdGVtV2lkZ2V0U2VydmljZSBleHRlbmRzIEJhc2VTZXJ2aWNlIHtcbiAgY29uc3RydWN0b3IoY29uZmlnOiBBcGlDb25maWd1cmF0aW9uLCBodHRwOiBIdHRwQ2xpZW50KSB7XG4gICAgc3VwZXIoY29uZmlnLCBodHRwKTtcbiAgfVxuXG4gIC8qKiBQYXRoIHBhcnQgZm9yIG9wZXJhdGlvbiBgc3RvcmVUcmFuc2Zlckl0ZW1XaWRnZXRDb250cm9sbGVyRmluZEFsbCgpYCAqL1xuICBzdGF0aWMgcmVhZG9ubHkgU3RvcmVUcmFuc2Zlckl0ZW1XaWRnZXRDb250cm9sbGVyRmluZEFsbFBhdGggPSAnL2FtaW1zL3N0b3JlX3RyYW5zZmVyX2l0ZW0vc3RvcmVfdHJhbnNmZXJfaXRlbV93aWRnZXQnO1xuXG4gIC8qKlxuICAgKiBUaGlzIG1ldGhvZCBwcm92aWRlcyBhY2Nlc3MgdG8gdGhlIGZ1bGwgYEh0dHBSZXNwb25zZWAsIGFsbG93aW5nIGFjY2VzcyB0byByZXNwb25zZSBoZWFkZXJzLlxuICAgKiBUbyBhY2Nlc3Mgb25seSB0aGUgcmVzcG9uc2UgYm9keSwgdXNlIGBzdG9yZVRyYW5zZmVySXRlbVdpZGdldENvbnRyb2xsZXJGaW5kQWxsKClgIGluc3RlYWQuXG4gICAqXG4gICAqIFRoaXMgbWV0aG9kIHNlbmRzIGBhcHBsaWNhdGlvbi9qc29uYCBhbmQgaGFuZGxlcyByZXF1ZXN0IGJvZHkgb2YgdHlwZSBgYXBwbGljYXRpb24vanNvbmAuXG4gICAqL1xuICBzdG9yZVRyYW5zZmVySXRlbVdpZGdldENvbnRyb2xsZXJGaW5kQWxsJFJlc3BvbnNlKHBhcmFtczogU3RvcmVUcmFuc2Zlckl0ZW1XaWRnZXRDb250cm9sbGVyRmluZEFsbCRQYXJhbXMsIGNvbnRleHQ/OiBIdHRwQ29udGV4dCk6IE9ic2VydmFibGU8U3RyaWN0SHR0cFJlc3BvbnNlPHtcbidjb2RlJz86IG51bWJlcjtcbidwZXNhbic/OiBzdHJpbmc7XG4nZGF0YSc/OiBBcnJheTxBbWltc1N0b3JlVHJhbnNmZXJJdGVtV2lkZ2V0RHRvPjtcbid0b3RhbCc/OiBudW1iZXI7XG59Pj4ge1xuICAgIHJldHVybiBzdG9yZVRyYW5zZmVySXRlbVdpZGdldENvbnRyb2xsZXJGaW5kQWxsKHRoaXMuaHR0cCwgdGhpcy5yb290VXJsLCBwYXJhbXMsIGNvbnRleHQpO1xuICB9XG5cbiAgLyoqXG4gICAqIFRoaXMgbWV0aG9kIHByb3ZpZGVzIGFjY2VzcyBvbmx5IHRvIHRoZSByZXNwb25zZSBib2R5LlxuICAgKiBUbyBhY2Nlc3MgdGhlIGZ1bGwgcmVzcG9uc2UgKGZvciBoZWFkZXJzLCBmb3IgZXhhbXBsZSksIGBzdG9yZVRyYW5zZmVySXRlbVdpZGdldENvbnRyb2xsZXJGaW5kQWxsJFJlc3BvbnNlKClgIGluc3RlYWQuXG4gICAqXG4gICAqIFRoaXMgbWV0aG9kIHNlbmRzIGBhcHBsaWNhdGlvbi9qc29uYCBhbmQgaGFuZGxlcyByZXF1ZXN0IGJvZHkgb2YgdHlwZSBgYXBwbGljYXRpb24vanNvbmAuXG4gICAqL1xuICBzdG9yZVRyYW5zZmVySXRlbVdpZGdldENvbnRyb2xsZXJGaW5kQWxsKHBhcmFtczogU3RvcmVUcmFuc2Zlckl0ZW1XaWRnZXRDb250cm9sbGVyRmluZEFsbCRQYXJhbXMsIGNvbnRleHQ/OiBIdHRwQ29udGV4dCk6IE9ic2VydmFibGU8e1xuJ2NvZGUnPzogbnVtYmVyO1xuJ3Blc2FuJz86IHN0cmluZztcbidkYXRhJz86IEFycmF5PEFtaW1zU3RvcmVUcmFuc2Zlckl0ZW1XaWRnZXREdG8+O1xuJ3RvdGFsJz86IG51bWJlcjtcbn0+IHtcbiAgICByZXR1cm4gdGhpcy5zdG9yZVRyYW5zZmVySXRlbVdpZGdldENvbnRyb2xsZXJGaW5kQWxsJFJlc3BvbnNlKHBhcmFtcywgY29udGV4dCkucGlwZShcbiAgICAgIG1hcCgocjogU3RyaWN0SHR0cFJlc3BvbnNlPHtcbidjb2RlJz86IG51bWJlcjtcbidwZXNhbic/OiBzdHJpbmc7XG4nZGF0YSc/OiBBcnJheTxBbWltc1N0b3JlVHJhbnNmZXJJdGVtV2lkZ2V0RHRvPjtcbid0b3RhbCc/OiBudW1iZXI7XG59Pik6IHtcbidjb2RlJz86IG51bWJlcjtcbidwZXNhbic/OiBzdHJpbmc7XG4nZGF0YSc/OiBBcnJheTxBbWltc1N0b3JlVHJhbnNmZXJJdGVtV2lkZ2V0RHRvPjtcbid0b3RhbCc/OiBudW1iZXI7XG59ID0+IHIuYm9keSlcbiAgICApO1xuICB9XG5cbn1cbiJdfQ==
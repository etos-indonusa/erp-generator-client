/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
import { HttpClient } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { map } from 'rxjs/operators';
import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { mpcSelfMaintenanceControllerCreate } from '../fn/mpc-self-maintenance/mpc-self-maintenance-controller-create';
import { mpcSelfMaintenanceControllerFindAll } from '../fn/mpc-self-maintenance/mpc-self-maintenance-controller-find-all';
import { mpcSelfMaintenanceControllerFindOne } from '../fn/mpc-self-maintenance/mpc-self-maintenance-controller-find-one';
import { mpcSelfMaintenanceControllerRemove } from '../fn/mpc-self-maintenance/mpc-self-maintenance-controller-remove';
import { mpcSelfMaintenanceControllerUpdate } from '../fn/mpc-self-maintenance/mpc-self-maintenance-controller-update';
import * as i0 from "@angular/core";
import * as i1 from "../api-configuration";
import * as i2 from "@angular/common/http";
export class MpcSelfMaintenanceService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `mpcSelfMaintenanceControllerFindAll()` */
    static { this.MpcSelfMaintenanceControllerFindAllPath = '/amims/mpc_self_maintenance/mpc_self_maintenance'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `mpcSelfMaintenanceControllerFindAll()` instead.
     *
     * This method doesn't expect any request body.
     */
    mpcSelfMaintenanceControllerFindAll$Response(params, context) {
        return mpcSelfMaintenanceControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `mpcSelfMaintenanceControllerFindAll$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    mpcSelfMaintenanceControllerFindAll(params, context) {
        return this.mpcSelfMaintenanceControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `mpcSelfMaintenanceControllerCreate()` */
    static { this.MpcSelfMaintenanceControllerCreatePath = '/amims/mpc_self_maintenance/mpc_self_maintenance'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `mpcSelfMaintenanceControllerCreate()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    mpcSelfMaintenanceControllerCreate$Response(params, context) {
        return mpcSelfMaintenanceControllerCreate(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `mpcSelfMaintenanceControllerCreate$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    mpcSelfMaintenanceControllerCreate(params, context) {
        return this.mpcSelfMaintenanceControllerCreate$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `mpcSelfMaintenanceControllerFindOne()` */
    static { this.MpcSelfMaintenanceControllerFindOnePath = '/amims/mpc_self_maintenance/mpc_self_maintenance/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `mpcSelfMaintenanceControllerFindOne()` instead.
     *
     * This method doesn't expect any request body.
     */
    mpcSelfMaintenanceControllerFindOne$Response(params, context) {
        return mpcSelfMaintenanceControllerFindOne(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `mpcSelfMaintenanceControllerFindOne$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    mpcSelfMaintenanceControllerFindOne(params, context) {
        return this.mpcSelfMaintenanceControllerFindOne$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `mpcSelfMaintenanceControllerUpdate()` */
    static { this.MpcSelfMaintenanceControllerUpdatePath = '/amims/mpc_self_maintenance/mpc_self_maintenance/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `mpcSelfMaintenanceControllerUpdate()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    mpcSelfMaintenanceControllerUpdate$Response(params, context) {
        return mpcSelfMaintenanceControllerUpdate(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `mpcSelfMaintenanceControllerUpdate$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    mpcSelfMaintenanceControllerUpdate(params, context) {
        return this.mpcSelfMaintenanceControllerUpdate$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `mpcSelfMaintenanceControllerRemove()` */
    static { this.MpcSelfMaintenanceControllerRemovePath = '/amims/mpc_self_maintenance/mpc_self_maintenance/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `mpcSelfMaintenanceControllerRemove()` instead.
     *
     * This method doesn't expect any request body.
     */
    mpcSelfMaintenanceControllerRemove$Response(params, context) {
        return mpcSelfMaintenanceControllerRemove(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `mpcSelfMaintenanceControllerRemove$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    mpcSelfMaintenanceControllerRemove(params, context) {
        return this.mpcSelfMaintenanceControllerRemove$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: MpcSelfMaintenanceService, deps: [{ token: i1.ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: MpcSelfMaintenanceService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: MpcSelfMaintenanceService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: i1.ApiConfiguration }, { type: i2.HttpClient }] });
//# sourceMappingURL=data:application/json;base64,
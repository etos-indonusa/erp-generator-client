/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
import { HttpClient } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { map } from 'rxjs/operators';
import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { melControllerCreate } from '../fn/mel/mel-controller-create';
import { melControllerFindAll } from '../fn/mel/mel-controller-find-all';
import { melControllerFindOne } from '../fn/mel/mel-controller-find-one';
import { melControllerRemove } from '../fn/mel/mel-controller-remove';
import { melControllerUpdate } from '../fn/mel/mel-controller-update';
import * as i0 from "@angular/core";
import * as i1 from "../api-configuration";
import * as i2 from "@angular/common/http";
export class MelService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `melControllerFindAll()` */
    static { this.MelControllerFindAllPath = '/amims/mel/mel'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `melControllerFindAll()` instead.
     *
     * This method doesn't expect any request body.
     */
    melControllerFindAll$Response(params, context) {
        return melControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `melControllerFindAll$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    melControllerFindAll(params, context) {
        return this.melControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `melControllerCreate()` */
    static { this.MelControllerCreatePath = '/amims/mel/mel'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `melControllerCreate()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    melControllerCreate$Response(params, context) {
        return melControllerCreate(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `melControllerCreate$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    melControllerCreate(params, context) {
        return this.melControllerCreate$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `melControllerFindOne()` */
    static { this.MelControllerFindOnePath = '/amims/mel/mel/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `melControllerFindOne()` instead.
     *
     * This method doesn't expect any request body.
     */
    melControllerFindOne$Response(params, context) {
        return melControllerFindOne(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `melControllerFindOne$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    melControllerFindOne(params, context) {
        return this.melControllerFindOne$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `melControllerUpdate()` */
    static { this.MelControllerUpdatePath = '/amims/mel/mel/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `melControllerUpdate()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    melControllerUpdate$Response(params, context) {
        return melControllerUpdate(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `melControllerUpdate$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    melControllerUpdate(params, context) {
        return this.melControllerUpdate$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `melControllerRemove()` */
    static { this.MelControllerRemovePath = '/amims/mel/mel/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `melControllerRemove()` instead.
     *
     * This method doesn't expect any request body.
     */
    melControllerRemove$Response(params, context) {
        return melControllerRemove(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `melControllerRemove$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    melControllerRemove(params, context) {
        return this.melControllerRemove$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: MelService, deps: [{ token: i1.ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: MelService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: MelService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: i1.ApiConfiguration }, { type: i2.HttpClient }] });
//# sourceMappingURL=data:application/json;base64,
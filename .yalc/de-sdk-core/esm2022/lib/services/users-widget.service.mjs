/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
import { HttpClient } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { map } from 'rxjs/operators';
import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { usersWidgetControllerFindAll } from '../fn/users-widget/users-widget-controller-find-all';
import * as i0 from "@angular/core";
import * as i1 from "../api-configuration";
import * as i2 from "@angular/common/http";
export class UsersWidgetService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `usersWidgetControllerFindAll()` */
    static { this.UsersWidgetControllerFindAllPath = '/auth/users/users_widget'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `usersWidgetControllerFindAll()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    usersWidgetControllerFindAll$Response(params, context) {
        return usersWidgetControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `usersWidgetControllerFindAll$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    usersWidgetControllerFindAll(params, context) {
        return this.usersWidgetControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: UsersWidgetService, deps: [{ token: i1.ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: UsersWidgetService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: UsersWidgetService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: i1.ApiConfiguration }, { type: i2.HttpClient }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXNlcnMtd2lkZ2V0LnNlcnZpY2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9zZGtjb3JlL3NyYy9saWIvc2VydmljZXMvdXNlcnMtd2lkZ2V0LnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsb0JBQW9CO0FBQ3BCLG9CQUFvQjtBQUNwQixtREFBbUQ7QUFFbkQsT0FBTyxFQUFFLFVBQVUsRUFBZSxNQUFNLHNCQUFzQixDQUFDO0FBQy9ELE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFM0MsT0FBTyxFQUFFLEdBQUcsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBRXJDLE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUM5QyxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQztBQUl4RCxPQUFPLEVBQUUsNEJBQTRCLEVBQUUsTUFBTSxxREFBcUQsQ0FBQzs7OztBQUluRyxNQUFNLE9BQU8sa0JBQW1CLFNBQVEsV0FBVztJQUNqRCxZQUFZLE1BQXdCLEVBQUUsSUFBZ0I7UUFDcEQsS0FBSyxDQUFDLE1BQU0sRUFBRSxJQUFJLENBQUMsQ0FBQztJQUN0QixDQUFDO0lBRUQsK0RBQStEO2FBQy9DLHFDQUFnQyxHQUFHLDBCQUEwQixBQUE3QixDQUE4QjtJQUU5RTs7Ozs7T0FLRztJQUNILHFDQUFxQyxDQUFDLE1BQTJDLEVBQUUsT0FBcUI7UUFNdEcsT0FBTyw0QkFBNEIsQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxPQUFPLEVBQUUsTUFBTSxFQUFFLE9BQU8sQ0FBQyxDQUFDO0lBQ2hGLENBQUM7SUFFRDs7Ozs7T0FLRztJQUNILDRCQUE0QixDQUFDLE1BQTJDLEVBQUUsT0FBcUI7UUFNN0YsT0FBTyxJQUFJLENBQUMscUNBQXFDLENBQUMsTUFBTSxFQUFFLE9BQU8sQ0FBQyxDQUFDLElBQUksQ0FDckUsR0FBRyxDQUFDLENBQUMsQ0FLVCxFQUtBLEVBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQ1AsQ0FBQztJQUNKLENBQUM7K0dBaERVLGtCQUFrQjttSEFBbEIsa0JBQWtCLGNBREwsTUFBTTs7NEZBQ25CLGtCQUFrQjtrQkFEOUIsVUFBVTttQkFBQyxFQUFFLFVBQVUsRUFBRSxNQUFNLEVBQUUiLCJzb3VyY2VzQ29udGVudCI6WyIvKiB0c2xpbnQ6ZGlzYWJsZSAqL1xuLyogZXNsaW50LWRpc2FibGUgKi9cbi8qIENvZGUgZ2VuZXJhdGVkIGJ5IG5nLW9wZW5hcGktZ2VuIERPIE5PVCBFRElULiAqL1xuXG5pbXBvcnQgeyBIdHRwQ2xpZW50LCBIdHRwQ29udGV4dCB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbi9odHRwJztcbmltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IG1hcCB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcblxuaW1wb3J0IHsgQmFzZVNlcnZpY2UgfSBmcm9tICcuLi9iYXNlLXNlcnZpY2UnO1xuaW1wb3J0IHsgQXBpQ29uZmlndXJhdGlvbiB9IGZyb20gJy4uL2FwaS1jb25maWd1cmF0aW9uJztcbmltcG9ydCB7IFN0cmljdEh0dHBSZXNwb25zZSB9IGZyb20gJy4uL3N0cmljdC1odHRwLXJlc3BvbnNlJztcblxuaW1wb3J0IHsgQWNsVXNlcnNXaWRnZXREdG8gfSBmcm9tICcuLi9tb2RlbHMvYWNsLXVzZXJzLXdpZGdldC1kdG8nO1xuaW1wb3J0IHsgdXNlcnNXaWRnZXRDb250cm9sbGVyRmluZEFsbCB9IGZyb20gJy4uL2ZuL3VzZXJzLXdpZGdldC91c2Vycy13aWRnZXQtY29udHJvbGxlci1maW5kLWFsbCc7XG5pbXBvcnQgeyBVc2Vyc1dpZGdldENvbnRyb2xsZXJGaW5kQWxsJFBhcmFtcyB9IGZyb20gJy4uL2ZuL3VzZXJzLXdpZGdldC91c2Vycy13aWRnZXQtY29udHJvbGxlci1maW5kLWFsbCc7XG5cbkBJbmplY3RhYmxlKHsgcHJvdmlkZWRJbjogJ3Jvb3QnIH0pXG5leHBvcnQgY2xhc3MgVXNlcnNXaWRnZXRTZXJ2aWNlIGV4dGVuZHMgQmFzZVNlcnZpY2Uge1xuICBjb25zdHJ1Y3Rvcihjb25maWc6IEFwaUNvbmZpZ3VyYXRpb24sIGh0dHA6IEh0dHBDbGllbnQpIHtcbiAgICBzdXBlcihjb25maWcsIGh0dHApO1xuICB9XG5cbiAgLyoqIFBhdGggcGFydCBmb3Igb3BlcmF0aW9uIGB1c2Vyc1dpZGdldENvbnRyb2xsZXJGaW5kQWxsKClgICovXG4gIHN0YXRpYyByZWFkb25seSBVc2Vyc1dpZGdldENvbnRyb2xsZXJGaW5kQWxsUGF0aCA9ICcvYXV0aC91c2Vycy91c2Vyc193aWRnZXQnO1xuXG4gIC8qKlxuICAgKiBUaGlzIG1ldGhvZCBwcm92aWRlcyBhY2Nlc3MgdG8gdGhlIGZ1bGwgYEh0dHBSZXNwb25zZWAsIGFsbG93aW5nIGFjY2VzcyB0byByZXNwb25zZSBoZWFkZXJzLlxuICAgKiBUbyBhY2Nlc3Mgb25seSB0aGUgcmVzcG9uc2UgYm9keSwgdXNlIGB1c2Vyc1dpZGdldENvbnRyb2xsZXJGaW5kQWxsKClgIGluc3RlYWQuXG4gICAqXG4gICAqIFRoaXMgbWV0aG9kIHNlbmRzIGBhcHBsaWNhdGlvbi9qc29uYCBhbmQgaGFuZGxlcyByZXF1ZXN0IGJvZHkgb2YgdHlwZSBgYXBwbGljYXRpb24vanNvbmAuXG4gICAqL1xuICB1c2Vyc1dpZGdldENvbnRyb2xsZXJGaW5kQWxsJFJlc3BvbnNlKHBhcmFtczogVXNlcnNXaWRnZXRDb250cm9sbGVyRmluZEFsbCRQYXJhbXMsIGNvbnRleHQ/OiBIdHRwQ29udGV4dCk6IE9ic2VydmFibGU8U3RyaWN0SHR0cFJlc3BvbnNlPHtcbidjb2RlJz86IG51bWJlcjtcbidwZXNhbic/OiBzdHJpbmc7XG4nZGF0YSc/OiBBcnJheTxBY2xVc2Vyc1dpZGdldER0bz47XG4ndG90YWwnPzogbnVtYmVyO1xufT4+IHtcbiAgICByZXR1cm4gdXNlcnNXaWRnZXRDb250cm9sbGVyRmluZEFsbCh0aGlzLmh0dHAsIHRoaXMucm9vdFVybCwgcGFyYW1zLCBjb250ZXh0KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGlzIG1ldGhvZCBwcm92aWRlcyBhY2Nlc3Mgb25seSB0byB0aGUgcmVzcG9uc2UgYm9keS5cbiAgICogVG8gYWNjZXNzIHRoZSBmdWxsIHJlc3BvbnNlIChmb3IgaGVhZGVycywgZm9yIGV4YW1wbGUpLCBgdXNlcnNXaWRnZXRDb250cm9sbGVyRmluZEFsbCRSZXNwb25zZSgpYCBpbnN0ZWFkLlxuICAgKlxuICAgKiBUaGlzIG1ldGhvZCBzZW5kcyBgYXBwbGljYXRpb24vanNvbmAgYW5kIGhhbmRsZXMgcmVxdWVzdCBib2R5IG9mIHR5cGUgYGFwcGxpY2F0aW9uL2pzb25gLlxuICAgKi9cbiAgdXNlcnNXaWRnZXRDb250cm9sbGVyRmluZEFsbChwYXJhbXM6IFVzZXJzV2lkZ2V0Q29udHJvbGxlckZpbmRBbGwkUGFyYW1zLCBjb250ZXh0PzogSHR0cENvbnRleHQpOiBPYnNlcnZhYmxlPHtcbidjb2RlJz86IG51bWJlcjtcbidwZXNhbic/OiBzdHJpbmc7XG4nZGF0YSc/OiBBcnJheTxBY2xVc2Vyc1dpZGdldER0bz47XG4ndG90YWwnPzogbnVtYmVyO1xufT4ge1xuICAgIHJldHVybiB0aGlzLnVzZXJzV2lkZ2V0Q29udHJvbGxlckZpbmRBbGwkUmVzcG9uc2UocGFyYW1zLCBjb250ZXh0KS5waXBlKFxuICAgICAgbWFwKChyOiBTdHJpY3RIdHRwUmVzcG9uc2U8e1xuJ2NvZGUnPzogbnVtYmVyO1xuJ3Blc2FuJz86IHN0cmluZztcbidkYXRhJz86IEFycmF5PEFjbFVzZXJzV2lkZ2V0RHRvPjtcbid0b3RhbCc/OiBudW1iZXI7XG59Pik6IHtcbidjb2RlJz86IG51bWJlcjtcbidwZXNhbic/OiBzdHJpbmc7XG4nZGF0YSc/OiBBcnJheTxBY2xVc2Vyc1dpZGdldER0bz47XG4ndG90YWwnPzogbnVtYmVyO1xufSA9PiByLmJvZHkpXG4gICAgKTtcbiAgfVxuXG59XG4iXX0=
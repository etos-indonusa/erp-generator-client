/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
import { HttpClient } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { map } from 'rxjs/operators';
import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { storeTransferControllerCreate } from '../fn/store-transfer/store-transfer-controller-create';
import { storeTransferControllerFindAll } from '../fn/store-transfer/store-transfer-controller-find-all';
import { storeTransferControllerFindOne } from '../fn/store-transfer/store-transfer-controller-find-one';
import { storeTransferControllerRemove } from '../fn/store-transfer/store-transfer-controller-remove';
import { storeTransferControllerUpdate } from '../fn/store-transfer/store-transfer-controller-update';
import * as i0 from "@angular/core";
import * as i1 from "../api-configuration";
import * as i2 from "@angular/common/http";
export class StoreTransferService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `storeTransferControllerFindAll()` */
    static { this.StoreTransferControllerFindAllPath = '/amims/store_transfer/store_transfer'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `storeTransferControllerFindAll()` instead.
     *
     * This method doesn't expect any request body.
     */
    storeTransferControllerFindAll$Response(params, context) {
        return storeTransferControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `storeTransferControllerFindAll$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    storeTransferControllerFindAll(params, context) {
        return this.storeTransferControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `storeTransferControllerCreate()` */
    static { this.StoreTransferControllerCreatePath = '/amims/store_transfer/store_transfer'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `storeTransferControllerCreate()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    storeTransferControllerCreate$Response(params, context) {
        return storeTransferControllerCreate(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `storeTransferControllerCreate$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    storeTransferControllerCreate(params, context) {
        return this.storeTransferControllerCreate$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `storeTransferControllerFindOne()` */
    static { this.StoreTransferControllerFindOnePath = '/amims/store_transfer/store_transfer/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `storeTransferControllerFindOne()` instead.
     *
     * This method doesn't expect any request body.
     */
    storeTransferControllerFindOne$Response(params, context) {
        return storeTransferControllerFindOne(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `storeTransferControllerFindOne$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    storeTransferControllerFindOne(params, context) {
        return this.storeTransferControllerFindOne$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `storeTransferControllerUpdate()` */
    static { this.StoreTransferControllerUpdatePath = '/amims/store_transfer/store_transfer/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `storeTransferControllerUpdate()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    storeTransferControllerUpdate$Response(params, context) {
        return storeTransferControllerUpdate(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `storeTransferControllerUpdate$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    storeTransferControllerUpdate(params, context) {
        return this.storeTransferControllerUpdate$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `storeTransferControllerRemove()` */
    static { this.StoreTransferControllerRemovePath = '/amims/store_transfer/store_transfer/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `storeTransferControllerRemove()` instead.
     *
     * This method doesn't expect any request body.
     */
    storeTransferControllerRemove$Response(params, context) {
        return storeTransferControllerRemove(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `storeTransferControllerRemove$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    storeTransferControllerRemove(params, context) {
        return this.storeTransferControllerRemove$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: StoreTransferService, deps: [{ token: i1.ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: StoreTransferService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: StoreTransferService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: i1.ApiConfiguration }, { type: i2.HttpClient }] });
//# sourceMappingURL=data:application/json;base64,
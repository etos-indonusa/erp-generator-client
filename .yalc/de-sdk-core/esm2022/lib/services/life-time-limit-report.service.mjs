/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
import { HttpClient } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { map } from 'rxjs/operators';
import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { lifeTimeLimitReportControllerFindAll } from '../fn/life-time-limit-report/life-time-limit-report-controller-find-all';
import { lifeTimeLimitReportControllerFindOne } from '../fn/life-time-limit-report/life-time-limit-report-controller-find-one';
import * as i0 from "@angular/core";
import * as i1 from "../api-configuration";
import * as i2 from "@angular/common/http";
export class LifeTimeLimitReportService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `lifeTimeLimitReportControllerFindAll()` */
    static { this.LifeTimeLimitReportControllerFindAllPath = '/amims/life_time_limit/life_time_limit_report/list'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `lifeTimeLimitReportControllerFindAll()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    lifeTimeLimitReportControllerFindAll$Response(params, context) {
        return lifeTimeLimitReportControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `lifeTimeLimitReportControllerFindAll$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    lifeTimeLimitReportControllerFindAll(params, context) {
        return this.lifeTimeLimitReportControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `lifeTimeLimitReportControllerFindOne()` */
    static { this.LifeTimeLimitReportControllerFindOnePath = '/amims/life_time_limit/life_time_limit_report/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `lifeTimeLimitReportControllerFindOne()` instead.
     *
     * This method doesn't expect any request body.
     */
    lifeTimeLimitReportControllerFindOne$Response(params, context) {
        return lifeTimeLimitReportControllerFindOne(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `lifeTimeLimitReportControllerFindOne$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    lifeTimeLimitReportControllerFindOne(params, context) {
        return this.lifeTimeLimitReportControllerFindOne$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: LifeTimeLimitReportService, deps: [{ token: i1.ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: LifeTimeLimitReportService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: LifeTimeLimitReportService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: i1.ApiConfiguration }, { type: i2.HttpClient }] });
//# sourceMappingURL=data:application/json;base64,
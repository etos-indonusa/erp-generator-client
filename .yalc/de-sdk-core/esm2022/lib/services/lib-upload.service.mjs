/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
import { HttpClient } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { map } from 'rxjs/operators';
import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { libUploadControllerCreate } from '../fn/lib-upload/lib-upload-controller-create';
import { libUploadControllerFindAll } from '../fn/lib-upload/lib-upload-controller-find-all';
import { libUploadControllerFindOne } from '../fn/lib-upload/lib-upload-controller-find-one';
import { libUploadControllerRemove } from '../fn/lib-upload/lib-upload-controller-remove';
import { libUploadControllerUpdate } from '../fn/lib-upload/lib-upload-controller-update';
import * as i0 from "@angular/core";
import * as i1 from "../api-configuration";
import * as i2 from "@angular/common/http";
export class LibUploadService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `libUploadControllerFindAll()` */
    static { this.LibUploadControllerFindAllPath = '/amims/lib_upload/lib_upload'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `libUploadControllerFindAll()` instead.
     *
     * This method doesn't expect any request body.
     */
    libUploadControllerFindAll$Response(params, context) {
        return libUploadControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `libUploadControllerFindAll$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    libUploadControllerFindAll(params, context) {
        return this.libUploadControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `libUploadControllerCreate()` */
    static { this.LibUploadControllerCreatePath = '/amims/lib_upload/lib_upload'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `libUploadControllerCreate()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    libUploadControllerCreate$Response(params, context) {
        return libUploadControllerCreate(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `libUploadControllerCreate$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    libUploadControllerCreate(params, context) {
        return this.libUploadControllerCreate$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `libUploadControllerFindOne()` */
    static { this.LibUploadControllerFindOnePath = '/amims/lib_upload/lib_upload/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `libUploadControllerFindOne()` instead.
     *
     * This method doesn't expect any request body.
     */
    libUploadControllerFindOne$Response(params, context) {
        return libUploadControllerFindOne(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `libUploadControllerFindOne$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    libUploadControllerFindOne(params, context) {
        return this.libUploadControllerFindOne$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `libUploadControllerUpdate()` */
    static { this.LibUploadControllerUpdatePath = '/amims/lib_upload/lib_upload/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `libUploadControllerUpdate()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    libUploadControllerUpdate$Response(params, context) {
        return libUploadControllerUpdate(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `libUploadControllerUpdate$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    libUploadControllerUpdate(params, context) {
        return this.libUploadControllerUpdate$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `libUploadControllerRemove()` */
    static { this.LibUploadControllerRemovePath = '/amims/lib_upload/lib_upload/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `libUploadControllerRemove()` instead.
     *
     * This method doesn't expect any request body.
     */
    libUploadControllerRemove$Response(params, context) {
        return libUploadControllerRemove(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `libUploadControllerRemove$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    libUploadControllerRemove(params, context) {
        return this.libUploadControllerRemove$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: LibUploadService, deps: [{ token: i1.ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: LibUploadService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: LibUploadService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: i1.ApiConfiguration }, { type: i2.HttpClient }] });
//# sourceMappingURL=data:application/json;base64,
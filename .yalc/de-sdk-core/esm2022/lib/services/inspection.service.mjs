/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
import { HttpClient } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { map } from 'rxjs/operators';
import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { inspectionControllerCreate } from '../fn/inspection/inspection-controller-create';
import { inspectionControllerFindAll } from '../fn/inspection/inspection-controller-find-all';
import { inspectionControllerFindOne } from '../fn/inspection/inspection-controller-find-one';
import { inspectionControllerRemove } from '../fn/inspection/inspection-controller-remove';
import { inspectionControllerUpdate } from '../fn/inspection/inspection-controller-update';
import * as i0 from "@angular/core";
import * as i1 from "../api-configuration";
import * as i2 from "@angular/common/http";
export class InspectionService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `inspectionControllerFindAll()` */
    static { this.InspectionControllerFindAllPath = '/amims/inspection/inspection'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `inspectionControllerFindAll()` instead.
     *
     * This method doesn't expect any request body.
     */
    inspectionControllerFindAll$Response(params, context) {
        return inspectionControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `inspectionControllerFindAll$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    inspectionControllerFindAll(params, context) {
        return this.inspectionControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `inspectionControllerCreate()` */
    static { this.InspectionControllerCreatePath = '/amims/inspection/inspection'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `inspectionControllerCreate()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    inspectionControllerCreate$Response(params, context) {
        return inspectionControllerCreate(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `inspectionControllerCreate$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    inspectionControllerCreate(params, context) {
        return this.inspectionControllerCreate$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `inspectionControllerFindOne()` */
    static { this.InspectionControllerFindOnePath = '/amims/inspection/inspection/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `inspectionControllerFindOne()` instead.
     *
     * This method doesn't expect any request body.
     */
    inspectionControllerFindOne$Response(params, context) {
        return inspectionControllerFindOne(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `inspectionControllerFindOne$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    inspectionControllerFindOne(params, context) {
        return this.inspectionControllerFindOne$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `inspectionControllerUpdate()` */
    static { this.InspectionControllerUpdatePath = '/amims/inspection/inspection/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `inspectionControllerUpdate()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    inspectionControllerUpdate$Response(params, context) {
        return inspectionControllerUpdate(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `inspectionControllerUpdate$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    inspectionControllerUpdate(params, context) {
        return this.inspectionControllerUpdate$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `inspectionControllerRemove()` */
    static { this.InspectionControllerRemovePath = '/amims/inspection/inspection/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `inspectionControllerRemove()` instead.
     *
     * This method doesn't expect any request body.
     */
    inspectionControllerRemove$Response(params, context) {
        return inspectionControllerRemove(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `inspectionControllerRemove$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    inspectionControllerRemove(params, context) {
        return this.inspectionControllerRemove$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: InspectionService, deps: [{ token: i1.ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: InspectionService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: InspectionService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: i1.ApiConfiguration }, { type: i2.HttpClient }] });
//# sourceMappingURL=data:application/json;base64,
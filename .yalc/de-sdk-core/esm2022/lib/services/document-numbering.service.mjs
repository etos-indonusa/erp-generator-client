/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
import { HttpClient } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { map } from 'rxjs/operators';
import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { documentNumberingControllerCreate } from '../fn/document-numbering/document-numbering-controller-create';
import { documentNumberingControllerFindAll } from '../fn/document-numbering/document-numbering-controller-find-all';
import { documentNumberingControllerFindOne } from '../fn/document-numbering/document-numbering-controller-find-one';
import { documentNumberingControllerRemove } from '../fn/document-numbering/document-numbering-controller-remove';
import { documentNumberingControllerUpdate } from '../fn/document-numbering/document-numbering-controller-update';
import * as i0 from "@angular/core";
import * as i1 from "../api-configuration";
import * as i2 from "@angular/common/http";
export class DocumentNumberingService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `documentNumberingControllerFindAll()` */
    static { this.DocumentNumberingControllerFindAllPath = '/auth/document_numbering/document_numbering'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `documentNumberingControllerFindAll()` instead.
     *
     * This method doesn't expect any request body.
     */
    documentNumberingControllerFindAll$Response(params, context) {
        return documentNumberingControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `documentNumberingControllerFindAll$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    documentNumberingControllerFindAll(params, context) {
        return this.documentNumberingControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `documentNumberingControllerCreate()` */
    static { this.DocumentNumberingControllerCreatePath = '/auth/document_numbering/document_numbering'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `documentNumberingControllerCreate()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    documentNumberingControllerCreate$Response(params, context) {
        return documentNumberingControllerCreate(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `documentNumberingControllerCreate$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    documentNumberingControllerCreate(params, context) {
        return this.documentNumberingControllerCreate$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `documentNumberingControllerFindOne()` */
    static { this.DocumentNumberingControllerFindOnePath = '/auth/document_numbering/document_numbering/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `documentNumberingControllerFindOne()` instead.
     *
     * This method doesn't expect any request body.
     */
    documentNumberingControllerFindOne$Response(params, context) {
        return documentNumberingControllerFindOne(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `documentNumberingControllerFindOne$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    documentNumberingControllerFindOne(params, context) {
        return this.documentNumberingControllerFindOne$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `documentNumberingControllerUpdate()` */
    static { this.DocumentNumberingControllerUpdatePath = '/auth/document_numbering/document_numbering/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `documentNumberingControllerUpdate()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    documentNumberingControllerUpdate$Response(params, context) {
        return documentNumberingControllerUpdate(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `documentNumberingControllerUpdate$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    documentNumberingControllerUpdate(params, context) {
        return this.documentNumberingControllerUpdate$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `documentNumberingControllerRemove()` */
    static { this.DocumentNumberingControllerRemovePath = '/auth/document_numbering/document_numbering/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `documentNumberingControllerRemove()` instead.
     *
     * This method doesn't expect any request body.
     */
    documentNumberingControllerRemove$Response(params, context) {
        return documentNumberingControllerRemove(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `documentNumberingControllerRemove$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    documentNumberingControllerRemove(params, context) {
        return this.documentNumberingControllerRemove$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: DocumentNumberingService, deps: [{ token: i1.ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: DocumentNumberingService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: DocumentNumberingService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: i1.ApiConfiguration }, { type: i2.HttpClient }] });
//# sourceMappingURL=data:application/json;base64,
/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
import { HttpClient } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { map } from 'rxjs/operators';
import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { actypeControllerCreate } from '../fn/actype/actype-controller-create';
import { actypeControllerFindAll } from '../fn/actype/actype-controller-find-all';
import { actypeControllerFindOne } from '../fn/actype/actype-controller-find-one';
import { actypeControllerRemove } from '../fn/actype/actype-controller-remove';
import { actypeControllerUpdate } from '../fn/actype/actype-controller-update';
import * as i0 from "@angular/core";
import * as i1 from "../api-configuration";
import * as i2 from "@angular/common/http";
export class ActypeService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `actypeControllerFindAll()` */
    static { this.ActypeControllerFindAllPath = '/amims/actype/actype'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `actypeControllerFindAll()` instead.
     *
     * This method doesn't expect any request body.
     */
    actypeControllerFindAll$Response(params, context) {
        return actypeControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `actypeControllerFindAll$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    actypeControllerFindAll(params, context) {
        return this.actypeControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `actypeControllerCreate()` */
    static { this.ActypeControllerCreatePath = '/amims/actype/actype'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `actypeControllerCreate()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    actypeControllerCreate$Response(params, context) {
        return actypeControllerCreate(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `actypeControllerCreate$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    actypeControllerCreate(params, context) {
        return this.actypeControllerCreate$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `actypeControllerFindOne()` */
    static { this.ActypeControllerFindOnePath = '/amims/actype/actype/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `actypeControllerFindOne()` instead.
     *
     * This method doesn't expect any request body.
     */
    actypeControllerFindOne$Response(params, context) {
        return actypeControllerFindOne(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `actypeControllerFindOne$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    actypeControllerFindOne(params, context) {
        return this.actypeControllerFindOne$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `actypeControllerUpdate()` */
    static { this.ActypeControllerUpdatePath = '/amims/actype/actype/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `actypeControllerUpdate()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    actypeControllerUpdate$Response(params, context) {
        return actypeControllerUpdate(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `actypeControllerUpdate$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    actypeControllerUpdate(params, context) {
        return this.actypeControllerUpdate$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `actypeControllerRemove()` */
    static { this.ActypeControllerRemovePath = '/amims/actype/actype/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `actypeControllerRemove()` instead.
     *
     * This method doesn't expect any request body.
     */
    actypeControllerRemove$Response(params, context) {
        return actypeControllerRemove(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `actypeControllerRemove$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    actypeControllerRemove(params, context) {
        return this.actypeControllerRemove$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: ActypeService, deps: [{ token: i1.ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: ActypeService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: ActypeService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: i1.ApiConfiguration }, { type: i2.HttpClient }] });
//# sourceMappingURL=data:application/json;base64,
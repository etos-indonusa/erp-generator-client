/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
import { HttpClient } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { map } from 'rxjs/operators';
import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { mpcPiroControllerCreate } from '../fn/mpc-piro/mpc-piro-controller-create';
import { mpcPiroControllerFindAll } from '../fn/mpc-piro/mpc-piro-controller-find-all';
import { mpcPiroControllerFindOne } from '../fn/mpc-piro/mpc-piro-controller-find-one';
import { mpcPiroControllerRemove } from '../fn/mpc-piro/mpc-piro-controller-remove';
import { mpcPiroControllerUpdate } from '../fn/mpc-piro/mpc-piro-controller-update';
import * as i0 from "@angular/core";
import * as i1 from "../api-configuration";
import * as i2 from "@angular/common/http";
export class MpcPiroService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `mpcPiroControllerFindAll()` */
    static { this.MpcPiroControllerFindAllPath = '/amims/mpc_piro/mpc_piro'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `mpcPiroControllerFindAll()` instead.
     *
     * This method doesn't expect any request body.
     */
    mpcPiroControllerFindAll$Response(params, context) {
        return mpcPiroControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `mpcPiroControllerFindAll$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    mpcPiroControllerFindAll(params, context) {
        return this.mpcPiroControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `mpcPiroControllerCreate()` */
    static { this.MpcPiroControllerCreatePath = '/amims/mpc_piro/mpc_piro'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `mpcPiroControllerCreate()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    mpcPiroControllerCreate$Response(params, context) {
        return mpcPiroControllerCreate(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `mpcPiroControllerCreate$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    mpcPiroControllerCreate(params, context) {
        return this.mpcPiroControllerCreate$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `mpcPiroControllerFindOne()` */
    static { this.MpcPiroControllerFindOnePath = '/amims/mpc_piro/mpc_piro/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `mpcPiroControllerFindOne()` instead.
     *
     * This method doesn't expect any request body.
     */
    mpcPiroControllerFindOne$Response(params, context) {
        return mpcPiroControllerFindOne(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `mpcPiroControllerFindOne$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    mpcPiroControllerFindOne(params, context) {
        return this.mpcPiroControllerFindOne$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `mpcPiroControllerUpdate()` */
    static { this.MpcPiroControllerUpdatePath = '/amims/mpc_piro/mpc_piro/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `mpcPiroControllerUpdate()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    mpcPiroControllerUpdate$Response(params, context) {
        return mpcPiroControllerUpdate(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `mpcPiroControllerUpdate$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    mpcPiroControllerUpdate(params, context) {
        return this.mpcPiroControllerUpdate$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `mpcPiroControllerRemove()` */
    static { this.MpcPiroControllerRemovePath = '/amims/mpc_piro/mpc_piro/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `mpcPiroControllerRemove()` instead.
     *
     * This method doesn't expect any request body.
     */
    mpcPiroControllerRemove$Response(params, context) {
        return mpcPiroControllerRemove(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `mpcPiroControllerRemove$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    mpcPiroControllerRemove(params, context) {
        return this.mpcPiroControllerRemove$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: MpcPiroService, deps: [{ token: i1.ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: MpcPiroService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: MpcPiroService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: i1.ApiConfiguration }, { type: i2.HttpClient }] });
//# sourceMappingURL=data:application/json;base64,
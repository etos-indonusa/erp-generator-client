/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
import { HttpClient } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { map } from 'rxjs/operators';
import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { contractJenisControllerCreate } from '../fn/contract-jenis/contract-jenis-controller-create';
import { contractJenisControllerFindAll } from '../fn/contract-jenis/contract-jenis-controller-find-all';
import { contractJenisControllerFindOne } from '../fn/contract-jenis/contract-jenis-controller-find-one';
import { contractJenisControllerRemove } from '../fn/contract-jenis/contract-jenis-controller-remove';
import { contractJenisControllerUpdate } from '../fn/contract-jenis/contract-jenis-controller-update';
import * as i0 from "@angular/core";
import * as i1 from "../api-configuration";
import * as i2 from "@angular/common/http";
export class ContractJenisService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `contractJenisControllerFindAll()` */
    static { this.ContractJenisControllerFindAllPath = '/pelanggan/contract_jenis/contract_jenis'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `contractJenisControllerFindAll()` instead.
     *
     * This method doesn't expect any request body.
     */
    contractJenisControllerFindAll$Response(params, context) {
        return contractJenisControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `contractJenisControllerFindAll$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    contractJenisControllerFindAll(params, context) {
        return this.contractJenisControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `contractJenisControllerCreate()` */
    static { this.ContractJenisControllerCreatePath = '/pelanggan/contract_jenis/contract_jenis'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `contractJenisControllerCreate()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    contractJenisControllerCreate$Response(params, context) {
        return contractJenisControllerCreate(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `contractJenisControllerCreate$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    contractJenisControllerCreate(params, context) {
        return this.contractJenisControllerCreate$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `contractJenisControllerFindOne()` */
    static { this.ContractJenisControllerFindOnePath = '/pelanggan/contract_jenis/contract_jenis/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `contractJenisControllerFindOne()` instead.
     *
     * This method doesn't expect any request body.
     */
    contractJenisControllerFindOne$Response(params, context) {
        return contractJenisControllerFindOne(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `contractJenisControllerFindOne$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    contractJenisControllerFindOne(params, context) {
        return this.contractJenisControllerFindOne$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `contractJenisControllerUpdate()` */
    static { this.ContractJenisControllerUpdatePath = '/pelanggan/contract_jenis/contract_jenis/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `contractJenisControllerUpdate()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    contractJenisControllerUpdate$Response(params, context) {
        return contractJenisControllerUpdate(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `contractJenisControllerUpdate$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    contractJenisControllerUpdate(params, context) {
        return this.contractJenisControllerUpdate$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `contractJenisControllerRemove()` */
    static { this.ContractJenisControllerRemovePath = '/pelanggan/contract_jenis/contract_jenis/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `contractJenisControllerRemove()` instead.
     *
     * This method doesn't expect any request body.
     */
    contractJenisControllerRemove$Response(params, context) {
        return contractJenisControllerRemove(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `contractJenisControllerRemove$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    contractJenisControllerRemove(params, context) {
        return this.contractJenisControllerRemove$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: ContractJenisService, deps: [{ token: i1.ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: ContractJenisService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: ContractJenisService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: i1.ApiConfiguration }, { type: i2.HttpClient }] });
//# sourceMappingURL=data:application/json;base64,
/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
import { HttpClient } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { map } from 'rxjs/operators';
import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { internalGrnItemReportControllerFindAll } from '../fn/internal-grn-item-report/internal-grn-item-report-controller-find-all';
import { internalGrnItemReportControllerFindOne } from '../fn/internal-grn-item-report/internal-grn-item-report-controller-find-one';
import * as i0 from "@angular/core";
import * as i1 from "../api-configuration";
import * as i2 from "@angular/common/http";
export class InternalGrnItemReportService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `internalGrnItemReportControllerFindAll()` */
    static { this.InternalGrnItemReportControllerFindAllPath = '/amims/internal_grn_item/internal_grn_item_report/list'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `internalGrnItemReportControllerFindAll()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    internalGrnItemReportControllerFindAll$Response(params, context) {
        return internalGrnItemReportControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `internalGrnItemReportControllerFindAll$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    internalGrnItemReportControllerFindAll(params, context) {
        return this.internalGrnItemReportControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `internalGrnItemReportControllerFindOne()` */
    static { this.InternalGrnItemReportControllerFindOnePath = '/amims/internal_grn_item/internal_grn_item_report/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `internalGrnItemReportControllerFindOne()` instead.
     *
     * This method doesn't expect any request body.
     */
    internalGrnItemReportControllerFindOne$Response(params, context) {
        return internalGrnItemReportControllerFindOne(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `internalGrnItemReportControllerFindOne$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    internalGrnItemReportControllerFindOne(params, context) {
        return this.internalGrnItemReportControllerFindOne$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: InternalGrnItemReportService, deps: [{ token: i1.ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: InternalGrnItemReportService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: InternalGrnItemReportService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: i1.ApiConfiguration }, { type: i2.HttpClient }] });
//# sourceMappingURL=data:application/json;base64,
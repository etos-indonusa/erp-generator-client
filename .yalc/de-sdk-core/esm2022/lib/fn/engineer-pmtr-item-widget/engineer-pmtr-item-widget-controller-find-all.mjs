/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
import { HttpResponse } from '@angular/common/http';
import { filter, map } from 'rxjs/operators';
import { RequestBuilder } from '../../request-builder';
export function engineerPmtrItemWidgetControllerFindAll(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, engineerPmtrItemWidgetControllerFindAll.PATH, 'post');
    if (params) {
        rb.query('filter', params.filter, {});
        rb.query('joinWhere', params.joinWhere, {});
        rb.query('select', params.select, {});
        rb.query('groupBy', params.groupBy, {});
        rb.query('sortKey', params.sortKey, {});
        rb.query('sortValue', params.sortValue, {});
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
engineerPmtrItemWidgetControllerFindAll.PATH = '/amims/engineer_pmtr_item/engineer_pmtr_item_widget';
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZW5naW5lZXItcG10ci1pdGVtLXdpZGdldC1jb250cm9sbGVyLWZpbmQtYWxsLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvc2RrY29yZS9zcmMvbGliL2ZuL2VuZ2luZWVyLXBtdHItaXRlbS13aWRnZXQvZW5naW5lZXItcG10ci1pdGVtLXdpZGdldC1jb250cm9sbGVyLWZpbmQtYWxsLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQixvQkFBb0I7QUFDcEIsbURBQW1EO0FBRW5ELE9BQU8sRUFBMkIsWUFBWSxFQUFFLE1BQU0sc0JBQXNCLENBQUM7QUFFN0UsT0FBTyxFQUFFLE1BQU0sRUFBRSxHQUFHLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUU3QyxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0sdUJBQXVCLENBQUM7QUFpQ3ZELE1BQU0sVUFBVSx1Q0FBdUMsQ0FBQyxJQUFnQixFQUFFLE9BQWUsRUFBRSxNQUFzRCxFQUFFLE9BQXFCO0lBTXRLLE1BQU0sRUFBRSxHQUFHLElBQUksY0FBYyxDQUFDLE9BQU8sRUFBRSx1Q0FBdUMsQ0FBQyxJQUFJLEVBQUUsTUFBTSxDQUFDLENBQUM7SUFDN0YsSUFBSSxNQUFNLEVBQUUsQ0FBQztRQUNYLEVBQUUsQ0FBQyxLQUFLLENBQUMsUUFBUSxFQUFFLE1BQU0sQ0FBQyxNQUFNLEVBQUUsRUFBRSxDQUFDLENBQUM7UUFDdEMsRUFBRSxDQUFDLEtBQUssQ0FBQyxXQUFXLEVBQUUsTUFBTSxDQUFDLFNBQVMsRUFBRSxFQUFFLENBQUMsQ0FBQztRQUM1QyxFQUFFLENBQUMsS0FBSyxDQUFDLFFBQVEsRUFBRSxNQUFNLENBQUMsTUFBTSxFQUFFLEVBQUUsQ0FBQyxDQUFDO1FBQ3RDLEVBQUUsQ0FBQyxLQUFLLENBQUMsU0FBUyxFQUFFLE1BQU0sQ0FBQyxPQUFPLEVBQUUsRUFBRSxDQUFDLENBQUM7UUFDeEMsRUFBRSxDQUFDLEtBQUssQ0FBQyxTQUFTLEVBQUUsTUFBTSxDQUFDLE9BQU8sRUFBRSxFQUFFLENBQUMsQ0FBQztRQUN4QyxFQUFFLENBQUMsS0FBSyxDQUFDLFdBQVcsRUFBRSxNQUFNLENBQUMsU0FBUyxFQUFFLEVBQUUsQ0FBQyxDQUFDO1FBQzVDLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksRUFBRSxrQkFBa0IsQ0FBQyxDQUFDO0lBQzNDLENBQUM7SUFFRCxPQUFPLElBQUksQ0FBQyxPQUFPLENBQ2pCLEVBQUUsQ0FBQyxLQUFLLENBQUMsRUFBRSxZQUFZLEVBQUUsTUFBTSxFQUFFLE1BQU0sRUFBRSxrQkFBa0IsRUFBRSxPQUFPLEVBQUUsQ0FBQyxDQUN4RSxDQUFDLElBQUksQ0FDSixNQUFNLENBQUMsQ0FBQyxDQUFNLEVBQTBCLEVBQUUsQ0FBQyxDQUFDLFlBQVksWUFBWSxDQUFDLEVBQ3JFLEdBQUcsQ0FBQyxDQUFDLENBQW9CLEVBQUUsRUFBRTtRQUMzQixPQUFPLENBS0wsQ0FBQztJQUNMLENBQUMsQ0FBQyxDQUNILENBQUM7QUFDSixDQUFDO0FBRUQsdUNBQXVDLENBQUMsSUFBSSxHQUFHLHFEQUFxRCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLyogdHNsaW50OmRpc2FibGUgKi9cbi8qIGVzbGludC1kaXNhYmxlICovXG4vKiBDb2RlIGdlbmVyYXRlZCBieSBuZy1vcGVuYXBpLWdlbiBETyBOT1QgRURJVC4gKi9cblxuaW1wb3J0IHsgSHR0cENsaWVudCwgSHR0cENvbnRleHQsIEh0dHBSZXNwb25zZSB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbi9odHRwJztcbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IGZpbHRlciwgbWFwIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuaW1wb3J0IHsgU3RyaWN0SHR0cFJlc3BvbnNlIH0gZnJvbSAnLi4vLi4vc3RyaWN0LWh0dHAtcmVzcG9uc2UnO1xuaW1wb3J0IHsgUmVxdWVzdEJ1aWxkZXIgfSBmcm9tICcuLi8uLi9yZXF1ZXN0LWJ1aWxkZXInO1xuXG5pbXBvcnQgeyBBbWltc0VuZ2luZWVyUG10ckl0ZW1XaWRnZXREdG8gfSBmcm9tICcuLi8uLi9tb2RlbHMvYW1pbXMtZW5naW5lZXItcG10ci1pdGVtLXdpZGdldC1kdG8nO1xuaW1wb3J0IHsgQmFzZVdpZGdldFF1ZXJ5RHRvIH0gZnJvbSAnLi4vLi4vbW9kZWxzL2Jhc2Utd2lkZ2V0LXF1ZXJ5LWR0byc7XG5pbXBvcnQgeyBPYmplY3QgfSBmcm9tICcuLi8uLi9tb2RlbHMvb2JqZWN0JztcbmltcG9ydCB7IFNlbGVjdEZpZWxkRHRvIH0gZnJvbSAnLi4vLi4vbW9kZWxzL3NlbGVjdC1maWVsZC1kdG8nO1xuXG5leHBvcnQgaW50ZXJmYWNlIEVuZ2luZWVyUG10ckl0ZW1XaWRnZXRDb250cm9sbGVyRmluZEFsbCRQYXJhbXMge1xuXG4vKipcbiAqIEZpbHRlciBvYmplY3RcbiAqL1xuICBmaWx0ZXI/OiBPYmplY3Q7XG5cbi8qKlxuICogSm9pbldoZXJlIG9iamVjdFxuICovXG4gIGpvaW5XaGVyZT86IE9iamVjdDtcblxuLyoqXG4gKiBTZWxlY3QgZmllbGRzIHdpdGggYWdncmVnYXRpb24sIGUuZy4gW3sgdHlwZTogXCJzdW1cIiwgZmllbGQ6IFwibmlsYWlcIiwgYWxpYXM6IFwidG90YWxOaWxhaVwiIH1dXG4gKi9cbiAgc2VsZWN0PzogQXJyYXk8U2VsZWN0RmllbGREdG8+O1xuXG4vKipcbiAqIEZpZWxkcyB0byBncm91cCBieVxuICovXG4gIGdyb3VwQnk/OiBBcnJheTxzdHJpbmc+O1xuICBzb3J0S2V5Pzogc3RyaW5nO1xuICBzb3J0VmFsdWU/OiAnQVNDJyB8ICdERVNDJztcbiAgICAgIGJvZHk6IEJhc2VXaWRnZXRRdWVyeUR0b1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZW5naW5lZXJQbXRySXRlbVdpZGdldENvbnRyb2xsZXJGaW5kQWxsKGh0dHA6IEh0dHBDbGllbnQsIHJvb3RVcmw6IHN0cmluZywgcGFyYW1zOiBFbmdpbmVlclBtdHJJdGVtV2lkZ2V0Q29udHJvbGxlckZpbmRBbGwkUGFyYW1zLCBjb250ZXh0PzogSHR0cENvbnRleHQpOiBPYnNlcnZhYmxlPFN0cmljdEh0dHBSZXNwb25zZTx7XG4nY29kZSc/OiBudW1iZXI7XG4ncGVzYW4nPzogc3RyaW5nO1xuJ2RhdGEnPzogQXJyYXk8QW1pbXNFbmdpbmVlclBtdHJJdGVtV2lkZ2V0RHRvPjtcbid0b3RhbCc/OiBudW1iZXI7XG59Pj4ge1xuICBjb25zdCByYiA9IG5ldyBSZXF1ZXN0QnVpbGRlcihyb290VXJsLCBlbmdpbmVlclBtdHJJdGVtV2lkZ2V0Q29udHJvbGxlckZpbmRBbGwuUEFUSCwgJ3Bvc3QnKTtcbiAgaWYgKHBhcmFtcykge1xuICAgIHJiLnF1ZXJ5KCdmaWx0ZXInLCBwYXJhbXMuZmlsdGVyLCB7fSk7XG4gICAgcmIucXVlcnkoJ2pvaW5XaGVyZScsIHBhcmFtcy5qb2luV2hlcmUsIHt9KTtcbiAgICByYi5xdWVyeSgnc2VsZWN0JywgcGFyYW1zLnNlbGVjdCwge30pO1xuICAgIHJiLnF1ZXJ5KCdncm91cEJ5JywgcGFyYW1zLmdyb3VwQnksIHt9KTtcbiAgICByYi5xdWVyeSgnc29ydEtleScsIHBhcmFtcy5zb3J0S2V5LCB7fSk7XG4gICAgcmIucXVlcnkoJ3NvcnRWYWx1ZScsIHBhcmFtcy5zb3J0VmFsdWUsIHt9KTtcbiAgICByYi5ib2R5KHBhcmFtcy5ib2R5LCAnYXBwbGljYXRpb24vanNvbicpO1xuICB9XG5cbiAgcmV0dXJuIGh0dHAucmVxdWVzdChcbiAgICByYi5idWlsZCh7IHJlc3BvbnNlVHlwZTogJ2pzb24nLCBhY2NlcHQ6ICdhcHBsaWNhdGlvbi9qc29uJywgY29udGV4dCB9KVxuICApLnBpcGUoXG4gICAgZmlsdGVyKChyOiBhbnkpOiByIGlzIEh0dHBSZXNwb25zZTxhbnk+ID0+IHIgaW5zdGFuY2VvZiBIdHRwUmVzcG9uc2UpLFxuICAgIG1hcCgocjogSHR0cFJlc3BvbnNlPGFueT4pID0+IHtcbiAgICAgIHJldHVybiByIGFzIFN0cmljdEh0dHBSZXNwb25zZTx7XG4gICAgICAnY29kZSc/OiBudW1iZXI7XG4gICAgICAncGVzYW4nPzogc3RyaW5nO1xuICAgICAgJ2RhdGEnPzogQXJyYXk8QW1pbXNFbmdpbmVlclBtdHJJdGVtV2lkZ2V0RHRvPjtcbiAgICAgICd0b3RhbCc/OiBudW1iZXI7XG4gICAgICB9PjtcbiAgICB9KVxuICApO1xufVxuXG5lbmdpbmVlclBtdHJJdGVtV2lkZ2V0Q29udHJvbGxlckZpbmRBbGwuUEFUSCA9ICcvYW1pbXMvZW5naW5lZXJfcG10cl9pdGVtL2VuZ2luZWVyX3BtdHJfaXRlbV93aWRnZXQnO1xuIl19
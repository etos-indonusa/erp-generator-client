/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
import { HttpResponse } from '@angular/common/http';
import { filter, map } from 'rxjs/operators';
import { RequestBuilder } from '../../request-builder';
export function techLogEngineCheckWidgetControllerFindAll(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, techLogEngineCheckWidgetControllerFindAll.PATH, 'post');
    if (params) {
        rb.query('filter', params.filter, {});
        rb.query('joinWhere', params.joinWhere, {});
        rb.query('select', params.select, {});
        rb.query('groupBy', params.groupBy, {});
        rb.query('sortKey', params.sortKey, {});
        rb.query('sortValue', params.sortValue, {});
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
techLogEngineCheckWidgetControllerFindAll.PATH = '/amims/tech_log_engine_check/tech_log_engine_check_widget';
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGVjaC1sb2ctZW5naW5lLWNoZWNrLXdpZGdldC1jb250cm9sbGVyLWZpbmQtYWxsLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvc2RrY29yZS9zcmMvbGliL2ZuL3RlY2gtbG9nLWVuZ2luZS1jaGVjay13aWRnZXQvdGVjaC1sb2ctZW5naW5lLWNoZWNrLXdpZGdldC1jb250cm9sbGVyLWZpbmQtYWxsLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQixvQkFBb0I7QUFDcEIsbURBQW1EO0FBRW5ELE9BQU8sRUFBMkIsWUFBWSxFQUFFLE1BQU0sc0JBQXNCLENBQUM7QUFFN0UsT0FBTyxFQUFFLE1BQU0sRUFBRSxHQUFHLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUU3QyxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0sdUJBQXVCLENBQUM7QUFpQ3ZELE1BQU0sVUFBVSx5Q0FBeUMsQ0FBQyxJQUFnQixFQUFFLE9BQWUsRUFBRSxNQUF3RCxFQUFFLE9BQXFCO0lBTTFLLE1BQU0sRUFBRSxHQUFHLElBQUksY0FBYyxDQUFDLE9BQU8sRUFBRSx5Q0FBeUMsQ0FBQyxJQUFJLEVBQUUsTUFBTSxDQUFDLENBQUM7SUFDL0YsSUFBSSxNQUFNLEVBQUUsQ0FBQztRQUNYLEVBQUUsQ0FBQyxLQUFLLENBQUMsUUFBUSxFQUFFLE1BQU0sQ0FBQyxNQUFNLEVBQUUsRUFBRSxDQUFDLENBQUM7UUFDdEMsRUFBRSxDQUFDLEtBQUssQ0FBQyxXQUFXLEVBQUUsTUFBTSxDQUFDLFNBQVMsRUFBRSxFQUFFLENBQUMsQ0FBQztRQUM1QyxFQUFFLENBQUMsS0FBSyxDQUFDLFFBQVEsRUFBRSxNQUFNLENBQUMsTUFBTSxFQUFFLEVBQUUsQ0FBQyxDQUFDO1FBQ3RDLEVBQUUsQ0FBQyxLQUFLLENBQUMsU0FBUyxFQUFFLE1BQU0sQ0FBQyxPQUFPLEVBQUUsRUFBRSxDQUFDLENBQUM7UUFDeEMsRUFBRSxDQUFDLEtBQUssQ0FBQyxTQUFTLEVBQUUsTUFBTSxDQUFDLE9BQU8sRUFBRSxFQUFFLENBQUMsQ0FBQztRQUN4QyxFQUFFLENBQUMsS0FBSyxDQUFDLFdBQVcsRUFBRSxNQUFNLENBQUMsU0FBUyxFQUFFLEVBQUUsQ0FBQyxDQUFDO1FBQzVDLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksRUFBRSxrQkFBa0IsQ0FBQyxDQUFDO0lBQzNDLENBQUM7SUFFRCxPQUFPLElBQUksQ0FBQyxPQUFPLENBQ2pCLEVBQUUsQ0FBQyxLQUFLLENBQUMsRUFBRSxZQUFZLEVBQUUsTUFBTSxFQUFFLE1BQU0sRUFBRSxrQkFBa0IsRUFBRSxPQUFPLEVBQUUsQ0FBQyxDQUN4RSxDQUFDLElBQUksQ0FDSixNQUFNLENBQUMsQ0FBQyxDQUFNLEVBQTBCLEVBQUUsQ0FBQyxDQUFDLFlBQVksWUFBWSxDQUFDLEVBQ3JFLEdBQUcsQ0FBQyxDQUFDLENBQW9CLEVBQUUsRUFBRTtRQUMzQixPQUFPLENBS0wsQ0FBQztJQUNMLENBQUMsQ0FBQyxDQUNILENBQUM7QUFDSixDQUFDO0FBRUQseUNBQXlDLENBQUMsSUFBSSxHQUFHLDJEQUEyRCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLyogdHNsaW50OmRpc2FibGUgKi9cbi8qIGVzbGludC1kaXNhYmxlICovXG4vKiBDb2RlIGdlbmVyYXRlZCBieSBuZy1vcGVuYXBpLWdlbiBETyBOT1QgRURJVC4gKi9cblxuaW1wb3J0IHsgSHR0cENsaWVudCwgSHR0cENvbnRleHQsIEh0dHBSZXNwb25zZSB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbi9odHRwJztcbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IGZpbHRlciwgbWFwIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuaW1wb3J0IHsgU3RyaWN0SHR0cFJlc3BvbnNlIH0gZnJvbSAnLi4vLi4vc3RyaWN0LWh0dHAtcmVzcG9uc2UnO1xuaW1wb3J0IHsgUmVxdWVzdEJ1aWxkZXIgfSBmcm9tICcuLi8uLi9yZXF1ZXN0LWJ1aWxkZXInO1xuXG5pbXBvcnQgeyBBbWltc1RlY2hMb2dFbmdpbmVDaGVja1dpZGdldER0byB9IGZyb20gJy4uLy4uL21vZGVscy9hbWltcy10ZWNoLWxvZy1lbmdpbmUtY2hlY2std2lkZ2V0LWR0byc7XG5pbXBvcnQgeyBCYXNlV2lkZ2V0UXVlcnlEdG8gfSBmcm9tICcuLi8uLi9tb2RlbHMvYmFzZS13aWRnZXQtcXVlcnktZHRvJztcbmltcG9ydCB7IE9iamVjdCB9IGZyb20gJy4uLy4uL21vZGVscy9vYmplY3QnO1xuaW1wb3J0IHsgU2VsZWN0RmllbGREdG8gfSBmcm9tICcuLi8uLi9tb2RlbHMvc2VsZWN0LWZpZWxkLWR0byc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgVGVjaExvZ0VuZ2luZUNoZWNrV2lkZ2V0Q29udHJvbGxlckZpbmRBbGwkUGFyYW1zIHtcblxuLyoqXG4gKiBGaWx0ZXIgb2JqZWN0XG4gKi9cbiAgZmlsdGVyPzogT2JqZWN0O1xuXG4vKipcbiAqIEpvaW5XaGVyZSBvYmplY3RcbiAqL1xuICBqb2luV2hlcmU/OiBPYmplY3Q7XG5cbi8qKlxuICogU2VsZWN0IGZpZWxkcyB3aXRoIGFnZ3JlZ2F0aW9uLCBlLmcuIFt7IHR5cGU6IFwic3VtXCIsIGZpZWxkOiBcIm5pbGFpXCIsIGFsaWFzOiBcInRvdGFsTmlsYWlcIiB9XVxuICovXG4gIHNlbGVjdD86IEFycmF5PFNlbGVjdEZpZWxkRHRvPjtcblxuLyoqXG4gKiBGaWVsZHMgdG8gZ3JvdXAgYnlcbiAqL1xuICBncm91cEJ5PzogQXJyYXk8c3RyaW5nPjtcbiAgc29ydEtleT86IHN0cmluZztcbiAgc29ydFZhbHVlPzogJ0FTQycgfCAnREVTQyc7XG4gICAgICBib2R5OiBCYXNlV2lkZ2V0UXVlcnlEdG9cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHRlY2hMb2dFbmdpbmVDaGVja1dpZGdldENvbnRyb2xsZXJGaW5kQWxsKGh0dHA6IEh0dHBDbGllbnQsIHJvb3RVcmw6IHN0cmluZywgcGFyYW1zOiBUZWNoTG9nRW5naW5lQ2hlY2tXaWRnZXRDb250cm9sbGVyRmluZEFsbCRQYXJhbXMsIGNvbnRleHQ/OiBIdHRwQ29udGV4dCk6IE9ic2VydmFibGU8U3RyaWN0SHR0cFJlc3BvbnNlPHtcbidjb2RlJz86IG51bWJlcjtcbidwZXNhbic/OiBzdHJpbmc7XG4nZGF0YSc/OiBBcnJheTxBbWltc1RlY2hMb2dFbmdpbmVDaGVja1dpZGdldER0bz47XG4ndG90YWwnPzogbnVtYmVyO1xufT4+IHtcbiAgY29uc3QgcmIgPSBuZXcgUmVxdWVzdEJ1aWxkZXIocm9vdFVybCwgdGVjaExvZ0VuZ2luZUNoZWNrV2lkZ2V0Q29udHJvbGxlckZpbmRBbGwuUEFUSCwgJ3Bvc3QnKTtcbiAgaWYgKHBhcmFtcykge1xuICAgIHJiLnF1ZXJ5KCdmaWx0ZXInLCBwYXJhbXMuZmlsdGVyLCB7fSk7XG4gICAgcmIucXVlcnkoJ2pvaW5XaGVyZScsIHBhcmFtcy5qb2luV2hlcmUsIHt9KTtcbiAgICByYi5xdWVyeSgnc2VsZWN0JywgcGFyYW1zLnNlbGVjdCwge30pO1xuICAgIHJiLnF1ZXJ5KCdncm91cEJ5JywgcGFyYW1zLmdyb3VwQnksIHt9KTtcbiAgICByYi5xdWVyeSgnc29ydEtleScsIHBhcmFtcy5zb3J0S2V5LCB7fSk7XG4gICAgcmIucXVlcnkoJ3NvcnRWYWx1ZScsIHBhcmFtcy5zb3J0VmFsdWUsIHt9KTtcbiAgICByYi5ib2R5KHBhcmFtcy5ib2R5LCAnYXBwbGljYXRpb24vanNvbicpO1xuICB9XG5cbiAgcmV0dXJuIGh0dHAucmVxdWVzdChcbiAgICByYi5idWlsZCh7IHJlc3BvbnNlVHlwZTogJ2pzb24nLCBhY2NlcHQ6ICdhcHBsaWNhdGlvbi9qc29uJywgY29udGV4dCB9KVxuICApLnBpcGUoXG4gICAgZmlsdGVyKChyOiBhbnkpOiByIGlzIEh0dHBSZXNwb25zZTxhbnk+ID0+IHIgaW5zdGFuY2VvZiBIdHRwUmVzcG9uc2UpLFxuICAgIG1hcCgocjogSHR0cFJlc3BvbnNlPGFueT4pID0+IHtcbiAgICAgIHJldHVybiByIGFzIFN0cmljdEh0dHBSZXNwb25zZTx7XG4gICAgICAnY29kZSc/OiBudW1iZXI7XG4gICAgICAncGVzYW4nPzogc3RyaW5nO1xuICAgICAgJ2RhdGEnPzogQXJyYXk8QW1pbXNUZWNoTG9nRW5naW5lQ2hlY2tXaWRnZXREdG8+O1xuICAgICAgJ3RvdGFsJz86IG51bWJlcjtcbiAgICAgIH0+O1xuICAgIH0pXG4gICk7XG59XG5cbnRlY2hMb2dFbmdpbmVDaGVja1dpZGdldENvbnRyb2xsZXJGaW5kQWxsLlBBVEggPSAnL2FtaW1zL3RlY2hfbG9nX2VuZ2luZV9jaGVjay90ZWNoX2xvZ19lbmdpbmVfY2hlY2tfd2lkZ2V0JztcbiJdfQ==
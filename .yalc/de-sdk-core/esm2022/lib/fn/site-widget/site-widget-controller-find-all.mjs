/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
import { HttpResponse } from '@angular/common/http';
import { filter, map } from 'rxjs/operators';
import { RequestBuilder } from '../../request-builder';
export function siteWidgetControllerFindAll(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, siteWidgetControllerFindAll.PATH, 'post');
    if (params) {
        rb.query('filter', params.filter, {});
        rb.query('joinWhere', params.joinWhere, {});
        rb.query('select', params.select, {});
        rb.query('groupBy', params.groupBy, {});
        rb.query('sortKey', params.sortKey, {});
        rb.query('sortValue', params.sortValue, {});
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
siteWidgetControllerFindAll.PATH = '/amims/site/site_widget';
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2l0ZS13aWRnZXQtY29udHJvbGxlci1maW5kLWFsbC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL3Nka2NvcmUvc3JjL2xpYi9mbi9zaXRlLXdpZGdldC9zaXRlLXdpZGdldC1jb250cm9sbGVyLWZpbmQtYWxsLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQixvQkFBb0I7QUFDcEIsbURBQW1EO0FBRW5ELE9BQU8sRUFBMkIsWUFBWSxFQUFFLE1BQU0sc0JBQXNCLENBQUM7QUFFN0UsT0FBTyxFQUFFLE1BQU0sRUFBRSxHQUFHLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUU3QyxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0sdUJBQXVCLENBQUM7QUFpQ3ZELE1BQU0sVUFBVSwyQkFBMkIsQ0FBQyxJQUFnQixFQUFFLE9BQWUsRUFBRSxNQUEwQyxFQUFFLE9BQXFCO0lBTTlJLE1BQU0sRUFBRSxHQUFHLElBQUksY0FBYyxDQUFDLE9BQU8sRUFBRSwyQkFBMkIsQ0FBQyxJQUFJLEVBQUUsTUFBTSxDQUFDLENBQUM7SUFDakYsSUFBSSxNQUFNLEVBQUUsQ0FBQztRQUNYLEVBQUUsQ0FBQyxLQUFLLENBQUMsUUFBUSxFQUFFLE1BQU0sQ0FBQyxNQUFNLEVBQUUsRUFBRSxDQUFDLENBQUM7UUFDdEMsRUFBRSxDQUFDLEtBQUssQ0FBQyxXQUFXLEVBQUUsTUFBTSxDQUFDLFNBQVMsRUFBRSxFQUFFLENBQUMsQ0FBQztRQUM1QyxFQUFFLENBQUMsS0FBSyxDQUFDLFFBQVEsRUFBRSxNQUFNLENBQUMsTUFBTSxFQUFFLEVBQUUsQ0FBQyxDQUFDO1FBQ3RDLEVBQUUsQ0FBQyxLQUFLLENBQUMsU0FBUyxFQUFFLE1BQU0sQ0FBQyxPQUFPLEVBQUUsRUFBRSxDQUFDLENBQUM7UUFDeEMsRUFBRSxDQUFDLEtBQUssQ0FBQyxTQUFTLEVBQUUsTUFBTSxDQUFDLE9BQU8sRUFBRSxFQUFFLENBQUMsQ0FBQztRQUN4QyxFQUFFLENBQUMsS0FBSyxDQUFDLFdBQVcsRUFBRSxNQUFNLENBQUMsU0FBUyxFQUFFLEVBQUUsQ0FBQyxDQUFDO1FBQzVDLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksRUFBRSxrQkFBa0IsQ0FBQyxDQUFDO0lBQzNDLENBQUM7SUFFRCxPQUFPLElBQUksQ0FBQyxPQUFPLENBQ2pCLEVBQUUsQ0FBQyxLQUFLLENBQUMsRUFBRSxZQUFZLEVBQUUsTUFBTSxFQUFFLE1BQU0sRUFBRSxrQkFBa0IsRUFBRSxPQUFPLEVBQUUsQ0FBQyxDQUN4RSxDQUFDLElBQUksQ0FDSixNQUFNLENBQUMsQ0FBQyxDQUFNLEVBQTBCLEVBQUUsQ0FBQyxDQUFDLFlBQVksWUFBWSxDQUFDLEVBQ3JFLEdBQUcsQ0FBQyxDQUFDLENBQW9CLEVBQUUsRUFBRTtRQUMzQixPQUFPLENBS0wsQ0FBQztJQUNMLENBQUMsQ0FBQyxDQUNILENBQUM7QUFDSixDQUFDO0FBRUQsMkJBQTJCLENBQUMsSUFBSSxHQUFHLHlCQUF5QixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLyogdHNsaW50OmRpc2FibGUgKi9cbi8qIGVzbGludC1kaXNhYmxlICovXG4vKiBDb2RlIGdlbmVyYXRlZCBieSBuZy1vcGVuYXBpLWdlbiBETyBOT1QgRURJVC4gKi9cblxuaW1wb3J0IHsgSHR0cENsaWVudCwgSHR0cENvbnRleHQsIEh0dHBSZXNwb25zZSB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbi9odHRwJztcbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IGZpbHRlciwgbWFwIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuaW1wb3J0IHsgU3RyaWN0SHR0cFJlc3BvbnNlIH0gZnJvbSAnLi4vLi4vc3RyaWN0LWh0dHAtcmVzcG9uc2UnO1xuaW1wb3J0IHsgUmVxdWVzdEJ1aWxkZXIgfSBmcm9tICcuLi8uLi9yZXF1ZXN0LWJ1aWxkZXInO1xuXG5pbXBvcnQgeyBBbWltc1NpdGVXaWRnZXREdG8gfSBmcm9tICcuLi8uLi9tb2RlbHMvYW1pbXMtc2l0ZS13aWRnZXQtZHRvJztcbmltcG9ydCB7IEJhc2VXaWRnZXRRdWVyeUR0byB9IGZyb20gJy4uLy4uL21vZGVscy9iYXNlLXdpZGdldC1xdWVyeS1kdG8nO1xuaW1wb3J0IHsgT2JqZWN0IH0gZnJvbSAnLi4vLi4vbW9kZWxzL29iamVjdCc7XG5pbXBvcnQgeyBTZWxlY3RGaWVsZER0byB9IGZyb20gJy4uLy4uL21vZGVscy9zZWxlY3QtZmllbGQtZHRvJztcblxuZXhwb3J0IGludGVyZmFjZSBTaXRlV2lkZ2V0Q29udHJvbGxlckZpbmRBbGwkUGFyYW1zIHtcblxuLyoqXG4gKiBGaWx0ZXIgb2JqZWN0XG4gKi9cbiAgZmlsdGVyPzogT2JqZWN0O1xuXG4vKipcbiAqIEpvaW5XaGVyZSBvYmplY3RcbiAqL1xuICBqb2luV2hlcmU/OiBPYmplY3Q7XG5cbi8qKlxuICogU2VsZWN0IGZpZWxkcyB3aXRoIGFnZ3JlZ2F0aW9uLCBlLmcuIFt7IHR5cGU6IFwic3VtXCIsIGZpZWxkOiBcIm5pbGFpXCIsIGFsaWFzOiBcInRvdGFsTmlsYWlcIiB9XVxuICovXG4gIHNlbGVjdD86IEFycmF5PFNlbGVjdEZpZWxkRHRvPjtcblxuLyoqXG4gKiBGaWVsZHMgdG8gZ3JvdXAgYnlcbiAqL1xuICBncm91cEJ5PzogQXJyYXk8c3RyaW5nPjtcbiAgc29ydEtleT86IHN0cmluZztcbiAgc29ydFZhbHVlPzogJ0FTQycgfCAnREVTQyc7XG4gICAgICBib2R5OiBCYXNlV2lkZ2V0UXVlcnlEdG9cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHNpdGVXaWRnZXRDb250cm9sbGVyRmluZEFsbChodHRwOiBIdHRwQ2xpZW50LCByb290VXJsOiBzdHJpbmcsIHBhcmFtczogU2l0ZVdpZGdldENvbnRyb2xsZXJGaW5kQWxsJFBhcmFtcywgY29udGV4dD86IEh0dHBDb250ZXh0KTogT2JzZXJ2YWJsZTxTdHJpY3RIdHRwUmVzcG9uc2U8e1xuJ2NvZGUnPzogbnVtYmVyO1xuJ3Blc2FuJz86IHN0cmluZztcbidkYXRhJz86IEFycmF5PEFtaW1zU2l0ZVdpZGdldER0bz47XG4ndG90YWwnPzogbnVtYmVyO1xufT4+IHtcbiAgY29uc3QgcmIgPSBuZXcgUmVxdWVzdEJ1aWxkZXIocm9vdFVybCwgc2l0ZVdpZGdldENvbnRyb2xsZXJGaW5kQWxsLlBBVEgsICdwb3N0Jyk7XG4gIGlmIChwYXJhbXMpIHtcbiAgICByYi5xdWVyeSgnZmlsdGVyJywgcGFyYW1zLmZpbHRlciwge30pO1xuICAgIHJiLnF1ZXJ5KCdqb2luV2hlcmUnLCBwYXJhbXMuam9pbldoZXJlLCB7fSk7XG4gICAgcmIucXVlcnkoJ3NlbGVjdCcsIHBhcmFtcy5zZWxlY3QsIHt9KTtcbiAgICByYi5xdWVyeSgnZ3JvdXBCeScsIHBhcmFtcy5ncm91cEJ5LCB7fSk7XG4gICAgcmIucXVlcnkoJ3NvcnRLZXknLCBwYXJhbXMuc29ydEtleSwge30pO1xuICAgIHJiLnF1ZXJ5KCdzb3J0VmFsdWUnLCBwYXJhbXMuc29ydFZhbHVlLCB7fSk7XG4gICAgcmIuYm9keShwYXJhbXMuYm9keSwgJ2FwcGxpY2F0aW9uL2pzb24nKTtcbiAgfVxuXG4gIHJldHVybiBodHRwLnJlcXVlc3QoXG4gICAgcmIuYnVpbGQoeyByZXNwb25zZVR5cGU6ICdqc29uJywgYWNjZXB0OiAnYXBwbGljYXRpb24vanNvbicsIGNvbnRleHQgfSlcbiAgKS5waXBlKFxuICAgIGZpbHRlcigocjogYW55KTogciBpcyBIdHRwUmVzcG9uc2U8YW55PiA9PiByIGluc3RhbmNlb2YgSHR0cFJlc3BvbnNlKSxcbiAgICBtYXAoKHI6IEh0dHBSZXNwb25zZTxhbnk+KSA9PiB7XG4gICAgICByZXR1cm4gciBhcyBTdHJpY3RIdHRwUmVzcG9uc2U8e1xuICAgICAgJ2NvZGUnPzogbnVtYmVyO1xuICAgICAgJ3Blc2FuJz86IHN0cmluZztcbiAgICAgICdkYXRhJz86IEFycmF5PEFtaW1zU2l0ZVdpZGdldER0bz47XG4gICAgICAndG90YWwnPzogbnVtYmVyO1xuICAgICAgfT47XG4gICAgfSlcbiAgKTtcbn1cblxuc2l0ZVdpZGdldENvbnRyb2xsZXJGaW5kQWxsLlBBVEggPSAnL2FtaW1zL3NpdGUvc2l0ZV93aWRnZXQnO1xuIl19
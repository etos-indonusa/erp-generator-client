/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
import { HttpResponse } from '@angular/common/http';
import { filter, map } from 'rxjs/operators';
import { RequestBuilder } from '../../request-builder';
export function partAlternativeControllerFindAll(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, partAlternativeControllerFindAll.PATH, 'get');
    if (params) {
        rb.query('pageIndex', params.pageIndex, {});
        rb.query('pageSize', params.pageSize, {});
        rb.query('filter', params.filter, {});
        rb.query('sortKey', params.sortKey, {});
        rb.query('sortValue', params.sortValue, {});
        rb.query('search_field', params.search_field, {});
        rb.query('search_keyword', params.search_keyword, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
partAlternativeControllerFindAll.PATH = '/amims/part_alternative/part_alternative';
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGFydC1hbHRlcm5hdGl2ZS1jb250cm9sbGVyLWZpbmQtYWxsLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvc2RrY29yZS9zcmMvbGliL2ZuL3BhcnQtYWx0ZXJuYXRpdmUvcGFydC1hbHRlcm5hdGl2ZS1jb250cm9sbGVyLWZpbmQtYWxsLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQixvQkFBb0I7QUFDcEIsbURBQW1EO0FBRW5ELE9BQU8sRUFBMkIsWUFBWSxFQUFFLE1BQU0sc0JBQXNCLENBQUM7QUFFN0UsT0FBTyxFQUFFLE1BQU0sRUFBRSxHQUFHLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUU3QyxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0sdUJBQXVCLENBQUM7QUFzQnZELE1BQU0sVUFBVSxnQ0FBZ0MsQ0FBQyxJQUFnQixFQUFFLE9BQWUsRUFBRSxNQUFnRCxFQUFFLE9BQXFCO0lBTXpKLE1BQU0sRUFBRSxHQUFHLElBQUksY0FBYyxDQUFDLE9BQU8sRUFBRSxnQ0FBZ0MsQ0FBQyxJQUFJLEVBQUUsS0FBSyxDQUFDLENBQUM7SUFDckYsSUFBSSxNQUFNLEVBQUUsQ0FBQztRQUNYLEVBQUUsQ0FBQyxLQUFLLENBQUMsV0FBVyxFQUFFLE1BQU0sQ0FBQyxTQUFTLEVBQUUsRUFBRSxDQUFDLENBQUM7UUFDNUMsRUFBRSxDQUFDLEtBQUssQ0FBQyxVQUFVLEVBQUUsTUFBTSxDQUFDLFFBQVEsRUFBRSxFQUFFLENBQUMsQ0FBQztRQUMxQyxFQUFFLENBQUMsS0FBSyxDQUFDLFFBQVEsRUFBRSxNQUFNLENBQUMsTUFBTSxFQUFFLEVBQUUsQ0FBQyxDQUFDO1FBQ3RDLEVBQUUsQ0FBQyxLQUFLLENBQUMsU0FBUyxFQUFFLE1BQU0sQ0FBQyxPQUFPLEVBQUUsRUFBRSxDQUFDLENBQUM7UUFDeEMsRUFBRSxDQUFDLEtBQUssQ0FBQyxXQUFXLEVBQUUsTUFBTSxDQUFDLFNBQVMsRUFBRSxFQUFFLENBQUMsQ0FBQztRQUM1QyxFQUFFLENBQUMsS0FBSyxDQUFDLGNBQWMsRUFBRSxNQUFNLENBQUMsWUFBWSxFQUFFLEVBQUUsQ0FBQyxDQUFDO1FBQ2xELEVBQUUsQ0FBQyxLQUFLLENBQUMsZ0JBQWdCLEVBQUUsTUFBTSxDQUFDLGNBQWMsRUFBRSxFQUFFLENBQUMsQ0FBQztJQUN4RCxDQUFDO0lBRUQsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUNqQixFQUFFLENBQUMsS0FBSyxDQUFDLEVBQUUsWUFBWSxFQUFFLE1BQU0sRUFBRSxNQUFNLEVBQUUsa0JBQWtCLEVBQUUsT0FBTyxFQUFFLENBQUMsQ0FDeEUsQ0FBQyxJQUFJLENBQ0osTUFBTSxDQUFDLENBQUMsQ0FBTSxFQUEwQixFQUFFLENBQUMsQ0FBQyxZQUFZLFlBQVksQ0FBQyxFQUNyRSxHQUFHLENBQUMsQ0FBQyxDQUFvQixFQUFFLEVBQUU7UUFDM0IsT0FBTyxDQUtMLENBQUM7SUFDTCxDQUFDLENBQUMsQ0FDSCxDQUFDO0FBQ0osQ0FBQztBQUVELGdDQUFnQyxDQUFDLElBQUksR0FBRywwQ0FBMEMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qIHRzbGludDpkaXNhYmxlICovXG4vKiBlc2xpbnQtZGlzYWJsZSAqL1xuLyogQ29kZSBnZW5lcmF0ZWQgYnkgbmctb3BlbmFwaS1nZW4gRE8gTk9UIEVESVQuICovXG5cbmltcG9ydCB7IEh0dHBDbGllbnQsIEh0dHBDb250ZXh0LCBIdHRwUmVzcG9uc2UgfSBmcm9tICdAYW5ndWxhci9jb21tb24vaHR0cCc7XG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBmaWx0ZXIsIG1hcCB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcbmltcG9ydCB7IFN0cmljdEh0dHBSZXNwb25zZSB9IGZyb20gJy4uLy4uL3N0cmljdC1odHRwLXJlc3BvbnNlJztcbmltcG9ydCB7IFJlcXVlc3RCdWlsZGVyIH0gZnJvbSAnLi4vLi4vcmVxdWVzdC1idWlsZGVyJztcblxuaW1wb3J0IHsgQW1pbXNQYXJ0QWx0ZXJuYXRpdmVEdG8gfSBmcm9tICcuLi8uLi9tb2RlbHMvYW1pbXMtcGFydC1hbHRlcm5hdGl2ZS1kdG8nO1xuXG5leHBvcnQgaW50ZXJmYWNlIFBhcnRBbHRlcm5hdGl2ZUNvbnRyb2xsZXJGaW5kQWxsJFBhcmFtcyB7XG4gIHBhZ2VJbmRleD86IG51bWJlcjtcbiAgcGFnZVNpemU/OiBudW1iZXI7XG5cbi8qKlxuICogSlNPTi5zdHJpbmdpZnkoe30pXG4gKi9cbiAgZmlsdGVyPzogc3RyaW5nO1xuICBzb3J0S2V5Pzogc3RyaW5nO1xuICBzb3J0VmFsdWU/OiAnYXNjJyB8ICdkZXNjJztcblxuLyoqXG4gKiBBcnJheSBvZiBzZWFyY2hhYmxlIGZpZWxkc1xuICovXG4gIHNlYXJjaF9maWVsZD86IEFycmF5PHN0cmluZz47XG4gIHNlYXJjaF9rZXl3b3JkPzogc3RyaW5nO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcGFydEFsdGVybmF0aXZlQ29udHJvbGxlckZpbmRBbGwoaHR0cDogSHR0cENsaWVudCwgcm9vdFVybDogc3RyaW5nLCBwYXJhbXM/OiBQYXJ0QWx0ZXJuYXRpdmVDb250cm9sbGVyRmluZEFsbCRQYXJhbXMsIGNvbnRleHQ/OiBIdHRwQ29udGV4dCk6IE9ic2VydmFibGU8U3RyaWN0SHR0cFJlc3BvbnNlPHtcbidjb2RlJz86IG51bWJlcjtcbidwZXNhbic/OiBzdHJpbmc7XG4nZGF0YSc/OiBBcnJheTxBbWltc1BhcnRBbHRlcm5hdGl2ZUR0bz47XG4ndG90YWwnPzogbnVtYmVyO1xufT4+IHtcbiAgY29uc3QgcmIgPSBuZXcgUmVxdWVzdEJ1aWxkZXIocm9vdFVybCwgcGFydEFsdGVybmF0aXZlQ29udHJvbGxlckZpbmRBbGwuUEFUSCwgJ2dldCcpO1xuICBpZiAocGFyYW1zKSB7XG4gICAgcmIucXVlcnkoJ3BhZ2VJbmRleCcsIHBhcmFtcy5wYWdlSW5kZXgsIHt9KTtcbiAgICByYi5xdWVyeSgncGFnZVNpemUnLCBwYXJhbXMucGFnZVNpemUsIHt9KTtcbiAgICByYi5xdWVyeSgnZmlsdGVyJywgcGFyYW1zLmZpbHRlciwge30pO1xuICAgIHJiLnF1ZXJ5KCdzb3J0S2V5JywgcGFyYW1zLnNvcnRLZXksIHt9KTtcbiAgICByYi5xdWVyeSgnc29ydFZhbHVlJywgcGFyYW1zLnNvcnRWYWx1ZSwge30pO1xuICAgIHJiLnF1ZXJ5KCdzZWFyY2hfZmllbGQnLCBwYXJhbXMuc2VhcmNoX2ZpZWxkLCB7fSk7XG4gICAgcmIucXVlcnkoJ3NlYXJjaF9rZXl3b3JkJywgcGFyYW1zLnNlYXJjaF9rZXl3b3JkLCB7fSk7XG4gIH1cblxuICByZXR1cm4gaHR0cC5yZXF1ZXN0KFxuICAgIHJiLmJ1aWxkKHsgcmVzcG9uc2VUeXBlOiAnanNvbicsIGFjY2VwdDogJ2FwcGxpY2F0aW9uL2pzb24nLCBjb250ZXh0IH0pXG4gICkucGlwZShcbiAgICBmaWx0ZXIoKHI6IGFueSk6IHIgaXMgSHR0cFJlc3BvbnNlPGFueT4gPT4gciBpbnN0YW5jZW9mIEh0dHBSZXNwb25zZSksXG4gICAgbWFwKChyOiBIdHRwUmVzcG9uc2U8YW55PikgPT4ge1xuICAgICAgcmV0dXJuIHIgYXMgU3RyaWN0SHR0cFJlc3BvbnNlPHtcbiAgICAgICdjb2RlJz86IG51bWJlcjtcbiAgICAgICdwZXNhbic/OiBzdHJpbmc7XG4gICAgICAnZGF0YSc/OiBBcnJheTxBbWltc1BhcnRBbHRlcm5hdGl2ZUR0bz47XG4gICAgICAndG90YWwnPzogbnVtYmVyO1xuICAgICAgfT47XG4gICAgfSlcbiAgKTtcbn1cblxucGFydEFsdGVybmF0aXZlQ29udHJvbGxlckZpbmRBbGwuUEFUSCA9ICcvYW1pbXMvcGFydF9hbHRlcm5hdGl2ZS9wYXJ0X2FsdGVybmF0aXZlJztcbiJdfQ==
/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
import { HttpResponse } from '@angular/common/http';
import { filter, map } from 'rxjs/operators';
import { RequestBuilder } from '../../request-builder';
export function partidControllerFindAll(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, partidControllerFindAll.PATH, 'get');
    if (params) {
        rb.query('pageIndex', params.pageIndex, {});
        rb.query('pageSize', params.pageSize, {});
        rb.query('filter', params.filter, {});
        rb.query('sortKey', params.sortKey, {});
        rb.query('sortValue', params.sortValue, {});
        rb.query('search_field', params.search_field, {});
        rb.query('search_keyword', params.search_keyword, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
partidControllerFindAll.PATH = '/amims/partid/partid';
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGFydGlkLWNvbnRyb2xsZXItZmluZC1hbGwuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9zZGtjb3JlL3NyYy9saWIvZm4vcGFydGlkL3BhcnRpZC1jb250cm9sbGVyLWZpbmQtYWxsLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQixvQkFBb0I7QUFDcEIsbURBQW1EO0FBRW5ELE9BQU8sRUFBMkIsWUFBWSxFQUFFLE1BQU0sc0JBQXNCLENBQUM7QUFFN0UsT0FBTyxFQUFFLE1BQU0sRUFBRSxHQUFHLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUU3QyxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0sdUJBQXVCLENBQUM7QUFzQnZELE1BQU0sVUFBVSx1QkFBdUIsQ0FBQyxJQUFnQixFQUFFLE9BQWUsRUFBRSxNQUF1QyxFQUFFLE9BQXFCO0lBTXZJLE1BQU0sRUFBRSxHQUFHLElBQUksY0FBYyxDQUFDLE9BQU8sRUFBRSx1QkFBdUIsQ0FBQyxJQUFJLEVBQUUsS0FBSyxDQUFDLENBQUM7SUFDNUUsSUFBSSxNQUFNLEVBQUUsQ0FBQztRQUNYLEVBQUUsQ0FBQyxLQUFLLENBQUMsV0FBVyxFQUFFLE1BQU0sQ0FBQyxTQUFTLEVBQUUsRUFBRSxDQUFDLENBQUM7UUFDNUMsRUFBRSxDQUFDLEtBQUssQ0FBQyxVQUFVLEVBQUUsTUFBTSxDQUFDLFFBQVEsRUFBRSxFQUFFLENBQUMsQ0FBQztRQUMxQyxFQUFFLENBQUMsS0FBSyxDQUFDLFFBQVEsRUFBRSxNQUFNLENBQUMsTUFBTSxFQUFFLEVBQUUsQ0FBQyxDQUFDO1FBQ3RDLEVBQUUsQ0FBQyxLQUFLLENBQUMsU0FBUyxFQUFFLE1BQU0sQ0FBQyxPQUFPLEVBQUUsRUFBRSxDQUFDLENBQUM7UUFDeEMsRUFBRSxDQUFDLEtBQUssQ0FBQyxXQUFXLEVBQUUsTUFBTSxDQUFDLFNBQVMsRUFBRSxFQUFFLENBQUMsQ0FBQztRQUM1QyxFQUFFLENBQUMsS0FBSyxDQUFDLGNBQWMsRUFBRSxNQUFNLENBQUMsWUFBWSxFQUFFLEVBQUUsQ0FBQyxDQUFDO1FBQ2xELEVBQUUsQ0FBQyxLQUFLLENBQUMsZ0JBQWdCLEVBQUUsTUFBTSxDQUFDLGNBQWMsRUFBRSxFQUFFLENBQUMsQ0FBQztJQUN4RCxDQUFDO0lBRUQsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUNqQixFQUFFLENBQUMsS0FBSyxDQUFDLEVBQUUsWUFBWSxFQUFFLE1BQU0sRUFBRSxNQUFNLEVBQUUsa0JBQWtCLEVBQUUsT0FBTyxFQUFFLENBQUMsQ0FDeEUsQ0FBQyxJQUFJLENBQ0osTUFBTSxDQUFDLENBQUMsQ0FBTSxFQUEwQixFQUFFLENBQUMsQ0FBQyxZQUFZLFlBQVksQ0FBQyxFQUNyRSxHQUFHLENBQUMsQ0FBQyxDQUFvQixFQUFFLEVBQUU7UUFDM0IsT0FBTyxDQUtMLENBQUM7SUFDTCxDQUFDLENBQUMsQ0FDSCxDQUFDO0FBQ0osQ0FBQztBQUVELHVCQUF1QixDQUFDLElBQUksR0FBRyxzQkFBc0IsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qIHRzbGludDpkaXNhYmxlICovXG4vKiBlc2xpbnQtZGlzYWJsZSAqL1xuLyogQ29kZSBnZW5lcmF0ZWQgYnkgbmctb3BlbmFwaS1nZW4gRE8gTk9UIEVESVQuICovXG5cbmltcG9ydCB7IEh0dHBDbGllbnQsIEh0dHBDb250ZXh0LCBIdHRwUmVzcG9uc2UgfSBmcm9tICdAYW5ndWxhci9jb21tb24vaHR0cCc7XG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBmaWx0ZXIsIG1hcCB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcbmltcG9ydCB7IFN0cmljdEh0dHBSZXNwb25zZSB9IGZyb20gJy4uLy4uL3N0cmljdC1odHRwLXJlc3BvbnNlJztcbmltcG9ydCB7IFJlcXVlc3RCdWlsZGVyIH0gZnJvbSAnLi4vLi4vcmVxdWVzdC1idWlsZGVyJztcblxuaW1wb3J0IHsgQW1pbXNQYXJ0aWREdG8gfSBmcm9tICcuLi8uLi9tb2RlbHMvYW1pbXMtcGFydGlkLWR0byc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgUGFydGlkQ29udHJvbGxlckZpbmRBbGwkUGFyYW1zIHtcbiAgcGFnZUluZGV4PzogbnVtYmVyO1xuICBwYWdlU2l6ZT86IG51bWJlcjtcblxuLyoqXG4gKiBKU09OLnN0cmluZ2lmeSh7fSlcbiAqL1xuICBmaWx0ZXI/OiBzdHJpbmc7XG4gIHNvcnRLZXk/OiBzdHJpbmc7XG4gIHNvcnRWYWx1ZT86ICdhc2MnIHwgJ2Rlc2MnO1xuXG4vKipcbiAqIEFycmF5IG9mIHNlYXJjaGFibGUgZmllbGRzXG4gKi9cbiAgc2VhcmNoX2ZpZWxkPzogQXJyYXk8c3RyaW5nPjtcbiAgc2VhcmNoX2tleXdvcmQ/OiBzdHJpbmc7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBwYXJ0aWRDb250cm9sbGVyRmluZEFsbChodHRwOiBIdHRwQ2xpZW50LCByb290VXJsOiBzdHJpbmcsIHBhcmFtcz86IFBhcnRpZENvbnRyb2xsZXJGaW5kQWxsJFBhcmFtcywgY29udGV4dD86IEh0dHBDb250ZXh0KTogT2JzZXJ2YWJsZTxTdHJpY3RIdHRwUmVzcG9uc2U8e1xuJ2NvZGUnPzogbnVtYmVyO1xuJ3Blc2FuJz86IHN0cmluZztcbidkYXRhJz86IEFycmF5PEFtaW1zUGFydGlkRHRvPjtcbid0b3RhbCc/OiBudW1iZXI7XG59Pj4ge1xuICBjb25zdCByYiA9IG5ldyBSZXF1ZXN0QnVpbGRlcihyb290VXJsLCBwYXJ0aWRDb250cm9sbGVyRmluZEFsbC5QQVRILCAnZ2V0Jyk7XG4gIGlmIChwYXJhbXMpIHtcbiAgICByYi5xdWVyeSgncGFnZUluZGV4JywgcGFyYW1zLnBhZ2VJbmRleCwge30pO1xuICAgIHJiLnF1ZXJ5KCdwYWdlU2l6ZScsIHBhcmFtcy5wYWdlU2l6ZSwge30pO1xuICAgIHJiLnF1ZXJ5KCdmaWx0ZXInLCBwYXJhbXMuZmlsdGVyLCB7fSk7XG4gICAgcmIucXVlcnkoJ3NvcnRLZXknLCBwYXJhbXMuc29ydEtleSwge30pO1xuICAgIHJiLnF1ZXJ5KCdzb3J0VmFsdWUnLCBwYXJhbXMuc29ydFZhbHVlLCB7fSk7XG4gICAgcmIucXVlcnkoJ3NlYXJjaF9maWVsZCcsIHBhcmFtcy5zZWFyY2hfZmllbGQsIHt9KTtcbiAgICByYi5xdWVyeSgnc2VhcmNoX2tleXdvcmQnLCBwYXJhbXMuc2VhcmNoX2tleXdvcmQsIHt9KTtcbiAgfVxuXG4gIHJldHVybiBodHRwLnJlcXVlc3QoXG4gICAgcmIuYnVpbGQoeyByZXNwb25zZVR5cGU6ICdqc29uJywgYWNjZXB0OiAnYXBwbGljYXRpb24vanNvbicsIGNvbnRleHQgfSlcbiAgKS5waXBlKFxuICAgIGZpbHRlcigocjogYW55KTogciBpcyBIdHRwUmVzcG9uc2U8YW55PiA9PiByIGluc3RhbmNlb2YgSHR0cFJlc3BvbnNlKSxcbiAgICBtYXAoKHI6IEh0dHBSZXNwb25zZTxhbnk+KSA9PiB7XG4gICAgICByZXR1cm4gciBhcyBTdHJpY3RIdHRwUmVzcG9uc2U8e1xuICAgICAgJ2NvZGUnPzogbnVtYmVyO1xuICAgICAgJ3Blc2FuJz86IHN0cmluZztcbiAgICAgICdkYXRhJz86IEFycmF5PEFtaW1zUGFydGlkRHRvPjtcbiAgICAgICd0b3RhbCc/OiBudW1iZXI7XG4gICAgICB9PjtcbiAgICB9KVxuICApO1xufVxuXG5wYXJ0aWRDb250cm9sbGVyRmluZEFsbC5QQVRIID0gJy9hbWltcy9wYXJ0aWQvcGFydGlkJztcbiJdfQ==
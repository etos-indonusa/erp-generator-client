/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
import { HttpResponse } from '@angular/common/http';
import { filter, map } from 'rxjs/operators';
import { RequestBuilder } from '../../request-builder';
export function techDefectControllerFindAll(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, techDefectControllerFindAll.PATH, 'get');
    if (params) {
        rb.query('pageIndex', params.pageIndex, {});
        rb.query('pageSize', params.pageSize, {});
        rb.query('filter', params.filter, {});
        rb.query('sortKey', params.sortKey, {});
        rb.query('sortValue', params.sortValue, {});
        rb.query('search_field', params.search_field, {});
        rb.query('search_keyword', params.search_keyword, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
techDefectControllerFindAll.PATH = '/amims/tech_defect/tech_defect';
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGVjaC1kZWZlY3QtY29udHJvbGxlci1maW5kLWFsbC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL3Nka2NvcmUvc3JjL2xpYi9mbi90ZWNoLWRlZmVjdC90ZWNoLWRlZmVjdC1jb250cm9sbGVyLWZpbmQtYWxsLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQixvQkFBb0I7QUFDcEIsbURBQW1EO0FBRW5ELE9BQU8sRUFBMkIsWUFBWSxFQUFFLE1BQU0sc0JBQXNCLENBQUM7QUFFN0UsT0FBTyxFQUFFLE1BQU0sRUFBRSxHQUFHLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUU3QyxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0sdUJBQXVCLENBQUM7QUFzQnZELE1BQU0sVUFBVSwyQkFBMkIsQ0FBQyxJQUFnQixFQUFFLE9BQWUsRUFBRSxNQUEyQyxFQUFFLE9BQXFCO0lBTS9JLE1BQU0sRUFBRSxHQUFHLElBQUksY0FBYyxDQUFDLE9BQU8sRUFBRSwyQkFBMkIsQ0FBQyxJQUFJLEVBQUUsS0FBSyxDQUFDLENBQUM7SUFDaEYsSUFBSSxNQUFNLEVBQUUsQ0FBQztRQUNYLEVBQUUsQ0FBQyxLQUFLLENBQUMsV0FBVyxFQUFFLE1BQU0sQ0FBQyxTQUFTLEVBQUUsRUFBRSxDQUFDLENBQUM7UUFDNUMsRUFBRSxDQUFDLEtBQUssQ0FBQyxVQUFVLEVBQUUsTUFBTSxDQUFDLFFBQVEsRUFBRSxFQUFFLENBQUMsQ0FBQztRQUMxQyxFQUFFLENBQUMsS0FBSyxDQUFDLFFBQVEsRUFBRSxNQUFNLENBQUMsTUFBTSxFQUFFLEVBQUUsQ0FBQyxDQUFDO1FBQ3RDLEVBQUUsQ0FBQyxLQUFLLENBQUMsU0FBUyxFQUFFLE1BQU0sQ0FBQyxPQUFPLEVBQUUsRUFBRSxDQUFDLENBQUM7UUFDeEMsRUFBRSxDQUFDLEtBQUssQ0FBQyxXQUFXLEVBQUUsTUFBTSxDQUFDLFNBQVMsRUFBRSxFQUFFLENBQUMsQ0FBQztRQUM1QyxFQUFFLENBQUMsS0FBSyxDQUFDLGNBQWMsRUFBRSxNQUFNLENBQUMsWUFBWSxFQUFFLEVBQUUsQ0FBQyxDQUFDO1FBQ2xELEVBQUUsQ0FBQyxLQUFLLENBQUMsZ0JBQWdCLEVBQUUsTUFBTSxDQUFDLGNBQWMsRUFBRSxFQUFFLENBQUMsQ0FBQztJQUN4RCxDQUFDO0lBRUQsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUNqQixFQUFFLENBQUMsS0FBSyxDQUFDLEVBQUUsWUFBWSxFQUFFLE1BQU0sRUFBRSxNQUFNLEVBQUUsa0JBQWtCLEVBQUUsT0FBTyxFQUFFLENBQUMsQ0FDeEUsQ0FBQyxJQUFJLENBQ0osTUFBTSxDQUFDLENBQUMsQ0FBTSxFQUEwQixFQUFFLENBQUMsQ0FBQyxZQUFZLFlBQVksQ0FBQyxFQUNyRSxHQUFHLENBQUMsQ0FBQyxDQUFvQixFQUFFLEVBQUU7UUFDM0IsT0FBTyxDQUtMLENBQUM7SUFDTCxDQUFDLENBQUMsQ0FDSCxDQUFDO0FBQ0osQ0FBQztBQUVELDJCQUEyQixDQUFDLElBQUksR0FBRyxnQ0FBZ0MsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qIHRzbGludDpkaXNhYmxlICovXG4vKiBlc2xpbnQtZGlzYWJsZSAqL1xuLyogQ29kZSBnZW5lcmF0ZWQgYnkgbmctb3BlbmFwaS1nZW4gRE8gTk9UIEVESVQuICovXG5cbmltcG9ydCB7IEh0dHBDbGllbnQsIEh0dHBDb250ZXh0LCBIdHRwUmVzcG9uc2UgfSBmcm9tICdAYW5ndWxhci9jb21tb24vaHR0cCc7XG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBmaWx0ZXIsIG1hcCB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcbmltcG9ydCB7IFN0cmljdEh0dHBSZXNwb25zZSB9IGZyb20gJy4uLy4uL3N0cmljdC1odHRwLXJlc3BvbnNlJztcbmltcG9ydCB7IFJlcXVlc3RCdWlsZGVyIH0gZnJvbSAnLi4vLi4vcmVxdWVzdC1idWlsZGVyJztcblxuaW1wb3J0IHsgQW1pbXNUZWNoRGVmZWN0RHRvIH0gZnJvbSAnLi4vLi4vbW9kZWxzL2FtaW1zLXRlY2gtZGVmZWN0LWR0byc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgVGVjaERlZmVjdENvbnRyb2xsZXJGaW5kQWxsJFBhcmFtcyB7XG4gIHBhZ2VJbmRleD86IG51bWJlcjtcbiAgcGFnZVNpemU/OiBudW1iZXI7XG5cbi8qKlxuICogSlNPTi5zdHJpbmdpZnkoe30pXG4gKi9cbiAgZmlsdGVyPzogc3RyaW5nO1xuICBzb3J0S2V5Pzogc3RyaW5nO1xuICBzb3J0VmFsdWU/OiAnYXNjJyB8ICdkZXNjJztcblxuLyoqXG4gKiBBcnJheSBvZiBzZWFyY2hhYmxlIGZpZWxkc1xuICovXG4gIHNlYXJjaF9maWVsZD86IEFycmF5PHN0cmluZz47XG4gIHNlYXJjaF9rZXl3b3JkPzogc3RyaW5nO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gdGVjaERlZmVjdENvbnRyb2xsZXJGaW5kQWxsKGh0dHA6IEh0dHBDbGllbnQsIHJvb3RVcmw6IHN0cmluZywgcGFyYW1zPzogVGVjaERlZmVjdENvbnRyb2xsZXJGaW5kQWxsJFBhcmFtcywgY29udGV4dD86IEh0dHBDb250ZXh0KTogT2JzZXJ2YWJsZTxTdHJpY3RIdHRwUmVzcG9uc2U8e1xuJ2NvZGUnPzogbnVtYmVyO1xuJ3Blc2FuJz86IHN0cmluZztcbidkYXRhJz86IEFycmF5PEFtaW1zVGVjaERlZmVjdER0bz47XG4ndG90YWwnPzogbnVtYmVyO1xufT4+IHtcbiAgY29uc3QgcmIgPSBuZXcgUmVxdWVzdEJ1aWxkZXIocm9vdFVybCwgdGVjaERlZmVjdENvbnRyb2xsZXJGaW5kQWxsLlBBVEgsICdnZXQnKTtcbiAgaWYgKHBhcmFtcykge1xuICAgIHJiLnF1ZXJ5KCdwYWdlSW5kZXgnLCBwYXJhbXMucGFnZUluZGV4LCB7fSk7XG4gICAgcmIucXVlcnkoJ3BhZ2VTaXplJywgcGFyYW1zLnBhZ2VTaXplLCB7fSk7XG4gICAgcmIucXVlcnkoJ2ZpbHRlcicsIHBhcmFtcy5maWx0ZXIsIHt9KTtcbiAgICByYi5xdWVyeSgnc29ydEtleScsIHBhcmFtcy5zb3J0S2V5LCB7fSk7XG4gICAgcmIucXVlcnkoJ3NvcnRWYWx1ZScsIHBhcmFtcy5zb3J0VmFsdWUsIHt9KTtcbiAgICByYi5xdWVyeSgnc2VhcmNoX2ZpZWxkJywgcGFyYW1zLnNlYXJjaF9maWVsZCwge30pO1xuICAgIHJiLnF1ZXJ5KCdzZWFyY2hfa2V5d29yZCcsIHBhcmFtcy5zZWFyY2hfa2V5d29yZCwge30pO1xuICB9XG5cbiAgcmV0dXJuIGh0dHAucmVxdWVzdChcbiAgICByYi5idWlsZCh7IHJlc3BvbnNlVHlwZTogJ2pzb24nLCBhY2NlcHQ6ICdhcHBsaWNhdGlvbi9qc29uJywgY29udGV4dCB9KVxuICApLnBpcGUoXG4gICAgZmlsdGVyKChyOiBhbnkpOiByIGlzIEh0dHBSZXNwb25zZTxhbnk+ID0+IHIgaW5zdGFuY2VvZiBIdHRwUmVzcG9uc2UpLFxuICAgIG1hcCgocjogSHR0cFJlc3BvbnNlPGFueT4pID0+IHtcbiAgICAgIHJldHVybiByIGFzIFN0cmljdEh0dHBSZXNwb25zZTx7XG4gICAgICAnY29kZSc/OiBudW1iZXI7XG4gICAgICAncGVzYW4nPzogc3RyaW5nO1xuICAgICAgJ2RhdGEnPzogQXJyYXk8QW1pbXNUZWNoRGVmZWN0RHRvPjtcbiAgICAgICd0b3RhbCc/OiBudW1iZXI7XG4gICAgICB9PjtcbiAgICB9KVxuICApO1xufVxuXG50ZWNoRGVmZWN0Q29udHJvbGxlckZpbmRBbGwuUEFUSCA9ICcvYW1pbXMvdGVjaF9kZWZlY3QvdGVjaF9kZWZlY3QnO1xuIl19
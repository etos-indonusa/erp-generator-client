/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
import { HttpResponse } from '@angular/common/http';
import { filter, map } from 'rxjs/operators';
import { RequestBuilder } from '../../request-builder';
export function contractControllerFindAll(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, contractControllerFindAll.PATH, 'get');
    if (params) {
        rb.query('pageIndex', params.pageIndex, {});
        rb.query('pageSize', params.pageSize, {});
        rb.query('filter', params.filter, {});
        rb.query('sortKey', params.sortKey, {});
        rb.query('sortValue', params.sortValue, {});
        rb.query('search_field', params.search_field, {});
        rb.query('search_keyword', params.search_keyword, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
contractControllerFindAll.PATH = '/pelanggan/contract/contract';
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29udHJhY3QtY29udHJvbGxlci1maW5kLWFsbC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL3Nka2NvcmUvc3JjL2xpYi9mbi9jb250cmFjdC9jb250cmFjdC1jb250cm9sbGVyLWZpbmQtYWxsLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQjtBQUNwQixvQkFBb0I7QUFDcEIsbURBQW1EO0FBRW5ELE9BQU8sRUFBMkIsWUFBWSxFQUFFLE1BQU0sc0JBQXNCLENBQUM7QUFFN0UsT0FBTyxFQUFFLE1BQU0sRUFBRSxHQUFHLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUU3QyxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0sdUJBQXVCLENBQUM7QUFzQnZELE1BQU0sVUFBVSx5QkFBeUIsQ0FBQyxJQUFnQixFQUFFLE9BQWUsRUFBRSxNQUF5QyxFQUFFLE9BQXFCO0lBTTNJLE1BQU0sRUFBRSxHQUFHLElBQUksY0FBYyxDQUFDLE9BQU8sRUFBRSx5QkFBeUIsQ0FBQyxJQUFJLEVBQUUsS0FBSyxDQUFDLENBQUM7SUFDOUUsSUFBSSxNQUFNLEVBQUUsQ0FBQztRQUNYLEVBQUUsQ0FBQyxLQUFLLENBQUMsV0FBVyxFQUFFLE1BQU0sQ0FBQyxTQUFTLEVBQUUsRUFBRSxDQUFDLENBQUM7UUFDNUMsRUFBRSxDQUFDLEtBQUssQ0FBQyxVQUFVLEVBQUUsTUFBTSxDQUFDLFFBQVEsRUFBRSxFQUFFLENBQUMsQ0FBQztRQUMxQyxFQUFFLENBQUMsS0FBSyxDQUFDLFFBQVEsRUFBRSxNQUFNLENBQUMsTUFBTSxFQUFFLEVBQUUsQ0FBQyxDQUFDO1FBQ3RDLEVBQUUsQ0FBQyxLQUFLLENBQUMsU0FBUyxFQUFFLE1BQU0sQ0FBQyxPQUFPLEVBQUUsRUFBRSxDQUFDLENBQUM7UUFDeEMsRUFBRSxDQUFDLEtBQUssQ0FBQyxXQUFXLEVBQUUsTUFBTSxDQUFDLFNBQVMsRUFBRSxFQUFFLENBQUMsQ0FBQztRQUM1QyxFQUFFLENBQUMsS0FBSyxDQUFDLGNBQWMsRUFBRSxNQUFNLENBQUMsWUFBWSxFQUFFLEVBQUUsQ0FBQyxDQUFDO1FBQ2xELEVBQUUsQ0FBQyxLQUFLLENBQUMsZ0JBQWdCLEVBQUUsTUFBTSxDQUFDLGNBQWMsRUFBRSxFQUFFLENBQUMsQ0FBQztJQUN4RCxDQUFDO0lBRUQsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUNqQixFQUFFLENBQUMsS0FBSyxDQUFDLEVBQUUsWUFBWSxFQUFFLE1BQU0sRUFBRSxNQUFNLEVBQUUsa0JBQWtCLEVBQUUsT0FBTyxFQUFFLENBQUMsQ0FDeEUsQ0FBQyxJQUFJLENBQ0osTUFBTSxDQUFDLENBQUMsQ0FBTSxFQUEwQixFQUFFLENBQUMsQ0FBQyxZQUFZLFlBQVksQ0FBQyxFQUNyRSxHQUFHLENBQUMsQ0FBQyxDQUFvQixFQUFFLEVBQUU7UUFDM0IsT0FBTyxDQUtMLENBQUM7SUFDTCxDQUFDLENBQUMsQ0FDSCxDQUFDO0FBQ0osQ0FBQztBQUVELHlCQUF5QixDQUFDLElBQUksR0FBRyw4QkFBOEIsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qIHRzbGludDpkaXNhYmxlICovXG4vKiBlc2xpbnQtZGlzYWJsZSAqL1xuLyogQ29kZSBnZW5lcmF0ZWQgYnkgbmctb3BlbmFwaS1nZW4gRE8gTk9UIEVESVQuICovXG5cbmltcG9ydCB7IEh0dHBDbGllbnQsIEh0dHBDb250ZXh0LCBIdHRwUmVzcG9uc2UgfSBmcm9tICdAYW5ndWxhci9jb21tb24vaHR0cCc7XG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBmaWx0ZXIsIG1hcCB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcbmltcG9ydCB7IFN0cmljdEh0dHBSZXNwb25zZSB9IGZyb20gJy4uLy4uL3N0cmljdC1odHRwLXJlc3BvbnNlJztcbmltcG9ydCB7IFJlcXVlc3RCdWlsZGVyIH0gZnJvbSAnLi4vLi4vcmVxdWVzdC1idWlsZGVyJztcblxuaW1wb3J0IHsgUGVsYW5nZ2FuQ29udHJhY3REdG8gfSBmcm9tICcuLi8uLi9tb2RlbHMvcGVsYW5nZ2FuLWNvbnRyYWN0LWR0byc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgQ29udHJhY3RDb250cm9sbGVyRmluZEFsbCRQYXJhbXMge1xuICBwYWdlSW5kZXg/OiBudW1iZXI7XG4gIHBhZ2VTaXplPzogbnVtYmVyO1xuXG4vKipcbiAqIEpTT04uc3RyaW5naWZ5KHt9KVxuICovXG4gIGZpbHRlcj86IHN0cmluZztcbiAgc29ydEtleT86IHN0cmluZztcbiAgc29ydFZhbHVlPzogJ2FzYycgfCAnZGVzYyc7XG5cbi8qKlxuICogQXJyYXkgb2Ygc2VhcmNoYWJsZSBmaWVsZHNcbiAqL1xuICBzZWFyY2hfZmllbGQ/OiBBcnJheTxzdHJpbmc+O1xuICBzZWFyY2hfa2V5d29yZD86IHN0cmluZztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNvbnRyYWN0Q29udHJvbGxlckZpbmRBbGwoaHR0cDogSHR0cENsaWVudCwgcm9vdFVybDogc3RyaW5nLCBwYXJhbXM/OiBDb250cmFjdENvbnRyb2xsZXJGaW5kQWxsJFBhcmFtcywgY29udGV4dD86IEh0dHBDb250ZXh0KTogT2JzZXJ2YWJsZTxTdHJpY3RIdHRwUmVzcG9uc2U8e1xuJ2NvZGUnPzogbnVtYmVyO1xuJ3Blc2FuJz86IHN0cmluZztcbidkYXRhJz86IEFycmF5PFBlbGFuZ2dhbkNvbnRyYWN0RHRvPjtcbid0b3RhbCc/OiBudW1iZXI7XG59Pj4ge1xuICBjb25zdCByYiA9IG5ldyBSZXF1ZXN0QnVpbGRlcihyb290VXJsLCBjb250cmFjdENvbnRyb2xsZXJGaW5kQWxsLlBBVEgsICdnZXQnKTtcbiAgaWYgKHBhcmFtcykge1xuICAgIHJiLnF1ZXJ5KCdwYWdlSW5kZXgnLCBwYXJhbXMucGFnZUluZGV4LCB7fSk7XG4gICAgcmIucXVlcnkoJ3BhZ2VTaXplJywgcGFyYW1zLnBhZ2VTaXplLCB7fSk7XG4gICAgcmIucXVlcnkoJ2ZpbHRlcicsIHBhcmFtcy5maWx0ZXIsIHt9KTtcbiAgICByYi5xdWVyeSgnc29ydEtleScsIHBhcmFtcy5zb3J0S2V5LCB7fSk7XG4gICAgcmIucXVlcnkoJ3NvcnRWYWx1ZScsIHBhcmFtcy5zb3J0VmFsdWUsIHt9KTtcbiAgICByYi5xdWVyeSgnc2VhcmNoX2ZpZWxkJywgcGFyYW1zLnNlYXJjaF9maWVsZCwge30pO1xuICAgIHJiLnF1ZXJ5KCdzZWFyY2hfa2V5d29yZCcsIHBhcmFtcy5zZWFyY2hfa2V5d29yZCwge30pO1xuICB9XG5cbiAgcmV0dXJuIGh0dHAucmVxdWVzdChcbiAgICByYi5idWlsZCh7IHJlc3BvbnNlVHlwZTogJ2pzb24nLCBhY2NlcHQ6ICdhcHBsaWNhdGlvbi9qc29uJywgY29udGV4dCB9KVxuICApLnBpcGUoXG4gICAgZmlsdGVyKChyOiBhbnkpOiByIGlzIEh0dHBSZXNwb25zZTxhbnk+ID0+IHIgaW5zdGFuY2VvZiBIdHRwUmVzcG9uc2UpLFxuICAgIG1hcCgocjogSHR0cFJlc3BvbnNlPGFueT4pID0+IHtcbiAgICAgIHJldHVybiByIGFzIFN0cmljdEh0dHBSZXNwb25zZTx7XG4gICAgICAnY29kZSc/OiBudW1iZXI7XG4gICAgICAncGVzYW4nPzogc3RyaW5nO1xuICAgICAgJ2RhdGEnPzogQXJyYXk8UGVsYW5nZ2FuQ29udHJhY3REdG8+O1xuICAgICAgJ3RvdGFsJz86IG51bWJlcjtcbiAgICAgIH0+O1xuICAgIH0pXG4gICk7XG59XG5cbmNvbnRyYWN0Q29udHJvbGxlckZpbmRBbGwuUEFUSCA9ICcvcGVsYW5nZ2FuL2NvbnRyYWN0L2NvbnRyYWN0JztcbiJdfQ==
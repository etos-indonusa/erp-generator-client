/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { contractJenisControllerCreate } from '../fn/contract-jenis/contract-jenis-controller-create';
import { ContractJenisControllerCreate$Params } from '../fn/contract-jenis/contract-jenis-controller-create';
import { contractJenisControllerFindAll } from '../fn/contract-jenis/contract-jenis-controller-find-all';
import { ContractJenisControllerFindAll$Params } from '../fn/contract-jenis/contract-jenis-controller-find-all';
import { contractJenisControllerFindOne } from '../fn/contract-jenis/contract-jenis-controller-find-one';
import { ContractJenisControllerFindOne$Params } from '../fn/contract-jenis/contract-jenis-controller-find-one';
import { contractJenisControllerRemove } from '../fn/contract-jenis/contract-jenis-controller-remove';
import { ContractJenisControllerRemove$Params } from '../fn/contract-jenis/contract-jenis-controller-remove';
import { contractJenisControllerUpdate } from '../fn/contract-jenis/contract-jenis-controller-update';
import { ContractJenisControllerUpdate$Params } from '../fn/contract-jenis/contract-jenis-controller-update';
import { PelangganContractJenisDto } from '../models/pelanggan-contract-jenis-dto';

@Injectable({ providedIn: 'root' })
export class ContractJenisService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `contractJenisControllerFindAll()` */
  static readonly ContractJenisControllerFindAllPath = '/auth/contract_jenis/contract_jenis';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `contractJenisControllerFindAll()` instead.
   *
   * This method doesn't expect any request body.
   */
  contractJenisControllerFindAll$Response(params?: ContractJenisControllerFindAll$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: Array<PelangganContractJenisDto>;
'total'?: number;
}>> {
    return contractJenisControllerFindAll(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `contractJenisControllerFindAll$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  contractJenisControllerFindAll(params?: ContractJenisControllerFindAll$Params, context?: HttpContext): Observable<{
'code'?: number;
'pesan'?: string;
'data'?: Array<PelangganContractJenisDto>;
'total'?: number;
}> {
    return this.contractJenisControllerFindAll$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: Array<PelangganContractJenisDto>;
'total'?: number;
}>): {
'code'?: number;
'pesan'?: string;
'data'?: Array<PelangganContractJenisDto>;
'total'?: number;
} => r.body)
    );
  }

  /** Path part for operation `contractJenisControllerCreate()` */
  static readonly ContractJenisControllerCreatePath = '/auth/contract_jenis/contract_jenis';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `contractJenisControllerCreate()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  contractJenisControllerCreate$Response(params: ContractJenisControllerCreate$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: PelangganContractJenisDto;
}>> {
    return contractJenisControllerCreate(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `contractJenisControllerCreate$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  contractJenisControllerCreate(params: ContractJenisControllerCreate$Params, context?: HttpContext): Observable<{
'code'?: number;
'pesan'?: string;
'data'?: PelangganContractJenisDto;
}> {
    return this.contractJenisControllerCreate$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: PelangganContractJenisDto;
}>): {
'code'?: number;
'pesan'?: string;
'data'?: PelangganContractJenisDto;
} => r.body)
    );
  }

  /** Path part for operation `contractJenisControllerFindOne()` */
  static readonly ContractJenisControllerFindOnePath = '/auth/contract_jenis/contract_jenis/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `contractJenisControllerFindOne()` instead.
   *
   * This method doesn't expect any request body.
   */
  contractJenisControllerFindOne$Response(params: ContractJenisControllerFindOne$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: PelangganContractJenisDto;
}>> {
    return contractJenisControllerFindOne(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `contractJenisControllerFindOne$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  contractJenisControllerFindOne(params: ContractJenisControllerFindOne$Params, context?: HttpContext): Observable<{
'code'?: number;
'pesan'?: string;
'data'?: PelangganContractJenisDto;
}> {
    return this.contractJenisControllerFindOne$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: PelangganContractJenisDto;
}>): {
'code'?: number;
'pesan'?: string;
'data'?: PelangganContractJenisDto;
} => r.body)
    );
  }

  /** Path part for operation `contractJenisControllerUpdate()` */
  static readonly ContractJenisControllerUpdatePath = '/auth/contract_jenis/contract_jenis/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `contractJenisControllerUpdate()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  contractJenisControllerUpdate$Response(params: ContractJenisControllerUpdate$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: PelangganContractJenisDto;
}>> {
    return contractJenisControllerUpdate(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `contractJenisControllerUpdate$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  contractJenisControllerUpdate(params: ContractJenisControllerUpdate$Params, context?: HttpContext): Observable<{
'code'?: number;
'pesan'?: string;
'data'?: PelangganContractJenisDto;
}> {
    return this.contractJenisControllerUpdate$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: PelangganContractJenisDto;
}>): {
'code'?: number;
'pesan'?: string;
'data'?: PelangganContractJenisDto;
} => r.body)
    );
  }

  /** Path part for operation `contractJenisControllerRemove()` */
  static readonly ContractJenisControllerRemovePath = '/auth/contract_jenis/contract_jenis/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `contractJenisControllerRemove()` instead.
   *
   * This method doesn't expect any request body.
   */
  contractJenisControllerRemove$Response(params: ContractJenisControllerRemove$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: PelangganContractJenisDto;
}>> {
    return contractJenisControllerRemove(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `contractJenisControllerRemove$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  contractJenisControllerRemove(params: ContractJenisControllerRemove$Params, context?: HttpContext): Observable<{
'code'?: number;
'pesan'?: string;
'data'?: PelangganContractJenisDto;
}> {
    return this.contractJenisControllerRemove$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: PelangganContractJenisDto;
}>): {
'code'?: number;
'pesan'?: string;
'data'?: PelangganContractJenisDto;
} => r.body)
    );
  }

}

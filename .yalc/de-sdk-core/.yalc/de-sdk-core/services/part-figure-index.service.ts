/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { AmimsPartFigureIndexDto } from '../models/amims-part-figure-index-dto';
import { partFigureIndexControllerCreate } from '../fn/part-figure-index/part-figure-index-controller-create';
import { PartFigureIndexControllerCreate$Params } from '../fn/part-figure-index/part-figure-index-controller-create';
import { partFigureIndexControllerFindAll } from '../fn/part-figure-index/part-figure-index-controller-find-all';
import { PartFigureIndexControllerFindAll$Params } from '../fn/part-figure-index/part-figure-index-controller-find-all';
import { partFigureIndexControllerFindOne } from '../fn/part-figure-index/part-figure-index-controller-find-one';
import { PartFigureIndexControllerFindOne$Params } from '../fn/part-figure-index/part-figure-index-controller-find-one';
import { partFigureIndexControllerRemove } from '../fn/part-figure-index/part-figure-index-controller-remove';
import { PartFigureIndexControllerRemove$Params } from '../fn/part-figure-index/part-figure-index-controller-remove';
import { partFigureIndexControllerUpdate } from '../fn/part-figure-index/part-figure-index-controller-update';
import { PartFigureIndexControllerUpdate$Params } from '../fn/part-figure-index/part-figure-index-controller-update';

@Injectable({ providedIn: 'root' })
export class PartFigureIndexService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `partFigureIndexControllerFindAll()` */
  static readonly PartFigureIndexControllerFindAllPath = '/amims/part_figure_index/part_figure_index';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `partFigureIndexControllerFindAll()` instead.
   *
   * This method doesn't expect any request body.
   */
  partFigureIndexControllerFindAll$Response(params?: PartFigureIndexControllerFindAll$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: Array<AmimsPartFigureIndexDto>;
'total'?: number;
}>> {
    return partFigureIndexControllerFindAll(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `partFigureIndexControllerFindAll$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  partFigureIndexControllerFindAll(params?: PartFigureIndexControllerFindAll$Params, context?: HttpContext): Observable<{
'code'?: number;
'pesan'?: string;
'data'?: Array<AmimsPartFigureIndexDto>;
'total'?: number;
}> {
    return this.partFigureIndexControllerFindAll$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: Array<AmimsPartFigureIndexDto>;
'total'?: number;
}>): {
'code'?: number;
'pesan'?: string;
'data'?: Array<AmimsPartFigureIndexDto>;
'total'?: number;
} => r.body)
    );
  }

  /** Path part for operation `partFigureIndexControllerCreate()` */
  static readonly PartFigureIndexControllerCreatePath = '/amims/part_figure_index/part_figure_index';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `partFigureIndexControllerCreate()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  partFigureIndexControllerCreate$Response(params: PartFigureIndexControllerCreate$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsPartFigureIndexDto;
}>> {
    return partFigureIndexControllerCreate(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `partFigureIndexControllerCreate$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  partFigureIndexControllerCreate(params: PartFigureIndexControllerCreate$Params, context?: HttpContext): Observable<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsPartFigureIndexDto;
}> {
    return this.partFigureIndexControllerCreate$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsPartFigureIndexDto;
}>): {
'code'?: number;
'pesan'?: string;
'data'?: AmimsPartFigureIndexDto;
} => r.body)
    );
  }

  /** Path part for operation `partFigureIndexControllerFindOne()` */
  static readonly PartFigureIndexControllerFindOnePath = '/amims/part_figure_index/part_figure_index/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `partFigureIndexControllerFindOne()` instead.
   *
   * This method doesn't expect any request body.
   */
  partFigureIndexControllerFindOne$Response(params: PartFigureIndexControllerFindOne$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsPartFigureIndexDto;
}>> {
    return partFigureIndexControllerFindOne(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `partFigureIndexControllerFindOne$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  partFigureIndexControllerFindOne(params: PartFigureIndexControllerFindOne$Params, context?: HttpContext): Observable<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsPartFigureIndexDto;
}> {
    return this.partFigureIndexControllerFindOne$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsPartFigureIndexDto;
}>): {
'code'?: number;
'pesan'?: string;
'data'?: AmimsPartFigureIndexDto;
} => r.body)
    );
  }

  /** Path part for operation `partFigureIndexControllerUpdate()` */
  static readonly PartFigureIndexControllerUpdatePath = '/amims/part_figure_index/part_figure_index/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `partFigureIndexControllerUpdate()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  partFigureIndexControllerUpdate$Response(params: PartFigureIndexControllerUpdate$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsPartFigureIndexDto;
}>> {
    return partFigureIndexControllerUpdate(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `partFigureIndexControllerUpdate$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  partFigureIndexControllerUpdate(params: PartFigureIndexControllerUpdate$Params, context?: HttpContext): Observable<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsPartFigureIndexDto;
}> {
    return this.partFigureIndexControllerUpdate$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsPartFigureIndexDto;
}>): {
'code'?: number;
'pesan'?: string;
'data'?: AmimsPartFigureIndexDto;
} => r.body)
    );
  }

  /** Path part for operation `partFigureIndexControllerRemove()` */
  static readonly PartFigureIndexControllerRemovePath = '/amims/part_figure_index/part_figure_index/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `partFigureIndexControllerRemove()` instead.
   *
   * This method doesn't expect any request body.
   */
  partFigureIndexControllerRemove$Response(params: PartFigureIndexControllerRemove$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsPartFigureIndexDto;
}>> {
    return partFigureIndexControllerRemove(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `partFigureIndexControllerRemove$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  partFigureIndexControllerRemove(params: PartFigureIndexControllerRemove$Params, context?: HttpContext): Observable<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsPartFigureIndexDto;
}> {
    return this.partFigureIndexControllerRemove$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsPartFigureIndexDto;
}>): {
'code'?: number;
'pesan'?: string;
'data'?: AmimsPartFigureIndexDto;
} => r.body)
    );
  }

}

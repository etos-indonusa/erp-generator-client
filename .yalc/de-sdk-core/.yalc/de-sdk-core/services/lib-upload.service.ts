/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { AmimsLibUploadDto } from '../models/amims-lib-upload-dto';
import { libUploadControllerCreate } from '../fn/lib-upload/lib-upload-controller-create';
import { LibUploadControllerCreate$Params } from '../fn/lib-upload/lib-upload-controller-create';
import { libUploadControllerFindAll } from '../fn/lib-upload/lib-upload-controller-find-all';
import { LibUploadControllerFindAll$Params } from '../fn/lib-upload/lib-upload-controller-find-all';
import { libUploadControllerFindOne } from '../fn/lib-upload/lib-upload-controller-find-one';
import { LibUploadControllerFindOne$Params } from '../fn/lib-upload/lib-upload-controller-find-one';
import { libUploadControllerRemove } from '../fn/lib-upload/lib-upload-controller-remove';
import { LibUploadControllerRemove$Params } from '../fn/lib-upload/lib-upload-controller-remove';
import { libUploadControllerUpdate } from '../fn/lib-upload/lib-upload-controller-update';
import { LibUploadControllerUpdate$Params } from '../fn/lib-upload/lib-upload-controller-update';

@Injectable({ providedIn: 'root' })
export class LibUploadService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `libUploadControllerFindAll()` */
  static readonly LibUploadControllerFindAllPath = '/amims/lib_upload/lib_upload';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `libUploadControllerFindAll()` instead.
   *
   * This method doesn't expect any request body.
   */
  libUploadControllerFindAll$Response(params?: LibUploadControllerFindAll$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: Array<AmimsLibUploadDto>;
'total'?: number;
}>> {
    return libUploadControllerFindAll(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `libUploadControllerFindAll$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  libUploadControllerFindAll(params?: LibUploadControllerFindAll$Params, context?: HttpContext): Observable<{
'code'?: number;
'pesan'?: string;
'data'?: Array<AmimsLibUploadDto>;
'total'?: number;
}> {
    return this.libUploadControllerFindAll$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: Array<AmimsLibUploadDto>;
'total'?: number;
}>): {
'code'?: number;
'pesan'?: string;
'data'?: Array<AmimsLibUploadDto>;
'total'?: number;
} => r.body)
    );
  }

  /** Path part for operation `libUploadControllerCreate()` */
  static readonly LibUploadControllerCreatePath = '/amims/lib_upload/lib_upload';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `libUploadControllerCreate()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  libUploadControllerCreate$Response(params: LibUploadControllerCreate$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsLibUploadDto;
}>> {
    return libUploadControllerCreate(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `libUploadControllerCreate$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  libUploadControllerCreate(params: LibUploadControllerCreate$Params, context?: HttpContext): Observable<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsLibUploadDto;
}> {
    return this.libUploadControllerCreate$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsLibUploadDto;
}>): {
'code'?: number;
'pesan'?: string;
'data'?: AmimsLibUploadDto;
} => r.body)
    );
  }

  /** Path part for operation `libUploadControllerFindOne()` */
  static readonly LibUploadControllerFindOnePath = '/amims/lib_upload/lib_upload/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `libUploadControllerFindOne()` instead.
   *
   * This method doesn't expect any request body.
   */
  libUploadControllerFindOne$Response(params: LibUploadControllerFindOne$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsLibUploadDto;
}>> {
    return libUploadControllerFindOne(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `libUploadControllerFindOne$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  libUploadControllerFindOne(params: LibUploadControllerFindOne$Params, context?: HttpContext): Observable<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsLibUploadDto;
}> {
    return this.libUploadControllerFindOne$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsLibUploadDto;
}>): {
'code'?: number;
'pesan'?: string;
'data'?: AmimsLibUploadDto;
} => r.body)
    );
  }

  /** Path part for operation `libUploadControllerUpdate()` */
  static readonly LibUploadControllerUpdatePath = '/amims/lib_upload/lib_upload/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `libUploadControllerUpdate()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  libUploadControllerUpdate$Response(params: LibUploadControllerUpdate$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsLibUploadDto;
}>> {
    return libUploadControllerUpdate(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `libUploadControllerUpdate$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  libUploadControllerUpdate(params: LibUploadControllerUpdate$Params, context?: HttpContext): Observable<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsLibUploadDto;
}> {
    return this.libUploadControllerUpdate$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsLibUploadDto;
}>): {
'code'?: number;
'pesan'?: string;
'data'?: AmimsLibUploadDto;
} => r.body)
    );
  }

  /** Path part for operation `libUploadControllerRemove()` */
  static readonly LibUploadControllerRemovePath = '/amims/lib_upload/lib_upload/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `libUploadControllerRemove()` instead.
   *
   * This method doesn't expect any request body.
   */
  libUploadControllerRemove$Response(params: LibUploadControllerRemove$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsLibUploadDto;
}>> {
    return libUploadControllerRemove(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `libUploadControllerRemove$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  libUploadControllerRemove(params: LibUploadControllerRemove$Params, context?: HttpContext): Observable<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsLibUploadDto;
}> {
    return this.libUploadControllerRemove$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsLibUploadDto;
}>): {
'code'?: number;
'pesan'?: string;
'data'?: AmimsLibUploadDto;
} => r.body)
    );
  }

}

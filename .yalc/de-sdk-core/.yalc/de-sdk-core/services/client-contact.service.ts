/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { clientContactControllerCreate } from '../fn/client-contact/client-contact-controller-create';
import { ClientContactControllerCreate$Params } from '../fn/client-contact/client-contact-controller-create';
import { clientContactControllerFindAll } from '../fn/client-contact/client-contact-controller-find-all';
import { ClientContactControllerFindAll$Params } from '../fn/client-contact/client-contact-controller-find-all';
import { clientContactControllerFindOne } from '../fn/client-contact/client-contact-controller-find-one';
import { ClientContactControllerFindOne$Params } from '../fn/client-contact/client-contact-controller-find-one';
import { clientContactControllerRemove } from '../fn/client-contact/client-contact-controller-remove';
import { ClientContactControllerRemove$Params } from '../fn/client-contact/client-contact-controller-remove';
import { clientContactControllerUpdate } from '../fn/client-contact/client-contact-controller-update';
import { ClientContactControllerUpdate$Params } from '../fn/client-contact/client-contact-controller-update';
import { PelangganClientContactDto } from '../models/pelanggan-client-contact-dto';

@Injectable({ providedIn: 'root' })
export class ClientContactService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `clientContactControllerFindAll()` */
  static readonly ClientContactControllerFindAllPath = '/auth/client_contact/client_contact';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `clientContactControllerFindAll()` instead.
   *
   * This method doesn't expect any request body.
   */
  clientContactControllerFindAll$Response(params?: ClientContactControllerFindAll$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: Array<PelangganClientContactDto>;
'total'?: number;
}>> {
    return clientContactControllerFindAll(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `clientContactControllerFindAll$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  clientContactControllerFindAll(params?: ClientContactControllerFindAll$Params, context?: HttpContext): Observable<{
'code'?: number;
'pesan'?: string;
'data'?: Array<PelangganClientContactDto>;
'total'?: number;
}> {
    return this.clientContactControllerFindAll$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: Array<PelangganClientContactDto>;
'total'?: number;
}>): {
'code'?: number;
'pesan'?: string;
'data'?: Array<PelangganClientContactDto>;
'total'?: number;
} => r.body)
    );
  }

  /** Path part for operation `clientContactControllerCreate()` */
  static readonly ClientContactControllerCreatePath = '/auth/client_contact/client_contact';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `clientContactControllerCreate()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  clientContactControllerCreate$Response(params: ClientContactControllerCreate$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: PelangganClientContactDto;
}>> {
    return clientContactControllerCreate(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `clientContactControllerCreate$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  clientContactControllerCreate(params: ClientContactControllerCreate$Params, context?: HttpContext): Observable<{
'code'?: number;
'pesan'?: string;
'data'?: PelangganClientContactDto;
}> {
    return this.clientContactControllerCreate$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: PelangganClientContactDto;
}>): {
'code'?: number;
'pesan'?: string;
'data'?: PelangganClientContactDto;
} => r.body)
    );
  }

  /** Path part for operation `clientContactControllerFindOne()` */
  static readonly ClientContactControllerFindOnePath = '/auth/client_contact/client_contact/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `clientContactControllerFindOne()` instead.
   *
   * This method doesn't expect any request body.
   */
  clientContactControllerFindOne$Response(params: ClientContactControllerFindOne$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: PelangganClientContactDto;
}>> {
    return clientContactControllerFindOne(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `clientContactControllerFindOne$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  clientContactControllerFindOne(params: ClientContactControllerFindOne$Params, context?: HttpContext): Observable<{
'code'?: number;
'pesan'?: string;
'data'?: PelangganClientContactDto;
}> {
    return this.clientContactControllerFindOne$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: PelangganClientContactDto;
}>): {
'code'?: number;
'pesan'?: string;
'data'?: PelangganClientContactDto;
} => r.body)
    );
  }

  /** Path part for operation `clientContactControllerUpdate()` */
  static readonly ClientContactControllerUpdatePath = '/auth/client_contact/client_contact/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `clientContactControllerUpdate()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  clientContactControllerUpdate$Response(params: ClientContactControllerUpdate$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: PelangganClientContactDto;
}>> {
    return clientContactControllerUpdate(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `clientContactControllerUpdate$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  clientContactControllerUpdate(params: ClientContactControllerUpdate$Params, context?: HttpContext): Observable<{
'code'?: number;
'pesan'?: string;
'data'?: PelangganClientContactDto;
}> {
    return this.clientContactControllerUpdate$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: PelangganClientContactDto;
}>): {
'code'?: number;
'pesan'?: string;
'data'?: PelangganClientContactDto;
} => r.body)
    );
  }

  /** Path part for operation `clientContactControllerRemove()` */
  static readonly ClientContactControllerRemovePath = '/auth/client_contact/client_contact/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `clientContactControllerRemove()` instead.
   *
   * This method doesn't expect any request body.
   */
  clientContactControllerRemove$Response(params: ClientContactControllerRemove$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: PelangganClientContactDto;
}>> {
    return clientContactControllerRemove(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `clientContactControllerRemove$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  clientContactControllerRemove(params: ClientContactControllerRemove$Params, context?: HttpContext): Observable<{
'code'?: number;
'pesan'?: string;
'data'?: PelangganClientContactDto;
}> {
    return this.clientContactControllerRemove$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: PelangganClientContactDto;
}>): {
'code'?: number;
'pesan'?: string;
'data'?: PelangganClientContactDto;
} => r.body)
    );
  }

}

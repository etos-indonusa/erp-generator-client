/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { AmimsPurGrnDto } from '../models/amims-pur-grn-dto';
import { purGrnControllerCreate } from '../fn/pur-grn/pur-grn-controller-create';
import { PurGrnControllerCreate$Params } from '../fn/pur-grn/pur-grn-controller-create';
import { purGrnControllerFindAll } from '../fn/pur-grn/pur-grn-controller-find-all';
import { PurGrnControllerFindAll$Params } from '../fn/pur-grn/pur-grn-controller-find-all';
import { purGrnControllerFindOne } from '../fn/pur-grn/pur-grn-controller-find-one';
import { PurGrnControllerFindOne$Params } from '../fn/pur-grn/pur-grn-controller-find-one';
import { purGrnControllerRemove } from '../fn/pur-grn/pur-grn-controller-remove';
import { PurGrnControllerRemove$Params } from '../fn/pur-grn/pur-grn-controller-remove';
import { purGrnControllerUpdate } from '../fn/pur-grn/pur-grn-controller-update';
import { PurGrnControllerUpdate$Params } from '../fn/pur-grn/pur-grn-controller-update';

@Injectable({ providedIn: 'root' })
export class PurGrnService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `purGrnControllerFindAll()` */
  static readonly PurGrnControllerFindAllPath = '/amims/pur_grn/pur_grn';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `purGrnControllerFindAll()` instead.
   *
   * This method doesn't expect any request body.
   */
  purGrnControllerFindAll$Response(params?: PurGrnControllerFindAll$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: Array<AmimsPurGrnDto>;
'total'?: number;
}>> {
    return purGrnControllerFindAll(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `purGrnControllerFindAll$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  purGrnControllerFindAll(params?: PurGrnControllerFindAll$Params, context?: HttpContext): Observable<{
'code'?: number;
'pesan'?: string;
'data'?: Array<AmimsPurGrnDto>;
'total'?: number;
}> {
    return this.purGrnControllerFindAll$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: Array<AmimsPurGrnDto>;
'total'?: number;
}>): {
'code'?: number;
'pesan'?: string;
'data'?: Array<AmimsPurGrnDto>;
'total'?: number;
} => r.body)
    );
  }

  /** Path part for operation `purGrnControllerCreate()` */
  static readonly PurGrnControllerCreatePath = '/amims/pur_grn/pur_grn';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `purGrnControllerCreate()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  purGrnControllerCreate$Response(params: PurGrnControllerCreate$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsPurGrnDto;
}>> {
    return purGrnControllerCreate(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `purGrnControllerCreate$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  purGrnControllerCreate(params: PurGrnControllerCreate$Params, context?: HttpContext): Observable<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsPurGrnDto;
}> {
    return this.purGrnControllerCreate$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsPurGrnDto;
}>): {
'code'?: number;
'pesan'?: string;
'data'?: AmimsPurGrnDto;
} => r.body)
    );
  }

  /** Path part for operation `purGrnControllerFindOne()` */
  static readonly PurGrnControllerFindOnePath = '/amims/pur_grn/pur_grn/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `purGrnControllerFindOne()` instead.
   *
   * This method doesn't expect any request body.
   */
  purGrnControllerFindOne$Response(params: PurGrnControllerFindOne$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsPurGrnDto;
}>> {
    return purGrnControllerFindOne(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `purGrnControllerFindOne$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  purGrnControllerFindOne(params: PurGrnControllerFindOne$Params, context?: HttpContext): Observable<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsPurGrnDto;
}> {
    return this.purGrnControllerFindOne$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsPurGrnDto;
}>): {
'code'?: number;
'pesan'?: string;
'data'?: AmimsPurGrnDto;
} => r.body)
    );
  }

  /** Path part for operation `purGrnControllerUpdate()` */
  static readonly PurGrnControllerUpdatePath = '/amims/pur_grn/pur_grn/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `purGrnControllerUpdate()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  purGrnControllerUpdate$Response(params: PurGrnControllerUpdate$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsPurGrnDto;
}>> {
    return purGrnControllerUpdate(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `purGrnControllerUpdate$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  purGrnControllerUpdate(params: PurGrnControllerUpdate$Params, context?: HttpContext): Observable<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsPurGrnDto;
}> {
    return this.purGrnControllerUpdate$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsPurGrnDto;
}>): {
'code'?: number;
'pesan'?: string;
'data'?: AmimsPurGrnDto;
} => r.body)
    );
  }

  /** Path part for operation `purGrnControllerRemove()` */
  static readonly PurGrnControllerRemovePath = '/amims/pur_grn/pur_grn/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `purGrnControllerRemove()` instead.
   *
   * This method doesn't expect any request body.
   */
  purGrnControllerRemove$Response(params: PurGrnControllerRemove$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsPurGrnDto;
}>> {
    return purGrnControllerRemove(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `purGrnControllerRemove$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  purGrnControllerRemove(params: PurGrnControllerRemove$Params, context?: HttpContext): Observable<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsPurGrnDto;
}> {
    return this.purGrnControllerRemove$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsPurGrnDto;
}>): {
'code'?: number;
'pesan'?: string;
'data'?: AmimsPurGrnDto;
} => r.body)
    );
  }

}

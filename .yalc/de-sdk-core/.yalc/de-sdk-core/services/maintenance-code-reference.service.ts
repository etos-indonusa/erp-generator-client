/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { AmimsMaintenanceCodeReferenceDto } from '../models/amims-maintenance-code-reference-dto';
import { maintenanceCodeReferenceControllerCreate } from '../fn/maintenance-code-reference/maintenance-code-reference-controller-create';
import { MaintenanceCodeReferenceControllerCreate$Params } from '../fn/maintenance-code-reference/maintenance-code-reference-controller-create';
import { maintenanceCodeReferenceControllerFindAll } from '../fn/maintenance-code-reference/maintenance-code-reference-controller-find-all';
import { MaintenanceCodeReferenceControllerFindAll$Params } from '../fn/maintenance-code-reference/maintenance-code-reference-controller-find-all';
import { maintenanceCodeReferenceControllerFindOne } from '../fn/maintenance-code-reference/maintenance-code-reference-controller-find-one';
import { MaintenanceCodeReferenceControllerFindOne$Params } from '../fn/maintenance-code-reference/maintenance-code-reference-controller-find-one';
import { maintenanceCodeReferenceControllerRemove } from '../fn/maintenance-code-reference/maintenance-code-reference-controller-remove';
import { MaintenanceCodeReferenceControllerRemove$Params } from '../fn/maintenance-code-reference/maintenance-code-reference-controller-remove';
import { maintenanceCodeReferenceControllerUpdate } from '../fn/maintenance-code-reference/maintenance-code-reference-controller-update';
import { MaintenanceCodeReferenceControllerUpdate$Params } from '../fn/maintenance-code-reference/maintenance-code-reference-controller-update';

@Injectable({ providedIn: 'root' })
export class MaintenanceCodeReferenceService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `maintenanceCodeReferenceControllerFindAll()` */
  static readonly MaintenanceCodeReferenceControllerFindAllPath = '/amims/maintenance_code_reference/maintenance_code_reference';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `maintenanceCodeReferenceControllerFindAll()` instead.
   *
   * This method doesn't expect any request body.
   */
  maintenanceCodeReferenceControllerFindAll$Response(params?: MaintenanceCodeReferenceControllerFindAll$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: Array<AmimsMaintenanceCodeReferenceDto>;
'total'?: number;
}>> {
    return maintenanceCodeReferenceControllerFindAll(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `maintenanceCodeReferenceControllerFindAll$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  maintenanceCodeReferenceControllerFindAll(params?: MaintenanceCodeReferenceControllerFindAll$Params, context?: HttpContext): Observable<{
'code'?: number;
'pesan'?: string;
'data'?: Array<AmimsMaintenanceCodeReferenceDto>;
'total'?: number;
}> {
    return this.maintenanceCodeReferenceControllerFindAll$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: Array<AmimsMaintenanceCodeReferenceDto>;
'total'?: number;
}>): {
'code'?: number;
'pesan'?: string;
'data'?: Array<AmimsMaintenanceCodeReferenceDto>;
'total'?: number;
} => r.body)
    );
  }

  /** Path part for operation `maintenanceCodeReferenceControllerCreate()` */
  static readonly MaintenanceCodeReferenceControllerCreatePath = '/amims/maintenance_code_reference/maintenance_code_reference';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `maintenanceCodeReferenceControllerCreate()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  maintenanceCodeReferenceControllerCreate$Response(params: MaintenanceCodeReferenceControllerCreate$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsMaintenanceCodeReferenceDto;
}>> {
    return maintenanceCodeReferenceControllerCreate(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `maintenanceCodeReferenceControllerCreate$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  maintenanceCodeReferenceControllerCreate(params: MaintenanceCodeReferenceControllerCreate$Params, context?: HttpContext): Observable<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsMaintenanceCodeReferenceDto;
}> {
    return this.maintenanceCodeReferenceControllerCreate$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsMaintenanceCodeReferenceDto;
}>): {
'code'?: number;
'pesan'?: string;
'data'?: AmimsMaintenanceCodeReferenceDto;
} => r.body)
    );
  }

  /** Path part for operation `maintenanceCodeReferenceControllerFindOne()` */
  static readonly MaintenanceCodeReferenceControllerFindOnePath = '/amims/maintenance_code_reference/maintenance_code_reference/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `maintenanceCodeReferenceControllerFindOne()` instead.
   *
   * This method doesn't expect any request body.
   */
  maintenanceCodeReferenceControllerFindOne$Response(params: MaintenanceCodeReferenceControllerFindOne$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsMaintenanceCodeReferenceDto;
}>> {
    return maintenanceCodeReferenceControllerFindOne(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `maintenanceCodeReferenceControllerFindOne$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  maintenanceCodeReferenceControllerFindOne(params: MaintenanceCodeReferenceControllerFindOne$Params, context?: HttpContext): Observable<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsMaintenanceCodeReferenceDto;
}> {
    return this.maintenanceCodeReferenceControllerFindOne$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsMaintenanceCodeReferenceDto;
}>): {
'code'?: number;
'pesan'?: string;
'data'?: AmimsMaintenanceCodeReferenceDto;
} => r.body)
    );
  }

  /** Path part for operation `maintenanceCodeReferenceControllerUpdate()` */
  static readonly MaintenanceCodeReferenceControllerUpdatePath = '/amims/maintenance_code_reference/maintenance_code_reference/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `maintenanceCodeReferenceControllerUpdate()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  maintenanceCodeReferenceControllerUpdate$Response(params: MaintenanceCodeReferenceControllerUpdate$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsMaintenanceCodeReferenceDto;
}>> {
    return maintenanceCodeReferenceControllerUpdate(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `maintenanceCodeReferenceControllerUpdate$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  maintenanceCodeReferenceControllerUpdate(params: MaintenanceCodeReferenceControllerUpdate$Params, context?: HttpContext): Observable<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsMaintenanceCodeReferenceDto;
}> {
    return this.maintenanceCodeReferenceControllerUpdate$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsMaintenanceCodeReferenceDto;
}>): {
'code'?: number;
'pesan'?: string;
'data'?: AmimsMaintenanceCodeReferenceDto;
} => r.body)
    );
  }

  /** Path part for operation `maintenanceCodeReferenceControllerRemove()` */
  static readonly MaintenanceCodeReferenceControllerRemovePath = '/amims/maintenance_code_reference/maintenance_code_reference/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `maintenanceCodeReferenceControllerRemove()` instead.
   *
   * This method doesn't expect any request body.
   */
  maintenanceCodeReferenceControllerRemove$Response(params: MaintenanceCodeReferenceControllerRemove$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsMaintenanceCodeReferenceDto;
}>> {
    return maintenanceCodeReferenceControllerRemove(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `maintenanceCodeReferenceControllerRemove$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  maintenanceCodeReferenceControllerRemove(params: MaintenanceCodeReferenceControllerRemove$Params, context?: HttpContext): Observable<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsMaintenanceCodeReferenceDto;
}> {
    return this.maintenanceCodeReferenceControllerRemove$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsMaintenanceCodeReferenceDto;
}>): {
'code'?: number;
'pesan'?: string;
'data'?: AmimsMaintenanceCodeReferenceDto;
} => r.body)
    );
  }

}

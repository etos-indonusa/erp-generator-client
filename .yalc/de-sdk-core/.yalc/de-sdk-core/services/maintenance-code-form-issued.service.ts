/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { AmimsMaintenanceCodeFormIssuedDto } from '../models/amims-maintenance-code-form-issued-dto';
import { maintenanceCodeFormIssuedControllerCreate } from '../fn/maintenance-code-form-issued/maintenance-code-form-issued-controller-create';
import { MaintenanceCodeFormIssuedControllerCreate$Params } from '../fn/maintenance-code-form-issued/maintenance-code-form-issued-controller-create';
import { maintenanceCodeFormIssuedControllerFindAll } from '../fn/maintenance-code-form-issued/maintenance-code-form-issued-controller-find-all';
import { MaintenanceCodeFormIssuedControllerFindAll$Params } from '../fn/maintenance-code-form-issued/maintenance-code-form-issued-controller-find-all';
import { maintenanceCodeFormIssuedControllerFindOne } from '../fn/maintenance-code-form-issued/maintenance-code-form-issued-controller-find-one';
import { MaintenanceCodeFormIssuedControllerFindOne$Params } from '../fn/maintenance-code-form-issued/maintenance-code-form-issued-controller-find-one';
import { maintenanceCodeFormIssuedControllerRemove } from '../fn/maintenance-code-form-issued/maintenance-code-form-issued-controller-remove';
import { MaintenanceCodeFormIssuedControllerRemove$Params } from '../fn/maintenance-code-form-issued/maintenance-code-form-issued-controller-remove';
import { maintenanceCodeFormIssuedControllerUpdate } from '../fn/maintenance-code-form-issued/maintenance-code-form-issued-controller-update';
import { MaintenanceCodeFormIssuedControllerUpdate$Params } from '../fn/maintenance-code-form-issued/maintenance-code-form-issued-controller-update';

@Injectable({ providedIn: 'root' })
export class MaintenanceCodeFormIssuedService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `maintenanceCodeFormIssuedControllerFindAll()` */
  static readonly MaintenanceCodeFormIssuedControllerFindAllPath = '/amims/maintenance_code_form_issued/maintenance_code_form_issued';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `maintenanceCodeFormIssuedControllerFindAll()` instead.
   *
   * This method doesn't expect any request body.
   */
  maintenanceCodeFormIssuedControllerFindAll$Response(params?: MaintenanceCodeFormIssuedControllerFindAll$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: Array<AmimsMaintenanceCodeFormIssuedDto>;
'total'?: number;
}>> {
    return maintenanceCodeFormIssuedControllerFindAll(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `maintenanceCodeFormIssuedControllerFindAll$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  maintenanceCodeFormIssuedControllerFindAll(params?: MaintenanceCodeFormIssuedControllerFindAll$Params, context?: HttpContext): Observable<{
'code'?: number;
'pesan'?: string;
'data'?: Array<AmimsMaintenanceCodeFormIssuedDto>;
'total'?: number;
}> {
    return this.maintenanceCodeFormIssuedControllerFindAll$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: Array<AmimsMaintenanceCodeFormIssuedDto>;
'total'?: number;
}>): {
'code'?: number;
'pesan'?: string;
'data'?: Array<AmimsMaintenanceCodeFormIssuedDto>;
'total'?: number;
} => r.body)
    );
  }

  /** Path part for operation `maintenanceCodeFormIssuedControllerCreate()` */
  static readonly MaintenanceCodeFormIssuedControllerCreatePath = '/amims/maintenance_code_form_issued/maintenance_code_form_issued';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `maintenanceCodeFormIssuedControllerCreate()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  maintenanceCodeFormIssuedControllerCreate$Response(params: MaintenanceCodeFormIssuedControllerCreate$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsMaintenanceCodeFormIssuedDto;
}>> {
    return maintenanceCodeFormIssuedControllerCreate(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `maintenanceCodeFormIssuedControllerCreate$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  maintenanceCodeFormIssuedControllerCreate(params: MaintenanceCodeFormIssuedControllerCreate$Params, context?: HttpContext): Observable<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsMaintenanceCodeFormIssuedDto;
}> {
    return this.maintenanceCodeFormIssuedControllerCreate$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsMaintenanceCodeFormIssuedDto;
}>): {
'code'?: number;
'pesan'?: string;
'data'?: AmimsMaintenanceCodeFormIssuedDto;
} => r.body)
    );
  }

  /** Path part for operation `maintenanceCodeFormIssuedControllerFindOne()` */
  static readonly MaintenanceCodeFormIssuedControllerFindOnePath = '/amims/maintenance_code_form_issued/maintenance_code_form_issued/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `maintenanceCodeFormIssuedControllerFindOne()` instead.
   *
   * This method doesn't expect any request body.
   */
  maintenanceCodeFormIssuedControllerFindOne$Response(params: MaintenanceCodeFormIssuedControllerFindOne$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsMaintenanceCodeFormIssuedDto;
}>> {
    return maintenanceCodeFormIssuedControllerFindOne(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `maintenanceCodeFormIssuedControllerFindOne$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  maintenanceCodeFormIssuedControllerFindOne(params: MaintenanceCodeFormIssuedControllerFindOne$Params, context?: HttpContext): Observable<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsMaintenanceCodeFormIssuedDto;
}> {
    return this.maintenanceCodeFormIssuedControllerFindOne$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsMaintenanceCodeFormIssuedDto;
}>): {
'code'?: number;
'pesan'?: string;
'data'?: AmimsMaintenanceCodeFormIssuedDto;
} => r.body)
    );
  }

  /** Path part for operation `maintenanceCodeFormIssuedControllerUpdate()` */
  static readonly MaintenanceCodeFormIssuedControllerUpdatePath = '/amims/maintenance_code_form_issued/maintenance_code_form_issued/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `maintenanceCodeFormIssuedControllerUpdate()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  maintenanceCodeFormIssuedControllerUpdate$Response(params: MaintenanceCodeFormIssuedControllerUpdate$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsMaintenanceCodeFormIssuedDto;
}>> {
    return maintenanceCodeFormIssuedControllerUpdate(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `maintenanceCodeFormIssuedControllerUpdate$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  maintenanceCodeFormIssuedControllerUpdate(params: MaintenanceCodeFormIssuedControllerUpdate$Params, context?: HttpContext): Observable<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsMaintenanceCodeFormIssuedDto;
}> {
    return this.maintenanceCodeFormIssuedControllerUpdate$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsMaintenanceCodeFormIssuedDto;
}>): {
'code'?: number;
'pesan'?: string;
'data'?: AmimsMaintenanceCodeFormIssuedDto;
} => r.body)
    );
  }

  /** Path part for operation `maintenanceCodeFormIssuedControllerRemove()` */
  static readonly MaintenanceCodeFormIssuedControllerRemovePath = '/amims/maintenance_code_form_issued/maintenance_code_form_issued/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `maintenanceCodeFormIssuedControllerRemove()` instead.
   *
   * This method doesn't expect any request body.
   */
  maintenanceCodeFormIssuedControllerRemove$Response(params: MaintenanceCodeFormIssuedControllerRemove$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsMaintenanceCodeFormIssuedDto;
}>> {
    return maintenanceCodeFormIssuedControllerRemove(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `maintenanceCodeFormIssuedControllerRemove$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  maintenanceCodeFormIssuedControllerRemove(params: MaintenanceCodeFormIssuedControllerRemove$Params, context?: HttpContext): Observable<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsMaintenanceCodeFormIssuedDto;
}> {
    return this.maintenanceCodeFormIssuedControllerRemove$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsMaintenanceCodeFormIssuedDto;
}>): {
'code'?: number;
'pesan'?: string;
'data'?: AmimsMaintenanceCodeFormIssuedDto;
} => r.body)
    );
  }

}

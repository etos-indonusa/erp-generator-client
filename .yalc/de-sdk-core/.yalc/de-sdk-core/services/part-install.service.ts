/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { AmimsPartInstallDto } from '../models/amims-part-install-dto';
import { partInstallControllerCreate } from '../fn/part-install/part-install-controller-create';
import { PartInstallControllerCreate$Params } from '../fn/part-install/part-install-controller-create';
import { partInstallControllerFindAll } from '../fn/part-install/part-install-controller-find-all';
import { PartInstallControllerFindAll$Params } from '../fn/part-install/part-install-controller-find-all';
import { partInstallControllerFindOne } from '../fn/part-install/part-install-controller-find-one';
import { PartInstallControllerFindOne$Params } from '../fn/part-install/part-install-controller-find-one';
import { partInstallControllerRemove } from '../fn/part-install/part-install-controller-remove';
import { PartInstallControllerRemove$Params } from '../fn/part-install/part-install-controller-remove';
import { partInstallControllerUpdate } from '../fn/part-install/part-install-controller-update';
import { PartInstallControllerUpdate$Params } from '../fn/part-install/part-install-controller-update';

@Injectable({ providedIn: 'root' })
export class PartInstallService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `partInstallControllerFindAll()` */
  static readonly PartInstallControllerFindAllPath = '/amims/part_install/part_install';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `partInstallControllerFindAll()` instead.
   *
   * This method doesn't expect any request body.
   */
  partInstallControllerFindAll$Response(params?: PartInstallControllerFindAll$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: Array<AmimsPartInstallDto>;
'total'?: number;
}>> {
    return partInstallControllerFindAll(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `partInstallControllerFindAll$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  partInstallControllerFindAll(params?: PartInstallControllerFindAll$Params, context?: HttpContext): Observable<{
'code'?: number;
'pesan'?: string;
'data'?: Array<AmimsPartInstallDto>;
'total'?: number;
}> {
    return this.partInstallControllerFindAll$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: Array<AmimsPartInstallDto>;
'total'?: number;
}>): {
'code'?: number;
'pesan'?: string;
'data'?: Array<AmimsPartInstallDto>;
'total'?: number;
} => r.body)
    );
  }

  /** Path part for operation `partInstallControllerCreate()` */
  static readonly PartInstallControllerCreatePath = '/amims/part_install/part_install';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `partInstallControllerCreate()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  partInstallControllerCreate$Response(params: PartInstallControllerCreate$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsPartInstallDto;
}>> {
    return partInstallControllerCreate(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `partInstallControllerCreate$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  partInstallControllerCreate(params: PartInstallControllerCreate$Params, context?: HttpContext): Observable<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsPartInstallDto;
}> {
    return this.partInstallControllerCreate$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsPartInstallDto;
}>): {
'code'?: number;
'pesan'?: string;
'data'?: AmimsPartInstallDto;
} => r.body)
    );
  }

  /** Path part for operation `partInstallControllerFindOne()` */
  static readonly PartInstallControllerFindOnePath = '/amims/part_install/part_install/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `partInstallControllerFindOne()` instead.
   *
   * This method doesn't expect any request body.
   */
  partInstallControllerFindOne$Response(params: PartInstallControllerFindOne$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsPartInstallDto;
}>> {
    return partInstallControllerFindOne(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `partInstallControllerFindOne$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  partInstallControllerFindOne(params: PartInstallControllerFindOne$Params, context?: HttpContext): Observable<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsPartInstallDto;
}> {
    return this.partInstallControllerFindOne$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsPartInstallDto;
}>): {
'code'?: number;
'pesan'?: string;
'data'?: AmimsPartInstallDto;
} => r.body)
    );
  }

  /** Path part for operation `partInstallControllerUpdate()` */
  static readonly PartInstallControllerUpdatePath = '/amims/part_install/part_install/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `partInstallControllerUpdate()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  partInstallControllerUpdate$Response(params: PartInstallControllerUpdate$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsPartInstallDto;
}>> {
    return partInstallControllerUpdate(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `partInstallControllerUpdate$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  partInstallControllerUpdate(params: PartInstallControllerUpdate$Params, context?: HttpContext): Observable<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsPartInstallDto;
}> {
    return this.partInstallControllerUpdate$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsPartInstallDto;
}>): {
'code'?: number;
'pesan'?: string;
'data'?: AmimsPartInstallDto;
} => r.body)
    );
  }

  /** Path part for operation `partInstallControllerRemove()` */
  static readonly PartInstallControllerRemovePath = '/amims/part_install/part_install/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `partInstallControllerRemove()` instead.
   *
   * This method doesn't expect any request body.
   */
  partInstallControllerRemove$Response(params: PartInstallControllerRemove$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsPartInstallDto;
}>> {
    return partInstallControllerRemove(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `partInstallControllerRemove$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  partInstallControllerRemove(params: PartInstallControllerRemove$Params, context?: HttpContext): Observable<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsPartInstallDto;
}> {
    return this.partInstallControllerRemove$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsPartInstallDto;
}>): {
'code'?: number;
'pesan'?: string;
'data'?: AmimsPartInstallDto;
} => r.body)
    );
  }

}

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { AmimsMpcJoOperatorDto } from '../models/amims-mpc-jo-operator-dto';
import { mpcJoOperatorControllerCreate } from '../fn/mpc-jo-operator/mpc-jo-operator-controller-create';
import { MpcJoOperatorControllerCreate$Params } from '../fn/mpc-jo-operator/mpc-jo-operator-controller-create';
import { mpcJoOperatorControllerFindAll } from '../fn/mpc-jo-operator/mpc-jo-operator-controller-find-all';
import { MpcJoOperatorControllerFindAll$Params } from '../fn/mpc-jo-operator/mpc-jo-operator-controller-find-all';
import { mpcJoOperatorControllerFindOne } from '../fn/mpc-jo-operator/mpc-jo-operator-controller-find-one';
import { MpcJoOperatorControllerFindOne$Params } from '../fn/mpc-jo-operator/mpc-jo-operator-controller-find-one';
import { mpcJoOperatorControllerRemove } from '../fn/mpc-jo-operator/mpc-jo-operator-controller-remove';
import { MpcJoOperatorControllerRemove$Params } from '../fn/mpc-jo-operator/mpc-jo-operator-controller-remove';
import { mpcJoOperatorControllerUpdate } from '../fn/mpc-jo-operator/mpc-jo-operator-controller-update';
import { MpcJoOperatorControllerUpdate$Params } from '../fn/mpc-jo-operator/mpc-jo-operator-controller-update';

@Injectable({ providedIn: 'root' })
export class MpcJoOperatorService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `mpcJoOperatorControllerFindAll()` */
  static readonly MpcJoOperatorControllerFindAllPath = '/amims/mpc_jo_operator/mpc_jo_operator';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `mpcJoOperatorControllerFindAll()` instead.
   *
   * This method doesn't expect any request body.
   */
  mpcJoOperatorControllerFindAll$Response(params?: MpcJoOperatorControllerFindAll$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: Array<AmimsMpcJoOperatorDto>;
'total'?: number;
}>> {
    return mpcJoOperatorControllerFindAll(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `mpcJoOperatorControllerFindAll$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  mpcJoOperatorControllerFindAll(params?: MpcJoOperatorControllerFindAll$Params, context?: HttpContext): Observable<{
'code'?: number;
'pesan'?: string;
'data'?: Array<AmimsMpcJoOperatorDto>;
'total'?: number;
}> {
    return this.mpcJoOperatorControllerFindAll$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: Array<AmimsMpcJoOperatorDto>;
'total'?: number;
}>): {
'code'?: number;
'pesan'?: string;
'data'?: Array<AmimsMpcJoOperatorDto>;
'total'?: number;
} => r.body)
    );
  }

  /** Path part for operation `mpcJoOperatorControllerCreate()` */
  static readonly MpcJoOperatorControllerCreatePath = '/amims/mpc_jo_operator/mpc_jo_operator';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `mpcJoOperatorControllerCreate()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  mpcJoOperatorControllerCreate$Response(params: MpcJoOperatorControllerCreate$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsMpcJoOperatorDto;
}>> {
    return mpcJoOperatorControllerCreate(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `mpcJoOperatorControllerCreate$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  mpcJoOperatorControllerCreate(params: MpcJoOperatorControllerCreate$Params, context?: HttpContext): Observable<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsMpcJoOperatorDto;
}> {
    return this.mpcJoOperatorControllerCreate$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsMpcJoOperatorDto;
}>): {
'code'?: number;
'pesan'?: string;
'data'?: AmimsMpcJoOperatorDto;
} => r.body)
    );
  }

  /** Path part for operation `mpcJoOperatorControllerFindOne()` */
  static readonly MpcJoOperatorControllerFindOnePath = '/amims/mpc_jo_operator/mpc_jo_operator/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `mpcJoOperatorControllerFindOne()` instead.
   *
   * This method doesn't expect any request body.
   */
  mpcJoOperatorControllerFindOne$Response(params: MpcJoOperatorControllerFindOne$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsMpcJoOperatorDto;
}>> {
    return mpcJoOperatorControllerFindOne(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `mpcJoOperatorControllerFindOne$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  mpcJoOperatorControllerFindOne(params: MpcJoOperatorControllerFindOne$Params, context?: HttpContext): Observable<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsMpcJoOperatorDto;
}> {
    return this.mpcJoOperatorControllerFindOne$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsMpcJoOperatorDto;
}>): {
'code'?: number;
'pesan'?: string;
'data'?: AmimsMpcJoOperatorDto;
} => r.body)
    );
  }

  /** Path part for operation `mpcJoOperatorControllerUpdate()` */
  static readonly MpcJoOperatorControllerUpdatePath = '/amims/mpc_jo_operator/mpc_jo_operator/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `mpcJoOperatorControllerUpdate()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  mpcJoOperatorControllerUpdate$Response(params: MpcJoOperatorControllerUpdate$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsMpcJoOperatorDto;
}>> {
    return mpcJoOperatorControllerUpdate(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `mpcJoOperatorControllerUpdate$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  mpcJoOperatorControllerUpdate(params: MpcJoOperatorControllerUpdate$Params, context?: HttpContext): Observable<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsMpcJoOperatorDto;
}> {
    return this.mpcJoOperatorControllerUpdate$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsMpcJoOperatorDto;
}>): {
'code'?: number;
'pesan'?: string;
'data'?: AmimsMpcJoOperatorDto;
} => r.body)
    );
  }

  /** Path part for operation `mpcJoOperatorControllerRemove()` */
  static readonly MpcJoOperatorControllerRemovePath = '/amims/mpc_jo_operator/mpc_jo_operator/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `mpcJoOperatorControllerRemove()` instead.
   *
   * This method doesn't expect any request body.
   */
  mpcJoOperatorControllerRemove$Response(params: MpcJoOperatorControllerRemove$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsMpcJoOperatorDto;
}>> {
    return mpcJoOperatorControllerRemove(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `mpcJoOperatorControllerRemove$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  mpcJoOperatorControllerRemove(params: MpcJoOperatorControllerRemove$Params, context?: HttpContext): Observable<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsMpcJoOperatorDto;
}> {
    return this.mpcJoOperatorControllerRemove$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsMpcJoOperatorDto;
}>): {
'code'?: number;
'pesan'?: string;
'data'?: AmimsMpcJoOperatorDto;
} => r.body)
    );
  }

}

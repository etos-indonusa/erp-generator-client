/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { customFieldGroupControllerCreate } from '../fn/custom-field-group/custom-field-group-controller-create';
import { CustomFieldGroupControllerCreate$Params } from '../fn/custom-field-group/custom-field-group-controller-create';
import { customFieldGroupControllerFindAll } from '../fn/custom-field-group/custom-field-group-controller-find-all';
import { CustomFieldGroupControllerFindAll$Params } from '../fn/custom-field-group/custom-field-group-controller-find-all';
import { customFieldGroupControllerFindOne } from '../fn/custom-field-group/custom-field-group-controller-find-one';
import { CustomFieldGroupControllerFindOne$Params } from '../fn/custom-field-group/custom-field-group-controller-find-one';
import { customFieldGroupControllerRemove } from '../fn/custom-field-group/custom-field-group-controller-remove';
import { CustomFieldGroupControllerRemove$Params } from '../fn/custom-field-group/custom-field-group-controller-remove';
import { customFieldGroupControllerUpdate } from '../fn/custom-field-group/custom-field-group-controller-update';
import { CustomFieldGroupControllerUpdate$Params } from '../fn/custom-field-group/custom-field-group-controller-update';
import { ToolsCustomFieldGroupDto } from '../models/tools-custom-field-group-dto';

@Injectable({ providedIn: 'root' })
export class CustomFieldGroupService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `customFieldGroupControllerFindAll()` */
  static readonly CustomFieldGroupControllerFindAllPath = '/auth/custom_field_group/custom_field_group';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `customFieldGroupControllerFindAll()` instead.
   *
   * This method doesn't expect any request body.
   */
  customFieldGroupControllerFindAll$Response(params?: CustomFieldGroupControllerFindAll$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: Array<ToolsCustomFieldGroupDto>;
'total'?: number;
}>> {
    return customFieldGroupControllerFindAll(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `customFieldGroupControllerFindAll$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  customFieldGroupControllerFindAll(params?: CustomFieldGroupControllerFindAll$Params, context?: HttpContext): Observable<{
'code'?: number;
'pesan'?: string;
'data'?: Array<ToolsCustomFieldGroupDto>;
'total'?: number;
}> {
    return this.customFieldGroupControllerFindAll$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: Array<ToolsCustomFieldGroupDto>;
'total'?: number;
}>): {
'code'?: number;
'pesan'?: string;
'data'?: Array<ToolsCustomFieldGroupDto>;
'total'?: number;
} => r.body)
    );
  }

  /** Path part for operation `customFieldGroupControllerCreate()` */
  static readonly CustomFieldGroupControllerCreatePath = '/auth/custom_field_group/custom_field_group';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `customFieldGroupControllerCreate()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  customFieldGroupControllerCreate$Response(params: CustomFieldGroupControllerCreate$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: ToolsCustomFieldGroupDto;
}>> {
    return customFieldGroupControllerCreate(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `customFieldGroupControllerCreate$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  customFieldGroupControllerCreate(params: CustomFieldGroupControllerCreate$Params, context?: HttpContext): Observable<{
'code'?: number;
'pesan'?: string;
'data'?: ToolsCustomFieldGroupDto;
}> {
    return this.customFieldGroupControllerCreate$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: ToolsCustomFieldGroupDto;
}>): {
'code'?: number;
'pesan'?: string;
'data'?: ToolsCustomFieldGroupDto;
} => r.body)
    );
  }

  /** Path part for operation `customFieldGroupControllerFindOne()` */
  static readonly CustomFieldGroupControllerFindOnePath = '/auth/custom_field_group/custom_field_group/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `customFieldGroupControllerFindOne()` instead.
   *
   * This method doesn't expect any request body.
   */
  customFieldGroupControllerFindOne$Response(params: CustomFieldGroupControllerFindOne$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: ToolsCustomFieldGroupDto;
}>> {
    return customFieldGroupControllerFindOne(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `customFieldGroupControllerFindOne$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  customFieldGroupControllerFindOne(params: CustomFieldGroupControllerFindOne$Params, context?: HttpContext): Observable<{
'code'?: number;
'pesan'?: string;
'data'?: ToolsCustomFieldGroupDto;
}> {
    return this.customFieldGroupControllerFindOne$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: ToolsCustomFieldGroupDto;
}>): {
'code'?: number;
'pesan'?: string;
'data'?: ToolsCustomFieldGroupDto;
} => r.body)
    );
  }

  /** Path part for operation `customFieldGroupControllerUpdate()` */
  static readonly CustomFieldGroupControllerUpdatePath = '/auth/custom_field_group/custom_field_group/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `customFieldGroupControllerUpdate()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  customFieldGroupControllerUpdate$Response(params: CustomFieldGroupControllerUpdate$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: ToolsCustomFieldGroupDto;
}>> {
    return customFieldGroupControllerUpdate(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `customFieldGroupControllerUpdate$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  customFieldGroupControllerUpdate(params: CustomFieldGroupControllerUpdate$Params, context?: HttpContext): Observable<{
'code'?: number;
'pesan'?: string;
'data'?: ToolsCustomFieldGroupDto;
}> {
    return this.customFieldGroupControllerUpdate$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: ToolsCustomFieldGroupDto;
}>): {
'code'?: number;
'pesan'?: string;
'data'?: ToolsCustomFieldGroupDto;
} => r.body)
    );
  }

  /** Path part for operation `customFieldGroupControllerRemove()` */
  static readonly CustomFieldGroupControllerRemovePath = '/auth/custom_field_group/custom_field_group/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `customFieldGroupControllerRemove()` instead.
   *
   * This method doesn't expect any request body.
   */
  customFieldGroupControllerRemove$Response(params: CustomFieldGroupControllerRemove$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: ToolsCustomFieldGroupDto;
}>> {
    return customFieldGroupControllerRemove(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `customFieldGroupControllerRemove$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  customFieldGroupControllerRemove(params: CustomFieldGroupControllerRemove$Params, context?: HttpContext): Observable<{
'code'?: number;
'pesan'?: string;
'data'?: ToolsCustomFieldGroupDto;
}> {
    return this.customFieldGroupControllerRemove$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: ToolsCustomFieldGroupDto;
}>): {
'code'?: number;
'pesan'?: string;
'data'?: ToolsCustomFieldGroupDto;
} => r.body)
    );
  }

}

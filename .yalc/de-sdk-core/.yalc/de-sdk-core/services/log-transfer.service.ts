/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { AmimsLogTransferDto } from '../models/amims-log-transfer-dto';
import { logTransferControllerCreate } from '../fn/log-transfer/log-transfer-controller-create';
import { LogTransferControllerCreate$Params } from '../fn/log-transfer/log-transfer-controller-create';
import { logTransferControllerFindAll } from '../fn/log-transfer/log-transfer-controller-find-all';
import { LogTransferControllerFindAll$Params } from '../fn/log-transfer/log-transfer-controller-find-all';
import { logTransferControllerFindOne } from '../fn/log-transfer/log-transfer-controller-find-one';
import { LogTransferControllerFindOne$Params } from '../fn/log-transfer/log-transfer-controller-find-one';
import { logTransferControllerRemove } from '../fn/log-transfer/log-transfer-controller-remove';
import { LogTransferControllerRemove$Params } from '../fn/log-transfer/log-transfer-controller-remove';
import { logTransferControllerUpdate } from '../fn/log-transfer/log-transfer-controller-update';
import { LogTransferControllerUpdate$Params } from '../fn/log-transfer/log-transfer-controller-update';

@Injectable({ providedIn: 'root' })
export class LogTransferService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `logTransferControllerFindAll()` */
  static readonly LogTransferControllerFindAllPath = '/amims/log_transfer/log_transfer';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `logTransferControllerFindAll()` instead.
   *
   * This method doesn't expect any request body.
   */
  logTransferControllerFindAll$Response(params?: LogTransferControllerFindAll$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: Array<AmimsLogTransferDto>;
'total'?: number;
}>> {
    return logTransferControllerFindAll(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `logTransferControllerFindAll$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  logTransferControllerFindAll(params?: LogTransferControllerFindAll$Params, context?: HttpContext): Observable<{
'code'?: number;
'pesan'?: string;
'data'?: Array<AmimsLogTransferDto>;
'total'?: number;
}> {
    return this.logTransferControllerFindAll$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: Array<AmimsLogTransferDto>;
'total'?: number;
}>): {
'code'?: number;
'pesan'?: string;
'data'?: Array<AmimsLogTransferDto>;
'total'?: number;
} => r.body)
    );
  }

  /** Path part for operation `logTransferControllerCreate()` */
  static readonly LogTransferControllerCreatePath = '/amims/log_transfer/log_transfer';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `logTransferControllerCreate()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  logTransferControllerCreate$Response(params: LogTransferControllerCreate$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsLogTransferDto;
}>> {
    return logTransferControllerCreate(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `logTransferControllerCreate$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  logTransferControllerCreate(params: LogTransferControllerCreate$Params, context?: HttpContext): Observable<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsLogTransferDto;
}> {
    return this.logTransferControllerCreate$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsLogTransferDto;
}>): {
'code'?: number;
'pesan'?: string;
'data'?: AmimsLogTransferDto;
} => r.body)
    );
  }

  /** Path part for operation `logTransferControllerFindOne()` */
  static readonly LogTransferControllerFindOnePath = '/amims/log_transfer/log_transfer/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `logTransferControllerFindOne()` instead.
   *
   * This method doesn't expect any request body.
   */
  logTransferControllerFindOne$Response(params: LogTransferControllerFindOne$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsLogTransferDto;
}>> {
    return logTransferControllerFindOne(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `logTransferControllerFindOne$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  logTransferControllerFindOne(params: LogTransferControllerFindOne$Params, context?: HttpContext): Observable<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsLogTransferDto;
}> {
    return this.logTransferControllerFindOne$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsLogTransferDto;
}>): {
'code'?: number;
'pesan'?: string;
'data'?: AmimsLogTransferDto;
} => r.body)
    );
  }

  /** Path part for operation `logTransferControllerUpdate()` */
  static readonly LogTransferControllerUpdatePath = '/amims/log_transfer/log_transfer/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `logTransferControllerUpdate()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  logTransferControllerUpdate$Response(params: LogTransferControllerUpdate$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsLogTransferDto;
}>> {
    return logTransferControllerUpdate(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `logTransferControllerUpdate$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  logTransferControllerUpdate(params: LogTransferControllerUpdate$Params, context?: HttpContext): Observable<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsLogTransferDto;
}> {
    return this.logTransferControllerUpdate$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsLogTransferDto;
}>): {
'code'?: number;
'pesan'?: string;
'data'?: AmimsLogTransferDto;
} => r.body)
    );
  }

  /** Path part for operation `logTransferControllerRemove()` */
  static readonly LogTransferControllerRemovePath = '/amims/log_transfer/log_transfer/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `logTransferControllerRemove()` instead.
   *
   * This method doesn't expect any request body.
   */
  logTransferControllerRemove$Response(params: LogTransferControllerRemove$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsLogTransferDto;
}>> {
    return logTransferControllerRemove(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `logTransferControllerRemove$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  logTransferControllerRemove(params: LogTransferControllerRemove$Params, context?: HttpContext): Observable<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsLogTransferDto;
}> {
    return this.logTransferControllerRemove$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsLogTransferDto;
}>): {
'code'?: number;
'pesan'?: string;
'data'?: AmimsLogTransferDto;
} => r.body)
    );
  }

}

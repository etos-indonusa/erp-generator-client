/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { AmimsPurVendorContactDto } from '../models/amims-pur-vendor-contact-dto';
import { purVendorContactControllerCreate } from '../fn/pur-vendor-contact/pur-vendor-contact-controller-create';
import { PurVendorContactControllerCreate$Params } from '../fn/pur-vendor-contact/pur-vendor-contact-controller-create';
import { purVendorContactControllerFindAll } from '../fn/pur-vendor-contact/pur-vendor-contact-controller-find-all';
import { PurVendorContactControllerFindAll$Params } from '../fn/pur-vendor-contact/pur-vendor-contact-controller-find-all';
import { purVendorContactControllerFindOne } from '../fn/pur-vendor-contact/pur-vendor-contact-controller-find-one';
import { PurVendorContactControllerFindOne$Params } from '../fn/pur-vendor-contact/pur-vendor-contact-controller-find-one';
import { purVendorContactControllerRemove } from '../fn/pur-vendor-contact/pur-vendor-contact-controller-remove';
import { PurVendorContactControllerRemove$Params } from '../fn/pur-vendor-contact/pur-vendor-contact-controller-remove';
import { purVendorContactControllerUpdate } from '../fn/pur-vendor-contact/pur-vendor-contact-controller-update';
import { PurVendorContactControllerUpdate$Params } from '../fn/pur-vendor-contact/pur-vendor-contact-controller-update';

@Injectable({ providedIn: 'root' })
export class PurVendorContactService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `purVendorContactControllerFindAll()` */
  static readonly PurVendorContactControllerFindAllPath = '/amims/pur_vendor_contact/pur_vendor_contact';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `purVendorContactControllerFindAll()` instead.
   *
   * This method doesn't expect any request body.
   */
  purVendorContactControllerFindAll$Response(params?: PurVendorContactControllerFindAll$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: Array<AmimsPurVendorContactDto>;
'total'?: number;
}>> {
    return purVendorContactControllerFindAll(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `purVendorContactControllerFindAll$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  purVendorContactControllerFindAll(params?: PurVendorContactControllerFindAll$Params, context?: HttpContext): Observable<{
'code'?: number;
'pesan'?: string;
'data'?: Array<AmimsPurVendorContactDto>;
'total'?: number;
}> {
    return this.purVendorContactControllerFindAll$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: Array<AmimsPurVendorContactDto>;
'total'?: number;
}>): {
'code'?: number;
'pesan'?: string;
'data'?: Array<AmimsPurVendorContactDto>;
'total'?: number;
} => r.body)
    );
  }

  /** Path part for operation `purVendorContactControllerCreate()` */
  static readonly PurVendorContactControllerCreatePath = '/amims/pur_vendor_contact/pur_vendor_contact';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `purVendorContactControllerCreate()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  purVendorContactControllerCreate$Response(params: PurVendorContactControllerCreate$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsPurVendorContactDto;
}>> {
    return purVendorContactControllerCreate(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `purVendorContactControllerCreate$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  purVendorContactControllerCreate(params: PurVendorContactControllerCreate$Params, context?: HttpContext): Observable<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsPurVendorContactDto;
}> {
    return this.purVendorContactControllerCreate$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsPurVendorContactDto;
}>): {
'code'?: number;
'pesan'?: string;
'data'?: AmimsPurVendorContactDto;
} => r.body)
    );
  }

  /** Path part for operation `purVendorContactControllerFindOne()` */
  static readonly PurVendorContactControllerFindOnePath = '/amims/pur_vendor_contact/pur_vendor_contact/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `purVendorContactControllerFindOne()` instead.
   *
   * This method doesn't expect any request body.
   */
  purVendorContactControllerFindOne$Response(params: PurVendorContactControllerFindOne$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsPurVendorContactDto;
}>> {
    return purVendorContactControllerFindOne(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `purVendorContactControllerFindOne$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  purVendorContactControllerFindOne(params: PurVendorContactControllerFindOne$Params, context?: HttpContext): Observable<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsPurVendorContactDto;
}> {
    return this.purVendorContactControllerFindOne$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsPurVendorContactDto;
}>): {
'code'?: number;
'pesan'?: string;
'data'?: AmimsPurVendorContactDto;
} => r.body)
    );
  }

  /** Path part for operation `purVendorContactControllerUpdate()` */
  static readonly PurVendorContactControllerUpdatePath = '/amims/pur_vendor_contact/pur_vendor_contact/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `purVendorContactControllerUpdate()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  purVendorContactControllerUpdate$Response(params: PurVendorContactControllerUpdate$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsPurVendorContactDto;
}>> {
    return purVendorContactControllerUpdate(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `purVendorContactControllerUpdate$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  purVendorContactControllerUpdate(params: PurVendorContactControllerUpdate$Params, context?: HttpContext): Observable<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsPurVendorContactDto;
}> {
    return this.purVendorContactControllerUpdate$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsPurVendorContactDto;
}>): {
'code'?: number;
'pesan'?: string;
'data'?: AmimsPurVendorContactDto;
} => r.body)
    );
  }

  /** Path part for operation `purVendorContactControllerRemove()` */
  static readonly PurVendorContactControllerRemovePath = '/amims/pur_vendor_contact/pur_vendor_contact/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `purVendorContactControllerRemove()` instead.
   *
   * This method doesn't expect any request body.
   */
  purVendorContactControllerRemove$Response(params: PurVendorContactControllerRemove$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsPurVendorContactDto;
}>> {
    return purVendorContactControllerRemove(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `purVendorContactControllerRemove$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  purVendorContactControllerRemove(params: PurVendorContactControllerRemove$Params, context?: HttpContext): Observable<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsPurVendorContactDto;
}> {
    return this.purVendorContactControllerRemove$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsPurVendorContactDto;
}>): {
'code'?: number;
'pesan'?: string;
'data'?: AmimsPurVendorContactDto;
} => r.body)
    );
  }

}

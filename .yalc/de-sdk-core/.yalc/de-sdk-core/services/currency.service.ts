/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { AmimsCurrencyDto } from '../models/amims-currency-dto';
import { currencyControllerCreate } from '../fn/currency/currency-controller-create';
import { CurrencyControllerCreate$Params } from '../fn/currency/currency-controller-create';
import { currencyControllerFindAll } from '../fn/currency/currency-controller-find-all';
import { CurrencyControllerFindAll$Params } from '../fn/currency/currency-controller-find-all';
import { currencyControllerFindOne } from '../fn/currency/currency-controller-find-one';
import { CurrencyControllerFindOne$Params } from '../fn/currency/currency-controller-find-one';
import { currencyControllerRemove } from '../fn/currency/currency-controller-remove';
import { CurrencyControllerRemove$Params } from '../fn/currency/currency-controller-remove';
import { currencyControllerUpdate } from '../fn/currency/currency-controller-update';
import { CurrencyControllerUpdate$Params } from '../fn/currency/currency-controller-update';

@Injectable({ providedIn: 'root' })
export class CurrencyService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `currencyControllerFindAll()` */
  static readonly CurrencyControllerFindAllPath = '/amims/currency/currency';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `currencyControllerFindAll()` instead.
   *
   * This method doesn't expect any request body.
   */
  currencyControllerFindAll$Response(params?: CurrencyControllerFindAll$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: Array<AmimsCurrencyDto>;
'total'?: number;
}>> {
    return currencyControllerFindAll(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `currencyControllerFindAll$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  currencyControllerFindAll(params?: CurrencyControllerFindAll$Params, context?: HttpContext): Observable<{
'code'?: number;
'pesan'?: string;
'data'?: Array<AmimsCurrencyDto>;
'total'?: number;
}> {
    return this.currencyControllerFindAll$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: Array<AmimsCurrencyDto>;
'total'?: number;
}>): {
'code'?: number;
'pesan'?: string;
'data'?: Array<AmimsCurrencyDto>;
'total'?: number;
} => r.body)
    );
  }

  /** Path part for operation `currencyControllerCreate()` */
  static readonly CurrencyControllerCreatePath = '/amims/currency/currency';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `currencyControllerCreate()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  currencyControllerCreate$Response(params: CurrencyControllerCreate$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsCurrencyDto;
}>> {
    return currencyControllerCreate(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `currencyControllerCreate$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  currencyControllerCreate(params: CurrencyControllerCreate$Params, context?: HttpContext): Observable<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsCurrencyDto;
}> {
    return this.currencyControllerCreate$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsCurrencyDto;
}>): {
'code'?: number;
'pesan'?: string;
'data'?: AmimsCurrencyDto;
} => r.body)
    );
  }

  /** Path part for operation `currencyControllerFindOne()` */
  static readonly CurrencyControllerFindOnePath = '/amims/currency/currency/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `currencyControllerFindOne()` instead.
   *
   * This method doesn't expect any request body.
   */
  currencyControllerFindOne$Response(params: CurrencyControllerFindOne$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsCurrencyDto;
}>> {
    return currencyControllerFindOne(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `currencyControllerFindOne$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  currencyControllerFindOne(params: CurrencyControllerFindOne$Params, context?: HttpContext): Observable<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsCurrencyDto;
}> {
    return this.currencyControllerFindOne$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsCurrencyDto;
}>): {
'code'?: number;
'pesan'?: string;
'data'?: AmimsCurrencyDto;
} => r.body)
    );
  }

  /** Path part for operation `currencyControllerUpdate()` */
  static readonly CurrencyControllerUpdatePath = '/amims/currency/currency/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `currencyControllerUpdate()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  currencyControllerUpdate$Response(params: CurrencyControllerUpdate$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsCurrencyDto;
}>> {
    return currencyControllerUpdate(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `currencyControllerUpdate$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  currencyControllerUpdate(params: CurrencyControllerUpdate$Params, context?: HttpContext): Observable<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsCurrencyDto;
}> {
    return this.currencyControllerUpdate$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsCurrencyDto;
}>): {
'code'?: number;
'pesan'?: string;
'data'?: AmimsCurrencyDto;
} => r.body)
    );
  }

  /** Path part for operation `currencyControllerRemove()` */
  static readonly CurrencyControllerRemovePath = '/amims/currency/currency/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `currencyControllerRemove()` instead.
   *
   * This method doesn't expect any request body.
   */
  currencyControllerRemove$Response(params: CurrencyControllerRemove$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsCurrencyDto;
}>> {
    return currencyControllerRemove(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `currencyControllerRemove$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  currencyControllerRemove(params: CurrencyControllerRemove$Params, context?: HttpContext): Observable<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsCurrencyDto;
}> {
    return this.currencyControllerRemove$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsCurrencyDto;
}>): {
'code'?: number;
'pesan'?: string;
'data'?: AmimsCurrencyDto;
} => r.body)
    );
  }

}

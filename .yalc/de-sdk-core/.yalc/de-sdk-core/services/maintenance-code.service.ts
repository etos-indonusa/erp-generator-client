/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { AmimsMaintenanceCodeDto } from '../models/amims-maintenance-code-dto';
import { maintenanceCodeControllerCreate } from '../fn/maintenance-code/maintenance-code-controller-create';
import { MaintenanceCodeControllerCreate$Params } from '../fn/maintenance-code/maintenance-code-controller-create';
import { maintenanceCodeControllerFindAll } from '../fn/maintenance-code/maintenance-code-controller-find-all';
import { MaintenanceCodeControllerFindAll$Params } from '../fn/maintenance-code/maintenance-code-controller-find-all';
import { maintenanceCodeControllerFindOne } from '../fn/maintenance-code/maintenance-code-controller-find-one';
import { MaintenanceCodeControllerFindOne$Params } from '../fn/maintenance-code/maintenance-code-controller-find-one';
import { maintenanceCodeControllerRemove } from '../fn/maintenance-code/maintenance-code-controller-remove';
import { MaintenanceCodeControllerRemove$Params } from '../fn/maintenance-code/maintenance-code-controller-remove';
import { maintenanceCodeControllerUpdate } from '../fn/maintenance-code/maintenance-code-controller-update';
import { MaintenanceCodeControllerUpdate$Params } from '../fn/maintenance-code/maintenance-code-controller-update';

@Injectable({ providedIn: 'root' })
export class MaintenanceCodeService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `maintenanceCodeControllerFindAll()` */
  static readonly MaintenanceCodeControllerFindAllPath = '/amims/maintenance_code/maintenance_code';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `maintenanceCodeControllerFindAll()` instead.
   *
   * This method doesn't expect any request body.
   */
  maintenanceCodeControllerFindAll$Response(params?: MaintenanceCodeControllerFindAll$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: Array<AmimsMaintenanceCodeDto>;
'total'?: number;
}>> {
    return maintenanceCodeControllerFindAll(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `maintenanceCodeControllerFindAll$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  maintenanceCodeControllerFindAll(params?: MaintenanceCodeControllerFindAll$Params, context?: HttpContext): Observable<{
'code'?: number;
'pesan'?: string;
'data'?: Array<AmimsMaintenanceCodeDto>;
'total'?: number;
}> {
    return this.maintenanceCodeControllerFindAll$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: Array<AmimsMaintenanceCodeDto>;
'total'?: number;
}>): {
'code'?: number;
'pesan'?: string;
'data'?: Array<AmimsMaintenanceCodeDto>;
'total'?: number;
} => r.body)
    );
  }

  /** Path part for operation `maintenanceCodeControllerCreate()` */
  static readonly MaintenanceCodeControllerCreatePath = '/amims/maintenance_code/maintenance_code';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `maintenanceCodeControllerCreate()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  maintenanceCodeControllerCreate$Response(params: MaintenanceCodeControllerCreate$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsMaintenanceCodeDto;
}>> {
    return maintenanceCodeControllerCreate(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `maintenanceCodeControllerCreate$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  maintenanceCodeControllerCreate(params: MaintenanceCodeControllerCreate$Params, context?: HttpContext): Observable<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsMaintenanceCodeDto;
}> {
    return this.maintenanceCodeControllerCreate$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsMaintenanceCodeDto;
}>): {
'code'?: number;
'pesan'?: string;
'data'?: AmimsMaintenanceCodeDto;
} => r.body)
    );
  }

  /** Path part for operation `maintenanceCodeControllerFindOne()` */
  static readonly MaintenanceCodeControllerFindOnePath = '/amims/maintenance_code/maintenance_code/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `maintenanceCodeControllerFindOne()` instead.
   *
   * This method doesn't expect any request body.
   */
  maintenanceCodeControllerFindOne$Response(params: MaintenanceCodeControllerFindOne$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsMaintenanceCodeDto;
}>> {
    return maintenanceCodeControllerFindOne(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `maintenanceCodeControllerFindOne$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  maintenanceCodeControllerFindOne(params: MaintenanceCodeControllerFindOne$Params, context?: HttpContext): Observable<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsMaintenanceCodeDto;
}> {
    return this.maintenanceCodeControllerFindOne$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsMaintenanceCodeDto;
}>): {
'code'?: number;
'pesan'?: string;
'data'?: AmimsMaintenanceCodeDto;
} => r.body)
    );
  }

  /** Path part for operation `maintenanceCodeControllerUpdate()` */
  static readonly MaintenanceCodeControllerUpdatePath = '/amims/maintenance_code/maintenance_code/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `maintenanceCodeControllerUpdate()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  maintenanceCodeControllerUpdate$Response(params: MaintenanceCodeControllerUpdate$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsMaintenanceCodeDto;
}>> {
    return maintenanceCodeControllerUpdate(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `maintenanceCodeControllerUpdate$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  maintenanceCodeControllerUpdate(params: MaintenanceCodeControllerUpdate$Params, context?: HttpContext): Observable<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsMaintenanceCodeDto;
}> {
    return this.maintenanceCodeControllerUpdate$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsMaintenanceCodeDto;
}>): {
'code'?: number;
'pesan'?: string;
'data'?: AmimsMaintenanceCodeDto;
} => r.body)
    );
  }

  /** Path part for operation `maintenanceCodeControllerRemove()` */
  static readonly MaintenanceCodeControllerRemovePath = '/amims/maintenance_code/maintenance_code/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `maintenanceCodeControllerRemove()` instead.
   *
   * This method doesn't expect any request body.
   */
  maintenanceCodeControllerRemove$Response(params: MaintenanceCodeControllerRemove$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsMaintenanceCodeDto;
}>> {
    return maintenanceCodeControllerRemove(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `maintenanceCodeControllerRemove$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  maintenanceCodeControllerRemove(params: MaintenanceCodeControllerRemove$Params, context?: HttpContext): Observable<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsMaintenanceCodeDto;
}> {
    return this.maintenanceCodeControllerRemove$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsMaintenanceCodeDto;
}>): {
'code'?: number;
'pesan'?: string;
'data'?: AmimsMaintenanceCodeDto;
} => r.body)
    );
  }

}

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { AmimsPartLogDto } from '../models/amims-part-log-dto';
import { partLogControllerCreate } from '../fn/part-log/part-log-controller-create';
import { PartLogControllerCreate$Params } from '../fn/part-log/part-log-controller-create';
import { partLogControllerFindAll } from '../fn/part-log/part-log-controller-find-all';
import { PartLogControllerFindAll$Params } from '../fn/part-log/part-log-controller-find-all';
import { partLogControllerFindOne } from '../fn/part-log/part-log-controller-find-one';
import { PartLogControllerFindOne$Params } from '../fn/part-log/part-log-controller-find-one';
import { partLogControllerRemove } from '../fn/part-log/part-log-controller-remove';
import { PartLogControllerRemove$Params } from '../fn/part-log/part-log-controller-remove';
import { partLogControllerUpdate } from '../fn/part-log/part-log-controller-update';
import { PartLogControllerUpdate$Params } from '../fn/part-log/part-log-controller-update';

@Injectable({ providedIn: 'root' })
export class PartLogService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `partLogControllerFindAll()` */
  static readonly PartLogControllerFindAllPath = '/amims/part_log/part_log';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `partLogControllerFindAll()` instead.
   *
   * This method doesn't expect any request body.
   */
  partLogControllerFindAll$Response(params?: PartLogControllerFindAll$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: Array<AmimsPartLogDto>;
'total'?: number;
}>> {
    return partLogControllerFindAll(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `partLogControllerFindAll$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  partLogControllerFindAll(params?: PartLogControllerFindAll$Params, context?: HttpContext): Observable<{
'code'?: number;
'pesan'?: string;
'data'?: Array<AmimsPartLogDto>;
'total'?: number;
}> {
    return this.partLogControllerFindAll$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: Array<AmimsPartLogDto>;
'total'?: number;
}>): {
'code'?: number;
'pesan'?: string;
'data'?: Array<AmimsPartLogDto>;
'total'?: number;
} => r.body)
    );
  }

  /** Path part for operation `partLogControllerCreate()` */
  static readonly PartLogControllerCreatePath = '/amims/part_log/part_log';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `partLogControllerCreate()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  partLogControllerCreate$Response(params: PartLogControllerCreate$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsPartLogDto;
}>> {
    return partLogControllerCreate(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `partLogControllerCreate$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  partLogControllerCreate(params: PartLogControllerCreate$Params, context?: HttpContext): Observable<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsPartLogDto;
}> {
    return this.partLogControllerCreate$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsPartLogDto;
}>): {
'code'?: number;
'pesan'?: string;
'data'?: AmimsPartLogDto;
} => r.body)
    );
  }

  /** Path part for operation `partLogControllerFindOne()` */
  static readonly PartLogControllerFindOnePath = '/amims/part_log/part_log/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `partLogControllerFindOne()` instead.
   *
   * This method doesn't expect any request body.
   */
  partLogControllerFindOne$Response(params: PartLogControllerFindOne$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsPartLogDto;
}>> {
    return partLogControllerFindOne(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `partLogControllerFindOne$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  partLogControllerFindOne(params: PartLogControllerFindOne$Params, context?: HttpContext): Observable<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsPartLogDto;
}> {
    return this.partLogControllerFindOne$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsPartLogDto;
}>): {
'code'?: number;
'pesan'?: string;
'data'?: AmimsPartLogDto;
} => r.body)
    );
  }

  /** Path part for operation `partLogControllerUpdate()` */
  static readonly PartLogControllerUpdatePath = '/amims/part_log/part_log/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `partLogControllerUpdate()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  partLogControllerUpdate$Response(params: PartLogControllerUpdate$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsPartLogDto;
}>> {
    return partLogControllerUpdate(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `partLogControllerUpdate$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  partLogControllerUpdate(params: PartLogControllerUpdate$Params, context?: HttpContext): Observable<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsPartLogDto;
}> {
    return this.partLogControllerUpdate$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsPartLogDto;
}>): {
'code'?: number;
'pesan'?: string;
'data'?: AmimsPartLogDto;
} => r.body)
    );
  }

  /** Path part for operation `partLogControllerRemove()` */
  static readonly PartLogControllerRemovePath = '/amims/part_log/part_log/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `partLogControllerRemove()` instead.
   *
   * This method doesn't expect any request body.
   */
  partLogControllerRemove$Response(params: PartLogControllerRemove$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsPartLogDto;
}>> {
    return partLogControllerRemove(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `partLogControllerRemove$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  partLogControllerRemove(params: PartLogControllerRemove$Params, context?: HttpContext): Observable<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsPartLogDto;
}> {
    return this.partLogControllerRemove$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsPartLogDto;
}>): {
'code'?: number;
'pesan'?: string;
'data'?: AmimsPartLogDto;
} => r.body)
    );
  }

}

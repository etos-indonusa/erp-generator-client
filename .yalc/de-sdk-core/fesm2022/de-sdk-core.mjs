import * as i0 from '@angular/core';
import { Injectable, NgModule, Optional, SkipSelf } from '@angular/core';
import * as i2 from '@angular/common/http';
import { HttpParams, HttpHeaders, HttpRequest, HttpResponse } from '@angular/common/http';
import { filter, map } from 'rxjs/operators';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
/**
 * Global configuration
 */
class ApiConfiguration {
    constructor() {
        this.rootUrl = '';
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: ApiConfiguration, deps: [], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: ApiConfiguration, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: ApiConfiguration, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root',
                }]
        }] });

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
/**
 * Base class for services
 */
class BaseService {
    constructor(config, http) {
        this.config = config;
        this.http = http;
    }
    /**
     * Returns the root url for all operations in this service. If not set directly in this
     * service, will fallback to `ApiConfiguration.rootUrl`.
     */
    get rootUrl() {
        return this._rootUrl || this.config.rootUrl;
    }
    /**
     * Sets the root URL for API operations in this service.
     */
    set rootUrl(rootUrl) {
        this._rootUrl = rootUrl;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: BaseService, deps: [{ token: ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: BaseService }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: BaseService, decorators: [{
            type: Injectable
        }], ctorParameters: () => [{ type: ApiConfiguration }, { type: i2.HttpClient }] });

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
/**
 * Custom parameter codec to correctly handle the plus sign in parameter
 * values. See https://github.com/angular/angular/issues/18261
 */
class ParameterCodec {
    encodeKey(key) {
        return encodeURIComponent(key);
    }
    encodeValue(value) {
        return encodeURIComponent(value);
    }
    decodeKey(key) {
        return decodeURIComponent(key);
    }
    decodeValue(value) {
        return decodeURIComponent(value);
    }
}
const ParameterCodecInstance = new ParameterCodec();
/**
 * Base class for a parameter
 */
class Parameter {
    constructor(name, value, options, defaultStyle, defaultExplode) {
        this.name = name;
        this.value = value;
        this.options = options;
        this.options = options || {};
        if (this.options.style === null || this.options.style === undefined) {
            this.options.style = defaultStyle;
        }
        if (this.options.explode === null || this.options.explode === undefined) {
            this.options.explode = defaultExplode;
        }
    }
    serializeValue(value, separator = ',') {
        if (value === null || value === undefined) {
            return '';
        }
        else if (value instanceof Array) {
            return value.map(v => this.serializeValue(v).split(separator).join(encodeURIComponent(separator))).join(separator);
        }
        else if (typeof value === 'object') {
            const array = [];
            for (const key of Object.keys(value)) {
                let propVal = value[key];
                if (propVal !== null && propVal !== undefined) {
                    propVal = this.serializeValue(propVal).split(separator).join(encodeURIComponent(separator));
                    if (this.options.explode) {
                        array.push(`${key}=${propVal}`);
                    }
                    else {
                        array.push(key);
                        array.push(propVal);
                    }
                }
            }
            return array.join(separator);
        }
        else {
            return String(value);
        }
    }
}
/**
 * A parameter in the operation path
 */
class PathParameter extends Parameter {
    constructor(name, value, options) {
        super(name, value, options, 'simple', false);
    }
    append(path) {
        let value = this.value;
        if (value === null || value === undefined) {
            value = '';
        }
        let prefix = this.options.style === 'label' ? '.' : '';
        let separator = this.options.explode ? prefix === '' ? ',' : prefix : ',';
        let alreadySerialized = false;
        if (this.options.style === 'matrix') {
            // The parameter name is just used as prefix, except in some cases...
            prefix = `;${this.name}=`;
            if (this.options.explode && typeof value === 'object') {
                prefix = ';';
                if (value instanceof Array) {
                    // For arrays we have to repeat the name for each element
                    value = value.map(v => `${this.name}=${this.serializeValue(v, ';')}`);
                    value = value.join(';');
                    alreadySerialized = true;
                }
                else {
                    // For objects we have to put each the key / value pairs
                    value = this.serializeValue(value, ';');
                    alreadySerialized = true;
                }
            }
        }
        value = prefix + (alreadySerialized ? value : this.serializeValue(value, separator));
        // Replace both the plain variable and the corresponding variant taking in the prefix and explode into account
        path = path.replace(`{${this.name}}`, value);
        path = path.replace(`{${prefix}${this.name}${this.options.explode ? '*' : ''}}`, value);
        return path;
    }
    // @ts-ignore
    serializeValue(value, separator = ',') {
        var result = typeof value === 'string' ? encodeURIComponent(value) : super.serializeValue(value, separator);
        result = result.replace(/%3D/g, '=');
        result = result.replace(/%3B/g, ';');
        result = result.replace(/%2C/g, ',');
        return result;
    }
}
/**
 * A parameter in the query
 */
class QueryParameter extends Parameter {
    constructor(name, value, options) {
        super(name, value, options, 'form', true);
    }
    append(params) {
        if (this.value instanceof Array) {
            // Array serialization
            if (this.options.explode) {
                for (const v of this.value) {
                    params = params.append(this.name, this.serializeValue(v));
                }
            }
            else {
                const separator = this.options.style === 'spaceDelimited'
                    ? ' ' : this.options.style === 'pipeDelimited'
                    ? '|' : ',';
                return params.append(this.name, this.serializeValue(this.value, separator));
            }
        }
        else if (this.value !== null && typeof this.value === 'object') {
            // Object serialization
            if (this.options.style === 'deepObject') {
                // Append a parameter for each key, in the form `name[key]`
                for (const key of Object.keys(this.value)) {
                    const propVal = this.value[key];
                    if (propVal !== null && propVal !== undefined) {
                        params = params.append(`${this.name}[${key}]`, this.serializeValue(propVal));
                    }
                }
            }
            else if (this.options.explode) {
                // Append a parameter for each key without using the parameter name
                for (const key of Object.keys(this.value)) {
                    const propVal = this.value[key];
                    if (propVal !== null && propVal !== undefined) {
                        params = params.append(key, this.serializeValue(propVal));
                    }
                }
            }
            else {
                // Append a single parameter whose values are a comma-separated list of key,value,key,value...
                const array = [];
                for (const key of Object.keys(this.value)) {
                    const propVal = this.value[key];
                    if (propVal !== null && propVal !== undefined) {
                        array.push(key);
                        array.push(propVal);
                    }
                }
                params = params.append(this.name, this.serializeValue(array));
            }
        }
        else if (this.value !== null && this.value !== undefined) {
            // Plain value
            params = params.append(this.name, this.serializeValue(this.value));
        }
        return params;
    }
}
/**
 * A parameter in the HTTP request header
 */
class HeaderParameter extends Parameter {
    constructor(name, value, options) {
        super(name, value, options, 'simple', false);
    }
    append(headers) {
        if (this.value !== null && this.value !== undefined) {
            if (this.value instanceof Array) {
                for (const v of this.value) {
                    headers = headers.append(this.name, this.serializeValue(v));
                }
            }
            else {
                headers = headers.append(this.name, this.serializeValue(this.value));
            }
        }
        return headers;
    }
}
/**
 * Helper to build http requests from parameters
 */
class RequestBuilder {
    constructor(rootUrl, operationPath, method) {
        this.rootUrl = rootUrl;
        this.operationPath = operationPath;
        this.method = method;
        this._path = new Map();
        this._query = new Map();
        this._header = new Map();
    }
    /**
     * Sets a path parameter
     */
    path(name, value, options) {
        this._path.set(name, new PathParameter(name, value, options || {}));
    }
    /**
     * Sets a query parameter
     */
    query(name, value, options) {
        this._query.set(name, new QueryParameter(name, value, options || {}));
    }
    /**
     * Sets a header parameter
     */
    header(name, value, options) {
        this._header.set(name, new HeaderParameter(name, value, options || {}));
    }
    /**
     * Sets the body content, along with the content type
     */
    body(value, contentType = 'application/json') {
        if (value instanceof Blob) {
            this._bodyContentType = value.type;
        }
        else {
            this._bodyContentType = contentType;
        }
        if (this._bodyContentType === 'application/x-www-form-urlencoded' && value !== null && typeof value === 'object') {
            // Handle URL-encoded data
            const pairs = [];
            for (const key of Object.keys(value)) {
                let val = value[key];
                if (!(val instanceof Array)) {
                    val = [val];
                }
                for (const v of val) {
                    const formValue = this.formDataValue(v);
                    if (formValue !== null) {
                        pairs.push([key, formValue]);
                    }
                }
            }
            this._bodyContent = pairs.map(p => `${encodeURIComponent(p[0])}=${encodeURIComponent(p[1])}`).join('&');
        }
        else if (this._bodyContentType === 'multipart/form-data') {
            // Handle multipart form data
            const formData = new FormData();
            if (value !== null && value !== undefined) {
                for (const key of Object.keys(value)) {
                    const val = value[key];
                    if (val instanceof Array) {
                        for (const v of val) {
                            const toAppend = this.formDataValue(v);
                            if (toAppend !== null) {
                                formData.append(key, toAppend);
                            }
                        }
                    }
                    else {
                        const toAppend = this.formDataValue(val);
                        if (toAppend !== null) {
                            formData.set(key, toAppend);
                        }
                    }
                }
            }
            this._bodyContent = formData;
        }
        else {
            // The body is the plain content
            this._bodyContent = value;
        }
    }
    formDataValue(value) {
        if (value === null || value === undefined) {
            return null;
        }
        if (value instanceof Blob) {
            return value;
        }
        if (typeof value === 'object') {
            return new Blob([JSON.stringify(value)], { type: 'application/json' });
        }
        return String(value);
    }
    /**
     * Builds the request with the current set parameters
     */
    build(options) {
        options = options || {};
        // Path parameters
        let path = this.operationPath;
        for (const pathParam of this._path.values()) {
            path = pathParam.append(path);
        }
        const url = this.rootUrl + path;
        // Query parameters
        let httpParams = new HttpParams({
            encoder: ParameterCodecInstance
        });
        for (const queryParam of this._query.values()) {
            httpParams = queryParam.append(httpParams);
        }
        // Header parameters
        let httpHeaders = new HttpHeaders();
        if (options.accept) {
            httpHeaders = httpHeaders.append('Accept', options.accept);
        }
        for (const headerParam of this._header.values()) {
            httpHeaders = headerParam.append(httpHeaders);
        }
        // Request content headers
        if (this._bodyContentType && !(this._bodyContent instanceof FormData)) {
            httpHeaders = httpHeaders.set('Content-Type', this._bodyContentType);
        }
        // Perform the request
        return new HttpRequest(this.method.toUpperCase(), url, this._bodyContent, {
            params: httpParams,
            headers: httpHeaders,
            responseType: options.responseType,
            reportProgress: options.reportProgress,
            context: options.context
        });
    }
}

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function appControllerGetHello(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, appControllerGetHello.PATH, 'get');
    if (params) {
    }
    return http.request(rb.build({ responseType: 'text', accept: '*/*', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r.clone({ body: undefined });
    }));
}
appControllerGetHello.PATH = '/';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
class AppService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `appControllerGetHello()` */
    static { this.AppControllerGetHelloPath = '/'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `appControllerGetHello()` instead.
     *
     * This method doesn't expect any request body.
     */
    appControllerGetHello$Response(params, context) {
        return appControllerGetHello(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `appControllerGetHello$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    appControllerGetHello(params, context) {
        return this.appControllerGetHello$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: AppService, deps: [{ token: ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: AppService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: AppService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: ApiConfiguration }, { type: i2.HttpClient }] });

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function authControllerForgotPassword(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, authControllerForgotPassword.PATH, 'post');
    if (params) {
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
authControllerForgotPassword.PATH = '/nonauth/auth/auth/forgot-password';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function authControllerLogin(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, authControllerLogin.PATH, 'post');
    if (params) {
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
authControllerLogin.PATH = '/nonauth/auth/auth/login';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function authControllerLogout(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, authControllerLogout.PATH, 'post');
    if (params) {
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
authControllerLogout.PATH = '/nonauth/auth/auth/logout';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function authControllerRefresh(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, authControllerRefresh.PATH, 'post');
    if (params) {
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
authControllerRefresh.PATH = '/nonauth/auth/auth/refresh-token';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function authControllerResetPassword(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, authControllerResetPassword.PATH, 'post');
    if (params) {
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
authControllerResetPassword.PATH = '/nonauth/auth/auth/reset-password';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
class AuthPublicService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `authControllerLogin()` */
    static { this.AuthControllerLoginPath = '/nonauth/auth/auth/login'; }
    /**
     * Login user.
     *
     *
     *
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `authControllerLogin()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    authControllerLogin$Response(params, context) {
        return authControllerLogin(this.http, this.rootUrl, params, context);
    }
    /**
     * Login user.
     *
     *
     *
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `authControllerLogin$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    authControllerLogin(params, context) {
        return this.authControllerLogin$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `authControllerRefresh()` */
    static { this.AuthControllerRefreshPath = '/nonauth/auth/auth/refresh-token'; }
    /**
     * Refresh token.
     *
     *
     *
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `authControllerRefresh()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    authControllerRefresh$Response(params, context) {
        return authControllerRefresh(this.http, this.rootUrl, params, context);
    }
    /**
     * Refresh token.
     *
     *
     *
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `authControllerRefresh$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    authControllerRefresh(params, context) {
        return this.authControllerRefresh$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `authControllerForgotPassword()` */
    static { this.AuthControllerForgotPasswordPath = '/nonauth/auth/auth/forgot-password'; }
    /**
     * Lupa password.
     *
     *
     *
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `authControllerForgotPassword()` instead.
     *
     * This method doesn't expect any request body.
     */
    authControllerForgotPassword$Response(params, context) {
        return authControllerForgotPassword(this.http, this.rootUrl, params, context);
    }
    /**
     * Lupa password.
     *
     *
     *
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `authControllerForgotPassword$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    authControllerForgotPassword(params, context) {
        return this.authControllerForgotPassword$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `authControllerResetPassword()` */
    static { this.AuthControllerResetPasswordPath = '/nonauth/auth/auth/reset-password'; }
    /**
     * Reset password.
     *
     *
     *
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `authControllerResetPassword()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    authControllerResetPassword$Response(params, context) {
        return authControllerResetPassword(this.http, this.rootUrl, params, context);
    }
    /**
     * Reset password.
     *
     *
     *
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `authControllerResetPassword$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    authControllerResetPassword(params, context) {
        return this.authControllerResetPassword$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `authControllerLogout()` */
    static { this.AuthControllerLogoutPath = '/nonauth/auth/auth/logout'; }
    /**
     * Logout user.
     *
     *
     *
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `authControllerLogout()` instead.
     *
     * This method doesn't expect any request body.
     */
    authControllerLogout$Response(params, context) {
        return authControllerLogout(this.http, this.rootUrl, params, context);
    }
    /**
     * Logout user.
     *
     *
     *
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `authControllerLogout$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    authControllerLogout(params, context) {
        return this.authControllerLogout$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: AuthPublicService, deps: [{ token: ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: AuthPublicService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: AuthPublicService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: ApiConfiguration }, { type: i2.HttpClient }] });

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function usersControllerCreate(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, usersControllerCreate.PATH, 'post');
    if (params) {
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
usersControllerCreate.PATH = '/auth/users/users';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function usersControllerFindAll(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, usersControllerFindAll.PATH, 'get');
    if (params) {
        rb.query('pageIndex', params.pageIndex, {});
        rb.query('pageSize', params.pageSize, {});
        rb.query('filter', params.filter, {});
        rb.query('sortKey', params.sortKey, {});
        rb.query('sortValue', params.sortValue, {});
        rb.query('search_field', params.search_field, {});
        rb.query('search_keyword', params.search_keyword, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
usersControllerFindAll.PATH = '/auth/users/users';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function usersControllerFindOne(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, usersControllerFindOne.PATH, 'get');
    if (params) {
        rb.path('id', params.id, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
usersControllerFindOne.PATH = '/auth/users/users/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function usersControllerRemove(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, usersControllerRemove.PATH, 'delete');
    if (params) {
        rb.path('id', params.id, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
usersControllerRemove.PATH = '/auth/users/users/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function usersControllerUpdate(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, usersControllerUpdate.PATH, 'put');
    if (params) {
        rb.path('id', params.id, {});
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
usersControllerUpdate.PATH = '/auth/users/users/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
class UsersService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `usersControllerFindAll()` */
    static { this.UsersControllerFindAllPath = '/auth/users/users'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `usersControllerFindAll()` instead.
     *
     * This method doesn't expect any request body.
     */
    usersControllerFindAll$Response(params, context) {
        return usersControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `usersControllerFindAll$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    usersControllerFindAll(params, context) {
        return this.usersControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `usersControllerCreate()` */
    static { this.UsersControllerCreatePath = '/auth/users/users'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `usersControllerCreate()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    usersControllerCreate$Response(params, context) {
        return usersControllerCreate(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `usersControllerCreate$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    usersControllerCreate(params, context) {
        return this.usersControllerCreate$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `usersControllerFindOne()` */
    static { this.UsersControllerFindOnePath = '/auth/users/users/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `usersControllerFindOne()` instead.
     *
     * This method doesn't expect any request body.
     */
    usersControllerFindOne$Response(params, context) {
        return usersControllerFindOne(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `usersControllerFindOne$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    usersControllerFindOne(params, context) {
        return this.usersControllerFindOne$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `usersControllerUpdate()` */
    static { this.UsersControllerUpdatePath = '/auth/users/users/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `usersControllerUpdate()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    usersControllerUpdate$Response(params, context) {
        return usersControllerUpdate(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `usersControllerUpdate$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    usersControllerUpdate(params, context) {
        return this.usersControllerUpdate$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `usersControllerRemove()` */
    static { this.UsersControllerRemovePath = '/auth/users/users/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `usersControllerRemove()` instead.
     *
     * This method doesn't expect any request body.
     */
    usersControllerRemove$Response(params, context) {
        return usersControllerRemove(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `usersControllerRemove$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    usersControllerRemove(params, context) {
        return this.usersControllerRemove$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: UsersService, deps: [{ token: ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: UsersService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: UsersService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: ApiConfiguration }, { type: i2.HttpClient }] });

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function usersReportControllerFindAll(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, usersReportControllerFindAll.PATH, 'post');
    if (params) {
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
usersReportControllerFindAll.PATH = '/auth/users/users_report/list';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function usersReportControllerFindOne(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, usersReportControllerFindOne.PATH, 'get');
    if (params) {
        rb.path('id', params.id, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
usersReportControllerFindOne.PATH = '/auth/users/users_report/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
class UsersReportService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `usersReportControllerFindAll()` */
    static { this.UsersReportControllerFindAllPath = '/auth/users/users_report/list'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `usersReportControllerFindAll()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    usersReportControllerFindAll$Response(params, context) {
        return usersReportControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `usersReportControllerFindAll$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    usersReportControllerFindAll(params, context) {
        return this.usersReportControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `usersReportControllerFindOne()` */
    static { this.UsersReportControllerFindOnePath = '/auth/users/users_report/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `usersReportControllerFindOne()` instead.
     *
     * This method doesn't expect any request body.
     */
    usersReportControllerFindOne$Response(params, context) {
        return usersReportControllerFindOne(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `usersReportControllerFindOne$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    usersReportControllerFindOne(params, context) {
        return this.usersReportControllerFindOne$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: UsersReportService, deps: [{ token: ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: UsersReportService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: UsersReportService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: ApiConfiguration }, { type: i2.HttpClient }] });

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function usersWidgetControllerFindAll(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, usersWidgetControllerFindAll.PATH, 'post');
    if (params) {
        rb.query('filter', params.filter, {});
        rb.query('joinWhere', params.joinWhere, {});
        rb.query('select', params.select, {});
        rb.query('groupBy', params.groupBy, {});
        rb.query('sortKey', params.sortKey, {});
        rb.query('sortValue', params.sortValue, {});
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
usersWidgetControllerFindAll.PATH = '/auth/users/users_widget';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
class UsersWidgetService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `usersWidgetControllerFindAll()` */
    static { this.UsersWidgetControllerFindAllPath = '/auth/users/users_widget'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `usersWidgetControllerFindAll()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    usersWidgetControllerFindAll$Response(params, context) {
        return usersWidgetControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `usersWidgetControllerFindAll$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    usersWidgetControllerFindAll(params, context) {
        return this.usersWidgetControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: UsersWidgetService, deps: [{ token: ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: UsersWidgetService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: UsersWidgetService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: ApiConfiguration }, { type: i2.HttpClient }] });

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function userTokensControllerCreate(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, userTokensControllerCreate.PATH, 'post');
    if (params) {
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
userTokensControllerCreate.PATH = '/auth/user_tokens/user_tokens';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function userTokensControllerFindAll(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, userTokensControllerFindAll.PATH, 'get');
    if (params) {
        rb.query('pageIndex', params.pageIndex, {});
        rb.query('pageSize', params.pageSize, {});
        rb.query('filter', params.filter, {});
        rb.query('sortKey', params.sortKey, {});
        rb.query('sortValue', params.sortValue, {});
        rb.query('search_field', params.search_field, {});
        rb.query('search_keyword', params.search_keyword, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
userTokensControllerFindAll.PATH = '/auth/user_tokens/user_tokens';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function userTokensControllerFindOne(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, userTokensControllerFindOne.PATH, 'get');
    if (params) {
        rb.path('id', params.id, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
userTokensControllerFindOne.PATH = '/auth/user_tokens/user_tokens/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function userTokensControllerRemove(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, userTokensControllerRemove.PATH, 'delete');
    if (params) {
        rb.path('id', params.id, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
userTokensControllerRemove.PATH = '/auth/user_tokens/user_tokens/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function userTokensControllerUpdate(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, userTokensControllerUpdate.PATH, 'put');
    if (params) {
        rb.path('id', params.id, {});
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
userTokensControllerUpdate.PATH = '/auth/user_tokens/user_tokens/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
class UserTokensService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `userTokensControllerFindAll()` */
    static { this.UserTokensControllerFindAllPath = '/auth/user_tokens/user_tokens'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `userTokensControllerFindAll()` instead.
     *
     * This method doesn't expect any request body.
     */
    userTokensControllerFindAll$Response(params, context) {
        return userTokensControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `userTokensControllerFindAll$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    userTokensControllerFindAll(params, context) {
        return this.userTokensControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `userTokensControllerCreate()` */
    static { this.UserTokensControllerCreatePath = '/auth/user_tokens/user_tokens'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `userTokensControllerCreate()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    userTokensControllerCreate$Response(params, context) {
        return userTokensControllerCreate(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `userTokensControllerCreate$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    userTokensControllerCreate(params, context) {
        return this.userTokensControllerCreate$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `userTokensControllerFindOne()` */
    static { this.UserTokensControllerFindOnePath = '/auth/user_tokens/user_tokens/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `userTokensControllerFindOne()` instead.
     *
     * This method doesn't expect any request body.
     */
    userTokensControllerFindOne$Response(params, context) {
        return userTokensControllerFindOne(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `userTokensControllerFindOne$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    userTokensControllerFindOne(params, context) {
        return this.userTokensControllerFindOne$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `userTokensControllerUpdate()` */
    static { this.UserTokensControllerUpdatePath = '/auth/user_tokens/user_tokens/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `userTokensControllerUpdate()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    userTokensControllerUpdate$Response(params, context) {
        return userTokensControllerUpdate(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `userTokensControllerUpdate$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    userTokensControllerUpdate(params, context) {
        return this.userTokensControllerUpdate$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `userTokensControllerRemove()` */
    static { this.UserTokensControllerRemovePath = '/auth/user_tokens/user_tokens/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `userTokensControllerRemove()` instead.
     *
     * This method doesn't expect any request body.
     */
    userTokensControllerRemove$Response(params, context) {
        return userTokensControllerRemove(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `userTokensControllerRemove$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    userTokensControllerRemove(params, context) {
        return this.userTokensControllerRemove$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: UserTokensService, deps: [{ token: ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: UserTokensService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: UserTokensService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: ApiConfiguration }, { type: i2.HttpClient }] });

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function authProtectedControllerGetMe(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, authProtectedControllerGetMe.PATH, 'get');
    if (params) {
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
authProtectedControllerGetMe.PATH = '/auth/auth-protect/auth-protect/me';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function authProtectedControllerLogout(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, authProtectedControllerLogout.PATH, 'post');
    if (params) {
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
authProtectedControllerLogout.PATH = '/auth/auth-protect/auth-protect/logout';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
class AuthProtectService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `authProtectedControllerGetMe()` */
    static { this.AuthProtectedControllerGetMePath = '/auth/auth-protect/auth-protect/me'; }
    /**
     * Get current user.
     *
     *
     *
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `authProtectedControllerGetMe()` instead.
     *
     * This method doesn't expect any request body.
     */
    authProtectedControllerGetMe$Response(params, context) {
        return authProtectedControllerGetMe(this.http, this.rootUrl, params, context);
    }
    /**
     * Get current user.
     *
     *
     *
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `authProtectedControllerGetMe$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    authProtectedControllerGetMe(params, context) {
        return this.authProtectedControllerGetMe$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `authProtectedControllerLogout()` */
    static { this.AuthProtectedControllerLogoutPath = '/auth/auth-protect/auth-protect/logout'; }
    /**
     * Logout user.
     *
     *
     *
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `authProtectedControllerLogout()` instead.
     *
     * This method doesn't expect any request body.
     */
    authProtectedControllerLogout$Response(params, context) {
        return authProtectedControllerLogout(this.http, this.rootUrl, params, context);
    }
    /**
     * Logout user.
     *
     *
     *
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `authProtectedControllerLogout$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    authProtectedControllerLogout(params, context) {
        return this.authProtectedControllerLogout$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: AuthProtectService, deps: [{ token: ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: AuthProtectService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: AuthProtectService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: ApiConfiguration }, { type: i2.HttpClient }] });

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function documentControllerCreate(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, documentControllerCreate.PATH, 'post');
    if (params) {
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
documentControllerCreate.PATH = '/auth/document/document';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function documentControllerFindAll(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, documentControllerFindAll.PATH, 'get');
    if (params) {
        rb.query('pageIndex', params.pageIndex, {});
        rb.query('pageSize', params.pageSize, {});
        rb.query('filter', params.filter, {});
        rb.query('sortKey', params.sortKey, {});
        rb.query('sortValue', params.sortValue, {});
        rb.query('search_field', params.search_field, {});
        rb.query('search_keyword', params.search_keyword, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
documentControllerFindAll.PATH = '/auth/document/document';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function documentControllerFindOne(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, documentControllerFindOne.PATH, 'get');
    if (params) {
        rb.path('id', params.id, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
documentControllerFindOne.PATH = '/auth/document/document/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function documentControllerRemove(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, documentControllerRemove.PATH, 'delete');
    if (params) {
        rb.path('id', params.id, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
documentControllerRemove.PATH = '/auth/document/document/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function documentControllerUpdate(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, documentControllerUpdate.PATH, 'put');
    if (params) {
        rb.path('id', params.id, {});
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
documentControllerUpdate.PATH = '/auth/document/document/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function documentControllerUploadFile(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, documentControllerUploadFile.PATH, 'post');
    if (params) {
        rb.body(params.body, 'multipart/form-data');
    }
    return http.request(rb.build({ responseType: 'text', accept: '*/*', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r.clone({ body: undefined });
    }));
}
documentControllerUploadFile.PATH = '/auth/document/document/upload';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
class DocumentService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `documentControllerFindAll()` */
    static { this.DocumentControllerFindAllPath = '/auth/document/document'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `documentControllerFindAll()` instead.
     *
     * This method doesn't expect any request body.
     */
    documentControllerFindAll$Response(params, context) {
        return documentControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `documentControllerFindAll$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    documentControllerFindAll(params, context) {
        return this.documentControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `documentControllerCreate()` */
    static { this.DocumentControllerCreatePath = '/auth/document/document'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `documentControllerCreate()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    documentControllerCreate$Response(params, context) {
        return documentControllerCreate(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `documentControllerCreate$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    documentControllerCreate(params, context) {
        return this.documentControllerCreate$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `documentControllerUploadFile()` */
    static { this.DocumentControllerUploadFilePath = '/auth/document/document/upload'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `documentControllerUploadFile()` instead.
     *
     * This method sends `multipart/form-data` and handles request body of type `multipart/form-data`.
     */
    documentControllerUploadFile$Response(params, context) {
        return documentControllerUploadFile(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `documentControllerUploadFile$Response()` instead.
     *
     * This method sends `multipart/form-data` and handles request body of type `multipart/form-data`.
     */
    documentControllerUploadFile(params, context) {
        return this.documentControllerUploadFile$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `documentControllerFindOne()` */
    static { this.DocumentControllerFindOnePath = '/auth/document/document/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `documentControllerFindOne()` instead.
     *
     * This method doesn't expect any request body.
     */
    documentControllerFindOne$Response(params, context) {
        return documentControllerFindOne(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `documentControllerFindOne$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    documentControllerFindOne(params, context) {
        return this.documentControllerFindOne$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `documentControllerUpdate()` */
    static { this.DocumentControllerUpdatePath = '/auth/document/document/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `documentControllerUpdate()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    documentControllerUpdate$Response(params, context) {
        return documentControllerUpdate(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `documentControllerUpdate$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    documentControllerUpdate(params, context) {
        return this.documentControllerUpdate$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `documentControllerRemove()` */
    static { this.DocumentControllerRemovePath = '/auth/document/document/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `documentControllerRemove()` instead.
     *
     * This method doesn't expect any request body.
     */
    documentControllerRemove$Response(params, context) {
        return documentControllerRemove(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `documentControllerRemove$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    documentControllerRemove(params, context) {
        return this.documentControllerRemove$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: DocumentService, deps: [{ token: ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: DocumentService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: DocumentService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: ApiConfiguration }, { type: i2.HttpClient }] });

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function workflowControllerCreate(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, workflowControllerCreate.PATH, 'post');
    if (params) {
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
workflowControllerCreate.PATH = '/auth/workflow/workflow';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function workflowControllerFindAll(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, workflowControllerFindAll.PATH, 'get');
    if (params) {
        rb.query('pageIndex', params.pageIndex, {});
        rb.query('pageSize', params.pageSize, {});
        rb.query('filter', params.filter, {});
        rb.query('sortKey', params.sortKey, {});
        rb.query('sortValue', params.sortValue, {});
        rb.query('search_field', params.search_field, {});
        rb.query('search_keyword', params.search_keyword, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
workflowControllerFindAll.PATH = '/auth/workflow/workflow';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function workflowControllerFindOne(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, workflowControllerFindOne.PATH, 'get');
    if (params) {
        rb.path('id', params.id, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
workflowControllerFindOne.PATH = '/auth/workflow/workflow/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function workflowControllerRemove(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, workflowControllerRemove.PATH, 'delete');
    if (params) {
        rb.path('id', params.id, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
workflowControllerRemove.PATH = '/auth/workflow/workflow/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function workflowControllerUpdate(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, workflowControllerUpdate.PATH, 'put');
    if (params) {
        rb.path('id', params.id, {});
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
workflowControllerUpdate.PATH = '/auth/workflow/workflow/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
class WorkflowService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `workflowControllerFindAll()` */
    static { this.WorkflowControllerFindAllPath = '/auth/workflow/workflow'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `workflowControllerFindAll()` instead.
     *
     * This method doesn't expect any request body.
     */
    workflowControllerFindAll$Response(params, context) {
        return workflowControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `workflowControllerFindAll$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    workflowControllerFindAll(params, context) {
        return this.workflowControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `workflowControllerCreate()` */
    static { this.WorkflowControllerCreatePath = '/auth/workflow/workflow'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `workflowControllerCreate()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    workflowControllerCreate$Response(params, context) {
        return workflowControllerCreate(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `workflowControllerCreate$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    workflowControllerCreate(params, context) {
        return this.workflowControllerCreate$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `workflowControllerFindOne()` */
    static { this.WorkflowControllerFindOnePath = '/auth/workflow/workflow/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `workflowControllerFindOne()` instead.
     *
     * This method doesn't expect any request body.
     */
    workflowControllerFindOne$Response(params, context) {
        return workflowControllerFindOne(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `workflowControllerFindOne$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    workflowControllerFindOne(params, context) {
        return this.workflowControllerFindOne$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `workflowControllerUpdate()` */
    static { this.WorkflowControllerUpdatePath = '/auth/workflow/workflow/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `workflowControllerUpdate()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    workflowControllerUpdate$Response(params, context) {
        return workflowControllerUpdate(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `workflowControllerUpdate$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    workflowControllerUpdate(params, context) {
        return this.workflowControllerUpdate$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `workflowControllerRemove()` */
    static { this.WorkflowControllerRemovePath = '/auth/workflow/workflow/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `workflowControllerRemove()` instead.
     *
     * This method doesn't expect any request body.
     */
    workflowControllerRemove$Response(params, context) {
        return workflowControllerRemove(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `workflowControllerRemove$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    workflowControllerRemove(params, context) {
        return this.workflowControllerRemove$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: WorkflowService, deps: [{ token: ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: WorkflowService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: WorkflowService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: ApiConfiguration }, { type: i2.HttpClient }] });

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function workflowApplyControllerApplyStep(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, workflowApplyControllerApplyStep.PATH, 'post');
    if (params) {
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'text', accept: '*/*', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r.clone({ body: undefined });
    }));
}
workflowApplyControllerApplyStep.PATH = '/auth/workflow/workflow/apply';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
class WorkflowApplyService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `workflowApplyControllerApplyStep()` */
    static { this.WorkflowApplyControllerApplyStepPath = '/auth/workflow/workflow/apply'; }
    /**
     * Apply workflow step.
     *
     *
     *
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `workflowApplyControllerApplyStep()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    workflowApplyControllerApplyStep$Response(params, context) {
        return workflowApplyControllerApplyStep(this.http, this.rootUrl, params, context);
    }
    /**
     * Apply workflow step.
     *
     *
     *
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `workflowApplyControllerApplyStep$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    workflowApplyControllerApplyStep(params, context) {
        return this.workflowApplyControllerApplyStep$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: WorkflowApplyService, deps: [{ token: ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: WorkflowApplyService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: WorkflowApplyService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: ApiConfiguration }, { type: i2.HttpClient }] });

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function workflowReportControllerFindAll(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, workflowReportControllerFindAll.PATH, 'post');
    if (params) {
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
workflowReportControllerFindAll.PATH = '/auth/workflow/workflow_report/list';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function workflowReportControllerFindOne(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, workflowReportControllerFindOne.PATH, 'get');
    if (params) {
        rb.path('id', params.id, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
workflowReportControllerFindOne.PATH = '/auth/workflow/workflow_report/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
class WorkflowReportService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `workflowReportControllerFindAll()` */
    static { this.WorkflowReportControllerFindAllPath = '/auth/workflow/workflow_report/list'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `workflowReportControllerFindAll()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    workflowReportControllerFindAll$Response(params, context) {
        return workflowReportControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `workflowReportControllerFindAll$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    workflowReportControllerFindAll(params, context) {
        return this.workflowReportControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `workflowReportControllerFindOne()` */
    static { this.WorkflowReportControllerFindOnePath = '/auth/workflow/workflow_report/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `workflowReportControllerFindOne()` instead.
     *
     * This method doesn't expect any request body.
     */
    workflowReportControllerFindOne$Response(params, context) {
        return workflowReportControllerFindOne(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `workflowReportControllerFindOne$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    workflowReportControllerFindOne(params, context) {
        return this.workflowReportControllerFindOne$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: WorkflowReportService, deps: [{ token: ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: WorkflowReportService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: WorkflowReportService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: ApiConfiguration }, { type: i2.HttpClient }] });

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function workflowWidgetControllerFindAll(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, workflowWidgetControllerFindAll.PATH, 'post');
    if (params) {
        rb.query('filter', params.filter, {});
        rb.query('joinWhere', params.joinWhere, {});
        rb.query('select', params.select, {});
        rb.query('groupBy', params.groupBy, {});
        rb.query('sortKey', params.sortKey, {});
        rb.query('sortValue', params.sortValue, {});
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
workflowWidgetControllerFindAll.PATH = '/auth/workflow/workflow_widget';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
class WorkflowWidgetService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `workflowWidgetControllerFindAll()` */
    static { this.WorkflowWidgetControllerFindAllPath = '/auth/workflow/workflow_widget'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `workflowWidgetControllerFindAll()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    workflowWidgetControllerFindAll$Response(params, context) {
        return workflowWidgetControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `workflowWidgetControllerFindAll$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    workflowWidgetControllerFindAll(params, context) {
        return this.workflowWidgetControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: WorkflowWidgetService, deps: [{ token: ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: WorkflowWidgetService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: WorkflowWidgetService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: ApiConfiguration }, { type: i2.HttpClient }] });

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function workflowLogControllerCreate(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, workflowLogControllerCreate.PATH, 'post');
    if (params) {
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
workflowLogControllerCreate.PATH = '/auth/workflow_log/workflow_log';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function workflowLogControllerFindAll(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, workflowLogControllerFindAll.PATH, 'get');
    if (params) {
        rb.query('pageIndex', params.pageIndex, {});
        rb.query('pageSize', params.pageSize, {});
        rb.query('filter', params.filter, {});
        rb.query('sortKey', params.sortKey, {});
        rb.query('sortValue', params.sortValue, {});
        rb.query('search_field', params.search_field, {});
        rb.query('search_keyword', params.search_keyword, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
workflowLogControllerFindAll.PATH = '/auth/workflow_log/workflow_log';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function workflowLogControllerFindOne(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, workflowLogControllerFindOne.PATH, 'get');
    if (params) {
        rb.path('id', params.id, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
workflowLogControllerFindOne.PATH = '/auth/workflow_log/workflow_log/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function workflowLogControllerRemove(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, workflowLogControllerRemove.PATH, 'delete');
    if (params) {
        rb.path('id', params.id, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
workflowLogControllerRemove.PATH = '/auth/workflow_log/workflow_log/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function workflowLogControllerUpdate(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, workflowLogControllerUpdate.PATH, 'put');
    if (params) {
        rb.path('id', params.id, {});
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
workflowLogControllerUpdate.PATH = '/auth/workflow_log/workflow_log/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
class WorkflowLogService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `workflowLogControllerFindAll()` */
    static { this.WorkflowLogControllerFindAllPath = '/auth/workflow_log/workflow_log'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `workflowLogControllerFindAll()` instead.
     *
     * This method doesn't expect any request body.
     */
    workflowLogControllerFindAll$Response(params, context) {
        return workflowLogControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `workflowLogControllerFindAll$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    workflowLogControllerFindAll(params, context) {
        return this.workflowLogControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `workflowLogControllerCreate()` */
    static { this.WorkflowLogControllerCreatePath = '/auth/workflow_log/workflow_log'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `workflowLogControllerCreate()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    workflowLogControllerCreate$Response(params, context) {
        return workflowLogControllerCreate(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `workflowLogControllerCreate$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    workflowLogControllerCreate(params, context) {
        return this.workflowLogControllerCreate$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `workflowLogControllerFindOne()` */
    static { this.WorkflowLogControllerFindOnePath = '/auth/workflow_log/workflow_log/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `workflowLogControllerFindOne()` instead.
     *
     * This method doesn't expect any request body.
     */
    workflowLogControllerFindOne$Response(params, context) {
        return workflowLogControllerFindOne(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `workflowLogControllerFindOne$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    workflowLogControllerFindOne(params, context) {
        return this.workflowLogControllerFindOne$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `workflowLogControllerUpdate()` */
    static { this.WorkflowLogControllerUpdatePath = '/auth/workflow_log/workflow_log/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `workflowLogControllerUpdate()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    workflowLogControllerUpdate$Response(params, context) {
        return workflowLogControllerUpdate(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `workflowLogControllerUpdate$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    workflowLogControllerUpdate(params, context) {
        return this.workflowLogControllerUpdate$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `workflowLogControllerRemove()` */
    static { this.WorkflowLogControllerRemovePath = '/auth/workflow_log/workflow_log/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `workflowLogControllerRemove()` instead.
     *
     * This method doesn't expect any request body.
     */
    workflowLogControllerRemove$Response(params, context) {
        return workflowLogControllerRemove(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `workflowLogControllerRemove$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    workflowLogControllerRemove(params, context) {
        return this.workflowLogControllerRemove$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: WorkflowLogService, deps: [{ token: ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: WorkflowLogService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: WorkflowLogService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: ApiConfiguration }, { type: i2.HttpClient }] });

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function workflowLogReportControllerFindAll(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, workflowLogReportControllerFindAll.PATH, 'post');
    if (params) {
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
workflowLogReportControllerFindAll.PATH = '/auth/workflow_log/workflow_log_report/list';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function workflowLogReportControllerFindOne(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, workflowLogReportControllerFindOne.PATH, 'get');
    if (params) {
        rb.path('id', params.id, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
workflowLogReportControllerFindOne.PATH = '/auth/workflow_log/workflow_log_report/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
class WorkflowLogReportService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `workflowLogReportControllerFindAll()` */
    static { this.WorkflowLogReportControllerFindAllPath = '/auth/workflow_log/workflow_log_report/list'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `workflowLogReportControllerFindAll()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    workflowLogReportControllerFindAll$Response(params, context) {
        return workflowLogReportControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `workflowLogReportControllerFindAll$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    workflowLogReportControllerFindAll(params, context) {
        return this.workflowLogReportControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `workflowLogReportControllerFindOne()` */
    static { this.WorkflowLogReportControllerFindOnePath = '/auth/workflow_log/workflow_log_report/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `workflowLogReportControllerFindOne()` instead.
     *
     * This method doesn't expect any request body.
     */
    workflowLogReportControllerFindOne$Response(params, context) {
        return workflowLogReportControllerFindOne(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `workflowLogReportControllerFindOne$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    workflowLogReportControllerFindOne(params, context) {
        return this.workflowLogReportControllerFindOne$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: WorkflowLogReportService, deps: [{ token: ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: WorkflowLogReportService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: WorkflowLogReportService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: ApiConfiguration }, { type: i2.HttpClient }] });

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function workflowLogWidgetControllerFindAll(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, workflowLogWidgetControllerFindAll.PATH, 'post');
    if (params) {
        rb.query('filter', params.filter, {});
        rb.query('joinWhere', params.joinWhere, {});
        rb.query('select', params.select, {});
        rb.query('groupBy', params.groupBy, {});
        rb.query('sortKey', params.sortKey, {});
        rb.query('sortValue', params.sortValue, {});
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
workflowLogWidgetControllerFindAll.PATH = '/auth/workflow_log/workflow_log_widget';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
class WorkflowLogWidgetService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `workflowLogWidgetControllerFindAll()` */
    static { this.WorkflowLogWidgetControllerFindAllPath = '/auth/workflow_log/workflow_log_widget'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `workflowLogWidgetControllerFindAll()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    workflowLogWidgetControllerFindAll$Response(params, context) {
        return workflowLogWidgetControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `workflowLogWidgetControllerFindAll$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    workflowLogWidgetControllerFindAll(params, context) {
        return this.workflowLogWidgetControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: WorkflowLogWidgetService, deps: [{ token: ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: WorkflowLogWidgetService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: WorkflowLogWidgetService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: ApiConfiguration }, { type: i2.HttpClient }] });

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function workflowStepControllerCreate(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, workflowStepControllerCreate.PATH, 'post');
    if (params) {
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
workflowStepControllerCreate.PATH = '/auth/workflow_step/workflow_step';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function workflowStepControllerFindAll(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, workflowStepControllerFindAll.PATH, 'get');
    if (params) {
        rb.query('pageIndex', params.pageIndex, {});
        rb.query('pageSize', params.pageSize, {});
        rb.query('filter', params.filter, {});
        rb.query('sortKey', params.sortKey, {});
        rb.query('sortValue', params.sortValue, {});
        rb.query('search_field', params.search_field, {});
        rb.query('search_keyword', params.search_keyword, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
workflowStepControllerFindAll.PATH = '/auth/workflow_step/workflow_step';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function workflowStepControllerFindOne(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, workflowStepControllerFindOne.PATH, 'get');
    if (params) {
        rb.path('id', params.id, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
workflowStepControllerFindOne.PATH = '/auth/workflow_step/workflow_step/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function workflowStepControllerRemove(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, workflowStepControllerRemove.PATH, 'delete');
    if (params) {
        rb.path('id', params.id, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
workflowStepControllerRemove.PATH = '/auth/workflow_step/workflow_step/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function workflowStepControllerUpdate(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, workflowStepControllerUpdate.PATH, 'put');
    if (params) {
        rb.path('id', params.id, {});
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
workflowStepControllerUpdate.PATH = '/auth/workflow_step/workflow_step/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
class WorkflowStepService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `workflowStepControllerFindAll()` */
    static { this.WorkflowStepControllerFindAllPath = '/auth/workflow_step/workflow_step'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `workflowStepControllerFindAll()` instead.
     *
     * This method doesn't expect any request body.
     */
    workflowStepControllerFindAll$Response(params, context) {
        return workflowStepControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `workflowStepControllerFindAll$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    workflowStepControllerFindAll(params, context) {
        return this.workflowStepControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `workflowStepControllerCreate()` */
    static { this.WorkflowStepControllerCreatePath = '/auth/workflow_step/workflow_step'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `workflowStepControllerCreate()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    workflowStepControllerCreate$Response(params, context) {
        return workflowStepControllerCreate(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `workflowStepControllerCreate$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    workflowStepControllerCreate(params, context) {
        return this.workflowStepControllerCreate$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `workflowStepControllerFindOne()` */
    static { this.WorkflowStepControllerFindOnePath = '/auth/workflow_step/workflow_step/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `workflowStepControllerFindOne()` instead.
     *
     * This method doesn't expect any request body.
     */
    workflowStepControllerFindOne$Response(params, context) {
        return workflowStepControllerFindOne(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `workflowStepControllerFindOne$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    workflowStepControllerFindOne(params, context) {
        return this.workflowStepControllerFindOne$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `workflowStepControllerUpdate()` */
    static { this.WorkflowStepControllerUpdatePath = '/auth/workflow_step/workflow_step/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `workflowStepControllerUpdate()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    workflowStepControllerUpdate$Response(params, context) {
        return workflowStepControllerUpdate(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `workflowStepControllerUpdate$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    workflowStepControllerUpdate(params, context) {
        return this.workflowStepControllerUpdate$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `workflowStepControllerRemove()` */
    static { this.WorkflowStepControllerRemovePath = '/auth/workflow_step/workflow_step/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `workflowStepControllerRemove()` instead.
     *
     * This method doesn't expect any request body.
     */
    workflowStepControllerRemove$Response(params, context) {
        return workflowStepControllerRemove(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `workflowStepControllerRemove$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    workflowStepControllerRemove(params, context) {
        return this.workflowStepControllerRemove$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: WorkflowStepService, deps: [{ token: ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: WorkflowStepService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: WorkflowStepService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: ApiConfiguration }, { type: i2.HttpClient }] });

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function workflowStepReportControllerFindAll(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, workflowStepReportControllerFindAll.PATH, 'post');
    if (params) {
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
workflowStepReportControllerFindAll.PATH = '/auth/workflow_step/workflow_step_report/list';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function workflowStepReportControllerFindOne(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, workflowStepReportControllerFindOne.PATH, 'get');
    if (params) {
        rb.path('id', params.id, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
workflowStepReportControllerFindOne.PATH = '/auth/workflow_step/workflow_step_report/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
class WorkflowStepReportService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `workflowStepReportControllerFindAll()` */
    static { this.WorkflowStepReportControllerFindAllPath = '/auth/workflow_step/workflow_step_report/list'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `workflowStepReportControllerFindAll()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    workflowStepReportControllerFindAll$Response(params, context) {
        return workflowStepReportControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `workflowStepReportControllerFindAll$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    workflowStepReportControllerFindAll(params, context) {
        return this.workflowStepReportControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `workflowStepReportControllerFindOne()` */
    static { this.WorkflowStepReportControllerFindOnePath = '/auth/workflow_step/workflow_step_report/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `workflowStepReportControllerFindOne()` instead.
     *
     * This method doesn't expect any request body.
     */
    workflowStepReportControllerFindOne$Response(params, context) {
        return workflowStepReportControllerFindOne(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `workflowStepReportControllerFindOne$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    workflowStepReportControllerFindOne(params, context) {
        return this.workflowStepReportControllerFindOne$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: WorkflowStepReportService, deps: [{ token: ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: WorkflowStepReportService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: WorkflowStepReportService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: ApiConfiguration }, { type: i2.HttpClient }] });

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function workflowStepWidgetControllerFindAll(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, workflowStepWidgetControllerFindAll.PATH, 'post');
    if (params) {
        rb.query('filter', params.filter, {});
        rb.query('joinWhere', params.joinWhere, {});
        rb.query('select', params.select, {});
        rb.query('groupBy', params.groupBy, {});
        rb.query('sortKey', params.sortKey, {});
        rb.query('sortValue', params.sortValue, {});
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
workflowStepWidgetControllerFindAll.PATH = '/auth/workflow_step/workflow_step_widget';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
class WorkflowStepWidgetService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `workflowStepWidgetControllerFindAll()` */
    static { this.WorkflowStepWidgetControllerFindAllPath = '/auth/workflow_step/workflow_step_widget'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `workflowStepWidgetControllerFindAll()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    workflowStepWidgetControllerFindAll$Response(params, context) {
        return workflowStepWidgetControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `workflowStepWidgetControllerFindAll$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    workflowStepWidgetControllerFindAll(params, context) {
        return this.workflowStepWidgetControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: WorkflowStepWidgetService, deps: [{ token: ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: WorkflowStepWidgetService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: WorkflowStepWidgetService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: ApiConfiguration }, { type: i2.HttpClient }] });

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function userGroupControllerCreate(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, userGroupControllerCreate.PATH, 'post');
    if (params) {
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
userGroupControllerCreate.PATH = '/auth/user_group/user_group';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function userGroupControllerFindAll(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, userGroupControllerFindAll.PATH, 'get');
    if (params) {
        rb.query('pageIndex', params.pageIndex, {});
        rb.query('pageSize', params.pageSize, {});
        rb.query('filter', params.filter, {});
        rb.query('sortKey', params.sortKey, {});
        rb.query('sortValue', params.sortValue, {});
        rb.query('search_field', params.search_field, {});
        rb.query('search_keyword', params.search_keyword, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
userGroupControllerFindAll.PATH = '/auth/user_group/user_group';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function userGroupControllerFindOne(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, userGroupControllerFindOne.PATH, 'get');
    if (params) {
        rb.path('id', params.id, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
userGroupControllerFindOne.PATH = '/auth/user_group/user_group/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function userGroupControllerRemove(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, userGroupControllerRemove.PATH, 'delete');
    if (params) {
        rb.path('id', params.id, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
userGroupControllerRemove.PATH = '/auth/user_group/user_group/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function userGroupControllerUpdate(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, userGroupControllerUpdate.PATH, 'put');
    if (params) {
        rb.path('id', params.id, {});
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
userGroupControllerUpdate.PATH = '/auth/user_group/user_group/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
class UserGroupService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `userGroupControllerFindAll()` */
    static { this.UserGroupControllerFindAllPath = '/auth/user_group/user_group'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `userGroupControllerFindAll()` instead.
     *
     * This method doesn't expect any request body.
     */
    userGroupControllerFindAll$Response(params, context) {
        return userGroupControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `userGroupControllerFindAll$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    userGroupControllerFindAll(params, context) {
        return this.userGroupControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `userGroupControllerCreate()` */
    static { this.UserGroupControllerCreatePath = '/auth/user_group/user_group'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `userGroupControllerCreate()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    userGroupControllerCreate$Response(params, context) {
        return userGroupControllerCreate(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `userGroupControllerCreate$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    userGroupControllerCreate(params, context) {
        return this.userGroupControllerCreate$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `userGroupControllerFindOne()` */
    static { this.UserGroupControllerFindOnePath = '/auth/user_group/user_group/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `userGroupControllerFindOne()` instead.
     *
     * This method doesn't expect any request body.
     */
    userGroupControllerFindOne$Response(params, context) {
        return userGroupControllerFindOne(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `userGroupControllerFindOne$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    userGroupControllerFindOne(params, context) {
        return this.userGroupControllerFindOne$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `userGroupControllerUpdate()` */
    static { this.UserGroupControllerUpdatePath = '/auth/user_group/user_group/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `userGroupControllerUpdate()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    userGroupControllerUpdate$Response(params, context) {
        return userGroupControllerUpdate(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `userGroupControllerUpdate$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    userGroupControllerUpdate(params, context) {
        return this.userGroupControllerUpdate$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `userGroupControllerRemove()` */
    static { this.UserGroupControllerRemovePath = '/auth/user_group/user_group/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `userGroupControllerRemove()` instead.
     *
     * This method doesn't expect any request body.
     */
    userGroupControllerRemove$Response(params, context) {
        return userGroupControllerRemove(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `userGroupControllerRemove$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    userGroupControllerRemove(params, context) {
        return this.userGroupControllerRemove$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: UserGroupService, deps: [{ token: ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: UserGroupService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: UserGroupService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: ApiConfiguration }, { type: i2.HttpClient }] });

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function workflowAggregatorControllerCreate(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, workflowAggregatorControllerCreate.PATH, 'post');
    if (params) {
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
workflowAggregatorControllerCreate.PATH = '/auth/workflow_aggregator/workflow_aggregator';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function workflowAggregatorControllerFindAll(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, workflowAggregatorControllerFindAll.PATH, 'get');
    if (params) {
        rb.query('pageIndex', params.pageIndex, {});
        rb.query('pageSize', params.pageSize, {});
        rb.query('filter', params.filter, {});
        rb.query('sortKey', params.sortKey, {});
        rb.query('sortValue', params.sortValue, {});
        rb.query('search_field', params.search_field, {});
        rb.query('search_keyword', params.search_keyword, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
workflowAggregatorControllerFindAll.PATH = '/auth/workflow_aggregator/workflow_aggregator';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function workflowAggregatorControllerFindOne(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, workflowAggregatorControllerFindOne.PATH, 'get');
    if (params) {
        rb.path('id', params.id, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
workflowAggregatorControllerFindOne.PATH = '/auth/workflow_aggregator/workflow_aggregator/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function workflowAggregatorControllerRemove(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, workflowAggregatorControllerRemove.PATH, 'delete');
    if (params) {
        rb.path('id', params.id, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
workflowAggregatorControllerRemove.PATH = '/auth/workflow_aggregator/workflow_aggregator/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function workflowAggregatorControllerUpdate(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, workflowAggregatorControllerUpdate.PATH, 'put');
    if (params) {
        rb.path('id', params.id, {});
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
workflowAggregatorControllerUpdate.PATH = '/auth/workflow_aggregator/workflow_aggregator/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
class WorkflowAggregatorService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `workflowAggregatorControllerFindAll()` */
    static { this.WorkflowAggregatorControllerFindAllPath = '/auth/workflow_aggregator/workflow_aggregator'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `workflowAggregatorControllerFindAll()` instead.
     *
     * This method doesn't expect any request body.
     */
    workflowAggregatorControllerFindAll$Response(params, context) {
        return workflowAggregatorControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `workflowAggregatorControllerFindAll$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    workflowAggregatorControllerFindAll(params, context) {
        return this.workflowAggregatorControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `workflowAggregatorControllerCreate()` */
    static { this.WorkflowAggregatorControllerCreatePath = '/auth/workflow_aggregator/workflow_aggregator'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `workflowAggregatorControllerCreate()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    workflowAggregatorControllerCreate$Response(params, context) {
        return workflowAggregatorControllerCreate(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `workflowAggregatorControllerCreate$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    workflowAggregatorControllerCreate(params, context) {
        return this.workflowAggregatorControllerCreate$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `workflowAggregatorControllerFindOne()` */
    static { this.WorkflowAggregatorControllerFindOnePath = '/auth/workflow_aggregator/workflow_aggregator/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `workflowAggregatorControllerFindOne()` instead.
     *
     * This method doesn't expect any request body.
     */
    workflowAggregatorControllerFindOne$Response(params, context) {
        return workflowAggregatorControllerFindOne(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `workflowAggregatorControllerFindOne$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    workflowAggregatorControllerFindOne(params, context) {
        return this.workflowAggregatorControllerFindOne$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `workflowAggregatorControllerUpdate()` */
    static { this.WorkflowAggregatorControllerUpdatePath = '/auth/workflow_aggregator/workflow_aggregator/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `workflowAggregatorControllerUpdate()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    workflowAggregatorControllerUpdate$Response(params, context) {
        return workflowAggregatorControllerUpdate(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `workflowAggregatorControllerUpdate$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    workflowAggregatorControllerUpdate(params, context) {
        return this.workflowAggregatorControllerUpdate$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `workflowAggregatorControllerRemove()` */
    static { this.WorkflowAggregatorControllerRemovePath = '/auth/workflow_aggregator/workflow_aggregator/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `workflowAggregatorControllerRemove()` instead.
     *
     * This method doesn't expect any request body.
     */
    workflowAggregatorControllerRemove$Response(params, context) {
        return workflowAggregatorControllerRemove(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `workflowAggregatorControllerRemove$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    workflowAggregatorControllerRemove(params, context) {
        return this.workflowAggregatorControllerRemove$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: WorkflowAggregatorService, deps: [{ token: ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: WorkflowAggregatorService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: WorkflowAggregatorService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: ApiConfiguration }, { type: i2.HttpClient }] });

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function moduleControllerCreate(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, moduleControllerCreate.PATH, 'post');
    if (params) {
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
moduleControllerCreate.PATH = '/auth/module/module';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function moduleControllerFindAll(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, moduleControllerFindAll.PATH, 'get');
    if (params) {
        rb.query('pageIndex', params.pageIndex, {});
        rb.query('pageSize', params.pageSize, {});
        rb.query('filter', params.filter, {});
        rb.query('sortKey', params.sortKey, {});
        rb.query('sortValue', params.sortValue, {});
        rb.query('search_field', params.search_field, {});
        rb.query('search_keyword', params.search_keyword, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
moduleControllerFindAll.PATH = '/auth/module/module';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function moduleControllerFindOne(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, moduleControllerFindOne.PATH, 'get');
    if (params) {
        rb.path('id', params.id, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
moduleControllerFindOne.PATH = '/auth/module/module/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function moduleControllerRemove(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, moduleControllerRemove.PATH, 'delete');
    if (params) {
        rb.path('id', params.id, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
moduleControllerRemove.PATH = '/auth/module/module/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function moduleControllerUpdate(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, moduleControllerUpdate.PATH, 'put');
    if (params) {
        rb.path('id', params.id, {});
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
moduleControllerUpdate.PATH = '/auth/module/module/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
class ModuleService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `moduleControllerFindAll()` */
    static { this.ModuleControllerFindAllPath = '/auth/module/module'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `moduleControllerFindAll()` instead.
     *
     * This method doesn't expect any request body.
     */
    moduleControllerFindAll$Response(params, context) {
        return moduleControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `moduleControllerFindAll$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    moduleControllerFindAll(params, context) {
        return this.moduleControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `moduleControllerCreate()` */
    static { this.ModuleControllerCreatePath = '/auth/module/module'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `moduleControllerCreate()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    moduleControllerCreate$Response(params, context) {
        return moduleControllerCreate(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `moduleControllerCreate$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    moduleControllerCreate(params, context) {
        return this.moduleControllerCreate$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `moduleControllerFindOne()` */
    static { this.ModuleControllerFindOnePath = '/auth/module/module/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `moduleControllerFindOne()` instead.
     *
     * This method doesn't expect any request body.
     */
    moduleControllerFindOne$Response(params, context) {
        return moduleControllerFindOne(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `moduleControllerFindOne$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    moduleControllerFindOne(params, context) {
        return this.moduleControllerFindOne$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `moduleControllerUpdate()` */
    static { this.ModuleControllerUpdatePath = '/auth/module/module/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `moduleControllerUpdate()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    moduleControllerUpdate$Response(params, context) {
        return moduleControllerUpdate(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `moduleControllerUpdate$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    moduleControllerUpdate(params, context) {
        return this.moduleControllerUpdate$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `moduleControllerRemove()` */
    static { this.ModuleControllerRemovePath = '/auth/module/module/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `moduleControllerRemove()` instead.
     *
     * This method doesn't expect any request body.
     */
    moduleControllerRemove$Response(params, context) {
        return moduleControllerRemove(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `moduleControllerRemove$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    moduleControllerRemove(params, context) {
        return this.moduleControllerRemove$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: ModuleService, deps: [{ token: ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: ModuleService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: ModuleService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: ApiConfiguration }, { type: i2.HttpClient }] });

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function customFieldGroupControllerCreate(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, customFieldGroupControllerCreate.PATH, 'post');
    if (params) {
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
customFieldGroupControllerCreate.PATH = '/auth/custom_field_group/custom_field_group';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function customFieldGroupControllerFindAll(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, customFieldGroupControllerFindAll.PATH, 'get');
    if (params) {
        rb.query('pageIndex', params.pageIndex, {});
        rb.query('pageSize', params.pageSize, {});
        rb.query('filter', params.filter, {});
        rb.query('sortKey', params.sortKey, {});
        rb.query('sortValue', params.sortValue, {});
        rb.query('search_field', params.search_field, {});
        rb.query('search_keyword', params.search_keyword, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
customFieldGroupControllerFindAll.PATH = '/auth/custom_field_group/custom_field_group';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function customFieldGroupControllerFindOne(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, customFieldGroupControllerFindOne.PATH, 'get');
    if (params) {
        rb.path('id', params.id, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
customFieldGroupControllerFindOne.PATH = '/auth/custom_field_group/custom_field_group/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function customFieldGroupControllerRemove(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, customFieldGroupControllerRemove.PATH, 'delete');
    if (params) {
        rb.path('id', params.id, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
customFieldGroupControllerRemove.PATH = '/auth/custom_field_group/custom_field_group/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function customFieldGroupControllerUpdate(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, customFieldGroupControllerUpdate.PATH, 'put');
    if (params) {
        rb.path('id', params.id, {});
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
customFieldGroupControllerUpdate.PATH = '/auth/custom_field_group/custom_field_group/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
class CustomFieldGroupService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `customFieldGroupControllerFindAll()` */
    static { this.CustomFieldGroupControllerFindAllPath = '/auth/custom_field_group/custom_field_group'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `customFieldGroupControllerFindAll()` instead.
     *
     * This method doesn't expect any request body.
     */
    customFieldGroupControllerFindAll$Response(params, context) {
        return customFieldGroupControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `customFieldGroupControllerFindAll$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    customFieldGroupControllerFindAll(params, context) {
        return this.customFieldGroupControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `customFieldGroupControllerCreate()` */
    static { this.CustomFieldGroupControllerCreatePath = '/auth/custom_field_group/custom_field_group'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `customFieldGroupControllerCreate()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    customFieldGroupControllerCreate$Response(params, context) {
        return customFieldGroupControllerCreate(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `customFieldGroupControllerCreate$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    customFieldGroupControllerCreate(params, context) {
        return this.customFieldGroupControllerCreate$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `customFieldGroupControllerFindOne()` */
    static { this.CustomFieldGroupControllerFindOnePath = '/auth/custom_field_group/custom_field_group/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `customFieldGroupControllerFindOne()` instead.
     *
     * This method doesn't expect any request body.
     */
    customFieldGroupControllerFindOne$Response(params, context) {
        return customFieldGroupControllerFindOne(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `customFieldGroupControllerFindOne$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    customFieldGroupControllerFindOne(params, context) {
        return this.customFieldGroupControllerFindOne$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `customFieldGroupControllerUpdate()` */
    static { this.CustomFieldGroupControllerUpdatePath = '/auth/custom_field_group/custom_field_group/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `customFieldGroupControllerUpdate()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    customFieldGroupControllerUpdate$Response(params, context) {
        return customFieldGroupControllerUpdate(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `customFieldGroupControllerUpdate$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    customFieldGroupControllerUpdate(params, context) {
        return this.customFieldGroupControllerUpdate$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `customFieldGroupControllerRemove()` */
    static { this.CustomFieldGroupControllerRemovePath = '/auth/custom_field_group/custom_field_group/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `customFieldGroupControllerRemove()` instead.
     *
     * This method doesn't expect any request body.
     */
    customFieldGroupControllerRemove$Response(params, context) {
        return customFieldGroupControllerRemove(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `customFieldGroupControllerRemove$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    customFieldGroupControllerRemove(params, context) {
        return this.customFieldGroupControllerRemove$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: CustomFieldGroupService, deps: [{ token: ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: CustomFieldGroupService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: CustomFieldGroupService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: ApiConfiguration }, { type: i2.HttpClient }] });

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function customFieldGroupReportControllerFindAll(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, customFieldGroupReportControllerFindAll.PATH, 'post');
    if (params) {
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
customFieldGroupReportControllerFindAll.PATH = '/auth/custom_field_group/custom_field_group_report/list';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function customFieldGroupReportControllerFindOne(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, customFieldGroupReportControllerFindOne.PATH, 'get');
    if (params) {
        rb.path('id', params.id, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
customFieldGroupReportControllerFindOne.PATH = '/auth/custom_field_group/custom_field_group_report/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
class CustomFieldGroupReportService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `customFieldGroupReportControllerFindAll()` */
    static { this.CustomFieldGroupReportControllerFindAllPath = '/auth/custom_field_group/custom_field_group_report/list'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `customFieldGroupReportControllerFindAll()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    customFieldGroupReportControllerFindAll$Response(params, context) {
        return customFieldGroupReportControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `customFieldGroupReportControllerFindAll$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    customFieldGroupReportControllerFindAll(params, context) {
        return this.customFieldGroupReportControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `customFieldGroupReportControllerFindOne()` */
    static { this.CustomFieldGroupReportControllerFindOnePath = '/auth/custom_field_group/custom_field_group_report/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `customFieldGroupReportControllerFindOne()` instead.
     *
     * This method doesn't expect any request body.
     */
    customFieldGroupReportControllerFindOne$Response(params, context) {
        return customFieldGroupReportControllerFindOne(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `customFieldGroupReportControllerFindOne$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    customFieldGroupReportControllerFindOne(params, context) {
        return this.customFieldGroupReportControllerFindOne$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: CustomFieldGroupReportService, deps: [{ token: ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: CustomFieldGroupReportService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: CustomFieldGroupReportService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: ApiConfiguration }, { type: i2.HttpClient }] });

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function customFieldGroupWidgetControllerFindAll(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, customFieldGroupWidgetControllerFindAll.PATH, 'post');
    if (params) {
        rb.query('filter', params.filter, {});
        rb.query('joinWhere', params.joinWhere, {});
        rb.query('select', params.select, {});
        rb.query('groupBy', params.groupBy, {});
        rb.query('sortKey', params.sortKey, {});
        rb.query('sortValue', params.sortValue, {});
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
customFieldGroupWidgetControllerFindAll.PATH = '/auth/custom_field_group/custom_field_group_widget';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
class CustomFieldGroupWidgetService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `customFieldGroupWidgetControllerFindAll()` */
    static { this.CustomFieldGroupWidgetControllerFindAllPath = '/auth/custom_field_group/custom_field_group_widget'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `customFieldGroupWidgetControllerFindAll()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    customFieldGroupWidgetControllerFindAll$Response(params, context) {
        return customFieldGroupWidgetControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `customFieldGroupWidgetControllerFindAll$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    customFieldGroupWidgetControllerFindAll(params, context) {
        return this.customFieldGroupWidgetControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: CustomFieldGroupWidgetService, deps: [{ token: ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: CustomFieldGroupWidgetService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: CustomFieldGroupWidgetService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: ApiConfiguration }, { type: i2.HttpClient }] });

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function customFieldControllerCreate(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, customFieldControllerCreate.PATH, 'post');
    if (params) {
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
customFieldControllerCreate.PATH = '/auth/custom_field/custom_field';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function customFieldControllerFindAll(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, customFieldControllerFindAll.PATH, 'get');
    if (params) {
        rb.query('pageIndex', params.pageIndex, {});
        rb.query('pageSize', params.pageSize, {});
        rb.query('filter', params.filter, {});
        rb.query('sortKey', params.sortKey, {});
        rb.query('sortValue', params.sortValue, {});
        rb.query('search_field', params.search_field, {});
        rb.query('search_keyword', params.search_keyword, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
customFieldControllerFindAll.PATH = '/auth/custom_field/custom_field';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function customFieldControllerFindOne(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, customFieldControllerFindOne.PATH, 'get');
    if (params) {
        rb.path('id', params.id, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
customFieldControllerFindOne.PATH = '/auth/custom_field/custom_field/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function customFieldControllerRemove(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, customFieldControllerRemove.PATH, 'delete');
    if (params) {
        rb.path('id', params.id, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
customFieldControllerRemove.PATH = '/auth/custom_field/custom_field/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function customFieldControllerUpdate(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, customFieldControllerUpdate.PATH, 'put');
    if (params) {
        rb.path('id', params.id, {});
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
customFieldControllerUpdate.PATH = '/auth/custom_field/custom_field/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
class CustomFieldService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `customFieldControllerFindAll()` */
    static { this.CustomFieldControllerFindAllPath = '/auth/custom_field/custom_field'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `customFieldControllerFindAll()` instead.
     *
     * This method doesn't expect any request body.
     */
    customFieldControllerFindAll$Response(params, context) {
        return customFieldControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `customFieldControllerFindAll$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    customFieldControllerFindAll(params, context) {
        return this.customFieldControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `customFieldControllerCreate()` */
    static { this.CustomFieldControllerCreatePath = '/auth/custom_field/custom_field'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `customFieldControllerCreate()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    customFieldControllerCreate$Response(params, context) {
        return customFieldControllerCreate(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `customFieldControllerCreate$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    customFieldControllerCreate(params, context) {
        return this.customFieldControllerCreate$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `customFieldControllerFindOne()` */
    static { this.CustomFieldControllerFindOnePath = '/auth/custom_field/custom_field/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `customFieldControllerFindOne()` instead.
     *
     * This method doesn't expect any request body.
     */
    customFieldControllerFindOne$Response(params, context) {
        return customFieldControllerFindOne(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `customFieldControllerFindOne$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    customFieldControllerFindOne(params, context) {
        return this.customFieldControllerFindOne$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `customFieldControllerUpdate()` */
    static { this.CustomFieldControllerUpdatePath = '/auth/custom_field/custom_field/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `customFieldControllerUpdate()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    customFieldControllerUpdate$Response(params, context) {
        return customFieldControllerUpdate(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `customFieldControllerUpdate$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    customFieldControllerUpdate(params, context) {
        return this.customFieldControllerUpdate$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `customFieldControllerRemove()` */
    static { this.CustomFieldControllerRemovePath = '/auth/custom_field/custom_field/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `customFieldControllerRemove()` instead.
     *
     * This method doesn't expect any request body.
     */
    customFieldControllerRemove$Response(params, context) {
        return customFieldControllerRemove(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `customFieldControllerRemove$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    customFieldControllerRemove(params, context) {
        return this.customFieldControllerRemove$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: CustomFieldService, deps: [{ token: ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: CustomFieldService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: CustomFieldService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: ApiConfiguration }, { type: i2.HttpClient }] });

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function customFieldValueControllerCreate(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, customFieldValueControllerCreate.PATH, 'post');
    if (params) {
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
customFieldValueControllerCreate.PATH = '/auth/custom_field_value/custom_field_value';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function customFieldValueControllerFindAll(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, customFieldValueControllerFindAll.PATH, 'get');
    if (params) {
        rb.query('pageIndex', params.pageIndex, {});
        rb.query('pageSize', params.pageSize, {});
        rb.query('filter', params.filter, {});
        rb.query('sortKey', params.sortKey, {});
        rb.query('sortValue', params.sortValue, {});
        rb.query('search_field', params.search_field, {});
        rb.query('search_keyword', params.search_keyword, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
customFieldValueControllerFindAll.PATH = '/auth/custom_field_value/custom_field_value';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function customFieldValueControllerFindOne(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, customFieldValueControllerFindOne.PATH, 'get');
    if (params) {
        rb.path('id', params.id, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
customFieldValueControllerFindOne.PATH = '/auth/custom_field_value/custom_field_value/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function customFieldValueControllerRemove(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, customFieldValueControllerRemove.PATH, 'delete');
    if (params) {
        rb.path('id', params.id, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
customFieldValueControllerRemove.PATH = '/auth/custom_field_value/custom_field_value/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function customFieldValueControllerUpdate(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, customFieldValueControllerUpdate.PATH, 'put');
    if (params) {
        rb.path('id', params.id, {});
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
customFieldValueControllerUpdate.PATH = '/auth/custom_field_value/custom_field_value/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
class CustomFieldValueService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `customFieldValueControllerFindAll()` */
    static { this.CustomFieldValueControllerFindAllPath = '/auth/custom_field_value/custom_field_value'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `customFieldValueControllerFindAll()` instead.
     *
     * This method doesn't expect any request body.
     */
    customFieldValueControllerFindAll$Response(params, context) {
        return customFieldValueControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `customFieldValueControllerFindAll$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    customFieldValueControllerFindAll(params, context) {
        return this.customFieldValueControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `customFieldValueControllerCreate()` */
    static { this.CustomFieldValueControllerCreatePath = '/auth/custom_field_value/custom_field_value'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `customFieldValueControllerCreate()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    customFieldValueControllerCreate$Response(params, context) {
        return customFieldValueControllerCreate(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `customFieldValueControllerCreate$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    customFieldValueControllerCreate(params, context) {
        return this.customFieldValueControllerCreate$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `customFieldValueControllerFindOne()` */
    static { this.CustomFieldValueControllerFindOnePath = '/auth/custom_field_value/custom_field_value/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `customFieldValueControllerFindOne()` instead.
     *
     * This method doesn't expect any request body.
     */
    customFieldValueControllerFindOne$Response(params, context) {
        return customFieldValueControllerFindOne(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `customFieldValueControllerFindOne$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    customFieldValueControllerFindOne(params, context) {
        return this.customFieldValueControllerFindOne$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `customFieldValueControllerUpdate()` */
    static { this.CustomFieldValueControllerUpdatePath = '/auth/custom_field_value/custom_field_value/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `customFieldValueControllerUpdate()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    customFieldValueControllerUpdate$Response(params, context) {
        return customFieldValueControllerUpdate(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `customFieldValueControllerUpdate$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    customFieldValueControllerUpdate(params, context) {
        return this.customFieldValueControllerUpdate$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `customFieldValueControllerRemove()` */
    static { this.CustomFieldValueControllerRemovePath = '/auth/custom_field_value/custom_field_value/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `customFieldValueControllerRemove()` instead.
     *
     * This method doesn't expect any request body.
     */
    customFieldValueControllerRemove$Response(params, context) {
        return customFieldValueControllerRemove(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `customFieldValueControllerRemove$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    customFieldValueControllerRemove(params, context) {
        return this.customFieldValueControllerRemove$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: CustomFieldValueService, deps: [{ token: ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: CustomFieldValueService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: CustomFieldValueService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: ApiConfiguration }, { type: i2.HttpClient }] });

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function customFieldValueReportControllerFindAll(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, customFieldValueReportControllerFindAll.PATH, 'post');
    if (params) {
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
customFieldValueReportControllerFindAll.PATH = '/auth/custom_field_value/custom_field_value_report/list';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function customFieldValueReportControllerFindOne(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, customFieldValueReportControllerFindOne.PATH, 'get');
    if (params) {
        rb.path('id', params.id, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
customFieldValueReportControllerFindOne.PATH = '/auth/custom_field_value/custom_field_value_report/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
class CustomFieldValueReportService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `customFieldValueReportControllerFindAll()` */
    static { this.CustomFieldValueReportControllerFindAllPath = '/auth/custom_field_value/custom_field_value_report/list'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `customFieldValueReportControllerFindAll()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    customFieldValueReportControllerFindAll$Response(params, context) {
        return customFieldValueReportControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `customFieldValueReportControllerFindAll$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    customFieldValueReportControllerFindAll(params, context) {
        return this.customFieldValueReportControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `customFieldValueReportControllerFindOne()` */
    static { this.CustomFieldValueReportControllerFindOnePath = '/auth/custom_field_value/custom_field_value_report/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `customFieldValueReportControllerFindOne()` instead.
     *
     * This method doesn't expect any request body.
     */
    customFieldValueReportControllerFindOne$Response(params, context) {
        return customFieldValueReportControllerFindOne(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `customFieldValueReportControllerFindOne$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    customFieldValueReportControllerFindOne(params, context) {
        return this.customFieldValueReportControllerFindOne$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: CustomFieldValueReportService, deps: [{ token: ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: CustomFieldValueReportService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: CustomFieldValueReportService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: ApiConfiguration }, { type: i2.HttpClient }] });

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function customFieldValueWidgetControllerFindAll(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, customFieldValueWidgetControllerFindAll.PATH, 'post');
    if (params) {
        rb.query('filter', params.filter, {});
        rb.query('joinWhere', params.joinWhere, {});
        rb.query('select', params.select, {});
        rb.query('groupBy', params.groupBy, {});
        rb.query('sortKey', params.sortKey, {});
        rb.query('sortValue', params.sortValue, {});
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
customFieldValueWidgetControllerFindAll.PATH = '/auth/custom_field_value/custom_field_value_widget';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
class CustomFieldValueWidgetService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `customFieldValueWidgetControllerFindAll()` */
    static { this.CustomFieldValueWidgetControllerFindAllPath = '/auth/custom_field_value/custom_field_value_widget'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `customFieldValueWidgetControllerFindAll()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    customFieldValueWidgetControllerFindAll$Response(params, context) {
        return customFieldValueWidgetControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `customFieldValueWidgetControllerFindAll$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    customFieldValueWidgetControllerFindAll(params, context) {
        return this.customFieldValueWidgetControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: CustomFieldValueWidgetService, deps: [{ token: ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: CustomFieldValueWidgetService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: CustomFieldValueWidgetService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: ApiConfiguration }, { type: i2.HttpClient }] });

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function documentNumberingControllerCreate(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, documentNumberingControllerCreate.PATH, 'post');
    if (params) {
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
documentNumberingControllerCreate.PATH = '/auth/document_numbering/document_numbering';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function documentNumberingControllerFindAll(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, documentNumberingControllerFindAll.PATH, 'get');
    if (params) {
        rb.query('pageIndex', params.pageIndex, {});
        rb.query('pageSize', params.pageSize, {});
        rb.query('filter', params.filter, {});
        rb.query('sortKey', params.sortKey, {});
        rb.query('sortValue', params.sortValue, {});
        rb.query('search_field', params.search_field, {});
        rb.query('search_keyword', params.search_keyword, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
documentNumberingControllerFindAll.PATH = '/auth/document_numbering/document_numbering';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function documentNumberingControllerFindOne(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, documentNumberingControllerFindOne.PATH, 'get');
    if (params) {
        rb.path('id', params.id, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
documentNumberingControllerFindOne.PATH = '/auth/document_numbering/document_numbering/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function documentNumberingControllerRemove(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, documentNumberingControllerRemove.PATH, 'delete');
    if (params) {
        rb.path('id', params.id, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
documentNumberingControllerRemove.PATH = '/auth/document_numbering/document_numbering/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function documentNumberingControllerUpdate(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, documentNumberingControllerUpdate.PATH, 'put');
    if (params) {
        rb.path('id', params.id, {});
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
documentNumberingControllerUpdate.PATH = '/auth/document_numbering/document_numbering/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
class DocumentNumberingService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `documentNumberingControllerFindAll()` */
    static { this.DocumentNumberingControllerFindAllPath = '/auth/document_numbering/document_numbering'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `documentNumberingControllerFindAll()` instead.
     *
     * This method doesn't expect any request body.
     */
    documentNumberingControllerFindAll$Response(params, context) {
        return documentNumberingControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `documentNumberingControllerFindAll$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    documentNumberingControllerFindAll(params, context) {
        return this.documentNumberingControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `documentNumberingControllerCreate()` */
    static { this.DocumentNumberingControllerCreatePath = '/auth/document_numbering/document_numbering'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `documentNumberingControllerCreate()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    documentNumberingControllerCreate$Response(params, context) {
        return documentNumberingControllerCreate(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `documentNumberingControllerCreate$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    documentNumberingControllerCreate(params, context) {
        return this.documentNumberingControllerCreate$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `documentNumberingControllerFindOne()` */
    static { this.DocumentNumberingControllerFindOnePath = '/auth/document_numbering/document_numbering/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `documentNumberingControllerFindOne()` instead.
     *
     * This method doesn't expect any request body.
     */
    documentNumberingControllerFindOne$Response(params, context) {
        return documentNumberingControllerFindOne(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `documentNumberingControllerFindOne$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    documentNumberingControllerFindOne(params, context) {
        return this.documentNumberingControllerFindOne$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `documentNumberingControllerUpdate()` */
    static { this.DocumentNumberingControllerUpdatePath = '/auth/document_numbering/document_numbering/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `documentNumberingControllerUpdate()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    documentNumberingControllerUpdate$Response(params, context) {
        return documentNumberingControllerUpdate(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `documentNumberingControllerUpdate$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    documentNumberingControllerUpdate(params, context) {
        return this.documentNumberingControllerUpdate$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `documentNumberingControllerRemove()` */
    static { this.DocumentNumberingControllerRemovePath = '/auth/document_numbering/document_numbering/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `documentNumberingControllerRemove()` instead.
     *
     * This method doesn't expect any request body.
     */
    documentNumberingControllerRemove$Response(params, context) {
        return documentNumberingControllerRemove(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `documentNumberingControllerRemove$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    documentNumberingControllerRemove(params, context) {
        return this.documentNumberingControllerRemove$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: DocumentNumberingService, deps: [{ token: ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: DocumentNumberingService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: DocumentNumberingService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: ApiConfiguration }, { type: i2.HttpClient }] });

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function documentNumberingCounterControllerCreate(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, documentNumberingCounterControllerCreate.PATH, 'post');
    if (params) {
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
documentNumberingCounterControllerCreate.PATH = '/auth/document_numbering_counter/document_numbering_counter';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function documentNumberingCounterControllerFindAll(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, documentNumberingCounterControllerFindAll.PATH, 'get');
    if (params) {
        rb.query('pageIndex', params.pageIndex, {});
        rb.query('pageSize', params.pageSize, {});
        rb.query('filter', params.filter, {});
        rb.query('sortKey', params.sortKey, {});
        rb.query('sortValue', params.sortValue, {});
        rb.query('search_field', params.search_field, {});
        rb.query('search_keyword', params.search_keyword, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
documentNumberingCounterControllerFindAll.PATH = '/auth/document_numbering_counter/document_numbering_counter';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function documentNumberingCounterControllerFindOne(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, documentNumberingCounterControllerFindOne.PATH, 'get');
    if (params) {
        rb.path('id', params.id, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
documentNumberingCounterControllerFindOne.PATH = '/auth/document_numbering_counter/document_numbering_counter/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function documentNumberingCounterControllerRemove(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, documentNumberingCounterControllerRemove.PATH, 'delete');
    if (params) {
        rb.path('id', params.id, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
documentNumberingCounterControllerRemove.PATH = '/auth/document_numbering_counter/document_numbering_counter/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function documentNumberingCounterControllerUpdate(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, documentNumberingCounterControllerUpdate.PATH, 'put');
    if (params) {
        rb.path('id', params.id, {});
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
documentNumberingCounterControllerUpdate.PATH = '/auth/document_numbering_counter/document_numbering_counter/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
class DocumentNumberingCounterService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `documentNumberingCounterControllerFindAll()` */
    static { this.DocumentNumberingCounterControllerFindAllPath = '/auth/document_numbering_counter/document_numbering_counter'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `documentNumberingCounterControllerFindAll()` instead.
     *
     * This method doesn't expect any request body.
     */
    documentNumberingCounterControllerFindAll$Response(params, context) {
        return documentNumberingCounterControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `documentNumberingCounterControllerFindAll$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    documentNumberingCounterControllerFindAll(params, context) {
        return this.documentNumberingCounterControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `documentNumberingCounterControllerCreate()` */
    static { this.DocumentNumberingCounterControllerCreatePath = '/auth/document_numbering_counter/document_numbering_counter'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `documentNumberingCounterControllerCreate()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    documentNumberingCounterControllerCreate$Response(params, context) {
        return documentNumberingCounterControllerCreate(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `documentNumberingCounterControllerCreate$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    documentNumberingCounterControllerCreate(params, context) {
        return this.documentNumberingCounterControllerCreate$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `documentNumberingCounterControllerFindOne()` */
    static { this.DocumentNumberingCounterControllerFindOnePath = '/auth/document_numbering_counter/document_numbering_counter/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `documentNumberingCounterControllerFindOne()` instead.
     *
     * This method doesn't expect any request body.
     */
    documentNumberingCounterControllerFindOne$Response(params, context) {
        return documentNumberingCounterControllerFindOne(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `documentNumberingCounterControllerFindOne$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    documentNumberingCounterControllerFindOne(params, context) {
        return this.documentNumberingCounterControllerFindOne$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `documentNumberingCounterControllerUpdate()` */
    static { this.DocumentNumberingCounterControllerUpdatePath = '/auth/document_numbering_counter/document_numbering_counter/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `documentNumberingCounterControllerUpdate()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    documentNumberingCounterControllerUpdate$Response(params, context) {
        return documentNumberingCounterControllerUpdate(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `documentNumberingCounterControllerUpdate$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    documentNumberingCounterControllerUpdate(params, context) {
        return this.documentNumberingCounterControllerUpdate$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `documentNumberingCounterControllerRemove()` */
    static { this.DocumentNumberingCounterControllerRemovePath = '/auth/document_numbering_counter/document_numbering_counter/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `documentNumberingCounterControllerRemove()` instead.
     *
     * This method doesn't expect any request body.
     */
    documentNumberingCounterControllerRemove$Response(params, context) {
        return documentNumberingCounterControllerRemove(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `documentNumberingCounterControllerRemove$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    documentNumberingCounterControllerRemove(params, context) {
        return this.documentNumberingCounterControllerRemove$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: DocumentNumberingCounterService, deps: [{ token: ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: DocumentNumberingCounterService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: DocumentNumberingCounterService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: ApiConfiguration }, { type: i2.HttpClient }] });

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function clientControllerCreate(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, clientControllerCreate.PATH, 'post');
    if (params) {
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
clientControllerCreate.PATH = '/client';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function clientControllerFindAll(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, clientControllerFindAll.PATH, 'get');
    if (params) {
        rb.query('pageIndex', params.pageIndex, {});
        rb.query('pageSize', params.pageSize, {});
        rb.query('filter', params.filter, {});
        rb.query('sortKey', params.sortKey, {});
        rb.query('sortValue', params.sortValue, {});
        rb.query('search_field', params.search_field, {});
        rb.query('search_keyword', params.search_keyword, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
clientControllerFindAll.PATH = '/client';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function clientControllerFindOne(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, clientControllerFindOne.PATH, 'get');
    if (params) {
        rb.path('id', params.id, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
clientControllerFindOne.PATH = '/client/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function clientControllerRemove(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, clientControllerRemove.PATH, 'delete');
    if (params) {
        rb.path('id', params.id, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
clientControllerRemove.PATH = '/client/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function clientControllerUpdate(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, clientControllerUpdate.PATH, 'put');
    if (params) {
        rb.path('id', params.id, {});
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
clientControllerUpdate.PATH = '/client/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
class ClientService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `clientControllerFindAll()` */
    static { this.ClientControllerFindAllPath = '/client'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `clientControllerFindAll()` instead.
     *
     * This method doesn't expect any request body.
     */
    clientControllerFindAll$Response(params, context) {
        return clientControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `clientControllerFindAll$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    clientControllerFindAll(params, context) {
        return this.clientControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `clientControllerCreate()` */
    static { this.ClientControllerCreatePath = '/client'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `clientControllerCreate()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    clientControllerCreate$Response(params, context) {
        return clientControllerCreate(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `clientControllerCreate$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    clientControllerCreate(params, context) {
        return this.clientControllerCreate$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `clientControllerFindOne()` */
    static { this.ClientControllerFindOnePath = '/client/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `clientControllerFindOne()` instead.
     *
     * This method doesn't expect any request body.
     */
    clientControllerFindOne$Response(params, context) {
        return clientControllerFindOne(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `clientControllerFindOne$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    clientControllerFindOne(params, context) {
        return this.clientControllerFindOne$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `clientControllerUpdate()` */
    static { this.ClientControllerUpdatePath = '/client/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `clientControllerUpdate()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    clientControllerUpdate$Response(params, context) {
        return clientControllerUpdate(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `clientControllerUpdate$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    clientControllerUpdate(params, context) {
        return this.clientControllerUpdate$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `clientControllerRemove()` */
    static { this.ClientControllerRemovePath = '/client/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `clientControllerRemove()` instead.
     *
     * This method doesn't expect any request body.
     */
    clientControllerRemove$Response(params, context) {
        return clientControllerRemove(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `clientControllerRemove$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    clientControllerRemove(params, context) {
        return this.clientControllerRemove$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: ClientService, deps: [{ token: ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: ClientService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: ClientService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: ApiConfiguration }, { type: i2.HttpClient }] });

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function clientReportControllerFindAll(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, clientReportControllerFindAll.PATH, 'post');
    if (params) {
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
clientReportControllerFindAll.PATH = '/client_report/list';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function clientReportControllerFindOne(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, clientReportControllerFindOne.PATH, 'get');
    if (params) {
        rb.path('id', params.id, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
clientReportControllerFindOne.PATH = '/client_report/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
class ClientReportService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `clientReportControllerFindAll()` */
    static { this.ClientReportControllerFindAllPath = '/client_report/list'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `clientReportControllerFindAll()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    clientReportControllerFindAll$Response(params, context) {
        return clientReportControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `clientReportControllerFindAll$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    clientReportControllerFindAll(params, context) {
        return this.clientReportControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `clientReportControllerFindOne()` */
    static { this.ClientReportControllerFindOnePath = '/client_report/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `clientReportControllerFindOne()` instead.
     *
     * This method doesn't expect any request body.
     */
    clientReportControllerFindOne$Response(params, context) {
        return clientReportControllerFindOne(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `clientReportControllerFindOne$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    clientReportControllerFindOne(params, context) {
        return this.clientReportControllerFindOne$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: ClientReportService, deps: [{ token: ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: ClientReportService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: ClientReportService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: ApiConfiguration }, { type: i2.HttpClient }] });

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function clientWidgetControllerFindAll(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, clientWidgetControllerFindAll.PATH, 'post');
    if (params) {
        rb.query('filter', params.filter, {});
        rb.query('joinWhere', params.joinWhere, {});
        rb.query('select', params.select, {});
        rb.query('groupBy', params.groupBy, {});
        rb.query('sortKey', params.sortKey, {});
        rb.query('sortValue', params.sortValue, {});
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
clientWidgetControllerFindAll.PATH = '/client_widget';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
class ClientWidgetService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `clientWidgetControllerFindAll()` */
    static { this.ClientWidgetControllerFindAllPath = '/client_widget'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `clientWidgetControllerFindAll()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    clientWidgetControllerFindAll$Response(params, context) {
        return clientWidgetControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `clientWidgetControllerFindAll$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    clientWidgetControllerFindAll(params, context) {
        return this.clientWidgetControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: ClientWidgetService, deps: [{ token: ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: ClientWidgetService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: ClientWidgetService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: ApiConfiguration }, { type: i2.HttpClient }] });

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function clientContactControllerCreate(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, clientContactControllerCreate.PATH, 'post');
    if (params) {
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
clientContactControllerCreate.PATH = '/pelanggan/client_contact/client_contact';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function clientContactControllerFindAll(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, clientContactControllerFindAll.PATH, 'get');
    if (params) {
        rb.query('pageIndex', params.pageIndex, {});
        rb.query('pageSize', params.pageSize, {});
        rb.query('filter', params.filter, {});
        rb.query('sortKey', params.sortKey, {});
        rb.query('sortValue', params.sortValue, {});
        rb.query('search_field', params.search_field, {});
        rb.query('search_keyword', params.search_keyword, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
clientContactControllerFindAll.PATH = '/pelanggan/client_contact/client_contact';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function clientContactControllerFindOne(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, clientContactControllerFindOne.PATH, 'get');
    if (params) {
        rb.path('id', params.id, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
clientContactControllerFindOne.PATH = '/pelanggan/client_contact/client_contact/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function clientContactControllerRemove(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, clientContactControllerRemove.PATH, 'delete');
    if (params) {
        rb.path('id', params.id, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
clientContactControllerRemove.PATH = '/pelanggan/client_contact/client_contact/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function clientContactControllerUpdate(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, clientContactControllerUpdate.PATH, 'put');
    if (params) {
        rb.path('id', params.id, {});
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
clientContactControllerUpdate.PATH = '/pelanggan/client_contact/client_contact/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
class ClientContactService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `clientContactControllerFindAll()` */
    static { this.ClientContactControllerFindAllPath = '/pelanggan/client_contact/client_contact'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `clientContactControllerFindAll()` instead.
     *
     * This method doesn't expect any request body.
     */
    clientContactControllerFindAll$Response(params, context) {
        return clientContactControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `clientContactControllerFindAll$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    clientContactControllerFindAll(params, context) {
        return this.clientContactControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `clientContactControllerCreate()` */
    static { this.ClientContactControllerCreatePath = '/pelanggan/client_contact/client_contact'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `clientContactControllerCreate()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    clientContactControllerCreate$Response(params, context) {
        return clientContactControllerCreate(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `clientContactControllerCreate$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    clientContactControllerCreate(params, context) {
        return this.clientContactControllerCreate$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `clientContactControllerFindOne()` */
    static { this.ClientContactControllerFindOnePath = '/pelanggan/client_contact/client_contact/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `clientContactControllerFindOne()` instead.
     *
     * This method doesn't expect any request body.
     */
    clientContactControllerFindOne$Response(params, context) {
        return clientContactControllerFindOne(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `clientContactControllerFindOne$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    clientContactControllerFindOne(params, context) {
        return this.clientContactControllerFindOne$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `clientContactControllerUpdate()` */
    static { this.ClientContactControllerUpdatePath = '/pelanggan/client_contact/client_contact/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `clientContactControllerUpdate()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    clientContactControllerUpdate$Response(params, context) {
        return clientContactControllerUpdate(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `clientContactControllerUpdate$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    clientContactControllerUpdate(params, context) {
        return this.clientContactControllerUpdate$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `clientContactControllerRemove()` */
    static { this.ClientContactControllerRemovePath = '/pelanggan/client_contact/client_contact/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `clientContactControllerRemove()` instead.
     *
     * This method doesn't expect any request body.
     */
    clientContactControllerRemove$Response(params, context) {
        return clientContactControllerRemove(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `clientContactControllerRemove$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    clientContactControllerRemove(params, context) {
        return this.clientContactControllerRemove$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: ClientContactService, deps: [{ token: ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: ClientContactService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: ClientContactService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: ApiConfiguration }, { type: i2.HttpClient }] });

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function clientContactReportControllerFindAll(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, clientContactReportControllerFindAll.PATH, 'post');
    if (params) {
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
clientContactReportControllerFindAll.PATH = '/pelanggan/client_contact/client_contact_report/list';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function clientContactReportControllerFindOne(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, clientContactReportControllerFindOne.PATH, 'get');
    if (params) {
        rb.path('id', params.id, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
clientContactReportControllerFindOne.PATH = '/pelanggan/client_contact/client_contact_report/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
class ClientContactReportService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `clientContactReportControllerFindAll()` */
    static { this.ClientContactReportControllerFindAllPath = '/pelanggan/client_contact/client_contact_report/list'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `clientContactReportControllerFindAll()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    clientContactReportControllerFindAll$Response(params, context) {
        return clientContactReportControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `clientContactReportControllerFindAll$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    clientContactReportControllerFindAll(params, context) {
        return this.clientContactReportControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `clientContactReportControllerFindOne()` */
    static { this.ClientContactReportControllerFindOnePath = '/pelanggan/client_contact/client_contact_report/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `clientContactReportControllerFindOne()` instead.
     *
     * This method doesn't expect any request body.
     */
    clientContactReportControllerFindOne$Response(params, context) {
        return clientContactReportControllerFindOne(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `clientContactReportControllerFindOne$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    clientContactReportControllerFindOne(params, context) {
        return this.clientContactReportControllerFindOne$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: ClientContactReportService, deps: [{ token: ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: ClientContactReportService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: ClientContactReportService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: ApiConfiguration }, { type: i2.HttpClient }] });

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function clientContactWidgetControllerFindAll(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, clientContactWidgetControllerFindAll.PATH, 'post');
    if (params) {
        rb.query('filter', params.filter, {});
        rb.query('joinWhere', params.joinWhere, {});
        rb.query('select', params.select, {});
        rb.query('groupBy', params.groupBy, {});
        rb.query('sortKey', params.sortKey, {});
        rb.query('sortValue', params.sortValue, {});
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
clientContactWidgetControllerFindAll.PATH = '/pelanggan/client_contact/client_contact_widget';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
class ClientContactWidgetService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `clientContactWidgetControllerFindAll()` */
    static { this.ClientContactWidgetControllerFindAllPath = '/pelanggan/client_contact/client_contact_widget'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `clientContactWidgetControllerFindAll()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    clientContactWidgetControllerFindAll$Response(params, context) {
        return clientContactWidgetControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `clientContactWidgetControllerFindAll$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    clientContactWidgetControllerFindAll(params, context) {
        return this.clientContactWidgetControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: ClientContactWidgetService, deps: [{ token: ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: ClientContactWidgetService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: ClientContactWidgetService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: ApiConfiguration }, { type: i2.HttpClient }] });

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function clientSiteControllerCreate(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, clientSiteControllerCreate.PATH, 'post');
    if (params) {
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
clientSiteControllerCreate.PATH = '/pelanggan/client_site/client_site';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function clientSiteControllerFindAll(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, clientSiteControllerFindAll.PATH, 'get');
    if (params) {
        rb.query('pageIndex', params.pageIndex, {});
        rb.query('pageSize', params.pageSize, {});
        rb.query('filter', params.filter, {});
        rb.query('sortKey', params.sortKey, {});
        rb.query('sortValue', params.sortValue, {});
        rb.query('search_field', params.search_field, {});
        rb.query('search_keyword', params.search_keyword, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
clientSiteControllerFindAll.PATH = '/pelanggan/client_site/client_site';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function clientSiteControllerFindOne(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, clientSiteControllerFindOne.PATH, 'get');
    if (params) {
        rb.path('id', params.id, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
clientSiteControllerFindOne.PATH = '/pelanggan/client_site/client_site/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function clientSiteControllerRemove(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, clientSiteControllerRemove.PATH, 'delete');
    if (params) {
        rb.path('id', params.id, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
clientSiteControllerRemove.PATH = '/pelanggan/client_site/client_site/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function clientSiteControllerUpdate(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, clientSiteControllerUpdate.PATH, 'put');
    if (params) {
        rb.path('id', params.id, {});
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
clientSiteControllerUpdate.PATH = '/pelanggan/client_site/client_site/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
class ClientSiteService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `clientSiteControllerFindAll()` */
    static { this.ClientSiteControllerFindAllPath = '/pelanggan/client_site/client_site'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `clientSiteControllerFindAll()` instead.
     *
     * This method doesn't expect any request body.
     */
    clientSiteControllerFindAll$Response(params, context) {
        return clientSiteControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `clientSiteControllerFindAll$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    clientSiteControllerFindAll(params, context) {
        return this.clientSiteControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `clientSiteControllerCreate()` */
    static { this.ClientSiteControllerCreatePath = '/pelanggan/client_site/client_site'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `clientSiteControllerCreate()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    clientSiteControllerCreate$Response(params, context) {
        return clientSiteControllerCreate(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `clientSiteControllerCreate$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    clientSiteControllerCreate(params, context) {
        return this.clientSiteControllerCreate$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `clientSiteControllerFindOne()` */
    static { this.ClientSiteControllerFindOnePath = '/pelanggan/client_site/client_site/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `clientSiteControllerFindOne()` instead.
     *
     * This method doesn't expect any request body.
     */
    clientSiteControllerFindOne$Response(params, context) {
        return clientSiteControllerFindOne(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `clientSiteControllerFindOne$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    clientSiteControllerFindOne(params, context) {
        return this.clientSiteControllerFindOne$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `clientSiteControllerUpdate()` */
    static { this.ClientSiteControllerUpdatePath = '/pelanggan/client_site/client_site/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `clientSiteControllerUpdate()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    clientSiteControllerUpdate$Response(params, context) {
        return clientSiteControllerUpdate(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `clientSiteControllerUpdate$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    clientSiteControllerUpdate(params, context) {
        return this.clientSiteControllerUpdate$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `clientSiteControllerRemove()` */
    static { this.ClientSiteControllerRemovePath = '/pelanggan/client_site/client_site/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `clientSiteControllerRemove()` instead.
     *
     * This method doesn't expect any request body.
     */
    clientSiteControllerRemove$Response(params, context) {
        return clientSiteControllerRemove(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `clientSiteControllerRemove$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    clientSiteControllerRemove(params, context) {
        return this.clientSiteControllerRemove$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: ClientSiteService, deps: [{ token: ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: ClientSiteService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: ClientSiteService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: ApiConfiguration }, { type: i2.HttpClient }] });

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function clientSiteReportControllerFindAll(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, clientSiteReportControllerFindAll.PATH, 'post');
    if (params) {
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
clientSiteReportControllerFindAll.PATH = '/pelanggan/client_site/client_site_report/list';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function clientSiteReportControllerFindOne(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, clientSiteReportControllerFindOne.PATH, 'get');
    if (params) {
        rb.path('id', params.id, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
clientSiteReportControllerFindOne.PATH = '/pelanggan/client_site/client_site_report/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
class ClientSiteReportService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `clientSiteReportControllerFindAll()` */
    static { this.ClientSiteReportControllerFindAllPath = '/pelanggan/client_site/client_site_report/list'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `clientSiteReportControllerFindAll()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    clientSiteReportControllerFindAll$Response(params, context) {
        return clientSiteReportControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `clientSiteReportControllerFindAll$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    clientSiteReportControllerFindAll(params, context) {
        return this.clientSiteReportControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `clientSiteReportControllerFindOne()` */
    static { this.ClientSiteReportControllerFindOnePath = '/pelanggan/client_site/client_site_report/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `clientSiteReportControllerFindOne()` instead.
     *
     * This method doesn't expect any request body.
     */
    clientSiteReportControllerFindOne$Response(params, context) {
        return clientSiteReportControllerFindOne(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `clientSiteReportControllerFindOne$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    clientSiteReportControllerFindOne(params, context) {
        return this.clientSiteReportControllerFindOne$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: ClientSiteReportService, deps: [{ token: ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: ClientSiteReportService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: ClientSiteReportService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: ApiConfiguration }, { type: i2.HttpClient }] });

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function clientSiteWidgetControllerFindAll(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, clientSiteWidgetControllerFindAll.PATH, 'post');
    if (params) {
        rb.query('filter', params.filter, {});
        rb.query('joinWhere', params.joinWhere, {});
        rb.query('select', params.select, {});
        rb.query('groupBy', params.groupBy, {});
        rb.query('sortKey', params.sortKey, {});
        rb.query('sortValue', params.sortValue, {});
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
clientSiteWidgetControllerFindAll.PATH = '/pelanggan/client_site/client_site_widget';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
class ClientSiteWidgetService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `clientSiteWidgetControllerFindAll()` */
    static { this.ClientSiteWidgetControllerFindAllPath = '/pelanggan/client_site/client_site_widget'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `clientSiteWidgetControllerFindAll()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    clientSiteWidgetControllerFindAll$Response(params, context) {
        return clientSiteWidgetControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `clientSiteWidgetControllerFindAll$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    clientSiteWidgetControllerFindAll(params, context) {
        return this.clientSiteWidgetControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: ClientSiteWidgetService, deps: [{ token: ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: ClientSiteWidgetService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: ClientSiteWidgetService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: ApiConfiguration }, { type: i2.HttpClient }] });

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function companyConfigControllerCreate(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, companyConfigControllerCreate.PATH, 'post');
    if (params) {
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
companyConfigControllerCreate.PATH = '/pelanggan/company_config/company_config';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function companyConfigControllerFindAll(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, companyConfigControllerFindAll.PATH, 'get');
    if (params) {
        rb.query('pageIndex', params.pageIndex, {});
        rb.query('pageSize', params.pageSize, {});
        rb.query('filter', params.filter, {});
        rb.query('sortKey', params.sortKey, {});
        rb.query('sortValue', params.sortValue, {});
        rb.query('search_field', params.search_field, {});
        rb.query('search_keyword', params.search_keyword, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
companyConfigControllerFindAll.PATH = '/pelanggan/company_config/company_config';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function companyConfigControllerFindOne(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, companyConfigControllerFindOne.PATH, 'get');
    if (params) {
        rb.path('id', params.id, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
companyConfigControllerFindOne.PATH = '/pelanggan/company_config/company_config/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function companyConfigControllerRemove(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, companyConfigControllerRemove.PATH, 'delete');
    if (params) {
        rb.path('id', params.id, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
companyConfigControllerRemove.PATH = '/pelanggan/company_config/company_config/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function companyConfigControllerUpdate(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, companyConfigControllerUpdate.PATH, 'put');
    if (params) {
        rb.path('id', params.id, {});
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
companyConfigControllerUpdate.PATH = '/pelanggan/company_config/company_config/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
class CompanyConfigService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `companyConfigControllerFindAll()` */
    static { this.CompanyConfigControllerFindAllPath = '/pelanggan/company_config/company_config'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `companyConfigControllerFindAll()` instead.
     *
     * This method doesn't expect any request body.
     */
    companyConfigControllerFindAll$Response(params, context) {
        return companyConfigControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `companyConfigControllerFindAll$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    companyConfigControllerFindAll(params, context) {
        return this.companyConfigControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `companyConfigControllerCreate()` */
    static { this.CompanyConfigControllerCreatePath = '/pelanggan/company_config/company_config'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `companyConfigControllerCreate()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    companyConfigControllerCreate$Response(params, context) {
        return companyConfigControllerCreate(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `companyConfigControllerCreate$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    companyConfigControllerCreate(params, context) {
        return this.companyConfigControllerCreate$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `companyConfigControllerFindOne()` */
    static { this.CompanyConfigControllerFindOnePath = '/pelanggan/company_config/company_config/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `companyConfigControllerFindOne()` instead.
     *
     * This method doesn't expect any request body.
     */
    companyConfigControllerFindOne$Response(params, context) {
        return companyConfigControllerFindOne(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `companyConfigControllerFindOne$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    companyConfigControllerFindOne(params, context) {
        return this.companyConfigControllerFindOne$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `companyConfigControllerUpdate()` */
    static { this.CompanyConfigControllerUpdatePath = '/pelanggan/company_config/company_config/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `companyConfigControllerUpdate()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    companyConfigControllerUpdate$Response(params, context) {
        return companyConfigControllerUpdate(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `companyConfigControllerUpdate$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    companyConfigControllerUpdate(params, context) {
        return this.companyConfigControllerUpdate$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `companyConfigControllerRemove()` */
    static { this.CompanyConfigControllerRemovePath = '/pelanggan/company_config/company_config/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `companyConfigControllerRemove()` instead.
     *
     * This method doesn't expect any request body.
     */
    companyConfigControllerRemove$Response(params, context) {
        return companyConfigControllerRemove(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `companyConfigControllerRemove$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    companyConfigControllerRemove(params, context) {
        return this.companyConfigControllerRemove$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: CompanyConfigService, deps: [{ token: ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: CompanyConfigService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: CompanyConfigService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: ApiConfiguration }, { type: i2.HttpClient }] });

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function companyConfigReportControllerFindAll(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, companyConfigReportControllerFindAll.PATH, 'post');
    if (params) {
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
companyConfigReportControllerFindAll.PATH = '/pelanggan/company_config/company_config_report/list';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function companyConfigReportControllerFindOne(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, companyConfigReportControllerFindOne.PATH, 'get');
    if (params) {
        rb.path('id', params.id, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
companyConfigReportControllerFindOne.PATH = '/pelanggan/company_config/company_config_report/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
class CompanyConfigReportService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `companyConfigReportControllerFindAll()` */
    static { this.CompanyConfigReportControllerFindAllPath = '/pelanggan/company_config/company_config_report/list'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `companyConfigReportControllerFindAll()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    companyConfigReportControllerFindAll$Response(params, context) {
        return companyConfigReportControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `companyConfigReportControllerFindAll$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    companyConfigReportControllerFindAll(params, context) {
        return this.companyConfigReportControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `companyConfigReportControllerFindOne()` */
    static { this.CompanyConfigReportControllerFindOnePath = '/pelanggan/company_config/company_config_report/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `companyConfigReportControllerFindOne()` instead.
     *
     * This method doesn't expect any request body.
     */
    companyConfigReportControllerFindOne$Response(params, context) {
        return companyConfigReportControllerFindOne(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `companyConfigReportControllerFindOne$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    companyConfigReportControllerFindOne(params, context) {
        return this.companyConfigReportControllerFindOne$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: CompanyConfigReportService, deps: [{ token: ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: CompanyConfigReportService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: CompanyConfigReportService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: ApiConfiguration }, { type: i2.HttpClient }] });

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function companyConfigWidgetControllerFindAll(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, companyConfigWidgetControllerFindAll.PATH, 'post');
    if (params) {
        rb.query('filter', params.filter, {});
        rb.query('joinWhere', params.joinWhere, {});
        rb.query('select', params.select, {});
        rb.query('groupBy', params.groupBy, {});
        rb.query('sortKey', params.sortKey, {});
        rb.query('sortValue', params.sortValue, {});
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
companyConfigWidgetControllerFindAll.PATH = '/pelanggan/company_config/company_config_widget';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
class CompanyConfigWidgetService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `companyConfigWidgetControllerFindAll()` */
    static { this.CompanyConfigWidgetControllerFindAllPath = '/pelanggan/company_config/company_config_widget'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `companyConfigWidgetControllerFindAll()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    companyConfigWidgetControllerFindAll$Response(params, context) {
        return companyConfigWidgetControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `companyConfigWidgetControllerFindAll$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    companyConfigWidgetControllerFindAll(params, context) {
        return this.companyConfigWidgetControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: CompanyConfigWidgetService, deps: [{ token: ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: CompanyConfigWidgetService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: CompanyConfigWidgetService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: ApiConfiguration }, { type: i2.HttpClient }] });

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function contactClientUseControllerCreate(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, contactClientUseControllerCreate.PATH, 'post');
    if (params) {
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
contactClientUseControllerCreate.PATH = '/pelanggan/contact_client_use/contact_client_use';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function contactClientUseControllerFindAll(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, contactClientUseControllerFindAll.PATH, 'get');
    if (params) {
        rb.query('pageIndex', params.pageIndex, {});
        rb.query('pageSize', params.pageSize, {});
        rb.query('filter', params.filter, {});
        rb.query('sortKey', params.sortKey, {});
        rb.query('sortValue', params.sortValue, {});
        rb.query('search_field', params.search_field, {});
        rb.query('search_keyword', params.search_keyword, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
contactClientUseControllerFindAll.PATH = '/pelanggan/contact_client_use/contact_client_use';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function contactClientUseControllerFindOne(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, contactClientUseControllerFindOne.PATH, 'get');
    if (params) {
        rb.path('id', params.id, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
contactClientUseControllerFindOne.PATH = '/pelanggan/contact_client_use/contact_client_use/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function contactClientUseControllerRemove(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, contactClientUseControllerRemove.PATH, 'delete');
    if (params) {
        rb.path('id', params.id, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
contactClientUseControllerRemove.PATH = '/pelanggan/contact_client_use/contact_client_use/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function contactClientUseControllerUpdate(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, contactClientUseControllerUpdate.PATH, 'put');
    if (params) {
        rb.path('id', params.id, {});
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
contactClientUseControllerUpdate.PATH = '/pelanggan/contact_client_use/contact_client_use/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
class ContactClientUseService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `contactClientUseControllerFindAll()` */
    static { this.ContactClientUseControllerFindAllPath = '/pelanggan/contact_client_use/contact_client_use'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `contactClientUseControllerFindAll()` instead.
     *
     * This method doesn't expect any request body.
     */
    contactClientUseControllerFindAll$Response(params, context) {
        return contactClientUseControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `contactClientUseControllerFindAll$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    contactClientUseControllerFindAll(params, context) {
        return this.contactClientUseControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `contactClientUseControllerCreate()` */
    static { this.ContactClientUseControllerCreatePath = '/pelanggan/contact_client_use/contact_client_use'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `contactClientUseControllerCreate()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    contactClientUseControllerCreate$Response(params, context) {
        return contactClientUseControllerCreate(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `contactClientUseControllerCreate$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    contactClientUseControllerCreate(params, context) {
        return this.contactClientUseControllerCreate$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `contactClientUseControllerFindOne()` */
    static { this.ContactClientUseControllerFindOnePath = '/pelanggan/contact_client_use/contact_client_use/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `contactClientUseControllerFindOne()` instead.
     *
     * This method doesn't expect any request body.
     */
    contactClientUseControllerFindOne$Response(params, context) {
        return contactClientUseControllerFindOne(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `contactClientUseControllerFindOne$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    contactClientUseControllerFindOne(params, context) {
        return this.contactClientUseControllerFindOne$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `contactClientUseControllerUpdate()` */
    static { this.ContactClientUseControllerUpdatePath = '/pelanggan/contact_client_use/contact_client_use/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `contactClientUseControllerUpdate()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    contactClientUseControllerUpdate$Response(params, context) {
        return contactClientUseControllerUpdate(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `contactClientUseControllerUpdate$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    contactClientUseControllerUpdate(params, context) {
        return this.contactClientUseControllerUpdate$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `contactClientUseControllerRemove()` */
    static { this.ContactClientUseControllerRemovePath = '/pelanggan/contact_client_use/contact_client_use/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `contactClientUseControllerRemove()` instead.
     *
     * This method doesn't expect any request body.
     */
    contactClientUseControllerRemove$Response(params, context) {
        return contactClientUseControllerRemove(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `contactClientUseControllerRemove$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    contactClientUseControllerRemove(params, context) {
        return this.contactClientUseControllerRemove$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: ContactClientUseService, deps: [{ token: ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: ContactClientUseService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: ContactClientUseService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: ApiConfiguration }, { type: i2.HttpClient }] });

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function contactClientUseReportControllerFindAll(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, contactClientUseReportControllerFindAll.PATH, 'post');
    if (params) {
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
contactClientUseReportControllerFindAll.PATH = '/pelanggan/contact_client_use/contact_client_use_report/list';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function contactClientUseReportControllerFindOne(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, contactClientUseReportControllerFindOne.PATH, 'get');
    if (params) {
        rb.path('id', params.id, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
contactClientUseReportControllerFindOne.PATH = '/pelanggan/contact_client_use/contact_client_use_report/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
class ContactClientUseReportService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `contactClientUseReportControllerFindAll()` */
    static { this.ContactClientUseReportControllerFindAllPath = '/pelanggan/contact_client_use/contact_client_use_report/list'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `contactClientUseReportControllerFindAll()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    contactClientUseReportControllerFindAll$Response(params, context) {
        return contactClientUseReportControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `contactClientUseReportControllerFindAll$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    contactClientUseReportControllerFindAll(params, context) {
        return this.contactClientUseReportControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `contactClientUseReportControllerFindOne()` */
    static { this.ContactClientUseReportControllerFindOnePath = '/pelanggan/contact_client_use/contact_client_use_report/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `contactClientUseReportControllerFindOne()` instead.
     *
     * This method doesn't expect any request body.
     */
    contactClientUseReportControllerFindOne$Response(params, context) {
        return contactClientUseReportControllerFindOne(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `contactClientUseReportControllerFindOne$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    contactClientUseReportControllerFindOne(params, context) {
        return this.contactClientUseReportControllerFindOne$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: ContactClientUseReportService, deps: [{ token: ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: ContactClientUseReportService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: ContactClientUseReportService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: ApiConfiguration }, { type: i2.HttpClient }] });

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function contactClientUseWidgetControllerFindAll(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, contactClientUseWidgetControllerFindAll.PATH, 'post');
    if (params) {
        rb.query('filter', params.filter, {});
        rb.query('joinWhere', params.joinWhere, {});
        rb.query('select', params.select, {});
        rb.query('groupBy', params.groupBy, {});
        rb.query('sortKey', params.sortKey, {});
        rb.query('sortValue', params.sortValue, {});
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
contactClientUseWidgetControllerFindAll.PATH = '/pelanggan/contact_client_use/contact_client_use_widget';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
class ContactClientUseWidgetService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `contactClientUseWidgetControllerFindAll()` */
    static { this.ContactClientUseWidgetControllerFindAllPath = '/pelanggan/contact_client_use/contact_client_use_widget'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `contactClientUseWidgetControllerFindAll()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    contactClientUseWidgetControllerFindAll$Response(params, context) {
        return contactClientUseWidgetControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `contactClientUseWidgetControllerFindAll$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    contactClientUseWidgetControllerFindAll(params, context) {
        return this.contactClientUseWidgetControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: ContactClientUseWidgetService, deps: [{ token: ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: ContactClientUseWidgetService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: ContactClientUseWidgetService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: ApiConfiguration }, { type: i2.HttpClient }] });

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function contractControllerCreate(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, contractControllerCreate.PATH, 'post');
    if (params) {
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
contractControllerCreate.PATH = '/pelanggan/contract/contract';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function contractControllerFindAll(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, contractControllerFindAll.PATH, 'get');
    if (params) {
        rb.query('pageIndex', params.pageIndex, {});
        rb.query('pageSize', params.pageSize, {});
        rb.query('filter', params.filter, {});
        rb.query('sortKey', params.sortKey, {});
        rb.query('sortValue', params.sortValue, {});
        rb.query('search_field', params.search_field, {});
        rb.query('search_keyword', params.search_keyword, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
contractControllerFindAll.PATH = '/pelanggan/contract/contract';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function contractControllerFindOne(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, contractControllerFindOne.PATH, 'get');
    if (params) {
        rb.path('id', params.id, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
contractControllerFindOne.PATH = '/pelanggan/contract/contract/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function contractControllerRemove(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, contractControllerRemove.PATH, 'delete');
    if (params) {
        rb.path('id', params.id, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
contractControllerRemove.PATH = '/pelanggan/contract/contract/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function contractControllerUpdate(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, contractControllerUpdate.PATH, 'put');
    if (params) {
        rb.path('id', params.id, {});
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
contractControllerUpdate.PATH = '/pelanggan/contract/contract/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
class ContractService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `contractControllerFindAll()` */
    static { this.ContractControllerFindAllPath = '/pelanggan/contract/contract'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `contractControllerFindAll()` instead.
     *
     * This method doesn't expect any request body.
     */
    contractControllerFindAll$Response(params, context) {
        return contractControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `contractControllerFindAll$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    contractControllerFindAll(params, context) {
        return this.contractControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `contractControllerCreate()` */
    static { this.ContractControllerCreatePath = '/pelanggan/contract/contract'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `contractControllerCreate()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    contractControllerCreate$Response(params, context) {
        return contractControllerCreate(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `contractControllerCreate$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    contractControllerCreate(params, context) {
        return this.contractControllerCreate$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `contractControllerFindOne()` */
    static { this.ContractControllerFindOnePath = '/pelanggan/contract/contract/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `contractControllerFindOne()` instead.
     *
     * This method doesn't expect any request body.
     */
    contractControllerFindOne$Response(params, context) {
        return contractControllerFindOne(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `contractControllerFindOne$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    contractControllerFindOne(params, context) {
        return this.contractControllerFindOne$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `contractControllerUpdate()` */
    static { this.ContractControllerUpdatePath = '/pelanggan/contract/contract/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `contractControllerUpdate()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    contractControllerUpdate$Response(params, context) {
        return contractControllerUpdate(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `contractControllerUpdate$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    contractControllerUpdate(params, context) {
        return this.contractControllerUpdate$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `contractControllerRemove()` */
    static { this.ContractControllerRemovePath = '/pelanggan/contract/contract/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `contractControllerRemove()` instead.
     *
     * This method doesn't expect any request body.
     */
    contractControllerRemove$Response(params, context) {
        return contractControllerRemove(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `contractControllerRemove$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    contractControllerRemove(params, context) {
        return this.contractControllerRemove$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: ContractService, deps: [{ token: ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: ContractService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: ContractService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: ApiConfiguration }, { type: i2.HttpClient }] });

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function contractReportControllerFindAll(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, contractReportControllerFindAll.PATH, 'post');
    if (params) {
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
contractReportControllerFindAll.PATH = '/pelanggan/contract/contract_report/list';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function contractReportControllerFindOne(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, contractReportControllerFindOne.PATH, 'get');
    if (params) {
        rb.path('id', params.id, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
contractReportControllerFindOne.PATH = '/pelanggan/contract/contract_report/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
class ContractReportService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `contractReportControllerFindAll()` */
    static { this.ContractReportControllerFindAllPath = '/pelanggan/contract/contract_report/list'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `contractReportControllerFindAll()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    contractReportControllerFindAll$Response(params, context) {
        return contractReportControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `contractReportControllerFindAll$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    contractReportControllerFindAll(params, context) {
        return this.contractReportControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `contractReportControllerFindOne()` */
    static { this.ContractReportControllerFindOnePath = '/pelanggan/contract/contract_report/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `contractReportControllerFindOne()` instead.
     *
     * This method doesn't expect any request body.
     */
    contractReportControllerFindOne$Response(params, context) {
        return contractReportControllerFindOne(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `contractReportControllerFindOne$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    contractReportControllerFindOne(params, context) {
        return this.contractReportControllerFindOne$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: ContractReportService, deps: [{ token: ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: ContractReportService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: ContractReportService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: ApiConfiguration }, { type: i2.HttpClient }] });

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function contractWidgetControllerFindAll(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, contractWidgetControllerFindAll.PATH, 'post');
    if (params) {
        rb.query('filter', params.filter, {});
        rb.query('joinWhere', params.joinWhere, {});
        rb.query('select', params.select, {});
        rb.query('groupBy', params.groupBy, {});
        rb.query('sortKey', params.sortKey, {});
        rb.query('sortValue', params.sortValue, {});
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
contractWidgetControllerFindAll.PATH = '/pelanggan/contract/contract_widget';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
class ContractWidgetService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `contractWidgetControllerFindAll()` */
    static { this.ContractWidgetControllerFindAllPath = '/pelanggan/contract/contract_widget'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `contractWidgetControllerFindAll()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    contractWidgetControllerFindAll$Response(params, context) {
        return contractWidgetControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `contractWidgetControllerFindAll$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    contractWidgetControllerFindAll(params, context) {
        return this.contractWidgetControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: ContractWidgetService, deps: [{ token: ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: ContractWidgetService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: ContractWidgetService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: ApiConfiguration }, { type: i2.HttpClient }] });

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function contractJenisControllerCreate(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, contractJenisControllerCreate.PATH, 'post');
    if (params) {
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
contractJenisControllerCreate.PATH = '/pelanggan/contract_jenis/contract_jenis';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function contractJenisControllerFindAll(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, contractJenisControllerFindAll.PATH, 'get');
    if (params) {
        rb.query('pageIndex', params.pageIndex, {});
        rb.query('pageSize', params.pageSize, {});
        rb.query('filter', params.filter, {});
        rb.query('sortKey', params.sortKey, {});
        rb.query('sortValue', params.sortValue, {});
        rb.query('search_field', params.search_field, {});
        rb.query('search_keyword', params.search_keyword, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
contractJenisControllerFindAll.PATH = '/pelanggan/contract_jenis/contract_jenis';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function contractJenisControllerFindOne(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, contractJenisControllerFindOne.PATH, 'get');
    if (params) {
        rb.path('id', params.id, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
contractJenisControllerFindOne.PATH = '/pelanggan/contract_jenis/contract_jenis/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function contractJenisControllerRemove(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, contractJenisControllerRemove.PATH, 'delete');
    if (params) {
        rb.path('id', params.id, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
contractJenisControllerRemove.PATH = '/pelanggan/contract_jenis/contract_jenis/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function contractJenisControllerUpdate(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, contractJenisControllerUpdate.PATH, 'put');
    if (params) {
        rb.path('id', params.id, {});
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
contractJenisControllerUpdate.PATH = '/pelanggan/contract_jenis/contract_jenis/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
class ContractJenisService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `contractJenisControllerFindAll()` */
    static { this.ContractJenisControllerFindAllPath = '/pelanggan/contract_jenis/contract_jenis'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `contractJenisControllerFindAll()` instead.
     *
     * This method doesn't expect any request body.
     */
    contractJenisControllerFindAll$Response(params, context) {
        return contractJenisControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `contractJenisControllerFindAll$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    contractJenisControllerFindAll(params, context) {
        return this.contractJenisControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `contractJenisControllerCreate()` */
    static { this.ContractJenisControllerCreatePath = '/pelanggan/contract_jenis/contract_jenis'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `contractJenisControllerCreate()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    contractJenisControllerCreate$Response(params, context) {
        return contractJenisControllerCreate(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `contractJenisControllerCreate$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    contractJenisControllerCreate(params, context) {
        return this.contractJenisControllerCreate$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `contractJenisControllerFindOne()` */
    static { this.ContractJenisControllerFindOnePath = '/pelanggan/contract_jenis/contract_jenis/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `contractJenisControllerFindOne()` instead.
     *
     * This method doesn't expect any request body.
     */
    contractJenisControllerFindOne$Response(params, context) {
        return contractJenisControllerFindOne(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `contractJenisControllerFindOne$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    contractJenisControllerFindOne(params, context) {
        return this.contractJenisControllerFindOne$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `contractJenisControllerUpdate()` */
    static { this.ContractJenisControllerUpdatePath = '/pelanggan/contract_jenis/contract_jenis/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `contractJenisControllerUpdate()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    contractJenisControllerUpdate$Response(params, context) {
        return contractJenisControllerUpdate(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `contractJenisControllerUpdate$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    contractJenisControllerUpdate(params, context) {
        return this.contractJenisControllerUpdate$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `contractJenisControllerRemove()` */
    static { this.ContractJenisControllerRemovePath = '/pelanggan/contract_jenis/contract_jenis/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `contractJenisControllerRemove()` instead.
     *
     * This method doesn't expect any request body.
     */
    contractJenisControllerRemove$Response(params, context) {
        return contractJenisControllerRemove(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `contractJenisControllerRemove$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    contractJenisControllerRemove(params, context) {
        return this.contractJenisControllerRemove$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: ContractJenisService, deps: [{ token: ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: ContractJenisService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: ContractJenisService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: ApiConfiguration }, { type: i2.HttpClient }] });

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function contractJenisReportControllerFindAll(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, contractJenisReportControllerFindAll.PATH, 'post');
    if (params) {
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
contractJenisReportControllerFindAll.PATH = '/pelanggan/contract_jenis/contract_jenis_report/list';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function contractJenisReportControllerFindOne(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, contractJenisReportControllerFindOne.PATH, 'get');
    if (params) {
        rb.path('id', params.id, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
contractJenisReportControllerFindOne.PATH = '/pelanggan/contract_jenis/contract_jenis_report/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
class ContractJenisReportService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `contractJenisReportControllerFindAll()` */
    static { this.ContractJenisReportControllerFindAllPath = '/pelanggan/contract_jenis/contract_jenis_report/list'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `contractJenisReportControllerFindAll()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    contractJenisReportControllerFindAll$Response(params, context) {
        return contractJenisReportControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `contractJenisReportControllerFindAll$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    contractJenisReportControllerFindAll(params, context) {
        return this.contractJenisReportControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `contractJenisReportControllerFindOne()` */
    static { this.ContractJenisReportControllerFindOnePath = '/pelanggan/contract_jenis/contract_jenis_report/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `contractJenisReportControllerFindOne()` instead.
     *
     * This method doesn't expect any request body.
     */
    contractJenisReportControllerFindOne$Response(params, context) {
        return contractJenisReportControllerFindOne(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `contractJenisReportControllerFindOne$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    contractJenisReportControllerFindOne(params, context) {
        return this.contractJenisReportControllerFindOne$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: ContractJenisReportService, deps: [{ token: ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: ContractJenisReportService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: ContractJenisReportService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: ApiConfiguration }, { type: i2.HttpClient }] });

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function contractJenisWidgetControllerFindAll(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, contractJenisWidgetControllerFindAll.PATH, 'post');
    if (params) {
        rb.query('filter', params.filter, {});
        rb.query('joinWhere', params.joinWhere, {});
        rb.query('select', params.select, {});
        rb.query('groupBy', params.groupBy, {});
        rb.query('sortKey', params.sortKey, {});
        rb.query('sortValue', params.sortValue, {});
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
contractJenisWidgetControllerFindAll.PATH = '/pelanggan/contract_jenis/contract_jenis_widget';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
class ContractJenisWidgetService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `contractJenisWidgetControllerFindAll()` */
    static { this.ContractJenisWidgetControllerFindAllPath = '/pelanggan/contract_jenis/contract_jenis_widget'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `contractJenisWidgetControllerFindAll()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    contractJenisWidgetControllerFindAll$Response(params, context) {
        return contractJenisWidgetControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `contractJenisWidgetControllerFindAll$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    contractJenisWidgetControllerFindAll(params, context) {
        return this.contractJenisWidgetControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: ContractJenisWidgetService, deps: [{ token: ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: ContractJenisWidgetService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: ContractJenisWidgetService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: ApiConfiguration }, { type: i2.HttpClient }] });

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function contractSiteControllerCreate(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, contractSiteControllerCreate.PATH, 'post');
    if (params) {
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
contractSiteControllerCreate.PATH = '/pelanggan/contract_site/contract_site';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function contractSiteControllerFindAll(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, contractSiteControllerFindAll.PATH, 'get');
    if (params) {
        rb.query('pageIndex', params.pageIndex, {});
        rb.query('pageSize', params.pageSize, {});
        rb.query('filter', params.filter, {});
        rb.query('sortKey', params.sortKey, {});
        rb.query('sortValue', params.sortValue, {});
        rb.query('search_field', params.search_field, {});
        rb.query('search_keyword', params.search_keyword, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
contractSiteControllerFindAll.PATH = '/pelanggan/contract_site/contract_site';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function contractSiteControllerFindOne(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, contractSiteControllerFindOne.PATH, 'get');
    if (params) {
        rb.path('id', params.id, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
contractSiteControllerFindOne.PATH = '/pelanggan/contract_site/contract_site/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function contractSiteControllerRemove(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, contractSiteControllerRemove.PATH, 'delete');
    if (params) {
        rb.path('id', params.id, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
contractSiteControllerRemove.PATH = '/pelanggan/contract_site/contract_site/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function contractSiteControllerUpdate(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, contractSiteControllerUpdate.PATH, 'put');
    if (params) {
        rb.path('id', params.id, {});
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
contractSiteControllerUpdate.PATH = '/pelanggan/contract_site/contract_site/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
class ContractSiteService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `contractSiteControllerFindAll()` */
    static { this.ContractSiteControllerFindAllPath = '/pelanggan/contract_site/contract_site'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `contractSiteControllerFindAll()` instead.
     *
     * This method doesn't expect any request body.
     */
    contractSiteControllerFindAll$Response(params, context) {
        return contractSiteControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `contractSiteControllerFindAll$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    contractSiteControllerFindAll(params, context) {
        return this.contractSiteControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `contractSiteControllerCreate()` */
    static { this.ContractSiteControllerCreatePath = '/pelanggan/contract_site/contract_site'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `contractSiteControllerCreate()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    contractSiteControllerCreate$Response(params, context) {
        return contractSiteControllerCreate(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `contractSiteControllerCreate$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    contractSiteControllerCreate(params, context) {
        return this.contractSiteControllerCreate$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `contractSiteControllerFindOne()` */
    static { this.ContractSiteControllerFindOnePath = '/pelanggan/contract_site/contract_site/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `contractSiteControllerFindOne()` instead.
     *
     * This method doesn't expect any request body.
     */
    contractSiteControllerFindOne$Response(params, context) {
        return contractSiteControllerFindOne(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `contractSiteControllerFindOne$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    contractSiteControllerFindOne(params, context) {
        return this.contractSiteControllerFindOne$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `contractSiteControllerUpdate()` */
    static { this.ContractSiteControllerUpdatePath = '/pelanggan/contract_site/contract_site/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `contractSiteControllerUpdate()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    contractSiteControllerUpdate$Response(params, context) {
        return contractSiteControllerUpdate(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `contractSiteControllerUpdate$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    contractSiteControllerUpdate(params, context) {
        return this.contractSiteControllerUpdate$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `contractSiteControllerRemove()` */
    static { this.ContractSiteControllerRemovePath = '/pelanggan/contract_site/contract_site/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `contractSiteControllerRemove()` instead.
     *
     * This method doesn't expect any request body.
     */
    contractSiteControllerRemove$Response(params, context) {
        return contractSiteControllerRemove(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `contractSiteControllerRemove$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    contractSiteControllerRemove(params, context) {
        return this.contractSiteControllerRemove$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: ContractSiteService, deps: [{ token: ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: ContractSiteService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: ContractSiteService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: ApiConfiguration }, { type: i2.HttpClient }] });

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function contractSiteReportControllerFindAll(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, contractSiteReportControllerFindAll.PATH, 'post');
    if (params) {
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
contractSiteReportControllerFindAll.PATH = '/pelanggan/contract_site/contract_site_report/list';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function contractSiteReportControllerFindOne(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, contractSiteReportControllerFindOne.PATH, 'get');
    if (params) {
        rb.path('id', params.id, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
contractSiteReportControllerFindOne.PATH = '/pelanggan/contract_site/contract_site_report/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
class ContractSiteReportService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `contractSiteReportControllerFindAll()` */
    static { this.ContractSiteReportControllerFindAllPath = '/pelanggan/contract_site/contract_site_report/list'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `contractSiteReportControllerFindAll()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    contractSiteReportControllerFindAll$Response(params, context) {
        return contractSiteReportControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `contractSiteReportControllerFindAll$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    contractSiteReportControllerFindAll(params, context) {
        return this.contractSiteReportControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `contractSiteReportControllerFindOne()` */
    static { this.ContractSiteReportControllerFindOnePath = '/pelanggan/contract_site/contract_site_report/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `contractSiteReportControllerFindOne()` instead.
     *
     * This method doesn't expect any request body.
     */
    contractSiteReportControllerFindOne$Response(params, context) {
        return contractSiteReportControllerFindOne(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `contractSiteReportControllerFindOne$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    contractSiteReportControllerFindOne(params, context) {
        return this.contractSiteReportControllerFindOne$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: ContractSiteReportService, deps: [{ token: ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: ContractSiteReportService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: ContractSiteReportService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: ApiConfiguration }, { type: i2.HttpClient }] });

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function contractSiteWidgetControllerFindAll(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, contractSiteWidgetControllerFindAll.PATH, 'post');
    if (params) {
        rb.query('filter', params.filter, {});
        rb.query('joinWhere', params.joinWhere, {});
        rb.query('select', params.select, {});
        rb.query('groupBy', params.groupBy, {});
        rb.query('sortKey', params.sortKey, {});
        rb.query('sortValue', params.sortValue, {});
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
contractSiteWidgetControllerFindAll.PATH = '/pelanggan/contract_site/contract_site_widget';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
class ContractSiteWidgetService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `contractSiteWidgetControllerFindAll()` */
    static { this.ContractSiteWidgetControllerFindAllPath = '/pelanggan/contract_site/contract_site_widget'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `contractSiteWidgetControllerFindAll()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    contractSiteWidgetControllerFindAll$Response(params, context) {
        return contractSiteWidgetControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `contractSiteWidgetControllerFindAll$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    contractSiteWidgetControllerFindAll(params, context) {
        return this.contractSiteWidgetControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: ContractSiteWidgetService, deps: [{ token: ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: ContractSiteWidgetService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: ContractSiteWidgetService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: ApiConfiguration }, { type: i2.HttpClient }] });

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function contractSiteServiceControllerCreate(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, contractSiteServiceControllerCreate.PATH, 'post');
    if (params) {
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
contractSiteServiceControllerCreate.PATH = '/pelanggan/contract_site_service/contract_site_service';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function contractSiteServiceControllerFindAll(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, contractSiteServiceControllerFindAll.PATH, 'get');
    if (params) {
        rb.query('pageIndex', params.pageIndex, {});
        rb.query('pageSize', params.pageSize, {});
        rb.query('filter', params.filter, {});
        rb.query('sortKey', params.sortKey, {});
        rb.query('sortValue', params.sortValue, {});
        rb.query('search_field', params.search_field, {});
        rb.query('search_keyword', params.search_keyword, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
contractSiteServiceControllerFindAll.PATH = '/pelanggan/contract_site_service/contract_site_service';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function contractSiteServiceControllerFindOne(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, contractSiteServiceControllerFindOne.PATH, 'get');
    if (params) {
        rb.path('id', params.id, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
contractSiteServiceControllerFindOne.PATH = '/pelanggan/contract_site_service/contract_site_service/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function contractSiteServiceControllerRemove(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, contractSiteServiceControllerRemove.PATH, 'delete');
    if (params) {
        rb.path('id', params.id, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
contractSiteServiceControllerRemove.PATH = '/pelanggan/contract_site_service/contract_site_service/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function contractSiteServiceControllerUpdate(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, contractSiteServiceControllerUpdate.PATH, 'put');
    if (params) {
        rb.path('id', params.id, {});
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
contractSiteServiceControllerUpdate.PATH = '/pelanggan/contract_site_service/contract_site_service/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
class ContractSiteServiceService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `contractSiteServiceControllerFindAll()` */
    static { this.ContractSiteServiceControllerFindAllPath = '/pelanggan/contract_site_service/contract_site_service'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `contractSiteServiceControllerFindAll()` instead.
     *
     * This method doesn't expect any request body.
     */
    contractSiteServiceControllerFindAll$Response(params, context) {
        return contractSiteServiceControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `contractSiteServiceControllerFindAll$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    contractSiteServiceControllerFindAll(params, context) {
        return this.contractSiteServiceControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `contractSiteServiceControllerCreate()` */
    static { this.ContractSiteServiceControllerCreatePath = '/pelanggan/contract_site_service/contract_site_service'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `contractSiteServiceControllerCreate()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    contractSiteServiceControllerCreate$Response(params, context) {
        return contractSiteServiceControllerCreate(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `contractSiteServiceControllerCreate$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    contractSiteServiceControllerCreate(params, context) {
        return this.contractSiteServiceControllerCreate$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `contractSiteServiceControllerFindOne()` */
    static { this.ContractSiteServiceControllerFindOnePath = '/pelanggan/contract_site_service/contract_site_service/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `contractSiteServiceControllerFindOne()` instead.
     *
     * This method doesn't expect any request body.
     */
    contractSiteServiceControllerFindOne$Response(params, context) {
        return contractSiteServiceControllerFindOne(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `contractSiteServiceControllerFindOne$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    contractSiteServiceControllerFindOne(params, context) {
        return this.contractSiteServiceControllerFindOne$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `contractSiteServiceControllerUpdate()` */
    static { this.ContractSiteServiceControllerUpdatePath = '/pelanggan/contract_site_service/contract_site_service/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `contractSiteServiceControllerUpdate()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    contractSiteServiceControllerUpdate$Response(params, context) {
        return contractSiteServiceControllerUpdate(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `contractSiteServiceControllerUpdate$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    contractSiteServiceControllerUpdate(params, context) {
        return this.contractSiteServiceControllerUpdate$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `contractSiteServiceControllerRemove()` */
    static { this.ContractSiteServiceControllerRemovePath = '/pelanggan/contract_site_service/contract_site_service/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `contractSiteServiceControllerRemove()` instead.
     *
     * This method doesn't expect any request body.
     */
    contractSiteServiceControllerRemove$Response(params, context) {
        return contractSiteServiceControllerRemove(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `contractSiteServiceControllerRemove$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    contractSiteServiceControllerRemove(params, context) {
        return this.contractSiteServiceControllerRemove$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: ContractSiteServiceService, deps: [{ token: ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: ContractSiteServiceService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: ContractSiteServiceService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: ApiConfiguration }, { type: i2.HttpClient }] });

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function contractSiteServiceReportControllerFindAll(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, contractSiteServiceReportControllerFindAll.PATH, 'post');
    if (params) {
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
contractSiteServiceReportControllerFindAll.PATH = '/pelanggan/contract_site_service/contract_site_service_report/list';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function contractSiteServiceReportControllerFindOne(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, contractSiteServiceReportControllerFindOne.PATH, 'get');
    if (params) {
        rb.path('id', params.id, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
contractSiteServiceReportControllerFindOne.PATH = '/pelanggan/contract_site_service/contract_site_service_report/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
class ContractSiteServiceReportService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `contractSiteServiceReportControllerFindAll()` */
    static { this.ContractSiteServiceReportControllerFindAllPath = '/pelanggan/contract_site_service/contract_site_service_report/list'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `contractSiteServiceReportControllerFindAll()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    contractSiteServiceReportControllerFindAll$Response(params, context) {
        return contractSiteServiceReportControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `contractSiteServiceReportControllerFindAll$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    contractSiteServiceReportControllerFindAll(params, context) {
        return this.contractSiteServiceReportControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `contractSiteServiceReportControllerFindOne()` */
    static { this.ContractSiteServiceReportControllerFindOnePath = '/pelanggan/contract_site_service/contract_site_service_report/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `contractSiteServiceReportControllerFindOne()` instead.
     *
     * This method doesn't expect any request body.
     */
    contractSiteServiceReportControllerFindOne$Response(params, context) {
        return contractSiteServiceReportControllerFindOne(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `contractSiteServiceReportControllerFindOne$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    contractSiteServiceReportControllerFindOne(params, context) {
        return this.contractSiteServiceReportControllerFindOne$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: ContractSiteServiceReportService, deps: [{ token: ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: ContractSiteServiceReportService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: ContractSiteServiceReportService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: ApiConfiguration }, { type: i2.HttpClient }] });

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function contractSiteServiceWidgetControllerFindAll(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, contractSiteServiceWidgetControllerFindAll.PATH, 'post');
    if (params) {
        rb.query('filter', params.filter, {});
        rb.query('joinWhere', params.joinWhere, {});
        rb.query('select', params.select, {});
        rb.query('groupBy', params.groupBy, {});
        rb.query('sortKey', params.sortKey, {});
        rb.query('sortValue', params.sortValue, {});
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
contractSiteServiceWidgetControllerFindAll.PATH = '/pelanggan/contract_site_service/contract_site_service_widget';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
class ContractSiteServiceWidgetService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `contractSiteServiceWidgetControllerFindAll()` */
    static { this.ContractSiteServiceWidgetControllerFindAllPath = '/pelanggan/contract_site_service/contract_site_service_widget'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `contractSiteServiceWidgetControllerFindAll()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    contractSiteServiceWidgetControllerFindAll$Response(params, context) {
        return contractSiteServiceWidgetControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `contractSiteServiceWidgetControllerFindAll$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    contractSiteServiceWidgetControllerFindAll(params, context) {
        return this.contractSiteServiceWidgetControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: ContractSiteServiceWidgetService, deps: [{ token: ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: ContractSiteServiceWidgetService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: ContractSiteServiceWidgetService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: ApiConfiguration }, { type: i2.HttpClient }] });

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function fakturControllerCreate(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, fakturControllerCreate.PATH, 'post');
    if (params) {
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
fakturControllerCreate.PATH = '/pelanggan/faktur/faktur';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function fakturControllerFindAll(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, fakturControllerFindAll.PATH, 'get');
    if (params) {
        rb.query('pageIndex', params.pageIndex, {});
        rb.query('pageSize', params.pageSize, {});
        rb.query('filter', params.filter, {});
        rb.query('sortKey', params.sortKey, {});
        rb.query('sortValue', params.sortValue, {});
        rb.query('search_field', params.search_field, {});
        rb.query('search_keyword', params.search_keyword, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
fakturControllerFindAll.PATH = '/pelanggan/faktur/faktur';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function fakturControllerFindOne(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, fakturControllerFindOne.PATH, 'get');
    if (params) {
        rb.path('id', params.id, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
fakturControllerFindOne.PATH = '/pelanggan/faktur/faktur/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function fakturControllerRemove(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, fakturControllerRemove.PATH, 'delete');
    if (params) {
        rb.path('id', params.id, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
fakturControllerRemove.PATH = '/pelanggan/faktur/faktur/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function fakturControllerUpdate(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, fakturControllerUpdate.PATH, 'put');
    if (params) {
        rb.path('id', params.id, {});
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
fakturControllerUpdate.PATH = '/pelanggan/faktur/faktur/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
class FakturService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `fakturControllerFindAll()` */
    static { this.FakturControllerFindAllPath = '/pelanggan/faktur/faktur'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `fakturControllerFindAll()` instead.
     *
     * This method doesn't expect any request body.
     */
    fakturControllerFindAll$Response(params, context) {
        return fakturControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `fakturControllerFindAll$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    fakturControllerFindAll(params, context) {
        return this.fakturControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `fakturControllerCreate()` */
    static { this.FakturControllerCreatePath = '/pelanggan/faktur/faktur'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `fakturControllerCreate()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    fakturControllerCreate$Response(params, context) {
        return fakturControllerCreate(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `fakturControllerCreate$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    fakturControllerCreate(params, context) {
        return this.fakturControllerCreate$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `fakturControllerFindOne()` */
    static { this.FakturControllerFindOnePath = '/pelanggan/faktur/faktur/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `fakturControllerFindOne()` instead.
     *
     * This method doesn't expect any request body.
     */
    fakturControllerFindOne$Response(params, context) {
        return fakturControllerFindOne(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `fakturControllerFindOne$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    fakturControllerFindOne(params, context) {
        return this.fakturControllerFindOne$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `fakturControllerUpdate()` */
    static { this.FakturControllerUpdatePath = '/pelanggan/faktur/faktur/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `fakturControllerUpdate()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    fakturControllerUpdate$Response(params, context) {
        return fakturControllerUpdate(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `fakturControllerUpdate$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    fakturControllerUpdate(params, context) {
        return this.fakturControllerUpdate$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `fakturControllerRemove()` */
    static { this.FakturControllerRemovePath = '/pelanggan/faktur/faktur/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `fakturControllerRemove()` instead.
     *
     * This method doesn't expect any request body.
     */
    fakturControllerRemove$Response(params, context) {
        return fakturControllerRemove(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `fakturControllerRemove$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    fakturControllerRemove(params, context) {
        return this.fakturControllerRemove$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: FakturService, deps: [{ token: ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: FakturService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: FakturService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: ApiConfiguration }, { type: i2.HttpClient }] });

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function fakturReportControllerFindAll(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, fakturReportControllerFindAll.PATH, 'post');
    if (params) {
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
fakturReportControllerFindAll.PATH = '/pelanggan/faktur/faktur_report/list';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function fakturReportControllerFindOne(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, fakturReportControllerFindOne.PATH, 'get');
    if (params) {
        rb.path('id', params.id, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
fakturReportControllerFindOne.PATH = '/pelanggan/faktur/faktur_report/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
class FakturReportService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `fakturReportControllerFindAll()` */
    static { this.FakturReportControllerFindAllPath = '/pelanggan/faktur/faktur_report/list'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `fakturReportControllerFindAll()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    fakturReportControllerFindAll$Response(params, context) {
        return fakturReportControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `fakturReportControllerFindAll$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    fakturReportControllerFindAll(params, context) {
        return this.fakturReportControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `fakturReportControllerFindOne()` */
    static { this.FakturReportControllerFindOnePath = '/pelanggan/faktur/faktur_report/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `fakturReportControllerFindOne()` instead.
     *
     * This method doesn't expect any request body.
     */
    fakturReportControllerFindOne$Response(params, context) {
        return fakturReportControllerFindOne(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `fakturReportControllerFindOne$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    fakturReportControllerFindOne(params, context) {
        return this.fakturReportControllerFindOne$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: FakturReportService, deps: [{ token: ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: FakturReportService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: FakturReportService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: ApiConfiguration }, { type: i2.HttpClient }] });

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function fakturWidgetControllerFindAll(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, fakturWidgetControllerFindAll.PATH, 'post');
    if (params) {
        rb.query('filter', params.filter, {});
        rb.query('joinWhere', params.joinWhere, {});
        rb.query('select', params.select, {});
        rb.query('groupBy', params.groupBy, {});
        rb.query('sortKey', params.sortKey, {});
        rb.query('sortValue', params.sortValue, {});
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
fakturWidgetControllerFindAll.PATH = '/pelanggan/faktur/faktur_widget';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
class FakturWidgetService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `fakturWidgetControllerFindAll()` */
    static { this.FakturWidgetControllerFindAllPath = '/pelanggan/faktur/faktur_widget'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `fakturWidgetControllerFindAll()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    fakturWidgetControllerFindAll$Response(params, context) {
        return fakturWidgetControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `fakturWidgetControllerFindAll$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    fakturWidgetControllerFindAll(params, context) {
        return this.fakturWidgetControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: FakturWidgetService, deps: [{ token: ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: FakturWidgetService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: FakturWidgetService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: ApiConfiguration }, { type: i2.HttpClient }] });

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function invoiceControllerCreate(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, invoiceControllerCreate.PATH, 'post');
    if (params) {
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
invoiceControllerCreate.PATH = '/pelanggan/invoice/invoice';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function invoiceControllerFindAll(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, invoiceControllerFindAll.PATH, 'get');
    if (params) {
        rb.query('pageIndex', params.pageIndex, {});
        rb.query('pageSize', params.pageSize, {});
        rb.query('filter', params.filter, {});
        rb.query('sortKey', params.sortKey, {});
        rb.query('sortValue', params.sortValue, {});
        rb.query('search_field', params.search_field, {});
        rb.query('search_keyword', params.search_keyword, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
invoiceControllerFindAll.PATH = '/pelanggan/invoice/invoice';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function invoiceControllerFindOne(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, invoiceControllerFindOne.PATH, 'get');
    if (params) {
        rb.path('id', params.id, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
invoiceControllerFindOne.PATH = '/pelanggan/invoice/invoice/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function invoiceControllerRemove(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, invoiceControllerRemove.PATH, 'delete');
    if (params) {
        rb.path('id', params.id, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
invoiceControllerRemove.PATH = '/pelanggan/invoice/invoice/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function invoiceControllerUpdate(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, invoiceControllerUpdate.PATH, 'put');
    if (params) {
        rb.path('id', params.id, {});
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
invoiceControllerUpdate.PATH = '/pelanggan/invoice/invoice/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
class InvoiceService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `invoiceControllerFindAll()` */
    static { this.InvoiceControllerFindAllPath = '/pelanggan/invoice/invoice'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `invoiceControllerFindAll()` instead.
     *
     * This method doesn't expect any request body.
     */
    invoiceControllerFindAll$Response(params, context) {
        return invoiceControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `invoiceControllerFindAll$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    invoiceControllerFindAll(params, context) {
        return this.invoiceControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `invoiceControllerCreate()` */
    static { this.InvoiceControllerCreatePath = '/pelanggan/invoice/invoice'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `invoiceControllerCreate()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    invoiceControllerCreate$Response(params, context) {
        return invoiceControllerCreate(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `invoiceControllerCreate$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    invoiceControllerCreate(params, context) {
        return this.invoiceControllerCreate$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `invoiceControllerFindOne()` */
    static { this.InvoiceControllerFindOnePath = '/pelanggan/invoice/invoice/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `invoiceControllerFindOne()` instead.
     *
     * This method doesn't expect any request body.
     */
    invoiceControllerFindOne$Response(params, context) {
        return invoiceControllerFindOne(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `invoiceControllerFindOne$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    invoiceControllerFindOne(params, context) {
        return this.invoiceControllerFindOne$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `invoiceControllerUpdate()` */
    static { this.InvoiceControllerUpdatePath = '/pelanggan/invoice/invoice/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `invoiceControllerUpdate()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    invoiceControllerUpdate$Response(params, context) {
        return invoiceControllerUpdate(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `invoiceControllerUpdate$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    invoiceControllerUpdate(params, context) {
        return this.invoiceControllerUpdate$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `invoiceControllerRemove()` */
    static { this.InvoiceControllerRemovePath = '/pelanggan/invoice/invoice/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `invoiceControllerRemove()` instead.
     *
     * This method doesn't expect any request body.
     */
    invoiceControllerRemove$Response(params, context) {
        return invoiceControllerRemove(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `invoiceControllerRemove$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    invoiceControllerRemove(params, context) {
        return this.invoiceControllerRemove$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: InvoiceService, deps: [{ token: ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: InvoiceService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: InvoiceService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: ApiConfiguration }, { type: i2.HttpClient }] });

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function invoiceReportControllerFindAll(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, invoiceReportControllerFindAll.PATH, 'post');
    if (params) {
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
invoiceReportControllerFindAll.PATH = '/pelanggan/invoice/invoice_report/list';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function invoiceReportControllerFindOne(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, invoiceReportControllerFindOne.PATH, 'get');
    if (params) {
        rb.path('id', params.id, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
invoiceReportControllerFindOne.PATH = '/pelanggan/invoice/invoice_report/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
class InvoiceReportService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `invoiceReportControllerFindAll()` */
    static { this.InvoiceReportControllerFindAllPath = '/pelanggan/invoice/invoice_report/list'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `invoiceReportControllerFindAll()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    invoiceReportControllerFindAll$Response(params, context) {
        return invoiceReportControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `invoiceReportControllerFindAll$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    invoiceReportControllerFindAll(params, context) {
        return this.invoiceReportControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `invoiceReportControllerFindOne()` */
    static { this.InvoiceReportControllerFindOnePath = '/pelanggan/invoice/invoice_report/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `invoiceReportControllerFindOne()` instead.
     *
     * This method doesn't expect any request body.
     */
    invoiceReportControllerFindOne$Response(params, context) {
        return invoiceReportControllerFindOne(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `invoiceReportControllerFindOne$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    invoiceReportControllerFindOne(params, context) {
        return this.invoiceReportControllerFindOne$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: InvoiceReportService, deps: [{ token: ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: InvoiceReportService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: InvoiceReportService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: ApiConfiguration }, { type: i2.HttpClient }] });

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function invoiceWidgetControllerFindAll(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, invoiceWidgetControllerFindAll.PATH, 'post');
    if (params) {
        rb.query('filter', params.filter, {});
        rb.query('joinWhere', params.joinWhere, {});
        rb.query('select', params.select, {});
        rb.query('groupBy', params.groupBy, {});
        rb.query('sortKey', params.sortKey, {});
        rb.query('sortValue', params.sortValue, {});
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
invoiceWidgetControllerFindAll.PATH = '/pelanggan/invoice/invoice_widget';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
class InvoiceWidgetService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `invoiceWidgetControllerFindAll()` */
    static { this.InvoiceWidgetControllerFindAllPath = '/pelanggan/invoice/invoice_widget'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `invoiceWidgetControllerFindAll()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    invoiceWidgetControllerFindAll$Response(params, context) {
        return invoiceWidgetControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `invoiceWidgetControllerFindAll$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    invoiceWidgetControllerFindAll(params, context) {
        return this.invoiceWidgetControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: InvoiceWidgetService, deps: [{ token: ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: InvoiceWidgetService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: InvoiceWidgetService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: ApiConfiguration }, { type: i2.HttpClient }] });

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function kantorControllerCreate(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, kantorControllerCreate.PATH, 'post');
    if (params) {
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
kantorControllerCreate.PATH = '/pelanggan/kantor/kantor';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function kantorControllerFindAll(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, kantorControllerFindAll.PATH, 'get');
    if (params) {
        rb.query('pageIndex', params.pageIndex, {});
        rb.query('pageSize', params.pageSize, {});
        rb.query('filter', params.filter, {});
        rb.query('sortKey', params.sortKey, {});
        rb.query('sortValue', params.sortValue, {});
        rb.query('search_field', params.search_field, {});
        rb.query('search_keyword', params.search_keyword, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
kantorControllerFindAll.PATH = '/pelanggan/kantor/kantor';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function kantorControllerFindOne(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, kantorControllerFindOne.PATH, 'get');
    if (params) {
        rb.path('id', params.id, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
kantorControllerFindOne.PATH = '/pelanggan/kantor/kantor/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function kantorControllerRemove(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, kantorControllerRemove.PATH, 'delete');
    if (params) {
        rb.path('id', params.id, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
kantorControllerRemove.PATH = '/pelanggan/kantor/kantor/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function kantorControllerUpdate(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, kantorControllerUpdate.PATH, 'put');
    if (params) {
        rb.path('id', params.id, {});
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
kantorControllerUpdate.PATH = '/pelanggan/kantor/kantor/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
class KantorService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `kantorControllerFindAll()` */
    static { this.KantorControllerFindAllPath = '/pelanggan/kantor/kantor'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `kantorControllerFindAll()` instead.
     *
     * This method doesn't expect any request body.
     */
    kantorControllerFindAll$Response(params, context) {
        return kantorControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `kantorControllerFindAll$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    kantorControllerFindAll(params, context) {
        return this.kantorControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `kantorControllerCreate()` */
    static { this.KantorControllerCreatePath = '/pelanggan/kantor/kantor'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `kantorControllerCreate()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    kantorControllerCreate$Response(params, context) {
        return kantorControllerCreate(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `kantorControllerCreate$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    kantorControllerCreate(params, context) {
        return this.kantorControllerCreate$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `kantorControllerFindOne()` */
    static { this.KantorControllerFindOnePath = '/pelanggan/kantor/kantor/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `kantorControllerFindOne()` instead.
     *
     * This method doesn't expect any request body.
     */
    kantorControllerFindOne$Response(params, context) {
        return kantorControllerFindOne(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `kantorControllerFindOne$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    kantorControllerFindOne(params, context) {
        return this.kantorControllerFindOne$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `kantorControllerUpdate()` */
    static { this.KantorControllerUpdatePath = '/pelanggan/kantor/kantor/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `kantorControllerUpdate()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    kantorControllerUpdate$Response(params, context) {
        return kantorControllerUpdate(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `kantorControllerUpdate$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    kantorControllerUpdate(params, context) {
        return this.kantorControllerUpdate$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `kantorControllerRemove()` */
    static { this.KantorControllerRemovePath = '/pelanggan/kantor/kantor/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `kantorControllerRemove()` instead.
     *
     * This method doesn't expect any request body.
     */
    kantorControllerRemove$Response(params, context) {
        return kantorControllerRemove(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `kantorControllerRemove$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    kantorControllerRemove(params, context) {
        return this.kantorControllerRemove$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: KantorService, deps: [{ token: ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: KantorService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: KantorService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: ApiConfiguration }, { type: i2.HttpClient }] });

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function kantorReportControllerFindAll(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, kantorReportControllerFindAll.PATH, 'post');
    if (params) {
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
kantorReportControllerFindAll.PATH = '/pelanggan/kantor/kantor_report/list';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function kantorReportControllerFindOne(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, kantorReportControllerFindOne.PATH, 'get');
    if (params) {
        rb.path('id', params.id, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
kantorReportControllerFindOne.PATH = '/pelanggan/kantor/kantor_report/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
class KantorReportService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `kantorReportControllerFindAll()` */
    static { this.KantorReportControllerFindAllPath = '/pelanggan/kantor/kantor_report/list'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `kantorReportControllerFindAll()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    kantorReportControllerFindAll$Response(params, context) {
        return kantorReportControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `kantorReportControllerFindAll$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    kantorReportControllerFindAll(params, context) {
        return this.kantorReportControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `kantorReportControllerFindOne()` */
    static { this.KantorReportControllerFindOnePath = '/pelanggan/kantor/kantor_report/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `kantorReportControllerFindOne()` instead.
     *
     * This method doesn't expect any request body.
     */
    kantorReportControllerFindOne$Response(params, context) {
        return kantorReportControllerFindOne(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `kantorReportControllerFindOne$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    kantorReportControllerFindOne(params, context) {
        return this.kantorReportControllerFindOne$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: KantorReportService, deps: [{ token: ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: KantorReportService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: KantorReportService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: ApiConfiguration }, { type: i2.HttpClient }] });

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function kantorWidgetControllerFindAll(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, kantorWidgetControllerFindAll.PATH, 'post');
    if (params) {
        rb.query('filter', params.filter, {});
        rb.query('joinWhere', params.joinWhere, {});
        rb.query('select', params.select, {});
        rb.query('groupBy', params.groupBy, {});
        rb.query('sortKey', params.sortKey, {});
        rb.query('sortValue', params.sortValue, {});
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
kantorWidgetControllerFindAll.PATH = '/pelanggan/kantor/kantor_widget';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
class KantorWidgetService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `kantorWidgetControllerFindAll()` */
    static { this.KantorWidgetControllerFindAllPath = '/pelanggan/kantor/kantor_widget'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `kantorWidgetControllerFindAll()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    kantorWidgetControllerFindAll$Response(params, context) {
        return kantorWidgetControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `kantorWidgetControllerFindAll$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    kantorWidgetControllerFindAll(params, context) {
        return this.kantorWidgetControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: KantorWidgetService, deps: [{ token: ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: KantorWidgetService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: KantorWidgetService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: ApiConfiguration }, { type: i2.HttpClient }] });

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function serviceControllerCreate(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, serviceControllerCreate.PATH, 'post');
    if (params) {
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
serviceControllerCreate.PATH = '/pelanggan/service/service';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function serviceControllerFindAll(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, serviceControllerFindAll.PATH, 'get');
    if (params) {
        rb.query('pageIndex', params.pageIndex, {});
        rb.query('pageSize', params.pageSize, {});
        rb.query('filter', params.filter, {});
        rb.query('sortKey', params.sortKey, {});
        rb.query('sortValue', params.sortValue, {});
        rb.query('search_field', params.search_field, {});
        rb.query('search_keyword', params.search_keyword, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
serviceControllerFindAll.PATH = '/pelanggan/service/service';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function serviceControllerFindOne(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, serviceControllerFindOne.PATH, 'get');
    if (params) {
        rb.path('id', params.id, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
serviceControllerFindOne.PATH = '/pelanggan/service/service/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function serviceControllerRemove(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, serviceControllerRemove.PATH, 'delete');
    if (params) {
        rb.path('id', params.id, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
serviceControllerRemove.PATH = '/pelanggan/service/service/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function serviceControllerUpdate(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, serviceControllerUpdate.PATH, 'put');
    if (params) {
        rb.path('id', params.id, {});
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
serviceControllerUpdate.PATH = '/pelanggan/service/service/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
class ServiceService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `serviceControllerFindAll()` */
    static { this.ServiceControllerFindAllPath = '/pelanggan/service/service'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `serviceControllerFindAll()` instead.
     *
     * This method doesn't expect any request body.
     */
    serviceControllerFindAll$Response(params, context) {
        return serviceControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `serviceControllerFindAll$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    serviceControllerFindAll(params, context) {
        return this.serviceControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `serviceControllerCreate()` */
    static { this.ServiceControllerCreatePath = '/pelanggan/service/service'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `serviceControllerCreate()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    serviceControllerCreate$Response(params, context) {
        return serviceControllerCreate(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `serviceControllerCreate$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    serviceControllerCreate(params, context) {
        return this.serviceControllerCreate$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `serviceControllerFindOne()` */
    static { this.ServiceControllerFindOnePath = '/pelanggan/service/service/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `serviceControllerFindOne()` instead.
     *
     * This method doesn't expect any request body.
     */
    serviceControllerFindOne$Response(params, context) {
        return serviceControllerFindOne(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `serviceControllerFindOne$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    serviceControllerFindOne(params, context) {
        return this.serviceControllerFindOne$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `serviceControllerUpdate()` */
    static { this.ServiceControllerUpdatePath = '/pelanggan/service/service/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `serviceControllerUpdate()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    serviceControllerUpdate$Response(params, context) {
        return serviceControllerUpdate(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `serviceControllerUpdate$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    serviceControllerUpdate(params, context) {
        return this.serviceControllerUpdate$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `serviceControllerRemove()` */
    static { this.ServiceControllerRemovePath = '/pelanggan/service/service/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `serviceControllerRemove()` instead.
     *
     * This method doesn't expect any request body.
     */
    serviceControllerRemove$Response(params, context) {
        return serviceControllerRemove(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `serviceControllerRemove$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    serviceControllerRemove(params, context) {
        return this.serviceControllerRemove$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: ServiceService, deps: [{ token: ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: ServiceService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: ServiceService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: ApiConfiguration }, { type: i2.HttpClient }] });

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function serviceReportControllerFindAll(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, serviceReportControllerFindAll.PATH, 'post');
    if (params) {
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
serviceReportControllerFindAll.PATH = '/pelanggan/service/service_report/list';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function serviceReportControllerFindOne(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, serviceReportControllerFindOne.PATH, 'get');
    if (params) {
        rb.path('id', params.id, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
serviceReportControllerFindOne.PATH = '/pelanggan/service/service_report/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
class ServiceReportService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `serviceReportControllerFindAll()` */
    static { this.ServiceReportControllerFindAllPath = '/pelanggan/service/service_report/list'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `serviceReportControllerFindAll()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    serviceReportControllerFindAll$Response(params, context) {
        return serviceReportControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `serviceReportControllerFindAll$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    serviceReportControllerFindAll(params, context) {
        return this.serviceReportControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `serviceReportControllerFindOne()` */
    static { this.ServiceReportControllerFindOnePath = '/pelanggan/service/service_report/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `serviceReportControllerFindOne()` instead.
     *
     * This method doesn't expect any request body.
     */
    serviceReportControllerFindOne$Response(params, context) {
        return serviceReportControllerFindOne(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `serviceReportControllerFindOne$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    serviceReportControllerFindOne(params, context) {
        return this.serviceReportControllerFindOne$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: ServiceReportService, deps: [{ token: ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: ServiceReportService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: ServiceReportService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: ApiConfiguration }, { type: i2.HttpClient }] });

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function serviceWidgetControllerFindAll(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, serviceWidgetControllerFindAll.PATH, 'post');
    if (params) {
        rb.query('filter', params.filter, {});
        rb.query('joinWhere', params.joinWhere, {});
        rb.query('select', params.select, {});
        rb.query('groupBy', params.groupBy, {});
        rb.query('sortKey', params.sortKey, {});
        rb.query('sortValue', params.sortValue, {});
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
serviceWidgetControllerFindAll.PATH = '/pelanggan/service/service_widget';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
class ServiceWidgetService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `serviceWidgetControllerFindAll()` */
    static { this.ServiceWidgetControllerFindAllPath = '/pelanggan/service/service_widget'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `serviceWidgetControllerFindAll()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    serviceWidgetControllerFindAll$Response(params, context) {
        return serviceWidgetControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `serviceWidgetControllerFindAll$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    serviceWidgetControllerFindAll(params, context) {
        return this.serviceWidgetControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: ServiceWidgetService, deps: [{ token: ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: ServiceWidgetService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: ServiceWidgetService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: ApiConfiguration }, { type: i2.HttpClient }] });

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function teknisiControllerCreate(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, teknisiControllerCreate.PATH, 'post');
    if (params) {
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
teknisiControllerCreate.PATH = '/pelanggan/teknisi/teknisi';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function teknisiControllerFindAll(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, teknisiControllerFindAll.PATH, 'get');
    if (params) {
        rb.query('pageIndex', params.pageIndex, {});
        rb.query('pageSize', params.pageSize, {});
        rb.query('filter', params.filter, {});
        rb.query('sortKey', params.sortKey, {});
        rb.query('sortValue', params.sortValue, {});
        rb.query('search_field', params.search_field, {});
        rb.query('search_keyword', params.search_keyword, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
teknisiControllerFindAll.PATH = '/pelanggan/teknisi/teknisi';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function teknisiControllerFindOne(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, teknisiControllerFindOne.PATH, 'get');
    if (params) {
        rb.path('id', params.id, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
teknisiControllerFindOne.PATH = '/pelanggan/teknisi/teknisi/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function teknisiControllerRemove(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, teknisiControllerRemove.PATH, 'delete');
    if (params) {
        rb.path('id', params.id, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
teknisiControllerRemove.PATH = '/pelanggan/teknisi/teknisi/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function teknisiControllerUpdate(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, teknisiControllerUpdate.PATH, 'put');
    if (params) {
        rb.path('id', params.id, {});
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
teknisiControllerUpdate.PATH = '/pelanggan/teknisi/teknisi/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
class TeknisiService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `teknisiControllerFindAll()` */
    static { this.TeknisiControllerFindAllPath = '/pelanggan/teknisi/teknisi'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `teknisiControllerFindAll()` instead.
     *
     * This method doesn't expect any request body.
     */
    teknisiControllerFindAll$Response(params, context) {
        return teknisiControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `teknisiControllerFindAll$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    teknisiControllerFindAll(params, context) {
        return this.teknisiControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `teknisiControllerCreate()` */
    static { this.TeknisiControllerCreatePath = '/pelanggan/teknisi/teknisi'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `teknisiControllerCreate()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    teknisiControllerCreate$Response(params, context) {
        return teknisiControllerCreate(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `teknisiControllerCreate$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    teknisiControllerCreate(params, context) {
        return this.teknisiControllerCreate$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `teknisiControllerFindOne()` */
    static { this.TeknisiControllerFindOnePath = '/pelanggan/teknisi/teknisi/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `teknisiControllerFindOne()` instead.
     *
     * This method doesn't expect any request body.
     */
    teknisiControllerFindOne$Response(params, context) {
        return teknisiControllerFindOne(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `teknisiControllerFindOne$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    teknisiControllerFindOne(params, context) {
        return this.teknisiControllerFindOne$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `teknisiControllerUpdate()` */
    static { this.TeknisiControllerUpdatePath = '/pelanggan/teknisi/teknisi/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `teknisiControllerUpdate()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    teknisiControllerUpdate$Response(params, context) {
        return teknisiControllerUpdate(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `teknisiControllerUpdate$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    teknisiControllerUpdate(params, context) {
        return this.teknisiControllerUpdate$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `teknisiControllerRemove()` */
    static { this.TeknisiControllerRemovePath = '/pelanggan/teknisi/teknisi/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `teknisiControllerRemove()` instead.
     *
     * This method doesn't expect any request body.
     */
    teknisiControllerRemove$Response(params, context) {
        return teknisiControllerRemove(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `teknisiControllerRemove$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    teknisiControllerRemove(params, context) {
        return this.teknisiControllerRemove$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: TeknisiService, deps: [{ token: ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: TeknisiService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: TeknisiService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: ApiConfiguration }, { type: i2.HttpClient }] });

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function teknisiReportControllerFindAll(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, teknisiReportControllerFindAll.PATH, 'post');
    if (params) {
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
teknisiReportControllerFindAll.PATH = '/pelanggan/teknisi/teknisi_report/list';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function teknisiReportControllerFindOne(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, teknisiReportControllerFindOne.PATH, 'get');
    if (params) {
        rb.path('id', params.id, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
teknisiReportControllerFindOne.PATH = '/pelanggan/teknisi/teknisi_report/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
class TeknisiReportService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `teknisiReportControllerFindAll()` */
    static { this.TeknisiReportControllerFindAllPath = '/pelanggan/teknisi/teknisi_report/list'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `teknisiReportControllerFindAll()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    teknisiReportControllerFindAll$Response(params, context) {
        return teknisiReportControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `teknisiReportControllerFindAll$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    teknisiReportControllerFindAll(params, context) {
        return this.teknisiReportControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `teknisiReportControllerFindOne()` */
    static { this.TeknisiReportControllerFindOnePath = '/pelanggan/teknisi/teknisi_report/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `teknisiReportControllerFindOne()` instead.
     *
     * This method doesn't expect any request body.
     */
    teknisiReportControllerFindOne$Response(params, context) {
        return teknisiReportControllerFindOne(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `teknisiReportControllerFindOne$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    teknisiReportControllerFindOne(params, context) {
        return this.teknisiReportControllerFindOne$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: TeknisiReportService, deps: [{ token: ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: TeknisiReportService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: TeknisiReportService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: ApiConfiguration }, { type: i2.HttpClient }] });

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function teknisiWidgetControllerFindAll(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, teknisiWidgetControllerFindAll.PATH, 'post');
    if (params) {
        rb.query('filter', params.filter, {});
        rb.query('joinWhere', params.joinWhere, {});
        rb.query('select', params.select, {});
        rb.query('groupBy', params.groupBy, {});
        rb.query('sortKey', params.sortKey, {});
        rb.query('sortValue', params.sortValue, {});
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
teknisiWidgetControllerFindAll.PATH = '/pelanggan/teknisi/teknisi_widget';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
class TeknisiWidgetService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `teknisiWidgetControllerFindAll()` */
    static { this.TeknisiWidgetControllerFindAllPath = '/pelanggan/teknisi/teknisi_widget'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `teknisiWidgetControllerFindAll()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    teknisiWidgetControllerFindAll$Response(params, context) {
        return teknisiWidgetControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `teknisiWidgetControllerFindAll$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    teknisiWidgetControllerFindAll(params, context) {
        return this.teknisiWidgetControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: TeknisiWidgetService, deps: [{ token: ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: TeknisiWidgetService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: TeknisiWidgetService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: ApiConfiguration }, { type: i2.HttpClient }] });

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function workScheduleControllerCreate(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, workScheduleControllerCreate.PATH, 'post');
    if (params) {
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
workScheduleControllerCreate.PATH = '/pelanggan/work_schedule/work_schedule';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function workScheduleControllerFindAll(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, workScheduleControllerFindAll.PATH, 'get');
    if (params) {
        rb.query('pageIndex', params.pageIndex, {});
        rb.query('pageSize', params.pageSize, {});
        rb.query('filter', params.filter, {});
        rb.query('sortKey', params.sortKey, {});
        rb.query('sortValue', params.sortValue, {});
        rb.query('search_field', params.search_field, {});
        rb.query('search_keyword', params.search_keyword, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
workScheduleControllerFindAll.PATH = '/pelanggan/work_schedule/work_schedule';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function workScheduleControllerFindOne(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, workScheduleControllerFindOne.PATH, 'get');
    if (params) {
        rb.path('id', params.id, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
workScheduleControllerFindOne.PATH = '/pelanggan/work_schedule/work_schedule/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function workScheduleControllerRemove(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, workScheduleControllerRemove.PATH, 'delete');
    if (params) {
        rb.path('id', params.id, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
workScheduleControllerRemove.PATH = '/pelanggan/work_schedule/work_schedule/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function workScheduleControllerUpdate(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, workScheduleControllerUpdate.PATH, 'put');
    if (params) {
        rb.path('id', params.id, {});
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
workScheduleControllerUpdate.PATH = '/pelanggan/work_schedule/work_schedule/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
class WorkScheduleService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `workScheduleControllerFindAll()` */
    static { this.WorkScheduleControllerFindAllPath = '/pelanggan/work_schedule/work_schedule'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `workScheduleControllerFindAll()` instead.
     *
     * This method doesn't expect any request body.
     */
    workScheduleControllerFindAll$Response(params, context) {
        return workScheduleControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `workScheduleControllerFindAll$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    workScheduleControllerFindAll(params, context) {
        return this.workScheduleControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `workScheduleControllerCreate()` */
    static { this.WorkScheduleControllerCreatePath = '/pelanggan/work_schedule/work_schedule'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `workScheduleControllerCreate()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    workScheduleControllerCreate$Response(params, context) {
        return workScheduleControllerCreate(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `workScheduleControllerCreate$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    workScheduleControllerCreate(params, context) {
        return this.workScheduleControllerCreate$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `workScheduleControllerFindOne()` */
    static { this.WorkScheduleControllerFindOnePath = '/pelanggan/work_schedule/work_schedule/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `workScheduleControllerFindOne()` instead.
     *
     * This method doesn't expect any request body.
     */
    workScheduleControllerFindOne$Response(params, context) {
        return workScheduleControllerFindOne(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `workScheduleControllerFindOne$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    workScheduleControllerFindOne(params, context) {
        return this.workScheduleControllerFindOne$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `workScheduleControllerUpdate()` */
    static { this.WorkScheduleControllerUpdatePath = '/pelanggan/work_schedule/work_schedule/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `workScheduleControllerUpdate()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    workScheduleControllerUpdate$Response(params, context) {
        return workScheduleControllerUpdate(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `workScheduleControllerUpdate$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    workScheduleControllerUpdate(params, context) {
        return this.workScheduleControllerUpdate$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `workScheduleControllerRemove()` */
    static { this.WorkScheduleControllerRemovePath = '/pelanggan/work_schedule/work_schedule/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `workScheduleControllerRemove()` instead.
     *
     * This method doesn't expect any request body.
     */
    workScheduleControllerRemove$Response(params, context) {
        return workScheduleControllerRemove(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `workScheduleControllerRemove$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    workScheduleControllerRemove(params, context) {
        return this.workScheduleControllerRemove$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: WorkScheduleService, deps: [{ token: ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: WorkScheduleService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: WorkScheduleService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: ApiConfiguration }, { type: i2.HttpClient }] });

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function workScheduleReportControllerFindAll(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, workScheduleReportControllerFindAll.PATH, 'post');
    if (params) {
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
workScheduleReportControllerFindAll.PATH = '/pelanggan/work_schedule/work_schedule_report/list';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function workScheduleReportControllerFindOne(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, workScheduleReportControllerFindOne.PATH, 'get');
    if (params) {
        rb.path('id', params.id, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
workScheduleReportControllerFindOne.PATH = '/pelanggan/work_schedule/work_schedule_report/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
class WorkScheduleReportService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `workScheduleReportControllerFindAll()` */
    static { this.WorkScheduleReportControllerFindAllPath = '/pelanggan/work_schedule/work_schedule_report/list'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `workScheduleReportControllerFindAll()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    workScheduleReportControllerFindAll$Response(params, context) {
        return workScheduleReportControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `workScheduleReportControllerFindAll$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    workScheduleReportControllerFindAll(params, context) {
        return this.workScheduleReportControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `workScheduleReportControllerFindOne()` */
    static { this.WorkScheduleReportControllerFindOnePath = '/pelanggan/work_schedule/work_schedule_report/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `workScheduleReportControllerFindOne()` instead.
     *
     * This method doesn't expect any request body.
     */
    workScheduleReportControllerFindOne$Response(params, context) {
        return workScheduleReportControllerFindOne(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `workScheduleReportControllerFindOne$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    workScheduleReportControllerFindOne(params, context) {
        return this.workScheduleReportControllerFindOne$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: WorkScheduleReportService, deps: [{ token: ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: WorkScheduleReportService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: WorkScheduleReportService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: ApiConfiguration }, { type: i2.HttpClient }] });

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function workScheduleWidgetControllerFindAll(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, workScheduleWidgetControllerFindAll.PATH, 'post');
    if (params) {
        rb.query('filter', params.filter, {});
        rb.query('joinWhere', params.joinWhere, {});
        rb.query('select', params.select, {});
        rb.query('groupBy', params.groupBy, {});
        rb.query('sortKey', params.sortKey, {});
        rb.query('sortValue', params.sortValue, {});
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
workScheduleWidgetControllerFindAll.PATH = '/pelanggan/work_schedule/work_schedule_widget';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
class WorkScheduleWidgetService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `workScheduleWidgetControllerFindAll()` */
    static { this.WorkScheduleWidgetControllerFindAllPath = '/pelanggan/work_schedule/work_schedule_widget'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `workScheduleWidgetControllerFindAll()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    workScheduleWidgetControllerFindAll$Response(params, context) {
        return workScheduleWidgetControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `workScheduleWidgetControllerFindAll$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    workScheduleWidgetControllerFindAll(params, context) {
        return this.workScheduleWidgetControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: WorkScheduleWidgetService, deps: [{ token: ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: WorkScheduleWidgetService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: WorkScheduleWidgetService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: ApiConfiguration }, { type: i2.HttpClient }] });

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function workScheduleTeknisiControllerCreate(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, workScheduleTeknisiControllerCreate.PATH, 'post');
    if (params) {
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
workScheduleTeknisiControllerCreate.PATH = '/pelanggan/work_schedule_teknisi/work_schedule_teknisi';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function workScheduleTeknisiControllerFindAll(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, workScheduleTeknisiControllerFindAll.PATH, 'get');
    if (params) {
        rb.query('pageIndex', params.pageIndex, {});
        rb.query('pageSize', params.pageSize, {});
        rb.query('filter', params.filter, {});
        rb.query('sortKey', params.sortKey, {});
        rb.query('sortValue', params.sortValue, {});
        rb.query('search_field', params.search_field, {});
        rb.query('search_keyword', params.search_keyword, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
workScheduleTeknisiControllerFindAll.PATH = '/pelanggan/work_schedule_teknisi/work_schedule_teknisi';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function workScheduleTeknisiControllerFindOne(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, workScheduleTeknisiControllerFindOne.PATH, 'get');
    if (params) {
        rb.path('id', params.id, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
workScheduleTeknisiControllerFindOne.PATH = '/pelanggan/work_schedule_teknisi/work_schedule_teknisi/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function workScheduleTeknisiControllerRemove(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, workScheduleTeknisiControllerRemove.PATH, 'delete');
    if (params) {
        rb.path('id', params.id, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
workScheduleTeknisiControllerRemove.PATH = '/pelanggan/work_schedule_teknisi/work_schedule_teknisi/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function workScheduleTeknisiControllerUpdate(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, workScheduleTeknisiControllerUpdate.PATH, 'put');
    if (params) {
        rb.path('id', params.id, {});
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
workScheduleTeknisiControllerUpdate.PATH = '/pelanggan/work_schedule_teknisi/work_schedule_teknisi/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
class WorkScheduleTeknisiService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `workScheduleTeknisiControllerFindAll()` */
    static { this.WorkScheduleTeknisiControllerFindAllPath = '/pelanggan/work_schedule_teknisi/work_schedule_teknisi'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `workScheduleTeknisiControllerFindAll()` instead.
     *
     * This method doesn't expect any request body.
     */
    workScheduleTeknisiControllerFindAll$Response(params, context) {
        return workScheduleTeknisiControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `workScheduleTeknisiControllerFindAll$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    workScheduleTeknisiControllerFindAll(params, context) {
        return this.workScheduleTeknisiControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `workScheduleTeknisiControllerCreate()` */
    static { this.WorkScheduleTeknisiControllerCreatePath = '/pelanggan/work_schedule_teknisi/work_schedule_teknisi'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `workScheduleTeknisiControllerCreate()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    workScheduleTeknisiControllerCreate$Response(params, context) {
        return workScheduleTeknisiControllerCreate(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `workScheduleTeknisiControllerCreate$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    workScheduleTeknisiControllerCreate(params, context) {
        return this.workScheduleTeknisiControllerCreate$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `workScheduleTeknisiControllerFindOne()` */
    static { this.WorkScheduleTeknisiControllerFindOnePath = '/pelanggan/work_schedule_teknisi/work_schedule_teknisi/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `workScheduleTeknisiControllerFindOne()` instead.
     *
     * This method doesn't expect any request body.
     */
    workScheduleTeknisiControllerFindOne$Response(params, context) {
        return workScheduleTeknisiControllerFindOne(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `workScheduleTeknisiControllerFindOne$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    workScheduleTeknisiControllerFindOne(params, context) {
        return this.workScheduleTeknisiControllerFindOne$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `workScheduleTeknisiControllerUpdate()` */
    static { this.WorkScheduleTeknisiControllerUpdatePath = '/pelanggan/work_schedule_teknisi/work_schedule_teknisi/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `workScheduleTeknisiControllerUpdate()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    workScheduleTeknisiControllerUpdate$Response(params, context) {
        return workScheduleTeknisiControllerUpdate(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `workScheduleTeknisiControllerUpdate$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    workScheduleTeknisiControllerUpdate(params, context) {
        return this.workScheduleTeknisiControllerUpdate$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `workScheduleTeknisiControllerRemove()` */
    static { this.WorkScheduleTeknisiControllerRemovePath = '/pelanggan/work_schedule_teknisi/work_schedule_teknisi/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `workScheduleTeknisiControllerRemove()` instead.
     *
     * This method doesn't expect any request body.
     */
    workScheduleTeknisiControllerRemove$Response(params, context) {
        return workScheduleTeknisiControllerRemove(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `workScheduleTeknisiControllerRemove$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    workScheduleTeknisiControllerRemove(params, context) {
        return this.workScheduleTeknisiControllerRemove$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: WorkScheduleTeknisiService, deps: [{ token: ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: WorkScheduleTeknisiService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: WorkScheduleTeknisiService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: ApiConfiguration }, { type: i2.HttpClient }] });

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function workScheduleTeknisiReportControllerFindAll(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, workScheduleTeknisiReportControllerFindAll.PATH, 'post');
    if (params) {
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
workScheduleTeknisiReportControllerFindAll.PATH = '/pelanggan/work_schedule_teknisi/work_schedule_teknisi_report/list';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function workScheduleTeknisiReportControllerFindOne(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, workScheduleTeknisiReportControllerFindOne.PATH, 'get');
    if (params) {
        rb.path('id', params.id, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
workScheduleTeknisiReportControllerFindOne.PATH = '/pelanggan/work_schedule_teknisi/work_schedule_teknisi_report/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
class WorkScheduleTeknisiReportService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `workScheduleTeknisiReportControllerFindAll()` */
    static { this.WorkScheduleTeknisiReportControllerFindAllPath = '/pelanggan/work_schedule_teknisi/work_schedule_teknisi_report/list'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `workScheduleTeknisiReportControllerFindAll()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    workScheduleTeknisiReportControllerFindAll$Response(params, context) {
        return workScheduleTeknisiReportControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `workScheduleTeknisiReportControllerFindAll$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    workScheduleTeknisiReportControllerFindAll(params, context) {
        return this.workScheduleTeknisiReportControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `workScheduleTeknisiReportControllerFindOne()` */
    static { this.WorkScheduleTeknisiReportControllerFindOnePath = '/pelanggan/work_schedule_teknisi/work_schedule_teknisi_report/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `workScheduleTeknisiReportControllerFindOne()` instead.
     *
     * This method doesn't expect any request body.
     */
    workScheduleTeknisiReportControllerFindOne$Response(params, context) {
        return workScheduleTeknisiReportControllerFindOne(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `workScheduleTeknisiReportControllerFindOne$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    workScheduleTeknisiReportControllerFindOne(params, context) {
        return this.workScheduleTeknisiReportControllerFindOne$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: WorkScheduleTeknisiReportService, deps: [{ token: ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: WorkScheduleTeknisiReportService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: WorkScheduleTeknisiReportService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: ApiConfiguration }, { type: i2.HttpClient }] });

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function workScheduleTeknisiWidgetControllerFindAll(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, workScheduleTeknisiWidgetControllerFindAll.PATH, 'post');
    if (params) {
        rb.query('filter', params.filter, {});
        rb.query('joinWhere', params.joinWhere, {});
        rb.query('select', params.select, {});
        rb.query('groupBy', params.groupBy, {});
        rb.query('sortKey', params.sortKey, {});
        rb.query('sortValue', params.sortValue, {});
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
workScheduleTeknisiWidgetControllerFindAll.PATH = '/pelanggan/work_schedule_teknisi/work_schedule_teknisi_widget';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
class WorkScheduleTeknisiWidgetService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `workScheduleTeknisiWidgetControllerFindAll()` */
    static { this.WorkScheduleTeknisiWidgetControllerFindAllPath = '/pelanggan/work_schedule_teknisi/work_schedule_teknisi_widget'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `workScheduleTeknisiWidgetControllerFindAll()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    workScheduleTeknisiWidgetControllerFindAll$Response(params, context) {
        return workScheduleTeknisiWidgetControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `workScheduleTeknisiWidgetControllerFindAll$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    workScheduleTeknisiWidgetControllerFindAll(params, context) {
        return this.workScheduleTeknisiWidgetControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: WorkScheduleTeknisiWidgetService, deps: [{ token: ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: WorkScheduleTeknisiWidgetService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: WorkScheduleTeknisiWidgetService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: ApiConfiguration }, { type: i2.HttpClient }] });

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
/**
 * Module that provides all services and configuration.
 */
class ApiModule {
    static forRoot(params) {
        return {
            ngModule: ApiModule,
            providers: [
                {
                    provide: ApiConfiguration,
                    useValue: params
                }
            ]
        };
    }
    constructor(parentModule, http) {
        if (parentModule) {
            throw new Error('ApiModule is already loaded. Import in your base AppModule only.');
        }
        if (!http) {
            throw new Error('You need to import the HttpClientModule in your AppModule! \n' +
                'See also https://github.com/angular/angular/issues/20575');
        }
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: ApiModule, deps: [{ token: ApiModule, optional: true, skipSelf: true }, { token: i2.HttpClient, optional: true }], target: i0.ɵɵFactoryTarget.NgModule }); }
    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "18.2.13", ngImport: i0, type: ApiModule }); }
    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: ApiModule, providers: [
            AppService,
            AuthPublicService,
            UsersService,
            UsersReportService,
            UsersWidgetService,
            UserTokensService,
            AuthProtectService,
            DocumentService,
            WorkflowService,
            WorkflowApplyService,
            WorkflowReportService,
            WorkflowWidgetService,
            WorkflowLogService,
            WorkflowLogReportService,
            WorkflowLogWidgetService,
            WorkflowStepService,
            WorkflowStepReportService,
            WorkflowStepWidgetService,
            UserGroupService,
            WorkflowAggregatorService,
            ModuleService,
            CustomFieldGroupService,
            CustomFieldGroupReportService,
            CustomFieldGroupWidgetService,
            CustomFieldService,
            CustomFieldValueService,
            CustomFieldValueReportService,
            CustomFieldValueWidgetService,
            DocumentNumberingService,
            DocumentNumberingCounterService,
            ClientService,
            ClientReportService,
            ClientWidgetService,
            ClientContactService,
            ClientContactReportService,
            ClientContactWidgetService,
            ClientSiteService,
            ClientSiteReportService,
            ClientSiteWidgetService,
            CompanyConfigService,
            CompanyConfigReportService,
            CompanyConfigWidgetService,
            ContactClientUseService,
            ContactClientUseReportService,
            ContactClientUseWidgetService,
            ContractService,
            ContractReportService,
            ContractWidgetService,
            ContractJenisService,
            ContractJenisReportService,
            ContractJenisWidgetService,
            ContractSiteService,
            ContractSiteReportService,
            ContractSiteWidgetService,
            ContractSiteServiceService,
            ContractSiteServiceReportService,
            ContractSiteServiceWidgetService,
            FakturService,
            FakturReportService,
            FakturWidgetService,
            InvoiceService,
            InvoiceReportService,
            InvoiceWidgetService,
            KantorService,
            KantorReportService,
            KantorWidgetService,
            ServiceService,
            ServiceReportService,
            ServiceWidgetService,
            TeknisiService,
            TeknisiReportService,
            TeknisiWidgetService,
            WorkScheduleService,
            WorkScheduleReportService,
            WorkScheduleWidgetService,
            WorkScheduleTeknisiService,
            WorkScheduleTeknisiReportService,
            WorkScheduleTeknisiWidgetService,
            ApiConfiguration
        ] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: ApiModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [],
                    exports: [],
                    declarations: [],
                    providers: [
                        AppService,
                        AuthPublicService,
                        UsersService,
                        UsersReportService,
                        UsersWidgetService,
                        UserTokensService,
                        AuthProtectService,
                        DocumentService,
                        WorkflowService,
                        WorkflowApplyService,
                        WorkflowReportService,
                        WorkflowWidgetService,
                        WorkflowLogService,
                        WorkflowLogReportService,
                        WorkflowLogWidgetService,
                        WorkflowStepService,
                        WorkflowStepReportService,
                        WorkflowStepWidgetService,
                        UserGroupService,
                        WorkflowAggregatorService,
                        ModuleService,
                        CustomFieldGroupService,
                        CustomFieldGroupReportService,
                        CustomFieldGroupWidgetService,
                        CustomFieldService,
                        CustomFieldValueService,
                        CustomFieldValueReportService,
                        CustomFieldValueWidgetService,
                        DocumentNumberingService,
                        DocumentNumberingCounterService,
                        ClientService,
                        ClientReportService,
                        ClientWidgetService,
                        ClientContactService,
                        ClientContactReportService,
                        ClientContactWidgetService,
                        ClientSiteService,
                        ClientSiteReportService,
                        ClientSiteWidgetService,
                        CompanyConfigService,
                        CompanyConfigReportService,
                        CompanyConfigWidgetService,
                        ContactClientUseService,
                        ContactClientUseReportService,
                        ContactClientUseWidgetService,
                        ContractService,
                        ContractReportService,
                        ContractWidgetService,
                        ContractJenisService,
                        ContractJenisReportService,
                        ContractJenisWidgetService,
                        ContractSiteService,
                        ContractSiteReportService,
                        ContractSiteWidgetService,
                        ContractSiteServiceService,
                        ContractSiteServiceReportService,
                        ContractSiteServiceWidgetService,
                        FakturService,
                        FakturReportService,
                        FakturWidgetService,
                        InvoiceService,
                        InvoiceReportService,
                        InvoiceWidgetService,
                        KantorService,
                        KantorReportService,
                        KantorWidgetService,
                        ServiceService,
                        ServiceReportService,
                        ServiceWidgetService,
                        TeknisiService,
                        TeknisiReportService,
                        TeknisiWidgetService,
                        WorkScheduleService,
                        WorkScheduleReportService,
                        WorkScheduleWidgetService,
                        WorkScheduleTeknisiService,
                        WorkScheduleTeknisiReportService,
                        WorkScheduleTeknisiWidgetService,
                        ApiConfiguration
                    ],
                }]
        }], ctorParameters: () => [{ type: ApiModule, decorators: [{
                    type: Optional
                }, {
                    type: SkipSelf
                }] }, { type: i2.HttpClient, decorators: [{
                    type: Optional
                }] }] });

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

const AclModuleFormSchema = {
    "createdAt": {
        "default": "",
        "required": false
    },
    "deskripsi": {
        "default": "",
        "required": false
    },
    "idModule": {
        "required": true
    },
    "isAktif": {
        "default": false,
        "required": false
    },
    "kodeModule": {
        "default": "",
        "required": false
    },
    "namaDb": {
        "default": "",
        "required": false
    },
    "namaModule": {
        "default": "",
        "required": false
    },
    "namaTabel": {
        "default": "",
        "required": false
    },
    "updatedAt": {
        "default": "",
        "required": false
    },
    "urutan": {
        "default": 0,
        "required": false
    }
};

const AclUserGroupFormSchema = {
    "createdAt": {
        "default": "",
        "required": false
    },
    "deskripsi": {
        "default": "",
        "required": false
    },
    "idUserGroup": {
        "required": true
    },
    "namaUserGroup": {
        "default": "",
        "required": true
    },
    "status": {
        "default": "",
        "required": true
    }
};

const AclUserTokensFormSchema = {
    "createdAt": {
        "default": "",
        "required": false
    },
    "id": {
        "required": true
    },
    "idUser": {
        "required": false
    },
    "ipAddress": {
        "default": "",
        "required": false
    },
    "refreshToken": {
        "default": "",
        "required": false
    },
    "userAgent": {
        "default": "",
        "required": false
    }
};

const AclUsersReportFormSchema = {
    "createdAt": {
        "default": "",
        "required": false
    },
    "email": {
        "default": "",
        "required": true
    },
    "idUserGroup": {
        "required": false
    },
    "idUsers": {
        "required": true
    },
    "lastLogin": {
        "default": "",
        "required": false
    },
    "nama": {
        "default": "",
        "required": false
    },
    "password": {
        "default": "",
        "required": false
    },
    "status": {
        "default": "",
        "required": false
    },
    "wajibResetPassword": {
        "default": false,
        "required": false
    }
};

const AclUsersWidgetFormSchema = {
    "createdAt": {
        "default": "",
        "required": false
    },
    "email": {
        "default": "",
        "required": true
    },
    "idUserGroup": {
        "required": false
    },
    "idUsers": {
        "required": true
    },
    "lastLogin": {
        "default": "",
        "required": false
    },
    "nama": {
        "default": "",
        "required": false
    },
    "password": {
        "default": "",
        "required": false
    },
    "status": {
        "default": "",
        "required": false
    },
    "total": {
        "default": 0,
        "required": false
    },
    "wajibResetPassword": {
        "default": false,
        "required": false
    }
};

const AclUsersFormSchema = {
    "createdAt": {
        "default": "",
        "required": false
    },
    "email": {
        "default": "",
        "required": true
    },
    "idUserGroup": {
        "required": false
    },
    "idUsers": {
        "required": true
    },
    "lastLogin": {
        "default": "",
        "required": false
    },
    "nama": {
        "default": "",
        "required": false
    },
    "password": {
        "default": "",
        "required": false
    },
    "status": {
        "default": "",
        "required": false
    },
    "wajibResetPassword": {
        "default": false,
        "required": false
    }
};

const AmimsActypeReportFormSchema = {
    "acCategory": {
        "default": "",
        "required": false
    },
    "acManufacture": {
        "default": "",
        "required": false
    },
    "actype": {
        "default": "",
        "required": false
    },
    "createdAt": {
        "default": "",
        "required": false
    },
    "description": {
        "default": "",
        "required": false
    },
    "eFlight": {
        "default": "",
        "required": false
    },
    "eStarts": {
        "default": "",
        "required": false
    },
    "engineManufacture": {
        "default": "",
        "required": false
    },
    "engineType": {
        "default": "",
        "required": false
    },
    "hashN1": {
        "default": "",
        "required": false
    },
    "hashN2": {
        "default": "",
        "required": false
    },
    "idActype": {
        "required": true
    },
    "isDeleted": {
        "default": 0,
        "required": false
    },
    "numberEngine": {
        "default": 0,
        "required": false
    },
    "oldId": {
        "default": "",
        "required": false
    },
    "statusType": {
        "default": "",
        "required": false
    },
    "updatedAt": {
        "default": "",
        "required": false
    },
    "wingtype": {
        "default": "",
        "required": false
    }
};

const AmimsActypeWidgetFormSchema = {
    "acCategory": {
        "default": "",
        "required": false
    },
    "acManufacture": {
        "default": "",
        "required": false
    },
    "actype": {
        "default": "",
        "required": false
    },
    "createdAt": {
        "default": "",
        "required": false
    },
    "description": {
        "default": "",
        "required": false
    },
    "eFlight": {
        "default": "",
        "required": false
    },
    "eStarts": {
        "default": "",
        "required": false
    },
    "engineManufacture": {
        "default": "",
        "required": false
    },
    "engineType": {
        "default": "",
        "required": false
    },
    "hashN1": {
        "default": "",
        "required": false
    },
    "hashN2": {
        "default": "",
        "required": false
    },
    "idActype": {
        "required": true
    },
    "isDeleted": {
        "default": 0,
        "required": false
    },
    "numberEngine": {
        "default": 0,
        "required": false
    },
    "oldId": {
        "default": "",
        "required": false
    },
    "statusType": {
        "default": "",
        "required": false
    },
    "total": {
        "default": 0,
        "required": false
    },
    "updatedAt": {
        "default": "",
        "required": false
    },
    "wingtype": {
        "default": "",
        "required": false
    }
};

const AmimsActypeFormSchema = {
    "acCategory": {
        "default": "",
        "required": false
    },
    "acManufacture": {
        "default": "",
        "required": false
    },
    "actype": {
        "default": "",
        "required": false
    },
    "createdAt": {
        "default": "",
        "required": false
    },
    "description": {
        "default": "",
        "required": false
    },
    "eFlight": {
        "default": "",
        "required": false
    },
    "eStarts": {
        "default": "",
        "required": false
    },
    "engineManufacture": {
        "default": "",
        "required": false
    },
    "engineType": {
        "default": "",
        "required": false
    },
    "hashN1": {
        "default": "",
        "required": false
    },
    "hashN2": {
        "default": "",
        "required": false
    },
    "idActype": {
        "required": true
    },
    "isDeleted": {
        "default": 0,
        "required": false
    },
    "numberEngine": {
        "default": 0,
        "required": false
    },
    "oldId": {
        "default": "",
        "required": false
    },
    "statusType": {
        "default": "",
        "required": false
    },
    "updatedAt": {
        "default": "",
        "required": false
    },
    "wingtype": {
        "default": "",
        "required": false
    }
};

const AmimsAircraftDetailReportFormSchema = {
    "airworthiness": {
        "default": "",
        "required": false
    },
    "autoPilot": {
        "default": "",
        "required": false
    },
    "auxiliaryTank": {
        "default": "",
        "required": false
    },
    "baggageCompartmentSpace": {
        "default": "",
        "required": false
    },
    "cargoAreaMaximumHeight": {
        "default": "",
        "required": false
    },
    "cargoAreaOverallLength": {
        "default": "",
        "required": false
    },
    "cargoDoor": {
        "default": "",
        "required": false
    },
    "certificateOfRegistration": {
        "default": "",
        "required": false
    },
    "compassSwing": {
        "default": "",
        "required": false
    },
    "configuration": {
        "default": "",
        "required": false
    },
    "crew": {
        "default": "",
        "required": false
    },
    "crewDoor": {
        "default": "",
        "required": false
    },
    "crewLifeVest": {
        "default": "",
        "required": false
    },
    "cvr": {
        "default": "",
        "required": false
    },
    "dme": {
        "default": "",
        "required": false
    },
    "dualAdfSystem": {
        "default": "",
        "required": false
    },
    "dualRadioNavigationSystem": {
        "default": "",
        "required": false
    },
    "dualVhfCommunication": {
        "default": "",
        "required": false
    },
    "earProtector": {
        "default": "",
        "required": false
    },
    "emergency": {
        "default": "",
        "required": false
    },
    "emergencyFloatationGear": {
        "default": "",
        "required": false
    },
    "emergencyLocateTransmitter": {
        "default": "",
        "required": false
    },
    "emptyWeight": {
        "default": "",
        "required": false
    },
    "engine": {
        "default": "",
        "required": false
    },
    "engineInstrument": {
        "default": "",
        "required": false
    },
    "externalCargoHook": {
        "default": "",
        "required": false
    },
    "firstAidKit": {
        "default": "",
        "required": false
    },
    "flightControl": {
        "default": "",
        "required": false
    },
    "flightDirector": {
        "default": "",
        "required": false
    },
    "floatingBeacon": {
        "default": "",
        "required": false
    },
    "fullDoc": {
        "default": "",
        "required": false
    },
    "gps": {
        "default": "",
        "required": false
    },
    "grossWeight": {
        "default": "",
        "required": false
    },
    "gyroMagneticCompass": {
        "default": "",
        "required": false
    },
    "hfCommunication": {
        "default": "",
        "required": false
    },
    "homer": {
        "default": "",
        "required": false
    },
    "hoverCeilingOge": {
        "default": "",
        "required": false
    },
    "idAircraftDetail": {
        "required": true
    },
    "intercommunicationSystem": {
        "default": "",
        "required": false
    },
    "internalHoist": {
        "default": "",
        "required": false
    },
    "landingGear": {
        "default": "",
        "required": false
    },
    "landingLight": {
        "default": "",
        "required": false
    },
    "lifeRaft": {
        "default": "",
        "required": false
    },
    "lifeVest": {
        "default": "",
        "required": false
    },
    "mainCabinSpace": {
        "default": "",
        "required": false
    },
    "mainRotorDiscDiameter": {
        "default": "",
        "required": false
    },
    "mainRotorSystem": {
        "default": "",
        "required": false
    },
    "maximumBaggageCompartment": {
        "default": "",
        "required": false
    },
    "maximumContinuous": {
        "default": "",
        "required": false
    },
    "maximumSpeed": {
        "default": "",
        "required": false
    },
    "medicalStretcher": {
        "default": "",
        "required": false
    },
    "minute": {
        "default": "",
        "required": false
    },
    "moreDetail": {
        "default": "",
        "required": false
    },
    "outputPower": {
        "default": "",
        "required": false
    },
    "passenger": {
        "default": "",
        "required": false
    },
    "passengerDoorHeight": {
        "default": "",
        "required": false
    },
    "passengerDoorWidth": {
        "default": "",
        "required": false
    },
    "payload": {
        "default": "",
        "required": false
    },
    "personal": {
        "default": "",
        "required": false
    },
    "poweredBy": {
        "default": "",
        "required": false
    },
    "publicAddress": {
        "default": "",
        "required": false
    },
    "radioAltimeter": {
        "default": "",
        "required": false
    },
    "radioPermit": {
        "default": "",
        "required": false
    },
    "range": {
        "default": "",
        "required": false
    },
    "searchLight": {
        "default": "",
        "required": false
    },
    "standardFuelCapacity": {
        "default": "",
        "required": false
    },
    "survivalKit": {
        "default": "",
        "required": false
    },
    "tailRotorDiameter": {
        "default": "",
        "required": false
    },
    "tailRotorSystem": {
        "default": "",
        "required": false
    },
    "takeOff": {
        "default": "",
        "required": false
    },
    "transponder": {
        "default": "",
        "required": false
    },
    "underwaterBeacon": {
        "default": "",
        "required": false
    },
    "updatedAt": {
        "default": "",
        "required": false
    },
    "usefulWeight": {
        "default": "",
        "required": false
    },
    "vor": {
        "default": "",
        "required": false
    },
    "weightAndBalance": {
        "default": "",
        "required": false
    },
    "withFullPassenger": {
        "default": "",
        "required": false
    },
    "wxRadar": {
        "default": "",
        "required": false
    },
    "yearOfManufacture": {
        "default": "",
        "required": false
    }
};

const AmimsAircraftDetailWidgetFormSchema = {
    "airworthiness": {
        "default": "",
        "required": false
    },
    "autoPilot": {
        "default": "",
        "required": false
    },
    "auxiliaryTank": {
        "default": "",
        "required": false
    },
    "baggageCompartmentSpace": {
        "default": "",
        "required": false
    },
    "cargoAreaMaximumHeight": {
        "default": "",
        "required": false
    },
    "cargoAreaOverallLength": {
        "default": "",
        "required": false
    },
    "cargoDoor": {
        "default": "",
        "required": false
    },
    "certificateOfRegistration": {
        "default": "",
        "required": false
    },
    "compassSwing": {
        "default": "",
        "required": false
    },
    "configuration": {
        "default": "",
        "required": false
    },
    "crew": {
        "default": "",
        "required": false
    },
    "crewDoor": {
        "default": "",
        "required": false
    },
    "crewLifeVest": {
        "default": "",
        "required": false
    },
    "cvr": {
        "default": "",
        "required": false
    },
    "dme": {
        "default": "",
        "required": false
    },
    "dualAdfSystem": {
        "default": "",
        "required": false
    },
    "dualRadioNavigationSystem": {
        "default": "",
        "required": false
    },
    "dualVhfCommunication": {
        "default": "",
        "required": false
    },
    "earProtector": {
        "default": "",
        "required": false
    },
    "emergency": {
        "default": "",
        "required": false
    },
    "emergencyFloatationGear": {
        "default": "",
        "required": false
    },
    "emergencyLocateTransmitter": {
        "default": "",
        "required": false
    },
    "emptyWeight": {
        "default": "",
        "required": false
    },
    "engine": {
        "default": "",
        "required": false
    },
    "engineInstrument": {
        "default": "",
        "required": false
    },
    "externalCargoHook": {
        "default": "",
        "required": false
    },
    "firstAidKit": {
        "default": "",
        "required": false
    },
    "flightControl": {
        "default": "",
        "required": false
    },
    "flightDirector": {
        "default": "",
        "required": false
    },
    "floatingBeacon": {
        "default": "",
        "required": false
    },
    "fullDoc": {
        "default": "",
        "required": false
    },
    "gps": {
        "default": "",
        "required": false
    },
    "grossWeight": {
        "default": "",
        "required": false
    },
    "gyroMagneticCompass": {
        "default": "",
        "required": false
    },
    "hfCommunication": {
        "default": "",
        "required": false
    },
    "homer": {
        "default": "",
        "required": false
    },
    "hoverCeilingOge": {
        "default": "",
        "required": false
    },
    "idAircraftDetail": {
        "required": true
    },
    "intercommunicationSystem": {
        "default": "",
        "required": false
    },
    "internalHoist": {
        "default": "",
        "required": false
    },
    "landingGear": {
        "default": "",
        "required": false
    },
    "landingLight": {
        "default": "",
        "required": false
    },
    "lifeRaft": {
        "default": "",
        "required": false
    },
    "lifeVest": {
        "default": "",
        "required": false
    },
    "mainCabinSpace": {
        "default": "",
        "required": false
    },
    "mainRotorDiscDiameter": {
        "default": "",
        "required": false
    },
    "mainRotorSystem": {
        "default": "",
        "required": false
    },
    "maximumBaggageCompartment": {
        "default": "",
        "required": false
    },
    "maximumContinuous": {
        "default": "",
        "required": false
    },
    "maximumSpeed": {
        "default": "",
        "required": false
    },
    "medicalStretcher": {
        "default": "",
        "required": false
    },
    "minute": {
        "default": "",
        "required": false
    },
    "moreDetail": {
        "default": "",
        "required": false
    },
    "outputPower": {
        "default": "",
        "required": false
    },
    "passenger": {
        "default": "",
        "required": false
    },
    "passengerDoorHeight": {
        "default": "",
        "required": false
    },
    "passengerDoorWidth": {
        "default": "",
        "required": false
    },
    "payload": {
        "default": "",
        "required": false
    },
    "personal": {
        "default": "",
        "required": false
    },
    "poweredBy": {
        "default": "",
        "required": false
    },
    "publicAddress": {
        "default": "",
        "required": false
    },
    "radioAltimeter": {
        "default": "",
        "required": false
    },
    "radioPermit": {
        "default": "",
        "required": false
    },
    "range": {
        "default": "",
        "required": false
    },
    "searchLight": {
        "default": "",
        "required": false
    },
    "standardFuelCapacity": {
        "default": "",
        "required": false
    },
    "survivalKit": {
        "default": "",
        "required": false
    },
    "tailRotorDiameter": {
        "default": "",
        "required": false
    },
    "tailRotorSystem": {
        "default": "",
        "required": false
    },
    "takeOff": {
        "default": "",
        "required": false
    },
    "total": {
        "default": 0,
        "required": false
    },
    "transponder": {
        "default": "",
        "required": false
    },
    "underwaterBeacon": {
        "default": "",
        "required": false
    },
    "updatedAt": {
        "default": "",
        "required": false
    },
    "usefulWeight": {
        "default": "",
        "required": false
    },
    "vor": {
        "default": "",
        "required": false
    },
    "weightAndBalance": {
        "default": "",
        "required": false
    },
    "withFullPassenger": {
        "default": "",
        "required": false
    },
    "wxRadar": {
        "default": "",
        "required": false
    },
    "yearOfManufacture": {
        "default": "",
        "required": false
    }
};

const AmimsAircraftDetailFormSchema = {
    "airworthiness": {
        "default": "",
        "required": false
    },
    "autoPilot": {
        "default": "",
        "required": false
    },
    "auxiliaryTank": {
        "default": "",
        "required": false
    },
    "baggageCompartmentSpace": {
        "default": "",
        "required": false
    },
    "cargoAreaMaximumHeight": {
        "default": "",
        "required": false
    },
    "cargoAreaOverallLength": {
        "default": "",
        "required": false
    },
    "cargoDoor": {
        "default": "",
        "required": false
    },
    "certificateOfRegistration": {
        "default": "",
        "required": false
    },
    "compassSwing": {
        "default": "",
        "required": false
    },
    "configuration": {
        "default": "",
        "required": false
    },
    "crew": {
        "default": "",
        "required": false
    },
    "crewDoor": {
        "default": "",
        "required": false
    },
    "crewLifeVest": {
        "default": "",
        "required": false
    },
    "cvr": {
        "default": "",
        "required": false
    },
    "dme": {
        "default": "",
        "required": false
    },
    "dualAdfSystem": {
        "default": "",
        "required": false
    },
    "dualRadioNavigationSystem": {
        "default": "",
        "required": false
    },
    "dualVhfCommunication": {
        "default": "",
        "required": false
    },
    "earProtector": {
        "default": "",
        "required": false
    },
    "emergency": {
        "default": "",
        "required": false
    },
    "emergencyFloatationGear": {
        "default": "",
        "required": false
    },
    "emergencyLocateTransmitter": {
        "default": "",
        "required": false
    },
    "emptyWeight": {
        "default": "",
        "required": false
    },
    "engine": {
        "default": "",
        "required": false
    },
    "engineInstrument": {
        "default": "",
        "required": false
    },
    "externalCargoHook": {
        "default": "",
        "required": false
    },
    "firstAidKit": {
        "default": "",
        "required": false
    },
    "flightControl": {
        "default": "",
        "required": false
    },
    "flightDirector": {
        "default": "",
        "required": false
    },
    "floatingBeacon": {
        "default": "",
        "required": false
    },
    "fullDoc": {
        "default": "",
        "required": false
    },
    "gps": {
        "default": "",
        "required": false
    },
    "grossWeight": {
        "default": "",
        "required": false
    },
    "gyroMagneticCompass": {
        "default": "",
        "required": false
    },
    "hfCommunication": {
        "default": "",
        "required": false
    },
    "homer": {
        "default": "",
        "required": false
    },
    "hoverCeilingOge": {
        "default": "",
        "required": false
    },
    "idAircraftDetail": {
        "required": true
    },
    "intercommunicationSystem": {
        "default": "",
        "required": false
    },
    "internalHoist": {
        "default": "",
        "required": false
    },
    "landingGear": {
        "default": "",
        "required": false
    },
    "landingLight": {
        "default": "",
        "required": false
    },
    "lifeRaft": {
        "default": "",
        "required": false
    },
    "lifeVest": {
        "default": "",
        "required": false
    },
    "mainCabinSpace": {
        "default": "",
        "required": false
    },
    "mainRotorDiscDiameter": {
        "default": "",
        "required": false
    },
    "mainRotorSystem": {
        "default": "",
        "required": false
    },
    "maximumBaggageCompartment": {
        "default": "",
        "required": false
    },
    "maximumContinuous": {
        "default": "",
        "required": false
    },
    "maximumSpeed": {
        "default": "",
        "required": false
    },
    "medicalStretcher": {
        "default": "",
        "required": false
    },
    "minute": {
        "default": "",
        "required": false
    },
    "moreDetail": {
        "default": "",
        "required": false
    },
    "outputPower": {
        "default": "",
        "required": false
    },
    "passenger": {
        "default": "",
        "required": false
    },
    "passengerDoorHeight": {
        "default": "",
        "required": false
    },
    "passengerDoorWidth": {
        "default": "",
        "required": false
    },
    "payload": {
        "default": "",
        "required": false
    },
    "personal": {
        "default": "",
        "required": false
    },
    "poweredBy": {
        "default": "",
        "required": false
    },
    "publicAddress": {
        "default": "",
        "required": false
    },
    "radioAltimeter": {
        "default": "",
        "required": false
    },
    "radioPermit": {
        "default": "",
        "required": false
    },
    "range": {
        "default": "",
        "required": false
    },
    "searchLight": {
        "default": "",
        "required": false
    },
    "standardFuelCapacity": {
        "default": "",
        "required": false
    },
    "survivalKit": {
        "default": "",
        "required": false
    },
    "tailRotorDiameter": {
        "default": "",
        "required": false
    },
    "tailRotorSystem": {
        "default": "",
        "required": false
    },
    "takeOff": {
        "default": "",
        "required": false
    },
    "transponder": {
        "default": "",
        "required": false
    },
    "underwaterBeacon": {
        "default": "",
        "required": false
    },
    "updatedAt": {
        "default": "",
        "required": false
    },
    "usefulWeight": {
        "default": "",
        "required": false
    },
    "vor": {
        "default": "",
        "required": false
    },
    "weightAndBalance": {
        "default": "",
        "required": false
    },
    "withFullPassenger": {
        "default": "",
        "required": false
    },
    "wxRadar": {
        "default": "",
        "required": false
    },
    "yearOfManufacture": {
        "default": "",
        "required": false
    }
};

const AmimsAircraftReportFormSchema = {
    "acFoto": {
        "default": "",
        "required": false
    },
    "actype": {
        "default": "",
        "required": true
    },
    "createdAt": {
        "default": "",
        "required": false
    },
    "descriptionAircraft": {
        "default": "",
        "required": false
    },
    "hasapu": {
        "default": "",
        "required": false
    },
    "idActype": {
        "required": false
    },
    "idAircraft": {
        "required": true
    },
    "isDeleted": {
        "default": 0,
        "required": false
    },
    "keywordAircraft": {
        "default": "",
        "required": false
    },
    "manufactureAircraft": {
        "default": "",
        "required": false
    },
    "manufactureDate": {
        "default": "",
        "required": false
    },
    "manufactureEngine": {
        "default": "",
        "required": false
    },
    "manufacturedBy": {
        "default": "",
        "required": false
    },
    "oldActype": {
        "default": "",
        "required": false
    },
    "oldId": {
        "default": "",
        "required": false
    },
    "purchasedate": {
        "default": "",
        "required": false
    },
    "reasonRegschange": {
        "default": "",
        "required": false
    },
    "registrationNumber": {
        "default": "",
        "required": false
    },
    "serialNumber": {
        "default": "",
        "required": false
    },
    "statusAc": {
        "default": "",
        "required": false
    },
    "tendurance": {
        "default": 0,
        "required": false
    },
    "updatedAt": {
        "default": "",
        "required": false
    },
    "yearMade": {
        "default": "",
        "required": false
    }
};

const AmimsAircraftWidgetFormSchema = {
    "acFoto": {
        "default": "",
        "required": false
    },
    "createdAt": {
        "default": "",
        "required": false
    },
    "descriptionAircraft": {
        "default": "",
        "required": false
    },
    "hasapu": {
        "default": "",
        "required": false
    },
    "idActype": {
        "required": false
    },
    "idAircraft": {
        "required": true
    },
    "isDeleted": {
        "default": 0,
        "required": false
    },
    "keywordAircraft": {
        "default": "",
        "required": false
    },
    "manufactureAircraft": {
        "default": "",
        "required": false
    },
    "manufactureDate": {
        "default": "",
        "required": false
    },
    "manufactureEngine": {
        "default": "",
        "required": false
    },
    "manufacturedBy": {
        "default": "",
        "required": false
    },
    "oldActype": {
        "default": "",
        "required": false
    },
    "oldId": {
        "default": "",
        "required": false
    },
    "purchasedate": {
        "default": "",
        "required": false
    },
    "reasonRegschange": {
        "default": "",
        "required": false
    },
    "registrationNumber": {
        "default": "",
        "required": false
    },
    "serialNumber": {
        "default": "",
        "required": false
    },
    "statusAc": {
        "default": "",
        "required": false
    },
    "tendurance": {
        "default": 0,
        "required": false
    },
    "total": {
        "default": 0,
        "required": false
    },
    "updatedAt": {
        "default": "",
        "required": false
    },
    "yearMade": {
        "default": "",
        "required": false
    }
};

const AmimsAircraftFormSchema = {
    "acFoto": {
        "default": "",
        "required": false
    },
    "createdAt": {
        "default": "",
        "required": false
    },
    "descriptionAircraft": {
        "default": "",
        "required": false
    },
    "hasapu": {
        "default": "",
        "required": false
    },
    "idActype": {
        "required": false
    },
    "idAircraft": {
        "required": true
    },
    "isDeleted": {
        "default": 0,
        "required": false
    },
    "keywordAircraft": {
        "default": "",
        "required": false
    },
    "manufactureAircraft": {
        "default": "",
        "required": false
    },
    "manufactureDate": {
        "default": "",
        "required": false
    },
    "manufactureEngine": {
        "default": "",
        "required": false
    },
    "manufacturedBy": {
        "default": "",
        "required": false
    },
    "oldActype": {
        "default": "",
        "required": false
    },
    "oldId": {
        "default": "",
        "required": false
    },
    "purchasedate": {
        "default": "",
        "required": false
    },
    "reasonRegschange": {
        "default": "",
        "required": false
    },
    "registrationNumber": {
        "default": "",
        "required": false
    },
    "serialNumber": {
        "default": "",
        "required": false
    },
    "statusAc": {
        "default": "",
        "required": false
    },
    "tendurance": {
        "default": 0,
        "required": false
    },
    "updatedAt": {
        "default": "",
        "required": false
    },
    "yearMade": {
        "default": "",
        "required": false
    }
};

const AmimsAtaFormSchema = {
    "ata": {
        "default": "",
        "required": false
    },
    "ataType": {
        "default": "",
        "required": false
    },
    "codeAta": {
        "default": "",
        "required": false
    },
    "createdAt": {
        "default": "",
        "required": false
    },
    "idAta": {
        "required": true
    },
    "isDeleted": {
        "default": 0,
        "required": false
    },
    "keywordAta": {
        "default": "",
        "required": false
    },
    "oldId": {
        "default": "",
        "required": false
    },
    "updatedAt": {
        "default": "",
        "required": false
    }
};

const AmimsBinReportFormSchema = {
    "bin": {
        "default": "",
        "required": false
    },
    "code": {
        "default": "",
        "required": false
    },
    "createdAt": {
        "default": "",
        "required": false
    },
    "description": {
        "default": "",
        "required": false
    },
    "idBin": {
        "required": true
    },
    "idSite": {
        "required": false
    },
    "site": {
        "default": "",
        "required": true
    },
    "updatedAt": {
        "default": "",
        "required": false
    }
};

const AmimsBinWidgetFormSchema = {
    "bin": {
        "default": "",
        "required": false
    },
    "code": {
        "default": "",
        "required": false
    },
    "createdAt": {
        "default": "",
        "required": false
    },
    "description": {
        "default": "",
        "required": false
    },
    "idBin": {
        "required": true
    },
    "idSite": {
        "required": false
    },
    "total": {
        "default": 0,
        "required": false
    },
    "updatedAt": {
        "default": "",
        "required": false
    }
};

const AmimsBinFormSchema = {
    "bin": {
        "default": "",
        "required": false
    },
    "code": {
        "default": "",
        "required": false
    },
    "createdAt": {
        "default": "",
        "required": false
    },
    "description": {
        "default": "",
        "required": false
    },
    "idBin": {
        "required": true
    },
    "idSite": {
        "required": false
    },
    "updatedAt": {
        "default": "",
        "required": false
    }
};

const AmimsCompanyFormSchema = {
    "address1": {
        "default": "",
        "required": false
    },
    "address2": {
        "default": "",
        "required": false
    },
    "createdAt": {
        "default": "",
        "required": false
    },
    "email": {
        "default": "",
        "required": false
    },
    "fax": {
        "default": "",
        "required": false
    },
    "hasIdUser": {
        "default": 0,
        "required": false
    },
    "idCompany": {
        "required": true
    },
    "isDefault": {
        "default": 0,
        "required": false
    },
    "nameCompany": {
        "default": "",
        "required": false
    },
    "phone": {
        "default": "",
        "required": false
    },
    "statusCompany": {
        "default": "",
        "required": false
    },
    "updatedAt": {
        "default": "",
        "required": false
    },
    "website": {
        "default": "",
        "required": false
    }
};

const AmimsConditionMonitoringReportFormSchema = {
    "childnameConditionMonitoring": {
        "default": "",
        "required": false
    },
    "code": {
        "default": "",
        "required": false
    },
    "conditionMonitoring": {
        "default": "",
        "required": false
    },
    "idConditionMonitoring": {
        "required": true
    },
    "isDeleted": {
        "default": 0,
        "required": false
    }
};

const AmimsConditionMonitoringWidgetFormSchema = {
    "childnameConditionMonitoring": {
        "default": "",
        "required": false
    },
    "code": {
        "default": "",
        "required": false
    },
    "conditionMonitoring": {
        "default": "",
        "required": false
    },
    "idConditionMonitoring": {
        "required": true
    },
    "isDeleted": {
        "default": 0,
        "required": false
    },
    "total": {
        "default": 0,
        "required": false
    }
};

const AmimsConditionMonitoringFormSchema = {
    "childnameConditionMonitoring": {
        "default": "",
        "required": false
    },
    "code": {
        "default": "",
        "required": false
    },
    "conditionMonitoring": {
        "default": "",
        "required": false
    },
    "idConditionMonitoring": {
        "required": true
    },
    "isDeleted": {
        "default": 0,
        "required": false
    }
};

const AmimsCurrencyReportFormSchema = {
    "createdAt": {
        "default": "",
        "required": false
    },
    "effectiveDate": {
        "default": "",
        "required": false
    },
    "forcurrency": {
        "default": "",
        "required": false
    },
    "idCurrency": {
        "required": true
    },
    "idMcurrency": {
        "required": false
    },
    "idUser": {
        "required": false
    },
    "mcurrency": {
        "default": "",
        "required": true
    },
    "newValue": {
        "default": 0,
        "required": false
    },
    "noteCurrency": {
        "default": "",
        "required": false
    },
    "oldValue": {
        "default": 0,
        "required": false
    },
    "updatedAt": {
        "default": "",
        "required": false
    }
};

const AmimsCurrencyWidgetFormSchema = {
    "createdAt": {
        "default": "",
        "required": false
    },
    "effectiveDate": {
        "default": "",
        "required": false
    },
    "forcurrency": {
        "default": "",
        "required": false
    },
    "idCurrency": {
        "required": true
    },
    "idMcurrency": {
        "required": false
    },
    "idUser": {
        "required": false
    },
    "newValue": {
        "default": 0,
        "required": false
    },
    "noteCurrency": {
        "default": "",
        "required": false
    },
    "oldValue": {
        "default": 0,
        "required": false
    },
    "total": {
        "default": 0,
        "required": false
    },
    "updatedAt": {
        "default": "",
        "required": false
    }
};

const AmimsCurrencyFormSchema = {
    "createdAt": {
        "default": "",
        "required": false
    },
    "effectiveDate": {
        "default": "",
        "required": false
    },
    "forcurrency": {
        "default": "",
        "required": false
    },
    "idCurrency": {
        "required": true
    },
    "idMcurrency": {
        "required": false
    },
    "idUser": {
        "required": false
    },
    "newValue": {
        "default": 0,
        "required": false
    },
    "noteCurrency": {
        "default": "",
        "required": false
    },
    "oldValue": {
        "default": 0,
        "required": false
    },
    "updatedAt": {
        "default": "",
        "required": false
    }
};

const AmimsDoctypeFormSchema = {
    "childname": {
        "default": "",
        "required": false
    },
    "description": {
        "default": "",
        "required": false
    },
    "doctype": {
        "default": "",
        "required": false
    },
    "idDoctype": {
        "required": true
    },
    "lastupdatestamp": {
        "default": "",
        "required": false
    }
};

const AmimsDueListOutputReportFormSchema = {
    "aircraft": {
        "default": "",
        "required": true
    },
    "atInstall": {
        "default": "",
        "required": false
    },
    "ata": {
        "default": "",
        "required": false
    },
    "code": {
        "default": "",
        "required": false
    },
    "currentPart": {
        "default": "",
        "required": false
    },
    "dueAt": {
        "default": "",
        "required": false
    },
    "dueC": {
        "default": 0,
        "required": false
    },
    "dueH": {
        "default": 0,
        "required": false
    },
    "dueT": {
        "default": 0,
        "required": false
    },
    "idAircraft": {
        "required": false
    },
    "idDueList": {
        "required": false
    },
    "idDueListOutput": {
        "required": true
    },
    "idMpart": {
        "required": false
    },
    "idPart": {
        "required": false
    },
    "installPart": {
        "default": "",
        "required": false
    },
    "keyword": {
        "default": "",
        "required": false
    },
    "mpart": {
        "default": "",
        "required": true
    },
    "noteDue": {
        "default": "",
        "required": false
    },
    "part": {
        "default": "",
        "required": true
    },
    "partNumber": {
        "default": "",
        "required": false
    },
    "peruntukan": {
        "default": "",
        "required": false
    },
    "ramaining": {
        "default": 0,
        "required": false
    },
    "sn": {
        "default": "",
        "required": false
    },
    "toDue": {
        "default": 0,
        "required": false
    },
    "typeDue": {
        "default": "",
        "required": false
    },
    "typeOfwork": {
        "default": "",
        "required": false
    },
    "variabel": {
        "default": "",
        "required": false
    }
};

const AmimsDueListOutputWidgetFormSchema = {
    "atInstall": {
        "default": "",
        "required": false
    },
    "ata": {
        "default": "",
        "required": false
    },
    "code": {
        "default": "",
        "required": false
    },
    "currentPart": {
        "default": "",
        "required": false
    },
    "dueAt": {
        "default": "",
        "required": false
    },
    "dueC": {
        "default": 0,
        "required": false
    },
    "dueH": {
        "default": 0,
        "required": false
    },
    "dueT": {
        "default": 0,
        "required": false
    },
    "idAircraft": {
        "required": false
    },
    "idDueList": {
        "required": false
    },
    "idDueListOutput": {
        "required": true
    },
    "idMpart": {
        "required": false
    },
    "idPart": {
        "required": false
    },
    "installPart": {
        "default": "",
        "required": false
    },
    "keyword": {
        "default": "",
        "required": false
    },
    "noteDue": {
        "default": "",
        "required": false
    },
    "partNumber": {
        "default": "",
        "required": false
    },
    "peruntukan": {
        "default": "",
        "required": false
    },
    "ramaining": {
        "default": 0,
        "required": false
    },
    "sn": {
        "default": "",
        "required": false
    },
    "toDue": {
        "default": 0,
        "required": false
    },
    "total": {
        "default": 0,
        "required": false
    },
    "typeDue": {
        "default": "",
        "required": false
    },
    "typeOfwork": {
        "default": "",
        "required": false
    },
    "variabel": {
        "default": "",
        "required": false
    }
};

const AmimsDueListOutputFormSchema = {
    "atInstall": {
        "default": "",
        "required": false
    },
    "ata": {
        "default": "",
        "required": false
    },
    "code": {
        "default": "",
        "required": false
    },
    "currentPart": {
        "default": "",
        "required": false
    },
    "dueAt": {
        "default": "",
        "required": false
    },
    "dueC": {
        "default": 0,
        "required": false
    },
    "dueH": {
        "default": 0,
        "required": false
    },
    "dueT": {
        "default": 0,
        "required": false
    },
    "idAircraft": {
        "required": false
    },
    "idDueList": {
        "required": false
    },
    "idDueListOutput": {
        "required": true
    },
    "idMpart": {
        "required": false
    },
    "idPart": {
        "required": false
    },
    "installPart": {
        "default": "",
        "required": false
    },
    "keyword": {
        "default": "",
        "required": false
    },
    "noteDue": {
        "default": "",
        "required": false
    },
    "partNumber": {
        "default": "",
        "required": false
    },
    "peruntukan": {
        "default": "",
        "required": false
    },
    "ramaining": {
        "default": 0,
        "required": false
    },
    "sn": {
        "default": "",
        "required": false
    },
    "toDue": {
        "default": 0,
        "required": false
    },
    "typeDue": {
        "default": "",
        "required": false
    },
    "typeOfwork": {
        "default": "",
        "required": false
    },
    "variabel": {
        "default": "",
        "required": false
    }
};

const AmimsDueListReportFormSchema = {
    "aircraft": {
        "default": "",
        "required": true
    },
    "currentCycle": {
        "default": 0,
        "required": false
    },
    "currentHours": {
        "default": 0,
        "required": false
    },
    "cycleFrom": {
        "default": 0,
        "required": false
    },
    "cycleTo": {
        "default": 0,
        "required": false
    },
    "dateDue": {
        "default": "",
        "required": false
    },
    "dueAcCycle": {
        "default": 0,
        "required": false
    },
    "dueAcHours": {
        "default": 0,
        "required": false
    },
    "dueCycle": {
        "default": 0,
        "required": false
    },
    "dueDate": {
        "default": "",
        "required": false
    },
    "dueHours": {
        "default": 0,
        "required": false
    },
    "hoursFrom": {
        "default": 0,
        "required": false
    },
    "hoursTo": {
        "default": 0,
        "required": false
    },
    "idAircraft": {
        "required": false
    },
    "idDueList": {
        "required": true
    },
    "idMantenance": {
        "required": false
    },
    "idPart": {
        "required": false
    },
    "idTypeOfwork": {
        "required": false
    },
    "lastCycle": {
        "default": 0,
        "required": false
    },
    "lastDate": {
        "default": "",
        "required": false
    },
    "lastHours": {
        "default": 0,
        "required": false
    },
    "noteDue": {
        "default": "",
        "required": false
    },
    "onSite": {
        "default": 0,
        "required": false
    },
    "parentAss": {
        "default": "",
        "required": false
    },
    "parentCycle": {
        "default": 0,
        "required": false
    },
    "parentHours": {
        "default": 0,
        "required": false
    },
    "parentTime": {
        "default": 0,
        "required": false
    },
    "part": {
        "default": "",
        "required": true
    },
    "remainingCycle": {
        "default": 0,
        "required": false
    },
    "remainingDay": {
        "default": "",
        "required": false
    },
    "remainingHours": {
        "default": 0,
        "required": false
    },
    "sn": {
        "default": "",
        "required": false
    },
    "timeFrom": {
        "default": 0,
        "required": false
    },
    "timeTo": {
        "default": 0,
        "required": false
    },
    "timeUnit": {
        "default": "",
        "required": false
    },
    "typeDue": {
        "default": "",
        "required": false
    },
    "typeOfwork": {
        "default": "",
        "required": false
    }
};

const AmimsDueListWidgetFormSchema = {
    "currentCycle": {
        "default": 0,
        "required": false
    },
    "currentHours": {
        "default": 0,
        "required": false
    },
    "cycleFrom": {
        "default": 0,
        "required": false
    },
    "cycleTo": {
        "default": 0,
        "required": false
    },
    "dateDue": {
        "default": "",
        "required": false
    },
    "dueAcCycle": {
        "default": 0,
        "required": false
    },
    "dueAcHours": {
        "default": 0,
        "required": false
    },
    "dueCycle": {
        "default": 0,
        "required": false
    },
    "dueDate": {
        "default": "",
        "required": false
    },
    "dueHours": {
        "default": 0,
        "required": false
    },
    "hoursFrom": {
        "default": 0,
        "required": false
    },
    "hoursTo": {
        "default": 0,
        "required": false
    },
    "idAircraft": {
        "required": false
    },
    "idDueList": {
        "required": true
    },
    "idMantenance": {
        "required": false
    },
    "idPart": {
        "required": false
    },
    "idTypeOfwork": {
        "required": false
    },
    "lastCycle": {
        "default": 0,
        "required": false
    },
    "lastDate": {
        "default": "",
        "required": false
    },
    "lastHours": {
        "default": 0,
        "required": false
    },
    "noteDue": {
        "default": "",
        "required": false
    },
    "onSite": {
        "default": 0,
        "required": false
    },
    "parentAss": {
        "default": "",
        "required": false
    },
    "parentCycle": {
        "default": 0,
        "required": false
    },
    "parentHours": {
        "default": 0,
        "required": false
    },
    "parentTime": {
        "default": 0,
        "required": false
    },
    "remainingCycle": {
        "default": 0,
        "required": false
    },
    "remainingDay": {
        "default": "",
        "required": false
    },
    "remainingHours": {
        "default": 0,
        "required": false
    },
    "sn": {
        "default": "",
        "required": false
    },
    "timeFrom": {
        "default": 0,
        "required": false
    },
    "timeTo": {
        "default": 0,
        "required": false
    },
    "timeUnit": {
        "default": "",
        "required": false
    },
    "total": {
        "default": 0,
        "required": false
    },
    "typeDue": {
        "default": "",
        "required": false
    },
    "typeOfwork": {
        "default": "",
        "required": false
    }
};

const AmimsDueListFormSchema = {
    "currentCycle": {
        "default": 0,
        "required": false
    },
    "currentHours": {
        "default": 0,
        "required": false
    },
    "cycleFrom": {
        "default": 0,
        "required": false
    },
    "cycleTo": {
        "default": 0,
        "required": false
    },
    "dateDue": {
        "default": "",
        "required": false
    },
    "dueAcCycle": {
        "default": 0,
        "required": false
    },
    "dueAcHours": {
        "default": 0,
        "required": false
    },
    "dueCycle": {
        "default": 0,
        "required": false
    },
    "dueDate": {
        "default": "",
        "required": false
    },
    "dueHours": {
        "default": 0,
        "required": false
    },
    "hoursFrom": {
        "default": 0,
        "required": false
    },
    "hoursTo": {
        "default": 0,
        "required": false
    },
    "idAircraft": {
        "required": false
    },
    "idDueList": {
        "required": true
    },
    "idMantenance": {
        "required": false
    },
    "idPart": {
        "required": false
    },
    "idTypeOfwork": {
        "required": false
    },
    "lastCycle": {
        "default": 0,
        "required": false
    },
    "lastDate": {
        "default": "",
        "required": false
    },
    "lastHours": {
        "default": 0,
        "required": false
    },
    "noteDue": {
        "default": "",
        "required": false
    },
    "onSite": {
        "default": 0,
        "required": false
    },
    "parentAss": {
        "default": "",
        "required": false
    },
    "parentCycle": {
        "default": 0,
        "required": false
    },
    "parentHours": {
        "default": 0,
        "required": false
    },
    "parentTime": {
        "default": 0,
        "required": false
    },
    "remainingCycle": {
        "default": 0,
        "required": false
    },
    "remainingDay": {
        "default": "",
        "required": false
    },
    "remainingHours": {
        "default": 0,
        "required": false
    },
    "sn": {
        "default": "",
        "required": false
    },
    "timeFrom": {
        "default": 0,
        "required": false
    },
    "timeTo": {
        "default": 0,
        "required": false
    },
    "timeUnit": {
        "default": "",
        "required": false
    },
    "typeDue": {
        "default": "",
        "required": false
    },
    "typeOfwork": {
        "default": "",
        "required": false
    }
};

const AmimsEngineerPmtrItemReportFormSchema = {
    "createdAt": {
        "default": "",
        "required": false
    },
    "figureIndex": {
        "default": "",
        "required": false
    },
    "idEngineerPmtr": {
        "required": false
    },
    "idEngineerPmtrItem": {
        "required": true
    },
    "idMpart": {
        "required": false
    },
    "mpart": {
        "default": "",
        "required": true
    },
    "noteItemPmtr": {
        "default": "",
        "required": false
    },
    "priority": {
        "default": "",
        "required": false
    },
    "qtyPmtr": {
        "default": 0,
        "required": false
    },
    "updatedAt": {
        "default": "",
        "required": false
    }
};

const AmimsEngineerPmtrItemWidgetFormSchema = {
    "createdAt": {
        "default": "",
        "required": false
    },
    "figureIndex": {
        "default": "",
        "required": false
    },
    "idEngineerPmtr": {
        "required": false
    },
    "idEngineerPmtrItem": {
        "required": true
    },
    "idMpart": {
        "required": false
    },
    "noteItemPmtr": {
        "default": "",
        "required": false
    },
    "priority": {
        "default": "",
        "required": false
    },
    "qtyPmtr": {
        "default": 0,
        "required": false
    },
    "total": {
        "default": 0,
        "required": false
    },
    "updatedAt": {
        "default": "",
        "required": false
    }
};

const AmimsEngineerPmtrItemFormSchema = {
    "createdAt": {
        "default": "",
        "required": false
    },
    "figureIndex": {
        "default": "",
        "required": false
    },
    "idEngineerPmtr": {
        "required": false
    },
    "idEngineerPmtrItem": {
        "required": true
    },
    "idMpart": {
        "required": false
    },
    "noteItemPmtr": {
        "default": "",
        "required": false
    },
    "priority": {
        "default": "",
        "required": false
    },
    "qtyPmtr": {
        "default": 0,
        "required": false
    },
    "updatedAt": {
        "default": "",
        "required": false
    }
};

const AmimsEngineerPmtrReportFormSchema = {
    "aircraft": {
        "default": "",
        "required": true
    },
    "createdAt": {
        "default": "",
        "required": false
    },
    "dateAcc": {
        "default": "",
        "required": false
    },
    "datePmtr": {
        "default": "",
        "required": false
    },
    "fromSite": {
        "default": 0,
        "required": false
    },
    "idAircraft": {
        "required": false
    },
    "idEngineerPmtr": {
        "required": true
    },
    "idUser": {
        "required": false
    },
    "idUserAcc": {
        "required": false
    },
    "isDeleted": {
        "default": 0,
        "required": false
    },
    "noIndex": {
        "default": 0,
        "required": false
    },
    "notePmtr": {
        "default": "",
        "required": false
    },
    "numberPmtr": {
        "default": "",
        "required": false
    },
    "statusPmtr": {
        "default": "",
        "required": false
    },
    "toSite": {
        "default": 0,
        "required": false
    },
    "updatedAt": {
        "default": "",
        "required": false
    },
    "validasi": {
        "default": 0,
        "required": false
    }
};

const AmimsEngineerPmtrWidgetFormSchema = {
    "createdAt": {
        "default": "",
        "required": false
    },
    "dateAcc": {
        "default": "",
        "required": false
    },
    "datePmtr": {
        "default": "",
        "required": false
    },
    "fromSite": {
        "default": 0,
        "required": false
    },
    "idAircraft": {
        "required": false
    },
    "idEngineerPmtr": {
        "required": true
    },
    "idUser": {
        "required": false
    },
    "idUserAcc": {
        "required": false
    },
    "isDeleted": {
        "default": 0,
        "required": false
    },
    "noIndex": {
        "default": 0,
        "required": false
    },
    "notePmtr": {
        "default": "",
        "required": false
    },
    "numberPmtr": {
        "default": "",
        "required": false
    },
    "statusPmtr": {
        "default": "",
        "required": false
    },
    "toSite": {
        "default": 0,
        "required": false
    },
    "total": {
        "default": 0,
        "required": false
    },
    "updatedAt": {
        "default": "",
        "required": false
    },
    "validasi": {
        "default": 0,
        "required": false
    }
};

const AmimsEngineerPmtrFormSchema = {
    "createdAt": {
        "default": "",
        "required": false
    },
    "dateAcc": {
        "default": "",
        "required": false
    },
    "datePmtr": {
        "default": "",
        "required": false
    },
    "fromSite": {
        "default": 0,
        "required": false
    },
    "idAircraft": {
        "required": false
    },
    "idEngineerPmtr": {
        "required": true
    },
    "idUser": {
        "required": false
    },
    "idUserAcc": {
        "required": false
    },
    "isDeleted": {
        "default": 0,
        "required": false
    },
    "noIndex": {
        "default": 0,
        "required": false
    },
    "notePmtr": {
        "default": "",
        "required": false
    },
    "numberPmtr": {
        "default": "",
        "required": false
    },
    "statusPmtr": {
        "default": "",
        "required": false
    },
    "toSite": {
        "default": 0,
        "required": false
    },
    "updatedAt": {
        "default": "",
        "required": false
    },
    "validasi": {
        "default": 0,
        "required": false
    }
};

const AmimsEngineerPrisItemReportFormSchema = {
    "createdAt": {
        "default": "",
        "required": false
    },
    "fromPart": {
        "default": "",
        "required": false
    },
    "hashTechLog": {
        "default": "",
        "required": false
    },
    "idEngineerPris": {
        "required": false
    },
    "idEngineerPrisItem": {
        "required": true
    },
    "idPart": {
        "required": false
    },
    "idPartRemove": {
        "required": false
    },
    "isDeleted": {
        "default": 0,
        "required": false
    },
    "noteItemPris": {
        "default": "",
        "required": false
    },
    "part": {
        "default": "",
        "required": true
    },
    "partOnDate": {
        "default": "",
        "required": false
    },
    "qtyInstall": {
        "default": 0,
        "required": false
    },
    "qtyPris": {
        "default": 0,
        "required": false
    },
    "statusItem": {
        "default": "",
        "required": false
    },
    "tsnCycle": {
        "default": 0,
        "required": false
    },
    "tsnHours": {
        "default": 0,
        "required": false
    },
    "tsnVal": {
        "default": 0,
        "required": false
    },
    "tsoCycle": {
        "default": 0,
        "required": false
    },
    "tsoHours": {
        "default": 0,
        "required": false
    },
    "tsoVal": {
        "default": 0,
        "required": false
    },
    "updatedAt": {
        "default": "",
        "required": false
    }
};

const AmimsEngineerPrisItemWidgetFormSchema = {
    "createdAt": {
        "default": "",
        "required": false
    },
    "fromPart": {
        "default": "",
        "required": false
    },
    "hashTechLog": {
        "default": "",
        "required": false
    },
    "idEngineerPris": {
        "required": false
    },
    "idEngineerPrisItem": {
        "required": true
    },
    "idPart": {
        "required": false
    },
    "idPartRemove": {
        "required": false
    },
    "isDeleted": {
        "default": 0,
        "required": false
    },
    "noteItemPris": {
        "default": "",
        "required": false
    },
    "partOnDate": {
        "default": "",
        "required": false
    },
    "qtyInstall": {
        "default": 0,
        "required": false
    },
    "qtyPris": {
        "default": 0,
        "required": false
    },
    "statusItem": {
        "default": "",
        "required": false
    },
    "total": {
        "default": 0,
        "required": false
    },
    "tsnCycle": {
        "default": 0,
        "required": false
    },
    "tsnHours": {
        "default": 0,
        "required": false
    },
    "tsnVal": {
        "default": 0,
        "required": false
    },
    "tsoCycle": {
        "default": 0,
        "required": false
    },
    "tsoHours": {
        "default": 0,
        "required": false
    },
    "tsoVal": {
        "default": 0,
        "required": false
    },
    "updatedAt": {
        "default": "",
        "required": false
    }
};

const AmimsEngineerPrisItemFormSchema = {
    "createdAt": {
        "default": "",
        "required": false
    },
    "fromPart": {
        "default": "",
        "required": false
    },
    "hashTechLog": {
        "default": "",
        "required": false
    },
    "idEngineerPris": {
        "required": false
    },
    "idEngineerPrisItem": {
        "required": true
    },
    "idPart": {
        "required": false
    },
    "idPartRemove": {
        "required": false
    },
    "isDeleted": {
        "default": 0,
        "required": false
    },
    "noteItemPris": {
        "default": "",
        "required": false
    },
    "partOnDate": {
        "default": "",
        "required": false
    },
    "qtyInstall": {
        "default": 0,
        "required": false
    },
    "qtyPris": {
        "default": 0,
        "required": false
    },
    "statusItem": {
        "default": "",
        "required": false
    },
    "tsnCycle": {
        "default": 0,
        "required": false
    },
    "tsnHours": {
        "default": 0,
        "required": false
    },
    "tsnVal": {
        "default": 0,
        "required": false
    },
    "tsoCycle": {
        "default": 0,
        "required": false
    },
    "tsoHours": {
        "default": 0,
        "required": false
    },
    "tsoVal": {
        "default": 0,
        "required": false
    },
    "updatedAt": {
        "default": "",
        "required": false
    }
};

const AmimsEngineerPrisReportFormSchema = {
    "aircraft": {
        "default": "",
        "required": true
    },
    "createdAt": {
        "default": "",
        "required": false
    },
    "dateAcc": {
        "default": "",
        "required": false
    },
    "dateClose": {
        "default": "",
        "required": false
    },
    "dateInstall": {
        "default": "",
        "required": false
    },
    "dateIssued": {
        "default": "",
        "required": false
    },
    "datePris": {
        "default": "",
        "required": false
    },
    "description": {
        "default": "",
        "required": false
    },
    "idAircraft": {
        "required": false
    },
    "idEngineerPris": {
        "required": true
    },
    "idPosition": {
        "required": false
    },
    "idSite": {
        "required": false
    },
    "idUser": {
        "required": false
    },
    "idUserAcc": {
        "required": false
    },
    "idUserClose": {
        "required": false
    },
    "idUserIssued": {
        "required": false
    },
    "isDeleted": {
        "default": 0,
        "required": false
    },
    "keyword": {
        "default": "",
        "required": false
    },
    "noIndex": {
        "default": 0,
        "required": false
    },
    "notePris": {
        "default": "",
        "required": false
    },
    "numberJo": {
        "default": "",
        "required": false
    },
    "numberPris": {
        "default": "",
        "required": false
    },
    "numberWp": {
        "default": "",
        "required": false
    },
    "position": {
        "default": "",
        "required": true
    },
    "priority": {
        "default": "",
        "required": false
    },
    "site": {
        "default": "",
        "required": true
    },
    "statusPris": {
        "default": "",
        "required": false
    },
    "typePris": {
        "default": "",
        "required": false
    },
    "updatedAt": {
        "default": "",
        "required": false
    },
    "validasi": {
        "default": 0,
        "required": false
    }
};

const AmimsEngineerPrisReturnItemReportFormSchema = {
    "idEngineerPrisItem": {
        "required": false
    },
    "idEngineerPrisReturnItem": {
        "required": true
    },
    "isAccept": {
        "default": "",
        "required": false
    },
    "qtyReturn": {
        "default": 0,
        "required": false
    }
};

const AmimsEngineerPrisReturnItemWidgetFormSchema = {
    "idEngineerPrisItem": {
        "required": false
    },
    "idEngineerPrisReturnItem": {
        "required": true
    },
    "isAccept": {
        "default": "",
        "required": false
    },
    "qtyReturn": {
        "default": 0,
        "required": false
    },
    "total": {
        "default": 0,
        "required": false
    }
};

const AmimsEngineerPrisReturnItemFormSchema = {
    "idEngineerPrisItem": {
        "required": false
    },
    "idEngineerPrisReturnItem": {
        "required": true
    },
    "isAccept": {
        "default": "",
        "required": false
    },
    "qtyReturn": {
        "default": 0,
        "required": false
    }
};

const AmimsEngineerPrisReturnReportFormSchema = {
    "dateReturn": {
        "default": "",
        "required": false
    },
    "idEngineerPris": {
        "required": false
    },
    "idEngineerPrisReturn": {
        "required": true
    },
    "statusReturn": {
        "default": "",
        "required": false
    }
};

const AmimsEngineerPrisReturnWidgetFormSchema = {
    "dateReturn": {
        "default": "",
        "required": false
    },
    "idEngineerPris": {
        "required": false
    },
    "idEngineerPrisReturn": {
        "required": true
    },
    "statusReturn": {
        "default": "",
        "required": false
    },
    "total": {
        "default": 0,
        "required": false
    }
};

const AmimsEngineerPrisReturnFormSchema = {
    "dateReturn": {
        "default": "",
        "required": false
    },
    "idEngineerPris": {
        "required": false
    },
    "idEngineerPrisReturn": {
        "required": true
    },
    "statusReturn": {
        "default": "",
        "required": false
    }
};

const AmimsEngineerPrisWidgetFormSchema = {
    "createdAt": {
        "default": "",
        "required": false
    },
    "dateAcc": {
        "default": "",
        "required": false
    },
    "dateClose": {
        "default": "",
        "required": false
    },
    "dateInstall": {
        "default": "",
        "required": false
    },
    "dateIssued": {
        "default": "",
        "required": false
    },
    "datePris": {
        "default": "",
        "required": false
    },
    "description": {
        "default": "",
        "required": false
    },
    "idAircraft": {
        "required": false
    },
    "idEngineerPris": {
        "required": true
    },
    "idPosition": {
        "required": false
    },
    "idSite": {
        "required": false
    },
    "idUser": {
        "required": false
    },
    "idUserAcc": {
        "required": false
    },
    "idUserClose": {
        "required": false
    },
    "idUserIssued": {
        "required": false
    },
    "isDeleted": {
        "default": 0,
        "required": false
    },
    "keyword": {
        "default": "",
        "required": false
    },
    "noIndex": {
        "default": 0,
        "required": false
    },
    "notePris": {
        "default": "",
        "required": false
    },
    "numberJo": {
        "default": "",
        "required": false
    },
    "numberPris": {
        "default": "",
        "required": false
    },
    "numberWp": {
        "default": "",
        "required": false
    },
    "priority": {
        "default": "",
        "required": false
    },
    "statusPris": {
        "default": "",
        "required": false
    },
    "total": {
        "default": 0,
        "required": false
    },
    "typePris": {
        "default": "",
        "required": false
    },
    "updatedAt": {
        "default": "",
        "required": false
    },
    "validasi": {
        "default": 0,
        "required": false
    }
};

const AmimsEngineerPrisFormSchema = {
    "createdAt": {
        "default": "",
        "required": false
    },
    "dateAcc": {
        "default": "",
        "required": false
    },
    "dateClose": {
        "default": "",
        "required": false
    },
    "dateInstall": {
        "default": "",
        "required": false
    },
    "dateIssued": {
        "default": "",
        "required": false
    },
    "datePris": {
        "default": "",
        "required": false
    },
    "description": {
        "default": "",
        "required": false
    },
    "idAircraft": {
        "required": false
    },
    "idEngineerPris": {
        "required": true
    },
    "idPosition": {
        "required": false
    },
    "idSite": {
        "required": false
    },
    "idUser": {
        "required": false
    },
    "idUserAcc": {
        "required": false
    },
    "idUserClose": {
        "required": false
    },
    "idUserIssued": {
        "required": false
    },
    "isDeleted": {
        "default": 0,
        "required": false
    },
    "keyword": {
        "default": "",
        "required": false
    },
    "noIndex": {
        "default": 0,
        "required": false
    },
    "notePris": {
        "default": "",
        "required": false
    },
    "numberJo": {
        "default": "",
        "required": false
    },
    "numberPris": {
        "default": "",
        "required": false
    },
    "numberWp": {
        "default": "",
        "required": false
    },
    "priority": {
        "default": "",
        "required": false
    },
    "statusPris": {
        "default": "",
        "required": false
    },
    "typePris": {
        "default": "",
        "required": false
    },
    "updatedAt": {
        "default": "",
        "required": false
    },
    "validasi": {
        "default": 0,
        "required": false
    }
};

const AmimsEngineerRtiIdentifyReportFormSchema = {
    "dateInstall": {
        "default": "",
        "required": false
    },
    "idEngineerRti": {
        "required": false
    },
    "idEngineerRtiIdentify": {
        "required": true
    },
    "idPart": {
        "required": false
    },
    "idPartInstall": {
        "required": false
    },
    "parent": {
        "default": "",
        "required": false
    },
    "part": {
        "default": "",
        "required": true
    },
    "tsiCycle": {
        "default": 0,
        "required": false
    },
    "tsiHours": {
        "default": 0,
        "required": false
    },
    "tsiVal": {
        "default": 0,
        "required": false
    },
    "tsiVar": {
        "default": "",
        "required": false
    },
    "tsnCycle": {
        "default": 0,
        "required": false
    },
    "tsnHours": {
        "default": 0,
        "required": false
    },
    "tsnVal": {
        "default": 0,
        "required": false
    },
    "tsnVar": {
        "default": "",
        "required": false
    },
    "tsoCycle": {
        "default": 0,
        "required": false
    },
    "tsoHours": {
        "default": 0,
        "required": false
    },
    "tsoVal": {
        "default": 0,
        "required": false
    },
    "tsoVar": {
        "default": "",
        "required": false
    },
    "warantyStartCycle": {
        "default": 0,
        "required": false
    },
    "warantyStartDate": {
        "default": "",
        "required": false
    },
    "warantyStartDays": {
        "default": 0,
        "required": false
    },
    "warantyStartHours": {
        "default": 0,
        "required": false
    }
};

const AmimsEngineerRtiIdentifyWidgetFormSchema = {
    "dateInstall": {
        "default": "",
        "required": false
    },
    "idEngineerRti": {
        "required": false
    },
    "idEngineerRtiIdentify": {
        "required": true
    },
    "idPart": {
        "required": false
    },
    "idPartInstall": {
        "required": false
    },
    "parent": {
        "default": "",
        "required": false
    },
    "total": {
        "default": 0,
        "required": false
    },
    "tsiCycle": {
        "default": 0,
        "required": false
    },
    "tsiHours": {
        "default": 0,
        "required": false
    },
    "tsiVal": {
        "default": 0,
        "required": false
    },
    "tsiVar": {
        "default": "",
        "required": false
    },
    "tsnCycle": {
        "default": 0,
        "required": false
    },
    "tsnHours": {
        "default": 0,
        "required": false
    },
    "tsnVal": {
        "default": 0,
        "required": false
    },
    "tsnVar": {
        "default": "",
        "required": false
    },
    "tsoCycle": {
        "default": 0,
        "required": false
    },
    "tsoHours": {
        "default": 0,
        "required": false
    },
    "tsoVal": {
        "default": 0,
        "required": false
    },
    "tsoVar": {
        "default": "",
        "required": false
    },
    "warantyStartCycle": {
        "default": 0,
        "required": false
    },
    "warantyStartDate": {
        "default": "",
        "required": false
    },
    "warantyStartDays": {
        "default": 0,
        "required": false
    },
    "warantyStartHours": {
        "default": 0,
        "required": false
    }
};

const AmimsEngineerRtiIdentifyFormSchema = {
    "dateInstall": {
        "default": "",
        "required": false
    },
    "idEngineerRti": {
        "required": false
    },
    "idEngineerRtiIdentify": {
        "required": true
    },
    "idPart": {
        "required": false
    },
    "idPartInstall": {
        "required": false
    },
    "parent": {
        "default": "",
        "required": false
    },
    "tsiCycle": {
        "default": 0,
        "required": false
    },
    "tsiHours": {
        "default": 0,
        "required": false
    },
    "tsiVal": {
        "default": 0,
        "required": false
    },
    "tsiVar": {
        "default": "",
        "required": false
    },
    "tsnCycle": {
        "default": 0,
        "required": false
    },
    "tsnHours": {
        "default": 0,
        "required": false
    },
    "tsnVal": {
        "default": 0,
        "required": false
    },
    "tsnVar": {
        "default": "",
        "required": false
    },
    "tsoCycle": {
        "default": 0,
        "required": false
    },
    "tsoHours": {
        "default": 0,
        "required": false
    },
    "tsoVal": {
        "default": 0,
        "required": false
    },
    "tsoVar": {
        "default": "",
        "required": false
    },
    "warantyStartCycle": {
        "default": 0,
        "required": false
    },
    "warantyStartDate": {
        "default": "",
        "required": false
    },
    "warantyStartDays": {
        "default": 0,
        "required": false
    },
    "warantyStartHours": {
        "default": 0,
        "required": false
    }
};

const AmimsEngineerRtiPartReportFormSchema = {
    "dateInstall": {
        "default": "",
        "required": false
    },
    "idEngineerRti": {
        "required": false
    },
    "idEngineerRtiPart": {
        "required": true
    },
    "idPart": {
        "required": false
    },
    "idPartInstall": {
        "required": false
    },
    "parent": {
        "default": "",
        "required": false
    },
    "part": {
        "default": "",
        "required": true
    },
    "tsiCycle": {
        "default": 0,
        "required": false
    },
    "tsiHours": {
        "default": 0,
        "required": false
    },
    "tsiVal": {
        "default": 0,
        "required": false
    },
    "tsiVar": {
        "default": "",
        "required": false
    },
    "tsnCycle": {
        "default": 0,
        "required": false
    },
    "tsnHours": {
        "default": 0,
        "required": false
    },
    "tsnVal": {
        "default": 0,
        "required": false
    },
    "tsnVar": {
        "default": "",
        "required": false
    },
    "tsoCycle": {
        "default": 0,
        "required": false
    },
    "tsoHours": {
        "default": 0,
        "required": false
    },
    "tsoVal": {
        "default": 0,
        "required": false
    },
    "tsoVar": {
        "default": "",
        "required": false
    },
    "warantyStartCycle": {
        "default": 0,
        "required": false
    },
    "warantyStartDate": {
        "default": "",
        "required": false
    },
    "warantyStartDays": {
        "default": 0,
        "required": false
    },
    "warantyStartHours": {
        "default": 0,
        "required": false
    }
};

const AmimsEngineerRtiPartWidgetFormSchema = {
    "dateInstall": {
        "default": "",
        "required": false
    },
    "idEngineerRti": {
        "required": false
    },
    "idEngineerRtiPart": {
        "required": true
    },
    "idPart": {
        "required": false
    },
    "idPartInstall": {
        "required": false
    },
    "parent": {
        "default": "",
        "required": false
    },
    "total": {
        "default": 0,
        "required": false
    },
    "tsiCycle": {
        "default": 0,
        "required": false
    },
    "tsiHours": {
        "default": 0,
        "required": false
    },
    "tsiVal": {
        "default": 0,
        "required": false
    },
    "tsiVar": {
        "default": "",
        "required": false
    },
    "tsnCycle": {
        "default": 0,
        "required": false
    },
    "tsnHours": {
        "default": 0,
        "required": false
    },
    "tsnVal": {
        "default": 0,
        "required": false
    },
    "tsnVar": {
        "default": "",
        "required": false
    },
    "tsoCycle": {
        "default": 0,
        "required": false
    },
    "tsoHours": {
        "default": 0,
        "required": false
    },
    "tsoVal": {
        "default": 0,
        "required": false
    },
    "tsoVar": {
        "default": "",
        "required": false
    },
    "warantyStartCycle": {
        "default": 0,
        "required": false
    },
    "warantyStartDate": {
        "default": "",
        "required": false
    },
    "warantyStartDays": {
        "default": 0,
        "required": false
    },
    "warantyStartHours": {
        "default": 0,
        "required": false
    }
};

const AmimsEngineerRtiPartFormSchema = {
    "dateInstall": {
        "default": "",
        "required": false
    },
    "idEngineerRti": {
        "required": false
    },
    "idEngineerRtiPart": {
        "required": true
    },
    "idPart": {
        "required": false
    },
    "idPartInstall": {
        "required": false
    },
    "parent": {
        "default": "",
        "required": false
    },
    "tsiCycle": {
        "default": 0,
        "required": false
    },
    "tsiHours": {
        "default": 0,
        "required": false
    },
    "tsiVal": {
        "default": 0,
        "required": false
    },
    "tsiVar": {
        "default": "",
        "required": false
    },
    "tsnCycle": {
        "default": 0,
        "required": false
    },
    "tsnHours": {
        "default": 0,
        "required": false
    },
    "tsnVal": {
        "default": 0,
        "required": false
    },
    "tsnVar": {
        "default": "",
        "required": false
    },
    "tsoCycle": {
        "default": 0,
        "required": false
    },
    "tsoHours": {
        "default": 0,
        "required": false
    },
    "tsoVal": {
        "default": 0,
        "required": false
    },
    "tsoVar": {
        "default": "",
        "required": false
    },
    "warantyStartCycle": {
        "default": 0,
        "required": false
    },
    "warantyStartDate": {
        "default": "",
        "required": false
    },
    "warantyStartDays": {
        "default": 0,
        "required": false
    },
    "warantyStartHours": {
        "default": 0,
        "required": false
    }
};

const AmimsEngineerRtiReportFormSchema = {
    "aircraft": {
        "default": "",
        "required": true
    },
    "base": {
        "default": "",
        "required": false
    },
    "createdAt": {
        "default": "",
        "required": false
    },
    "dateRti": {
        "default": "",
        "required": false
    },
    "dispotition": {
        "default": 0,
        "required": false
    },
    "hasPris": {
        "default": "",
        "required": false
    },
    "hashProcess": {
        "default": "",
        "required": false
    },
    "hashRpd": {
        "default": "",
        "required": false
    },
    "hashTechLog": {
        "default": "",
        "required": false
    },
    "idAircraft": {
        "required": false
    },
    "idEngineerRti": {
        "required": true
    },
    "idMpcJo": {
        "required": false
    },
    "idPart": {
        "required": false
    },
    "idPartInstall": {
        "required": false
    },
    "idSite": {
        "required": false
    },
    "inspectedBy": {
        "default": 0,
        "required": false
    },
    "numberRti": {
        "default": "",
        "required": false
    },
    "part": {
        "default": "",
        "required": true
    },
    "reason": {
        "default": "",
        "required": false
    },
    "receivedBy": {
        "default": 0,
        "required": false
    },
    "remainingHours": {
        "default": 0,
        "required": false
    },
    "remarkDisposisi": {
        "default": "",
        "required": false
    },
    "returnBy": {
        "default": 0,
        "required": false
    },
    "site": {
        "default": "",
        "required": true
    },
    "statusRti": {
        "default": "",
        "required": false
    },
    "statusService": {
        "default": "",
        "required": false
    },
    "tsnCycle": {
        "default": 0,
        "required": false
    },
    "tsnCycleParent": {
        "default": 0,
        "required": false
    },
    "tsnHours": {
        "default": 0,
        "required": false
    },
    "tsnHoursParent": {
        "default": 0,
        "required": false
    },
    "tsnVal": {
        "default": 0,
        "required": false
    },
    "tsnVar": {
        "default": "",
        "required": false
    },
    "tsoCycle": {
        "default": 0,
        "required": false
    },
    "tsoHours": {
        "default": 0,
        "required": false
    },
    "tsoVal": {
        "default": 0,
        "required": false
    },
    "tsoVar": {
        "default": "",
        "required": false
    },
    "typeRti": {
        "default": "",
        "required": false
    },
    "updatedAt": {
        "default": "",
        "required": false
    }
};

const AmimsEngineerRtiWidgetFormSchema = {
    "base": {
        "default": "",
        "required": false
    },
    "createdAt": {
        "default": "",
        "required": false
    },
    "dateRti": {
        "default": "",
        "required": false
    },
    "dispotition": {
        "default": 0,
        "required": false
    },
    "hasPris": {
        "default": "",
        "required": false
    },
    "hashProcess": {
        "default": "",
        "required": false
    },
    "hashRpd": {
        "default": "",
        "required": false
    },
    "hashTechLog": {
        "default": "",
        "required": false
    },
    "idAircraft": {
        "required": false
    },
    "idEngineerRti": {
        "required": true
    },
    "idMpcJo": {
        "required": false
    },
    "idPart": {
        "required": false
    },
    "idPartInstall": {
        "required": false
    },
    "idSite": {
        "required": false
    },
    "inspectedBy": {
        "default": 0,
        "required": false
    },
    "numberRti": {
        "default": "",
        "required": false
    },
    "reason": {
        "default": "",
        "required": false
    },
    "receivedBy": {
        "default": 0,
        "required": false
    },
    "remainingHours": {
        "default": 0,
        "required": false
    },
    "remarkDisposisi": {
        "default": "",
        "required": false
    },
    "returnBy": {
        "default": 0,
        "required": false
    },
    "statusRti": {
        "default": "",
        "required": false
    },
    "statusService": {
        "default": "",
        "required": false
    },
    "total": {
        "default": 0,
        "required": false
    },
    "tsnCycle": {
        "default": 0,
        "required": false
    },
    "tsnCycleParent": {
        "default": 0,
        "required": false
    },
    "tsnHours": {
        "default": 0,
        "required": false
    },
    "tsnHoursParent": {
        "default": 0,
        "required": false
    },
    "tsnVal": {
        "default": 0,
        "required": false
    },
    "tsnVar": {
        "default": "",
        "required": false
    },
    "tsoCycle": {
        "default": 0,
        "required": false
    },
    "tsoHours": {
        "default": 0,
        "required": false
    },
    "tsoVal": {
        "default": 0,
        "required": false
    },
    "tsoVar": {
        "default": "",
        "required": false
    },
    "typeRti": {
        "default": "",
        "required": false
    },
    "updatedAt": {
        "default": "",
        "required": false
    }
};

const AmimsEngineerRtiFormSchema = {
    "base": {
        "default": "",
        "required": false
    },
    "createdAt": {
        "default": "",
        "required": false
    },
    "dateRti": {
        "default": "",
        "required": false
    },
    "dispotition": {
        "default": 0,
        "required": false
    },
    "hasPris": {
        "default": "",
        "required": false
    },
    "hashProcess": {
        "default": "",
        "required": false
    },
    "hashRpd": {
        "default": "",
        "required": false
    },
    "hashTechLog": {
        "default": "",
        "required": false
    },
    "idAircraft": {
        "required": false
    },
    "idEngineerRti": {
        "required": true
    },
    "idMpcJo": {
        "required": false
    },
    "idPart": {
        "required": false
    },
    "idPartInstall": {
        "required": false
    },
    "idSite": {
        "required": false
    },
    "inspectedBy": {
        "default": 0,
        "required": false
    },
    "numberRti": {
        "default": "",
        "required": false
    },
    "reason": {
        "default": "",
        "required": false
    },
    "receivedBy": {
        "default": 0,
        "required": false
    },
    "remainingHours": {
        "default": 0,
        "required": false
    },
    "remarkDisposisi": {
        "default": "",
        "required": false
    },
    "returnBy": {
        "default": 0,
        "required": false
    },
    "statusRti": {
        "default": "",
        "required": false
    },
    "statusService": {
        "default": "",
        "required": false
    },
    "tsnCycle": {
        "default": 0,
        "required": false
    },
    "tsnCycleParent": {
        "default": 0,
        "required": false
    },
    "tsnHours": {
        "default": 0,
        "required": false
    },
    "tsnHoursParent": {
        "default": 0,
        "required": false
    },
    "tsnVal": {
        "default": 0,
        "required": false
    },
    "tsnVar": {
        "default": "",
        "required": false
    },
    "tsoCycle": {
        "default": 0,
        "required": false
    },
    "tsoHours": {
        "default": 0,
        "required": false
    },
    "tsoVal": {
        "default": 0,
        "required": false
    },
    "tsoVar": {
        "default": "",
        "required": false
    },
    "typeRti": {
        "default": "",
        "required": false
    },
    "updatedAt": {
        "default": "",
        "required": false
    }
};

const AmimsFigureIndexFormSchema = {
    "description": {
        "default": "",
        "required": false
    },
    "figureIndex": {
        "default": "",
        "required": false
    },
    "idAta": {
        "required": false
    },
    "idFigureIndex": {
        "required": true
    }
};

const AmimsInspectionReportFormSchema = {
    "aircraft": {
        "default": "",
        "required": true
    },
    "atachapter": {
        "default": "",
        "required": false
    },
    "createdAt": {
        "default": "",
        "required": false
    },
    "cycleTo": {
        "default": 0,
        "required": false
    },
    "flightHoursTo": {
        "default": 0,
        "required": false
    },
    "idAircraft": {
        "required": false
    },
    "idInspection": {
        "required": true
    },
    "idMaintenanceCode": {
        "required": false
    },
    "idPart": {
        "required": false
    },
    "idUser": {
        "required": false
    },
    "noteInspection": {
        "default": "",
        "required": false
    },
    "oldId": {
        "default": "",
        "required": false
    },
    "part": {
        "default": "",
        "required": true
    },
    "repetitions": {
        "default": 0,
        "required": false
    },
    "timeRangeTo": {
        "default": 0,
        "required": false
    },
    "timeUnit": {
        "default": "",
        "required": false
    },
    "updatedAt": {
        "default": "",
        "required": false
    }
};

const AmimsInspectionWidgetFormSchema = {
    "atachapter": {
        "default": "",
        "required": false
    },
    "createdAt": {
        "default": "",
        "required": false
    },
    "cycleTo": {
        "default": 0,
        "required": false
    },
    "flightHoursTo": {
        "default": 0,
        "required": false
    },
    "idAircraft": {
        "required": false
    },
    "idInspection": {
        "required": true
    },
    "idMaintenanceCode": {
        "required": false
    },
    "idPart": {
        "required": false
    },
    "idUser": {
        "required": false
    },
    "noteInspection": {
        "default": "",
        "required": false
    },
    "oldId": {
        "default": "",
        "required": false
    },
    "repetitions": {
        "default": 0,
        "required": false
    },
    "timeRangeTo": {
        "default": 0,
        "required": false
    },
    "timeUnit": {
        "default": "",
        "required": false
    },
    "total": {
        "default": 0,
        "required": false
    },
    "updatedAt": {
        "default": "",
        "required": false
    }
};

const AmimsInspectionFormSchema = {
    "atachapter": {
        "default": "",
        "required": false
    },
    "createdAt": {
        "default": "",
        "required": false
    },
    "cycleTo": {
        "default": 0,
        "required": false
    },
    "flightHoursTo": {
        "default": 0,
        "required": false
    },
    "idAircraft": {
        "required": false
    },
    "idInspection": {
        "required": true
    },
    "idMaintenanceCode": {
        "required": false
    },
    "idPart": {
        "required": false
    },
    "idUser": {
        "required": false
    },
    "noteInspection": {
        "default": "",
        "required": false
    },
    "oldId": {
        "default": "",
        "required": false
    },
    "repetitions": {
        "default": 0,
        "required": false
    },
    "timeRangeTo": {
        "default": 0,
        "required": false
    },
    "timeUnit": {
        "default": "",
        "required": false
    },
    "updatedAt": {
        "default": "",
        "required": false
    }
};

const AmimsInternalGrnItemReportFormSchema = {
    "createdAt": {
        "default": "",
        "required": false
    },
    "idEngineerPrisItem": {
        "required": false
    },
    "idInternalGrn": {
        "required": false
    },
    "idInternalGrnItem": {
        "required": true
    },
    "idMpart": {
        "required": false
    },
    "idPart": {
        "required": false
    },
    "mpart": {
        "default": "",
        "required": true
    },
    "part": {
        "default": "",
        "required": true
    },
    "qtyGrn": {
        "default": 0,
        "required": false
    },
    "remark": {
        "default": "",
        "required": false
    },
    "statusItem": {
        "default": "",
        "required": false
    },
    "updatedAt": {
        "default": "",
        "required": false
    }
};

const AmimsInternalGrnItemWidgetFormSchema = {
    "createdAt": {
        "default": "",
        "required": false
    },
    "idEngineerPrisItem": {
        "required": false
    },
    "idInternalGrn": {
        "required": false
    },
    "idInternalGrnItem": {
        "required": true
    },
    "idMpart": {
        "required": false
    },
    "idPart": {
        "required": false
    },
    "qtyGrn": {
        "default": 0,
        "required": false
    },
    "remark": {
        "default": "",
        "required": false
    },
    "statusItem": {
        "default": "",
        "required": false
    },
    "total": {
        "default": 0,
        "required": false
    },
    "updatedAt": {
        "default": "",
        "required": false
    }
};

const AmimsInternalGrnItemFormSchema = {
    "createdAt": {
        "default": "",
        "required": false
    },
    "idEngineerPrisItem": {
        "required": false
    },
    "idInternalGrn": {
        "required": false
    },
    "idInternalGrnItem": {
        "required": true
    },
    "idMpart": {
        "required": false
    },
    "idPart": {
        "required": false
    },
    "qtyGrn": {
        "default": 0,
        "required": false
    },
    "remark": {
        "default": "",
        "required": false
    },
    "statusItem": {
        "default": "",
        "required": false
    },
    "updatedAt": {
        "default": "",
        "required": false
    }
};

const AmimsInternalGrnReportFormSchema = {
    "createdAt": {
        "default": "",
        "required": false
    },
    "dateAcc": {
        "default": "",
        "required": false
    },
    "dateGrn": {
        "default": "",
        "required": false
    },
    "idInternalGrn": {
        "required": true
    },
    "idSite": {
        "required": false
    },
    "idUser": {
        "required": false
    },
    "idUserAcc": {
        "required": false
    },
    "numberGrn": {
        "default": "",
        "required": false
    },
    "remark": {
        "default": "",
        "required": false
    },
    "site": {
        "default": "",
        "required": true
    },
    "statusGrn": {
        "default": "",
        "required": false
    },
    "updatedAt": {
        "default": "",
        "required": false
    },
    "validasi": {
        "default": 0,
        "required": false
    }
};

const AmimsInternalGrnWidgetFormSchema = {
    "createdAt": {
        "default": "",
        "required": false
    },
    "dateAcc": {
        "default": "",
        "required": false
    },
    "dateGrn": {
        "default": "",
        "required": false
    },
    "idInternalGrn": {
        "required": true
    },
    "idSite": {
        "required": false
    },
    "idUser": {
        "required": false
    },
    "idUserAcc": {
        "required": false
    },
    "numberGrn": {
        "default": "",
        "required": false
    },
    "remark": {
        "default": "",
        "required": false
    },
    "statusGrn": {
        "default": "",
        "required": false
    },
    "total": {
        "default": 0,
        "required": false
    },
    "updatedAt": {
        "default": "",
        "required": false
    },
    "validasi": {
        "default": 0,
        "required": false
    }
};

const AmimsInternalGrnFormSchema = {
    "createdAt": {
        "default": "",
        "required": false
    },
    "dateAcc": {
        "default": "",
        "required": false
    },
    "dateGrn": {
        "default": "",
        "required": false
    },
    "idInternalGrn": {
        "required": true
    },
    "idSite": {
        "required": false
    },
    "idUser": {
        "required": false
    },
    "idUserAcc": {
        "required": false
    },
    "numberGrn": {
        "default": "",
        "required": false
    },
    "remark": {
        "default": "",
        "required": false
    },
    "statusGrn": {
        "default": "",
        "required": false
    },
    "updatedAt": {
        "default": "",
        "required": false
    },
    "validasi": {
        "default": 0,
        "required": false
    }
};

const AmimsLastMaintenanceReportFormSchema = {
    "createdAt": {
        "default": "",
        "required": false
    },
    "idLastMaintenance": {
        "required": true
    },
    "idMaintenance": {
        "required": false
    },
    "idMpcJo": {
        "required": false
    },
    "idPart": {
        "required": false
    },
    "idUser": {
        "required": false
    },
    "lastCycle": {
        "default": 0,
        "required": false
    },
    "lastDate": {
        "default": "",
        "required": false
    },
    "lastHours": {
        "default": 0,
        "required": false
    },
    "maintenance": {
        "default": "",
        "required": true
    },
    "oldId": {
        "default": "",
        "required": false
    },
    "parentCycle": {
        "default": 0,
        "required": false
    },
    "parentHours": {
        "default": 0,
        "required": false
    },
    "part": {
        "default": "",
        "required": true
    },
    "typeOfWork": {
        "default": 0,
        "required": false
    },
    "updatedAt": {
        "default": "",
        "required": false
    }
};

const AmimsLastMaintenanceWidgetFormSchema = {
    "createdAt": {
        "default": "",
        "required": false
    },
    "idLastMaintenance": {
        "required": true
    },
    "idMaintenance": {
        "required": false
    },
    "idMpcJo": {
        "required": false
    },
    "idPart": {
        "required": false
    },
    "idUser": {
        "required": false
    },
    "lastCycle": {
        "default": 0,
        "required": false
    },
    "lastDate": {
        "default": "",
        "required": false
    },
    "lastHours": {
        "default": 0,
        "required": false
    },
    "oldId": {
        "default": "",
        "required": false
    },
    "parentCycle": {
        "default": 0,
        "required": false
    },
    "parentHours": {
        "default": 0,
        "required": false
    },
    "total": {
        "default": 0,
        "required": false
    },
    "typeOfWork": {
        "default": 0,
        "required": false
    },
    "updatedAt": {
        "default": "",
        "required": false
    }
};

const AmimsLastMaintenanceFormSchema = {
    "createdAt": {
        "default": "",
        "required": false
    },
    "idLastMaintenance": {
        "required": true
    },
    "idMaintenance": {
        "required": false
    },
    "idMpcJo": {
        "required": false
    },
    "idPart": {
        "required": false
    },
    "idUser": {
        "required": false
    },
    "lastCycle": {
        "default": 0,
        "required": false
    },
    "lastDate": {
        "default": "",
        "required": false
    },
    "lastHours": {
        "default": 0,
        "required": false
    },
    "oldId": {
        "default": "",
        "required": false
    },
    "parentCycle": {
        "default": 0,
        "required": false
    },
    "parentHours": {
        "default": 0,
        "required": false
    },
    "typeOfWork": {
        "default": 0,
        "required": false
    },
    "updatedAt": {
        "default": "",
        "required": false
    }
};

const AmimsLibFormIssuedFormSchema = {
    "createdAt": {
        "default": "",
        "required": false
    },
    "idLibFormIssued": {
        "required": true
    },
    "lastUpdate": {
        "default": "",
        "required": false
    },
    "nameFile": {
        "default": "",
        "required": false
    },
    "numberForm": {
        "default": "",
        "required": false
    },
    "numberW": {
        "default": "",
        "required": false
    },
    "revision": {
        "default": "",
        "required": false
    },
    "updatedAt": {
        "default": "",
        "required": false
    }
};

const AmimsLibReferenceFormSchema = {
    "createdAt": {
        "default": "",
        "required": false
    },
    "idLibReference": {
        "required": true
    },
    "lastUpdate": {
        "default": "",
        "required": false
    },
    "nameFile": {
        "default": "",
        "required": false
    },
    "numberReference": {
        "default": "",
        "required": false
    },
    "updatedAt": {
        "default": "",
        "required": false
    }
};

const AmimsLibUploadFormSchema = {
    "category": {
        "default": "",
        "required": false
    },
    "createdAt": {
        "default": "",
        "required": false
    },
    "fileDate": {
        "default": "",
        "required": false
    },
    "fileName": {
        "default": "",
        "required": false
    },
    "fileNumber": {
        "default": "",
        "required": false
    },
    "forModule": {
        "default": "",
        "required": false
    },
    "idLibUpload": {
        "required": true
    },
    "idModule": {
        "required": false
    },
    "updatedAt": {
        "default": "",
        "required": false
    }
};

const AmimsLifeTimeLimitReportFormSchema = {
    "childnameLifeTimeLimit": {
        "default": "",
        "required": false
    },
    "idLifeTimeLimit": {
        "required": true
    },
    "isDeleted": {
        "default": 0,
        "required": false
    },
    "lifeTimeLimit": {
        "default": "",
        "required": false
    }
};

const AmimsLifeTimeLimitWidgetFormSchema = {
    "childnameLifeTimeLimit": {
        "default": "",
        "required": false
    },
    "idLifeTimeLimit": {
        "required": true
    },
    "isDeleted": {
        "default": 0,
        "required": false
    },
    "lifeTimeLimit": {
        "default": "",
        "required": false
    },
    "total": {
        "default": 0,
        "required": false
    }
};

const AmimsLifeTimeLimitFormSchema = {
    "childnameLifeTimeLimit": {
        "default": "",
        "required": false
    },
    "idLifeTimeLimit": {
        "required": true
    },
    "isDeleted": {
        "default": 0,
        "required": false
    },
    "lifeTimeLimit": {
        "default": "",
        "required": false
    }
};

const AmimsLocationFlightReportFormSchema = {
    "address": {
        "default": "",
        "required": false
    },
    "createdAt": {
        "default": "",
        "required": false
    },
    "idLocationFlight": {
        "required": true
    },
    "lat": {
        "default": "",
        "required": false
    },
    "lon": {
        "default": "",
        "required": false
    },
    "nameLocation": {
        "default": "",
        "required": false
    },
    "statusLocation": {
        "default": "",
        "required": false
    },
    "updatedAt": {
        "default": "",
        "required": false
    }
};

const AmimsLocationFlightWidgetFormSchema = {
    "address": {
        "default": "",
        "required": false
    },
    "createdAt": {
        "default": "",
        "required": false
    },
    "idLocationFlight": {
        "required": true
    },
    "lat": {
        "default": "",
        "required": false
    },
    "lon": {
        "default": "",
        "required": false
    },
    "nameLocation": {
        "default": "",
        "required": false
    },
    "statusLocation": {
        "default": "",
        "required": false
    },
    "total": {
        "default": 0,
        "required": false
    },
    "updatedAt": {
        "default": "",
        "required": false
    }
};

const AmimsLocationFlightFormSchema = {
    "address": {
        "default": "",
        "required": false
    },
    "createdAt": {
        "default": "",
        "required": false
    },
    "idLocationFlight": {
        "required": true
    },
    "lat": {
        "default": "",
        "required": false
    },
    "lon": {
        "default": "",
        "required": false
    },
    "nameLocation": {
        "default": "",
        "required": false
    },
    "statusLocation": {
        "default": "",
        "required": false
    },
    "updatedAt": {
        "default": "",
        "required": false
    }
};

const AmimsLogProcessReportFormSchema = {
    "adj1": {
        "default": 0,
        "required": false
    },
    "adj2": {
        "default": 0,
        "required": false
    },
    "adj3": {
        "default": 0,
        "required": false
    },
    "bugIndexLog": {
        "default": 0,
        "required": false
    },
    "calculatedCycle": {
        "default": "",
        "required": false
    },
    "calculatedHours": {
        "default": "",
        "required": false
    },
    "cgPenalti": {
        "default": "",
        "required": false
    },
    "cycle": {
        "default": 0,
        "required": false
    },
    "cycleBf": {
        "default": 0,
        "required": false
    },
    "cycleCf": {
        "default": 0,
        "required": false
    },
    "cycleFlight": {
        "default": 0,
        "required": false
    },
    "factor1": {
        "default": 0,
        "required": false
    },
    "factor2": {
        "default": 0,
        "required": false
    },
    "factor3": {
        "default": 0,
        "required": false
    },
    "fullCycleBf": {
        "default": 0,
        "required": false
    },
    "fullCycleFlt": {
        "default": 0,
        "required": false
    },
    "hasFor": {
        "default": "",
        "required": false
    },
    "hasUpdate": {
        "default": 0,
        "required": false
    },
    "hoistLeft": {
        "default": 0,
        "required": false
    },
    "hoistOperation": {
        "default": "",
        "required": false
    },
    "hoistRight": {
        "default": 0,
        "required": false
    },
    "hoistUsage": {
        "default": 0,
        "required": false
    },
    "hours": {
        "default": 0,
        "required": false
    },
    "hoursBf": {
        "default": 0,
        "required": false
    },
    "hoursCf": {
        "default": 0,
        "required": false
    },
    "hoursFlight": {
        "default": 0,
        "required": false
    },
    "idLogProcess": {
        "required": true
    },
    "idMpart": {
        "required": false
    },
    "idPart": {
        "required": false
    },
    "idPartInstall": {
        "required": false
    },
    "idTechLog": {
        "required": false
    },
    "landings": {
        "default": 0,
        "required": false
    },
    "mpart": {
        "default": "",
        "required": true
    },
    "n1": {
        "default": 0,
        "required": false
    },
    "n2": {
        "default": 0,
        "required": false
    },
    "parent": {
        "default": "",
        "required": false
    },
    "part": {
        "default": "",
        "required": true
    },
    "partCycleBf": {
        "default": 0,
        "required": false
    },
    "partCycleFlt": {
        "default": 0,
        "required": false
    },
    "rumusCycle": {
        "default": "",
        "required": false
    },
    "rumusHours": {
        "default": "",
        "required": false
    },
    "sn": {
        "default": "",
        "required": false
    },
    "timeAboveBf": {
        "default": 0,
        "required": false
    },
    "timeAboveFlt": {
        "default": 0,
        "required": false
    },
    "tsnCycle": {
        "default": 0,
        "required": false
    },
    "tsnHours": {
        "default": 0,
        "required": false
    },
    "useHoistLeft": {
        "default": 0,
        "required": false
    },
    "useHoistRight": {
        "default": 0,
        "required": false
    },
    "xcycleInput": {
        "default": 0,
        "required": false
    }
};

const AmimsLogProcessWidgetFormSchema = {
    "adj1": {
        "default": 0,
        "required": false
    },
    "adj2": {
        "default": 0,
        "required": false
    },
    "adj3": {
        "default": 0,
        "required": false
    },
    "bugIndexLog": {
        "default": 0,
        "required": false
    },
    "calculatedCycle": {
        "default": "",
        "required": false
    },
    "calculatedHours": {
        "default": "",
        "required": false
    },
    "cgPenalti": {
        "default": "",
        "required": false
    },
    "cycle": {
        "default": 0,
        "required": false
    },
    "cycleBf": {
        "default": 0,
        "required": false
    },
    "cycleCf": {
        "default": 0,
        "required": false
    },
    "cycleFlight": {
        "default": 0,
        "required": false
    },
    "factor1": {
        "default": 0,
        "required": false
    },
    "factor2": {
        "default": 0,
        "required": false
    },
    "factor3": {
        "default": 0,
        "required": false
    },
    "fullCycleBf": {
        "default": 0,
        "required": false
    },
    "fullCycleFlt": {
        "default": 0,
        "required": false
    },
    "hasFor": {
        "default": "",
        "required": false
    },
    "hasUpdate": {
        "default": 0,
        "required": false
    },
    "hoistLeft": {
        "default": 0,
        "required": false
    },
    "hoistOperation": {
        "default": "",
        "required": false
    },
    "hoistRight": {
        "default": 0,
        "required": false
    },
    "hoistUsage": {
        "default": 0,
        "required": false
    },
    "hours": {
        "default": 0,
        "required": false
    },
    "hoursBf": {
        "default": 0,
        "required": false
    },
    "hoursCf": {
        "default": 0,
        "required": false
    },
    "hoursFlight": {
        "default": 0,
        "required": false
    },
    "idLogProcess": {
        "required": true
    },
    "idMpart": {
        "required": false
    },
    "idPart": {
        "required": false
    },
    "idPartInstall": {
        "required": false
    },
    "idTechLog": {
        "required": false
    },
    "landings": {
        "default": 0,
        "required": false
    },
    "n1": {
        "default": 0,
        "required": false
    },
    "n2": {
        "default": 0,
        "required": false
    },
    "parent": {
        "default": "",
        "required": false
    },
    "partCycleBf": {
        "default": 0,
        "required": false
    },
    "partCycleFlt": {
        "default": 0,
        "required": false
    },
    "rumusCycle": {
        "default": "",
        "required": false
    },
    "rumusHours": {
        "default": "",
        "required": false
    },
    "sn": {
        "default": "",
        "required": false
    },
    "timeAboveBf": {
        "default": 0,
        "required": false
    },
    "timeAboveFlt": {
        "default": 0,
        "required": false
    },
    "total": {
        "default": 0,
        "required": false
    },
    "tsnCycle": {
        "default": 0,
        "required": false
    },
    "tsnHours": {
        "default": 0,
        "required": false
    },
    "useHoistLeft": {
        "default": 0,
        "required": false
    },
    "useHoistRight": {
        "default": 0,
        "required": false
    },
    "xcycleInput": {
        "default": 0,
        "required": false
    }
};

const AmimsLogProcessFormSchema = {
    "adj1": {
        "default": 0,
        "required": false
    },
    "adj2": {
        "default": 0,
        "required": false
    },
    "adj3": {
        "default": 0,
        "required": false
    },
    "bugIndexLog": {
        "default": 0,
        "required": false
    },
    "calculatedCycle": {
        "default": "",
        "required": false
    },
    "calculatedHours": {
        "default": "",
        "required": false
    },
    "cgPenalti": {
        "default": "",
        "required": false
    },
    "cycle": {
        "default": 0,
        "required": false
    },
    "cycleBf": {
        "default": 0,
        "required": false
    },
    "cycleCf": {
        "default": 0,
        "required": false
    },
    "cycleFlight": {
        "default": 0,
        "required": false
    },
    "factor1": {
        "default": 0,
        "required": false
    },
    "factor2": {
        "default": 0,
        "required": false
    },
    "factor3": {
        "default": 0,
        "required": false
    },
    "fullCycleBf": {
        "default": 0,
        "required": false
    },
    "fullCycleFlt": {
        "default": 0,
        "required": false
    },
    "hasFor": {
        "default": "",
        "required": false
    },
    "hasUpdate": {
        "default": 0,
        "required": false
    },
    "hoistLeft": {
        "default": 0,
        "required": false
    },
    "hoistOperation": {
        "default": "",
        "required": false
    },
    "hoistRight": {
        "default": 0,
        "required": false
    },
    "hoistUsage": {
        "default": 0,
        "required": false
    },
    "hours": {
        "default": 0,
        "required": false
    },
    "hoursBf": {
        "default": 0,
        "required": false
    },
    "hoursCf": {
        "default": 0,
        "required": false
    },
    "hoursFlight": {
        "default": 0,
        "required": false
    },
    "idLogProcess": {
        "required": true
    },
    "idMpart": {
        "required": false
    },
    "idPart": {
        "required": false
    },
    "idPartInstall": {
        "required": false
    },
    "idTechLog": {
        "required": false
    },
    "landings": {
        "default": 0,
        "required": false
    },
    "n1": {
        "default": 0,
        "required": false
    },
    "n2": {
        "default": 0,
        "required": false
    },
    "parent": {
        "default": "",
        "required": false
    },
    "partCycleBf": {
        "default": 0,
        "required": false
    },
    "partCycleFlt": {
        "default": 0,
        "required": false
    },
    "rumusCycle": {
        "default": "",
        "required": false
    },
    "rumusHours": {
        "default": "",
        "required": false
    },
    "sn": {
        "default": "",
        "required": false
    },
    "timeAboveBf": {
        "default": 0,
        "required": false
    },
    "timeAboveFlt": {
        "default": 0,
        "required": false
    },
    "tsnCycle": {
        "default": 0,
        "required": false
    },
    "tsnHours": {
        "default": 0,
        "required": false
    },
    "useHoistLeft": {
        "default": 0,
        "required": false
    },
    "useHoistRight": {
        "default": 0,
        "required": false
    },
    "xcycleInput": {
        "default": 0,
        "required": false
    }
};

const AmimsLogSpReportFormSchema = {
    "createdAt": {
        "default": "",
        "required": false
    },
    "dateClose": {
        "default": "",
        "required": false
    },
    "desk": {
        "default": "",
        "required": false
    },
    "hasId": {
        "default": "",
        "required": false
    },
    "id": {
        "required": false
    },
    "idLogSp": {
        "required": true
    },
    "name": {
        "default": "",
        "required": false
    },
    "param1": {
        "default": "",
        "required": false
    },
    "param2": {
        "default": "",
        "required": false
    },
    "sp": {
        "default": "",
        "required": false
    },
    "status": {
        "default": "",
        "required": false
    }
};

const AmimsLogSpWidgetFormSchema = {
    "createdAt": {
        "default": "",
        "required": false
    },
    "dateClose": {
        "default": "",
        "required": false
    },
    "desk": {
        "default": "",
        "required": false
    },
    "hasId": {
        "default": "",
        "required": false
    },
    "id": {
        "required": false
    },
    "idLogSp": {
        "required": true
    },
    "name": {
        "default": "",
        "required": false
    },
    "param1": {
        "default": "",
        "required": false
    },
    "param2": {
        "default": "",
        "required": false
    },
    "sp": {
        "default": "",
        "required": false
    },
    "status": {
        "default": "",
        "required": false
    },
    "total": {
        "default": 0,
        "required": false
    }
};

const AmimsLogSpFormSchema = {
    "createdAt": {
        "default": "",
        "required": false
    },
    "dateClose": {
        "default": "",
        "required": false
    },
    "desk": {
        "default": "",
        "required": false
    },
    "hasId": {
        "default": "",
        "required": false
    },
    "id": {
        "required": false
    },
    "idLogSp": {
        "required": true
    },
    "name": {
        "default": "",
        "required": false
    },
    "param1": {
        "default": "",
        "required": false
    },
    "param2": {
        "default": "",
        "required": false
    },
    "sp": {
        "default": "",
        "required": false
    },
    "status": {
        "default": "",
        "required": false
    }
};

const AmimsLogTransferReportFormSchema = {
    "dateTransfer": {
        "default": "",
        "required": false
    },
    "fromIdPart": {
        "default": "",
        "required": false
    },
    "fromSite": {
        "default": "",
        "required": false
    },
    "idLogTransfer": {
        "required": true
    },
    "idMpart": {
        "required": false
    },
    "idUser": {
        "required": false
    },
    "issingle": {
        "default": "",
        "required": false
    },
    "mpart": {
        "default": "",
        "required": true
    },
    "qty": {
        "default": 0,
        "required": false
    },
    "toIdPart": {
        "default": "",
        "required": false
    },
    "toSite": {
        "default": 0,
        "required": false
    }
};

const AmimsLogTransferWidgetFormSchema = {
    "dateTransfer": {
        "default": "",
        "required": false
    },
    "fromIdPart": {
        "default": "",
        "required": false
    },
    "fromSite": {
        "default": "",
        "required": false
    },
    "idLogTransfer": {
        "required": true
    },
    "idMpart": {
        "required": false
    },
    "idUser": {
        "required": false
    },
    "issingle": {
        "default": "",
        "required": false
    },
    "qty": {
        "default": 0,
        "required": false
    },
    "toIdPart": {
        "default": "",
        "required": false
    },
    "toSite": {
        "default": 0,
        "required": false
    },
    "total": {
        "default": 0,
        "required": false
    }
};

const AmimsLogTransferFormSchema = {
    "dateTransfer": {
        "default": "",
        "required": false
    },
    "fromIdPart": {
        "default": "",
        "required": false
    },
    "fromSite": {
        "default": "",
        "required": false
    },
    "idLogTransfer": {
        "required": true
    },
    "idMpart": {
        "required": false
    },
    "idUser": {
        "required": false
    },
    "issingle": {
        "default": "",
        "required": false
    },
    "qty": {
        "default": 0,
        "required": false
    },
    "toIdPart": {
        "default": "",
        "required": false
    },
    "toSite": {
        "default": 0,
        "required": false
    }
};

const AmimsLogTsnTsoReportFormSchema = {
    "batasId": {
        "default": "",
        "required": false
    },
    "createdAt": {
        "default": "",
        "required": false
    },
    "cycle": {
        "default": 0,
        "required": false
    },
    "hours": {
        "default": 0,
        "required": false
    },
    "idLogTsnTso": {
        "required": true
    },
    "idPart": {
        "required": false
    },
    "idTechLog": {
        "required": false
    },
    "part": {
        "default": "",
        "required": true
    },
    "tsnC": {
        "default": 0,
        "required": false
    },
    "tsnH": {
        "default": 0,
        "required": false
    },
    "tsoC": {
        "default": 0,
        "required": false
    },
    "tsoH": {
        "default": 0,
        "required": false
    }
};

const AmimsLogTsnTsoWidgetFormSchema = {
    "batasId": {
        "default": "",
        "required": false
    },
    "createdAt": {
        "default": "",
        "required": false
    },
    "cycle": {
        "default": 0,
        "required": false
    },
    "hours": {
        "default": 0,
        "required": false
    },
    "idLogTsnTso": {
        "required": true
    },
    "idPart": {
        "required": false
    },
    "idTechLog": {
        "required": false
    },
    "total": {
        "default": 0,
        "required": false
    },
    "tsnC": {
        "default": 0,
        "required": false
    },
    "tsnH": {
        "default": 0,
        "required": false
    },
    "tsoC": {
        "default": 0,
        "required": false
    },
    "tsoH": {
        "default": 0,
        "required": false
    }
};

const AmimsLogTsnTsoFormSchema = {
    "batasId": {
        "default": "",
        "required": false
    },
    "createdAt": {
        "default": "",
        "required": false
    },
    "cycle": {
        "default": 0,
        "required": false
    },
    "hours": {
        "default": 0,
        "required": false
    },
    "idLogTsnTso": {
        "required": true
    },
    "idPart": {
        "required": false
    },
    "idTechLog": {
        "required": false
    },
    "tsnC": {
        "default": 0,
        "required": false
    },
    "tsnH": {
        "default": 0,
        "required": false
    },
    "tsoC": {
        "default": 0,
        "required": false
    },
    "tsoH": {
        "default": 0,
        "required": false
    }
};

const AmimsLogUserFormSchema = {
    "dateLog": {
        "default": "",
        "required": false
    },
    "idLogUser": {
        "required": true
    },
    "idUser": {
        "required": false
    },
    "method": {
        "default": "",
        "required": false
    },
    "methodValue": {
        "default": "",
        "required": false
    },
    "typeIdKey": {
        "default": "",
        "required": false
    },
    "typeLog": {
        "default": "",
        "required": false
    },
    "typeValue": {
        "default": "",
        "required": false
    },
    "typeWork": {
        "default": "",
        "required": false
    }
};

const AmimsMaintenanceCodeFormIssuedFormSchema = {
    "idLibFormIssued": {
        "required": false
    },
    "idMaintenanceCode": {
        "required": false
    },
    "idMaintenanceCodeFormIssued": {
        "required": true
    }
};

const AmimsMaintenanceCodeReferenceFormSchema = {
    "idLibReference": {
        "required": false
    },
    "idMaintenanceCode": {
        "required": false
    },
    "idMaintenanceCodeReference": {
        "required": true
    }
};

const AmimsMaintenanceCodeFormSchema = {
    "classification": {
        "default": "",
        "required": false
    },
    "descriptionMaintenance": {
        "default": "",
        "required": false
    },
    "idMaintenanceCode": {
        "required": true
    },
    "isDeleted": {
        "default": 0,
        "required": false
    },
    "maintenanceCode": {
        "default": "",
        "required": false
    },
    "oldId": {
        "default": "",
        "required": false
    },
    "reference": {
        "default": "",
        "required": false
    },
    "updatedAt": {
        "default": "",
        "required": false
    }
};

const AmimsMaintenanceReportFormSchema = {
    "atachapter": {
        "default": "",
        "required": false
    },
    "createdAt": {
        "default": "",
        "required": false
    },
    "cycleFrom": {
        "default": 0,
        "required": false
    },
    "cycleTo": {
        "default": 0,
        "required": false
    },
    "flightHoursFrom": {
        "default": 0,
        "required": false
    },
    "flightHoursTo": {
        "default": 0,
        "required": false
    },
    "idMaintenance": {
        "required": true
    },
    "idMaintenanceCode": {
        "required": false
    },
    "idMpart": {
        "required": false
    },
    "idUser": {
        "required": false
    },
    "mpart": {
        "default": "",
        "required": true
    },
    "noteMaintenance": {
        "default": "",
        "required": false
    },
    "oldId": {
        "default": "",
        "required": false
    },
    "onLocation": {
        "default": "",
        "required": false
    },
    "repetitions": {
        "default": 0,
        "required": false
    },
    "timeRangeForm": {
        "default": 0,
        "required": false
    },
    "timeRangeTo": {
        "default": 0,
        "required": false
    },
    "timeUnit": {
        "default": "",
        "required": false
    },
    "typeMaintenance": {
        "default": "",
        "required": false
    },
    "updatedAt": {
        "default": "",
        "required": false
    }
};

const AmimsMaintenanceWidgetFormSchema = {
    "atachapter": {
        "default": "",
        "required": false
    },
    "createdAt": {
        "default": "",
        "required": false
    },
    "cycleFrom": {
        "default": 0,
        "required": false
    },
    "cycleTo": {
        "default": 0,
        "required": false
    },
    "flightHoursFrom": {
        "default": 0,
        "required": false
    },
    "flightHoursTo": {
        "default": 0,
        "required": false
    },
    "idMaintenance": {
        "required": true
    },
    "idMaintenanceCode": {
        "required": false
    },
    "idMpart": {
        "required": false
    },
    "idUser": {
        "required": false
    },
    "noteMaintenance": {
        "default": "",
        "required": false
    },
    "oldId": {
        "default": "",
        "required": false
    },
    "onLocation": {
        "default": "",
        "required": false
    },
    "repetitions": {
        "default": 0,
        "required": false
    },
    "timeRangeForm": {
        "default": 0,
        "required": false
    },
    "timeRangeTo": {
        "default": 0,
        "required": false
    },
    "timeUnit": {
        "default": "",
        "required": false
    },
    "total": {
        "default": 0,
        "required": false
    },
    "typeMaintenance": {
        "default": "",
        "required": false
    },
    "updatedAt": {
        "default": "",
        "required": false
    }
};

const AmimsMaintenanceFormSchema = {
    "atachapter": {
        "default": "",
        "required": false
    },
    "createdAt": {
        "default": "",
        "required": false
    },
    "cycleFrom": {
        "default": 0,
        "required": false
    },
    "cycleTo": {
        "default": 0,
        "required": false
    },
    "flightHoursFrom": {
        "default": 0,
        "required": false
    },
    "flightHoursTo": {
        "default": 0,
        "required": false
    },
    "idMaintenance": {
        "required": true
    },
    "idMaintenanceCode": {
        "required": false
    },
    "idMpart": {
        "required": false
    },
    "idUser": {
        "required": false
    },
    "noteMaintenance": {
        "default": "",
        "required": false
    },
    "oldId": {
        "default": "",
        "required": false
    },
    "onLocation": {
        "default": "",
        "required": false
    },
    "repetitions": {
        "default": 0,
        "required": false
    },
    "timeRangeForm": {
        "default": 0,
        "required": false
    },
    "timeRangeTo": {
        "default": 0,
        "required": false
    },
    "timeUnit": {
        "default": "",
        "required": false
    },
    "typeMaintenance": {
        "default": "",
        "required": false
    },
    "updatedAt": {
        "default": "",
        "required": false
    }
};

const AmimsMcurrencyFormSchema = {
    "code": {
        "default": "",
        "required": false
    },
    "createdAt": {
        "default": "",
        "required": false
    },
    "currency": {
        "default": "",
        "required": false
    },
    "idMcurrency": {
        "required": true
    },
    "isDeleted": {
        "default": 0,
        "required": false
    },
    "statusCurrency": {
        "default": "",
        "required": false
    },
    "updatedAt": {
        "default": "",
        "required": false
    },
    "usdRate": {
        "default": 0,
        "required": false
    }
};

const AmimsMelFormSchema = {
    "day": {
        "default": 0,
        "required": false
    },
    "descriptionMel": {
        "default": "",
        "required": false
    },
    "idMel": {
        "required": true
    },
    "mel": {
        "default": "",
        "required": false
    }
};

const AmimsMpartReportFormSchema = {
    "ata": {
        "default": "",
        "required": true
    },
    "calculatedCycle": {
        "default": "",
        "required": false
    },
    "calculatedHours": {
        "default": "",
        "required": false
    },
    "childname": {
        "default": "",
        "required": false
    },
    "codeAtaMentah": {
        "default": "",
        "required": false
    },
    "createdAt": {
        "default": "",
        "required": false
    },
    "descriptionMpart": {
        "default": "",
        "required": false
    },
    "forAc": {
        "default": 0,
        "required": false
    },
    "idAta": {
        "required": false
    },
    "idConditionMonitoring": {
        "required": false
    },
    "idGroup": {
        "required": false
    },
    "idLifeTimeLimit": {
        "required": false
    },
    "idMpart": {
        "required": true
    },
    "idPartCategory": {
        "required": false
    },
    "idPartid": {
        "required": false
    },
    "isDeleted": {
        "default": 0,
        "required": false
    },
    "isMandatory": {
        "default": "",
        "required": false
    },
    "ismayor": {
        "default": "",
        "required": false
    },
    "keyword": {
        "default": "",
        "required": false
    },
    "lifeLimitCycle": {
        "default": 0,
        "required": false
    },
    "lifeLimitHours": {
        "default": 0,
        "required": false
    },
    "lifeLimitVal": {
        "default": 0,
        "required": false
    },
    "lifeLimitVar": {
        "default": "",
        "required": false
    },
    "manufactureMpart": {
        "default": "",
        "required": false
    },
    "mat_82": {
        "default": "",
        "required": false
    },
    "mfigureIndex": {
        "default": "",
        "required": false
    },
    "minQty": {
        "default": 0,
        "required": false
    },
    "mitemIndex": {
        "default": "",
        "required": false
    },
    "mtboCycle": {
        "default": 0,
        "required": false
    },
    "mtboHours": {
        "default": 0,
        "required": false
    },
    "mtboVal": {
        "default": 0,
        "required": false
    },
    "mtboVar": {
        "default": "",
        "required": false
    },
    "oldAtachapter": {
        "default": "",
        "required": false
    },
    "oldId": {
        "default": "",
        "required": false
    },
    "parent": {
        "default": "",
        "required": false
    },
    "partNumber": {
        "default": "",
        "required": false
    },
    "partid": {
        "default": "",
        "required": true
    },
    "partname": {
        "default": "",
        "required": false
    },
    "refMel": {
        "default": "",
        "required": false
    },
    "statusMpart": {
        "default": "",
        "required": false
    },
    "unit": {
        "default": "",
        "required": false
    },
    "updatedAt": {
        "default": "",
        "required": false
    }
};

const AmimsMpartWidgetFormSchema = {
    "calculatedCycle": {
        "default": "",
        "required": false
    },
    "calculatedHours": {
        "default": "",
        "required": false
    },
    "childname": {
        "default": "",
        "required": false
    },
    "codeAtaMentah": {
        "default": "",
        "required": false
    },
    "createdAt": {
        "default": "",
        "required": false
    },
    "descriptionMpart": {
        "default": "",
        "required": false
    },
    "forAc": {
        "default": 0,
        "required": false
    },
    "idAta": {
        "required": false
    },
    "idConditionMonitoring": {
        "required": false
    },
    "idGroup": {
        "required": false
    },
    "idLifeTimeLimit": {
        "required": false
    },
    "idMpart": {
        "required": true
    },
    "idPartCategory": {
        "required": false
    },
    "idPartid": {
        "required": false
    },
    "isDeleted": {
        "default": 0,
        "required": false
    },
    "isMandatory": {
        "default": "",
        "required": false
    },
    "ismayor": {
        "default": "",
        "required": false
    },
    "keyword": {
        "default": "",
        "required": false
    },
    "lifeLimitCycle": {
        "default": 0,
        "required": false
    },
    "lifeLimitHours": {
        "default": 0,
        "required": false
    },
    "lifeLimitVal": {
        "default": 0,
        "required": false
    },
    "lifeLimitVar": {
        "default": "",
        "required": false
    },
    "manufactureMpart": {
        "default": "",
        "required": false
    },
    "mat_82": {
        "default": "",
        "required": false
    },
    "mfigureIndex": {
        "default": "",
        "required": false
    },
    "minQty": {
        "default": 0,
        "required": false
    },
    "mitemIndex": {
        "default": "",
        "required": false
    },
    "mtboCycle": {
        "default": 0,
        "required": false
    },
    "mtboHours": {
        "default": 0,
        "required": false
    },
    "mtboVal": {
        "default": 0,
        "required": false
    },
    "mtboVar": {
        "default": "",
        "required": false
    },
    "oldAtachapter": {
        "default": "",
        "required": false
    },
    "oldId": {
        "default": "",
        "required": false
    },
    "parent": {
        "default": "",
        "required": false
    },
    "partNumber": {
        "default": "",
        "required": false
    },
    "partname": {
        "default": "",
        "required": false
    },
    "refMel": {
        "default": "",
        "required": false
    },
    "statusMpart": {
        "default": "",
        "required": false
    },
    "total": {
        "default": 0,
        "required": false
    },
    "unit": {
        "default": "",
        "required": false
    },
    "updatedAt": {
        "default": "",
        "required": false
    }
};

const AmimsMpartFormSchema = {
    "calculatedCycle": {
        "default": "",
        "required": false
    },
    "calculatedHours": {
        "default": "",
        "required": false
    },
    "childname": {
        "default": "",
        "required": false
    },
    "codeAtaMentah": {
        "default": "",
        "required": false
    },
    "createdAt": {
        "default": "",
        "required": false
    },
    "descriptionMpart": {
        "default": "",
        "required": false
    },
    "forAc": {
        "default": 0,
        "required": false
    },
    "idAta": {
        "required": false
    },
    "idConditionMonitoring": {
        "required": false
    },
    "idGroup": {
        "required": false
    },
    "idLifeTimeLimit": {
        "required": false
    },
    "idMpart": {
        "required": true
    },
    "idPartCategory": {
        "required": false
    },
    "idPartid": {
        "required": false
    },
    "isDeleted": {
        "default": 0,
        "required": false
    },
    "isMandatory": {
        "default": "",
        "required": false
    },
    "ismayor": {
        "default": "",
        "required": false
    },
    "keyword": {
        "default": "",
        "required": false
    },
    "lifeLimitCycle": {
        "default": 0,
        "required": false
    },
    "lifeLimitHours": {
        "default": 0,
        "required": false
    },
    "lifeLimitVal": {
        "default": 0,
        "required": false
    },
    "lifeLimitVar": {
        "default": "",
        "required": false
    },
    "manufactureMpart": {
        "default": "",
        "required": false
    },
    "mat_82": {
        "default": "",
        "required": false
    },
    "mfigureIndex": {
        "default": "",
        "required": false
    },
    "minQty": {
        "default": 0,
        "required": false
    },
    "mitemIndex": {
        "default": "",
        "required": false
    },
    "mtboCycle": {
        "default": 0,
        "required": false
    },
    "mtboHours": {
        "default": 0,
        "required": false
    },
    "mtboVal": {
        "default": 0,
        "required": false
    },
    "mtboVar": {
        "default": "",
        "required": false
    },
    "oldAtachapter": {
        "default": "",
        "required": false
    },
    "oldId": {
        "default": "",
        "required": false
    },
    "parent": {
        "default": "",
        "required": false
    },
    "partNumber": {
        "default": "",
        "required": false
    },
    "partname": {
        "default": "",
        "required": false
    },
    "refMel": {
        "default": "",
        "required": false
    },
    "statusMpart": {
        "default": "",
        "required": false
    },
    "unit": {
        "default": "",
        "required": false
    },
    "updatedAt": {
        "default": "",
        "required": false
    }
};

const AmimsMpcGseReportFormSchema = {
    "createdAt": {
        "default": "",
        "required": false
    },
    "dateGse": {
        "default": "",
        "required": false
    },
    "idEngineerRti": {
        "required": false
    },
    "idMpcGse": {
        "required": true
    },
    "idUserGse": {
        "required": false
    },
    "noteGse": {
        "default": "",
        "required": false
    },
    "statusGse": {
        "default": "",
        "required": false
    },
    "updatedAt": {
        "default": "",
        "required": false
    }
};

const AmimsMpcGseWidgetFormSchema = {
    "createdAt": {
        "default": "",
        "required": false
    },
    "dateGse": {
        "default": "",
        "required": false
    },
    "idEngineerRti": {
        "required": false
    },
    "idMpcGse": {
        "required": true
    },
    "idUserGse": {
        "required": false
    },
    "noteGse": {
        "default": "",
        "required": false
    },
    "statusGse": {
        "default": "",
        "required": false
    },
    "total": {
        "default": 0,
        "required": false
    },
    "updatedAt": {
        "default": "",
        "required": false
    }
};

const AmimsMpcGseFormSchema = {
    "createdAt": {
        "default": "",
        "required": false
    },
    "dateGse": {
        "default": "",
        "required": false
    },
    "idEngineerRti": {
        "required": false
    },
    "idMpcGse": {
        "required": true
    },
    "idUserGse": {
        "required": false
    },
    "noteGse": {
        "default": "",
        "required": false
    },
    "statusGse": {
        "default": "",
        "required": false
    },
    "updatedAt": {
        "default": "",
        "required": false
    }
};

const AmimsMpcJoOperatorReportFormSchema = {
    "idMpcJo": {
        "required": false
    },
    "idMpcJoOperator": {
        "required": true
    },
    "idOperator": {
        "required": false
    },
    "jobDesc": {
        "default": "",
        "required": false
    },
    "operator": {
        "default": "",
        "required": false
    },
    "position": {
        "default": "",
        "required": false
    }
};

const AmimsMpcJoOperatorWidgetFormSchema = {
    "idMpcJo": {
        "required": false
    },
    "idMpcJoOperator": {
        "required": true
    },
    "idOperator": {
        "required": false
    },
    "jobDesc": {
        "default": "",
        "required": false
    },
    "operator": {
        "default": "",
        "required": false
    },
    "position": {
        "default": "",
        "required": false
    },
    "total": {
        "default": 0,
        "required": false
    }
};

const AmimsMpcJoOperatorFormSchema = {
    "idMpcJo": {
        "required": false
    },
    "idMpcJoOperator": {
        "required": true
    },
    "idOperator": {
        "required": false
    },
    "jobDesc": {
        "default": "",
        "required": false
    },
    "operator": {
        "default": "",
        "required": false
    },
    "position": {
        "default": "",
        "required": false
    }
};

const AmimsMpcJoReportFormSchema = {
    "action": {
        "default": "",
        "required": false
    },
    "compliteCycle": {
        "default": 0,
        "required": false
    },
    "compliteDate": {
        "default": "",
        "required": false
    },
    "compliteHours": {
        "default": 0,
        "required": false
    },
    "createdAt": {
        "default": "",
        "required": false
    },
    "customIssued": {
        "default": "",
        "required": false
    },
    "customJob": {
        "default": "",
        "required": false
    },
    "customRef": {
        "default": "",
        "required": false
    },
    "cycleFrom": {
        "default": 0,
        "required": false
    },
    "cycleTo": {
        "default": 0,
        "required": false
    },
    "dateJo": {
        "default": "",
        "required": false
    },
    "hourseFrom": {
        "default": 0,
        "required": false
    },
    "hourseTo": {
        "default": 0,
        "required": false
    },
    "idDueList": {
        "required": false
    },
    "idMaintenance": {
        "required": false
    },
    "idMpcJo": {
        "required": true
    },
    "idPart": {
        "required": false
    },
    "idTechLog": {
        "required": false
    },
    "idTypeOfwork": {
        "required": false
    },
    "idUser": {
        "required": false
    },
    "isPriority": {
        "default": "",
        "required": false
    },
    "maintenance": {
        "default": "",
        "required": true
    },
    "noteJo": {
        "default": "",
        "required": false
    },
    "numberJo": {
        "default": "",
        "required": false
    },
    "onAircraft": {
        "default": "",
        "required": false
    },
    "onSite": {
        "default": 0,
        "required": false
    },
    "originalCycle": {
        "default": 0,
        "required": false
    },
    "originalDate": {
        "default": "",
        "required": false
    },
    "originalHours": {
        "default": 0,
        "required": false
    },
    "parentAss": {
        "default": "",
        "required": false
    },
    "part": {
        "default": "",
        "required": true
    },
    "reference": {
        "default": "",
        "required": false
    },
    "roflag": {
        "default": "",
        "required": false
    },
    "statusJo": {
        "default": "",
        "required": false
    },
    "timeRangeFrom": {
        "default": 0,
        "required": false
    },
    "timeRangeTo": {
        "default": 0,
        "required": false
    },
    "updatedAt": {
        "default": "",
        "required": false
    },
    "workDue": {
        "default": "",
        "required": false
    }
};

const AmimsMpcJoWidgetFormSchema = {
    "action": {
        "default": "",
        "required": false
    },
    "compliteCycle": {
        "default": 0,
        "required": false
    },
    "compliteDate": {
        "default": "",
        "required": false
    },
    "compliteHours": {
        "default": 0,
        "required": false
    },
    "createdAt": {
        "default": "",
        "required": false
    },
    "customIssued": {
        "default": "",
        "required": false
    },
    "customJob": {
        "default": "",
        "required": false
    },
    "customRef": {
        "default": "",
        "required": false
    },
    "cycleFrom": {
        "default": 0,
        "required": false
    },
    "cycleTo": {
        "default": 0,
        "required": false
    },
    "dateJo": {
        "default": "",
        "required": false
    },
    "hourseFrom": {
        "default": 0,
        "required": false
    },
    "hourseTo": {
        "default": 0,
        "required": false
    },
    "idDueList": {
        "required": false
    },
    "idMaintenance": {
        "required": false
    },
    "idMpcJo": {
        "required": true
    },
    "idPart": {
        "required": false
    },
    "idTechLog": {
        "required": false
    },
    "idTypeOfwork": {
        "required": false
    },
    "idUser": {
        "required": false
    },
    "isPriority": {
        "default": "",
        "required": false
    },
    "noteJo": {
        "default": "",
        "required": false
    },
    "numberJo": {
        "default": "",
        "required": false
    },
    "onAircraft": {
        "default": "",
        "required": false
    },
    "onSite": {
        "default": 0,
        "required": false
    },
    "originalCycle": {
        "default": 0,
        "required": false
    },
    "originalDate": {
        "default": "",
        "required": false
    },
    "originalHours": {
        "default": 0,
        "required": false
    },
    "parentAss": {
        "default": "",
        "required": false
    },
    "reference": {
        "default": "",
        "required": false
    },
    "roflag": {
        "default": "",
        "required": false
    },
    "statusJo": {
        "default": "",
        "required": false
    },
    "timeRangeFrom": {
        "default": 0,
        "required": false
    },
    "timeRangeTo": {
        "default": 0,
        "required": false
    },
    "total": {
        "default": 0,
        "required": false
    },
    "updatedAt": {
        "default": "",
        "required": false
    },
    "workDue": {
        "default": "",
        "required": false
    }
};

const AmimsMpcJoFormSchema = {
    "action": {
        "default": "",
        "required": false
    },
    "compliteCycle": {
        "default": 0,
        "required": false
    },
    "compliteDate": {
        "default": "",
        "required": false
    },
    "compliteHours": {
        "default": 0,
        "required": false
    },
    "createdAt": {
        "default": "",
        "required": false
    },
    "customIssued": {
        "default": "",
        "required": false
    },
    "customJob": {
        "default": "",
        "required": false
    },
    "customRef": {
        "default": "",
        "required": false
    },
    "cycleFrom": {
        "default": 0,
        "required": false
    },
    "cycleTo": {
        "default": 0,
        "required": false
    },
    "dateJo": {
        "default": "",
        "required": false
    },
    "hourseFrom": {
        "default": 0,
        "required": false
    },
    "hourseTo": {
        "default": 0,
        "required": false
    },
    "idDueList": {
        "required": false
    },
    "idMaintenance": {
        "required": false
    },
    "idMpcJo": {
        "required": true
    },
    "idPart": {
        "required": false
    },
    "idTechLog": {
        "required": false
    },
    "idTypeOfwork": {
        "required": false
    },
    "idUser": {
        "required": false
    },
    "isPriority": {
        "default": "",
        "required": false
    },
    "noteJo": {
        "default": "",
        "required": false
    },
    "numberJo": {
        "default": "",
        "required": false
    },
    "onAircraft": {
        "default": "",
        "required": false
    },
    "onSite": {
        "default": 0,
        "required": false
    },
    "originalCycle": {
        "default": 0,
        "required": false
    },
    "originalDate": {
        "default": "",
        "required": false
    },
    "originalHours": {
        "default": 0,
        "required": false
    },
    "parentAss": {
        "default": "",
        "required": false
    },
    "reference": {
        "default": "",
        "required": false
    },
    "roflag": {
        "default": "",
        "required": false
    },
    "statusJo": {
        "default": "",
        "required": false
    },
    "timeRangeFrom": {
        "default": 0,
        "required": false
    },
    "timeRangeTo": {
        "default": 0,
        "required": false
    },
    "updatedAt": {
        "default": "",
        "required": false
    },
    "workDue": {
        "default": "",
        "required": false
    }
};

const AmimsMpcPiroItemReportFormSchema = {
    "createdAt": {
        "default": "",
        "required": false
    },
    "forFigureIndex": {
        "default": "",
        "required": false
    },
    "idMpart": {
        "required": false
    },
    "idMpcPiro": {
        "required": false
    },
    "idMpcPiroItem": {
        "required": true
    },
    "isDeleted": {
        "default": 0,
        "required": false
    },
    "mpart": {
        "default": "",
        "required": true
    },
    "noteItemPiro": {
        "default": "",
        "required": false
    },
    "priority": {
        "default": "",
        "required": false
    },
    "qtyPiro": {
        "default": 0,
        "required": false
    },
    "statusItem": {
        "default": "",
        "required": false
    },
    "updatedAt": {
        "default": "",
        "required": false
    }
};

const AmimsMpcPiroItemWidgetFormSchema = {
    "createdAt": {
        "default": "",
        "required": false
    },
    "forFigureIndex": {
        "default": "",
        "required": false
    },
    "idMpart": {
        "required": false
    },
    "idMpcPiro": {
        "required": false
    },
    "idMpcPiroItem": {
        "required": true
    },
    "isDeleted": {
        "default": 0,
        "required": false
    },
    "noteItemPiro": {
        "default": "",
        "required": false
    },
    "priority": {
        "default": "",
        "required": false
    },
    "qtyPiro": {
        "default": 0,
        "required": false
    },
    "statusItem": {
        "default": "",
        "required": false
    },
    "total": {
        "default": 0,
        "required": false
    },
    "updatedAt": {
        "default": "",
        "required": false
    }
};

const AmimsMpcPiroItemFormSchema = {
    "createdAt": {
        "default": "",
        "required": false
    },
    "forFigureIndex": {
        "default": "",
        "required": false
    },
    "idMpart": {
        "required": false
    },
    "idMpcPiro": {
        "required": false
    },
    "idMpcPiroItem": {
        "required": true
    },
    "isDeleted": {
        "default": 0,
        "required": false
    },
    "noteItemPiro": {
        "default": "",
        "required": false
    },
    "priority": {
        "default": "",
        "required": false
    },
    "qtyPiro": {
        "default": 0,
        "required": false
    },
    "statusItem": {
        "default": "",
        "required": false
    },
    "updatedAt": {
        "default": "",
        "required": false
    }
};

const AmimsMpcPiroReportFormSchema = {
    "aircraft": {
        "default": "",
        "required": true
    },
    "createdAt": {
        "default": "",
        "required": false
    },
    "dateAcc": {
        "default": "",
        "required": false
    },
    "datePiro": {
        "default": "",
        "required": false
    },
    "description": {
        "default": "",
        "required": false
    },
    "idAircraft": {
        "required": false
    },
    "idMpcPiro": {
        "required": true
    },
    "idSite": {
        "required": false
    },
    "idUser": {
        "required": false
    },
    "idUserAcc": {
        "required": false
    },
    "isDeleted": {
        "default": 0,
        "required": false
    },
    "keyword": {
        "default": "",
        "required": false
    },
    "noIndex": {
        "default": 0,
        "required": false
    },
    "notePiro": {
        "default": "",
        "required": false
    },
    "numberPiro": {
        "default": "",
        "required": false
    },
    "site": {
        "default": "",
        "required": true
    },
    "statusPiro": {
        "default": "",
        "required": false
    },
    "typePiro": {
        "default": "",
        "required": false
    },
    "updatedAt": {
        "default": "",
        "required": false
    },
    "validasi": {
        "default": 0,
        "required": false
    }
};

const AmimsMpcPiroWidgetFormSchema = {
    "createdAt": {
        "default": "",
        "required": false
    },
    "dateAcc": {
        "default": "",
        "required": false
    },
    "datePiro": {
        "default": "",
        "required": false
    },
    "description": {
        "default": "",
        "required": false
    },
    "idAircraft": {
        "required": false
    },
    "idMpcPiro": {
        "required": true
    },
    "idSite": {
        "required": false
    },
    "idUser": {
        "required": false
    },
    "idUserAcc": {
        "required": false
    },
    "isDeleted": {
        "default": 0,
        "required": false
    },
    "keyword": {
        "default": "",
        "required": false
    },
    "noIndex": {
        "default": 0,
        "required": false
    },
    "notePiro": {
        "default": "",
        "required": false
    },
    "numberPiro": {
        "default": "",
        "required": false
    },
    "statusPiro": {
        "default": "",
        "required": false
    },
    "total": {
        "default": 0,
        "required": false
    },
    "typePiro": {
        "default": "",
        "required": false
    },
    "updatedAt": {
        "default": "",
        "required": false
    },
    "validasi": {
        "default": 0,
        "required": false
    }
};

const AmimsMpcPiroFormSchema = {
    "createdAt": {
        "default": "",
        "required": false
    },
    "dateAcc": {
        "default": "",
        "required": false
    },
    "datePiro": {
        "default": "",
        "required": false
    },
    "description": {
        "default": "",
        "required": false
    },
    "idAircraft": {
        "required": false
    },
    "idMpcPiro": {
        "required": true
    },
    "idSite": {
        "required": false
    },
    "idUser": {
        "required": false
    },
    "idUserAcc": {
        "required": false
    },
    "isDeleted": {
        "default": 0,
        "required": false
    },
    "keyword": {
        "default": "",
        "required": false
    },
    "noIndex": {
        "default": 0,
        "required": false
    },
    "notePiro": {
        "default": "",
        "required": false
    },
    "numberPiro": {
        "default": "",
        "required": false
    },
    "statusPiro": {
        "default": "",
        "required": false
    },
    "typePiro": {
        "default": "",
        "required": false
    },
    "updatedAt": {
        "default": "",
        "required": false
    },
    "validasi": {
        "default": 0,
        "required": false
    }
};

const AmimsMpcSelfMaintenanceReportFormSchema = {
    "createdAt": {
        "default": "",
        "required": false
    },
    "dateAccQa": {
        "default": "",
        "required": false
    },
    "dateMaintenance": {
        "default": "",
        "required": false
    },
    "doc": {
        "default": "",
        "required": false
    },
    "idEngineerRti": {
        "required": false
    },
    "idMpcSelfMaintenance": {
        "required": true
    },
    "idSite": {
        "required": false
    },
    "idUserMaintenance": {
        "required": false
    },
    "idUserQa": {
        "required": false
    },
    "numberMaintenance": {
        "default": "",
        "required": false
    },
    "reportMaintenance": {
        "default": "",
        "required": false
    },
    "site": {
        "default": "",
        "required": true
    },
    "statusMaintenance": {
        "default": "",
        "required": false
    },
    "typeMaintenance": {
        "default": "",
        "required": false
    },
    "updatedAt": {
        "default": "",
        "required": false
    }
};

const AmimsMpcSelfMaintenanceWidgetFormSchema = {
    "createdAt": {
        "default": "",
        "required": false
    },
    "dateAccQa": {
        "default": "",
        "required": false
    },
    "dateMaintenance": {
        "default": "",
        "required": false
    },
    "doc": {
        "default": "",
        "required": false
    },
    "idEngineerRti": {
        "required": false
    },
    "idMpcSelfMaintenance": {
        "required": true
    },
    "idSite": {
        "required": false
    },
    "idUserMaintenance": {
        "required": false
    },
    "idUserQa": {
        "required": false
    },
    "numberMaintenance": {
        "default": "",
        "required": false
    },
    "reportMaintenance": {
        "default": "",
        "required": false
    },
    "statusMaintenance": {
        "default": "",
        "required": false
    },
    "total": {
        "default": 0,
        "required": false
    },
    "typeMaintenance": {
        "default": "",
        "required": false
    },
    "updatedAt": {
        "default": "",
        "required": false
    }
};

const AmimsMpcSelfMaintenanceFormSchema = {
    "createdAt": {
        "default": "",
        "required": false
    },
    "dateAccQa": {
        "default": "",
        "required": false
    },
    "dateMaintenance": {
        "default": "",
        "required": false
    },
    "doc": {
        "default": "",
        "required": false
    },
    "idEngineerRti": {
        "required": false
    },
    "idMpcSelfMaintenance": {
        "required": true
    },
    "idSite": {
        "required": false
    },
    "idUserMaintenance": {
        "required": false
    },
    "idUserQa": {
        "required": false
    },
    "numberMaintenance": {
        "default": "",
        "required": false
    },
    "reportMaintenance": {
        "default": "",
        "required": false
    },
    "statusMaintenance": {
        "default": "",
        "required": false
    },
    "typeMaintenance": {
        "default": "",
        "required": false
    },
    "updatedAt": {
        "default": "",
        "required": false
    }
};

const AmimsMpcWpReportFormSchema = {
    "aircraft": {
        "default": "",
        "required": true
    },
    "createdAt": {
        "default": "",
        "required": false
    },
    "dateAcc": {
        "default": "",
        "required": false
    },
    "endDateWp": {
        "default": "",
        "required": false
    },
    "endHours": {
        "default": 0,
        "required": false
    },
    "engineEnd": {
        "default": "",
        "required": false
    },
    "engineStart": {
        "default": "",
        "required": false
    },
    "idAircraft": {
        "required": false
    },
    "idMpcWp": {
        "required": true
    },
    "idUserMm": {
        "required": false
    },
    "idUserMpc": {
        "required": false
    },
    "noteWp": {
        "default": "",
        "required": false
    },
    "numberWp": {
        "default": "",
        "required": false
    },
    "onSite": {
        "default": 0,
        "required": false
    },
    "period": {
        "default": "",
        "required": false
    },
    "periodYear": {
        "default": 0,
        "required": false
    },
    "place": {
        "default": "",
        "required": false
    },
    "reason": {
        "default": "",
        "required": false
    },
    "startDateWp": {
        "default": "",
        "required": false
    },
    "startHours": {
        "default": 0,
        "required": false
    },
    "statusWp": {
        "default": "",
        "required": false
    },
    "typeWork": {
        "default": "",
        "required": false
    },
    "updatedAt": {
        "default": "",
        "required": false
    },
    "validated": {
        "default": 0,
        "required": false
    }
};

const AmimsMpcWpWidgetFormSchema = {
    "createdAt": {
        "default": "",
        "required": false
    },
    "dateAcc": {
        "default": "",
        "required": false
    },
    "endDateWp": {
        "default": "",
        "required": false
    },
    "endHours": {
        "default": 0,
        "required": false
    },
    "engineEnd": {
        "default": "",
        "required": false
    },
    "engineStart": {
        "default": "",
        "required": false
    },
    "idAircraft": {
        "required": false
    },
    "idMpcWp": {
        "required": true
    },
    "idUserMm": {
        "required": false
    },
    "idUserMpc": {
        "required": false
    },
    "noteWp": {
        "default": "",
        "required": false
    },
    "numberWp": {
        "default": "",
        "required": false
    },
    "onSite": {
        "default": 0,
        "required": false
    },
    "period": {
        "default": "",
        "required": false
    },
    "periodYear": {
        "default": 0,
        "required": false
    },
    "place": {
        "default": "",
        "required": false
    },
    "reason": {
        "default": "",
        "required": false
    },
    "startDateWp": {
        "default": "",
        "required": false
    },
    "startHours": {
        "default": 0,
        "required": false
    },
    "statusWp": {
        "default": "",
        "required": false
    },
    "total": {
        "default": 0,
        "required": false
    },
    "typeWork": {
        "default": "",
        "required": false
    },
    "updatedAt": {
        "default": "",
        "required": false
    },
    "validated": {
        "default": 0,
        "required": false
    }
};

const AmimsMpcWpFormSchema = {
    "createdAt": {
        "default": "",
        "required": false
    },
    "dateAcc": {
        "default": "",
        "required": false
    },
    "endDateWp": {
        "default": "",
        "required": false
    },
    "endHours": {
        "default": 0,
        "required": false
    },
    "engineEnd": {
        "default": "",
        "required": false
    },
    "engineStart": {
        "default": "",
        "required": false
    },
    "idAircraft": {
        "required": false
    },
    "idMpcWp": {
        "required": true
    },
    "idUserMm": {
        "required": false
    },
    "idUserMpc": {
        "required": false
    },
    "noteWp": {
        "default": "",
        "required": false
    },
    "numberWp": {
        "default": "",
        "required": false
    },
    "onSite": {
        "default": 0,
        "required": false
    },
    "period": {
        "default": "",
        "required": false
    },
    "periodYear": {
        "default": 0,
        "required": false
    },
    "place": {
        "default": "",
        "required": false
    },
    "reason": {
        "default": "",
        "required": false
    },
    "startDateWp": {
        "default": "",
        "required": false
    },
    "startHours": {
        "default": 0,
        "required": false
    },
    "statusWp": {
        "default": "",
        "required": false
    },
    "typeWork": {
        "default": "",
        "required": false
    },
    "updatedAt": {
        "default": "",
        "required": false
    },
    "validated": {
        "default": 0,
        "required": false
    }
};

const AmimsPartActypeReportFormSchema = {
    "actype": {
        "default": "",
        "required": true
    },
    "createdAt": {
        "default": "",
        "required": false
    },
    "idActype": {
        "required": false
    },
    "idActypeOld": {
        "required": false
    },
    "idMpart": {
        "required": false
    },
    "idPartActype": {
        "required": true
    },
    "mpart": {
        "default": "",
        "required": true
    },
    "updatedAt": {
        "default": "",
        "required": false
    }
};

const AmimsPartActypeWidgetFormSchema = {
    "createdAt": {
        "default": "",
        "required": false
    },
    "idActype": {
        "required": false
    },
    "idActypeOld": {
        "required": false
    },
    "idMpart": {
        "required": false
    },
    "idPartActype": {
        "required": true
    },
    "total": {
        "default": 0,
        "required": false
    },
    "updatedAt": {
        "default": "",
        "required": false
    }
};

const AmimsPartActypeFormSchema = {
    "createdAt": {
        "default": "",
        "required": false
    },
    "idActype": {
        "required": false
    },
    "idActypeOld": {
        "required": false
    },
    "idMpart": {
        "required": false
    },
    "idPartActype": {
        "required": true
    },
    "updatedAt": {
        "default": "",
        "required": false
    }
};

const AmimsPartAlternativeReportFormSchema = {
    "forMpart": {
        "default": "",
        "required": false
    },
    "idMpart": {
        "required": false
    },
    "idPartAlternative": {
        "required": true
    },
    "mpart": {
        "default": "",
        "required": true
    }
};

const AmimsPartAlternativeWidgetFormSchema = {
    "forMpart": {
        "default": "",
        "required": false
    },
    "idMpart": {
        "required": false
    },
    "idPartAlternative": {
        "required": true
    },
    "total": {
        "default": 0,
        "required": false
    }
};

const AmimsPartAlternativeFormSchema = {
    "forMpart": {
        "default": "",
        "required": false
    },
    "idMpart": {
        "required": false
    },
    "idPartAlternative": {
        "required": true
    }
};

const AmimsPartAtaReportFormSchema = {
    "ata": {
        "default": "",
        "required": true
    },
    "figure": {
        "default": "",
        "required": false
    },
    "idAta": {
        "required": false
    },
    "idMpart": {
        "required": false
    },
    "idPartAta": {
        "required": true
    },
    "item": {
        "default": "",
        "required": false
    },
    "mpart": {
        "default": "",
        "required": true
    }
};

const AmimsPartAtaWidgetFormSchema = {
    "figure": {
        "default": "",
        "required": false
    },
    "idAta": {
        "required": false
    },
    "idMpart": {
        "required": false
    },
    "idPartAta": {
        "required": true
    },
    "item": {
        "default": "",
        "required": false
    },
    "total": {
        "default": 0,
        "required": false
    }
};

const AmimsPartAtaFormSchema = {
    "figure": {
        "default": "",
        "required": false
    },
    "idAta": {
        "required": false
    },
    "idMpart": {
        "required": false
    },
    "idPartAta": {
        "required": true
    },
    "item": {
        "default": "",
        "required": false
    }
};

const AmimsPartCategoryReportFormSchema = {
    "category": {
        "default": "",
        "required": false
    },
    "createdAt": {
        "default": "",
        "required": false
    },
    "descriptionCat": {
        "default": "",
        "required": false
    },
    "idPartCategory": {
        "required": true
    },
    "isDeleted": {
        "default": 0,
        "required": false
    },
    "parentCat": {
        "default": 0,
        "required": false
    },
    "updatedAt": {
        "default": "",
        "required": false
    }
};

const AmimsPartCategoryWidgetFormSchema = {
    "category": {
        "default": "",
        "required": false
    },
    "createdAt": {
        "default": "",
        "required": false
    },
    "descriptionCat": {
        "default": "",
        "required": false
    },
    "idPartCategory": {
        "required": true
    },
    "isDeleted": {
        "default": 0,
        "required": false
    },
    "parentCat": {
        "default": 0,
        "required": false
    },
    "total": {
        "default": 0,
        "required": false
    },
    "updatedAt": {
        "default": "",
        "required": false
    }
};

const AmimsPartCategoryFormSchema = {
    "category": {
        "default": "",
        "required": false
    },
    "createdAt": {
        "default": "",
        "required": false
    },
    "descriptionCat": {
        "default": "",
        "required": false
    },
    "idPartCategory": {
        "required": true
    },
    "isDeleted": {
        "default": 0,
        "required": false
    },
    "parentCat": {
        "default": 0,
        "required": false
    },
    "updatedAt": {
        "default": "",
        "required": false
    }
};

const AmimsPartConditionReportFormSchema = {
    "childnamePartCondition": {
        "default": "",
        "required": false
    },
    "idPartCondition": {
        "required": true
    },
    "isDeleted": {
        "default": 0,
        "required": false
    },
    "partCondition": {
        "default": "",
        "required": false
    }
};

const AmimsPartConditionWidgetFormSchema = {
    "childnamePartCondition": {
        "default": "",
        "required": false
    },
    "idPartCondition": {
        "required": true
    },
    "isDeleted": {
        "default": 0,
        "required": false
    },
    "partCondition": {
        "default": "",
        "required": false
    },
    "total": {
        "default": 0,
        "required": false
    }
};

const AmimsPartConditionFormSchema = {
    "childnamePartCondition": {
        "default": "",
        "required": false
    },
    "idPartCondition": {
        "required": true
    },
    "isDeleted": {
        "default": 0,
        "required": false
    },
    "partCondition": {
        "default": "",
        "required": false
    }
};

const AmimsPartFigureIndexReportFormSchema = {
    "ata": {
        "default": "",
        "required": true
    },
    "createdAt": {
        "default": "",
        "required": false
    },
    "figureIndex": {
        "default": "",
        "required": false
    },
    "idAta": {
        "required": false
    },
    "idMpart": {
        "required": false
    },
    "idPartFigureIndex": {
        "required": true
    },
    "itemIndex": {
        "default": "",
        "required": false
    },
    "mpart": {
        "default": "",
        "required": true
    },
    "updatedAt": {
        "default": "",
        "required": false
    }
};

const AmimsPartFigureIndexWidgetFormSchema = {
    "createdAt": {
        "default": "",
        "required": false
    },
    "figureIndex": {
        "default": "",
        "required": false
    },
    "idAta": {
        "required": false
    },
    "idMpart": {
        "required": false
    },
    "idPartFigureIndex": {
        "required": true
    },
    "itemIndex": {
        "default": "",
        "required": false
    },
    "total": {
        "default": 0,
        "required": false
    },
    "updatedAt": {
        "default": "",
        "required": false
    }
};

const AmimsPartFigureIndexFormSchema = {
    "createdAt": {
        "default": "",
        "required": false
    },
    "figureIndex": {
        "default": "",
        "required": false
    },
    "idAta": {
        "required": false
    },
    "idMpart": {
        "required": false
    },
    "idPartFigureIndex": {
        "required": true
    },
    "itemIndex": {
        "default": "",
        "required": false
    },
    "updatedAt": {
        "default": "",
        "required": false
    }
};

const AmimsPartInstallOldReportFormSchema = {
    "aircraft": {
        "default": "",
        "required": true
    },
    "bin": {
        "default": "",
        "required": false
    },
    "createdAt": {
        "default": "",
        "required": false
    },
    "dateInstall": {
        "default": "",
        "required": false
    },
    "dueOverhaulC": {
        "default": 0,
        "required": false
    },
    "dueOverhaulH": {
        "default": 0,
        "required": false
    },
    "dueOverhaulValue": {
        "default": 0,
        "required": false
    },
    "figureIndex": {
        "default": "",
        "required": false
    },
    "idAircraft": {
        "required": false
    },
    "idEngineerPrisItem": {
        "required": false
    },
    "idPart": {
        "required": false
    },
    "idPartInstall": {
        "required": false
    },
    "idPartInstallOld": {
        "required": true
    },
    "installedInspectionC": {
        "default": 0,
        "required": false
    },
    "installedInspectionH": {
        "default": 0,
        "required": false
    },
    "installedInspectionValue": {
        "default": 0,
        "required": false
    },
    "installedOverhaulC": {
        "default": 0,
        "required": false
    },
    "installedOverhaulH": {
        "default": 0,
        "required": false
    },
    "installedOverhaulValue": {
        "default": 0,
        "required": false
    },
    "isfeatured": {
        "default": "",
        "required": false
    },
    "itemIndex": {
        "default": "",
        "required": false
    },
    "oldId": {
        "default": "",
        "required": false
    },
    "parent": {
        "default": "",
        "required": false
    },
    "part": {
        "default": "",
        "required": true
    },
    "qtyInstall": {
        "default": 0,
        "required": false
    },
    "statusInstall": {
        "default": "",
        "required": false
    },
    "updatedAt": {
        "default": "",
        "required": false
    }
};

const AmimsPartInstallOldWidgetFormSchema = {
    "bin": {
        "default": "",
        "required": false
    },
    "createdAt": {
        "default": "",
        "required": false
    },
    "dateInstall": {
        "default": "",
        "required": false
    },
    "dueOverhaulC": {
        "default": 0,
        "required": false
    },
    "dueOverhaulH": {
        "default": 0,
        "required": false
    },
    "dueOverhaulValue": {
        "default": 0,
        "required": false
    },
    "figureIndex": {
        "default": "",
        "required": false
    },
    "idAircraft": {
        "required": false
    },
    "idEngineerPrisItem": {
        "required": false
    },
    "idPart": {
        "required": false
    },
    "idPartInstall": {
        "required": false
    },
    "idPartInstallOld": {
        "required": true
    },
    "installedInspectionC": {
        "default": 0,
        "required": false
    },
    "installedInspectionH": {
        "default": 0,
        "required": false
    },
    "installedInspectionValue": {
        "default": 0,
        "required": false
    },
    "installedOverhaulC": {
        "default": 0,
        "required": false
    },
    "installedOverhaulH": {
        "default": 0,
        "required": false
    },
    "installedOverhaulValue": {
        "default": 0,
        "required": false
    },
    "isfeatured": {
        "default": "",
        "required": false
    },
    "itemIndex": {
        "default": "",
        "required": false
    },
    "oldId": {
        "default": "",
        "required": false
    },
    "parent": {
        "default": "",
        "required": false
    },
    "qtyInstall": {
        "default": 0,
        "required": false
    },
    "statusInstall": {
        "default": "",
        "required": false
    },
    "total": {
        "default": 0,
        "required": false
    },
    "updatedAt": {
        "default": "",
        "required": false
    }
};

const AmimsPartInstallOldFormSchema = {
    "bin": {
        "default": "",
        "required": false
    },
    "createdAt": {
        "default": "",
        "required": false
    },
    "dateInstall": {
        "default": "",
        "required": false
    },
    "dueOverhaulC": {
        "default": 0,
        "required": false
    },
    "dueOverhaulH": {
        "default": 0,
        "required": false
    },
    "dueOverhaulValue": {
        "default": 0,
        "required": false
    },
    "figureIndex": {
        "default": "",
        "required": false
    },
    "idAircraft": {
        "required": false
    },
    "idEngineerPrisItem": {
        "required": false
    },
    "idPart": {
        "required": false
    },
    "idPartInstall": {
        "required": false
    },
    "idPartInstallOld": {
        "required": true
    },
    "installedInspectionC": {
        "default": 0,
        "required": false
    },
    "installedInspectionH": {
        "default": 0,
        "required": false
    },
    "installedInspectionValue": {
        "default": 0,
        "required": false
    },
    "installedOverhaulC": {
        "default": 0,
        "required": false
    },
    "installedOverhaulH": {
        "default": 0,
        "required": false
    },
    "installedOverhaulValue": {
        "default": 0,
        "required": false
    },
    "isfeatured": {
        "default": "",
        "required": false
    },
    "itemIndex": {
        "default": "",
        "required": false
    },
    "oldId": {
        "default": "",
        "required": false
    },
    "parent": {
        "default": "",
        "required": false
    },
    "qtyInstall": {
        "default": 0,
        "required": false
    },
    "statusInstall": {
        "default": "",
        "required": false
    },
    "updatedAt": {
        "default": "",
        "required": false
    }
};

const AmimsPartInstallReportFormSchema = {
    "aircraft": {
        "default": "",
        "required": true
    },
    "bin": {
        "default": "",
        "required": false
    },
    "createdAt": {
        "default": "",
        "required": false
    },
    "dateInstall": {
        "default": "",
        "required": false
    },
    "dueOverhaulC": {
        "default": 0,
        "required": false
    },
    "dueOverhaulH": {
        "default": 0,
        "required": false
    },
    "dueOverhaulValue": {
        "default": 0,
        "required": false
    },
    "figureIndex": {
        "default": "",
        "required": false
    },
    "idAircraft": {
        "required": false
    },
    "idEngineerPrisItem": {
        "required": false
    },
    "idPart": {
        "required": false
    },
    "idPartInstall": {
        "required": true
    },
    "installedOverhaulC": {
        "default": 0,
        "required": false
    },
    "installedOverhaulH": {
        "default": 0,
        "required": false
    },
    "installedOverhaulValue": {
        "default": 0,
        "required": false
    },
    "installedParentC": {
        "default": 0,
        "required": false
    },
    "installedParentH": {
        "default": 0,
        "required": false
    },
    "installedParentValue": {
        "default": 0,
        "required": false
    },
    "installedTsnC": {
        "default": 0,
        "required": false
    },
    "installedTsnH": {
        "default": 0,
        "required": false
    },
    "isfeatured": {
        "default": "",
        "required": false
    },
    "itemIndex": {
        "default": "",
        "required": false
    },
    "newParen": {
        "default": "",
        "required": false
    },
    "oldId": {
        "default": "",
        "required": false
    },
    "oldIdPart": {
        "default": "",
        "required": false
    },
    "oldParent": {
        "default": "",
        "required": false
    },
    "onPris": {
        "default": "",
        "required": false
    },
    "parent": {
        "default": "",
        "required": false
    },
    "part": {
        "default": "",
        "required": true
    },
    "qtyInstall": {
        "default": 0,
        "required": false
    },
    "refTechLog": {
        "default": "",
        "required": false
    },
    "statusInstall": {
        "default": "",
        "required": false
    },
    "topParent": {
        "default": "",
        "required": false
    },
    "updatedAt": {
        "default": "",
        "required": false
    }
};

const AmimsPartInstallWidgetFormSchema = {
    "bin": {
        "default": "",
        "required": false
    },
    "createdAt": {
        "default": "",
        "required": false
    },
    "dateInstall": {
        "default": "",
        "required": false
    },
    "dueOverhaulC": {
        "default": 0,
        "required": false
    },
    "dueOverhaulH": {
        "default": 0,
        "required": false
    },
    "dueOverhaulValue": {
        "default": 0,
        "required": false
    },
    "figureIndex": {
        "default": "",
        "required": false
    },
    "idAircraft": {
        "required": false
    },
    "idEngineerPrisItem": {
        "required": false
    },
    "idPart": {
        "required": false
    },
    "idPartInstall": {
        "required": true
    },
    "installedOverhaulC": {
        "default": 0,
        "required": false
    },
    "installedOverhaulH": {
        "default": 0,
        "required": false
    },
    "installedOverhaulValue": {
        "default": 0,
        "required": false
    },
    "installedParentC": {
        "default": 0,
        "required": false
    },
    "installedParentH": {
        "default": 0,
        "required": false
    },
    "installedParentValue": {
        "default": 0,
        "required": false
    },
    "installedTsnC": {
        "default": 0,
        "required": false
    },
    "installedTsnH": {
        "default": 0,
        "required": false
    },
    "isfeatured": {
        "default": "",
        "required": false
    },
    "itemIndex": {
        "default": "",
        "required": false
    },
    "newParen": {
        "default": "",
        "required": false
    },
    "oldId": {
        "default": "",
        "required": false
    },
    "oldIdPart": {
        "default": "",
        "required": false
    },
    "oldParent": {
        "default": "",
        "required": false
    },
    "onPris": {
        "default": "",
        "required": false
    },
    "parent": {
        "default": "",
        "required": false
    },
    "qtyInstall": {
        "default": 0,
        "required": false
    },
    "refTechLog": {
        "default": "",
        "required": false
    },
    "statusInstall": {
        "default": "",
        "required": false
    },
    "topParent": {
        "default": "",
        "required": false
    },
    "total": {
        "default": 0,
        "required": false
    },
    "updatedAt": {
        "default": "",
        "required": false
    }
};

const AmimsPartInstallFormSchema = {
    "bin": {
        "default": "",
        "required": false
    },
    "createdAt": {
        "default": "",
        "required": false
    },
    "dateInstall": {
        "default": "",
        "required": false
    },
    "dueOverhaulC": {
        "default": 0,
        "required": false
    },
    "dueOverhaulH": {
        "default": 0,
        "required": false
    },
    "dueOverhaulValue": {
        "default": 0,
        "required": false
    },
    "figureIndex": {
        "default": "",
        "required": false
    },
    "idAircraft": {
        "required": false
    },
    "idEngineerPrisItem": {
        "required": false
    },
    "idPart": {
        "required": false
    },
    "idPartInstall": {
        "required": true
    },
    "installedOverhaulC": {
        "default": 0,
        "required": false
    },
    "installedOverhaulH": {
        "default": 0,
        "required": false
    },
    "installedOverhaulValue": {
        "default": 0,
        "required": false
    },
    "installedParentC": {
        "default": 0,
        "required": false
    },
    "installedParentH": {
        "default": 0,
        "required": false
    },
    "installedParentValue": {
        "default": 0,
        "required": false
    },
    "installedTsnC": {
        "default": 0,
        "required": false
    },
    "installedTsnH": {
        "default": 0,
        "required": false
    },
    "isfeatured": {
        "default": "",
        "required": false
    },
    "itemIndex": {
        "default": "",
        "required": false
    },
    "newParen": {
        "default": "",
        "required": false
    },
    "oldId": {
        "default": "",
        "required": false
    },
    "oldIdPart": {
        "default": "",
        "required": false
    },
    "oldParent": {
        "default": "",
        "required": false
    },
    "onPris": {
        "default": "",
        "required": false
    },
    "parent": {
        "default": "",
        "required": false
    },
    "qtyInstall": {
        "default": 0,
        "required": false
    },
    "refTechLog": {
        "default": "",
        "required": false
    },
    "statusInstall": {
        "default": "",
        "required": false
    },
    "topParent": {
        "default": "",
        "required": false
    },
    "updatedAt": {
        "default": "",
        "required": false
    }
};

const AmimsPartLogReportFormSchema = {
    "activity": {
        "default": "",
        "required": false
    },
    "createdAt": {
        "default": "",
        "required": false
    },
    "dateLog": {
        "default": "",
        "required": false
    },
    "fromModule": {
        "default": "",
        "required": false
    },
    "idModule": {
        "required": false
    },
    "idPart": {
        "required": false
    },
    "idPartLog": {
        "required": true
    },
    "idPosition": {
        "required": false
    },
    "idSite": {
        "required": false
    },
    "idUser": {
        "required": false
    },
    "numberModule": {
        "default": "",
        "required": false
    },
    "oldId": {
        "default": "",
        "required": false
    },
    "part": {
        "default": "",
        "required": true
    },
    "position": {
        "default": "",
        "required": true
    },
    "qtyLog": {
        "default": 0,
        "required": false
    },
    "site": {
        "default": "",
        "required": true
    },
    "statusOnInventory": {
        "default": "",
        "required": false
    },
    "tboCycle": {
        "default": 0,
        "required": false
    },
    "tboHours": {
        "default": 0,
        "required": false
    },
    "tboVal": {
        "default": 0,
        "required": false
    },
    "tboVar": {
        "default": "",
        "required": false
    },
    "toLocation": {
        "default": "",
        "required": false
    },
    "tsnCycle": {
        "default": 0,
        "required": false
    },
    "tsnHours": {
        "default": 0,
        "required": false
    },
    "tsnVal": {
        "default": 0,
        "required": false
    },
    "tsnVar": {
        "default": "",
        "required": false
    },
    "tsoCycle": {
        "default": 0,
        "required": false
    },
    "tsoHours": {
        "default": 0,
        "required": false
    },
    "tsoVal": {
        "default": 0,
        "required": false
    },
    "tsoVar": {
        "default": "",
        "required": false
    },
    "updatedAt": {
        "default": "",
        "required": false
    }
};

const AmimsPartLogWidgetFormSchema = {
    "activity": {
        "default": "",
        "required": false
    },
    "createdAt": {
        "default": "",
        "required": false
    },
    "dateLog": {
        "default": "",
        "required": false
    },
    "fromModule": {
        "default": "",
        "required": false
    },
    "idModule": {
        "required": false
    },
    "idPart": {
        "required": false
    },
    "idPartLog": {
        "required": true
    },
    "idPosition": {
        "required": false
    },
    "idSite": {
        "required": false
    },
    "idUser": {
        "required": false
    },
    "numberModule": {
        "default": "",
        "required": false
    },
    "oldId": {
        "default": "",
        "required": false
    },
    "qtyLog": {
        "default": 0,
        "required": false
    },
    "statusOnInventory": {
        "default": "",
        "required": false
    },
    "tboCycle": {
        "default": 0,
        "required": false
    },
    "tboHours": {
        "default": 0,
        "required": false
    },
    "tboVal": {
        "default": 0,
        "required": false
    },
    "tboVar": {
        "default": "",
        "required": false
    },
    "toLocation": {
        "default": "",
        "required": false
    },
    "total": {
        "default": 0,
        "required": false
    },
    "tsnCycle": {
        "default": 0,
        "required": false
    },
    "tsnHours": {
        "default": 0,
        "required": false
    },
    "tsnVal": {
        "default": 0,
        "required": false
    },
    "tsnVar": {
        "default": "",
        "required": false
    },
    "tsoCycle": {
        "default": 0,
        "required": false
    },
    "tsoHours": {
        "default": 0,
        "required": false
    },
    "tsoVal": {
        "default": 0,
        "required": false
    },
    "tsoVar": {
        "default": "",
        "required": false
    },
    "updatedAt": {
        "default": "",
        "required": false
    }
};

const AmimsPartLogFormSchema = {
    "activity": {
        "default": "",
        "required": false
    },
    "createdAt": {
        "default": "",
        "required": false
    },
    "dateLog": {
        "default": "",
        "required": false
    },
    "fromModule": {
        "default": "",
        "required": false
    },
    "idModule": {
        "required": false
    },
    "idPart": {
        "required": false
    },
    "idPartLog": {
        "required": true
    },
    "idPosition": {
        "required": false
    },
    "idSite": {
        "required": false
    },
    "idUser": {
        "required": false
    },
    "numberModule": {
        "default": "",
        "required": false
    },
    "oldId": {
        "default": "",
        "required": false
    },
    "qtyLog": {
        "default": 0,
        "required": false
    },
    "statusOnInventory": {
        "default": "",
        "required": false
    },
    "tboCycle": {
        "default": 0,
        "required": false
    },
    "tboHours": {
        "default": 0,
        "required": false
    },
    "tboVal": {
        "default": 0,
        "required": false
    },
    "tboVar": {
        "default": "",
        "required": false
    },
    "toLocation": {
        "default": "",
        "required": false
    },
    "tsnCycle": {
        "default": 0,
        "required": false
    },
    "tsnHours": {
        "default": 0,
        "required": false
    },
    "tsnVal": {
        "default": 0,
        "required": false
    },
    "tsnVar": {
        "default": "",
        "required": false
    },
    "tsoCycle": {
        "default": 0,
        "required": false
    },
    "tsoHours": {
        "default": 0,
        "required": false
    },
    "tsoVal": {
        "default": 0,
        "required": false
    },
    "tsoVar": {
        "default": "",
        "required": false
    },
    "updatedAt": {
        "default": "",
        "required": false
    }
};

const AmimsPartReportFormSchema = {
    "bin": {
        "default": "",
        "required": false
    },
    "certificationNo": {
        "default": "",
        "required": false
    },
    "createdAt": {
        "default": "",
        "required": false
    },
    "currency": {
        "default": "",
        "required": true
    },
    "dateOrder": {
        "default": "",
        "required": false
    },
    "endOfLife": {
        "default": "",
        "required": false
    },
    "firstInstallC": {
        "default": 0,
        "required": false
    },
    "firstInstallDate": {
        "default": "",
        "required": false
    },
    "firstInstallH": {
        "default": 0,
        "required": false
    },
    "groupStatus": {
        "default": "",
        "required": false
    },
    "idConditionMonitoring": {
        "required": false
    },
    "idCurrency": {
        "required": false
    },
    "idLifeTimeLimit": {
        "required": false
    },
    "idMpart": {
        "required": false
    },
    "idPart": {
        "required": true
    },
    "idPartCondition": {
        "required": false
    },
    "idPurGrn": {
        "required": false
    },
    "idPurPoItem": {
        "required": false
    },
    "idPurPrcl": {
        "required": false
    },
    "idPurVendor": {
        "required": false
    },
    "idSite": {
        "required": false
    },
    "idTypeOfwork": {
        "required": false
    },
    "idUser": {
        "required": false
    },
    "idWarranty": {
        "required": false
    },
    "isDeleted": {
        "default": 0,
        "required": false
    },
    "lifeLimitCycle": {
        "default": 0,
        "required": false
    },
    "lifeLimitHours": {
        "default": 0,
        "required": false
    },
    "lifeLimitVal": {
        "default": 0,
        "required": false
    },
    "lifeLimitVar": {
        "default": "",
        "required": false
    },
    "manufacture": {
        "default": "",
        "required": false
    },
    "manufactureDate": {
        "default": "",
        "required": false
    },
    "mpart": {
        "default": "",
        "required": true
    },
    "newFirstInstallH": {
        "default": 0,
        "required": false
    },
    "oldId": {
        "default": "",
        "required": false
    },
    "oldParent": {
        "default": "",
        "required": false
    },
    "partParent": {
        "default": "",
        "required": false
    },
    "position": {
        "default": "",
        "required": false
    },
    "price": {
        "default": 0,
        "required": false
    },
    "purchaseDate": {
        "default": "",
        "required": false
    },
    "qty": {
        "default": 0,
        "required": false
    },
    "site": {
        "default": "",
        "required": true
    },
    "sn": {
        "default": "",
        "required": false
    },
    "startInstallC": {
        "default": 0,
        "required": false
    },
    "startInstallDate": {
        "default": "",
        "required": false
    },
    "startInstallH": {
        "default": 0,
        "required": false
    },
    "statusOnInventory": {
        "default": "",
        "required": false
    },
    "tbiCycle": {
        "default": 0,
        "required": false
    },
    "tbiHours": {
        "default": 0,
        "required": false
    },
    "tbiVal": {
        "default": 0,
        "required": false
    },
    "tbiVar": {
        "default": "",
        "required": false
    },
    "tboCycle": {
        "default": 0,
        "required": false
    },
    "tboHours": {
        "default": 0,
        "required": false
    },
    "tboVal": {
        "default": 0,
        "required": false
    },
    "tboVar": {
        "default": "",
        "required": false
    },
    "tempUse": {
        "default": 0,
        "required": false
    },
    "tsiCycle": {
        "default": 0,
        "required": false
    },
    "tsiHours": {
        "default": 0,
        "required": false
    },
    "tsiVal": {
        "default": 0,
        "required": false
    },
    "tsiVar": {
        "default": "",
        "required": false
    },
    "tsnCycle": {
        "default": 0,
        "required": false
    },
    "tsnHours": {
        "default": 0,
        "required": false
    },
    "tsnVal": {
        "default": 0,
        "required": false
    },
    "tsnVar": {
        "default": "",
        "required": false
    },
    "tsoCycle": {
        "default": 0,
        "required": false
    },
    "tsoHours": {
        "default": 0,
        "required": false
    },
    "tsoVal": {
        "default": 0,
        "required": false
    },
    "tsoVar": {
        "default": "",
        "required": false
    },
    "updatedAt": {
        "default": "",
        "required": false
    },
    "useableStatus": {
        "default": "",
        "required": false
    },
    "warranty": {
        "default": "",
        "required": true
    },
    "warrantyCycle": {
        "default": 0,
        "required": false
    },
    "warrantyDays": {
        "default": 0,
        "required": false
    },
    "warrantyHours": {
        "default": 0,
        "required": false
    },
    "warrantyStartCycle": {
        "default": 0,
        "required": false
    },
    "warrantyStartDate": {
        "default": "",
        "required": false
    },
    "warrantyVal": {
        "default": 0,
        "required": false
    },
    "warrantyYears": {
        "default": 0,
        "required": false
    }
};

const AmimsPartWidgetFormSchema = {
    "bin": {
        "default": "",
        "required": false
    },
    "certificationNo": {
        "default": "",
        "required": false
    },
    "createdAt": {
        "default": "",
        "required": false
    },
    "dateOrder": {
        "default": "",
        "required": false
    },
    "endOfLife": {
        "default": "",
        "required": false
    },
    "firstInstallC": {
        "default": 0,
        "required": false
    },
    "firstInstallDate": {
        "default": "",
        "required": false
    },
    "firstInstallH": {
        "default": 0,
        "required": false
    },
    "groupStatus": {
        "default": "",
        "required": false
    },
    "idConditionMonitoring": {
        "required": false
    },
    "idCurrency": {
        "required": false
    },
    "idLifeTimeLimit": {
        "required": false
    },
    "idMpart": {
        "required": false
    },
    "idPart": {
        "required": true
    },
    "idPartCondition": {
        "required": false
    },
    "idPurGrn": {
        "required": false
    },
    "idPurPoItem": {
        "required": false
    },
    "idPurPrcl": {
        "required": false
    },
    "idPurVendor": {
        "required": false
    },
    "idSite": {
        "required": false
    },
    "idTypeOfwork": {
        "required": false
    },
    "idUser": {
        "required": false
    },
    "idWarranty": {
        "required": false
    },
    "isDeleted": {
        "default": 0,
        "required": false
    },
    "lifeLimitCycle": {
        "default": 0,
        "required": false
    },
    "lifeLimitHours": {
        "default": 0,
        "required": false
    },
    "lifeLimitVal": {
        "default": 0,
        "required": false
    },
    "lifeLimitVar": {
        "default": "",
        "required": false
    },
    "manufacture": {
        "default": "",
        "required": false
    },
    "manufactureDate": {
        "default": "",
        "required": false
    },
    "newFirstInstallH": {
        "default": 0,
        "required": false
    },
    "oldId": {
        "default": "",
        "required": false
    },
    "oldParent": {
        "default": "",
        "required": false
    },
    "partParent": {
        "default": "",
        "required": false
    },
    "position": {
        "default": "",
        "required": false
    },
    "price": {
        "default": 0,
        "required": false
    },
    "purchaseDate": {
        "default": "",
        "required": false
    },
    "qty": {
        "default": 0,
        "required": false
    },
    "sn": {
        "default": "",
        "required": false
    },
    "startInstallC": {
        "default": 0,
        "required": false
    },
    "startInstallDate": {
        "default": "",
        "required": false
    },
    "startInstallH": {
        "default": 0,
        "required": false
    },
    "statusOnInventory": {
        "default": "",
        "required": false
    },
    "tbiCycle": {
        "default": 0,
        "required": false
    },
    "tbiHours": {
        "default": 0,
        "required": false
    },
    "tbiVal": {
        "default": 0,
        "required": false
    },
    "tbiVar": {
        "default": "",
        "required": false
    },
    "tboCycle": {
        "default": 0,
        "required": false
    },
    "tboHours": {
        "default": 0,
        "required": false
    },
    "tboVal": {
        "default": 0,
        "required": false
    },
    "tboVar": {
        "default": "",
        "required": false
    },
    "tempUse": {
        "default": 0,
        "required": false
    },
    "total": {
        "default": 0,
        "required": false
    },
    "tsiCycle": {
        "default": 0,
        "required": false
    },
    "tsiHours": {
        "default": 0,
        "required": false
    },
    "tsiVal": {
        "default": 0,
        "required": false
    },
    "tsiVar": {
        "default": "",
        "required": false
    },
    "tsnCycle": {
        "default": 0,
        "required": false
    },
    "tsnHours": {
        "default": 0,
        "required": false
    },
    "tsnVal": {
        "default": 0,
        "required": false
    },
    "tsnVar": {
        "default": "",
        "required": false
    },
    "tsoCycle": {
        "default": 0,
        "required": false
    },
    "tsoHours": {
        "default": 0,
        "required": false
    },
    "tsoVal": {
        "default": 0,
        "required": false
    },
    "tsoVar": {
        "default": "",
        "required": false
    },
    "updatedAt": {
        "default": "",
        "required": false
    },
    "useableStatus": {
        "default": "",
        "required": false
    },
    "warrantyCycle": {
        "default": 0,
        "required": false
    },
    "warrantyDays": {
        "default": 0,
        "required": false
    },
    "warrantyHours": {
        "default": 0,
        "required": false
    },
    "warrantyStartCycle": {
        "default": 0,
        "required": false
    },
    "warrantyStartDate": {
        "default": "",
        "required": false
    },
    "warrantyVal": {
        "default": 0,
        "required": false
    },
    "warrantyYears": {
        "default": 0,
        "required": false
    }
};

const AmimsPartFormSchema = {
    "bin": {
        "default": "",
        "required": false
    },
    "certificationNo": {
        "default": "",
        "required": false
    },
    "createdAt": {
        "default": "",
        "required": false
    },
    "dateOrder": {
        "default": "",
        "required": false
    },
    "endOfLife": {
        "default": "",
        "required": false
    },
    "firstInstallC": {
        "default": 0,
        "required": false
    },
    "firstInstallDate": {
        "default": "",
        "required": false
    },
    "firstInstallH": {
        "default": 0,
        "required": false
    },
    "groupStatus": {
        "default": "",
        "required": false
    },
    "idConditionMonitoring": {
        "required": false
    },
    "idCurrency": {
        "required": false
    },
    "idLifeTimeLimit": {
        "required": false
    },
    "idMpart": {
        "required": false
    },
    "idPart": {
        "required": true
    },
    "idPartCondition": {
        "required": false
    },
    "idPurGrn": {
        "required": false
    },
    "idPurPoItem": {
        "required": false
    },
    "idPurPrcl": {
        "required": false
    },
    "idPurVendor": {
        "required": false
    },
    "idSite": {
        "required": false
    },
    "idTypeOfwork": {
        "required": false
    },
    "idUser": {
        "required": false
    },
    "idWarranty": {
        "required": false
    },
    "isDeleted": {
        "default": 0,
        "required": false
    },
    "lifeLimitCycle": {
        "default": 0,
        "required": false
    },
    "lifeLimitHours": {
        "default": 0,
        "required": false
    },
    "lifeLimitVal": {
        "default": 0,
        "required": false
    },
    "lifeLimitVar": {
        "default": "",
        "required": false
    },
    "manufacture": {
        "default": "",
        "required": false
    },
    "manufactureDate": {
        "default": "",
        "required": false
    },
    "newFirstInstallH": {
        "default": 0,
        "required": false
    },
    "oldId": {
        "default": "",
        "required": false
    },
    "oldParent": {
        "default": "",
        "required": false
    },
    "partParent": {
        "default": "",
        "required": false
    },
    "position": {
        "default": "",
        "required": false
    },
    "price": {
        "default": 0,
        "required": false
    },
    "purchaseDate": {
        "default": "",
        "required": false
    },
    "qty": {
        "default": 0,
        "required": false
    },
    "sn": {
        "default": "",
        "required": false
    },
    "startInstallC": {
        "default": 0,
        "required": false
    },
    "startInstallDate": {
        "default": "",
        "required": false
    },
    "startInstallH": {
        "default": 0,
        "required": false
    },
    "statusOnInventory": {
        "default": "",
        "required": false
    },
    "tbiCycle": {
        "default": 0,
        "required": false
    },
    "tbiHours": {
        "default": 0,
        "required": false
    },
    "tbiVal": {
        "default": 0,
        "required": false
    },
    "tbiVar": {
        "default": "",
        "required": false
    },
    "tboCycle": {
        "default": 0,
        "required": false
    },
    "tboHours": {
        "default": 0,
        "required": false
    },
    "tboVal": {
        "default": 0,
        "required": false
    },
    "tboVar": {
        "default": "",
        "required": false
    },
    "tempUse": {
        "default": 0,
        "required": false
    },
    "tsiCycle": {
        "default": 0,
        "required": false
    },
    "tsiHours": {
        "default": 0,
        "required": false
    },
    "tsiVal": {
        "default": 0,
        "required": false
    },
    "tsiVar": {
        "default": "",
        "required": false
    },
    "tsnCycle": {
        "default": 0,
        "required": false
    },
    "tsnHours": {
        "default": 0,
        "required": false
    },
    "tsnVal": {
        "default": 0,
        "required": false
    },
    "tsnVar": {
        "default": "",
        "required": false
    },
    "tsoCycle": {
        "default": 0,
        "required": false
    },
    "tsoHours": {
        "default": 0,
        "required": false
    },
    "tsoVal": {
        "default": 0,
        "required": false
    },
    "tsoVar": {
        "default": "",
        "required": false
    },
    "updatedAt": {
        "default": "",
        "required": false
    },
    "useableStatus": {
        "default": "",
        "required": false
    },
    "warrantyCycle": {
        "default": 0,
        "required": false
    },
    "warrantyDays": {
        "default": 0,
        "required": false
    },
    "warrantyHours": {
        "default": 0,
        "required": false
    },
    "warrantyStartCycle": {
        "default": 0,
        "required": false
    },
    "warrantyStartDate": {
        "default": "",
        "required": false
    },
    "warrantyVal": {
        "default": 0,
        "required": false
    },
    "warrantyYears": {
        "default": 0,
        "required": false
    }
};

const AmimsPartidReportFormSchema = {
    "childnamePartid": {
        "default": "",
        "required": false
    },
    "description": {
        "default": "",
        "required": false
    },
    "idPartid": {
        "required": true
    },
    "isDeleted": {
        "default": 0,
        "required": false
    },
    "issingle": {
        "default": "",
        "required": false
    },
    "partid": {
        "default": "",
        "required": false
    }
};

const AmimsPartidWidgetFormSchema = {
    "childnamePartid": {
        "default": "",
        "required": false
    },
    "description": {
        "default": "",
        "required": false
    },
    "idPartid": {
        "required": true
    },
    "isDeleted": {
        "default": 0,
        "required": false
    },
    "issingle": {
        "default": "",
        "required": false
    },
    "partid": {
        "default": "",
        "required": false
    },
    "total": {
        "default": 0,
        "required": false
    }
};

const AmimsPartidFormSchema = {
    "childnamePartid": {
        "default": "",
        "required": false
    },
    "description": {
        "default": "",
        "required": false
    },
    "idPartid": {
        "required": true
    },
    "isDeleted": {
        "default": 0,
        "required": false
    },
    "issingle": {
        "default": "",
        "required": false
    },
    "partid": {
        "default": "",
        "required": false
    }
};

const AmimsPilotReportFormSchema = {
    "createdAt": {
        "default": "",
        "required": false
    },
    "hashIdUser": {
        "default": 0,
        "required": false
    },
    "idPilot": {
        "required": true
    },
    "isDeleted": {
        "default": 0,
        "required": false
    },
    "namePilot": {
        "default": "",
        "required": false
    },
    "status": {
        "default": 0,
        "required": false
    },
    "type": {
        "default": "",
        "required": false
    },
    "updatedAt": {
        "default": "",
        "required": false
    }
};

const AmimsPilotWidgetFormSchema = {
    "createdAt": {
        "default": "",
        "required": false
    },
    "hashIdUser": {
        "default": 0,
        "required": false
    },
    "idPilot": {
        "required": true
    },
    "isDeleted": {
        "default": 0,
        "required": false
    },
    "namePilot": {
        "default": "",
        "required": false
    },
    "status": {
        "default": 0,
        "required": false
    },
    "total": {
        "default": 0,
        "required": false
    },
    "type": {
        "default": "",
        "required": false
    },
    "updatedAt": {
        "default": "",
        "required": false
    }
};

const AmimsPilotFormSchema = {
    "createdAt": {
        "default": "",
        "required": false
    },
    "hashIdUser": {
        "default": 0,
        "required": false
    },
    "idPilot": {
        "required": true
    },
    "isDeleted": {
        "default": 0,
        "required": false
    },
    "namePilot": {
        "default": "",
        "required": false
    },
    "status": {
        "default": 0,
        "required": false
    },
    "type": {
        "default": "",
        "required": false
    },
    "updatedAt": {
        "default": "",
        "required": false
    }
};

const AmimsPositionReportFormSchema = {
    "code": {
        "default": "",
        "required": false
    },
    "description": {
        "default": "",
        "required": false
    },
    "idPosition": {
        "required": true
    },
    "isDeleted": {
        "default": 0,
        "required": false
    },
    "position": {
        "default": "",
        "required": false
    }
};

const AmimsPositionWidgetFormSchema = {
    "code": {
        "default": "",
        "required": false
    },
    "description": {
        "default": "",
        "required": false
    },
    "idPosition": {
        "required": true
    },
    "isDeleted": {
        "default": 0,
        "required": false
    },
    "position": {
        "default": "",
        "required": false
    },
    "total": {
        "default": 0,
        "required": false
    }
};

const AmimsPositionFormSchema = {
    "code": {
        "default": "",
        "required": false
    },
    "description": {
        "default": "",
        "required": false
    },
    "idPosition": {
        "required": true
    },
    "isDeleted": {
        "default": 0,
        "required": false
    },
    "position": {
        "default": "",
        "required": false
    }
};

const AmimsPurGrnItemReportFormSchema = {
    "idMpart": {
        "required": false
    },
    "idPart": {
        "required": false
    },
    "idPurGrn": {
        "required": false
    },
    "idPurGrnItem": {
        "required": true
    },
    "idPurPoItem": {
        "required": false
    },
    "mpart": {
        "default": "",
        "required": true
    },
    "noteGrnItem": {
        "default": "",
        "required": false
    },
    "part": {
        "default": "",
        "required": true
    },
    "qtyGrn": {
        "default": 0,
        "required": false
    },
    "serialNumber": {
        "default": "",
        "required": false
    },
    "statusGrn": {
        "default": "",
        "required": false
    }
};

const AmimsPurGrnItemWidgetFormSchema = {
    "idMpart": {
        "required": false
    },
    "idPart": {
        "required": false
    },
    "idPurGrn": {
        "required": false
    },
    "idPurGrnItem": {
        "required": true
    },
    "idPurPoItem": {
        "required": false
    },
    "noteGrnItem": {
        "default": "",
        "required": false
    },
    "qtyGrn": {
        "default": 0,
        "required": false
    },
    "serialNumber": {
        "default": "",
        "required": false
    },
    "statusGrn": {
        "default": "",
        "required": false
    },
    "total": {
        "default": 0,
        "required": false
    }
};

const AmimsPurGrnItemFormSchema = {
    "idMpart": {
        "required": false
    },
    "idPart": {
        "required": false
    },
    "idPurGrn": {
        "required": false
    },
    "idPurGrnItem": {
        "required": true
    },
    "idPurPoItem": {
        "required": false
    },
    "noteGrnItem": {
        "default": "",
        "required": false
    },
    "qtyGrn": {
        "default": 0,
        "required": false
    },
    "serialNumber": {
        "default": "",
        "required": false
    },
    "statusGrn": {
        "default": "",
        "required": false
    }
};

const AmimsPurGrnReportFormSchema = {
    "createdAt": {
        "default": "",
        "required": false
    },
    "dateGrn": {
        "default": "",
        "required": false
    },
    "dateQa": {
        "default": "",
        "required": false
    },
    "dateQaClose": {
        "default": "",
        "required": false
    },
    "grnKe": {
        "default": 0,
        "required": false
    },
    "idPurGrn": {
        "required": true
    },
    "idPurVendor": {
        "required": false
    },
    "idSite": {
        "required": false
    },
    "idUser": {
        "required": false
    },
    "isDeleted": {
        "default": 0,
        "required": false
    },
    "noIndex": {
        "default": 0,
        "required": false
    },
    "noteGrn": {
        "default": "",
        "required": false
    },
    "numberGrn": {
        "default": "",
        "required": false
    },
    "site": {
        "default": "",
        "required": true
    },
    "updatedAt": {
        "default": "",
        "required": false
    },
    "validasi": {
        "default": 0,
        "required": false
    }
};

const AmimsPurGrnWidgetFormSchema = {
    "createdAt": {
        "default": "",
        "required": false
    },
    "dateGrn": {
        "default": "",
        "required": false
    },
    "dateQa": {
        "default": "",
        "required": false
    },
    "dateQaClose": {
        "default": "",
        "required": false
    },
    "grnKe": {
        "default": 0,
        "required": false
    },
    "idPurGrn": {
        "required": true
    },
    "idPurVendor": {
        "required": false
    },
    "idSite": {
        "required": false
    },
    "idUser": {
        "required": false
    },
    "isDeleted": {
        "default": 0,
        "required": false
    },
    "noIndex": {
        "default": 0,
        "required": false
    },
    "noteGrn": {
        "default": "",
        "required": false
    },
    "numberGrn": {
        "default": "",
        "required": false
    },
    "total": {
        "default": 0,
        "required": false
    },
    "updatedAt": {
        "default": "",
        "required": false
    },
    "validasi": {
        "default": 0,
        "required": false
    }
};

const AmimsPurGrnFormSchema = {
    "createdAt": {
        "default": "",
        "required": false
    },
    "dateGrn": {
        "default": "",
        "required": false
    },
    "dateQa": {
        "default": "",
        "required": false
    },
    "dateQaClose": {
        "default": "",
        "required": false
    },
    "grnKe": {
        "default": 0,
        "required": false
    },
    "idPurGrn": {
        "required": true
    },
    "idPurVendor": {
        "required": false
    },
    "idSite": {
        "required": false
    },
    "idUser": {
        "required": false
    },
    "isDeleted": {
        "default": 0,
        "required": false
    },
    "noIndex": {
        "default": 0,
        "required": false
    },
    "noteGrn": {
        "default": "",
        "required": false
    },
    "numberGrn": {
        "default": "",
        "required": false
    },
    "updatedAt": {
        "default": "",
        "required": false
    },
    "validasi": {
        "default": 0,
        "required": false
    }
};

const AmimsPurPoItemReportFormSchema = {
    "edd": {
        "default": 0,
        "required": false
    },
    "idEngineerRti": {
        "required": false
    },
    "idMpart": {
        "required": false
    },
    "idPart": {
        "required": false
    },
    "idPurPo": {
        "required": false
    },
    "idPurPoItem": {
        "required": true
    },
    "idPurPrItem": {
        "required": false
    },
    "idPurPrcl": {
        "required": false
    },
    "idQaRpd": {
        "required": false
    },
    "mpart": {
        "default": "",
        "required": true
    },
    "notePoItem": {
        "default": "",
        "required": false
    },
    "oldPoItem": {
        "default": "",
        "required": false
    },
    "part": {
        "default": "",
        "required": true
    },
    "price": {
        "default": 0,
        "required": false
    },
    "priorityPoItem": {
        "default": "",
        "required": false
    },
    "qtyPo": {
        "default": 0,
        "required": false
    },
    "totalQtyGrn": {
        "default": 0,
        "required": false
    },
    "tsnCycle": {
        "default": 0,
        "required": false
    },
    "tsnHours": {
        "default": 0,
        "required": false
    },
    "tsnVal": {
        "default": 0,
        "required": false
    },
    "tsnVar": {
        "default": "",
        "required": false
    },
    "tsoCycle": {
        "default": 0,
        "required": false
    },
    "tsoHours": {
        "default": 0,
        "required": false
    },
    "tsoVal": {
        "default": 0,
        "required": false
    },
    "tsoVar": {
        "default": "",
        "required": false
    },
    "warantyStartCycle": {
        "default": 0,
        "required": false
    },
    "warantyStartDate": {
        "default": "",
        "required": false
    },
    "warantyStartDays": {
        "default": 0,
        "required": false
    },
    "warantyStartHours": {
        "default": 0,
        "required": false
    }
};

const AmimsPurPoItemWidgetFormSchema = {
    "edd": {
        "default": 0,
        "required": false
    },
    "idEngineerRti": {
        "required": false
    },
    "idMpart": {
        "required": false
    },
    "idPart": {
        "required": false
    },
    "idPurPo": {
        "required": false
    },
    "idPurPoItem": {
        "required": true
    },
    "idPurPrItem": {
        "required": false
    },
    "idPurPrcl": {
        "required": false
    },
    "idQaRpd": {
        "required": false
    },
    "notePoItem": {
        "default": "",
        "required": false
    },
    "oldPoItem": {
        "default": "",
        "required": false
    },
    "price": {
        "default": 0,
        "required": false
    },
    "priorityPoItem": {
        "default": "",
        "required": false
    },
    "qtyPo": {
        "default": 0,
        "required": false
    },
    "total": {
        "default": 0,
        "required": false
    },
    "totalQtyGrn": {
        "default": 0,
        "required": false
    },
    "tsnCycle": {
        "default": 0,
        "required": false
    },
    "tsnHours": {
        "default": 0,
        "required": false
    },
    "tsnVal": {
        "default": 0,
        "required": false
    },
    "tsnVar": {
        "default": "",
        "required": false
    },
    "tsoCycle": {
        "default": 0,
        "required": false
    },
    "tsoHours": {
        "default": 0,
        "required": false
    },
    "tsoVal": {
        "default": 0,
        "required": false
    },
    "tsoVar": {
        "default": "",
        "required": false
    },
    "warantyStartCycle": {
        "default": 0,
        "required": false
    },
    "warantyStartDate": {
        "default": "",
        "required": false
    },
    "warantyStartDays": {
        "default": 0,
        "required": false
    },
    "warantyStartHours": {
        "default": 0,
        "required": false
    }
};

const AmimsPurPoItemFormSchema = {
    "edd": {
        "default": 0,
        "required": false
    },
    "idEngineerRti": {
        "required": false
    },
    "idMpart": {
        "required": false
    },
    "idPart": {
        "required": false
    },
    "idPurPo": {
        "required": false
    },
    "idPurPoItem": {
        "required": true
    },
    "idPurPrItem": {
        "required": false
    },
    "idPurPrcl": {
        "required": false
    },
    "idQaRpd": {
        "required": false
    },
    "notePoItem": {
        "default": "",
        "required": false
    },
    "oldPoItem": {
        "default": "",
        "required": false
    },
    "price": {
        "default": 0,
        "required": false
    },
    "priorityPoItem": {
        "default": "",
        "required": false
    },
    "qtyPo": {
        "default": 0,
        "required": false
    },
    "totalQtyGrn": {
        "default": 0,
        "required": false
    },
    "tsnCycle": {
        "default": 0,
        "required": false
    },
    "tsnHours": {
        "default": 0,
        "required": false
    },
    "tsnVal": {
        "default": 0,
        "required": false
    },
    "tsnVar": {
        "default": "",
        "required": false
    },
    "tsoCycle": {
        "default": 0,
        "required": false
    },
    "tsoHours": {
        "default": 0,
        "required": false
    },
    "tsoVal": {
        "default": 0,
        "required": false
    },
    "tsoVar": {
        "default": "",
        "required": false
    },
    "warantyStartCycle": {
        "default": 0,
        "required": false
    },
    "warantyStartDate": {
        "default": "",
        "required": false
    },
    "warantyStartDays": {
        "default": 0,
        "required": false
    },
    "warantyStartHours": {
        "default": 0,
        "required": false
    }
};

const AmimsPurPoReportFormSchema = {
    "approveDirector": {
        "default": 0,
        "required": false
    },
    "createdAt": {
        "default": "",
        "required": false
    },
    "currency": {
        "default": "",
        "required": true
    },
    "dateAcc": {
        "default": "",
        "required": false
    },
    "dateAccDirector": {
        "default": "",
        "required": false
    },
    "dateDeadline": {
        "default": "",
        "required": false
    },
    "datePo": {
        "default": "",
        "required": false
    },
    "idCurrency": {
        "required": false
    },
    "idPosition": {
        "required": false
    },
    "idPurPo": {
        "required": true
    },
    "idPurVendor": {
        "required": false
    },
    "idPurVendorContact": {
        "required": false
    },
    "idSite": {
        "required": false
    },
    "idUser": {
        "required": false
    },
    "idUserDirector": {
        "required": false
    },
    "idUserManager": {
        "required": false
    },
    "isDeleted": {
        "default": 0,
        "required": false
    },
    "modeOfTransport": {
        "default": "",
        "required": false
    },
    "noIndex": {
        "default": 0,
        "required": false
    },
    "notePo": {
        "default": "",
        "required": false
    },
    "numberPo": {
        "default": "",
        "required": false
    },
    "oldPo": {
        "default": "",
        "required": false
    },
    "position": {
        "default": "",
        "required": true
    },
    "priceTotal": {
        "default": 0,
        "required": false
    },
    "quotationDate": {
        "default": "",
        "required": false
    },
    "quotationNumber": {
        "default": "",
        "required": false
    },
    "shipping": {
        "default": "",
        "required": false
    },
    "site": {
        "default": "",
        "required": true
    },
    "statusPo": {
        "default": "",
        "required": false
    },
    "term": {
        "default": "",
        "required": false
    },
    "typePo": {
        "default": "",
        "required": false
    },
    "updatedAt": {
        "default": "",
        "required": false
    },
    "validasi": {
        "default": 0,
        "required": false
    },
    "vat": {
        "default": 0,
        "required": false
    }
};

const AmimsPurPoWidgetFormSchema = {
    "approveDirector": {
        "default": 0,
        "required": false
    },
    "createdAt": {
        "default": "",
        "required": false
    },
    "dateAcc": {
        "default": "",
        "required": false
    },
    "dateAccDirector": {
        "default": "",
        "required": false
    },
    "dateDeadline": {
        "default": "",
        "required": false
    },
    "datePo": {
        "default": "",
        "required": false
    },
    "idCurrency": {
        "required": false
    },
    "idPosition": {
        "required": false
    },
    "idPurPo": {
        "required": true
    },
    "idPurVendor": {
        "required": false
    },
    "idPurVendorContact": {
        "required": false
    },
    "idSite": {
        "required": false
    },
    "idUser": {
        "required": false
    },
    "idUserDirector": {
        "required": false
    },
    "idUserManager": {
        "required": false
    },
    "isDeleted": {
        "default": 0,
        "required": false
    },
    "modeOfTransport": {
        "default": "",
        "required": false
    },
    "noIndex": {
        "default": 0,
        "required": false
    },
    "notePo": {
        "default": "",
        "required": false
    },
    "numberPo": {
        "default": "",
        "required": false
    },
    "oldPo": {
        "default": "",
        "required": false
    },
    "priceTotal": {
        "default": 0,
        "required": false
    },
    "quotationDate": {
        "default": "",
        "required": false
    },
    "quotationNumber": {
        "default": "",
        "required": false
    },
    "shipping": {
        "default": "",
        "required": false
    },
    "statusPo": {
        "default": "",
        "required": false
    },
    "term": {
        "default": "",
        "required": false
    },
    "total": {
        "default": 0,
        "required": false
    },
    "typePo": {
        "default": "",
        "required": false
    },
    "updatedAt": {
        "default": "",
        "required": false
    },
    "validasi": {
        "default": 0,
        "required": false
    },
    "vat": {
        "default": 0,
        "required": false
    }
};

const AmimsPurPoFormSchema = {
    "approveDirector": {
        "default": 0,
        "required": false
    },
    "createdAt": {
        "default": "",
        "required": false
    },
    "dateAcc": {
        "default": "",
        "required": false
    },
    "dateAccDirector": {
        "default": "",
        "required": false
    },
    "dateDeadline": {
        "default": "",
        "required": false
    },
    "datePo": {
        "default": "",
        "required": false
    },
    "idCurrency": {
        "required": false
    },
    "idPosition": {
        "required": false
    },
    "idPurPo": {
        "required": true
    },
    "idPurVendor": {
        "required": false
    },
    "idPurVendorContact": {
        "required": false
    },
    "idSite": {
        "required": false
    },
    "idUser": {
        "required": false
    },
    "idUserDirector": {
        "required": false
    },
    "idUserManager": {
        "required": false
    },
    "isDeleted": {
        "default": 0,
        "required": false
    },
    "modeOfTransport": {
        "default": "",
        "required": false
    },
    "noIndex": {
        "default": 0,
        "required": false
    },
    "notePo": {
        "default": "",
        "required": false
    },
    "numberPo": {
        "default": "",
        "required": false
    },
    "oldPo": {
        "default": "",
        "required": false
    },
    "priceTotal": {
        "default": 0,
        "required": false
    },
    "quotationDate": {
        "default": "",
        "required": false
    },
    "quotationNumber": {
        "default": "",
        "required": false
    },
    "shipping": {
        "default": "",
        "required": false
    },
    "statusPo": {
        "default": "",
        "required": false
    },
    "term": {
        "default": "",
        "required": false
    },
    "typePo": {
        "default": "",
        "required": false
    },
    "updatedAt": {
        "default": "",
        "required": false
    },
    "validasi": {
        "default": 0,
        "required": false
    },
    "vat": {
        "default": 0,
        "required": false
    }
};

const AmimsPurPrItemReportFormSchema = {
    "createdAt": {
        "default": "",
        "required": false
    },
    "idMpart": {
        "required": false
    },
    "idMpcPiroItem": {
        "required": false
    },
    "idPurPr": {
        "required": false
    },
    "idPurPrItem": {
        "required": true
    },
    "isDeleted": {
        "default": 0,
        "required": false
    },
    "mpart": {
        "default": "",
        "required": true
    },
    "notePrItem": {
        "default": "",
        "required": false
    },
    "oldPrItem": {
        "default": "",
        "required": false
    },
    "priority": {
        "default": "",
        "required": false
    },
    "qtyPr": {
        "default": 0,
        "required": false
    },
    "qtyStock": {
        "default": 0,
        "required": false
    },
    "statusItem": {
        "default": "",
        "required": false
    },
    "updatedAt": {
        "default": "",
        "required": false
    }
};

const AmimsPurPrItemWidgetFormSchema = {
    "createdAt": {
        "default": "",
        "required": false
    },
    "idMpart": {
        "required": false
    },
    "idMpcPiroItem": {
        "required": false
    },
    "idPurPr": {
        "required": false
    },
    "idPurPrItem": {
        "required": true
    },
    "isDeleted": {
        "default": 0,
        "required": false
    },
    "notePrItem": {
        "default": "",
        "required": false
    },
    "oldPrItem": {
        "default": "",
        "required": false
    },
    "priority": {
        "default": "",
        "required": false
    },
    "qtyPr": {
        "default": 0,
        "required": false
    },
    "qtyStock": {
        "default": 0,
        "required": false
    },
    "statusItem": {
        "default": "",
        "required": false
    },
    "total": {
        "default": 0,
        "required": false
    },
    "updatedAt": {
        "default": "",
        "required": false
    }
};

const AmimsPurPrItemFormSchema = {
    "createdAt": {
        "default": "",
        "required": false
    },
    "idMpart": {
        "required": false
    },
    "idMpcPiroItem": {
        "required": false
    },
    "idPurPr": {
        "required": false
    },
    "idPurPrItem": {
        "required": true
    },
    "isDeleted": {
        "default": 0,
        "required": false
    },
    "notePrItem": {
        "default": "",
        "required": false
    },
    "oldPrItem": {
        "default": "",
        "required": false
    },
    "priority": {
        "default": "",
        "required": false
    },
    "qtyPr": {
        "default": 0,
        "required": false
    },
    "qtyStock": {
        "default": 0,
        "required": false
    },
    "statusItem": {
        "default": "",
        "required": false
    },
    "updatedAt": {
        "default": "",
        "required": false
    }
};

const AmimsPurPrReportFormSchema = {
    "aircraft": {
        "default": "",
        "required": true
    },
    "createdAt": {
        "default": "",
        "required": false
    },
    "dateAcc": {
        "default": "",
        "required": false
    },
    "datePr": {
        "default": "",
        "required": false
    },
    "description": {
        "default": "",
        "required": false
    },
    "idAircraft": {
        "required": false
    },
    "idPosition": {
        "required": false
    },
    "idPurPr": {
        "required": true
    },
    "idSite": {
        "required": false
    },
    "idUser": {
        "required": false
    },
    "idUserAcc": {
        "required": false
    },
    "isDeleted": {
        "default": 0,
        "required": false
    },
    "keyword": {
        "default": "",
        "required": false
    },
    "noIndex": {
        "default": 0,
        "required": false
    },
    "notePr": {
        "default": "",
        "required": false
    },
    "numberPr": {
        "default": "",
        "required": false
    },
    "oldPr": {
        "default": "",
        "required": false
    },
    "position": {
        "default": "",
        "required": true
    },
    "site": {
        "default": "",
        "required": true
    },
    "statusPr": {
        "default": "",
        "required": false
    },
    "typePr": {
        "default": "",
        "required": false
    },
    "updatedAt": {
        "default": "",
        "required": false
    },
    "validasi": {
        "default": 0,
        "required": false
    }
};

const AmimsPurPrWidgetFormSchema = {
    "createdAt": {
        "default": "",
        "required": false
    },
    "dateAcc": {
        "default": "",
        "required": false
    },
    "datePr": {
        "default": "",
        "required": false
    },
    "description": {
        "default": "",
        "required": false
    },
    "idAircraft": {
        "required": false
    },
    "idPosition": {
        "required": false
    },
    "idPurPr": {
        "required": true
    },
    "idSite": {
        "required": false
    },
    "idUser": {
        "required": false
    },
    "idUserAcc": {
        "required": false
    },
    "isDeleted": {
        "default": 0,
        "required": false
    },
    "keyword": {
        "default": "",
        "required": false
    },
    "noIndex": {
        "default": 0,
        "required": false
    },
    "notePr": {
        "default": "",
        "required": false
    },
    "numberPr": {
        "default": "",
        "required": false
    },
    "oldPr": {
        "default": "",
        "required": false
    },
    "statusPr": {
        "default": "",
        "required": false
    },
    "total": {
        "default": 0,
        "required": false
    },
    "typePr": {
        "default": "",
        "required": false
    },
    "updatedAt": {
        "default": "",
        "required": false
    },
    "validasi": {
        "default": 0,
        "required": false
    }
};

const AmimsPurPrFormSchema = {
    "createdAt": {
        "default": "",
        "required": false
    },
    "dateAcc": {
        "default": "",
        "required": false
    },
    "datePr": {
        "default": "",
        "required": false
    },
    "description": {
        "default": "",
        "required": false
    },
    "idAircraft": {
        "required": false
    },
    "idPosition": {
        "required": false
    },
    "idPurPr": {
        "required": true
    },
    "idSite": {
        "required": false
    },
    "idUser": {
        "required": false
    },
    "idUserAcc": {
        "required": false
    },
    "isDeleted": {
        "default": 0,
        "required": false
    },
    "keyword": {
        "default": "",
        "required": false
    },
    "noIndex": {
        "default": 0,
        "required": false
    },
    "notePr": {
        "default": "",
        "required": false
    },
    "numberPr": {
        "default": "",
        "required": false
    },
    "oldPr": {
        "default": "",
        "required": false
    },
    "statusPr": {
        "default": "",
        "required": false
    },
    "typePr": {
        "default": "",
        "required": false
    },
    "updatedAt": {
        "default": "",
        "required": false
    },
    "validasi": {
        "default": 0,
        "required": false
    }
};

const AmimsPurPrclReportFormSchema = {
    "airworthiness": {
        "default": "",
        "required": false
    },
    "certificationNo": {
        "default": "",
        "required": false
    },
    "createdAt": {
        "default": "",
        "required": false
    },
    "currency": {
        "default": "",
        "required": true
    },
    "datePcrl": {
        "default": "",
        "required": false
    },
    "datePur": {
        "default": "",
        "required": false
    },
    "dateQa": {
        "default": "",
        "required": false
    },
    "description": {
        "default": "",
        "required": false
    },
    "draftBin": {
        "default": "",
        "required": false
    },
    "idConditionMonitoring": {
        "required": false
    },
    "idCurrency": {
        "required": false
    },
    "idInternalGrnItem": {
        "required": false
    },
    "idLifeTimeLimit": {
        "required": false
    },
    "idMpart": {
        "required": false
    },
    "idPart": {
        "required": false
    },
    "idPartCondition": {
        "required": false
    },
    "idPurGrn": {
        "required": false
    },
    "idPurGrnItem": {
        "required": false
    },
    "idPurPrcl": {
        "required": true
    },
    "idPurVendor": {
        "required": false
    },
    "idUserPu": {
        "required": false
    },
    "idUserQa": {
        "required": false
    },
    "isServiceable": {
        "default": 0,
        "required": false
    },
    "lifeLimitCycle": {
        "default": 0,
        "required": false
    },
    "lifeLimitHours": {
        "default": 0,
        "required": false
    },
    "lifeLimitVal": {
        "default": 0,
        "required": false
    },
    "lifeLimitVar": {
        "default": "",
        "required": false
    },
    "loopIndex": {
        "default": 0,
        "required": false
    },
    "manufacture": {
        "default": "",
        "required": false
    },
    "manufactureDate": {
        "default": "",
        "required": false
    },
    "mpart": {
        "default": "",
        "required": true
    },
    "notePcrl": {
        "default": "",
        "required": false
    },
    "part": {
        "default": "",
        "required": true
    },
    "partCheckingPur": {
        "default": "",
        "required": false
    },
    "partCheckingQa": {
        "default": "",
        "required": false
    },
    "prclParent": {
        "default": "",
        "required": false
    },
    "price": {
        "default": 0,
        "required": false
    },
    "qtyCheck": {
        "default": 0,
        "required": false
    },
    "qtyPrcl": {
        "default": 0,
        "required": false
    },
    "qtyReturn": {
        "default": 0,
        "required": false
    },
    "qualityCheck": {
        "default": "",
        "required": false
    },
    "refDate": {
        "default": "",
        "required": false
    },
    "refId": {
        "default": "",
        "required": false
    },
    "refNumber": {
        "default": "",
        "required": false
    },
    "service": {
        "default": "",
        "required": false
    },
    "sn": {
        "default": "",
        "required": false
    },
    "statusPrcl": {
        "default": "",
        "required": false
    },
    "tboCycle": {
        "default": 0,
        "required": false
    },
    "tboHours": {
        "default": 0,
        "required": false
    },
    "tboVal": {
        "default": 0,
        "required": false
    },
    "tboVar": {
        "default": "",
        "required": false
    },
    "tsnCycle": {
        "default": 0,
        "required": false
    },
    "tsnHours": {
        "default": 0,
        "required": false
    },
    "tsnVal": {
        "default": 0,
        "required": false
    },
    "tsnVar": {
        "default": "",
        "required": false
    },
    "tsoCycle": {
        "default": 0,
        "required": false
    },
    "tsoHours": {
        "default": 0,
        "required": false
    },
    "tsoVal": {
        "default": 0,
        "required": false
    },
    "tsoVar": {
        "default": "",
        "required": false
    },
    "typePrcl": {
        "default": "",
        "required": false
    },
    "updatedAt": {
        "default": "",
        "required": false
    },
    "validasi": {
        "default": 0,
        "required": false
    },
    "warrantyCycle": {
        "default": 0,
        "required": false
    },
    "warrantyDays": {
        "default": 0,
        "required": false
    },
    "warrantyHours": {
        "default": 0,
        "required": false
    },
    "warrantyMonths": {
        "default": 0,
        "required": false
    },
    "warrantyStartCycle": {
        "default": 0,
        "required": false
    },
    "warrantyStartDate": {
        "default": "",
        "required": false
    }
};

const AmimsPurPrclWidgetFormSchema = {
    "airworthiness": {
        "default": "",
        "required": false
    },
    "certificationNo": {
        "default": "",
        "required": false
    },
    "createdAt": {
        "default": "",
        "required": false
    },
    "datePcrl": {
        "default": "",
        "required": false
    },
    "datePur": {
        "default": "",
        "required": false
    },
    "dateQa": {
        "default": "",
        "required": false
    },
    "description": {
        "default": "",
        "required": false
    },
    "draftBin": {
        "default": "",
        "required": false
    },
    "idConditionMonitoring": {
        "required": false
    },
    "idCurrency": {
        "required": false
    },
    "idInternalGrnItem": {
        "required": false
    },
    "idLifeTimeLimit": {
        "required": false
    },
    "idMpart": {
        "required": false
    },
    "idPart": {
        "required": false
    },
    "idPartCondition": {
        "required": false
    },
    "idPurGrn": {
        "required": false
    },
    "idPurGrnItem": {
        "required": false
    },
    "idPurPrcl": {
        "required": true
    },
    "idPurVendor": {
        "required": false
    },
    "idUserPu": {
        "required": false
    },
    "idUserQa": {
        "required": false
    },
    "isServiceable": {
        "default": 0,
        "required": false
    },
    "lifeLimitCycle": {
        "default": 0,
        "required": false
    },
    "lifeLimitHours": {
        "default": 0,
        "required": false
    },
    "lifeLimitVal": {
        "default": 0,
        "required": false
    },
    "lifeLimitVar": {
        "default": "",
        "required": false
    },
    "loopIndex": {
        "default": 0,
        "required": false
    },
    "manufacture": {
        "default": "",
        "required": false
    },
    "manufactureDate": {
        "default": "",
        "required": false
    },
    "notePcrl": {
        "default": "",
        "required": false
    },
    "partCheckingPur": {
        "default": "",
        "required": false
    },
    "partCheckingQa": {
        "default": "",
        "required": false
    },
    "prclParent": {
        "default": "",
        "required": false
    },
    "price": {
        "default": 0,
        "required": false
    },
    "qtyCheck": {
        "default": 0,
        "required": false
    },
    "qtyPrcl": {
        "default": 0,
        "required": false
    },
    "qtyReturn": {
        "default": 0,
        "required": false
    },
    "qualityCheck": {
        "default": "",
        "required": false
    },
    "refDate": {
        "default": "",
        "required": false
    },
    "refId": {
        "default": "",
        "required": false
    },
    "refNumber": {
        "default": "",
        "required": false
    },
    "service": {
        "default": "",
        "required": false
    },
    "sn": {
        "default": "",
        "required": false
    },
    "statusPrcl": {
        "default": "",
        "required": false
    },
    "tboCycle": {
        "default": 0,
        "required": false
    },
    "tboHours": {
        "default": 0,
        "required": false
    },
    "tboVal": {
        "default": 0,
        "required": false
    },
    "tboVar": {
        "default": "",
        "required": false
    },
    "total": {
        "default": 0,
        "required": false
    },
    "tsnCycle": {
        "default": 0,
        "required": false
    },
    "tsnHours": {
        "default": 0,
        "required": false
    },
    "tsnVal": {
        "default": 0,
        "required": false
    },
    "tsnVar": {
        "default": "",
        "required": false
    },
    "tsoCycle": {
        "default": 0,
        "required": false
    },
    "tsoHours": {
        "default": 0,
        "required": false
    },
    "tsoVal": {
        "default": 0,
        "required": false
    },
    "tsoVar": {
        "default": "",
        "required": false
    },
    "typePrcl": {
        "default": "",
        "required": false
    },
    "updatedAt": {
        "default": "",
        "required": false
    },
    "validasi": {
        "default": 0,
        "required": false
    },
    "warrantyCycle": {
        "default": 0,
        "required": false
    },
    "warrantyDays": {
        "default": 0,
        "required": false
    },
    "warrantyHours": {
        "default": 0,
        "required": false
    },
    "warrantyMonths": {
        "default": 0,
        "required": false
    },
    "warrantyStartCycle": {
        "default": 0,
        "required": false
    },
    "warrantyStartDate": {
        "default": "",
        "required": false
    }
};

const AmimsPurPrclFormSchema = {
    "airworthiness": {
        "default": "",
        "required": false
    },
    "certificationNo": {
        "default": "",
        "required": false
    },
    "createdAt": {
        "default": "",
        "required": false
    },
    "datePcrl": {
        "default": "",
        "required": false
    },
    "datePur": {
        "default": "",
        "required": false
    },
    "dateQa": {
        "default": "",
        "required": false
    },
    "description": {
        "default": "",
        "required": false
    },
    "draftBin": {
        "default": "",
        "required": false
    },
    "idConditionMonitoring": {
        "required": false
    },
    "idCurrency": {
        "required": false
    },
    "idInternalGrnItem": {
        "required": false
    },
    "idLifeTimeLimit": {
        "required": false
    },
    "idMpart": {
        "required": false
    },
    "idPart": {
        "required": false
    },
    "idPartCondition": {
        "required": false
    },
    "idPurGrn": {
        "required": false
    },
    "idPurGrnItem": {
        "required": false
    },
    "idPurPrcl": {
        "required": true
    },
    "idPurVendor": {
        "required": false
    },
    "idUserPu": {
        "required": false
    },
    "idUserQa": {
        "required": false
    },
    "isServiceable": {
        "default": 0,
        "required": false
    },
    "lifeLimitCycle": {
        "default": 0,
        "required": false
    },
    "lifeLimitHours": {
        "default": 0,
        "required": false
    },
    "lifeLimitVal": {
        "default": 0,
        "required": false
    },
    "lifeLimitVar": {
        "default": "",
        "required": false
    },
    "loopIndex": {
        "default": 0,
        "required": false
    },
    "manufacture": {
        "default": "",
        "required": false
    },
    "manufactureDate": {
        "default": "",
        "required": false
    },
    "notePcrl": {
        "default": "",
        "required": false
    },
    "partCheckingPur": {
        "default": "",
        "required": false
    },
    "partCheckingQa": {
        "default": "",
        "required": false
    },
    "prclParent": {
        "default": "",
        "required": false
    },
    "price": {
        "default": 0,
        "required": false
    },
    "qtyCheck": {
        "default": 0,
        "required": false
    },
    "qtyPrcl": {
        "default": 0,
        "required": false
    },
    "qtyReturn": {
        "default": 0,
        "required": false
    },
    "qualityCheck": {
        "default": "",
        "required": false
    },
    "refDate": {
        "default": "",
        "required": false
    },
    "refId": {
        "default": "",
        "required": false
    },
    "refNumber": {
        "default": "",
        "required": false
    },
    "service": {
        "default": "",
        "required": false
    },
    "sn": {
        "default": "",
        "required": false
    },
    "statusPrcl": {
        "default": "",
        "required": false
    },
    "tboCycle": {
        "default": 0,
        "required": false
    },
    "tboHours": {
        "default": 0,
        "required": false
    },
    "tboVal": {
        "default": 0,
        "required": false
    },
    "tboVar": {
        "default": "",
        "required": false
    },
    "tsnCycle": {
        "default": 0,
        "required": false
    },
    "tsnHours": {
        "default": 0,
        "required": false
    },
    "tsnVal": {
        "default": 0,
        "required": false
    },
    "tsnVar": {
        "default": "",
        "required": false
    },
    "tsoCycle": {
        "default": 0,
        "required": false
    },
    "tsoHours": {
        "default": 0,
        "required": false
    },
    "tsoVal": {
        "default": 0,
        "required": false
    },
    "tsoVar": {
        "default": "",
        "required": false
    },
    "typePrcl": {
        "default": "",
        "required": false
    },
    "updatedAt": {
        "default": "",
        "required": false
    },
    "validasi": {
        "default": 0,
        "required": false
    },
    "warrantyCycle": {
        "default": 0,
        "required": false
    },
    "warrantyDays": {
        "default": 0,
        "required": false
    },
    "warrantyHours": {
        "default": 0,
        "required": false
    },
    "warrantyMonths": {
        "default": 0,
        "required": false
    },
    "warrantyStartCycle": {
        "default": 0,
        "required": false
    },
    "warrantyStartDate": {
        "default": "",
        "required": false
    }
};

const AmimsPurReturnItemReportFormSchema = {
    "idMpart": {
        "required": false
    },
    "idPurGrnItem": {
        "required": false
    },
    "idPurPoItem": {
        "required": false
    },
    "idPurReturn": {
        "required": false
    },
    "idPurReturnItem": {
        "required": true
    },
    "mpart": {
        "default": "",
        "required": true
    },
    "noteReturnItem": {
        "default": "",
        "required": false
    },
    "qtyReturn": {
        "default": 0,
        "required": false
    },
    "statusItem": {
        "default": 0,
        "required": false
    }
};

const AmimsPurReturnItemWidgetFormSchema = {
    "idMpart": {
        "required": false
    },
    "idPurGrnItem": {
        "required": false
    },
    "idPurPoItem": {
        "required": false
    },
    "idPurReturn": {
        "required": false
    },
    "idPurReturnItem": {
        "required": true
    },
    "noteReturnItem": {
        "default": "",
        "required": false
    },
    "qtyReturn": {
        "default": 0,
        "required": false
    },
    "statusItem": {
        "default": 0,
        "required": false
    },
    "total": {
        "default": 0,
        "required": false
    }
};

const AmimsPurReturnItemFormSchema = {
    "idMpart": {
        "required": false
    },
    "idPurGrnItem": {
        "required": false
    },
    "idPurPoItem": {
        "required": false
    },
    "idPurReturn": {
        "required": false
    },
    "idPurReturnItem": {
        "required": true
    },
    "noteReturnItem": {
        "default": "",
        "required": false
    },
    "qtyReturn": {
        "default": 0,
        "required": false
    },
    "statusItem": {
        "default": 0,
        "required": false
    }
};

const AmimsPurReturnReportFormSchema = {
    "createdAt": {
        "default": "",
        "required": false
    },
    "dateDeadlineReturn": {
        "default": "",
        "required": false
    },
    "dateReturn": {
        "default": "",
        "required": false
    },
    "idPurPo": {
        "required": false
    },
    "idPurReturn": {
        "required": true
    },
    "idPurVendor": {
        "required": false
    },
    "idUser": {
        "required": false
    },
    "isDeleted": {
        "default": 0,
        "required": false
    },
    "noteReturn": {
        "default": "",
        "required": false
    },
    "numberReturn": {
        "default": "",
        "required": false
    },
    "statusReturn": {
        "default": "",
        "required": false
    },
    "updatedAt": {
        "default": "",
        "required": false
    },
    "validasi": {
        "default": 0,
        "required": false
    }
};

const AmimsPurReturnWidgetFormSchema = {
    "createdAt": {
        "default": "",
        "required": false
    },
    "dateDeadlineReturn": {
        "default": "",
        "required": false
    },
    "dateReturn": {
        "default": "",
        "required": false
    },
    "idPurPo": {
        "required": false
    },
    "idPurReturn": {
        "required": true
    },
    "idPurVendor": {
        "required": false
    },
    "idUser": {
        "required": false
    },
    "isDeleted": {
        "default": 0,
        "required": false
    },
    "noteReturn": {
        "default": "",
        "required": false
    },
    "numberReturn": {
        "default": "",
        "required": false
    },
    "statusReturn": {
        "default": "",
        "required": false
    },
    "total": {
        "default": 0,
        "required": false
    },
    "updatedAt": {
        "default": "",
        "required": false
    },
    "validasi": {
        "default": 0,
        "required": false
    }
};

const AmimsPurReturnFormSchema = {
    "createdAt": {
        "default": "",
        "required": false
    },
    "dateDeadlineReturn": {
        "default": "",
        "required": false
    },
    "dateReturn": {
        "default": "",
        "required": false
    },
    "idPurPo": {
        "required": false
    },
    "idPurReturn": {
        "required": true
    },
    "idPurVendor": {
        "required": false
    },
    "idUser": {
        "required": false
    },
    "isDeleted": {
        "default": 0,
        "required": false
    },
    "noteReturn": {
        "default": "",
        "required": false
    },
    "numberReturn": {
        "default": "",
        "required": false
    },
    "statusReturn": {
        "default": "",
        "required": false
    },
    "updatedAt": {
        "default": "",
        "required": false
    },
    "validasi": {
        "default": 0,
        "required": false
    }
};

const AmimsPurVendorContactReportFormSchema = {
    "address": {
        "default": "",
        "required": false
    },
    "city": {
        "default": "",
        "required": false
    },
    "country": {
        "default": "",
        "required": false
    },
    "createdAt": {
        "default": "",
        "required": false
    },
    "email": {
        "default": "",
        "required": false
    },
    "fax": {
        "default": "",
        "required": false
    },
    "idPurVendor": {
        "required": false
    },
    "idPurVendorContact": {
        "required": true
    },
    "linePhone": {
        "default": "",
        "required": false
    },
    "oldId": {
        "default": "",
        "required": false
    },
    "phone": {
        "default": "",
        "required": false
    },
    "pic": {
        "default": "",
        "required": false
    },
    "postcode": {
        "default": "",
        "required": false
    },
    "state": {
        "default": "",
        "required": false
    },
    "updatedAt": {
        "default": "",
        "required": false
    }
};

const AmimsPurVendorContactWidgetFormSchema = {
    "address": {
        "default": "",
        "required": false
    },
    "city": {
        "default": "",
        "required": false
    },
    "country": {
        "default": "",
        "required": false
    },
    "createdAt": {
        "default": "",
        "required": false
    },
    "email": {
        "default": "",
        "required": false
    },
    "fax": {
        "default": "",
        "required": false
    },
    "idPurVendor": {
        "required": false
    },
    "idPurVendorContact": {
        "required": true
    },
    "linePhone": {
        "default": "",
        "required": false
    },
    "oldId": {
        "default": "",
        "required": false
    },
    "phone": {
        "default": "",
        "required": false
    },
    "pic": {
        "default": "",
        "required": false
    },
    "postcode": {
        "default": "",
        "required": false
    },
    "state": {
        "default": "",
        "required": false
    },
    "total": {
        "default": 0,
        "required": false
    },
    "updatedAt": {
        "default": "",
        "required": false
    }
};

const AmimsPurVendorContactFormSchema = {
    "address": {
        "default": "",
        "required": false
    },
    "city": {
        "default": "",
        "required": false
    },
    "country": {
        "default": "",
        "required": false
    },
    "createdAt": {
        "default": "",
        "required": false
    },
    "email": {
        "default": "",
        "required": false
    },
    "fax": {
        "default": "",
        "required": false
    },
    "idPurVendor": {
        "required": false
    },
    "idPurVendorContact": {
        "required": true
    },
    "linePhone": {
        "default": "",
        "required": false
    },
    "oldId": {
        "default": "",
        "required": false
    },
    "phone": {
        "default": "",
        "required": false
    },
    "pic": {
        "default": "",
        "required": false
    },
    "postcode": {
        "default": "",
        "required": false
    },
    "state": {
        "default": "",
        "required": false
    },
    "updatedAt": {
        "default": "",
        "required": false
    }
};

const AmimsPurVendorItemReportFormSchema = {
    "createdAt": {
        "default": "",
        "required": false
    },
    "idMpart": {
        "required": false
    },
    "idPurVendor": {
        "required": false
    },
    "idPurVendorItem": {
        "required": true
    },
    "isDeleted": {
        "default": 0,
        "required": false
    },
    "manufacture": {
        "default": "",
        "required": false
    },
    "minOrder": {
        "default": 0,
        "required": false
    },
    "mpart": {
        "default": "",
        "required": true
    },
    "note": {
        "default": "",
        "required": false
    },
    "price": {
        "default": 0,
        "required": false
    },
    "responseTime": {
        "default": 0,
        "required": false
    },
    "updatedAt": {
        "default": "",
        "required": false
    }
};

const AmimsPurVendorItemWidgetFormSchema = {
    "createdAt": {
        "default": "",
        "required": false
    },
    "idMpart": {
        "required": false
    },
    "idPurVendor": {
        "required": false
    },
    "idPurVendorItem": {
        "required": true
    },
    "isDeleted": {
        "default": 0,
        "required": false
    },
    "manufacture": {
        "default": "",
        "required": false
    },
    "minOrder": {
        "default": 0,
        "required": false
    },
    "note": {
        "default": "",
        "required": false
    },
    "price": {
        "default": 0,
        "required": false
    },
    "responseTime": {
        "default": 0,
        "required": false
    },
    "total": {
        "default": 0,
        "required": false
    },
    "updatedAt": {
        "default": "",
        "required": false
    }
};

const AmimsPurVendorItemFormSchema = {
    "createdAt": {
        "default": "",
        "required": false
    },
    "idMpart": {
        "required": false
    },
    "idPurVendor": {
        "required": false
    },
    "idPurVendorItem": {
        "required": true
    },
    "isDeleted": {
        "default": 0,
        "required": false
    },
    "manufacture": {
        "default": "",
        "required": false
    },
    "minOrder": {
        "default": 0,
        "required": false
    },
    "note": {
        "default": "",
        "required": false
    },
    "price": {
        "default": 0,
        "required": false
    },
    "responseTime": {
        "default": 0,
        "required": false
    },
    "updatedAt": {
        "default": "",
        "required": false
    }
};

const AmimsPurVendorReportFormSchema = {
    "address": {
        "default": "",
        "required": false
    },
    "code": {
        "default": "",
        "required": false
    },
    "column1": {
        "default": "",
        "required": false
    },
    "country": {
        "default": "",
        "required": false
    },
    "createdAt": {
        "default": "",
        "required": false
    },
    "defaultCurrency": {
        "default": "",
        "required": false
    },
    "deliveryTime": {
        "default": 0,
        "required": false
    },
    "email": {
        "default": "",
        "required": false
    },
    "fax": {
        "default": "",
        "required": false
    },
    "idMcurrency": {
        "required": false
    },
    "idPurVendor": {
        "required": true
    },
    "idUser": {
        "required": false
    },
    "isDeleted": {
        "default": 0,
        "required": false
    },
    "isManufacture": {
        "default": "",
        "required": false
    },
    "isRepairer": {
        "default": "",
        "required": false
    },
    "isShipper": {
        "default": "",
        "required": false
    },
    "isVendor": {
        "default": "",
        "required": false
    },
    "isWorkshop": {
        "default": "",
        "required": false
    },
    "keyword": {
        "default": "",
        "required": false
    },
    "mcurrency": {
        "default": "",
        "required": true
    },
    "nameVendor": {
        "default": "",
        "required": false
    },
    "oldId": {
        "default": "",
        "required": false
    },
    "pic": {
        "default": "",
        "required": false
    },
    "postcode": {
        "default": "",
        "required": false
    },
    "rating": {
        "default": "",
        "required": false
    },
    "services": {
        "default": "",
        "required": false
    },
    "status": {
        "default": "",
        "required": false
    },
    "telephone": {
        "default": "",
        "required": false
    },
    "timezone": {
        "default": "",
        "required": false
    },
    "tremPayment": {
        "default": 0,
        "required": false
    },
    "updatedAt": {
        "default": "",
        "required": false
    },
    "validasi": {
        "default": 0,
        "required": false
    }
};

const AmimsPurVendorWidgetFormSchema = {
    "address": {
        "default": "",
        "required": false
    },
    "code": {
        "default": "",
        "required": false
    },
    "column1": {
        "default": "",
        "required": false
    },
    "country": {
        "default": "",
        "required": false
    },
    "createdAt": {
        "default": "",
        "required": false
    },
    "defaultCurrency": {
        "default": "",
        "required": false
    },
    "deliveryTime": {
        "default": 0,
        "required": false
    },
    "email": {
        "default": "",
        "required": false
    },
    "fax": {
        "default": "",
        "required": false
    },
    "idMcurrency": {
        "required": false
    },
    "idPurVendor": {
        "required": true
    },
    "idUser": {
        "required": false
    },
    "isDeleted": {
        "default": 0,
        "required": false
    },
    "isManufacture": {
        "default": "",
        "required": false
    },
    "isRepairer": {
        "default": "",
        "required": false
    },
    "isShipper": {
        "default": "",
        "required": false
    },
    "isVendor": {
        "default": "",
        "required": false
    },
    "isWorkshop": {
        "default": "",
        "required": false
    },
    "keyword": {
        "default": "",
        "required": false
    },
    "nameVendor": {
        "default": "",
        "required": false
    },
    "oldId": {
        "default": "",
        "required": false
    },
    "pic": {
        "default": "",
        "required": false
    },
    "postcode": {
        "default": "",
        "required": false
    },
    "rating": {
        "default": "",
        "required": false
    },
    "services": {
        "default": "",
        "required": false
    },
    "status": {
        "default": "",
        "required": false
    },
    "telephone": {
        "default": "",
        "required": false
    },
    "timezone": {
        "default": "",
        "required": false
    },
    "total": {
        "default": 0,
        "required": false
    },
    "tremPayment": {
        "default": 0,
        "required": false
    },
    "updatedAt": {
        "default": "",
        "required": false
    },
    "validasi": {
        "default": 0,
        "required": false
    }
};

const AmimsPurVendorFormSchema = {
    "address": {
        "default": "",
        "required": false
    },
    "code": {
        "default": "",
        "required": false
    },
    "column1": {
        "default": "",
        "required": false
    },
    "country": {
        "default": "",
        "required": false
    },
    "createdAt": {
        "default": "",
        "required": false
    },
    "defaultCurrency": {
        "default": "",
        "required": false
    },
    "deliveryTime": {
        "default": 0,
        "required": false
    },
    "email": {
        "default": "",
        "required": false
    },
    "fax": {
        "default": "",
        "required": false
    },
    "idMcurrency": {
        "required": false
    },
    "idPurVendor": {
        "required": true
    },
    "idUser": {
        "required": false
    },
    "isDeleted": {
        "default": 0,
        "required": false
    },
    "isManufacture": {
        "default": "",
        "required": false
    },
    "isRepairer": {
        "default": "",
        "required": false
    },
    "isShipper": {
        "default": "",
        "required": false
    },
    "isVendor": {
        "default": "",
        "required": false
    },
    "isWorkshop": {
        "default": "",
        "required": false
    },
    "keyword": {
        "default": "",
        "required": false
    },
    "nameVendor": {
        "default": "",
        "required": false
    },
    "oldId": {
        "default": "",
        "required": false
    },
    "pic": {
        "default": "",
        "required": false
    },
    "postcode": {
        "default": "",
        "required": false
    },
    "rating": {
        "default": "",
        "required": false
    },
    "services": {
        "default": "",
        "required": false
    },
    "status": {
        "default": "",
        "required": false
    },
    "telephone": {
        "default": "",
        "required": false
    },
    "timezone": {
        "default": "",
        "required": false
    },
    "tremPayment": {
        "default": 0,
        "required": false
    },
    "updatedAt": {
        "default": "",
        "required": false
    },
    "validasi": {
        "default": 0,
        "required": false
    }
};

const AmimsQaRpdDispotitionReportFormSchema = {
    "codeDispotition": {
        "default": "",
        "required": false
    },
    "color": {
        "default": "",
        "required": false
    },
    "dispotition": {
        "default": "",
        "required": false
    },
    "idQaRpdDispotition": {
        "required": true
    },
    "printTag": {
        "default": "",
        "required": false
    },
    "toPosition": {
        "default": "",
        "required": false
    }
};

const AmimsQaRpdDispotitionWidgetFormSchema = {
    "codeDispotition": {
        "default": "",
        "required": false
    },
    "color": {
        "default": "",
        "required": false
    },
    "dispotition": {
        "default": "",
        "required": false
    },
    "idQaRpdDispotition": {
        "required": true
    },
    "printTag": {
        "default": "",
        "required": false
    },
    "toPosition": {
        "default": "",
        "required": false
    },
    "total": {
        "default": 0,
        "required": false
    }
};

const AmimsQaRpdDispotitionFormSchema = {
    "codeDispotition": {
        "default": "",
        "required": false
    },
    "color": {
        "default": "",
        "required": false
    },
    "dispotition": {
        "default": "",
        "required": false
    },
    "idQaRpdDispotition": {
        "required": true
    },
    "printTag": {
        "default": "",
        "required": false
    },
    "toPosition": {
        "default": "",
        "required": false
    }
};

const AmimsQaRpdReportFormSchema = {
    "createdAt": {
        "default": "",
        "required": false
    },
    "dateRpd": {
        "default": "",
        "required": false
    },
    "idQaRpd": {
        "required": true
    },
    "idUserQa": {
        "required": false
    },
    "numberRpd": {
        "default": "",
        "required": false
    },
    "statusRpd": {
        "default": "",
        "required": false
    },
    "tipe": {
        "default": "",
        "required": false
    },
    "updatedAt": {
        "default": "",
        "required": false
    }
};

const AmimsQaRpdWidgetFormSchema = {
    "createdAt": {
        "default": "",
        "required": false
    },
    "dateRpd": {
        "default": "",
        "required": false
    },
    "idQaRpd": {
        "required": true
    },
    "idUserQa": {
        "required": false
    },
    "numberRpd": {
        "default": "",
        "required": false
    },
    "statusRpd": {
        "default": "",
        "required": false
    },
    "tipe": {
        "default": "",
        "required": false
    },
    "total": {
        "default": 0,
        "required": false
    },
    "updatedAt": {
        "default": "",
        "required": false
    }
};

const AmimsQaRpdFormSchema = {
    "createdAt": {
        "default": "",
        "required": false
    },
    "dateRpd": {
        "default": "",
        "required": false
    },
    "idQaRpd": {
        "required": true
    },
    "idUserQa": {
        "required": false
    },
    "numberRpd": {
        "default": "",
        "required": false
    },
    "statusRpd": {
        "default": "",
        "required": false
    },
    "tipe": {
        "default": "",
        "required": false
    },
    "updatedAt": {
        "default": "",
        "required": false
    }
};

const AmimsQaTransferItemReportFormSchema = {
    "idMpcSelfMaintenance": {
        "required": false
    },
    "idPurPrcl": {
        "required": false
    },
    "idQaTransfer": {
        "required": false
    },
    "idQaTransferItem": {
        "required": true
    }
};

const AmimsQaTransferItemWidgetFormSchema = {
    "idMpcSelfMaintenance": {
        "required": false
    },
    "idPurPrcl": {
        "required": false
    },
    "idQaTransfer": {
        "required": false
    },
    "idQaTransferItem": {
        "required": true
    },
    "total": {
        "default": 0,
        "required": false
    }
};

const AmimsQaTransferItemFormSchema = {
    "idMpcSelfMaintenance": {
        "required": false
    },
    "idPurPrcl": {
        "required": false
    },
    "idQaTransfer": {
        "required": false
    },
    "idQaTransferItem": {
        "required": true
    }
};

const AmimsQaTransferReportFormSchema = {
    "createdAt": {
        "default": "",
        "required": false
    },
    "dateReceived": {
        "default": "",
        "required": false
    },
    "dateTransfer": {
        "default": "",
        "required": false
    },
    "idQaTransfer": {
        "required": true
    },
    "idSite": {
        "required": false
    },
    "idUser": {
        "required": false
    },
    "idUserReceived": {
        "required": false
    },
    "noIndex": {
        "default": 0,
        "required": false
    },
    "noteTransfer": {
        "default": "",
        "required": false
    },
    "numberTransfer": {
        "default": "",
        "required": false
    },
    "site": {
        "default": "",
        "required": true
    },
    "statusTransfer": {
        "default": "",
        "required": false
    },
    "toSite": {
        "default": 0,
        "required": false
    },
    "typeTransfer": {
        "default": "",
        "required": false
    },
    "updatedAt": {
        "default": "",
        "required": false
    },
    "validasi": {
        "default": 0,
        "required": false
    }
};

const AmimsQaTransferWidgetFormSchema = {
    "createdAt": {
        "default": "",
        "required": false
    },
    "dateReceived": {
        "default": "",
        "required": false
    },
    "dateTransfer": {
        "default": "",
        "required": false
    },
    "idQaTransfer": {
        "required": true
    },
    "idSite": {
        "required": false
    },
    "idUser": {
        "required": false
    },
    "idUserReceived": {
        "required": false
    },
    "noIndex": {
        "default": 0,
        "required": false
    },
    "noteTransfer": {
        "default": "",
        "required": false
    },
    "numberTransfer": {
        "default": "",
        "required": false
    },
    "statusTransfer": {
        "default": "",
        "required": false
    },
    "toSite": {
        "default": 0,
        "required": false
    },
    "total": {
        "default": 0,
        "required": false
    },
    "typeTransfer": {
        "default": "",
        "required": false
    },
    "updatedAt": {
        "default": "",
        "required": false
    },
    "validasi": {
        "default": 0,
        "required": false
    }
};

const AmimsQaTransferFormSchema = {
    "createdAt": {
        "default": "",
        "required": false
    },
    "dateReceived": {
        "default": "",
        "required": false
    },
    "dateTransfer": {
        "default": "",
        "required": false
    },
    "idQaTransfer": {
        "required": true
    },
    "idSite": {
        "required": false
    },
    "idUser": {
        "required": false
    },
    "idUserReceived": {
        "required": false
    },
    "noIndex": {
        "default": 0,
        "required": false
    },
    "noteTransfer": {
        "default": "",
        "required": false
    },
    "numberTransfer": {
        "default": "",
        "required": false
    },
    "statusTransfer": {
        "default": "",
        "required": false
    },
    "toSite": {
        "default": 0,
        "required": false
    },
    "typeTransfer": {
        "default": "",
        "required": false
    },
    "updatedAt": {
        "default": "",
        "required": false
    },
    "validasi": {
        "default": 0,
        "required": false
    }
};

const AmimsRotaryFactorReportFormSchema = {
    "adj1": {
        "default": 0,
        "required": false
    },
    "adj2": {
        "default": 0,
        "required": false
    },
    "adj3": {
        "default": 0,
        "required": false
    },
    "dateCycle": {
        "default": "",
        "required": false
    },
    "dateHours": {
        "default": "",
        "required": false
    },
    "factor1": {
        "default": 0,
        "required": false
    },
    "factor2": {
        "default": 0,
        "required": false
    },
    "factor3": {
        "default": 0,
        "required": false
    },
    "hoistLeft": {
        "default": 0,
        "required": false
    },
    "hoistRight": {
        "default": 0,
        "required": false
    },
    "idMpart": {
        "required": false
    },
    "idRotaryFactor": {
        "required": true
    },
    "mpart": {
        "default": "",
        "required": true
    },
    "noteHours": {
        "default": "",
        "required": false
    },
    "noteRotaryFactor": {
        "default": "",
        "required": false
    },
    "revisionCycle": {
        "default": "",
        "required": false
    },
    "revisionHours": {
        "default": "",
        "required": false
    },
    "rumusCycle": {
        "default": "",
        "required": false
    },
    "rumusHours": {
        "default": "",
        "required": false
    }
};

const AmimsRotaryFactorWidgetFormSchema = {
    "adj1": {
        "default": 0,
        "required": false
    },
    "adj2": {
        "default": 0,
        "required": false
    },
    "adj3": {
        "default": 0,
        "required": false
    },
    "dateCycle": {
        "default": "",
        "required": false
    },
    "dateHours": {
        "default": "",
        "required": false
    },
    "factor1": {
        "default": 0,
        "required": false
    },
    "factor2": {
        "default": 0,
        "required": false
    },
    "factor3": {
        "default": 0,
        "required": false
    },
    "hoistLeft": {
        "default": 0,
        "required": false
    },
    "hoistRight": {
        "default": 0,
        "required": false
    },
    "idMpart": {
        "required": false
    },
    "idRotaryFactor": {
        "required": true
    },
    "noteHours": {
        "default": "",
        "required": false
    },
    "noteRotaryFactor": {
        "default": "",
        "required": false
    },
    "revisionCycle": {
        "default": "",
        "required": false
    },
    "revisionHours": {
        "default": "",
        "required": false
    },
    "rumusCycle": {
        "default": "",
        "required": false
    },
    "rumusHours": {
        "default": "",
        "required": false
    },
    "total": {
        "default": 0,
        "required": false
    }
};

const AmimsRotaryFactorFormSchema = {
    "adj1": {
        "default": 0,
        "required": false
    },
    "adj2": {
        "default": 0,
        "required": false
    },
    "adj3": {
        "default": 0,
        "required": false
    },
    "dateCycle": {
        "default": "",
        "required": false
    },
    "dateHours": {
        "default": "",
        "required": false
    },
    "factor1": {
        "default": 0,
        "required": false
    },
    "factor2": {
        "default": 0,
        "required": false
    },
    "factor3": {
        "default": 0,
        "required": false
    },
    "hoistLeft": {
        "default": 0,
        "required": false
    },
    "hoistRight": {
        "default": 0,
        "required": false
    },
    "idMpart": {
        "required": false
    },
    "idRotaryFactor": {
        "required": true
    },
    "noteHours": {
        "default": "",
        "required": false
    },
    "noteRotaryFactor": {
        "default": "",
        "required": false
    },
    "revisionCycle": {
        "default": "",
        "required": false
    },
    "revisionHours": {
        "default": "",
        "required": false
    },
    "rumusCycle": {
        "default": "",
        "required": false
    },
    "rumusHours": {
        "default": "",
        "required": false
    }
};

const AmimsShippingReportFormSchema = {
    "createdAt": {
        "default": "",
        "required": false
    },
    "idShipping": {
        "required": true
    },
    "line0": {
        "default": "",
        "required": false
    },
    "line1": {
        "default": "",
        "required": false
    },
    "line2": {
        "default": "",
        "required": false
    },
    "line3": {
        "default": "",
        "required": false
    },
    "line4": {
        "default": "",
        "required": false
    },
    "line5": {
        "default": "",
        "required": false
    },
    "line6": {
        "default": "",
        "required": false
    },
    "line7": {
        "default": "",
        "required": false
    },
    "line8": {
        "default": "",
        "required": false
    },
    "statusShipping": {
        "default": "",
        "required": false
    },
    "updatedAt": {
        "default": "",
        "required": false
    }
};

const AmimsShippingWidgetFormSchema = {
    "createdAt": {
        "default": "",
        "required": false
    },
    "idShipping": {
        "required": true
    },
    "line0": {
        "default": "",
        "required": false
    },
    "line1": {
        "default": "",
        "required": false
    },
    "line2": {
        "default": "",
        "required": false
    },
    "line3": {
        "default": "",
        "required": false
    },
    "line4": {
        "default": "",
        "required": false
    },
    "line5": {
        "default": "",
        "required": false
    },
    "line6": {
        "default": "",
        "required": false
    },
    "line7": {
        "default": "",
        "required": false
    },
    "line8": {
        "default": "",
        "required": false
    },
    "statusShipping": {
        "default": "",
        "required": false
    },
    "total": {
        "default": 0,
        "required": false
    },
    "updatedAt": {
        "default": "",
        "required": false
    }
};

const AmimsShippingFormSchema = {
    "createdAt": {
        "default": "",
        "required": false
    },
    "idShipping": {
        "required": true
    },
    "line0": {
        "default": "",
        "required": false
    },
    "line1": {
        "default": "",
        "required": false
    },
    "line2": {
        "default": "",
        "required": false
    },
    "line3": {
        "default": "",
        "required": false
    },
    "line4": {
        "default": "",
        "required": false
    },
    "line5": {
        "default": "",
        "required": false
    },
    "line6": {
        "default": "",
        "required": false
    },
    "line7": {
        "default": "",
        "required": false
    },
    "line8": {
        "default": "",
        "required": false
    },
    "statusShipping": {
        "default": "",
        "required": false
    },
    "updatedAt": {
        "default": "",
        "required": false
    }
};

const AmimsSiteReportFormSchema = {
    "address": {
        "default": "",
        "required": false
    },
    "city": {
        "default": "",
        "required": false
    },
    "codeSite": {
        "default": "",
        "required": false
    },
    "contactname": {
        "default": "",
        "required": false
    },
    "country": {
        "default": "",
        "required": false
    },
    "createdAt": {
        "default": "",
        "required": false
    },
    "emailaddress": {
        "default": "",
        "required": false
    },
    "fax": {
        "default": "",
        "required": false
    },
    "idNewSite": {
        "required": false
    },
    "idSite": {
        "required": true
    },
    "idUser": {
        "required": false
    },
    "isDeleted": {
        "default": 0,
        "required": false
    },
    "isMain": {
        "default": 0,
        "required": false
    },
    "isStore": {
        "default": "",
        "required": false
    },
    "logoSite": {
        "default": "",
        "required": false
    },
    "mobile": {
        "default": "",
        "required": false
    },
    "oldId": {
        "default": "",
        "required": false
    },
    "parentSite": {
        "default": 0,
        "required": false
    },
    "site": {
        "default": "",
        "required": false
    },
    "statusSite": {
        "default": 0,
        "required": false
    },
    "telephone": {
        "default": "",
        "required": false
    },
    "typeSite": {
        "default": "",
        "required": false
    },
    "updatedAt": {
        "default": "",
        "required": false
    },
    "validation": {
        "default": 0,
        "required": false
    }
};

const AmimsSiteWidgetFormSchema = {
    "address": {
        "default": "",
        "required": false
    },
    "city": {
        "default": "",
        "required": false
    },
    "codeSite": {
        "default": "",
        "required": false
    },
    "contactname": {
        "default": "",
        "required": false
    },
    "country": {
        "default": "",
        "required": false
    },
    "createdAt": {
        "default": "",
        "required": false
    },
    "emailaddress": {
        "default": "",
        "required": false
    },
    "fax": {
        "default": "",
        "required": false
    },
    "idNewSite": {
        "required": false
    },
    "idSite": {
        "required": true
    },
    "idUser": {
        "required": false
    },
    "isDeleted": {
        "default": 0,
        "required": false
    },
    "isMain": {
        "default": 0,
        "required": false
    },
    "isStore": {
        "default": "",
        "required": false
    },
    "logoSite": {
        "default": "",
        "required": false
    },
    "mobile": {
        "default": "",
        "required": false
    },
    "oldId": {
        "default": "",
        "required": false
    },
    "parentSite": {
        "default": 0,
        "required": false
    },
    "site": {
        "default": "",
        "required": false
    },
    "statusSite": {
        "default": 0,
        "required": false
    },
    "telephone": {
        "default": "",
        "required": false
    },
    "total": {
        "default": 0,
        "required": false
    },
    "typeSite": {
        "default": "",
        "required": false
    },
    "updatedAt": {
        "default": "",
        "required": false
    },
    "validation": {
        "default": 0,
        "required": false
    }
};

const AmimsSiteFormSchema = {
    "address": {
        "default": "",
        "required": false
    },
    "city": {
        "default": "",
        "required": false
    },
    "codeSite": {
        "default": "",
        "required": false
    },
    "contactname": {
        "default": "",
        "required": false
    },
    "country": {
        "default": "",
        "required": false
    },
    "createdAt": {
        "default": "",
        "required": false
    },
    "emailaddress": {
        "default": "",
        "required": false
    },
    "fax": {
        "default": "",
        "required": false
    },
    "idNewSite": {
        "required": false
    },
    "idSite": {
        "required": true
    },
    "idUser": {
        "required": false
    },
    "isDeleted": {
        "default": 0,
        "required": false
    },
    "isMain": {
        "default": 0,
        "required": false
    },
    "isStore": {
        "default": "",
        "required": false
    },
    "logoSite": {
        "default": "",
        "required": false
    },
    "mobile": {
        "default": "",
        "required": false
    },
    "oldId": {
        "default": "",
        "required": false
    },
    "parentSite": {
        "default": 0,
        "required": false
    },
    "site": {
        "default": "",
        "required": false
    },
    "statusSite": {
        "default": 0,
        "required": false
    },
    "telephone": {
        "default": "",
        "required": false
    },
    "typeSite": {
        "default": "",
        "required": false
    },
    "updatedAt": {
        "default": "",
        "required": false
    },
    "validation": {
        "default": 0,
        "required": false
    }
};

const AmimsStoreDestroyReportFormSchema = {
    "createdAt": {
        "default": "",
        "required": false
    },
    "dateDestroy": {
        "default": "",
        "required": false
    },
    "idPart": {
        "required": false
    },
    "idSite": {
        "required": false
    },
    "idStoreDestroy": {
        "required": true
    },
    "idUser": {
        "required": false
    },
    "noteDestroy": {
        "default": "",
        "required": false
    },
    "numberDestroy": {
        "default": "",
        "required": false
    },
    "part": {
        "default": "",
        "required": true
    },
    "refRti": {
        "default": "",
        "required": false
    },
    "site": {
        "default": "",
        "required": true
    },
    "updatedAt": {
        "default": "",
        "required": false
    }
};

const AmimsStoreDestroyWidgetFormSchema = {
    "createdAt": {
        "default": "",
        "required": false
    },
    "dateDestroy": {
        "default": "",
        "required": false
    },
    "idPart": {
        "required": false
    },
    "idSite": {
        "required": false
    },
    "idStoreDestroy": {
        "required": true
    },
    "idUser": {
        "required": false
    },
    "noteDestroy": {
        "default": "",
        "required": false
    },
    "numberDestroy": {
        "default": "",
        "required": false
    },
    "refRti": {
        "default": "",
        "required": false
    },
    "total": {
        "default": 0,
        "required": false
    },
    "updatedAt": {
        "default": "",
        "required": false
    }
};

const AmimsStoreDestroyFormSchema = {
    "createdAt": {
        "default": "",
        "required": false
    },
    "dateDestroy": {
        "default": "",
        "required": false
    },
    "idPart": {
        "required": false
    },
    "idSite": {
        "required": false
    },
    "idStoreDestroy": {
        "required": true
    },
    "idUser": {
        "required": false
    },
    "noteDestroy": {
        "default": "",
        "required": false
    },
    "numberDestroy": {
        "default": "",
        "required": false
    },
    "refRti": {
        "default": "",
        "required": false
    },
    "updatedAt": {
        "default": "",
        "required": false
    }
};

const AmimsStoreTransferItemReportFormSchema = {
    "createdAt": {
        "default": "",
        "required": false
    },
    "idEngineerPmtrItem": {
        "required": false
    },
    "idPart": {
        "required": false
    },
    "idStoreTransfer": {
        "required": false
    },
    "idStoreTransferItem": {
        "required": true
    },
    "newBin": {
        "default": "",
        "required": false
    },
    "noteItemTransfer": {
        "default": "",
        "required": false
    },
    "oldIdPart": {
        "default": "",
        "required": false
    },
    "part": {
        "default": "",
        "required": true
    },
    "qtyTransfer": {
        "default": 0,
        "required": false
    },
    "statusItem": {
        "default": "",
        "required": false
    },
    "updatedAt": {
        "default": "",
        "required": false
    }
};

const AmimsStoreTransferItemWidgetFormSchema = {
    "createdAt": {
        "default": "",
        "required": false
    },
    "idEngineerPmtrItem": {
        "required": false
    },
    "idPart": {
        "required": false
    },
    "idStoreTransfer": {
        "required": false
    },
    "idStoreTransferItem": {
        "required": true
    },
    "newBin": {
        "default": "",
        "required": false
    },
    "noteItemTransfer": {
        "default": "",
        "required": false
    },
    "oldIdPart": {
        "default": "",
        "required": false
    },
    "qtyTransfer": {
        "default": 0,
        "required": false
    },
    "statusItem": {
        "default": "",
        "required": false
    },
    "total": {
        "default": 0,
        "required": false
    },
    "updatedAt": {
        "default": "",
        "required": false
    }
};

const AmimsStoreTransferItemFormSchema = {
    "createdAt": {
        "default": "",
        "required": false
    },
    "idEngineerPmtrItem": {
        "required": false
    },
    "idPart": {
        "required": false
    },
    "idStoreTransfer": {
        "required": false
    },
    "idStoreTransferItem": {
        "required": true
    },
    "newBin": {
        "default": "",
        "required": false
    },
    "noteItemTransfer": {
        "default": "",
        "required": false
    },
    "oldIdPart": {
        "default": "",
        "required": false
    },
    "qtyTransfer": {
        "default": 0,
        "required": false
    },
    "statusItem": {
        "default": "",
        "required": false
    },
    "updatedAt": {
        "default": "",
        "required": false
    }
};

const AmimsStoreTransferReportFormSchema = {
    "createdAt": {
        "default": "",
        "required": false
    },
    "dateReceived": {
        "default": "",
        "required": false
    },
    "dateTransfer": {
        "default": "",
        "required": false
    },
    "dimention": {
        "default": "",
        "required": false
    },
    "idEngineerPmtr": {
        "required": false
    },
    "idStoreTransfer": {
        "required": true
    },
    "idUserReceived": {
        "required": false
    },
    "idUserTransfer": {
        "required": false
    },
    "isDeleted": {
        "default": 0,
        "required": false
    },
    "noIndex": {
        "default": 0,
        "required": false
    },
    "noOfBox": {
        "default": "",
        "required": false
    },
    "noteTransfer": {
        "default": "",
        "required": false
    },
    "numberTransfer": {
        "default": "",
        "required": false
    },
    "sheet": {
        "default": "",
        "required": false
    },
    "shippingVia": {
        "default": "",
        "required": false
    },
    "statusTransfer": {
        "default": "",
        "required": false
    },
    "updatedAt": {
        "default": "",
        "required": false
    },
    "validasi": {
        "default": 0,
        "required": false
    },
    "weight": {
        "default": "",
        "required": false
    }
};

const AmimsStoreTransferWidgetFormSchema = {
    "createdAt": {
        "default": "",
        "required": false
    },
    "dateReceived": {
        "default": "",
        "required": false
    },
    "dateTransfer": {
        "default": "",
        "required": false
    },
    "dimention": {
        "default": "",
        "required": false
    },
    "idEngineerPmtr": {
        "required": false
    },
    "idStoreTransfer": {
        "required": true
    },
    "idUserReceived": {
        "required": false
    },
    "idUserTransfer": {
        "required": false
    },
    "isDeleted": {
        "default": 0,
        "required": false
    },
    "noIndex": {
        "default": 0,
        "required": false
    },
    "noOfBox": {
        "default": "",
        "required": false
    },
    "noteTransfer": {
        "default": "",
        "required": false
    },
    "numberTransfer": {
        "default": "",
        "required": false
    },
    "sheet": {
        "default": "",
        "required": false
    },
    "shippingVia": {
        "default": "",
        "required": false
    },
    "statusTransfer": {
        "default": "",
        "required": false
    },
    "total": {
        "default": 0,
        "required": false
    },
    "updatedAt": {
        "default": "",
        "required": false
    },
    "validasi": {
        "default": 0,
        "required": false
    },
    "weight": {
        "default": "",
        "required": false
    }
};

const AmimsStoreTransferFormSchema = {
    "createdAt": {
        "default": "",
        "required": false
    },
    "dateReceived": {
        "default": "",
        "required": false
    },
    "dateTransfer": {
        "default": "",
        "required": false
    },
    "dimention": {
        "default": "",
        "required": false
    },
    "idEngineerPmtr": {
        "required": false
    },
    "idStoreTransfer": {
        "required": true
    },
    "idUserReceived": {
        "required": false
    },
    "idUserTransfer": {
        "required": false
    },
    "isDeleted": {
        "default": 0,
        "required": false
    },
    "noIndex": {
        "default": 0,
        "required": false
    },
    "noOfBox": {
        "default": "",
        "required": false
    },
    "noteTransfer": {
        "default": "",
        "required": false
    },
    "numberTransfer": {
        "default": "",
        "required": false
    },
    "sheet": {
        "default": "",
        "required": false
    },
    "shippingVia": {
        "default": "",
        "required": false
    },
    "statusTransfer": {
        "default": "",
        "required": false
    },
    "updatedAt": {
        "default": "",
        "required": false
    },
    "validasi": {
        "default": 0,
        "required": false
    },
    "weight": {
        "default": "",
        "required": false
    }
};

const AmimsTdDetailAcReportFormSchema = {
    "aircraft": {
        "default": "",
        "required": true
    },
    "complianceC": {
        "default": 0,
        "required": false
    },
    "complianceD": {
        "default": "",
        "required": false
    },
    "complianceH": {
        "default": 0,
        "required": false
    },
    "compliteC": {
        "default": 0,
        "required": false
    },
    "compliteD": {
        "default": "",
        "required": false
    },
    "compliteH": {
        "default": 0,
        "required": false
    },
    "compliteUser": {
        "default": "",
        "required": false
    },
    "engineer": {
        "default": "",
        "required": false
    },
    "idAircraft": {
        "required": false
    },
    "idTdDetail": {
        "required": false
    },
    "idTdDetailAc": {
        "required": true
    },
    "idTechLog": {
        "required": false
    },
    "isActive": {
        "default": "",
        "required": false
    },
    "noteClose": {
        "default": "",
        "required": false
    },
    "noteDetail": {
        "default": "",
        "required": false
    },
    "updatedAt": {
        "default": "",
        "required": false
    }
};

const AmimsTdDetailAcWidgetFormSchema = {
    "complianceC": {
        "default": 0,
        "required": false
    },
    "complianceD": {
        "default": "",
        "required": false
    },
    "complianceH": {
        "default": 0,
        "required": false
    },
    "compliteC": {
        "default": 0,
        "required": false
    },
    "compliteD": {
        "default": "",
        "required": false
    },
    "compliteH": {
        "default": 0,
        "required": false
    },
    "compliteUser": {
        "default": "",
        "required": false
    },
    "engineer": {
        "default": "",
        "required": false
    },
    "idAircraft": {
        "required": false
    },
    "idTdDetail": {
        "required": false
    },
    "idTdDetailAc": {
        "required": true
    },
    "idTechLog": {
        "required": false
    },
    "isActive": {
        "default": "",
        "required": false
    },
    "noteClose": {
        "default": "",
        "required": false
    },
    "noteDetail": {
        "default": "",
        "required": false
    },
    "total": {
        "default": 0,
        "required": false
    },
    "updatedAt": {
        "default": "",
        "required": false
    }
};

const AmimsTdDetailAcFormSchema = {
    "complianceC": {
        "default": 0,
        "required": false
    },
    "complianceD": {
        "default": "",
        "required": false
    },
    "complianceH": {
        "default": 0,
        "required": false
    },
    "compliteC": {
        "default": 0,
        "required": false
    },
    "compliteD": {
        "default": "",
        "required": false
    },
    "compliteH": {
        "default": 0,
        "required": false
    },
    "compliteUser": {
        "default": "",
        "required": false
    },
    "engineer": {
        "default": "",
        "required": false
    },
    "idAircraft": {
        "required": false
    },
    "idTdDetail": {
        "required": false
    },
    "idTdDetailAc": {
        "required": true
    },
    "idTechLog": {
        "required": false
    },
    "isActive": {
        "default": "",
        "required": false
    },
    "noteClose": {
        "default": "",
        "required": false
    },
    "noteDetail": {
        "default": "",
        "required": false
    },
    "updatedAt": {
        "default": "",
        "required": false
    }
};

const AmimsTdDetailReportFormSchema = {
    "actype": {
        "default": "",
        "required": true
    },
    "applicable": {
        "default": "",
        "required": false
    },
    "createdAt": {
        "default": "",
        "required": false
    },
    "dateAcc": {
        "default": "",
        "required": false
    },
    "dateAccQa": {
        "default": "",
        "required": false
    },
    "dateDetail": {
        "default": "",
        "required": false
    },
    "fileDetail": {
        "default": "",
        "required": false
    },
    "idAcc": {
        "required": false
    },
    "idAccQa": {
        "required": false
    },
    "idActype": {
        "required": false
    },
    "idTd": {
        "required": false
    },
    "idTdDetail": {
        "required": true
    },
    "isEngineer": {
        "default": "",
        "required": false
    },
    "isPilot": {
        "default": "",
        "required": false
    },
    "isQc": {
        "default": "",
        "required": false
    },
    "method": {
        "default": "",
        "required": false
    },
    "noteDetail": {
        "default": "",
        "required": false
    },
    "numberDetail": {
        "default": "",
        "required": false
    },
    "priority": {
        "default": "",
        "required": false
    },
    "statusTdDetail": {
        "default": "",
        "required": false
    },
    "subject": {
        "default": "",
        "required": false
    },
    "td": {
        "default": "",
        "required": true
    },
    "typeDetail": {
        "default": "",
        "required": false
    },
    "updatedAt": {
        "default": "",
        "required": false
    },
    "validasi": {
        "default": 0,
        "required": false
    }
};

const AmimsTdDetailWidgetFormSchema = {
    "applicable": {
        "default": "",
        "required": false
    },
    "createdAt": {
        "default": "",
        "required": false
    },
    "dateAcc": {
        "default": "",
        "required": false
    },
    "dateAccQa": {
        "default": "",
        "required": false
    },
    "dateDetail": {
        "default": "",
        "required": false
    },
    "fileDetail": {
        "default": "",
        "required": false
    },
    "idAcc": {
        "required": false
    },
    "idAccQa": {
        "required": false
    },
    "idActype": {
        "required": false
    },
    "idTd": {
        "required": false
    },
    "idTdDetail": {
        "required": true
    },
    "isEngineer": {
        "default": "",
        "required": false
    },
    "isPilot": {
        "default": "",
        "required": false
    },
    "isQc": {
        "default": "",
        "required": false
    },
    "method": {
        "default": "",
        "required": false
    },
    "noteDetail": {
        "default": "",
        "required": false
    },
    "numberDetail": {
        "default": "",
        "required": false
    },
    "priority": {
        "default": "",
        "required": false
    },
    "statusTdDetail": {
        "default": "",
        "required": false
    },
    "subject": {
        "default": "",
        "required": false
    },
    "total": {
        "default": 0,
        "required": false
    },
    "typeDetail": {
        "default": "",
        "required": false
    },
    "updatedAt": {
        "default": "",
        "required": false
    },
    "validasi": {
        "default": 0,
        "required": false
    }
};

const AmimsTdDetailFormSchema = {
    "applicable": {
        "default": "",
        "required": false
    },
    "createdAt": {
        "default": "",
        "required": false
    },
    "dateAcc": {
        "default": "",
        "required": false
    },
    "dateAccQa": {
        "default": "",
        "required": false
    },
    "dateDetail": {
        "default": "",
        "required": false
    },
    "fileDetail": {
        "default": "",
        "required": false
    },
    "idAcc": {
        "required": false
    },
    "idAccQa": {
        "required": false
    },
    "idActype": {
        "required": false
    },
    "idTd": {
        "required": false
    },
    "idTdDetail": {
        "required": true
    },
    "isEngineer": {
        "default": "",
        "required": false
    },
    "isPilot": {
        "default": "",
        "required": false
    },
    "isQc": {
        "default": "",
        "required": false
    },
    "method": {
        "default": "",
        "required": false
    },
    "noteDetail": {
        "default": "",
        "required": false
    },
    "numberDetail": {
        "default": "",
        "required": false
    },
    "priority": {
        "default": "",
        "required": false
    },
    "statusTdDetail": {
        "default": "",
        "required": false
    },
    "subject": {
        "default": "",
        "required": false
    },
    "typeDetail": {
        "default": "",
        "required": false
    },
    "updatedAt": {
        "default": "",
        "required": false
    },
    "validasi": {
        "default": 0,
        "required": false
    }
};

const AmimsTdRefReportFormSchema = {
    "idTd": {
        "required": false
    },
    "idTdLain": {
        "required": false
    },
    "idTdRef": {
        "required": true
    },
    "noTdLain": {
        "default": "",
        "required": false
    },
    "td": {
        "default": "",
        "required": true
    }
};

const AmimsTdRefWidgetFormSchema = {
    "idTd": {
        "required": false
    },
    "idTdLain": {
        "required": false
    },
    "idTdRef": {
        "required": true
    },
    "noTdLain": {
        "default": "",
        "required": false
    },
    "total": {
        "default": 0,
        "required": false
    }
};

const AmimsTdRefFormSchema = {
    "idTd": {
        "required": false
    },
    "idTdLain": {
        "required": false
    },
    "idTdRef": {
        "required": true
    },
    "noTdLain": {
        "default": "",
        "required": false
    }
};

const AmimsTdReportFormSchema = {
    "applicable": {
        "default": "",
        "required": false
    },
    "createdAt": {
        "default": "",
        "required": false
    },
    "docNumber": {
        "default": "",
        "required": false
    },
    "doctype": {
        "default": "",
        "required": true
    },
    "effectiveDate": {
        "default": "",
        "required": false
    },
    "fileTd": {
        "default": "",
        "required": false
    },
    "idDoctype": {
        "required": false
    },
    "idTd": {
        "required": true
    },
    "idUser": {
        "required": false
    },
    "noteDoc": {
        "default": "",
        "required": false
    },
    "oldId": {
        "default": "",
        "required": false
    },
    "rev": {
        "default": "",
        "required": false
    },
    "tdParent": {
        "default": "",
        "required": false
    },
    "title": {
        "default": "",
        "required": false
    },
    "updatedAt": {
        "default": "",
        "required": false
    },
    "validasi": {
        "default": 0,
        "required": false
    }
};

const AmimsTdTypeReportFormSchema = {
    "descriptionTdType": {
        "default": "",
        "required": false
    },
    "idTdType": {
        "required": true
    },
    "tdType": {
        "default": "",
        "required": false
    }
};

const AmimsTdTypeWidgetFormSchema = {
    "descriptionTdType": {
        "default": "",
        "required": false
    },
    "idTdType": {
        "required": true
    },
    "tdType": {
        "default": "",
        "required": false
    },
    "total": {
        "default": 0,
        "required": false
    }
};

const AmimsTdTypeFormSchema = {
    "descriptionTdType": {
        "default": "",
        "required": false
    },
    "idTdType": {
        "required": true
    },
    "tdType": {
        "default": "",
        "required": false
    }
};

const AmimsTdWidgetFormSchema = {
    "applicable": {
        "default": "",
        "required": false
    },
    "createdAt": {
        "default": "",
        "required": false
    },
    "docNumber": {
        "default": "",
        "required": false
    },
    "effectiveDate": {
        "default": "",
        "required": false
    },
    "fileTd": {
        "default": "",
        "required": false
    },
    "idDoctype": {
        "required": false
    },
    "idTd": {
        "required": true
    },
    "idUser": {
        "required": false
    },
    "noteDoc": {
        "default": "",
        "required": false
    },
    "oldId": {
        "default": "",
        "required": false
    },
    "rev": {
        "default": "",
        "required": false
    },
    "tdParent": {
        "default": "",
        "required": false
    },
    "title": {
        "default": "",
        "required": false
    },
    "total": {
        "default": 0,
        "required": false
    },
    "updatedAt": {
        "default": "",
        "required": false
    },
    "validasi": {
        "default": 0,
        "required": false
    }
};

const AmimsTdFormSchema = {
    "applicable": {
        "default": "",
        "required": false
    },
    "createdAt": {
        "default": "",
        "required": false
    },
    "docNumber": {
        "default": "",
        "required": false
    },
    "effectiveDate": {
        "default": "",
        "required": false
    },
    "fileTd": {
        "default": "",
        "required": false
    },
    "idDoctype": {
        "required": false
    },
    "idTd": {
        "required": true
    },
    "idUser": {
        "required": false
    },
    "noteDoc": {
        "default": "",
        "required": false
    },
    "oldId": {
        "default": "",
        "required": false
    },
    "rev": {
        "default": "",
        "required": false
    },
    "tdParent": {
        "default": "",
        "required": false
    },
    "title": {
        "default": "",
        "required": false
    },
    "updatedAt": {
        "default": "",
        "required": false
    },
    "validasi": {
        "default": 0,
        "required": false
    }
};

const AmimsTechDefectReportFormSchema = {
    "aircraft": {
        "default": "",
        "required": true
    },
    "createdAt": {
        "default": "",
        "required": false
    },
    "dateDefect": {
        "default": "",
        "required": false
    },
    "doneCycle": {
        "default": 0,
        "required": false
    },
    "doneDate": {
        "default": "",
        "required": false
    },
    "doneHours": {
        "default": 0,
        "required": false
    },
    "idAircraft": {
        "required": false
    },
    "idEngineerRti": {
        "required": false
    },
    "idPart": {
        "required": false
    },
    "idPartInstall": {
        "required": false
    },
    "idTechDefect": {
        "required": true
    },
    "idTechLog": {
        "required": false
    },
    "noteDefect": {
        "default": "",
        "required": false
    },
    "part": {
        "default": "",
        "required": true
    },
    "statusDefect": {
        "default": "",
        "required": false
    },
    "updatedAt": {
        "default": "",
        "required": false
    },
    "userSign": {
        "default": "",
        "required": false
    }
};

const AmimsTechDefectWidgetFormSchema = {
    "createdAt": {
        "default": "",
        "required": false
    },
    "dateDefect": {
        "default": "",
        "required": false
    },
    "doneCycle": {
        "default": 0,
        "required": false
    },
    "doneDate": {
        "default": "",
        "required": false
    },
    "doneHours": {
        "default": 0,
        "required": false
    },
    "idAircraft": {
        "required": false
    },
    "idEngineerRti": {
        "required": false
    },
    "idPart": {
        "required": false
    },
    "idPartInstall": {
        "required": false
    },
    "idTechDefect": {
        "required": true
    },
    "idTechLog": {
        "required": false
    },
    "noteDefect": {
        "default": "",
        "required": false
    },
    "statusDefect": {
        "default": "",
        "required": false
    },
    "total": {
        "default": 0,
        "required": false
    },
    "updatedAt": {
        "default": "",
        "required": false
    },
    "userSign": {
        "default": "",
        "required": false
    }
};

const AmimsTechDefectFormSchema = {
    "createdAt": {
        "default": "",
        "required": false
    },
    "dateDefect": {
        "default": "",
        "required": false
    },
    "doneCycle": {
        "default": 0,
        "required": false
    },
    "doneDate": {
        "default": "",
        "required": false
    },
    "doneHours": {
        "default": 0,
        "required": false
    },
    "idAircraft": {
        "required": false
    },
    "idEngineerRti": {
        "required": false
    },
    "idPart": {
        "required": false
    },
    "idPartInstall": {
        "required": false
    },
    "idTechDefect": {
        "required": true
    },
    "idTechLog": {
        "required": false
    },
    "noteDefect": {
        "default": "",
        "required": false
    },
    "statusDefect": {
        "default": "",
        "required": false
    },
    "updatedAt": {
        "default": "",
        "required": false
    },
    "userSign": {
        "default": "",
        "required": false
    }
};

const AmimsTechDiscrepanciesReportFormSchema = {
    "createdAt": {
        "default": "",
        "required": false
    },
    "dateDiscrepancies": {
        "default": "",
        "required": false
    },
    "idPart": {
        "required": false
    },
    "idTechDiscrepancies": {
        "required": true
    },
    "idTechLog": {
        "required": false
    },
    "isDiscrepancies": {
        "default": "",
        "required": false
    },
    "noteDiscrepancies": {
        "default": "",
        "required": false
    },
    "part": {
        "default": "",
        "required": true
    },
    "updatedAt": {
        "default": "",
        "required": false
    }
};

const AmimsTechDiscrepanciesWidgetFormSchema = {
    "createdAt": {
        "default": "",
        "required": false
    },
    "dateDiscrepancies": {
        "default": "",
        "required": false
    },
    "idPart": {
        "required": false
    },
    "idTechDiscrepancies": {
        "required": true
    },
    "idTechLog": {
        "required": false
    },
    "isDiscrepancies": {
        "default": "",
        "required": false
    },
    "noteDiscrepancies": {
        "default": "",
        "required": false
    },
    "total": {
        "default": 0,
        "required": false
    },
    "updatedAt": {
        "default": "",
        "required": false
    }
};

const AmimsTechDiscrepanciesFormSchema = {
    "createdAt": {
        "default": "",
        "required": false
    },
    "dateDiscrepancies": {
        "default": "",
        "required": false
    },
    "idPart": {
        "required": false
    },
    "idTechDiscrepancies": {
        "required": true
    },
    "idTechLog": {
        "required": false
    },
    "isDiscrepancies": {
        "default": "",
        "required": false
    },
    "noteDiscrepancies": {
        "default": "",
        "required": false
    },
    "updatedAt": {
        "default": "",
        "required": false
    }
};

const AmimsTechLogEngineCheckReportFormSchema = {
    "alt": {
        "default": 0,
        "required": false
    },
    "idTechLog": {
        "required": false
    },
    "idTechLogEngine": {
        "required": false
    },
    "idTechLogEngineCheck": {
        "required": true
    },
    "itt": {
        "default": 0,
        "required": false
    },
    "n1": {
        "default": 0,
        "required": false
    },
    "n2": {
        "default": 0,
        "required": false
    },
    "nr": {
        "default": 0,
        "required": false
    },
    "oat": {
        "default": 0,
        "required": false
    },
    "oilPress": {
        "default": 0,
        "required": false
    },
    "oilTemp": {
        "default": 0,
        "required": false
    },
    "powerMargin": {
        "default": 0,
        "required": false
    },
    "speed": {
        "default": 0,
        "required": false
    },
    "t5": {
        "default": 0,
        "required": false
    },
    "torque": {
        "default": 0,
        "required": false
    }
};

const AmimsTechLogEngineCheckWidgetFormSchema = {
    "alt": {
        "default": 0,
        "required": false
    },
    "idTechLog": {
        "required": false
    },
    "idTechLogEngine": {
        "required": false
    },
    "idTechLogEngineCheck": {
        "required": true
    },
    "itt": {
        "default": 0,
        "required": false
    },
    "n1": {
        "default": 0,
        "required": false
    },
    "n2": {
        "default": 0,
        "required": false
    },
    "nr": {
        "default": 0,
        "required": false
    },
    "oat": {
        "default": 0,
        "required": false
    },
    "oilPress": {
        "default": 0,
        "required": false
    },
    "oilTemp": {
        "default": 0,
        "required": false
    },
    "powerMargin": {
        "default": 0,
        "required": false
    },
    "speed": {
        "default": 0,
        "required": false
    },
    "t5": {
        "default": 0,
        "required": false
    },
    "torque": {
        "default": 0,
        "required": false
    },
    "total": {
        "default": 0,
        "required": false
    }
};

const AmimsTechLogEngineCheckFormSchema = {
    "alt": {
        "default": 0,
        "required": false
    },
    "idTechLog": {
        "required": false
    },
    "idTechLogEngine": {
        "required": false
    },
    "idTechLogEngineCheck": {
        "required": true
    },
    "itt": {
        "default": 0,
        "required": false
    },
    "n1": {
        "default": 0,
        "required": false
    },
    "n2": {
        "default": 0,
        "required": false
    },
    "nr": {
        "default": 0,
        "required": false
    },
    "oat": {
        "default": 0,
        "required": false
    },
    "oilPress": {
        "default": 0,
        "required": false
    },
    "oilTemp": {
        "default": 0,
        "required": false
    },
    "powerMargin": {
        "default": 0,
        "required": false
    },
    "speed": {
        "default": 0,
        "required": false
    },
    "t5": {
        "default": 0,
        "required": false
    },
    "torque": {
        "default": 0,
        "required": false
    }
};

const AmimsTechLogEngineReportFormSchema = {
    "cycleBf": {
        "default": 0,
        "required": false
    },
    "cycleCf": {
        "default": 0,
        "required": false
    },
    "cycleFlight": {
        "default": 0,
        "required": false
    },
    "fullCycleBf": {
        "default": 0,
        "required": false
    },
    "fullCycleFlt": {
        "default": 0,
        "required": false
    },
    "hoursBf": {
        "default": 0,
        "required": false
    },
    "hoursCf": {
        "default": 0,
        "required": false
    },
    "hoursFlight": {
        "default": 0,
        "required": false
    },
    "idPart": {
        "required": false
    },
    "idTechLog": {
        "required": false
    },
    "idTechLogEngine": {
        "required": true
    },
    "n1": {
        "default": 0,
        "required": false
    },
    "n2": {
        "default": 0,
        "required": false
    },
    "oil": {
        "default": "",
        "required": false
    },
    "oilAdd": {
        "default": 0,
        "required": false
    },
    "oilTotal": {
        "default": 0,
        "required": false
    },
    "oldId": {
        "default": "",
        "required": false
    },
    "part": {
        "default": "",
        "required": true
    },
    "partCycleBf": {
        "default": 0,
        "required": false
    },
    "partCycleFlt": {
        "default": 0,
        "required": false
    },
    "sn": {
        "default": "",
        "required": false
    },
    "timeAboveBf": {
        "default": 0,
        "required": false
    },
    "timeAboveFlt": {
        "default": 0,
        "required": false
    },
    "validasi": {
        "default": 0,
        "required": false
    }
};

const AmimsTechLogEngineWidgetFormSchema = {
    "cycleBf": {
        "default": 0,
        "required": false
    },
    "cycleCf": {
        "default": 0,
        "required": false
    },
    "cycleFlight": {
        "default": 0,
        "required": false
    },
    "fullCycleBf": {
        "default": 0,
        "required": false
    },
    "fullCycleFlt": {
        "default": 0,
        "required": false
    },
    "hoursBf": {
        "default": 0,
        "required": false
    },
    "hoursCf": {
        "default": 0,
        "required": false
    },
    "hoursFlight": {
        "default": 0,
        "required": false
    },
    "idPart": {
        "required": false
    },
    "idTechLog": {
        "required": false
    },
    "idTechLogEngine": {
        "required": true
    },
    "n1": {
        "default": 0,
        "required": false
    },
    "n2": {
        "default": 0,
        "required": false
    },
    "oil": {
        "default": "",
        "required": false
    },
    "oilAdd": {
        "default": 0,
        "required": false
    },
    "oilTotal": {
        "default": 0,
        "required": false
    },
    "oldId": {
        "default": "",
        "required": false
    },
    "partCycleBf": {
        "default": 0,
        "required": false
    },
    "partCycleFlt": {
        "default": 0,
        "required": false
    },
    "sn": {
        "default": "",
        "required": false
    },
    "timeAboveBf": {
        "default": 0,
        "required": false
    },
    "timeAboveFlt": {
        "default": 0,
        "required": false
    },
    "total": {
        "default": 0,
        "required": false
    },
    "validasi": {
        "default": 0,
        "required": false
    }
};

const AmimsTechLogEngineFormSchema = {
    "cycleBf": {
        "default": 0,
        "required": false
    },
    "cycleCf": {
        "default": 0,
        "required": false
    },
    "cycleFlight": {
        "default": 0,
        "required": false
    },
    "fullCycleBf": {
        "default": 0,
        "required": false
    },
    "fullCycleFlt": {
        "default": 0,
        "required": false
    },
    "hoursBf": {
        "default": 0,
        "required": false
    },
    "hoursCf": {
        "default": 0,
        "required": false
    },
    "hoursFlight": {
        "default": 0,
        "required": false
    },
    "idPart": {
        "required": false
    },
    "idTechLog": {
        "required": false
    },
    "idTechLogEngine": {
        "required": true
    },
    "n1": {
        "default": 0,
        "required": false
    },
    "n2": {
        "default": 0,
        "required": false
    },
    "oil": {
        "default": "",
        "required": false
    },
    "oilAdd": {
        "default": 0,
        "required": false
    },
    "oilTotal": {
        "default": 0,
        "required": false
    },
    "oldId": {
        "default": "",
        "required": false
    },
    "partCycleBf": {
        "default": 0,
        "required": false
    },
    "partCycleFlt": {
        "default": 0,
        "required": false
    },
    "sn": {
        "default": "",
        "required": false
    },
    "timeAboveBf": {
        "default": 0,
        "required": false
    },
    "timeAboveFlt": {
        "default": 0,
        "required": false
    },
    "validasi": {
        "default": 0,
        "required": false
    }
};

const AmimsTechLogItemReportFormSchema = {
    "apuStart": {
        "default": 0,
        "required": false
    },
    "cgPenalty": {
        "default": "",
        "required": false
    },
    "cocaCaptain": {
        "default": "",
        "required": false
    },
    "cycles": {
        "default": 0,
        "required": false
    },
    "flightFrom": {
        "default": "",
        "required": false
    },
    "flightHours": {
        "default": 0,
        "required": false
    },
    "flightTo": {
        "default": "",
        "required": false
    },
    "hoistOperation": {
        "default": "",
        "required": false
    },
    "hoistUsage": {
        "default": 0,
        "required": false
    },
    "idCaptain": {
        "required": false
    },
    "idTechLog": {
        "required": false
    },
    "idTechLogItem": {
        "required": true
    },
    "landingTime": {
        "default": "",
        "required": false
    },
    "landings": {
        "default": 0,
        "required": false
    },
    "noteTechLogItem": {
        "default": "",
        "required": false
    },
    "slingReleased": {
        "default": 0,
        "required": false
    },
    "takeofTime": {
        "default": "",
        "required": false
    }
};

const AmimsTechLogItemWidgetFormSchema = {
    "apuStart": {
        "default": 0,
        "required": false
    },
    "cgPenalty": {
        "default": "",
        "required": false
    },
    "cocaCaptain": {
        "default": "",
        "required": false
    },
    "cycles": {
        "default": 0,
        "required": false
    },
    "flightFrom": {
        "default": "",
        "required": false
    },
    "flightHours": {
        "default": 0,
        "required": false
    },
    "flightTo": {
        "default": "",
        "required": false
    },
    "hoistOperation": {
        "default": "",
        "required": false
    },
    "hoistUsage": {
        "default": 0,
        "required": false
    },
    "idCaptain": {
        "required": false
    },
    "idTechLog": {
        "required": false
    },
    "idTechLogItem": {
        "required": true
    },
    "landingTime": {
        "default": "",
        "required": false
    },
    "landings": {
        "default": 0,
        "required": false
    },
    "noteTechLogItem": {
        "default": "",
        "required": false
    },
    "slingReleased": {
        "default": 0,
        "required": false
    },
    "takeofTime": {
        "default": "",
        "required": false
    },
    "total": {
        "default": 0,
        "required": false
    }
};

const AmimsTechLogItemFormSchema = {
    "apuStart": {
        "default": 0,
        "required": false
    },
    "cgPenalty": {
        "default": "",
        "required": false
    },
    "cocaCaptain": {
        "default": "",
        "required": false
    },
    "cycles": {
        "default": 0,
        "required": false
    },
    "flightFrom": {
        "default": "",
        "required": false
    },
    "flightHours": {
        "default": 0,
        "required": false
    },
    "flightTo": {
        "default": "",
        "required": false
    },
    "hoistOperation": {
        "default": "",
        "required": false
    },
    "hoistUsage": {
        "default": 0,
        "required": false
    },
    "idCaptain": {
        "required": false
    },
    "idTechLog": {
        "required": false
    },
    "idTechLogItem": {
        "required": true
    },
    "landingTime": {
        "default": "",
        "required": false
    },
    "landings": {
        "default": 0,
        "required": false
    },
    "noteTechLogItem": {
        "default": "",
        "required": false
    },
    "slingReleased": {
        "default": 0,
        "required": false
    },
    "takeofTime": {
        "default": "",
        "required": false
    }
};

const AmimsTechLogJoReportFormSchema = {
    "createdAt": {
        "default": "",
        "required": false
    },
    "dateClose": {
        "default": "",
        "required": false
    },
    "idMpcJo": {
        "required": false
    },
    "idPart": {
        "required": false
    },
    "idTechLog": {
        "required": false
    },
    "idTechLogClose": {
        "required": false
    },
    "idTechLogJo": {
        "required": true
    },
    "isContinue": {
        "default": "",
        "required": false
    },
    "part": {
        "default": "",
        "required": true
    },
    "timeClose": {
        "default": "",
        "required": false
    },
    "updatedAt": {
        "default": "",
        "required": false
    }
};

const AmimsTechLogJoWidgetFormSchema = {
    "createdAt": {
        "default": "",
        "required": false
    },
    "dateClose": {
        "default": "",
        "required": false
    },
    "idMpcJo": {
        "required": false
    },
    "idPart": {
        "required": false
    },
    "idTechLog": {
        "required": false
    },
    "idTechLogClose": {
        "required": false
    },
    "idTechLogJo": {
        "required": true
    },
    "isContinue": {
        "default": "",
        "required": false
    },
    "timeClose": {
        "default": "",
        "required": false
    },
    "total": {
        "default": 0,
        "required": false
    },
    "updatedAt": {
        "default": "",
        "required": false
    }
};

const AmimsTechLogJoFormSchema = {
    "createdAt": {
        "default": "",
        "required": false
    },
    "dateClose": {
        "default": "",
        "required": false
    },
    "idMpcJo": {
        "required": false
    },
    "idPart": {
        "required": false
    },
    "idTechLog": {
        "required": false
    },
    "idTechLogClose": {
        "required": false
    },
    "idTechLogJo": {
        "required": true
    },
    "isContinue": {
        "default": "",
        "required": false
    },
    "timeClose": {
        "default": "",
        "required": false
    },
    "updatedAt": {
        "default": "",
        "required": false
    }
};

const AmimsTechLogReportFormSchema = {
    "aircraft": {
        "default": "",
        "required": true
    },
    "authoRized": {
        "default": 0,
        "required": false
    },
    "createdAt": {
        "default": "",
        "required": false
    },
    "cycleBf": {
        "default": 0,
        "required": false
    },
    "cycleCf": {
        "default": 0,
        "required": false
    },
    "cycleFlight": {
        "default": 0,
        "required": false
    },
    "dateInspection": {
        "default": "",
        "required": false
    },
    "hoursBf": {
        "default": 0,
        "required": false
    },
    "hoursCf": {
        "default": 0,
        "required": false
    },
    "hoursFlight": {
        "default": 0,
        "required": false
    },
    "idAircraft": {
        "required": false
    },
    "idTechLog": {
        "required": true
    },
    "idUserAcc": {
        "required": false
    },
    "idUserInspection": {
        "required": false
    },
    "idUserLog": {
        "required": false
    },
    "isDeleted": {
        "default": 0,
        "required": false
    },
    "isEdit": {
        "default": 0,
        "required": false
    },
    "lastUpdate": {
        "default": 0,
        "required": false
    },
    "noteLog": {
        "default": "",
        "required": false
    },
    "numberLog": {
        "default": "",
        "required": false
    },
    "numberNext": {
        "default": 0,
        "required": false
    },
    "oldId": {
        "default": "",
        "required": false
    },
    "pesan": {
        "default": "",
        "required": false
    },
    "place": {
        "default": 0,
        "required": false
    },
    "techLogDate": {
        "default": "",
        "required": false
    },
    "totalCycle": {
        "default": 0,
        "required": false
    },
    "totalFlight": {
        "default": 0,
        "required": false
    },
    "totalFuel": {
        "default": 0,
        "required": false
    },
    "updatedAt": {
        "default": "",
        "required": false
    },
    "validasi": {
        "default": 0,
        "required": false
    },
    "xycleInput": {
        "default": 0,
        "required": false
    }
};

const AmimsTechLogWidgetFormSchema = {
    "authoRized": {
        "default": 0,
        "required": false
    },
    "createdAt": {
        "default": "",
        "required": false
    },
    "cycleBf": {
        "default": 0,
        "required": false
    },
    "cycleCf": {
        "default": 0,
        "required": false
    },
    "cycleFlight": {
        "default": 0,
        "required": false
    },
    "dateInspection": {
        "default": "",
        "required": false
    },
    "hoursBf": {
        "default": 0,
        "required": false
    },
    "hoursCf": {
        "default": 0,
        "required": false
    },
    "hoursFlight": {
        "default": 0,
        "required": false
    },
    "idAircraft": {
        "required": false
    },
    "idTechLog": {
        "required": true
    },
    "idUserAcc": {
        "required": false
    },
    "idUserInspection": {
        "required": false
    },
    "idUserLog": {
        "required": false
    },
    "isDeleted": {
        "default": 0,
        "required": false
    },
    "isEdit": {
        "default": 0,
        "required": false
    },
    "lastUpdate": {
        "default": 0,
        "required": false
    },
    "noteLog": {
        "default": "",
        "required": false
    },
    "numberLog": {
        "default": "",
        "required": false
    },
    "numberNext": {
        "default": 0,
        "required": false
    },
    "oldId": {
        "default": "",
        "required": false
    },
    "pesan": {
        "default": "",
        "required": false
    },
    "place": {
        "default": 0,
        "required": false
    },
    "techLogDate": {
        "default": "",
        "required": false
    },
    "total": {
        "default": 0,
        "required": false
    },
    "totalCycle": {
        "default": 0,
        "required": false
    },
    "totalFlight": {
        "default": 0,
        "required": false
    },
    "totalFuel": {
        "default": 0,
        "required": false
    },
    "updatedAt": {
        "default": "",
        "required": false
    },
    "validasi": {
        "default": 0,
        "required": false
    },
    "xycleInput": {
        "default": 0,
        "required": false
    }
};

const AmimsTechLogFormSchema = {
    "authoRized": {
        "default": 0,
        "required": false
    },
    "createdAt": {
        "default": "",
        "required": false
    },
    "cycleBf": {
        "default": 0,
        "required": false
    },
    "cycleCf": {
        "default": 0,
        "required": false
    },
    "cycleFlight": {
        "default": 0,
        "required": false
    },
    "dateInspection": {
        "default": "",
        "required": false
    },
    "hoursBf": {
        "default": 0,
        "required": false
    },
    "hoursCf": {
        "default": 0,
        "required": false
    },
    "hoursFlight": {
        "default": 0,
        "required": false
    },
    "idAircraft": {
        "required": false
    },
    "idTechLog": {
        "required": true
    },
    "idUserAcc": {
        "required": false
    },
    "idUserInspection": {
        "required": false
    },
    "idUserLog": {
        "required": false
    },
    "isDeleted": {
        "default": 0,
        "required": false
    },
    "isEdit": {
        "default": 0,
        "required": false
    },
    "lastUpdate": {
        "default": 0,
        "required": false
    },
    "noteLog": {
        "default": "",
        "required": false
    },
    "numberLog": {
        "default": "",
        "required": false
    },
    "numberNext": {
        "default": 0,
        "required": false
    },
    "oldId": {
        "default": "",
        "required": false
    },
    "pesan": {
        "default": "",
        "required": false
    },
    "place": {
        "default": 0,
        "required": false
    },
    "techLogDate": {
        "default": "",
        "required": false
    },
    "totalCycle": {
        "default": 0,
        "required": false
    },
    "totalFlight": {
        "default": 0,
        "required": false
    },
    "totalFuel": {
        "default": 0,
        "required": false
    },
    "updatedAt": {
        "default": "",
        "required": false
    },
    "validasi": {
        "default": 0,
        "required": false
    },
    "xycleInput": {
        "default": 0,
        "required": false
    }
};

const AmimsTypeOfworkReportFormSchema = {
    "childnameTypeOfwork": {
        "default": "",
        "required": false
    },
    "code": {
        "default": "",
        "required": false
    },
    "idTypeOfwork": {
        "required": true
    },
    "isDeleted": {
        "default": 0,
        "required": false
    },
    "typeOfwork": {
        "default": "",
        "required": false
    }
};

const AmimsTypeOfworkWidgetFormSchema = {
    "childnameTypeOfwork": {
        "default": "",
        "required": false
    },
    "code": {
        "default": "",
        "required": false
    },
    "idTypeOfwork": {
        "required": true
    },
    "isDeleted": {
        "default": 0,
        "required": false
    },
    "total": {
        "default": 0,
        "required": false
    },
    "typeOfwork": {
        "default": "",
        "required": false
    }
};

const AmimsTypeOfworkFormSchema = {
    "childnameTypeOfwork": {
        "default": "",
        "required": false
    },
    "code": {
        "default": "",
        "required": false
    },
    "idTypeOfwork": {
        "required": true
    },
    "isDeleted": {
        "default": 0,
        "required": false
    },
    "typeOfwork": {
        "default": "",
        "required": false
    }
};

const AmimsWarrantyFormSchema = {
    "createdAt": {
        "default": "",
        "required": false
    },
    "cycle": {
        "default": 0,
        "required": false
    },
    "days": {
        "default": 0,
        "required": false
    },
    "effectiveDate": {
        "default": "",
        "required": false
    },
    "expairedDate": {
        "default": "",
        "required": false
    },
    "hours": {
        "default": 0,
        "required": false
    },
    "idPart": {
        "required": false
    },
    "idVendor": {
        "required": false
    },
    "idWarranty": {
        "required": true
    },
    "note": {
        "default": "",
        "required": false
    },
    "type": {
        "default": "",
        "required": false
    },
    "updatedAt": {
        "default": "",
        "required": false
    }
};

const AuthResponseFormSchema = {
    "access_token": {
        "default": "",
        "required": true
    },
    "refresh_token": {
        "default": "",
        "required": true
    },
    "user": {
        "default": "",
        "required": true
    }
};

const BaseWidgetQueryFormSchema = {
    "filter": {
        "default": "",
        "required": false
    },
    "groupBy": {
        "default": "",
        "required": false
    },
    "joinWhere": {
        "default": "",
        "required": false
    },
    "select": {
        "default": "",
        "required": false
    },
    "sortKey": {
        "default": "",
        "required": false
    },
    "sortValue": {
        "default": "",
        "required": false
    }
};

const CurrentUserResponseFormSchema = {
    "pegawai": {
        "default": "",
        "required": true
    },
    "role": {
        "default": "",
        "required": true
    },
    "user": {
        "default": "",
        "required": true
    }
};

const DocumentDocumentFormSchema = {
    "createdAt": {
        "default": "",
        "required": false
    },
    "enableDownload": {
        "default": "",
        "required": false
    },
    "fileExt": {
        "default": "",
        "required": false
    },
    "fileLocation": {
        "default": "",
        "required": false
    },
    "fileName": {
        "default": "",
        "required": false
    },
    "forModule": {
        "default": "",
        "required": false
    },
    "forModuleId": {
        "default": "",
        "required": false
    },
    "forTable": {
        "default": "",
        "required": false
    },
    "idDocument": {
        "required": true
    },
    "idUsers": {
        "required": false
    },
    "name": {
        "default": "",
        "required": false
    },
    "nomor": {
        "default": "",
        "required": false
    },
    "revisi": {
        "default": "",
        "required": false
    },
    "tanggal": {
        "default": "",
        "required": false
    },
    "updatedAt": {
        "default": "",
        "required": false
    }
};

const DocumentFormSchema = {
    "createdAt": {
        "default": "",
        "required": false
    },
    "enableDownload": {
        "default": "",
        "required": false
    },
    "fileExt": {
        "default": "",
        "required": false
    },
    "fileLocation": {
        "default": "",
        "required": false
    },
    "fileName": {
        "default": "",
        "required": false
    },
    "forModule": {
        "default": "",
        "required": false
    },
    "forModuleId": {
        "default": "",
        "required": false
    },
    "forTable": {
        "default": "",
        "required": false
    },
    "idDocument": {
        "required": true
    },
    "idUser": {
        "default": 0,
        "required": false
    },
    "name": {
        "default": "",
        "required": false
    },
    "nomor": {
        "default": "",
        "required": false
    },
    "revisi": {
        "default": "",
        "required": false
    },
    "tanggal": {
        "default": "",
        "required": false
    },
    "updatedAt": {
        "default": "",
        "required": false
    }
};

const LoginFormSchema = {
    "email": {
        "default": "",
        "required": true
    },
    "password": {
        "default": "",
        "required": true
    }
};

const PelangganClientContactReportFormSchema = {
    "catatan": {
        "default": "",
        "required": false
    },
    "client": {
        "default": "",
        "required": true
    },
    "createdAt": {
        "default": "",
        "required": false
    },
    "divisi": {
        "default": "",
        "required": false
    },
    "email": {
        "default": "",
        "required": false
    },
    "idClient": {
        "required": true
    },
    "idClientContact": {
        "required": true
    },
    "isPrimary": {
        "default": false,
        "required": false
    },
    "jabatan": {
        "default": "",
        "required": false
    },
    "jenisContact": {
        "default": "",
        "required": false
    },
    "namaContact": {
        "default": "",
        "required": false
    },
    "telepon": {
        "default": "",
        "required": false
    },
    "updatedAt": {
        "default": "",
        "required": false
    }
};

const PelangganClientContactWidgetFormSchema = {
    "catatan": {
        "default": "",
        "required": false
    },
    "createdAt": {
        "default": "",
        "required": false
    },
    "divisi": {
        "default": "",
        "required": false
    },
    "email": {
        "default": "",
        "required": false
    },
    "idClient": {
        "required": true
    },
    "idClientContact": {
        "required": true
    },
    "isPrimary": {
        "default": false,
        "required": false
    },
    "jabatan": {
        "default": "",
        "required": false
    },
    "jenisContact": {
        "default": "",
        "required": false
    },
    "namaContact": {
        "default": "",
        "required": false
    },
    "telepon": {
        "default": "",
        "required": false
    },
    "total": {
        "default": 0,
        "required": false
    },
    "updatedAt": {
        "default": "",
        "required": false
    }
};

const PelangganClientContactFormSchema = {
    "catatan": {
        "default": "",
        "required": false
    },
    "createdAt": {
        "default": "",
        "required": false
    },
    "divisi": {
        "default": "",
        "required": false
    },
    "email": {
        "default": "",
        "required": false
    },
    "idClient": {
        "required": true
    },
    "idClientContact": {
        "required": true
    },
    "isPrimary": {
        "default": false,
        "required": false
    },
    "jabatan": {
        "default": "",
        "required": false
    },
    "jenisContact": {
        "default": "",
        "required": false
    },
    "namaContact": {
        "default": "",
        "required": false
    },
    "telepon": {
        "default": "",
        "required": false
    },
    "updatedAt": {
        "default": "",
        "required": false
    }
};

const PelangganClientReportFormSchema = {
    "alamat": {
        "default": "",
        "required": false
    },
    "catatan": {
        "default": "",
        "required": false
    },
    "createdAt": {
        "default": "",
        "required": false
    },
    "emailPerusahaan": {
        "default": "",
        "required": false
    },
    "idClient": {
        "required": true
    },
    "isAktif": {
        "default": false,
        "required": false
    },
    "jenisClient": {
        "default": "",
        "required": false
    },
    "kodeClient": {
        "default": "",
        "required": false
    },
    "kodePos": {
        "default": "",
        "required": false
    },
    "kota": {
        "default": "",
        "required": false
    },
    "logoUrl": {
        "default": "",
        "required": false
    },
    "namaFamiliar": {
        "default": "",
        "required": false
    },
    "namaResmi": {
        "default": "",
        "required": true
    },
    "npwp": {
        "default": "",
        "required": false
    },
    "primaryPic": {
        "default": "",
        "required": false
    },
    "provinsi": {
        "default": "",
        "required": false
    },
    "telepon": {
        "default": "",
        "required": false
    },
    "updatedAt": {
        "default": "",
        "required": false
    },
    "website": {
        "default": "",
        "required": false
    }
};

const PelangganClientSiteReportFormSchema = {
    "alamat": {
        "default": "",
        "required": false
    },
    "catatan": {
        "default": "",
        "required": false
    },
    "client": {
        "default": "",
        "required": true
    },
    "createdAt": {
        "default": "",
        "required": false
    },
    "idClient": {
        "required": true
    },
    "idClientSite": {
        "required": true
    },
    "idKantor": {
        "required": false
    },
    "isAktif": {
        "default": false,
        "required": false
    },
    "kantor": {
        "default": "",
        "required": true
    },
    "kategoriSite": {
        "default": "",
        "required": false
    },
    "kodePos": {
        "default": "",
        "required": false
    },
    "kota": {
        "default": "",
        "required": false
    },
    "latitude": {
        "default": 0,
        "required": false
    },
    "longitude": {
        "default": 0,
        "required": false
    },
    "namaSite": {
        "default": "",
        "required": false
    },
    "provinsi": {
        "default": "",
        "required": false
    },
    "tagSite": {
        "default": "",
        "required": false
    },
    "updatedAt": {
        "default": "",
        "required": false
    }
};

const PelangganClientSiteWidgetFormSchema = {
    "alamat": {
        "default": "",
        "required": false
    },
    "catatan": {
        "default": "",
        "required": false
    },
    "createdAt": {
        "default": "",
        "required": false
    },
    "idClient": {
        "required": true
    },
    "idClientSite": {
        "required": true
    },
    "idKantor": {
        "required": false
    },
    "isAktif": {
        "default": false,
        "required": false
    },
    "kategoriSite": {
        "default": "",
        "required": false
    },
    "kodePos": {
        "default": "",
        "required": false
    },
    "kota": {
        "default": "",
        "required": false
    },
    "latitude": {
        "default": 0,
        "required": false
    },
    "longitude": {
        "default": 0,
        "required": false
    },
    "namaSite": {
        "default": "",
        "required": false
    },
    "provinsi": {
        "default": "",
        "required": false
    },
    "tagSite": {
        "default": "",
        "required": false
    },
    "total": {
        "default": 0,
        "required": false
    },
    "updatedAt": {
        "default": "",
        "required": false
    }
};

const PelangganClientSiteFormSchema = {
    "alamat": {
        "default": "",
        "required": false
    },
    "catatan": {
        "default": "",
        "required": false
    },
    "createdAt": {
        "default": "",
        "required": false
    },
    "idClient": {
        "required": true
    },
    "idClientSite": {
        "required": true
    },
    "idKantor": {
        "required": false
    },
    "isAktif": {
        "default": false,
        "required": false
    },
    "kategoriSite": {
        "default": "",
        "required": false
    },
    "kodePos": {
        "default": "",
        "required": false
    },
    "kota": {
        "default": "",
        "required": false
    },
    "latitude": {
        "default": 0,
        "required": false
    },
    "longitude": {
        "default": 0,
        "required": false
    },
    "namaSite": {
        "default": "",
        "required": false
    },
    "provinsi": {
        "default": "",
        "required": false
    },
    "tagSite": {
        "default": "",
        "required": false
    },
    "updatedAt": {
        "default": "",
        "required": false
    }
};

const PelangganClientWidgetFormSchema = {
    "alamat": {
        "default": "",
        "required": false
    },
    "catatan": {
        "default": "",
        "required": false
    },
    "createdAt": {
        "default": "",
        "required": false
    },
    "emailPerusahaan": {
        "default": "",
        "required": false
    },
    "idClient": {
        "required": true
    },
    "isAktif": {
        "default": false,
        "required": false
    },
    "jenisClient": {
        "default": "",
        "required": false
    },
    "kodeClient": {
        "default": "",
        "required": false
    },
    "kodePos": {
        "default": "",
        "required": false
    },
    "kota": {
        "default": "",
        "required": false
    },
    "logoUrl": {
        "default": "",
        "required": false
    },
    "namaFamiliar": {
        "default": "",
        "required": false
    },
    "namaResmi": {
        "default": "",
        "required": true
    },
    "npwp": {
        "default": "",
        "required": false
    },
    "primaryPic": {
        "default": "",
        "required": false
    },
    "provinsi": {
        "default": "",
        "required": false
    },
    "telepon": {
        "default": "",
        "required": false
    },
    "total": {
        "default": 0,
        "required": false
    },
    "updatedAt": {
        "default": "",
        "required": false
    },
    "website": {
        "default": "",
        "required": false
    }
};

const PelangganClientFormSchema = {
    "alamat": {
        "default": "",
        "required": false
    },
    "catatan": {
        "default": "",
        "required": false
    },
    "createdAt": {
        "default": "",
        "required": false
    },
    "emailPerusahaan": {
        "default": "",
        "required": false
    },
    "idClient": {
        "required": true
    },
    "isAktif": {
        "default": false,
        "required": false
    },
    "jenisClient": {
        "default": "",
        "required": false
    },
    "kodeClient": {
        "default": "",
        "required": false
    },
    "kodePos": {
        "default": "",
        "required": false
    },
    "kota": {
        "default": "",
        "required": false
    },
    "logoUrl": {
        "default": "",
        "required": false
    },
    "namaFamiliar": {
        "default": "",
        "required": false
    },
    "namaResmi": {
        "default": "",
        "required": true
    },
    "npwp": {
        "default": "",
        "required": false
    },
    "primaryPic": {
        "default": "",
        "required": false
    },
    "provinsi": {
        "default": "",
        "required": false
    },
    "telepon": {
        "default": "",
        "required": false
    },
    "updatedAt": {
        "default": "",
        "required": false
    },
    "website": {
        "default": "",
        "required": false
    }
};

const PelangganCompanyConfigReportFormSchema = {
    "alamat": {
        "default": "",
        "required": false
    },
    "catatan": {
        "default": "",
        "required": false
    },
    "createdAt": {
        "default": "",
        "required": false
    },
    "idCompanyConfig": {
        "required": true
    },
    "kontak": {
        "default": "",
        "required": false
    },
    "logoUrl": {
        "default": "",
        "required": false
    },
    "namaPerusahaan": {
        "default": "",
        "required": false
    },
    "updatedAt": {
        "default": "",
        "required": false
    },
    "versiErp": {
        "default": "",
        "required": false
    }
};

const PelangganCompanyConfigWidgetFormSchema = {
    "alamat": {
        "default": "",
        "required": false
    },
    "catatan": {
        "default": "",
        "required": false
    },
    "createdAt": {
        "default": "",
        "required": false
    },
    "idCompanyConfig": {
        "required": true
    },
    "kontak": {
        "default": "",
        "required": false
    },
    "logoUrl": {
        "default": "",
        "required": false
    },
    "namaPerusahaan": {
        "default": "",
        "required": false
    },
    "total": {
        "default": 0,
        "required": false
    },
    "updatedAt": {
        "default": "",
        "required": false
    },
    "versiErp": {
        "default": "",
        "required": false
    }
};

const PelangganCompanyConfigFormSchema = {
    "alamat": {
        "default": "",
        "required": false
    },
    "catatan": {
        "default": "",
        "required": false
    },
    "createdAt": {
        "default": "",
        "required": false
    },
    "idCompanyConfig": {
        "required": true
    },
    "kontak": {
        "default": "",
        "required": false
    },
    "logoUrl": {
        "default": "",
        "required": false
    },
    "namaPerusahaan": {
        "default": "",
        "required": false
    },
    "updatedAt": {
        "default": "",
        "required": false
    },
    "versiErp": {
        "default": "",
        "required": false
    }
};

const PelangganContactClientUseReportFormSchema = {
    "catatan": {
        "default": "",
        "required": false
    },
    "createdAt": {
        "default": "",
        "required": false
    },
    "fromModule": {
        "default": "",
        "required": true
    },
    "fromModuleId": {
        "default": "",
        "required": true
    },
    "idClientContact": {
        "required": true
    },
    "idContactClientUse": {
        "required": true
    },
    "isPrimary": {
        "default": false,
        "required": false
    },
    "peran": {
        "default": "",
        "required": false
    },
    "updatedAt": {
        "default": "",
        "required": false
    }
};

const PelangganContactClientUseWidgetFormSchema = {
    "catatan": {
        "default": "",
        "required": false
    },
    "createdAt": {
        "default": "",
        "required": false
    },
    "fromModule": {
        "default": "",
        "required": true
    },
    "fromModuleId": {
        "default": "",
        "required": true
    },
    "idClientContact": {
        "required": true
    },
    "idContactClientUse": {
        "required": true
    },
    "isPrimary": {
        "default": false,
        "required": false
    },
    "peran": {
        "default": "",
        "required": false
    },
    "total": {
        "default": 0,
        "required": false
    },
    "updatedAt": {
        "default": "",
        "required": false
    }
};

const PelangganContactClientUseFormSchema = {
    "catatan": {
        "default": "",
        "required": false
    },
    "createdAt": {
        "default": "",
        "required": false
    },
    "fromModule": {
        "default": "",
        "required": true
    },
    "fromModuleId": {
        "default": "",
        "required": true
    },
    "idClientContact": {
        "required": true
    },
    "idContactClientUse": {
        "required": true
    },
    "isPrimary": {
        "default": false,
        "required": false
    },
    "peran": {
        "default": "",
        "required": false
    },
    "updatedAt": {
        "default": "",
        "required": false
    }
};

const PelangganContractJenisReportFormSchema = {
    "createdAt": {
        "default": "",
        "required": false
    },
    "idContractJenis": {
        "required": true
    },
    "keterangan": {
        "default": "",
        "required": false
    },
    "namaContractJenis": {
        "default": "",
        "required": true
    },
    "role": {
        "default": "",
        "required": false
    },
    "statusContractJenis": {
        "default": "",
        "required": false
    },
    "updatedAt": {
        "default": "",
        "required": false
    }
};

const PelangganContractJenisWidgetFormSchema = {
    "createdAt": {
        "default": "",
        "required": false
    },
    "idContractJenis": {
        "required": true
    },
    "keterangan": {
        "default": "",
        "required": false
    },
    "namaContractJenis": {
        "default": "",
        "required": true
    },
    "role": {
        "default": "",
        "required": false
    },
    "statusContractJenis": {
        "default": "",
        "required": false
    },
    "total": {
        "default": 0,
        "required": false
    },
    "updatedAt": {
        "default": "",
        "required": false
    }
};

const PelangganContractJenisFormSchema = {
    "createdAt": {
        "default": "",
        "required": false
    },
    "idContractJenis": {
        "required": true
    },
    "keterangan": {
        "default": "",
        "required": false
    },
    "namaContractJenis": {
        "default": "",
        "required": true
    },
    "role": {
        "default": "",
        "required": false
    },
    "statusContractJenis": {
        "default": "",
        "required": false
    },
    "updatedAt": {
        "default": "",
        "required": false
    }
};

const PelangganContractReportFormSchema = {
    "catatanKontrak": {
        "default": "",
        "required": false
    },
    "client": {
        "default": "",
        "required": true
    },
    "createdAt": {
        "default": "",
        "required": false
    },
    "dokumenUrl": {
        "default": "",
        "required": false
    },
    "durasiBulan": {
        "default": 0,
        "required": false
    },
    "feeSales": {
        "default": 0,
        "required": false
    },
    "idClient": {
        "required": true
    },
    "idContract": {
        "required": true
    },
    "idContractJenis": {
        "required": false
    },
    "idDocument": {
        "required": false
    },
    "idKantor": {
        "required": false
    },
    "isAutoInvoice": {
        "default": false,
        "required": false
    },
    "kantor": {
        "default": "",
        "required": true
    },
    "namaSales": {
        "default": "",
        "required": false
    },
    "nilaiAkhir": {
        "default": 0,
        "required": false
    },
    "nilaiBulanan": {
        "default": 0,
        "required": false
    },
    "nilaiDiawal": {
        "default": 0,
        "required": false
    },
    "nilaiKontrak": {
        "default": 0,
        "required": false
    },
    "nomorKontrak": {
        "default": "",
        "required": false
    },
    "presentaseFee": {
        "default": 0,
        "required": false
    },
    "refKontrakSebelumnya": {
        "default": "",
        "required": false
    },
    "statusContract": {
        "default": "",
        "required": false
    },
    "tanggalAkhir": {
        "default": "",
        "required": false
    },
    "tanggalKontrak": {
        "default": "",
        "required": false
    },
    "tanggalMulai": {
        "default": "",
        "required": false
    },
    "updatedAt": {
        "default": "",
        "required": false
    }
};

const PelangganContractSiteReportFormSchema = {
    "biayaAkhir": {
        "default": 0,
        "required": false
    },
    "biayaBulanan": {
        "default": 0,
        "required": false
    },
    "biayaDiawal": {
        "default": 0,
        "required": false
    },
    "catatan": {
        "default": "",
        "required": false
    },
    "contract": {
        "default": "",
        "required": true
    },
    "createdAt": {
        "default": "",
        "required": false
    },
    "idClientSite": {
        "required": true
    },
    "idContract": {
        "required": true
    },
    "idContractSite": {
        "required": true
    },
    "jumlahJadwalPerBulan": {
        "default": 0,
        "required": false
    },
    "nilaiTotal": {
        "default": 0,
        "required": false
    },
    "statusContractSite": {
        "default": "",
        "required": false
    },
    "updatedAt": {
        "default": "",
        "required": false
    }
};

const PelangganContractSiteServiceReportFormSchema = {
    "createdAt": {
        "default": "",
        "required": false
    },
    "deskripsiService": {
        "default": "",
        "required": false
    },
    "idContractSite": {
        "required": true
    },
    "idContractSiteService": {
        "required": true
    },
    "idService": {
        "required": true
    },
    "service": {
        "default": "",
        "required": true
    },
    "spesifikasiService": {
        "default": "",
        "required": false
    },
    "updatedAt": {
        "default": "",
        "required": false
    }
};

const PelangganContractSiteServiceWidgetFormSchema = {
    "createdAt": {
        "default": "",
        "required": false
    },
    "deskripsiService": {
        "default": "",
        "required": false
    },
    "idContractSite": {
        "required": true
    },
    "idContractSiteService": {
        "required": true
    },
    "idService": {
        "required": true
    },
    "spesifikasiService": {
        "default": "",
        "required": false
    },
    "total": {
        "default": 0,
        "required": false
    },
    "updatedAt": {
        "default": "",
        "required": false
    }
};

const PelangganContractSiteServiceFormSchema = {
    "createdAt": {
        "default": "",
        "required": false
    },
    "deskripsiService": {
        "default": "",
        "required": false
    },
    "idContractSite": {
        "required": true
    },
    "idContractSiteService": {
        "required": true
    },
    "idService": {
        "required": true
    },
    "spesifikasiService": {
        "default": "",
        "required": false
    },
    "updatedAt": {
        "default": "",
        "required": false
    }
};

const PelangganContractSiteWidgetFormSchema = {
    "biayaAkhir": {
        "default": 0,
        "required": false
    },
    "biayaBulanan": {
        "default": 0,
        "required": false
    },
    "biayaDiawal": {
        "default": 0,
        "required": false
    },
    "catatan": {
        "default": "",
        "required": false
    },
    "createdAt": {
        "default": "",
        "required": false
    },
    "idClientSite": {
        "required": true
    },
    "idContract": {
        "required": true
    },
    "idContractSite": {
        "required": true
    },
    "jumlahJadwalPerBulan": {
        "default": 0,
        "required": false
    },
    "nilaiTotal": {
        "default": 0,
        "required": false
    },
    "statusContractSite": {
        "default": "",
        "required": false
    },
    "total": {
        "default": 0,
        "required": false
    },
    "updatedAt": {
        "default": "",
        "required": false
    }
};

const PelangganContractSiteFormSchema = {
    "biayaAkhir": {
        "default": 0,
        "required": false
    },
    "biayaBulanan": {
        "default": 0,
        "required": false
    },
    "biayaDiawal": {
        "default": 0,
        "required": false
    },
    "catatan": {
        "default": "",
        "required": false
    },
    "createdAt": {
        "default": "",
        "required": false
    },
    "idClientSite": {
        "required": true
    },
    "idContract": {
        "required": true
    },
    "idContractSite": {
        "required": true
    },
    "jumlahJadwalPerBulan": {
        "default": 0,
        "required": false
    },
    "nilaiTotal": {
        "default": 0,
        "required": false
    },
    "statusContractSite": {
        "default": "",
        "required": false
    },
    "updatedAt": {
        "default": "",
        "required": false
    }
};

const PelangganContractWidgetFormSchema = {
    "catatanKontrak": {
        "default": "",
        "required": false
    },
    "createdAt": {
        "default": "",
        "required": false
    },
    "dokumenUrl": {
        "default": "",
        "required": false
    },
    "durasiBulan": {
        "default": 0,
        "required": false
    },
    "feeSales": {
        "default": 0,
        "required": false
    },
    "idClient": {
        "required": true
    },
    "idContract": {
        "required": true
    },
    "idContractJenis": {
        "required": false
    },
    "idDocument": {
        "required": false
    },
    "idKantor": {
        "required": false
    },
    "isAutoInvoice": {
        "default": false,
        "required": false
    },
    "namaSales": {
        "default": "",
        "required": false
    },
    "nilaiAkhir": {
        "default": 0,
        "required": false
    },
    "nilaiBulanan": {
        "default": 0,
        "required": false
    },
    "nilaiDiawal": {
        "default": 0,
        "required": false
    },
    "nilaiKontrak": {
        "default": 0,
        "required": false
    },
    "nomorKontrak": {
        "default": "",
        "required": false
    },
    "presentaseFee": {
        "default": 0,
        "required": false
    },
    "refKontrakSebelumnya": {
        "default": "",
        "required": false
    },
    "statusContract": {
        "default": "",
        "required": false
    },
    "tanggalAkhir": {
        "default": "",
        "required": false
    },
    "tanggalKontrak": {
        "default": "",
        "required": false
    },
    "tanggalMulai": {
        "default": "",
        "required": false
    },
    "total": {
        "default": 0,
        "required": false
    },
    "updatedAt": {
        "default": "",
        "required": false
    }
};

const PelangganContractFormSchema = {
    "catatanKontrak": {
        "default": "",
        "required": false
    },
    "createdAt": {
        "default": "",
        "required": false
    },
    "dokumenUrl": {
        "default": "",
        "required": false
    },
    "durasiBulan": {
        "default": 0,
        "required": false
    },
    "feeSales": {
        "default": 0,
        "required": false
    },
    "idClient": {
        "required": true
    },
    "idContract": {
        "required": true
    },
    "idContractJenis": {
        "required": false
    },
    "idDocument": {
        "required": false
    },
    "idKantor": {
        "required": false
    },
    "isAutoInvoice": {
        "default": false,
        "required": false
    },
    "namaSales": {
        "default": "",
        "required": false
    },
    "nilaiAkhir": {
        "default": 0,
        "required": false
    },
    "nilaiBulanan": {
        "default": 0,
        "required": false
    },
    "nilaiDiawal": {
        "default": 0,
        "required": false
    },
    "nilaiKontrak": {
        "default": 0,
        "required": false
    },
    "nomorKontrak": {
        "default": "",
        "required": false
    },
    "presentaseFee": {
        "default": 0,
        "required": false
    },
    "refKontrakSebelumnya": {
        "default": "",
        "required": false
    },
    "statusContract": {
        "default": "",
        "required": false
    },
    "tanggalAkhir": {
        "default": "",
        "required": false
    },
    "tanggalKontrak": {
        "default": "",
        "required": false
    },
    "tanggalMulai": {
        "default": "",
        "required": false
    },
    "updatedAt": {
        "default": "",
        "required": false
    }
};

const PelangganFakturReportFormSchema = {
    "catatan": {
        "default": "",
        "required": false
    },
    "createdAt": {
        "default": "",
        "required": false
    },
    "createdBy": {
        "default": "",
        "required": false
    },
    "fileFakturUrl": {
        "default": "",
        "required": false
    },
    "idFaktur": {
        "required": true
    },
    "idInvoice": {
        "required": true
    },
    "invoice": {
        "default": "",
        "required": true
    },
    "metodePembayaran": {
        "default": "",
        "required": false
    },
    "nilaiFaktur": {
        "default": 0,
        "required": false
    },
    "nomorFaktur": {
        "default": "",
        "required": false
    },
    "nomorReferensiPembayaran": {
        "default": "",
        "required": false
    },
    "statusPembayaran": {
        "default": "",
        "required": false
    },
    "tanggalFaktur": {
        "default": "",
        "required": false
    },
    "tanggalPembayaran": {
        "default": "",
        "required": false
    },
    "updatedAt": {
        "default": "",
        "required": false
    },
    "updatedBy": {
        "default": "",
        "required": false
    },
    "versiFaktur": {
        "default": 0,
        "required": false
    }
};

const PelangganFakturWidgetFormSchema = {
    "catatan": {
        "default": "",
        "required": false
    },
    "createdAt": {
        "default": "",
        "required": false
    },
    "createdBy": {
        "default": "",
        "required": false
    },
    "fileFakturUrl": {
        "default": "",
        "required": false
    },
    "idFaktur": {
        "required": true
    },
    "idInvoice": {
        "required": true
    },
    "metodePembayaran": {
        "default": "",
        "required": false
    },
    "nilaiFaktur": {
        "default": 0,
        "required": false
    },
    "nomorFaktur": {
        "default": "",
        "required": false
    },
    "nomorReferensiPembayaran": {
        "default": "",
        "required": false
    },
    "statusPembayaran": {
        "default": "",
        "required": false
    },
    "tanggalFaktur": {
        "default": "",
        "required": false
    },
    "tanggalPembayaran": {
        "default": "",
        "required": false
    },
    "total": {
        "default": 0,
        "required": false
    },
    "updatedAt": {
        "default": "",
        "required": false
    },
    "updatedBy": {
        "default": "",
        "required": false
    },
    "versiFaktur": {
        "default": 0,
        "required": false
    }
};

const PelangganFakturFormSchema = {
    "catatan": {
        "default": "",
        "required": false
    },
    "createdAt": {
        "default": "",
        "required": false
    },
    "createdBy": {
        "default": "",
        "required": false
    },
    "fileFakturUrl": {
        "default": "",
        "required": false
    },
    "idFaktur": {
        "required": true
    },
    "idInvoice": {
        "required": true
    },
    "metodePembayaran": {
        "default": "",
        "required": false
    },
    "nilaiFaktur": {
        "default": 0,
        "required": false
    },
    "nomorFaktur": {
        "default": "",
        "required": false
    },
    "nomorReferensiPembayaran": {
        "default": "",
        "required": false
    },
    "statusPembayaran": {
        "default": "",
        "required": false
    },
    "tanggalFaktur": {
        "default": "",
        "required": false
    },
    "tanggalPembayaran": {
        "default": "",
        "required": false
    },
    "updatedAt": {
        "default": "",
        "required": false
    },
    "updatedBy": {
        "default": "",
        "required": false
    },
    "versiFaktur": {
        "default": 0,
        "required": false
    }
};

const PelangganInvoiceReportFormSchema = {
    "alamatPenagihan": {
        "default": "",
        "required": false
    },
    "catatan": {
        "default": "",
        "required": false
    },
    "contract": {
        "default": "",
        "required": true
    },
    "createdAt": {
        "default": "",
        "required": false
    },
    "createdBy": {
        "default": "",
        "required": false
    },
    "dpp": {
        "default": 0,
        "required": false
    },
    "idContract": {
        "required": false
    },
    "idInvoice": {
        "required": true
    },
    "jenisInvoice": {
        "default": "",
        "required": false
    },
    "metodePembayaran": {
        "default": "",
        "required": false
    },
    "nilaiInvoice": {
        "default": 0,
        "required": false
    },
    "nomorInvoice": {
        "default": "",
        "required": false
    },
    "npwp": {
        "default": "",
        "required": false
    },
    "periode": {
        "default": "",
        "required": false
    },
    "picPenagihan": {
        "default": "",
        "required": false
    },
    "ppn": {
        "default": 0,
        "required": false
    },
    "statusInvoice": {
        "default": "",
        "required": false
    },
    "tanggalDibayar": {
        "default": "",
        "required": false
    },
    "tanggalJatuhTempo": {
        "default": "",
        "required": false
    },
    "tanggalTerbit": {
        "default": "",
        "required": false
    },
    "updatedAt": {
        "default": "",
        "required": false
    },
    "updatedBy": {
        "default": "",
        "required": false
    }
};

const PelangganInvoiceWidgetFormSchema = {
    "alamatPenagihan": {
        "default": "",
        "required": false
    },
    "catatan": {
        "default": "",
        "required": false
    },
    "createdAt": {
        "default": "",
        "required": false
    },
    "createdBy": {
        "default": "",
        "required": false
    },
    "dpp": {
        "default": 0,
        "required": false
    },
    "idContract": {
        "required": false
    },
    "idInvoice": {
        "required": true
    },
    "jenisInvoice": {
        "default": "",
        "required": false
    },
    "metodePembayaran": {
        "default": "",
        "required": false
    },
    "nilaiInvoice": {
        "default": 0,
        "required": false
    },
    "nomorInvoice": {
        "default": "",
        "required": false
    },
    "npwp": {
        "default": "",
        "required": false
    },
    "periode": {
        "default": "",
        "required": false
    },
    "picPenagihan": {
        "default": "",
        "required": false
    },
    "ppn": {
        "default": 0,
        "required": false
    },
    "statusInvoice": {
        "default": "",
        "required": false
    },
    "tanggalDibayar": {
        "default": "",
        "required": false
    },
    "tanggalJatuhTempo": {
        "default": "",
        "required": false
    },
    "tanggalTerbit": {
        "default": "",
        "required": false
    },
    "total": {
        "default": 0,
        "required": false
    },
    "updatedAt": {
        "default": "",
        "required": false
    },
    "updatedBy": {
        "default": "",
        "required": false
    }
};

const PelangganInvoiceFormSchema = {
    "alamatPenagihan": {
        "default": "",
        "required": false
    },
    "catatan": {
        "default": "",
        "required": false
    },
    "createdAt": {
        "default": "",
        "required": false
    },
    "createdBy": {
        "default": "",
        "required": false
    },
    "dpp": {
        "default": 0,
        "required": false
    },
    "idContract": {
        "required": false
    },
    "idInvoice": {
        "required": true
    },
    "jenisInvoice": {
        "default": "",
        "required": false
    },
    "metodePembayaran": {
        "default": "",
        "required": false
    },
    "nilaiInvoice": {
        "default": 0,
        "required": false
    },
    "nomorInvoice": {
        "default": "",
        "required": false
    },
    "npwp": {
        "default": "",
        "required": false
    },
    "periode": {
        "default": "",
        "required": false
    },
    "picPenagihan": {
        "default": "",
        "required": false
    },
    "ppn": {
        "default": 0,
        "required": false
    },
    "statusInvoice": {
        "default": "",
        "required": false
    },
    "tanggalDibayar": {
        "default": "",
        "required": false
    },
    "tanggalJatuhTempo": {
        "default": "",
        "required": false
    },
    "tanggalTerbit": {
        "default": "",
        "required": false
    },
    "updatedAt": {
        "default": "",
        "required": false
    },
    "updatedBy": {
        "default": "",
        "required": false
    }
};

const PelangganKantorReportFormSchema = {
    "alamat": {
        "default": "",
        "required": false
    },
    "catatan": {
        "default": "",
        "required": false
    },
    "createdAt": {
        "default": "",
        "required": false
    },
    "idKantor": {
        "required": true
    },
    "isAktif": {
        "default": false,
        "required": false
    },
    "isPusat": {
        "default": false,
        "required": false
    },
    "kodeKantor": {
        "default": "",
        "required": false
    },
    "kota": {
        "default": "",
        "required": false
    },
    "namaKantor": {
        "default": "",
        "required": true
    },
    "provinsi": {
        "default": "",
        "required": false
    },
    "updatedAt": {
        "default": "",
        "required": false
    }
};

const PelangganKantorWidgetFormSchema = {
    "alamat": {
        "default": "",
        "required": false
    },
    "catatan": {
        "default": "",
        "required": false
    },
    "createdAt": {
        "default": "",
        "required": false
    },
    "idKantor": {
        "required": true
    },
    "isAktif": {
        "default": false,
        "required": false
    },
    "isPusat": {
        "default": false,
        "required": false
    },
    "kodeKantor": {
        "default": "",
        "required": false
    },
    "kota": {
        "default": "",
        "required": false
    },
    "namaKantor": {
        "default": "",
        "required": true
    },
    "provinsi": {
        "default": "",
        "required": false
    },
    "total": {
        "default": 0,
        "required": false
    },
    "updatedAt": {
        "default": "",
        "required": false
    }
};

const PelangganKantorFormSchema = {
    "alamat": {
        "default": "",
        "required": false
    },
    "catatan": {
        "default": "",
        "required": false
    },
    "createdAt": {
        "default": "",
        "required": false
    },
    "idKantor": {
        "required": true
    },
    "isAktif": {
        "default": false,
        "required": false
    },
    "isPusat": {
        "default": false,
        "required": false
    },
    "kodeKantor": {
        "default": "",
        "required": false
    },
    "kota": {
        "default": "",
        "required": false
    },
    "namaKantor": {
        "default": "",
        "required": true
    },
    "provinsi": {
        "default": "",
        "required": false
    },
    "updatedAt": {
        "default": "",
        "required": false
    }
};

const PelangganServiceReportFormSchema = {
    "createdAt": {
        "default": "",
        "required": false
    },
    "deskripsi": {
        "default": "",
        "required": false
    },
    "hargaDefault": {
        "default": 0,
        "required": false
    },
    "idService": {
        "required": true
    },
    "isAktif": {
        "default": false,
        "required": false
    },
    "kodeService": {
        "default": "",
        "required": false
    },
    "namaService": {
        "default": "",
        "required": true
    },
    "satuan": {
        "default": "",
        "required": false
    },
    "updatedAt": {
        "default": "",
        "required": false
    }
};

const PelangganServiceWidgetFormSchema = {
    "createdAt": {
        "default": "",
        "required": false
    },
    "deskripsi": {
        "default": "",
        "required": false
    },
    "hargaDefault": {
        "default": 0,
        "required": false
    },
    "idService": {
        "required": true
    },
    "isAktif": {
        "default": false,
        "required": false
    },
    "kodeService": {
        "default": "",
        "required": false
    },
    "namaService": {
        "default": "",
        "required": true
    },
    "satuan": {
        "default": "",
        "required": false
    },
    "total": {
        "default": 0,
        "required": false
    },
    "updatedAt": {
        "default": "",
        "required": false
    }
};

const PelangganServiceFormSchema = {
    "createdAt": {
        "default": "",
        "required": false
    },
    "deskripsi": {
        "default": "",
        "required": false
    },
    "hargaDefault": {
        "default": 0,
        "required": false
    },
    "idService": {
        "required": true
    },
    "isAktif": {
        "default": false,
        "required": false
    },
    "kodeService": {
        "default": "",
        "required": false
    },
    "namaService": {
        "default": "",
        "required": true
    },
    "satuan": {
        "default": "",
        "required": false
    },
    "updatedAt": {
        "default": "",
        "required": false
    }
};

const PelangganTeknisiReportFormSchema = {
    "createdAt": {
        "default": "",
        "required": false
    },
    "idPegawai": {
        "required": false
    },
    "idTeknisi": {
        "required": true
    },
    "idUser": {
        "required": false
    },
    "namaTeknisi": {
        "default": "",
        "required": false
    },
    "statusTeknisi": {
        "default": "",
        "required": false
    },
    "updatedAt": {
        "default": "",
        "required": false
    }
};

const PelangganTeknisiWidgetFormSchema = {
    "createdAt": {
        "default": "",
        "required": false
    },
    "idPegawai": {
        "required": false
    },
    "idTeknisi": {
        "required": true
    },
    "idUser": {
        "required": false
    },
    "namaTeknisi": {
        "default": "",
        "required": false
    },
    "statusTeknisi": {
        "default": "",
        "required": false
    },
    "total": {
        "default": 0,
        "required": false
    },
    "updatedAt": {
        "default": "",
        "required": false
    }
};

const PelangganTeknisiFormSchema = {
    "createdAt": {
        "default": "",
        "required": false
    },
    "idPegawai": {
        "required": false
    },
    "idTeknisi": {
        "required": true
    },
    "idUser": {
        "required": false
    },
    "namaTeknisi": {
        "default": "",
        "required": false
    },
    "statusTeknisi": {
        "default": "",
        "required": false
    },
    "updatedAt": {
        "default": "",
        "required": false
    }
};

const PelangganWorkScheduleReportFormSchema = {
    "createdAt": {
        "default": "",
        "required": false
    },
    "createdBy": {
        "default": "",
        "required": false
    },
    "durationWorking": {
        "default": 0,
        "required": false
    },
    "endWorking": {
        "default": "",
        "required": false
    },
    "idContractSite": {
        "required": false
    },
    "idContractSiteService": {
        "required": true
    },
    "idUser": {
        "required": false
    },
    "idWorkSchedule": {
        "required": true
    },
    "keterangan": {
        "default": "",
        "required": false
    },
    "nomorWorkSchedule": {
        "default": "",
        "required": false
    },
    "startWorking": {
        "default": "",
        "required": false
    },
    "statusWorkSchedule": {
        "default": "",
        "required": false
    },
    "tanggalWorkSchedule": {
        "default": "",
        "required": true
    },
    "tipeWorkSchedule": {
        "default": "",
        "required": false
    },
    "updatedAt": {
        "default": "",
        "required": false
    },
    "updatedBy": {
        "default": "",
        "required": false
    }
};

const PelangganWorkScheduleTeknisiReportFormSchema = {
    "catatan": {
        "default": "",
        "required": false
    },
    "createdAt": {
        "default": "",
        "required": false
    },
    "fee": {
        "default": 0,
        "required": false
    },
    "idTeknisi": {
        "required": true
    },
    "idWorkSchedule": {
        "required": true
    },
    "idWorkScheduleTeknisi": {
        "required": true
    },
    "namaTeknisi": {
        "default": "",
        "required": true
    },
    "peran": {
        "default": "",
        "required": false
    },
    "teknisi": {
        "default": "",
        "required": true
    }
};

const PelangganWorkScheduleTeknisiWidgetFormSchema = {
    "catatan": {
        "default": "",
        "required": false
    },
    "createdAt": {
        "default": "",
        "required": false
    },
    "fee": {
        "default": 0,
        "required": false
    },
    "idTeknisi": {
        "required": true
    },
    "idWorkSchedule": {
        "required": true
    },
    "idWorkScheduleTeknisi": {
        "required": true
    },
    "namaTeknisi": {
        "default": "",
        "required": true
    },
    "peran": {
        "default": "",
        "required": false
    },
    "total": {
        "default": 0,
        "required": false
    }
};

const PelangganWorkScheduleTeknisiFormSchema = {
    "catatan": {
        "default": "",
        "required": false
    },
    "createdAt": {
        "default": "",
        "required": false
    },
    "fee": {
        "default": 0,
        "required": false
    },
    "idTeknisi": {
        "required": true
    },
    "idWorkSchedule": {
        "required": true
    },
    "idWorkScheduleTeknisi": {
        "required": true
    },
    "namaTeknisi": {
        "default": "",
        "required": true
    },
    "peran": {
        "default": "",
        "required": false
    }
};

const PelangganWorkScheduleWidgetFormSchema = {
    "createdAt": {
        "default": "",
        "required": false
    },
    "createdBy": {
        "default": "",
        "required": false
    },
    "durationWorking": {
        "default": 0,
        "required": false
    },
    "endWorking": {
        "default": "",
        "required": false
    },
    "idContractSite": {
        "required": false
    },
    "idContractSiteService": {
        "required": true
    },
    "idUser": {
        "required": false
    },
    "idWorkSchedule": {
        "required": true
    },
    "keterangan": {
        "default": "",
        "required": false
    },
    "nomorWorkSchedule": {
        "default": "",
        "required": false
    },
    "startWorking": {
        "default": "",
        "required": false
    },
    "statusWorkSchedule": {
        "default": "",
        "required": false
    },
    "tanggalWorkSchedule": {
        "default": "",
        "required": true
    },
    "tipeWorkSchedule": {
        "default": "",
        "required": false
    },
    "total": {
        "default": 0,
        "required": false
    },
    "updatedAt": {
        "default": "",
        "required": false
    },
    "updatedBy": {
        "default": "",
        "required": false
    }
};

const PelangganWorkScheduleFormSchema = {
    "createdAt": {
        "default": "",
        "required": false
    },
    "createdBy": {
        "default": "",
        "required": false
    },
    "durationWorking": {
        "default": 0,
        "required": false
    },
    "endWorking": {
        "default": "",
        "required": false
    },
    "idContractSite": {
        "required": false
    },
    "idContractSiteService": {
        "required": true
    },
    "idUser": {
        "required": false
    },
    "idWorkSchedule": {
        "required": true
    },
    "keterangan": {
        "default": "",
        "required": false
    },
    "nomorWorkSchedule": {
        "default": "",
        "required": false
    },
    "startWorking": {
        "default": "",
        "required": false
    },
    "statusWorkSchedule": {
        "default": "",
        "required": false
    },
    "tanggalWorkSchedule": {
        "default": "",
        "required": true
    },
    "tipeWorkSchedule": {
        "default": "",
        "required": false
    },
    "updatedAt": {
        "default": "",
        "required": false
    },
    "updatedBy": {
        "default": "",
        "required": false
    }
};

const RefreshTokenFormSchema = {};

const ResetPasswordFormSchema = {};

const SelectFieldFormSchema = {
    "alias": {
        "default": "",
        "required": false
    },
    "field": {
        "default": "",
        "required": false
    },
    "type": {
        "default": "",
        "required": false
    }
};

const SimpleMessageFormSchema = {
    "message": {
        "default": "",
        "required": true
    }
};

const TokenOnlyResponseFormSchema = {
    "access_token": {
        "default": "",
        "required": true
    },
    "refresh_token": {
        "default": "",
        "required": true
    }
};

const ToolsCustomFieldGroupReportFormSchema = {
    "createdAt": {
        "default": "",
        "required": false
    },
    "deskripsi": {
        "default": "",
        "required": false
    },
    "forKantor": {
        "default": "",
        "required": false
    },
    "forRole": {
        "default": "",
        "required": false
    },
    "idCustomFieldGroup": {
        "required": true
    },
    "isRepeatable": {
        "default": false,
        "required": false
    },
    "modul": {
        "default": "",
        "required": false
    },
    "namaGroup": {
        "default": "",
        "required": true
    },
    "tableName": {
        "default": "",
        "required": false
    },
    "tipeRender": {
        "default": "",
        "required": false
    },
    "updatedAt": {
        "default": "",
        "required": false
    },
    "urutan": {
        "default": 0,
        "required": false
    },
    "visibilityRule": {
        "default": "",
        "required": false
    }
};

const ToolsCustomFieldGroupWidgetFormSchema = {
    "createdAt": {
        "default": "",
        "required": false
    },
    "deskripsi": {
        "default": "",
        "required": false
    },
    "forKantor": {
        "default": "",
        "required": false
    },
    "forRole": {
        "default": "",
        "required": false
    },
    "idCustomFieldGroup": {
        "required": true
    },
    "isRepeatable": {
        "default": false,
        "required": false
    },
    "modul": {
        "default": "",
        "required": false
    },
    "namaGroup": {
        "default": "",
        "required": true
    },
    "tableName": {
        "default": "",
        "required": false
    },
    "tipeRender": {
        "default": "",
        "required": false
    },
    "total": {
        "default": 0,
        "required": false
    },
    "updatedAt": {
        "default": "",
        "required": false
    },
    "urutan": {
        "default": 0,
        "required": false
    },
    "visibilityRule": {
        "default": "",
        "required": false
    }
};

const ToolsCustomFieldGroupFormSchema = {
    "createdAt": {
        "default": "",
        "required": false
    },
    "deskripsi": {
        "default": "",
        "required": false
    },
    "forKantor": {
        "default": "",
        "required": false
    },
    "forRole": {
        "default": "",
        "required": false
    },
    "idCustomFieldGroup": {
        "required": true
    },
    "isRepeatable": {
        "default": false,
        "required": false
    },
    "modul": {
        "default": "",
        "required": false
    },
    "namaGroup": {
        "default": "",
        "required": true
    },
    "tableName": {
        "default": "",
        "required": false
    },
    "tipeRender": {
        "default": "",
        "required": false
    },
    "updatedAt": {
        "default": "",
        "required": false
    },
    "urutan": {
        "default": 0,
        "required": false
    },
    "visibilityRule": {
        "default": "",
        "required": false
    }
};

const ToolsCustomFieldValueReportFormSchema = {
    "createdAt": {
        "default": "",
        "required": false
    },
    "idCustomField": {
        "required": true
    },
    "idCustomFieldGroup": {
        "required": false
    },
    "idCustomFieldValue": {
        "required": true
    },
    "kodeField": {
        "default": "",
        "required": false
    },
    "labelField": {
        "default": "",
        "required": false
    },
    "modul": {
        "default": "",
        "required": false
    },
    "modulId": {
        "default": "",
        "required": true
    },
    "nilai": {
        "default": "",
        "required": false
    },
    "nilaiJson": {
        "default": "",
        "required": false
    },
    "tableName": {
        "default": "",
        "required": false
    },
    "updatedAt": {
        "default": "",
        "required": false
    }
};

const ToolsCustomFieldValueWidgetFormSchema = {
    "createdAt": {
        "default": "",
        "required": false
    },
    "idCustomField": {
        "required": true
    },
    "idCustomFieldGroup": {
        "required": false
    },
    "idCustomFieldValue": {
        "required": true
    },
    "kodeField": {
        "default": "",
        "required": false
    },
    "labelField": {
        "default": "",
        "required": false
    },
    "modul": {
        "default": "",
        "required": false
    },
    "modulId": {
        "default": "",
        "required": true
    },
    "nilai": {
        "default": "",
        "required": false
    },
    "nilaiJson": {
        "default": "",
        "required": false
    },
    "tableName": {
        "default": "",
        "required": false
    },
    "total": {
        "default": 0,
        "required": false
    },
    "updatedAt": {
        "default": "",
        "required": false
    }
};

const ToolsCustomFieldValueFormSchema = {
    "createdAt": {
        "default": "",
        "required": false
    },
    "idCustomField": {
        "required": true
    },
    "idCustomFieldGroup": {
        "required": false
    },
    "idCustomFieldValue": {
        "required": true
    },
    "kodeField": {
        "default": "",
        "required": false
    },
    "labelField": {
        "default": "",
        "required": false
    },
    "modul": {
        "default": "",
        "required": false
    },
    "modulId": {
        "default": "",
        "required": true
    },
    "nilai": {
        "default": "",
        "required": false
    },
    "nilaiJson": {
        "default": "",
        "required": false
    },
    "tableName": {
        "default": "",
        "required": false
    },
    "updatedAt": {
        "default": "",
        "required": false
    }
};

const ToolsCustomFieldFormSchema = {
    "catatan": {
        "default": "",
        "required": false
    },
    "createdAt": {
        "default": "",
        "required": false
    },
    "defaultValue": {
        "default": "",
        "required": false
    },
    "idCustomField": {
        "required": true
    },
    "idCustomFieldGroup": {
        "required": false
    },
    "isFilterable": {
        "default": false,
        "required": false
    },
    "isRequired": {
        "default": false,
        "required": false
    },
    "kodeField": {
        "default": "",
        "required": true
    },
    "labelField": {
        "default": "",
        "required": true
    },
    "opsiSelect": {
        "default": "",
        "required": false
    },
    "prefixField": {
        "default": "",
        "required": false
    },
    "tipeField": {
        "default": "",
        "required": true
    },
    "updatedAt": {
        "default": "",
        "required": false
    },
    "urutan": {
        "default": 0,
        "required": false
    },
    "validasi": {
        "default": "",
        "required": false
    }
};

const ToolsDocumentNumberingCounterFormSchema = {
    "bulan": {
        "default": 0,
        "required": false
    },
    "createdAt": {
        "default": "",
        "required": false
    },
    "forModule": {
        "default": "",
        "required": false
    },
    "forModuleId": {
        "default": "",
        "required": false
    },
    "idDocumentNumbering": {
        "required": true
    },
    "idDocumentNumberingCounter": {
        "required": true
    },
    "idKantor": {
        "required": false
    },
    "lastNumber": {
        "default": 0,
        "required": false
    },
    "tahun": {
        "default": 0,
        "required": true
    },
    "targetColumn": {
        "default": "",
        "required": false
    },
    "updatedAt": {
        "default": "",
        "required": false
    }
};

const ToolsDocumentNumberingFormSchema = {
    "allowManualEntry": {
        "default": false,
        "required": false
    },
    "allowedRoles": {
        "default": "",
        "required": false
    },
    "createdAt": {
        "default": "",
        "required": false
    },
    "digitNomor": {
        "default": 0,
        "required": false
    },
    "forModule": {
        "default": "",
        "required": true
    },
    "formatNomor": {
        "default": "",
        "required": true
    },
    "idDocumentNumbering": {
        "required": true
    },
    "isActive": {
        "default": false,
        "required": false
    },
    "label": {
        "default": "",
        "required": false
    },
    "resetPeriode": {
        "default": "",
        "required": false
    },
    "targetColumn": {
        "default": "",
        "required": true
    },
    "targetTable": {
        "default": "",
        "required": true
    },
    "triggerStage": {
        "default": "",
        "required": false
    },
    "updatedAt": {
        "default": "",
        "required": false
    }
};

const ToolsWorkflowAggregatorFormSchema = {
    "createdAt": {
        "default": "",
        "required": false
    },
    "fromModule": {
        "default": "",
        "required": true
    },
    "fromModuleId": {
        "default": "",
        "required": true
    },
    "idWorkflow": {
        "required": true
    },
    "idWorkflowAggregator": {
        "required": true
    },
    "lastApprovalDate": {
        "default": "",
        "required": false
    },
    "lastApprovalNote": {
        "default": "",
        "required": false
    },
    "lastApprovalStatus": {
        "default": "",
        "required": false
    },
    "lastApprovalUser": {
        "default": "",
        "required": false
    },
    "lastWorkflowStep": {
        "default": "",
        "required": false
    },
    "updatedAt": {
        "default": "",
        "required": false
    }
};

const ToolsWorkflowLogReportFormSchema = {
    "approvedAt": {
        "default": "",
        "required": false
    },
    "approvedBy": {
        "default": "",
        "required": false
    },
    "catatan": {
        "default": "",
        "required": false
    },
    "forModule": {
        "default": "",
        "required": true
    },
    "fromModuleId": {
        "default": "",
        "required": true
    },
    "idUsers": {
        "required": true
    },
    "idWorkflow": {
        "required": false
    },
    "idWorkflowLog": {
        "required": true
    },
    "idWorkflowStep": {
        "required": true
    },
    "namaUser": {
        "default": "",
        "required": false
    },
    "statusAfter": {
        "default": "",
        "required": false
    },
    "statusBefore": {
        "default": "",
        "required": false
    },
    "workflow": {
        "default": "",
        "required": true
    }
};

const ToolsWorkflowLogWidgetFormSchema = {
    "approvedAt": {
        "default": "",
        "required": false
    },
    "approvedBy": {
        "default": "",
        "required": false
    },
    "catatan": {
        "default": "",
        "required": false
    },
    "forModule": {
        "default": "",
        "required": true
    },
    "fromModuleId": {
        "default": "",
        "required": true
    },
    "idUsers": {
        "required": true
    },
    "idWorkflow": {
        "required": false
    },
    "idWorkflowLog": {
        "required": true
    },
    "idWorkflowStep": {
        "required": true
    },
    "namaUser": {
        "default": "",
        "required": false
    },
    "statusAfter": {
        "default": "",
        "required": false
    },
    "statusBefore": {
        "default": "",
        "required": false
    },
    "total": {
        "default": 0,
        "required": false
    }
};

const ToolsWorkflowLogFormSchema = {
    "approvedAt": {
        "default": "",
        "required": false
    },
    "approvedBy": {
        "default": "",
        "required": false
    },
    "catatan": {
        "default": "",
        "required": false
    },
    "forModule": {
        "default": "",
        "required": true
    },
    "fromModuleId": {
        "default": "",
        "required": true
    },
    "idUsers": {
        "required": true
    },
    "idWorkflow": {
        "required": false
    },
    "idWorkflowLog": {
        "required": true
    },
    "idWorkflowStep": {
        "required": true
    },
    "namaUser": {
        "default": "",
        "required": false
    },
    "statusAfter": {
        "default": "",
        "required": false
    },
    "statusBefore": {
        "default": "",
        "required": false
    }
};

const ToolsWorkflowReportFormSchema = {
    "createdAt": {
        "default": "",
        "required": false
    },
    "forModule": {
        "default": "",
        "required": true
    },
    "idKantor": {
        "required": false
    },
    "idWorkflow": {
        "required": true
    },
    "isDefault": {
        "default": false,
        "required": false
    },
    "keterangan": {
        "default": "",
        "required": false
    },
    "namaWorkflow": {
        "default": "",
        "required": true
    },
    "statusWorkflow": {
        "default": "",
        "required": false
    },
    "targetDb": {
        "default": "",
        "required": true
    },
    "targetTable": {
        "default": "",
        "required": true
    },
    "updatedAt": {
        "default": "",
        "required": false
    }
};

const ToolsWorkflowStepReportFormSchema = {
    "allowRoles": {
        "default": "",
        "required": false
    },
    "allowUserIds": {
        "default": "",
        "required": false
    },
    "createdAt": {
        "default": "",
        "required": false
    },
    "customCheckSql": {
        "default": "",
        "required": false
    },
    "idWorkflow": {
        "required": true
    },
    "idWorkflowStep": {
        "required": true
    },
    "messageBefore": {
        "default": "",
        "required": false
    },
    "ruleJson": {
        "default": "",
        "required": false
    },
    "statusFrom": {
        "default": "",
        "required": true
    },
    "statusRejectTo": {
        "default": "",
        "required": false
    },
    "statusTo": {
        "default": "",
        "required": true
    },
    "triggerJson": {
        "default": "",
        "required": false
    },
    "updatedAt": {
        "default": "",
        "required": false
    },
    "urutan": {
        "default": 0,
        "required": true
    },
    "workflow": {
        "default": "",
        "required": true
    }
};

const ToolsWorkflowStepWidgetFormSchema = {
    "allowRoles": {
        "default": "",
        "required": false
    },
    "allowUserIds": {
        "default": "",
        "required": false
    },
    "createdAt": {
        "default": "",
        "required": false
    },
    "customCheckSql": {
        "default": "",
        "required": false
    },
    "idWorkflow": {
        "required": true
    },
    "idWorkflowStep": {
        "required": true
    },
    "messageBefore": {
        "default": "",
        "required": false
    },
    "ruleJson": {
        "default": "",
        "required": false
    },
    "statusFrom": {
        "default": "",
        "required": true
    },
    "statusRejectTo": {
        "default": "",
        "required": false
    },
    "statusTo": {
        "default": "",
        "required": true
    },
    "total": {
        "default": 0,
        "required": false
    },
    "triggerJson": {
        "default": "",
        "required": false
    },
    "updatedAt": {
        "default": "",
        "required": false
    },
    "urutan": {
        "default": 0,
        "required": true
    }
};

const ToolsWorkflowStepFormSchema = {
    "allowRoles": {
        "default": "",
        "required": false
    },
    "allowUserIds": {
        "default": "",
        "required": false
    },
    "createdAt": {
        "default": "",
        "required": false
    },
    "customCheckSql": {
        "default": "",
        "required": false
    },
    "idWorkflow": {
        "required": true
    },
    "idWorkflowStep": {
        "required": true
    },
    "messageBefore": {
        "default": "",
        "required": false
    },
    "ruleJson": {
        "default": "",
        "required": false
    },
    "statusFrom": {
        "default": "",
        "required": true
    },
    "statusRejectTo": {
        "default": "",
        "required": false
    },
    "statusTo": {
        "default": "",
        "required": true
    },
    "triggerJson": {
        "default": "",
        "required": false
    },
    "updatedAt": {
        "default": "",
        "required": false
    },
    "urutan": {
        "default": 0,
        "required": true
    }
};

const ToolsWorkflowWidgetFormSchema = {
    "createdAt": {
        "default": "",
        "required": false
    },
    "forModule": {
        "default": "",
        "required": true
    },
    "idKantor": {
        "required": false
    },
    "idWorkflow": {
        "required": true
    },
    "isDefault": {
        "default": false,
        "required": false
    },
    "keterangan": {
        "default": "",
        "required": false
    },
    "namaWorkflow": {
        "default": "",
        "required": true
    },
    "statusWorkflow": {
        "default": "",
        "required": false
    },
    "targetDb": {
        "default": "",
        "required": true
    },
    "targetTable": {
        "default": "",
        "required": true
    },
    "total": {
        "default": 0,
        "required": false
    },
    "updatedAt": {
        "default": "",
        "required": false
    }
};

const ToolsWorkflowFormSchema = {
    "createdAt": {
        "default": "",
        "required": false
    },
    "forModule": {
        "default": "",
        "required": true
    },
    "idKantor": {
        "required": false
    },
    "idWorkflow": {
        "required": true
    },
    "isDefault": {
        "default": false,
        "required": false
    },
    "keterangan": {
        "default": "",
        "required": false
    },
    "namaWorkflow": {
        "default": "",
        "required": true
    },
    "statusWorkflow": {
        "default": "",
        "required": false
    },
    "targetDb": {
        "default": "",
        "required": true
    },
    "targetTable": {
        "default": "",
        "required": true
    },
    "updatedAt": {
        "default": "",
        "required": false
    }
};

const UserTokensFormSchema = {
    "createdAt": {
        "default": "",
        "required": false
    },
    "id": {
        "required": true
    },
    "idUser": {
        "required": false
    },
    "ipAddress": {
        "default": "",
        "required": false
    },
    "refreshToken": {
        "default": "",
        "required": false
    },
    "userAgent": {
        "default": "",
        "required": false
    }
};

const UsersFormSchema = {
    "createdAt": {
        "default": "",
        "required": false
    },
    "email": {
        "default": "",
        "required": true
    },
    "idUserGroup": {
        "required": false
    },
    "idUsers": {
        "required": true
    },
    "lastLogin": {
        "default": "",
        "required": false
    },
    "nama": {
        "default": "",
        "required": false
    },
    "password": {
        "default": "",
        "required": true
    },
    "status": {
        "default": "",
        "required": false
    },
    "wajibResetPassword": {
        "default": false,
        "required": false
    }
};

const WorkflowApplyFormSchema = {
    "catatan": {
        "default": "",
        "required": true
    },
    "from_module": {
        "default": "",
        "required": true
    },
    "from_module_id": {
        "default": "",
        "required": true
    },
    "status": {
        "default": "",
        "required": true
    },
    "user_id": {
        "default": "",
        "required": true
    }
};

const AclModuleDtoFields = {
    "createdAt": "string",
    "deskripsi": "string",
    "idModule": "string",
    "isAktif": "boolean",
    "kodeModule": "string",
    "namaDb": "string",
    "namaModule": "string",
    "namaTabel": "string",
    "updatedAt": "string",
    "urutan": "number"
};

const AclUserGroupDtoFields = {
    "createdAt": "string",
    "deskripsi": "string",
    "idUserGroup": "string",
    "namaUserGroup": "string",
    "status": "string"
};

const AclUserTokensDtoFields = {
    "createdAt": "string",
    "id": "string",
    "idUser": "string",
    "ipAddress": "string",
    "refreshToken": "string",
    "userAgent": "string"
};

const AclUsersDtoFields = {
    "createdAt": "string",
    "email": "string",
    "idUserGroup": "string",
    "idUsers": "string",
    "lastLogin": "string",
    "nama": "string",
    "password": "string",
    "status": "string",
    "wajibResetPassword": "boolean"
};

const AclUsersReportDtoFields = {
    "createdAt": "string",
    "email": "string",
    "idUserGroup": "string",
    "idUsers": "string",
    "lastLogin": "string",
    "nama": "string",
    "password": "string",
    "status": "string",
    "wajibResetPassword": "boolean"
};

const AclUsersWidgetDtoFields = {
    "createdAt": "string",
    "email": "string",
    "idUserGroup": "string",
    "idUsers": "string",
    "lastLogin": "string",
    "nama": "string",
    "password": "string",
    "status": "string",
    "total": "number",
    "wajibResetPassword": "boolean"
};

const AmimsActypeDtoFields = {
    "acCategory": "string",
    "acManufacture": "string",
    "actype": "string",
    "createdAt": "string",
    "description": "string",
    "eFlight": "string",
    "eStarts": "string",
    "engineManufacture": "string",
    "engineType": "string",
    "hashN1": "string",
    "hashN2": "string",
    "idActype": "string",
    "isDeleted": "number",
    "numberEngine": "number",
    "oldId": "string",
    "statusType": "string",
    "updatedAt": "string",
    "wingtype": "string"
};

const AmimsActypeReportDtoFields = {
    "acCategory": "string",
    "acManufacture": "string",
    "actype": "string",
    "createdAt": "string",
    "description": "string",
    "eFlight": "string",
    "eStarts": "string",
    "engineManufacture": "string",
    "engineType": "string",
    "hashN1": "string",
    "hashN2": "string",
    "idActype": "string",
    "isDeleted": "number",
    "numberEngine": "number",
    "oldId": "string",
    "statusType": "string",
    "updatedAt": "string",
    "wingtype": "string"
};

const AmimsActypeWidgetDtoFields = {
    "acCategory": "string",
    "acManufacture": "string",
    "actype": "string",
    "createdAt": "string",
    "description": "string",
    "eFlight": "string",
    "eStarts": "string",
    "engineManufacture": "string",
    "engineType": "string",
    "hashN1": "string",
    "hashN2": "string",
    "idActype": "string",
    "isDeleted": "number",
    "numberEngine": "number",
    "oldId": "string",
    "statusType": "string",
    "total": "number",
    "updatedAt": "string",
    "wingtype": "string"
};

const AmimsAircraftDetailDtoFields = {
    "airworthiness": "string",
    "autoPilot": "string",
    "auxiliaryTank": "string",
    "baggageCompartmentSpace": "string",
    "cargoAreaMaximumHeight": "string",
    "cargoAreaOverallLength": "string",
    "cargoDoor": "string",
    "certificateOfRegistration": "string",
    "compassSwing": "string",
    "configuration": "string",
    "crew": "string",
    "crewDoor": "string",
    "crewLifeVest": "string",
    "cvr": "string",
    "dme": "string",
    "dualAdfSystem": "string",
    "dualRadioNavigationSystem": "string",
    "dualVhfCommunication": "string",
    "earProtector": "string",
    "emergency": "string",
    "emergencyFloatationGear": "string",
    "emergencyLocateTransmitter": "string",
    "emptyWeight": "string",
    "engine": "string",
    "engineInstrument": "string",
    "externalCargoHook": "string",
    "firstAidKit": "string",
    "flightControl": "string",
    "flightDirector": "string",
    "floatingBeacon": "string",
    "fullDoc": "string",
    "gps": "string",
    "grossWeight": "string",
    "gyroMagneticCompass": "string",
    "hfCommunication": "string",
    "homer": "string",
    "hoverCeilingOge": "string",
    "idAircraftDetail": "string",
    "intercommunicationSystem": "string",
    "internalHoist": "string",
    "landingGear": "string",
    "landingLight": "string",
    "lifeRaft": "string",
    "lifeVest": "string",
    "mainCabinSpace": "string",
    "mainRotorDiscDiameter": "string",
    "mainRotorSystem": "string",
    "maximumBaggageCompartment": "string",
    "maximumContinuous": "string",
    "maximumSpeed": "string",
    "medicalStretcher": "string",
    "minute": "string",
    "moreDetail": "string",
    "outputPower": "string",
    "passenger": "string",
    "passengerDoorHeight": "string",
    "passengerDoorWidth": "string",
    "payload": "string",
    "personal": "string",
    "poweredBy": "string",
    "publicAddress": "string",
    "radioAltimeter": "string",
    "radioPermit": "string",
    "range": "string",
    "searchLight": "string",
    "standardFuelCapacity": "string",
    "survivalKit": "string",
    "tailRotorDiameter": "string",
    "tailRotorSystem": "string",
    "takeOff": "string",
    "transponder": "string",
    "underwaterBeacon": "string",
    "updatedAt": "string",
    "usefulWeight": "string",
    "vor": "string",
    "weightAndBalance": "string",
    "withFullPassenger": "string",
    "wxRadar": "string",
    "yearOfManufacture": "string"
};

const AmimsAircraftDetailReportDtoFields = {
    "airworthiness": "string",
    "autoPilot": "string",
    "auxiliaryTank": "string",
    "baggageCompartmentSpace": "string",
    "cargoAreaMaximumHeight": "string",
    "cargoAreaOverallLength": "string",
    "cargoDoor": "string",
    "certificateOfRegistration": "string",
    "compassSwing": "string",
    "configuration": "string",
    "crew": "string",
    "crewDoor": "string",
    "crewLifeVest": "string",
    "cvr": "string",
    "dme": "string",
    "dualAdfSystem": "string",
    "dualRadioNavigationSystem": "string",
    "dualVhfCommunication": "string",
    "earProtector": "string",
    "emergency": "string",
    "emergencyFloatationGear": "string",
    "emergencyLocateTransmitter": "string",
    "emptyWeight": "string",
    "engine": "string",
    "engineInstrument": "string",
    "externalCargoHook": "string",
    "firstAidKit": "string",
    "flightControl": "string",
    "flightDirector": "string",
    "floatingBeacon": "string",
    "fullDoc": "string",
    "gps": "string",
    "grossWeight": "string",
    "gyroMagneticCompass": "string",
    "hfCommunication": "string",
    "homer": "string",
    "hoverCeilingOge": "string",
    "idAircraftDetail": "string",
    "intercommunicationSystem": "string",
    "internalHoist": "string",
    "landingGear": "string",
    "landingLight": "string",
    "lifeRaft": "string",
    "lifeVest": "string",
    "mainCabinSpace": "string",
    "mainRotorDiscDiameter": "string",
    "mainRotorSystem": "string",
    "maximumBaggageCompartment": "string",
    "maximumContinuous": "string",
    "maximumSpeed": "string",
    "medicalStretcher": "string",
    "minute": "string",
    "moreDetail": "string",
    "outputPower": "string",
    "passenger": "string",
    "passengerDoorHeight": "string",
    "passengerDoorWidth": "string",
    "payload": "string",
    "personal": "string",
    "poweredBy": "string",
    "publicAddress": "string",
    "radioAltimeter": "string",
    "radioPermit": "string",
    "range": "string",
    "searchLight": "string",
    "standardFuelCapacity": "string",
    "survivalKit": "string",
    "tailRotorDiameter": "string",
    "tailRotorSystem": "string",
    "takeOff": "string",
    "transponder": "string",
    "underwaterBeacon": "string",
    "updatedAt": "string",
    "usefulWeight": "string",
    "vor": "string",
    "weightAndBalance": "string",
    "withFullPassenger": "string",
    "wxRadar": "string",
    "yearOfManufacture": "string"
};

const AmimsAircraftDetailWidgetDtoFields = {
    "airworthiness": "string",
    "autoPilot": "string",
    "auxiliaryTank": "string",
    "baggageCompartmentSpace": "string",
    "cargoAreaMaximumHeight": "string",
    "cargoAreaOverallLength": "string",
    "cargoDoor": "string",
    "certificateOfRegistration": "string",
    "compassSwing": "string",
    "configuration": "string",
    "crew": "string",
    "crewDoor": "string",
    "crewLifeVest": "string",
    "cvr": "string",
    "dme": "string",
    "dualAdfSystem": "string",
    "dualRadioNavigationSystem": "string",
    "dualVhfCommunication": "string",
    "earProtector": "string",
    "emergency": "string",
    "emergencyFloatationGear": "string",
    "emergencyLocateTransmitter": "string",
    "emptyWeight": "string",
    "engine": "string",
    "engineInstrument": "string",
    "externalCargoHook": "string",
    "firstAidKit": "string",
    "flightControl": "string",
    "flightDirector": "string",
    "floatingBeacon": "string",
    "fullDoc": "string",
    "gps": "string",
    "grossWeight": "string",
    "gyroMagneticCompass": "string",
    "hfCommunication": "string",
    "homer": "string",
    "hoverCeilingOge": "string",
    "idAircraftDetail": "string",
    "intercommunicationSystem": "string",
    "internalHoist": "string",
    "landingGear": "string",
    "landingLight": "string",
    "lifeRaft": "string",
    "lifeVest": "string",
    "mainCabinSpace": "string",
    "mainRotorDiscDiameter": "string",
    "mainRotorSystem": "string",
    "maximumBaggageCompartment": "string",
    "maximumContinuous": "string",
    "maximumSpeed": "string",
    "medicalStretcher": "string",
    "minute": "string",
    "moreDetail": "string",
    "outputPower": "string",
    "passenger": "string",
    "passengerDoorHeight": "string",
    "passengerDoorWidth": "string",
    "payload": "string",
    "personal": "string",
    "poweredBy": "string",
    "publicAddress": "string",
    "radioAltimeter": "string",
    "radioPermit": "string",
    "range": "string",
    "searchLight": "string",
    "standardFuelCapacity": "string",
    "survivalKit": "string",
    "tailRotorDiameter": "string",
    "tailRotorSystem": "string",
    "takeOff": "string",
    "total": "number",
    "transponder": "string",
    "underwaterBeacon": "string",
    "updatedAt": "string",
    "usefulWeight": "string",
    "vor": "string",
    "weightAndBalance": "string",
    "withFullPassenger": "string",
    "wxRadar": "string",
    "yearOfManufacture": "string"
};

const AmimsAircraftDtoFields = {
    "acFoto": "string",
    "createdAt": "string",
    "descriptionAircraft": "string",
    "hasapu": "string",
    "idActype": "string",
    "idAircraft": "string",
    "isDeleted": "number",
    "keywordAircraft": "string",
    "manufactureAircraft": "string",
    "manufactureDate": "string",
    "manufactureEngine": "string",
    "manufacturedBy": "string",
    "oldActype": "string",
    "oldId": "string",
    "purchasedate": "string",
    "reasonRegschange": "string",
    "registrationNumber": "string",
    "serialNumber": "string",
    "statusAc": "string",
    "tendurance": "number",
    "updatedAt": "string",
    "yearMade": "string"
};

const AmimsAircraftReportDtoFields = {
    "acFoto": "string",
    "actype": "string",
    "createdAt": "string",
    "descriptionAircraft": "string",
    "hasapu": "string",
    "idActype": "string",
    "idAircraft": "string",
    "isDeleted": "number",
    "keywordAircraft": "string",
    "manufactureAircraft": "string",
    "manufactureDate": "string",
    "manufactureEngine": "string",
    "manufacturedBy": "string",
    "oldActype": "string",
    "oldId": "string",
    "purchasedate": "string",
    "reasonRegschange": "string",
    "registrationNumber": "string",
    "serialNumber": "string",
    "statusAc": "string",
    "tendurance": "number",
    "updatedAt": "string",
    "yearMade": "string"
};

const AmimsAircraftWidgetDtoFields = {
    "acFoto": "string",
    "createdAt": "string",
    "descriptionAircraft": "string",
    "hasapu": "string",
    "idActype": "string",
    "idAircraft": "string",
    "isDeleted": "number",
    "keywordAircraft": "string",
    "manufactureAircraft": "string",
    "manufactureDate": "string",
    "manufactureEngine": "string",
    "manufacturedBy": "string",
    "oldActype": "string",
    "oldId": "string",
    "purchasedate": "string",
    "reasonRegschange": "string",
    "registrationNumber": "string",
    "serialNumber": "string",
    "statusAc": "string",
    "tendurance": "number",
    "total": "number",
    "updatedAt": "string",
    "yearMade": "string"
};

const AmimsAtaDtoFields = {
    "ata": "string",
    "ataType": "string",
    "codeAta": "string",
    "createdAt": "string",
    "idAta": "string",
    "isDeleted": "number",
    "keywordAta": "string",
    "oldId": "string",
    "updatedAt": "string"
};

const AmimsBinDtoFields = {
    "bin": "string",
    "code": "string",
    "createdAt": "string",
    "description": "string",
    "idBin": "string",
    "idSite": "string",
    "updatedAt": "string"
};

const AmimsBinReportDtoFields = {
    "bin": "string",
    "code": "string",
    "createdAt": "string",
    "description": "string",
    "idBin": "string",
    "idSite": "string",
    "site": "string",
    "updatedAt": "string"
};

const AmimsBinWidgetDtoFields = {
    "bin": "string",
    "code": "string",
    "createdAt": "string",
    "description": "string",
    "idBin": "string",
    "idSite": "string",
    "total": "number",
    "updatedAt": "string"
};

const AmimsCompanyDtoFields = {
    "address1": "string",
    "address2": "string",
    "createdAt": "string",
    "email": "string",
    "fax": "string",
    "hasIdUser": "number",
    "idCompany": "string",
    "isDefault": "number",
    "nameCompany": "string",
    "phone": "string",
    "statusCompany": "string",
    "updatedAt": "string",
    "website": "string"
};

const AmimsConditionMonitoringDtoFields = {
    "childnameConditionMonitoring": "string",
    "code": "string",
    "conditionMonitoring": "string",
    "idConditionMonitoring": "string",
    "isDeleted": "number"
};

const AmimsConditionMonitoringReportDtoFields = {
    "childnameConditionMonitoring": "string",
    "code": "string",
    "conditionMonitoring": "string",
    "idConditionMonitoring": "string",
    "isDeleted": "number"
};

const AmimsConditionMonitoringWidgetDtoFields = {
    "childnameConditionMonitoring": "string",
    "code": "string",
    "conditionMonitoring": "string",
    "idConditionMonitoring": "string",
    "isDeleted": "number",
    "total": "number"
};

const AmimsCurrencyDtoFields = {
    "createdAt": "string",
    "effectiveDate": "string",
    "forcurrency": "string",
    "idCurrency": "string",
    "idMcurrency": "string",
    "idUser": "string",
    "newValue": "number",
    "noteCurrency": "string",
    "oldValue": "number",
    "updatedAt": "string"
};

const AmimsCurrencyReportDtoFields = {
    "createdAt": "string",
    "effectiveDate": "string",
    "forcurrency": "string",
    "idCurrency": "string",
    "idMcurrency": "string",
    "idUser": "string",
    "mcurrency": "string",
    "newValue": "number",
    "noteCurrency": "string",
    "oldValue": "number",
    "updatedAt": "string"
};

const AmimsCurrencyWidgetDtoFields = {
    "createdAt": "string",
    "effectiveDate": "string",
    "forcurrency": "string",
    "idCurrency": "string",
    "idMcurrency": "string",
    "idUser": "string",
    "newValue": "number",
    "noteCurrency": "string",
    "oldValue": "number",
    "total": "number",
    "updatedAt": "string"
};

const AmimsDoctypeDtoFields = {
    "childname": "string",
    "description": "string",
    "doctype": "string",
    "idDoctype": "string",
    "lastupdatestamp": "string"
};

const AmimsDueListDtoFields = {
    "currentCycle": "number",
    "currentHours": "number",
    "cycleFrom": "number",
    "cycleTo": "number",
    "dateDue": "string",
    "dueAcCycle": "number",
    "dueAcHours": "number",
    "dueCycle": "number",
    "dueDate": "string",
    "dueHours": "number",
    "hoursFrom": "number",
    "hoursTo": "number",
    "idAircraft": "string",
    "idDueList": "string",
    "idMantenance": "string",
    "idPart": "string",
    "idTypeOfwork": "string",
    "lastCycle": "number",
    "lastDate": "string",
    "lastHours": "number",
    "noteDue": "string",
    "onSite": "number",
    "parentAss": "string",
    "parentCycle": "number",
    "parentHours": "number",
    "parentTime": "number",
    "remainingCycle": "number",
    "remainingDay": "string",
    "remainingHours": "number",
    "sn": "string",
    "timeFrom": "number",
    "timeTo": "number",
    "timeUnit": "string",
    "typeDue": "string",
    "typeOfwork": "string"
};

const AmimsDueListOutputDtoFields = {
    "atInstall": "string",
    "ata": "string",
    "code": "string",
    "currentPart": "string",
    "dueAt": "string",
    "dueC": "number",
    "dueH": "number",
    "dueT": "number",
    "idAircraft": "string",
    "idDueList": "string",
    "idDueListOutput": "string",
    "idMpart": "string",
    "idPart": "string",
    "installPart": "string",
    "keyword": "string",
    "noteDue": "string",
    "partNumber": "string",
    "peruntukan": "string",
    "ramaining": "number",
    "sn": "string",
    "toDue": "number",
    "typeDue": "string",
    "typeOfwork": "string",
    "variabel": "string"
};

const AmimsDueListOutputReportDtoFields = {
    "aircraft": "string",
    "atInstall": "string",
    "ata": "string",
    "code": "string",
    "currentPart": "string",
    "dueAt": "string",
    "dueC": "number",
    "dueH": "number",
    "dueT": "number",
    "idAircraft": "string",
    "idDueList": "string",
    "idDueListOutput": "string",
    "idMpart": "string",
    "idPart": "string",
    "installPart": "string",
    "keyword": "string",
    "mpart": "string",
    "noteDue": "string",
    "part": "string",
    "partNumber": "string",
    "peruntukan": "string",
    "ramaining": "number",
    "sn": "string",
    "toDue": "number",
    "typeDue": "string",
    "typeOfwork": "string",
    "variabel": "string"
};

const AmimsDueListOutputWidgetDtoFields = {
    "atInstall": "string",
    "ata": "string",
    "code": "string",
    "currentPart": "string",
    "dueAt": "string",
    "dueC": "number",
    "dueH": "number",
    "dueT": "number",
    "idAircraft": "string",
    "idDueList": "string",
    "idDueListOutput": "string",
    "idMpart": "string",
    "idPart": "string",
    "installPart": "string",
    "keyword": "string",
    "noteDue": "string",
    "partNumber": "string",
    "peruntukan": "string",
    "ramaining": "number",
    "sn": "string",
    "toDue": "number",
    "total": "number",
    "typeDue": "string",
    "typeOfwork": "string",
    "variabel": "string"
};

const AmimsDueListReportDtoFields = {
    "aircraft": "string",
    "currentCycle": "number",
    "currentHours": "number",
    "cycleFrom": "number",
    "cycleTo": "number",
    "dateDue": "string",
    "dueAcCycle": "number",
    "dueAcHours": "number",
    "dueCycle": "number",
    "dueDate": "string",
    "dueHours": "number",
    "hoursFrom": "number",
    "hoursTo": "number",
    "idAircraft": "string",
    "idDueList": "string",
    "idMantenance": "string",
    "idPart": "string",
    "idTypeOfwork": "string",
    "lastCycle": "number",
    "lastDate": "string",
    "lastHours": "number",
    "noteDue": "string",
    "onSite": "number",
    "parentAss": "string",
    "parentCycle": "number",
    "parentHours": "number",
    "parentTime": "number",
    "part": "string",
    "remainingCycle": "number",
    "remainingDay": "string",
    "remainingHours": "number",
    "sn": "string",
    "timeFrom": "number",
    "timeTo": "number",
    "timeUnit": "string",
    "typeDue": "string",
    "typeOfwork": "string"
};

const AmimsDueListWidgetDtoFields = {
    "currentCycle": "number",
    "currentHours": "number",
    "cycleFrom": "number",
    "cycleTo": "number",
    "dateDue": "string",
    "dueAcCycle": "number",
    "dueAcHours": "number",
    "dueCycle": "number",
    "dueDate": "string",
    "dueHours": "number",
    "hoursFrom": "number",
    "hoursTo": "number",
    "idAircraft": "string",
    "idDueList": "string",
    "idMantenance": "string",
    "idPart": "string",
    "idTypeOfwork": "string",
    "lastCycle": "number",
    "lastDate": "string",
    "lastHours": "number",
    "noteDue": "string",
    "onSite": "number",
    "parentAss": "string",
    "parentCycle": "number",
    "parentHours": "number",
    "parentTime": "number",
    "remainingCycle": "number",
    "remainingDay": "string",
    "remainingHours": "number",
    "sn": "string",
    "timeFrom": "number",
    "timeTo": "number",
    "timeUnit": "string",
    "total": "number",
    "typeDue": "string",
    "typeOfwork": "string"
};

const AmimsEngineerPmtrDtoFields = {
    "createdAt": "string",
    "dateAcc": "string",
    "datePmtr": "string",
    "fromSite": "number",
    "idAircraft": "string",
    "idEngineerPmtr": "string",
    "idUser": "string",
    "idUserAcc": "string",
    "isDeleted": "number",
    "noIndex": "number",
    "notePmtr": "string",
    "numberPmtr": "string",
    "statusPmtr": "string",
    "toSite": "number",
    "updatedAt": "string",
    "validasi": "number"
};

const AmimsEngineerPmtrItemDtoFields = {
    "createdAt": "string",
    "figureIndex": "string",
    "idEngineerPmtr": "string",
    "idEngineerPmtrItem": "string",
    "idMpart": "string",
    "noteItemPmtr": "string",
    "priority": "string",
    "qtyPmtr": "number",
    "updatedAt": "string"
};

const AmimsEngineerPmtrItemReportDtoFields = {
    "createdAt": "string",
    "figureIndex": "string",
    "idEngineerPmtr": "string",
    "idEngineerPmtrItem": "string",
    "idMpart": "string",
    "mpart": "string",
    "noteItemPmtr": "string",
    "priority": "string",
    "qtyPmtr": "number",
    "updatedAt": "string"
};

const AmimsEngineerPmtrItemWidgetDtoFields = {
    "createdAt": "string",
    "figureIndex": "string",
    "idEngineerPmtr": "string",
    "idEngineerPmtrItem": "string",
    "idMpart": "string",
    "noteItemPmtr": "string",
    "priority": "string",
    "qtyPmtr": "number",
    "total": "number",
    "updatedAt": "string"
};

const AmimsEngineerPmtrReportDtoFields = {
    "aircraft": "string",
    "createdAt": "string",
    "dateAcc": "string",
    "datePmtr": "string",
    "fromSite": "number",
    "idAircraft": "string",
    "idEngineerPmtr": "string",
    "idUser": "string",
    "idUserAcc": "string",
    "isDeleted": "number",
    "noIndex": "number",
    "notePmtr": "string",
    "numberPmtr": "string",
    "statusPmtr": "string",
    "toSite": "number",
    "updatedAt": "string",
    "validasi": "number"
};

const AmimsEngineerPmtrWidgetDtoFields = {
    "createdAt": "string",
    "dateAcc": "string",
    "datePmtr": "string",
    "fromSite": "number",
    "idAircraft": "string",
    "idEngineerPmtr": "string",
    "idUser": "string",
    "idUserAcc": "string",
    "isDeleted": "number",
    "noIndex": "number",
    "notePmtr": "string",
    "numberPmtr": "string",
    "statusPmtr": "string",
    "toSite": "number",
    "total": "number",
    "updatedAt": "string",
    "validasi": "number"
};

const AmimsEngineerPrisDtoFields = {
    "createdAt": "string",
    "dateAcc": "string",
    "dateClose": "string",
    "dateInstall": "string",
    "dateIssued": "string",
    "datePris": "string",
    "description": "string",
    "idAircraft": "string",
    "idEngineerPris": "string",
    "idPosition": "string",
    "idSite": "string",
    "idUser": "string",
    "idUserAcc": "string",
    "idUserClose": "string",
    "idUserIssued": "string",
    "isDeleted": "number",
    "keyword": "string",
    "noIndex": "number",
    "notePris": "string",
    "numberJo": "string",
    "numberPris": "string",
    "numberWp": "string",
    "priority": "string",
    "statusPris": "string",
    "typePris": "string",
    "updatedAt": "string",
    "validasi": "number"
};

const AmimsEngineerPrisItemDtoFields = {
    "createdAt": "string",
    "fromPart": "string",
    "hashTechLog": "string",
    "idEngineerPris": "string",
    "idEngineerPrisItem": "string",
    "idPart": "string",
    "idPartRemove": "string",
    "isDeleted": "number",
    "noteItemPris": "string",
    "partOnDate": "string",
    "qtyInstall": "number",
    "qtyPris": "number",
    "statusItem": "string",
    "tsnCycle": "number",
    "tsnHours": "number",
    "tsnVal": "number",
    "tsoCycle": "number",
    "tsoHours": "number",
    "tsoVal": "number",
    "updatedAt": "string"
};

const AmimsEngineerPrisItemReportDtoFields = {
    "createdAt": "string",
    "fromPart": "string",
    "hashTechLog": "string",
    "idEngineerPris": "string",
    "idEngineerPrisItem": "string",
    "idPart": "string",
    "idPartRemove": "string",
    "isDeleted": "number",
    "noteItemPris": "string",
    "part": "string",
    "partOnDate": "string",
    "qtyInstall": "number",
    "qtyPris": "number",
    "statusItem": "string",
    "tsnCycle": "number",
    "tsnHours": "number",
    "tsnVal": "number",
    "tsoCycle": "number",
    "tsoHours": "number",
    "tsoVal": "number",
    "updatedAt": "string"
};

const AmimsEngineerPrisItemWidgetDtoFields = {
    "createdAt": "string",
    "fromPart": "string",
    "hashTechLog": "string",
    "idEngineerPris": "string",
    "idEngineerPrisItem": "string",
    "idPart": "string",
    "idPartRemove": "string",
    "isDeleted": "number",
    "noteItemPris": "string",
    "partOnDate": "string",
    "qtyInstall": "number",
    "qtyPris": "number",
    "statusItem": "string",
    "total": "number",
    "tsnCycle": "number",
    "tsnHours": "number",
    "tsnVal": "number",
    "tsoCycle": "number",
    "tsoHours": "number",
    "tsoVal": "number",
    "updatedAt": "string"
};

const AmimsEngineerPrisReportDtoFields = {
    "aircraft": "string",
    "createdAt": "string",
    "dateAcc": "string",
    "dateClose": "string",
    "dateInstall": "string",
    "dateIssued": "string",
    "datePris": "string",
    "description": "string",
    "idAircraft": "string",
    "idEngineerPris": "string",
    "idPosition": "string",
    "idSite": "string",
    "idUser": "string",
    "idUserAcc": "string",
    "idUserClose": "string",
    "idUserIssued": "string",
    "isDeleted": "number",
    "keyword": "string",
    "noIndex": "number",
    "notePris": "string",
    "numberJo": "string",
    "numberPris": "string",
    "numberWp": "string",
    "position": "string",
    "priority": "string",
    "site": "string",
    "statusPris": "string",
    "typePris": "string",
    "updatedAt": "string",
    "validasi": "number"
};

const AmimsEngineerPrisReturnDtoFields = {
    "dateReturn": "string",
    "idEngineerPris": "string",
    "idEngineerPrisReturn": "string",
    "statusReturn": "string"
};

const AmimsEngineerPrisReturnItemDtoFields = {
    "idEngineerPrisItem": "string",
    "idEngineerPrisReturnItem": "string",
    "isAccept": "string",
    "qtyReturn": "number"
};

const AmimsEngineerPrisReturnItemReportDtoFields = {
    "idEngineerPrisItem": "string",
    "idEngineerPrisReturnItem": "string",
    "isAccept": "string",
    "qtyReturn": "number"
};

const AmimsEngineerPrisReturnItemWidgetDtoFields = {
    "idEngineerPrisItem": "string",
    "idEngineerPrisReturnItem": "string",
    "isAccept": "string",
    "qtyReturn": "number",
    "total": "number"
};

const AmimsEngineerPrisReturnReportDtoFields = {
    "dateReturn": "string",
    "idEngineerPris": "string",
    "idEngineerPrisReturn": "string",
    "statusReturn": "string"
};

const AmimsEngineerPrisReturnWidgetDtoFields = {
    "dateReturn": "string",
    "idEngineerPris": "string",
    "idEngineerPrisReturn": "string",
    "statusReturn": "string",
    "total": "number"
};

const AmimsEngineerPrisWidgetDtoFields = {
    "createdAt": "string",
    "dateAcc": "string",
    "dateClose": "string",
    "dateInstall": "string",
    "dateIssued": "string",
    "datePris": "string",
    "description": "string",
    "idAircraft": "string",
    "idEngineerPris": "string",
    "idPosition": "string",
    "idSite": "string",
    "idUser": "string",
    "idUserAcc": "string",
    "idUserClose": "string",
    "idUserIssued": "string",
    "isDeleted": "number",
    "keyword": "string",
    "noIndex": "number",
    "notePris": "string",
    "numberJo": "string",
    "numberPris": "string",
    "numberWp": "string",
    "priority": "string",
    "statusPris": "string",
    "total": "number",
    "typePris": "string",
    "updatedAt": "string",
    "validasi": "number"
};

const AmimsEngineerRtiDtoFields = {
    "base": "string",
    "createdAt": "string",
    "dateRti": "string",
    "dispotition": "number",
    "hasPris": "string",
    "hashProcess": "string",
    "hashRpd": "string",
    "hashTechLog": "string",
    "idAircraft": "string",
    "idEngineerRti": "string",
    "idMpcJo": "string",
    "idPart": "string",
    "idPartInstall": "string",
    "idSite": "string",
    "inspectedBy": "number",
    "numberRti": "string",
    "reason": "string",
    "receivedBy": "number",
    "remainingHours": "number",
    "remarkDisposisi": "string",
    "returnBy": "number",
    "statusRti": "string",
    "statusService": "string",
    "tsnCycle": "number",
    "tsnCycleParent": "number",
    "tsnHours": "number",
    "tsnHoursParent": "number",
    "tsnVal": "number",
    "tsnVar": "string",
    "tsoCycle": "number",
    "tsoHours": "number",
    "tsoVal": "number",
    "tsoVar": "string",
    "typeRti": "string",
    "updatedAt": "string"
};

const AmimsEngineerRtiIdentifyDtoFields = {
    "dateInstall": "string",
    "idEngineerRti": "string",
    "idEngineerRtiIdentify": "string",
    "idPart": "string",
    "idPartInstall": "string",
    "parent": "string",
    "tsiCycle": "number",
    "tsiHours": "number",
    "tsiVal": "number",
    "tsiVar": "string",
    "tsnCycle": "number",
    "tsnHours": "number",
    "tsnVal": "number",
    "tsnVar": "string",
    "tsoCycle": "number",
    "tsoHours": "number",
    "tsoVal": "number",
    "tsoVar": "string",
    "warantyStartCycle": "number",
    "warantyStartDate": "string",
    "warantyStartDays": "number",
    "warantyStartHours": "number"
};

const AmimsEngineerRtiIdentifyReportDtoFields = {
    "dateInstall": "string",
    "idEngineerRti": "string",
    "idEngineerRtiIdentify": "string",
    "idPart": "string",
    "idPartInstall": "string",
    "parent": "string",
    "part": "string",
    "tsiCycle": "number",
    "tsiHours": "number",
    "tsiVal": "number",
    "tsiVar": "string",
    "tsnCycle": "number",
    "tsnHours": "number",
    "tsnVal": "number",
    "tsnVar": "string",
    "tsoCycle": "number",
    "tsoHours": "number",
    "tsoVal": "number",
    "tsoVar": "string",
    "warantyStartCycle": "number",
    "warantyStartDate": "string",
    "warantyStartDays": "number",
    "warantyStartHours": "number"
};

const AmimsEngineerRtiIdentifyWidgetDtoFields = {
    "dateInstall": "string",
    "idEngineerRti": "string",
    "idEngineerRtiIdentify": "string",
    "idPart": "string",
    "idPartInstall": "string",
    "parent": "string",
    "total": "number",
    "tsiCycle": "number",
    "tsiHours": "number",
    "tsiVal": "number",
    "tsiVar": "string",
    "tsnCycle": "number",
    "tsnHours": "number",
    "tsnVal": "number",
    "tsnVar": "string",
    "tsoCycle": "number",
    "tsoHours": "number",
    "tsoVal": "number",
    "tsoVar": "string",
    "warantyStartCycle": "number",
    "warantyStartDate": "string",
    "warantyStartDays": "number",
    "warantyStartHours": "number"
};

const AmimsEngineerRtiPartDtoFields = {
    "dateInstall": "string",
    "idEngineerRti": "string",
    "idEngineerRtiPart": "string",
    "idPart": "string",
    "idPartInstall": "string",
    "parent": "string",
    "tsiCycle": "number",
    "tsiHours": "number",
    "tsiVal": "number",
    "tsiVar": "string",
    "tsnCycle": "number",
    "tsnHours": "number",
    "tsnVal": "number",
    "tsnVar": "string",
    "tsoCycle": "number",
    "tsoHours": "number",
    "tsoVal": "number",
    "tsoVar": "string",
    "warantyStartCycle": "number",
    "warantyStartDate": "string",
    "warantyStartDays": "number",
    "warantyStartHours": "number"
};

const AmimsEngineerRtiPartReportDtoFields = {
    "dateInstall": "string",
    "idEngineerRti": "string",
    "idEngineerRtiPart": "string",
    "idPart": "string",
    "idPartInstall": "string",
    "parent": "string",
    "part": "string",
    "tsiCycle": "number",
    "tsiHours": "number",
    "tsiVal": "number",
    "tsiVar": "string",
    "tsnCycle": "number",
    "tsnHours": "number",
    "tsnVal": "number",
    "tsnVar": "string",
    "tsoCycle": "number",
    "tsoHours": "number",
    "tsoVal": "number",
    "tsoVar": "string",
    "warantyStartCycle": "number",
    "warantyStartDate": "string",
    "warantyStartDays": "number",
    "warantyStartHours": "number"
};

const AmimsEngineerRtiPartWidgetDtoFields = {
    "dateInstall": "string",
    "idEngineerRti": "string",
    "idEngineerRtiPart": "string",
    "idPart": "string",
    "idPartInstall": "string",
    "parent": "string",
    "total": "number",
    "tsiCycle": "number",
    "tsiHours": "number",
    "tsiVal": "number",
    "tsiVar": "string",
    "tsnCycle": "number",
    "tsnHours": "number",
    "tsnVal": "number",
    "tsnVar": "string",
    "tsoCycle": "number",
    "tsoHours": "number",
    "tsoVal": "number",
    "tsoVar": "string",
    "warantyStartCycle": "number",
    "warantyStartDate": "string",
    "warantyStartDays": "number",
    "warantyStartHours": "number"
};

const AmimsEngineerRtiReportDtoFields = {
    "aircraft": "string",
    "base": "string",
    "createdAt": "string",
    "dateRti": "string",
    "dispotition": "number",
    "hasPris": "string",
    "hashProcess": "string",
    "hashRpd": "string",
    "hashTechLog": "string",
    "idAircraft": "string",
    "idEngineerRti": "string",
    "idMpcJo": "string",
    "idPart": "string",
    "idPartInstall": "string",
    "idSite": "string",
    "inspectedBy": "number",
    "numberRti": "string",
    "part": "string",
    "reason": "string",
    "receivedBy": "number",
    "remainingHours": "number",
    "remarkDisposisi": "string",
    "returnBy": "number",
    "site": "string",
    "statusRti": "string",
    "statusService": "string",
    "tsnCycle": "number",
    "tsnCycleParent": "number",
    "tsnHours": "number",
    "tsnHoursParent": "number",
    "tsnVal": "number",
    "tsnVar": "string",
    "tsoCycle": "number",
    "tsoHours": "number",
    "tsoVal": "number",
    "tsoVar": "string",
    "typeRti": "string",
    "updatedAt": "string"
};

const AmimsEngineerRtiWidgetDtoFields = {
    "base": "string",
    "createdAt": "string",
    "dateRti": "string",
    "dispotition": "number",
    "hasPris": "string",
    "hashProcess": "string",
    "hashRpd": "string",
    "hashTechLog": "string",
    "idAircraft": "string",
    "idEngineerRti": "string",
    "idMpcJo": "string",
    "idPart": "string",
    "idPartInstall": "string",
    "idSite": "string",
    "inspectedBy": "number",
    "numberRti": "string",
    "reason": "string",
    "receivedBy": "number",
    "remainingHours": "number",
    "remarkDisposisi": "string",
    "returnBy": "number",
    "statusRti": "string",
    "statusService": "string",
    "total": "number",
    "tsnCycle": "number",
    "tsnCycleParent": "number",
    "tsnHours": "number",
    "tsnHoursParent": "number",
    "tsnVal": "number",
    "tsnVar": "string",
    "tsoCycle": "number",
    "tsoHours": "number",
    "tsoVal": "number",
    "tsoVar": "string",
    "typeRti": "string",
    "updatedAt": "string"
};

const AmimsFigureIndexDtoFields = {
    "description": "string",
    "figureIndex": "string",
    "idAta": "string",
    "idFigureIndex": "string"
};

const AmimsInspectionDtoFields = {
    "atachapter": "string",
    "createdAt": "string",
    "cycleTo": "number",
    "flightHoursTo": "number",
    "idAircraft": "string",
    "idInspection": "string",
    "idMaintenanceCode": "string",
    "idPart": "string",
    "idUser": "string",
    "noteInspection": "string",
    "oldId": "string",
    "repetitions": "number",
    "timeRangeTo": "number",
    "timeUnit": "string",
    "updatedAt": "string"
};

const AmimsInspectionReportDtoFields = {
    "aircraft": "string",
    "atachapter": "string",
    "createdAt": "string",
    "cycleTo": "number",
    "flightHoursTo": "number",
    "idAircraft": "string",
    "idInspection": "string",
    "idMaintenanceCode": "string",
    "idPart": "string",
    "idUser": "string",
    "noteInspection": "string",
    "oldId": "string",
    "part": "string",
    "repetitions": "number",
    "timeRangeTo": "number",
    "timeUnit": "string",
    "updatedAt": "string"
};

const AmimsInspectionWidgetDtoFields = {
    "atachapter": "string",
    "createdAt": "string",
    "cycleTo": "number",
    "flightHoursTo": "number",
    "idAircraft": "string",
    "idInspection": "string",
    "idMaintenanceCode": "string",
    "idPart": "string",
    "idUser": "string",
    "noteInspection": "string",
    "oldId": "string",
    "repetitions": "number",
    "timeRangeTo": "number",
    "timeUnit": "string",
    "total": "number",
    "updatedAt": "string"
};

const AmimsInternalGrnDtoFields = {
    "createdAt": "string",
    "dateAcc": "string",
    "dateGrn": "string",
    "idInternalGrn": "string",
    "idSite": "string",
    "idUser": "string",
    "idUserAcc": "string",
    "numberGrn": "string",
    "remark": "string",
    "statusGrn": "string",
    "updatedAt": "string",
    "validasi": "number"
};

const AmimsInternalGrnItemDtoFields = {
    "createdAt": "string",
    "idEngineerPrisItem": "string",
    "idInternalGrn": "string",
    "idInternalGrnItem": "string",
    "idMpart": "string",
    "idPart": "string",
    "qtyGrn": "number",
    "remark": "string",
    "statusItem": "string",
    "updatedAt": "string"
};

const AmimsInternalGrnItemReportDtoFields = {
    "createdAt": "string",
    "idEngineerPrisItem": "string",
    "idInternalGrn": "string",
    "idInternalGrnItem": "string",
    "idMpart": "string",
    "idPart": "string",
    "mpart": "string",
    "part": "string",
    "qtyGrn": "number",
    "remark": "string",
    "statusItem": "string",
    "updatedAt": "string"
};

const AmimsInternalGrnItemWidgetDtoFields = {
    "createdAt": "string",
    "idEngineerPrisItem": "string",
    "idInternalGrn": "string",
    "idInternalGrnItem": "string",
    "idMpart": "string",
    "idPart": "string",
    "qtyGrn": "number",
    "remark": "string",
    "statusItem": "string",
    "total": "number",
    "updatedAt": "string"
};

const AmimsInternalGrnReportDtoFields = {
    "createdAt": "string",
    "dateAcc": "string",
    "dateGrn": "string",
    "idInternalGrn": "string",
    "idSite": "string",
    "idUser": "string",
    "idUserAcc": "string",
    "numberGrn": "string",
    "remark": "string",
    "site": "string",
    "statusGrn": "string",
    "updatedAt": "string",
    "validasi": "number"
};

const AmimsInternalGrnWidgetDtoFields = {
    "createdAt": "string",
    "dateAcc": "string",
    "dateGrn": "string",
    "idInternalGrn": "string",
    "idSite": "string",
    "idUser": "string",
    "idUserAcc": "string",
    "numberGrn": "string",
    "remark": "string",
    "statusGrn": "string",
    "total": "number",
    "updatedAt": "string",
    "validasi": "number"
};

const AmimsLastMaintenanceDtoFields = {
    "createdAt": "string",
    "idLastMaintenance": "string",
    "idMaintenance": "string",
    "idMpcJo": "string",
    "idPart": "string",
    "idUser": "string",
    "lastCycle": "number",
    "lastDate": "string",
    "lastHours": "number",
    "oldId": "string",
    "parentCycle": "number",
    "parentHours": "number",
    "typeOfWork": "number",
    "updatedAt": "string"
};

const AmimsLastMaintenanceReportDtoFields = {
    "createdAt": "string",
    "idLastMaintenance": "string",
    "idMaintenance": "string",
    "idMpcJo": "string",
    "idPart": "string",
    "idUser": "string",
    "lastCycle": "number",
    "lastDate": "string",
    "lastHours": "number",
    "maintenance": "string",
    "oldId": "string",
    "parentCycle": "number",
    "parentHours": "number",
    "part": "string",
    "typeOfWork": "number",
    "updatedAt": "string"
};

const AmimsLastMaintenanceWidgetDtoFields = {
    "createdAt": "string",
    "idLastMaintenance": "string",
    "idMaintenance": "string",
    "idMpcJo": "string",
    "idPart": "string",
    "idUser": "string",
    "lastCycle": "number",
    "lastDate": "string",
    "lastHours": "number",
    "oldId": "string",
    "parentCycle": "number",
    "parentHours": "number",
    "total": "number",
    "typeOfWork": "number",
    "updatedAt": "string"
};

const AmimsLibFormIssuedDtoFields = {
    "createdAt": "string",
    "idLibFormIssued": "string",
    "lastUpdate": "string",
    "nameFile": "string",
    "numberForm": "string",
    "numberW": "string",
    "revision": "string",
    "updatedAt": "string"
};

const AmimsLibReferenceDtoFields = {
    "createdAt": "string",
    "idLibReference": "string",
    "lastUpdate": "string",
    "nameFile": "string",
    "numberReference": "string",
    "updatedAt": "string"
};

const AmimsLibUploadDtoFields = {
    "category": "string",
    "createdAt": "string",
    "fileDate": "string",
    "fileName": "string",
    "fileNumber": "string",
    "forModule": "string",
    "idLibUpload": "string",
    "idModule": "string",
    "updatedAt": "string"
};

const AmimsLifeTimeLimitDtoFields = {
    "childnameLifeTimeLimit": "string",
    "idLifeTimeLimit": "string",
    "isDeleted": "number",
    "lifeTimeLimit": "string"
};

const AmimsLifeTimeLimitReportDtoFields = {
    "childnameLifeTimeLimit": "string",
    "idLifeTimeLimit": "string",
    "isDeleted": "number",
    "lifeTimeLimit": "string"
};

const AmimsLifeTimeLimitWidgetDtoFields = {
    "childnameLifeTimeLimit": "string",
    "idLifeTimeLimit": "string",
    "isDeleted": "number",
    "lifeTimeLimit": "string",
    "total": "number"
};

const AmimsLocationFlightDtoFields = {
    "address": "string",
    "createdAt": "string",
    "idLocationFlight": "string",
    "lat": "string",
    "lon": "string",
    "nameLocation": "string",
    "statusLocation": "string",
    "updatedAt": "string"
};

const AmimsLocationFlightReportDtoFields = {
    "address": "string",
    "createdAt": "string",
    "idLocationFlight": "string",
    "lat": "string",
    "lon": "string",
    "nameLocation": "string",
    "statusLocation": "string",
    "updatedAt": "string"
};

const AmimsLocationFlightWidgetDtoFields = {
    "address": "string",
    "createdAt": "string",
    "idLocationFlight": "string",
    "lat": "string",
    "lon": "string",
    "nameLocation": "string",
    "statusLocation": "string",
    "total": "number",
    "updatedAt": "string"
};

const AmimsLogProcessDtoFields = {
    "adj1": "number",
    "adj2": "number",
    "adj3": "number",
    "bugIndexLog": "number",
    "calculatedCycle": "string",
    "calculatedHours": "string",
    "cgPenalti": "string",
    "cycle": "number",
    "cycleBf": "number",
    "cycleCf": "number",
    "cycleFlight": "number",
    "factor1": "number",
    "factor2": "number",
    "factor3": "number",
    "fullCycleBf": "number",
    "fullCycleFlt": "number",
    "hasFor": "string",
    "hasUpdate": "number",
    "hoistLeft": "number",
    "hoistOperation": "string",
    "hoistRight": "number",
    "hoistUsage": "number",
    "hours": "number",
    "hoursBf": "number",
    "hoursCf": "number",
    "hoursFlight": "number",
    "idLogProcess": "string",
    "idMpart": "string",
    "idPart": "string",
    "idPartInstall": "string",
    "idTechLog": "string",
    "landings": "number",
    "n1": "number",
    "n2": "number",
    "parent": "string",
    "partCycleBf": "number",
    "partCycleFlt": "number",
    "rumusCycle": "string",
    "rumusHours": "string",
    "sn": "string",
    "timeAboveBf": "number",
    "timeAboveFlt": "number",
    "tsnCycle": "number",
    "tsnHours": "number",
    "useHoistLeft": "number",
    "useHoistRight": "number",
    "xcycleInput": "number"
};

const AmimsLogProcessReportDtoFields = {
    "adj1": "number",
    "adj2": "number",
    "adj3": "number",
    "bugIndexLog": "number",
    "calculatedCycle": "string",
    "calculatedHours": "string",
    "cgPenalti": "string",
    "cycle": "number",
    "cycleBf": "number",
    "cycleCf": "number",
    "cycleFlight": "number",
    "factor1": "number",
    "factor2": "number",
    "factor3": "number",
    "fullCycleBf": "number",
    "fullCycleFlt": "number",
    "hasFor": "string",
    "hasUpdate": "number",
    "hoistLeft": "number",
    "hoistOperation": "string",
    "hoistRight": "number",
    "hoistUsage": "number",
    "hours": "number",
    "hoursBf": "number",
    "hoursCf": "number",
    "hoursFlight": "number",
    "idLogProcess": "string",
    "idMpart": "string",
    "idPart": "string",
    "idPartInstall": "string",
    "idTechLog": "string",
    "landings": "number",
    "mpart": "string",
    "n1": "number",
    "n2": "number",
    "parent": "string",
    "part": "string",
    "partCycleBf": "number",
    "partCycleFlt": "number",
    "rumusCycle": "string",
    "rumusHours": "string",
    "sn": "string",
    "timeAboveBf": "number",
    "timeAboveFlt": "number",
    "tsnCycle": "number",
    "tsnHours": "number",
    "useHoistLeft": "number",
    "useHoistRight": "number",
    "xcycleInput": "number"
};

const AmimsLogProcessWidgetDtoFields = {
    "adj1": "number",
    "adj2": "number",
    "adj3": "number",
    "bugIndexLog": "number",
    "calculatedCycle": "string",
    "calculatedHours": "string",
    "cgPenalti": "string",
    "cycle": "number",
    "cycleBf": "number",
    "cycleCf": "number",
    "cycleFlight": "number",
    "factor1": "number",
    "factor2": "number",
    "factor3": "number",
    "fullCycleBf": "number",
    "fullCycleFlt": "number",
    "hasFor": "string",
    "hasUpdate": "number",
    "hoistLeft": "number",
    "hoistOperation": "string",
    "hoistRight": "number",
    "hoistUsage": "number",
    "hours": "number",
    "hoursBf": "number",
    "hoursCf": "number",
    "hoursFlight": "number",
    "idLogProcess": "string",
    "idMpart": "string",
    "idPart": "string",
    "idPartInstall": "string",
    "idTechLog": "string",
    "landings": "number",
    "n1": "number",
    "n2": "number",
    "parent": "string",
    "partCycleBf": "number",
    "partCycleFlt": "number",
    "rumusCycle": "string",
    "rumusHours": "string",
    "sn": "string",
    "timeAboveBf": "number",
    "timeAboveFlt": "number",
    "total": "number",
    "tsnCycle": "number",
    "tsnHours": "number",
    "useHoistLeft": "number",
    "useHoistRight": "number",
    "xcycleInput": "number"
};

const AmimsLogSpDtoFields = {
    "createdAt": "string",
    "dateClose": "string",
    "desk": "string",
    "hasId": "string",
    "id": "string",
    "idLogSp": "string",
    "name": "string",
    "param1": "string",
    "param2": "string",
    "sp": "string",
    "status": "string"
};

const AmimsLogSpReportDtoFields = {
    "createdAt": "string",
    "dateClose": "string",
    "desk": "string",
    "hasId": "string",
    "id": "string",
    "idLogSp": "string",
    "name": "string",
    "param1": "string",
    "param2": "string",
    "sp": "string",
    "status": "string"
};

const AmimsLogSpWidgetDtoFields = {
    "createdAt": "string",
    "dateClose": "string",
    "desk": "string",
    "hasId": "string",
    "id": "string",
    "idLogSp": "string",
    "name": "string",
    "param1": "string",
    "param2": "string",
    "sp": "string",
    "status": "string",
    "total": "number"
};

const AmimsLogTransferDtoFields = {
    "dateTransfer": "string",
    "fromIdPart": "string",
    "fromSite": "string",
    "idLogTransfer": "string",
    "idMpart": "string",
    "idUser": "string",
    "issingle": "string",
    "qty": "number",
    "toIdPart": "string",
    "toSite": "number"
};

const AmimsLogTransferReportDtoFields = {
    "dateTransfer": "string",
    "fromIdPart": "string",
    "fromSite": "string",
    "idLogTransfer": "string",
    "idMpart": "string",
    "idUser": "string",
    "issingle": "string",
    "mpart": "string",
    "qty": "number",
    "toIdPart": "string",
    "toSite": "number"
};

const AmimsLogTransferWidgetDtoFields = {
    "dateTransfer": "string",
    "fromIdPart": "string",
    "fromSite": "string",
    "idLogTransfer": "string",
    "idMpart": "string",
    "idUser": "string",
    "issingle": "string",
    "qty": "number",
    "toIdPart": "string",
    "toSite": "number",
    "total": "number"
};

const AmimsLogTsnTsoDtoFields = {
    "batasId": "string",
    "createdAt": "string",
    "cycle": "number",
    "hours": "number",
    "idLogTsnTso": "string",
    "idPart": "string",
    "idTechLog": "string",
    "tsnC": "number",
    "tsnH": "number",
    "tsoC": "number",
    "tsoH": "number"
};

const AmimsLogTsnTsoReportDtoFields = {
    "batasId": "string",
    "createdAt": "string",
    "cycle": "number",
    "hours": "number",
    "idLogTsnTso": "string",
    "idPart": "string",
    "idTechLog": "string",
    "part": "string",
    "tsnC": "number",
    "tsnH": "number",
    "tsoC": "number",
    "tsoH": "number"
};

const AmimsLogTsnTsoWidgetDtoFields = {
    "batasId": "string",
    "createdAt": "string",
    "cycle": "number",
    "hours": "number",
    "idLogTsnTso": "string",
    "idPart": "string",
    "idTechLog": "string",
    "total": "number",
    "tsnC": "number",
    "tsnH": "number",
    "tsoC": "number",
    "tsoH": "number"
};

const AmimsLogUserDtoFields = {
    "dateLog": "string",
    "idLogUser": "string",
    "idUser": "string",
    "method": "string",
    "methodValue": "string",
    "typeIdKey": "string",
    "typeLog": "string",
    "typeValue": "string",
    "typeWork": "string"
};

const AmimsMaintenanceCodeDtoFields = {
    "classification": "string",
    "descriptionMaintenance": "string",
    "idMaintenanceCode": "string",
    "isDeleted": "number",
    "maintenanceCode": "string",
    "oldId": "string",
    "reference": "string",
    "updatedAt": "string"
};

const AmimsMaintenanceCodeFormIssuedDtoFields = {
    "idLibFormIssued": "string",
    "idMaintenanceCode": "string",
    "idMaintenanceCodeFormIssued": "string"
};

const AmimsMaintenanceCodeReferenceDtoFields = {
    "idLibReference": "string",
    "idMaintenanceCode": "string",
    "idMaintenanceCodeReference": "string"
};

const AmimsMaintenanceDtoFields = {
    "atachapter": "string",
    "createdAt": "string",
    "cycleFrom": "number",
    "cycleTo": "number",
    "flightHoursFrom": "number",
    "flightHoursTo": "number",
    "idMaintenance": "string",
    "idMaintenanceCode": "string",
    "idMpart": "string",
    "idUser": "string",
    "noteMaintenance": "string",
    "oldId": "string",
    "onLocation": "string",
    "repetitions": "number",
    "timeRangeForm": "number",
    "timeRangeTo": "number",
    "timeUnit": "string",
    "typeMaintenance": "string",
    "updatedAt": "string"
};

const AmimsMaintenanceReportDtoFields = {
    "atachapter": "string",
    "createdAt": "string",
    "cycleFrom": "number",
    "cycleTo": "number",
    "flightHoursFrom": "number",
    "flightHoursTo": "number",
    "idMaintenance": "string",
    "idMaintenanceCode": "string",
    "idMpart": "string",
    "idUser": "string",
    "mpart": "string",
    "noteMaintenance": "string",
    "oldId": "string",
    "onLocation": "string",
    "repetitions": "number",
    "timeRangeForm": "number",
    "timeRangeTo": "number",
    "timeUnit": "string",
    "typeMaintenance": "string",
    "updatedAt": "string"
};

const AmimsMaintenanceWidgetDtoFields = {
    "atachapter": "string",
    "createdAt": "string",
    "cycleFrom": "number",
    "cycleTo": "number",
    "flightHoursFrom": "number",
    "flightHoursTo": "number",
    "idMaintenance": "string",
    "idMaintenanceCode": "string",
    "idMpart": "string",
    "idUser": "string",
    "noteMaintenance": "string",
    "oldId": "string",
    "onLocation": "string",
    "repetitions": "number",
    "timeRangeForm": "number",
    "timeRangeTo": "number",
    "timeUnit": "string",
    "total": "number",
    "typeMaintenance": "string",
    "updatedAt": "string"
};

const AmimsMcurrencyDtoFields = {
    "code": "string",
    "createdAt": "string",
    "currency": "string",
    "idMcurrency": "string",
    "isDeleted": "number",
    "statusCurrency": "string",
    "updatedAt": "string",
    "usdRate": "number"
};

const AmimsMelDtoFields = {
    "day": "number",
    "descriptionMel": "string",
    "idMel": "string",
    "mel": "string"
};

const AmimsMpartDtoFields = {
    "calculatedCycle": "string",
    "calculatedHours": "string",
    "childname": "string",
    "codeAtaMentah": "string",
    "createdAt": "string",
    "descriptionMpart": "string",
    "forAc": "number",
    "idAta": "string",
    "idConditionMonitoring": "string",
    "idGroup": "string",
    "idLifeTimeLimit": "string",
    "idMpart": "string",
    "idPartCategory": "string",
    "idPartid": "string",
    "isDeleted": "number",
    "isMandatory": "string",
    "ismayor": "string",
    "keyword": "string",
    "lifeLimitCycle": "number",
    "lifeLimitHours": "number",
    "lifeLimitVal": "number",
    "lifeLimitVar": "string",
    "manufactureMpart": "string",
    "mat_82": "string",
    "mfigureIndex": "string",
    "minQty": "number",
    "mitemIndex": "string",
    "mtboCycle": "number",
    "mtboHours": "number",
    "mtboVal": "number",
    "mtboVar": "string",
    "oldAtachapter": "string",
    "oldId": "string",
    "parent": "string",
    "partNumber": "string",
    "partname": "string",
    "refMel": "string",
    "statusMpart": "string",
    "unit": "string",
    "updatedAt": "string"
};

const AmimsMpartReportDtoFields = {
    "ata": "string",
    "calculatedCycle": "string",
    "calculatedHours": "string",
    "childname": "string",
    "codeAtaMentah": "string",
    "createdAt": "string",
    "descriptionMpart": "string",
    "forAc": "number",
    "idAta": "string",
    "idConditionMonitoring": "string",
    "idGroup": "string",
    "idLifeTimeLimit": "string",
    "idMpart": "string",
    "idPartCategory": "string",
    "idPartid": "string",
    "isDeleted": "number",
    "isMandatory": "string",
    "ismayor": "string",
    "keyword": "string",
    "lifeLimitCycle": "number",
    "lifeLimitHours": "number",
    "lifeLimitVal": "number",
    "lifeLimitVar": "string",
    "manufactureMpart": "string",
    "mat_82": "string",
    "mfigureIndex": "string",
    "minQty": "number",
    "mitemIndex": "string",
    "mtboCycle": "number",
    "mtboHours": "number",
    "mtboVal": "number",
    "mtboVar": "string",
    "oldAtachapter": "string",
    "oldId": "string",
    "parent": "string",
    "partNumber": "string",
    "partid": "string",
    "partname": "string",
    "refMel": "string",
    "statusMpart": "string",
    "unit": "string",
    "updatedAt": "string"
};

const AmimsMpartWidgetDtoFields = {
    "calculatedCycle": "string",
    "calculatedHours": "string",
    "childname": "string",
    "codeAtaMentah": "string",
    "createdAt": "string",
    "descriptionMpart": "string",
    "forAc": "number",
    "idAta": "string",
    "idConditionMonitoring": "string",
    "idGroup": "string",
    "idLifeTimeLimit": "string",
    "idMpart": "string",
    "idPartCategory": "string",
    "idPartid": "string",
    "isDeleted": "number",
    "isMandatory": "string",
    "ismayor": "string",
    "keyword": "string",
    "lifeLimitCycle": "number",
    "lifeLimitHours": "number",
    "lifeLimitVal": "number",
    "lifeLimitVar": "string",
    "manufactureMpart": "string",
    "mat_82": "string",
    "mfigureIndex": "string",
    "minQty": "number",
    "mitemIndex": "string",
    "mtboCycle": "number",
    "mtboHours": "number",
    "mtboVal": "number",
    "mtboVar": "string",
    "oldAtachapter": "string",
    "oldId": "string",
    "parent": "string",
    "partNumber": "string",
    "partname": "string",
    "refMel": "string",
    "statusMpart": "string",
    "total": "number",
    "unit": "string",
    "updatedAt": "string"
};

const AmimsMpcGseDtoFields = {
    "createdAt": "string",
    "dateGse": "string",
    "idEngineerRti": "string",
    "idMpcGse": "string",
    "idUserGse": "string",
    "noteGse": "string",
    "statusGse": "string",
    "updatedAt": "string"
};

const AmimsMpcGseReportDtoFields = {
    "createdAt": "string",
    "dateGse": "string",
    "idEngineerRti": "string",
    "idMpcGse": "string",
    "idUserGse": "string",
    "noteGse": "string",
    "statusGse": "string",
    "updatedAt": "string"
};

const AmimsMpcGseWidgetDtoFields = {
    "createdAt": "string",
    "dateGse": "string",
    "idEngineerRti": "string",
    "idMpcGse": "string",
    "idUserGse": "string",
    "noteGse": "string",
    "statusGse": "string",
    "total": "number",
    "updatedAt": "string"
};

const AmimsMpcJoDtoFields = {
    "action": "string",
    "compliteCycle": "number",
    "compliteDate": "string",
    "compliteHours": "number",
    "createdAt": "string",
    "customIssued": "string",
    "customJob": "string",
    "customRef": "string",
    "cycleFrom": "number",
    "cycleTo": "number",
    "dateJo": "string",
    "hourseFrom": "number",
    "hourseTo": "number",
    "idDueList": "string",
    "idMaintenance": "string",
    "idMpcJo": "string",
    "idPart": "string",
    "idTechLog": "string",
    "idTypeOfwork": "string",
    "idUser": "string",
    "isPriority": "string",
    "noteJo": "string",
    "numberJo": "string",
    "onAircraft": "string",
    "onSite": "number",
    "originalCycle": "number",
    "originalDate": "string",
    "originalHours": "number",
    "parentAss": "string",
    "reference": "string",
    "roflag": "string",
    "statusJo": "string",
    "timeRangeFrom": "number",
    "timeRangeTo": "number",
    "updatedAt": "string",
    "workDue": "string"
};

const AmimsMpcJoOperatorDtoFields = {
    "idMpcJo": "string",
    "idMpcJoOperator": "string",
    "idOperator": "string",
    "jobDesc": "string",
    "operator": "string",
    "position": "string"
};

const AmimsMpcJoOperatorReportDtoFields = {
    "idMpcJo": "string",
    "idMpcJoOperator": "string",
    "idOperator": "string",
    "jobDesc": "string",
    "operator": "string",
    "position": "string"
};

const AmimsMpcJoOperatorWidgetDtoFields = {
    "idMpcJo": "string",
    "idMpcJoOperator": "string",
    "idOperator": "string",
    "jobDesc": "string",
    "operator": "string",
    "position": "string",
    "total": "number"
};

const AmimsMpcJoReportDtoFields = {
    "action": "string",
    "compliteCycle": "number",
    "compliteDate": "string",
    "compliteHours": "number",
    "createdAt": "string",
    "customIssued": "string",
    "customJob": "string",
    "customRef": "string",
    "cycleFrom": "number",
    "cycleTo": "number",
    "dateJo": "string",
    "hourseFrom": "number",
    "hourseTo": "number",
    "idDueList": "string",
    "idMaintenance": "string",
    "idMpcJo": "string",
    "idPart": "string",
    "idTechLog": "string",
    "idTypeOfwork": "string",
    "idUser": "string",
    "isPriority": "string",
    "maintenance": "string",
    "noteJo": "string",
    "numberJo": "string",
    "onAircraft": "string",
    "onSite": "number",
    "originalCycle": "number",
    "originalDate": "string",
    "originalHours": "number",
    "parentAss": "string",
    "part": "string",
    "reference": "string",
    "roflag": "string",
    "statusJo": "string",
    "timeRangeFrom": "number",
    "timeRangeTo": "number",
    "updatedAt": "string",
    "workDue": "string"
};

const AmimsMpcJoWidgetDtoFields = {
    "action": "string",
    "compliteCycle": "number",
    "compliteDate": "string",
    "compliteHours": "number",
    "createdAt": "string",
    "customIssued": "string",
    "customJob": "string",
    "customRef": "string",
    "cycleFrom": "number",
    "cycleTo": "number",
    "dateJo": "string",
    "hourseFrom": "number",
    "hourseTo": "number",
    "idDueList": "string",
    "idMaintenance": "string",
    "idMpcJo": "string",
    "idPart": "string",
    "idTechLog": "string",
    "idTypeOfwork": "string",
    "idUser": "string",
    "isPriority": "string",
    "noteJo": "string",
    "numberJo": "string",
    "onAircraft": "string",
    "onSite": "number",
    "originalCycle": "number",
    "originalDate": "string",
    "originalHours": "number",
    "parentAss": "string",
    "reference": "string",
    "roflag": "string",
    "statusJo": "string",
    "timeRangeFrom": "number",
    "timeRangeTo": "number",
    "total": "number",
    "updatedAt": "string",
    "workDue": "string"
};

const AmimsMpcPiroDtoFields = {
    "createdAt": "string",
    "dateAcc": "string",
    "datePiro": "string",
    "description": "string",
    "idAircraft": "string",
    "idMpcPiro": "string",
    "idSite": "string",
    "idUser": "string",
    "idUserAcc": "string",
    "isDeleted": "number",
    "keyword": "string",
    "noIndex": "number",
    "notePiro": "string",
    "numberPiro": "string",
    "statusPiro": "string",
    "typePiro": "string",
    "updatedAt": "string",
    "validasi": "number"
};

const AmimsMpcPiroItemDtoFields = {
    "createdAt": "string",
    "forFigureIndex": "string",
    "idMpart": "string",
    "idMpcPiro": "string",
    "idMpcPiroItem": "string",
    "isDeleted": "number",
    "noteItemPiro": "string",
    "priority": "string",
    "qtyPiro": "number",
    "statusItem": "string",
    "updatedAt": "string"
};

const AmimsMpcPiroItemReportDtoFields = {
    "createdAt": "string",
    "forFigureIndex": "string",
    "idMpart": "string",
    "idMpcPiro": "string",
    "idMpcPiroItem": "string",
    "isDeleted": "number",
    "mpart": "string",
    "noteItemPiro": "string",
    "priority": "string",
    "qtyPiro": "number",
    "statusItem": "string",
    "updatedAt": "string"
};

const AmimsMpcPiroItemWidgetDtoFields = {
    "createdAt": "string",
    "forFigureIndex": "string",
    "idMpart": "string",
    "idMpcPiro": "string",
    "idMpcPiroItem": "string",
    "isDeleted": "number",
    "noteItemPiro": "string",
    "priority": "string",
    "qtyPiro": "number",
    "statusItem": "string",
    "total": "number",
    "updatedAt": "string"
};

const AmimsMpcPiroReportDtoFields = {
    "aircraft": "string",
    "createdAt": "string",
    "dateAcc": "string",
    "datePiro": "string",
    "description": "string",
    "idAircraft": "string",
    "idMpcPiro": "string",
    "idSite": "string",
    "idUser": "string",
    "idUserAcc": "string",
    "isDeleted": "number",
    "keyword": "string",
    "noIndex": "number",
    "notePiro": "string",
    "numberPiro": "string",
    "site": "string",
    "statusPiro": "string",
    "typePiro": "string",
    "updatedAt": "string",
    "validasi": "number"
};

const AmimsMpcPiroWidgetDtoFields = {
    "createdAt": "string",
    "dateAcc": "string",
    "datePiro": "string",
    "description": "string",
    "idAircraft": "string",
    "idMpcPiro": "string",
    "idSite": "string",
    "idUser": "string",
    "idUserAcc": "string",
    "isDeleted": "number",
    "keyword": "string",
    "noIndex": "number",
    "notePiro": "string",
    "numberPiro": "string",
    "statusPiro": "string",
    "total": "number",
    "typePiro": "string",
    "updatedAt": "string",
    "validasi": "number"
};

const AmimsMpcSelfMaintenanceDtoFields = {
    "createdAt": "string",
    "dateAccQa": "string",
    "dateMaintenance": "string",
    "doc": "string",
    "idEngineerRti": "string",
    "idMpcSelfMaintenance": "string",
    "idSite": "string",
    "idUserMaintenance": "string",
    "idUserQa": "string",
    "numberMaintenance": "string",
    "reportMaintenance": "string",
    "statusMaintenance": "string",
    "typeMaintenance": "string",
    "updatedAt": "string"
};

const AmimsMpcSelfMaintenanceReportDtoFields = {
    "createdAt": "string",
    "dateAccQa": "string",
    "dateMaintenance": "string",
    "doc": "string",
    "idEngineerRti": "string",
    "idMpcSelfMaintenance": "string",
    "idSite": "string",
    "idUserMaintenance": "string",
    "idUserQa": "string",
    "numberMaintenance": "string",
    "reportMaintenance": "string",
    "site": "string",
    "statusMaintenance": "string",
    "typeMaintenance": "string",
    "updatedAt": "string"
};

const AmimsMpcSelfMaintenanceWidgetDtoFields = {
    "createdAt": "string",
    "dateAccQa": "string",
    "dateMaintenance": "string",
    "doc": "string",
    "idEngineerRti": "string",
    "idMpcSelfMaintenance": "string",
    "idSite": "string",
    "idUserMaintenance": "string",
    "idUserQa": "string",
    "numberMaintenance": "string",
    "reportMaintenance": "string",
    "statusMaintenance": "string",
    "total": "number",
    "typeMaintenance": "string",
    "updatedAt": "string"
};

const AmimsMpcWpDtoFields = {
    "createdAt": "string",
    "dateAcc": "string",
    "endDateWp": "string",
    "endHours": "number",
    "engineEnd": "string",
    "engineStart": "string",
    "idAircraft": "string",
    "idMpcWp": "string",
    "idUserMm": "string",
    "idUserMpc": "string",
    "noteWp": "string",
    "numberWp": "string",
    "onSite": "number",
    "period": "string",
    "periodYear": "number",
    "place": "string",
    "reason": "string",
    "startDateWp": "string",
    "startHours": "number",
    "statusWp": "string",
    "typeWork": "string",
    "updatedAt": "string",
    "validated": "number"
};

const AmimsMpcWpReportDtoFields = {
    "aircraft": "string",
    "createdAt": "string",
    "dateAcc": "string",
    "endDateWp": "string",
    "endHours": "number",
    "engineEnd": "string",
    "engineStart": "string",
    "idAircraft": "string",
    "idMpcWp": "string",
    "idUserMm": "string",
    "idUserMpc": "string",
    "noteWp": "string",
    "numberWp": "string",
    "onSite": "number",
    "period": "string",
    "periodYear": "number",
    "place": "string",
    "reason": "string",
    "startDateWp": "string",
    "startHours": "number",
    "statusWp": "string",
    "typeWork": "string",
    "updatedAt": "string",
    "validated": "number"
};

const AmimsMpcWpWidgetDtoFields = {
    "createdAt": "string",
    "dateAcc": "string",
    "endDateWp": "string",
    "endHours": "number",
    "engineEnd": "string",
    "engineStart": "string",
    "idAircraft": "string",
    "idMpcWp": "string",
    "idUserMm": "string",
    "idUserMpc": "string",
    "noteWp": "string",
    "numberWp": "string",
    "onSite": "number",
    "period": "string",
    "periodYear": "number",
    "place": "string",
    "reason": "string",
    "startDateWp": "string",
    "startHours": "number",
    "statusWp": "string",
    "total": "number",
    "typeWork": "string",
    "updatedAt": "string",
    "validated": "number"
};

const AmimsPartActypeDtoFields = {
    "createdAt": "string",
    "idActype": "string",
    "idActypeOld": "string",
    "idMpart": "string",
    "idPartActype": "string",
    "updatedAt": "string"
};

const AmimsPartActypeReportDtoFields = {
    "actype": "string",
    "createdAt": "string",
    "idActype": "string",
    "idActypeOld": "string",
    "idMpart": "string",
    "idPartActype": "string",
    "mpart": "string",
    "updatedAt": "string"
};

const AmimsPartActypeWidgetDtoFields = {
    "createdAt": "string",
    "idActype": "string",
    "idActypeOld": "string",
    "idMpart": "string",
    "idPartActype": "string",
    "total": "number",
    "updatedAt": "string"
};

const AmimsPartAlternativeDtoFields = {
    "forMpart": "string",
    "idMpart": "string",
    "idPartAlternative": "string"
};

const AmimsPartAlternativeReportDtoFields = {
    "forMpart": "string",
    "idMpart": "string",
    "idPartAlternative": "string",
    "mpart": "string"
};

const AmimsPartAlternativeWidgetDtoFields = {
    "forMpart": "string",
    "idMpart": "string",
    "idPartAlternative": "string",
    "total": "number"
};

const AmimsPartAtaDtoFields = {
    "figure": "string",
    "idAta": "string",
    "idMpart": "string",
    "idPartAta": "string",
    "item": "string"
};

const AmimsPartAtaReportDtoFields = {
    "ata": "string",
    "figure": "string",
    "idAta": "string",
    "idMpart": "string",
    "idPartAta": "string",
    "item": "string",
    "mpart": "string"
};

const AmimsPartAtaWidgetDtoFields = {
    "figure": "string",
    "idAta": "string",
    "idMpart": "string",
    "idPartAta": "string",
    "item": "string",
    "total": "number"
};

const AmimsPartCategoryDtoFields = {
    "category": "string",
    "createdAt": "string",
    "descriptionCat": "string",
    "idPartCategory": "string",
    "isDeleted": "number",
    "parentCat": "number",
    "updatedAt": "string"
};

const AmimsPartCategoryReportDtoFields = {
    "category": "string",
    "createdAt": "string",
    "descriptionCat": "string",
    "idPartCategory": "string",
    "isDeleted": "number",
    "parentCat": "number",
    "updatedAt": "string"
};

const AmimsPartCategoryWidgetDtoFields = {
    "category": "string",
    "createdAt": "string",
    "descriptionCat": "string",
    "idPartCategory": "string",
    "isDeleted": "number",
    "parentCat": "number",
    "total": "number",
    "updatedAt": "string"
};

const AmimsPartConditionDtoFields = {
    "childnamePartCondition": "string",
    "idPartCondition": "string",
    "isDeleted": "number",
    "partCondition": "string"
};

const AmimsPartConditionReportDtoFields = {
    "childnamePartCondition": "string",
    "idPartCondition": "string",
    "isDeleted": "number",
    "partCondition": "string"
};

const AmimsPartConditionWidgetDtoFields = {
    "childnamePartCondition": "string",
    "idPartCondition": "string",
    "isDeleted": "number",
    "partCondition": "string",
    "total": "number"
};

const AmimsPartDtoFields = {
    "bin": "string",
    "certificationNo": "string",
    "createdAt": "string",
    "dateOrder": "string",
    "endOfLife": "string",
    "firstInstallC": "number",
    "firstInstallDate": "string",
    "firstInstallH": "number",
    "groupStatus": "string",
    "idConditionMonitoring": "string",
    "idCurrency": "string",
    "idLifeTimeLimit": "string",
    "idMpart": "string",
    "idPart": "string",
    "idPartCondition": "string",
    "idPurGrn": "string",
    "idPurPoItem": "string",
    "idPurPrcl": "string",
    "idPurVendor": "string",
    "idSite": "string",
    "idTypeOfwork": "string",
    "idUser": "string",
    "idWarranty": "string",
    "isDeleted": "number",
    "lifeLimitCycle": "number",
    "lifeLimitHours": "number",
    "lifeLimitVal": "number",
    "lifeLimitVar": "string",
    "manufacture": "string",
    "manufactureDate": "string",
    "newFirstInstallH": "number",
    "oldId": "string",
    "oldParent": "string",
    "partParent": "string",
    "position": "string",
    "price": "number",
    "purchaseDate": "string",
    "qty": "number",
    "sn": "string",
    "startInstallC": "number",
    "startInstallDate": "string",
    "startInstallH": "number",
    "statusOnInventory": "string",
    "tbiCycle": "number",
    "tbiHours": "number",
    "tbiVal": "number",
    "tbiVar": "string",
    "tboCycle": "number",
    "tboHours": "number",
    "tboVal": "number",
    "tboVar": "string",
    "tempUse": "number",
    "tsiCycle": "number",
    "tsiHours": "number",
    "tsiVal": "number",
    "tsiVar": "string",
    "tsnCycle": "number",
    "tsnHours": "number",
    "tsnVal": "number",
    "tsnVar": "string",
    "tsoCycle": "number",
    "tsoHours": "number",
    "tsoVal": "number",
    "tsoVar": "string",
    "updatedAt": "string",
    "useableStatus": "string",
    "warrantyCycle": "number",
    "warrantyDays": "number",
    "warrantyHours": "number",
    "warrantyStartCycle": "number",
    "warrantyStartDate": "string",
    "warrantyVal": "number",
    "warrantyYears": "number"
};

const AmimsPartFigureIndexDtoFields = {
    "createdAt": "string",
    "figureIndex": "string",
    "idAta": "string",
    "idMpart": "string",
    "idPartFigureIndex": "string",
    "itemIndex": "string",
    "updatedAt": "string"
};

const AmimsPartFigureIndexReportDtoFields = {
    "ata": "string",
    "createdAt": "string",
    "figureIndex": "string",
    "idAta": "string",
    "idMpart": "string",
    "idPartFigureIndex": "string",
    "itemIndex": "string",
    "mpart": "string",
    "updatedAt": "string"
};

const AmimsPartFigureIndexWidgetDtoFields = {
    "createdAt": "string",
    "figureIndex": "string",
    "idAta": "string",
    "idMpart": "string",
    "idPartFigureIndex": "string",
    "itemIndex": "string",
    "total": "number",
    "updatedAt": "string"
};

const AmimsPartInstallDtoFields = {
    "bin": "string",
    "createdAt": "string",
    "dateInstall": "string",
    "dueOverhaulC": "number",
    "dueOverhaulH": "number",
    "dueOverhaulValue": "number",
    "figureIndex": "string",
    "idAircraft": "string",
    "idEngineerPrisItem": "string",
    "idPart": "string",
    "idPartInstall": "string",
    "installedOverhaulC": "number",
    "installedOverhaulH": "number",
    "installedOverhaulValue": "number",
    "installedParentC": "number",
    "installedParentH": "number",
    "installedParentValue": "number",
    "installedTsnC": "number",
    "installedTsnH": "number",
    "isfeatured": "string",
    "itemIndex": "string",
    "newParen": "string",
    "oldId": "string",
    "oldIdPart": "string",
    "oldParent": "string",
    "onPris": "string",
    "parent": "string",
    "qtyInstall": "number",
    "refTechLog": "string",
    "statusInstall": "string",
    "topParent": "string",
    "updatedAt": "string"
};

const AmimsPartInstallOldDtoFields = {
    "bin": "string",
    "createdAt": "string",
    "dateInstall": "string",
    "dueOverhaulC": "number",
    "dueOverhaulH": "number",
    "dueOverhaulValue": "number",
    "figureIndex": "string",
    "idAircraft": "string",
    "idEngineerPrisItem": "string",
    "idPart": "string",
    "idPartInstall": "string",
    "idPartInstallOld": "string",
    "installedInspectionC": "number",
    "installedInspectionH": "number",
    "installedInspectionValue": "number",
    "installedOverhaulC": "number",
    "installedOverhaulH": "number",
    "installedOverhaulValue": "number",
    "isfeatured": "string",
    "itemIndex": "string",
    "oldId": "string",
    "parent": "string",
    "qtyInstall": "number",
    "statusInstall": "string",
    "updatedAt": "string"
};

const AmimsPartInstallOldReportDtoFields = {
    "aircraft": "string",
    "bin": "string",
    "createdAt": "string",
    "dateInstall": "string",
    "dueOverhaulC": "number",
    "dueOverhaulH": "number",
    "dueOverhaulValue": "number",
    "figureIndex": "string",
    "idAircraft": "string",
    "idEngineerPrisItem": "string",
    "idPart": "string",
    "idPartInstall": "string",
    "idPartInstallOld": "string",
    "installedInspectionC": "number",
    "installedInspectionH": "number",
    "installedInspectionValue": "number",
    "installedOverhaulC": "number",
    "installedOverhaulH": "number",
    "installedOverhaulValue": "number",
    "isfeatured": "string",
    "itemIndex": "string",
    "oldId": "string",
    "parent": "string",
    "part": "string",
    "qtyInstall": "number",
    "statusInstall": "string",
    "updatedAt": "string"
};

const AmimsPartInstallOldWidgetDtoFields = {
    "bin": "string",
    "createdAt": "string",
    "dateInstall": "string",
    "dueOverhaulC": "number",
    "dueOverhaulH": "number",
    "dueOverhaulValue": "number",
    "figureIndex": "string",
    "idAircraft": "string",
    "idEngineerPrisItem": "string",
    "idPart": "string",
    "idPartInstall": "string",
    "idPartInstallOld": "string",
    "installedInspectionC": "number",
    "installedInspectionH": "number",
    "installedInspectionValue": "number",
    "installedOverhaulC": "number",
    "installedOverhaulH": "number",
    "installedOverhaulValue": "number",
    "isfeatured": "string",
    "itemIndex": "string",
    "oldId": "string",
    "parent": "string",
    "qtyInstall": "number",
    "statusInstall": "string",
    "total": "number",
    "updatedAt": "string"
};

const AmimsPartInstallReportDtoFields = {
    "aircraft": "string",
    "bin": "string",
    "createdAt": "string",
    "dateInstall": "string",
    "dueOverhaulC": "number",
    "dueOverhaulH": "number",
    "dueOverhaulValue": "number",
    "figureIndex": "string",
    "idAircraft": "string",
    "idEngineerPrisItem": "string",
    "idPart": "string",
    "idPartInstall": "string",
    "installedOverhaulC": "number",
    "installedOverhaulH": "number",
    "installedOverhaulValue": "number",
    "installedParentC": "number",
    "installedParentH": "number",
    "installedParentValue": "number",
    "installedTsnC": "number",
    "installedTsnH": "number",
    "isfeatured": "string",
    "itemIndex": "string",
    "newParen": "string",
    "oldId": "string",
    "oldIdPart": "string",
    "oldParent": "string",
    "onPris": "string",
    "parent": "string",
    "part": "string",
    "qtyInstall": "number",
    "refTechLog": "string",
    "statusInstall": "string",
    "topParent": "string",
    "updatedAt": "string"
};

const AmimsPartInstallWidgetDtoFields = {
    "bin": "string",
    "createdAt": "string",
    "dateInstall": "string",
    "dueOverhaulC": "number",
    "dueOverhaulH": "number",
    "dueOverhaulValue": "number",
    "figureIndex": "string",
    "idAircraft": "string",
    "idEngineerPrisItem": "string",
    "idPart": "string",
    "idPartInstall": "string",
    "installedOverhaulC": "number",
    "installedOverhaulH": "number",
    "installedOverhaulValue": "number",
    "installedParentC": "number",
    "installedParentH": "number",
    "installedParentValue": "number",
    "installedTsnC": "number",
    "installedTsnH": "number",
    "isfeatured": "string",
    "itemIndex": "string",
    "newParen": "string",
    "oldId": "string",
    "oldIdPart": "string",
    "oldParent": "string",
    "onPris": "string",
    "parent": "string",
    "qtyInstall": "number",
    "refTechLog": "string",
    "statusInstall": "string",
    "topParent": "string",
    "total": "number",
    "updatedAt": "string"
};

const AmimsPartLogDtoFields = {
    "activity": "string",
    "createdAt": "string",
    "dateLog": "string",
    "fromModule": "string",
    "idModule": "string",
    "idPart": "string",
    "idPartLog": "string",
    "idPosition": "string",
    "idSite": "string",
    "idUser": "string",
    "numberModule": "string",
    "oldId": "string",
    "qtyLog": "number",
    "statusOnInventory": "string",
    "tboCycle": "number",
    "tboHours": "number",
    "tboVal": "number",
    "tboVar": "string",
    "toLocation": "string",
    "tsnCycle": "number",
    "tsnHours": "number",
    "tsnVal": "number",
    "tsnVar": "string",
    "tsoCycle": "number",
    "tsoHours": "number",
    "tsoVal": "number",
    "tsoVar": "string",
    "updatedAt": "string"
};

const AmimsPartLogReportDtoFields = {
    "activity": "string",
    "createdAt": "string",
    "dateLog": "string",
    "fromModule": "string",
    "idModule": "string",
    "idPart": "string",
    "idPartLog": "string",
    "idPosition": "string",
    "idSite": "string",
    "idUser": "string",
    "numberModule": "string",
    "oldId": "string",
    "part": "string",
    "position": "string",
    "qtyLog": "number",
    "site": "string",
    "statusOnInventory": "string",
    "tboCycle": "number",
    "tboHours": "number",
    "tboVal": "number",
    "tboVar": "string",
    "toLocation": "string",
    "tsnCycle": "number",
    "tsnHours": "number",
    "tsnVal": "number",
    "tsnVar": "string",
    "tsoCycle": "number",
    "tsoHours": "number",
    "tsoVal": "number",
    "tsoVar": "string",
    "updatedAt": "string"
};

const AmimsPartLogWidgetDtoFields = {
    "activity": "string",
    "createdAt": "string",
    "dateLog": "string",
    "fromModule": "string",
    "idModule": "string",
    "idPart": "string",
    "idPartLog": "string",
    "idPosition": "string",
    "idSite": "string",
    "idUser": "string",
    "numberModule": "string",
    "oldId": "string",
    "qtyLog": "number",
    "statusOnInventory": "string",
    "tboCycle": "number",
    "tboHours": "number",
    "tboVal": "number",
    "tboVar": "string",
    "toLocation": "string",
    "total": "number",
    "tsnCycle": "number",
    "tsnHours": "number",
    "tsnVal": "number",
    "tsnVar": "string",
    "tsoCycle": "number",
    "tsoHours": "number",
    "tsoVal": "number",
    "tsoVar": "string",
    "updatedAt": "string"
};

const AmimsPartReportDtoFields = {
    "bin": "string",
    "certificationNo": "string",
    "createdAt": "string",
    "currency": "string",
    "dateOrder": "string",
    "endOfLife": "string",
    "firstInstallC": "number",
    "firstInstallDate": "string",
    "firstInstallH": "number",
    "groupStatus": "string",
    "idConditionMonitoring": "string",
    "idCurrency": "string",
    "idLifeTimeLimit": "string",
    "idMpart": "string",
    "idPart": "string",
    "idPartCondition": "string",
    "idPurGrn": "string",
    "idPurPoItem": "string",
    "idPurPrcl": "string",
    "idPurVendor": "string",
    "idSite": "string",
    "idTypeOfwork": "string",
    "idUser": "string",
    "idWarranty": "string",
    "isDeleted": "number",
    "lifeLimitCycle": "number",
    "lifeLimitHours": "number",
    "lifeLimitVal": "number",
    "lifeLimitVar": "string",
    "manufacture": "string",
    "manufactureDate": "string",
    "mpart": "string",
    "newFirstInstallH": "number",
    "oldId": "string",
    "oldParent": "string",
    "partParent": "string",
    "position": "string",
    "price": "number",
    "purchaseDate": "string",
    "qty": "number",
    "site": "string",
    "sn": "string",
    "startInstallC": "number",
    "startInstallDate": "string",
    "startInstallH": "number",
    "statusOnInventory": "string",
    "tbiCycle": "number",
    "tbiHours": "number",
    "tbiVal": "number",
    "tbiVar": "string",
    "tboCycle": "number",
    "tboHours": "number",
    "tboVal": "number",
    "tboVar": "string",
    "tempUse": "number",
    "tsiCycle": "number",
    "tsiHours": "number",
    "tsiVal": "number",
    "tsiVar": "string",
    "tsnCycle": "number",
    "tsnHours": "number",
    "tsnVal": "number",
    "tsnVar": "string",
    "tsoCycle": "number",
    "tsoHours": "number",
    "tsoVal": "number",
    "tsoVar": "string",
    "updatedAt": "string",
    "useableStatus": "string",
    "warranty": "string",
    "warrantyCycle": "number",
    "warrantyDays": "number",
    "warrantyHours": "number",
    "warrantyStartCycle": "number",
    "warrantyStartDate": "string",
    "warrantyVal": "number",
    "warrantyYears": "number"
};

const AmimsPartWidgetDtoFields = {
    "bin": "string",
    "certificationNo": "string",
    "createdAt": "string",
    "dateOrder": "string",
    "endOfLife": "string",
    "firstInstallC": "number",
    "firstInstallDate": "string",
    "firstInstallH": "number",
    "groupStatus": "string",
    "idConditionMonitoring": "string",
    "idCurrency": "string",
    "idLifeTimeLimit": "string",
    "idMpart": "string",
    "idPart": "string",
    "idPartCondition": "string",
    "idPurGrn": "string",
    "idPurPoItem": "string",
    "idPurPrcl": "string",
    "idPurVendor": "string",
    "idSite": "string",
    "idTypeOfwork": "string",
    "idUser": "string",
    "idWarranty": "string",
    "isDeleted": "number",
    "lifeLimitCycle": "number",
    "lifeLimitHours": "number",
    "lifeLimitVal": "number",
    "lifeLimitVar": "string",
    "manufacture": "string",
    "manufactureDate": "string",
    "newFirstInstallH": "number",
    "oldId": "string",
    "oldParent": "string",
    "partParent": "string",
    "position": "string",
    "price": "number",
    "purchaseDate": "string",
    "qty": "number",
    "sn": "string",
    "startInstallC": "number",
    "startInstallDate": "string",
    "startInstallH": "number",
    "statusOnInventory": "string",
    "tbiCycle": "number",
    "tbiHours": "number",
    "tbiVal": "number",
    "tbiVar": "string",
    "tboCycle": "number",
    "tboHours": "number",
    "tboVal": "number",
    "tboVar": "string",
    "tempUse": "number",
    "total": "number",
    "tsiCycle": "number",
    "tsiHours": "number",
    "tsiVal": "number",
    "tsiVar": "string",
    "tsnCycle": "number",
    "tsnHours": "number",
    "tsnVal": "number",
    "tsnVar": "string",
    "tsoCycle": "number",
    "tsoHours": "number",
    "tsoVal": "number",
    "tsoVar": "string",
    "updatedAt": "string",
    "useableStatus": "string",
    "warrantyCycle": "number",
    "warrantyDays": "number",
    "warrantyHours": "number",
    "warrantyStartCycle": "number",
    "warrantyStartDate": "string",
    "warrantyVal": "number",
    "warrantyYears": "number"
};

const AmimsPartidDtoFields = {
    "childnamePartid": "string",
    "description": "string",
    "idPartid": "string",
    "isDeleted": "number",
    "issingle": "string",
    "partid": "string"
};

const AmimsPartidReportDtoFields = {
    "childnamePartid": "string",
    "description": "string",
    "idPartid": "string",
    "isDeleted": "number",
    "issingle": "string",
    "partid": "string"
};

const AmimsPartidWidgetDtoFields = {
    "childnamePartid": "string",
    "description": "string",
    "idPartid": "string",
    "isDeleted": "number",
    "issingle": "string",
    "partid": "string",
    "total": "number"
};

const AmimsPilotDtoFields = {
    "createdAt": "string",
    "hashIdUser": "number",
    "idPilot": "string",
    "isDeleted": "number",
    "namePilot": "string",
    "status": "number",
    "type": "string",
    "updatedAt": "string"
};

const AmimsPilotReportDtoFields = {
    "createdAt": "string",
    "hashIdUser": "number",
    "idPilot": "string",
    "isDeleted": "number",
    "namePilot": "string",
    "status": "number",
    "type": "string",
    "updatedAt": "string"
};

const AmimsPilotWidgetDtoFields = {
    "createdAt": "string",
    "hashIdUser": "number",
    "idPilot": "string",
    "isDeleted": "number",
    "namePilot": "string",
    "status": "number",
    "total": "number",
    "type": "string",
    "updatedAt": "string"
};

const AmimsPositionDtoFields = {
    "code": "string",
    "description": "string",
    "idPosition": "string",
    "isDeleted": "number",
    "position": "string"
};

const AmimsPositionReportDtoFields = {
    "code": "string",
    "description": "string",
    "idPosition": "string",
    "isDeleted": "number",
    "position": "string"
};

const AmimsPositionWidgetDtoFields = {
    "code": "string",
    "description": "string",
    "idPosition": "string",
    "isDeleted": "number",
    "position": "string",
    "total": "number"
};

const AmimsPurGrnDtoFields = {
    "createdAt": "string",
    "dateGrn": "string",
    "dateQa": "string",
    "dateQaClose": "string",
    "grnKe": "number",
    "idPurGrn": "string",
    "idPurVendor": "string",
    "idSite": "string",
    "idUser": "string",
    "isDeleted": "number",
    "noIndex": "number",
    "noteGrn": "string",
    "numberGrn": "string",
    "updatedAt": "string",
    "validasi": "number"
};

const AmimsPurGrnItemDtoFields = {
    "idMpart": "string",
    "idPart": "string",
    "idPurGrn": "string",
    "idPurGrnItem": "string",
    "idPurPoItem": "string",
    "noteGrnItem": "string",
    "qtyGrn": "number",
    "serialNumber": "string",
    "statusGrn": "string"
};

const AmimsPurGrnItemReportDtoFields = {
    "idMpart": "string",
    "idPart": "string",
    "idPurGrn": "string",
    "idPurGrnItem": "string",
    "idPurPoItem": "string",
    "mpart": "string",
    "noteGrnItem": "string",
    "part": "string",
    "qtyGrn": "number",
    "serialNumber": "string",
    "statusGrn": "string"
};

const AmimsPurGrnItemWidgetDtoFields = {
    "idMpart": "string",
    "idPart": "string",
    "idPurGrn": "string",
    "idPurGrnItem": "string",
    "idPurPoItem": "string",
    "noteGrnItem": "string",
    "qtyGrn": "number",
    "serialNumber": "string",
    "statusGrn": "string",
    "total": "number"
};

const AmimsPurGrnReportDtoFields = {
    "createdAt": "string",
    "dateGrn": "string",
    "dateQa": "string",
    "dateQaClose": "string",
    "grnKe": "number",
    "idPurGrn": "string",
    "idPurVendor": "string",
    "idSite": "string",
    "idUser": "string",
    "isDeleted": "number",
    "noIndex": "number",
    "noteGrn": "string",
    "numberGrn": "string",
    "site": "string",
    "updatedAt": "string",
    "validasi": "number"
};

const AmimsPurGrnWidgetDtoFields = {
    "createdAt": "string",
    "dateGrn": "string",
    "dateQa": "string",
    "dateQaClose": "string",
    "grnKe": "number",
    "idPurGrn": "string",
    "idPurVendor": "string",
    "idSite": "string",
    "idUser": "string",
    "isDeleted": "number",
    "noIndex": "number",
    "noteGrn": "string",
    "numberGrn": "string",
    "total": "number",
    "updatedAt": "string",
    "validasi": "number"
};

const AmimsPurPoDtoFields = {
    "approveDirector": "number",
    "createdAt": "string",
    "dateAcc": "string",
    "dateAccDirector": "string",
    "dateDeadline": "string",
    "datePo": "string",
    "idCurrency": "string",
    "idPosition": "string",
    "idPurPo": "string",
    "idPurVendor": "string",
    "idPurVendorContact": "string",
    "idSite": "string",
    "idUser": "string",
    "idUserDirector": "string",
    "idUserManager": "string",
    "isDeleted": "number",
    "modeOfTransport": "string",
    "noIndex": "number",
    "notePo": "string",
    "numberPo": "string",
    "oldPo": "string",
    "priceTotal": "number",
    "quotationDate": "string",
    "quotationNumber": "string",
    "shipping": "string",
    "statusPo": "string",
    "term": "string",
    "typePo": "string",
    "updatedAt": "string",
    "validasi": "number",
    "vat": "number"
};

const AmimsPurPoItemDtoFields = {
    "edd": "number",
    "idEngineerRti": "string",
    "idMpart": "string",
    "idPart": "string",
    "idPurPo": "string",
    "idPurPoItem": "string",
    "idPurPrItem": "string",
    "idPurPrcl": "string",
    "idQaRpd": "string",
    "notePoItem": "string",
    "oldPoItem": "string",
    "price": "number",
    "priorityPoItem": "string",
    "qtyPo": "number",
    "totalQtyGrn": "number",
    "tsnCycle": "number",
    "tsnHours": "number",
    "tsnVal": "number",
    "tsnVar": "string",
    "tsoCycle": "number",
    "tsoHours": "number",
    "tsoVal": "number",
    "tsoVar": "string",
    "warantyStartCycle": "number",
    "warantyStartDate": "string",
    "warantyStartDays": "number",
    "warantyStartHours": "number"
};

const AmimsPurPoItemReportDtoFields = {
    "edd": "number",
    "idEngineerRti": "string",
    "idMpart": "string",
    "idPart": "string",
    "idPurPo": "string",
    "idPurPoItem": "string",
    "idPurPrItem": "string",
    "idPurPrcl": "string",
    "idQaRpd": "string",
    "mpart": "string",
    "notePoItem": "string",
    "oldPoItem": "string",
    "part": "string",
    "price": "number",
    "priorityPoItem": "string",
    "qtyPo": "number",
    "totalQtyGrn": "number",
    "tsnCycle": "number",
    "tsnHours": "number",
    "tsnVal": "number",
    "tsnVar": "string",
    "tsoCycle": "number",
    "tsoHours": "number",
    "tsoVal": "number",
    "tsoVar": "string",
    "warantyStartCycle": "number",
    "warantyStartDate": "string",
    "warantyStartDays": "number",
    "warantyStartHours": "number"
};

const AmimsPurPoItemWidgetDtoFields = {
    "edd": "number",
    "idEngineerRti": "string",
    "idMpart": "string",
    "idPart": "string",
    "idPurPo": "string",
    "idPurPoItem": "string",
    "idPurPrItem": "string",
    "idPurPrcl": "string",
    "idQaRpd": "string",
    "notePoItem": "string",
    "oldPoItem": "string",
    "price": "number",
    "priorityPoItem": "string",
    "qtyPo": "number",
    "total": "number",
    "totalQtyGrn": "number",
    "tsnCycle": "number",
    "tsnHours": "number",
    "tsnVal": "number",
    "tsnVar": "string",
    "tsoCycle": "number",
    "tsoHours": "number",
    "tsoVal": "number",
    "tsoVar": "string",
    "warantyStartCycle": "number",
    "warantyStartDate": "string",
    "warantyStartDays": "number",
    "warantyStartHours": "number"
};

const AmimsPurPoReportDtoFields = {
    "approveDirector": "number",
    "createdAt": "string",
    "currency": "string",
    "dateAcc": "string",
    "dateAccDirector": "string",
    "dateDeadline": "string",
    "datePo": "string",
    "idCurrency": "string",
    "idPosition": "string",
    "idPurPo": "string",
    "idPurVendor": "string",
    "idPurVendorContact": "string",
    "idSite": "string",
    "idUser": "string",
    "idUserDirector": "string",
    "idUserManager": "string",
    "isDeleted": "number",
    "modeOfTransport": "string",
    "noIndex": "number",
    "notePo": "string",
    "numberPo": "string",
    "oldPo": "string",
    "position": "string",
    "priceTotal": "number",
    "quotationDate": "string",
    "quotationNumber": "string",
    "shipping": "string",
    "site": "string",
    "statusPo": "string",
    "term": "string",
    "typePo": "string",
    "updatedAt": "string",
    "validasi": "number",
    "vat": "number"
};

const AmimsPurPoWidgetDtoFields = {
    "approveDirector": "number",
    "createdAt": "string",
    "dateAcc": "string",
    "dateAccDirector": "string",
    "dateDeadline": "string",
    "datePo": "string",
    "idCurrency": "string",
    "idPosition": "string",
    "idPurPo": "string",
    "idPurVendor": "string",
    "idPurVendorContact": "string",
    "idSite": "string",
    "idUser": "string",
    "idUserDirector": "string",
    "idUserManager": "string",
    "isDeleted": "number",
    "modeOfTransport": "string",
    "noIndex": "number",
    "notePo": "string",
    "numberPo": "string",
    "oldPo": "string",
    "priceTotal": "number",
    "quotationDate": "string",
    "quotationNumber": "string",
    "shipping": "string",
    "statusPo": "string",
    "term": "string",
    "total": "number",
    "typePo": "string",
    "updatedAt": "string",
    "validasi": "number",
    "vat": "number"
};

const AmimsPurPrDtoFields = {
    "createdAt": "string",
    "dateAcc": "string",
    "datePr": "string",
    "description": "string",
    "idAircraft": "string",
    "idPosition": "string",
    "idPurPr": "string",
    "idSite": "string",
    "idUser": "string",
    "idUserAcc": "string",
    "isDeleted": "number",
    "keyword": "string",
    "noIndex": "number",
    "notePr": "string",
    "numberPr": "string",
    "oldPr": "string",
    "statusPr": "string",
    "typePr": "string",
    "updatedAt": "string",
    "validasi": "number"
};

const AmimsPurPrItemDtoFields = {
    "createdAt": "string",
    "idMpart": "string",
    "idMpcPiroItem": "string",
    "idPurPr": "string",
    "idPurPrItem": "string",
    "isDeleted": "number",
    "notePrItem": "string",
    "oldPrItem": "string",
    "priority": "string",
    "qtyPr": "number",
    "qtyStock": "number",
    "statusItem": "string",
    "updatedAt": "string"
};

const AmimsPurPrItemReportDtoFields = {
    "createdAt": "string",
    "idMpart": "string",
    "idMpcPiroItem": "string",
    "idPurPr": "string",
    "idPurPrItem": "string",
    "isDeleted": "number",
    "mpart": "string",
    "notePrItem": "string",
    "oldPrItem": "string",
    "priority": "string",
    "qtyPr": "number",
    "qtyStock": "number",
    "statusItem": "string",
    "updatedAt": "string"
};

const AmimsPurPrItemWidgetDtoFields = {
    "createdAt": "string",
    "idMpart": "string",
    "idMpcPiroItem": "string",
    "idPurPr": "string",
    "idPurPrItem": "string",
    "isDeleted": "number",
    "notePrItem": "string",
    "oldPrItem": "string",
    "priority": "string",
    "qtyPr": "number",
    "qtyStock": "number",
    "statusItem": "string",
    "total": "number",
    "updatedAt": "string"
};

const AmimsPurPrReportDtoFields = {
    "aircraft": "string",
    "createdAt": "string",
    "dateAcc": "string",
    "datePr": "string",
    "description": "string",
    "idAircraft": "string",
    "idPosition": "string",
    "idPurPr": "string",
    "idSite": "string",
    "idUser": "string",
    "idUserAcc": "string",
    "isDeleted": "number",
    "keyword": "string",
    "noIndex": "number",
    "notePr": "string",
    "numberPr": "string",
    "oldPr": "string",
    "position": "string",
    "site": "string",
    "statusPr": "string",
    "typePr": "string",
    "updatedAt": "string",
    "validasi": "number"
};

const AmimsPurPrWidgetDtoFields = {
    "createdAt": "string",
    "dateAcc": "string",
    "datePr": "string",
    "description": "string",
    "idAircraft": "string",
    "idPosition": "string",
    "idPurPr": "string",
    "idSite": "string",
    "idUser": "string",
    "idUserAcc": "string",
    "isDeleted": "number",
    "keyword": "string",
    "noIndex": "number",
    "notePr": "string",
    "numberPr": "string",
    "oldPr": "string",
    "statusPr": "string",
    "total": "number",
    "typePr": "string",
    "updatedAt": "string",
    "validasi": "number"
};

const AmimsPurPrclDtoFields = {
    "airworthiness": "string",
    "certificationNo": "string",
    "createdAt": "string",
    "datePcrl": "string",
    "datePur": "string",
    "dateQa": "string",
    "description": "string",
    "draftBin": "string",
    "idConditionMonitoring": "string",
    "idCurrency": "string",
    "idInternalGrnItem": "string",
    "idLifeTimeLimit": "string",
    "idMpart": "string",
    "idPart": "string",
    "idPartCondition": "string",
    "idPurGrn": "string",
    "idPurGrnItem": "string",
    "idPurPrcl": "string",
    "idPurVendor": "string",
    "idUserPu": "string",
    "idUserQa": "string",
    "isServiceable": "number",
    "lifeLimitCycle": "number",
    "lifeLimitHours": "number",
    "lifeLimitVal": "number",
    "lifeLimitVar": "string",
    "loopIndex": "number",
    "manufacture": "string",
    "manufactureDate": "string",
    "notePcrl": "string",
    "partCheckingPur": "string",
    "partCheckingQa": "string",
    "prclParent": "string",
    "price": "number",
    "qtyCheck": "number",
    "qtyPrcl": "number",
    "qtyReturn": "number",
    "qualityCheck": "string",
    "refDate": "string",
    "refId": "string",
    "refNumber": "string",
    "service": "string",
    "sn": "string",
    "statusPrcl": "string",
    "tboCycle": "number",
    "tboHours": "number",
    "tboVal": "number",
    "tboVar": "string",
    "tsnCycle": "number",
    "tsnHours": "number",
    "tsnVal": "number",
    "tsnVar": "string",
    "tsoCycle": "number",
    "tsoHours": "number",
    "tsoVal": "number",
    "tsoVar": "string",
    "typePrcl": "string",
    "updatedAt": "string",
    "validasi": "number",
    "warrantyCycle": "number",
    "warrantyDays": "number",
    "warrantyHours": "number",
    "warrantyMonths": "number",
    "warrantyStartCycle": "number",
    "warrantyStartDate": "string"
};

const AmimsPurPrclReportDtoFields = {
    "airworthiness": "string",
    "certificationNo": "string",
    "createdAt": "string",
    "currency": "string",
    "datePcrl": "string",
    "datePur": "string",
    "dateQa": "string",
    "description": "string",
    "draftBin": "string",
    "idConditionMonitoring": "string",
    "idCurrency": "string",
    "idInternalGrnItem": "string",
    "idLifeTimeLimit": "string",
    "idMpart": "string",
    "idPart": "string",
    "idPartCondition": "string",
    "idPurGrn": "string",
    "idPurGrnItem": "string",
    "idPurPrcl": "string",
    "idPurVendor": "string",
    "idUserPu": "string",
    "idUserQa": "string",
    "isServiceable": "number",
    "lifeLimitCycle": "number",
    "lifeLimitHours": "number",
    "lifeLimitVal": "number",
    "lifeLimitVar": "string",
    "loopIndex": "number",
    "manufacture": "string",
    "manufactureDate": "string",
    "mpart": "string",
    "notePcrl": "string",
    "part": "string",
    "partCheckingPur": "string",
    "partCheckingQa": "string",
    "prclParent": "string",
    "price": "number",
    "qtyCheck": "number",
    "qtyPrcl": "number",
    "qtyReturn": "number",
    "qualityCheck": "string",
    "refDate": "string",
    "refId": "string",
    "refNumber": "string",
    "service": "string",
    "sn": "string",
    "statusPrcl": "string",
    "tboCycle": "number",
    "tboHours": "number",
    "tboVal": "number",
    "tboVar": "string",
    "tsnCycle": "number",
    "tsnHours": "number",
    "tsnVal": "number",
    "tsnVar": "string",
    "tsoCycle": "number",
    "tsoHours": "number",
    "tsoVal": "number",
    "tsoVar": "string",
    "typePrcl": "string",
    "updatedAt": "string",
    "validasi": "number",
    "warrantyCycle": "number",
    "warrantyDays": "number",
    "warrantyHours": "number",
    "warrantyMonths": "number",
    "warrantyStartCycle": "number",
    "warrantyStartDate": "string"
};

const AmimsPurPrclWidgetDtoFields = {
    "airworthiness": "string",
    "certificationNo": "string",
    "createdAt": "string",
    "datePcrl": "string",
    "datePur": "string",
    "dateQa": "string",
    "description": "string",
    "draftBin": "string",
    "idConditionMonitoring": "string",
    "idCurrency": "string",
    "idInternalGrnItem": "string",
    "idLifeTimeLimit": "string",
    "idMpart": "string",
    "idPart": "string",
    "idPartCondition": "string",
    "idPurGrn": "string",
    "idPurGrnItem": "string",
    "idPurPrcl": "string",
    "idPurVendor": "string",
    "idUserPu": "string",
    "idUserQa": "string",
    "isServiceable": "number",
    "lifeLimitCycle": "number",
    "lifeLimitHours": "number",
    "lifeLimitVal": "number",
    "lifeLimitVar": "string",
    "loopIndex": "number",
    "manufacture": "string",
    "manufactureDate": "string",
    "notePcrl": "string",
    "partCheckingPur": "string",
    "partCheckingQa": "string",
    "prclParent": "string",
    "price": "number",
    "qtyCheck": "number",
    "qtyPrcl": "number",
    "qtyReturn": "number",
    "qualityCheck": "string",
    "refDate": "string",
    "refId": "string",
    "refNumber": "string",
    "service": "string",
    "sn": "string",
    "statusPrcl": "string",
    "tboCycle": "number",
    "tboHours": "number",
    "tboVal": "number",
    "tboVar": "string",
    "total": "number",
    "tsnCycle": "number",
    "tsnHours": "number",
    "tsnVal": "number",
    "tsnVar": "string",
    "tsoCycle": "number",
    "tsoHours": "number",
    "tsoVal": "number",
    "tsoVar": "string",
    "typePrcl": "string",
    "updatedAt": "string",
    "validasi": "number",
    "warrantyCycle": "number",
    "warrantyDays": "number",
    "warrantyHours": "number",
    "warrantyMonths": "number",
    "warrantyStartCycle": "number",
    "warrantyStartDate": "string"
};

const AmimsPurReturnDtoFields = {
    "createdAt": "string",
    "dateDeadlineReturn": "string",
    "dateReturn": "string",
    "idPurPo": "string",
    "idPurReturn": "string",
    "idPurVendor": "string",
    "idUser": "string",
    "isDeleted": "number",
    "noteReturn": "string",
    "numberReturn": "string",
    "statusReturn": "string",
    "updatedAt": "string",
    "validasi": "number"
};

const AmimsPurReturnItemDtoFields = {
    "idMpart": "string",
    "idPurGrnItem": "string",
    "idPurPoItem": "string",
    "idPurReturn": "string",
    "idPurReturnItem": "string",
    "noteReturnItem": "string",
    "qtyReturn": "number",
    "statusItem": "number"
};

const AmimsPurReturnItemReportDtoFields = {
    "idMpart": "string",
    "idPurGrnItem": "string",
    "idPurPoItem": "string",
    "idPurReturn": "string",
    "idPurReturnItem": "string",
    "mpart": "string",
    "noteReturnItem": "string",
    "qtyReturn": "number",
    "statusItem": "number"
};

const AmimsPurReturnItemWidgetDtoFields = {
    "idMpart": "string",
    "idPurGrnItem": "string",
    "idPurPoItem": "string",
    "idPurReturn": "string",
    "idPurReturnItem": "string",
    "noteReturnItem": "string",
    "qtyReturn": "number",
    "statusItem": "number",
    "total": "number"
};

const AmimsPurReturnReportDtoFields = {
    "createdAt": "string",
    "dateDeadlineReturn": "string",
    "dateReturn": "string",
    "idPurPo": "string",
    "idPurReturn": "string",
    "idPurVendor": "string",
    "idUser": "string",
    "isDeleted": "number",
    "noteReturn": "string",
    "numberReturn": "string",
    "statusReturn": "string",
    "updatedAt": "string",
    "validasi": "number"
};

const AmimsPurReturnWidgetDtoFields = {
    "createdAt": "string",
    "dateDeadlineReturn": "string",
    "dateReturn": "string",
    "idPurPo": "string",
    "idPurReturn": "string",
    "idPurVendor": "string",
    "idUser": "string",
    "isDeleted": "number",
    "noteReturn": "string",
    "numberReturn": "string",
    "statusReturn": "string",
    "total": "number",
    "updatedAt": "string",
    "validasi": "number"
};

const AmimsPurVendorContactDtoFields = {
    "address": "string",
    "city": "string",
    "country": "string",
    "createdAt": "string",
    "email": "string",
    "fax": "string",
    "idPurVendor": "string",
    "idPurVendorContact": "string",
    "linePhone": "string",
    "oldId": "string",
    "phone": "string",
    "pic": "string",
    "postcode": "string",
    "state": "string",
    "updatedAt": "string"
};

const AmimsPurVendorContactReportDtoFields = {
    "address": "string",
    "city": "string",
    "country": "string",
    "createdAt": "string",
    "email": "string",
    "fax": "string",
    "idPurVendor": "string",
    "idPurVendorContact": "string",
    "linePhone": "string",
    "oldId": "string",
    "phone": "string",
    "pic": "string",
    "postcode": "string",
    "state": "string",
    "updatedAt": "string"
};

const AmimsPurVendorContactWidgetDtoFields = {
    "address": "string",
    "city": "string",
    "country": "string",
    "createdAt": "string",
    "email": "string",
    "fax": "string",
    "idPurVendor": "string",
    "idPurVendorContact": "string",
    "linePhone": "string",
    "oldId": "string",
    "phone": "string",
    "pic": "string",
    "postcode": "string",
    "state": "string",
    "total": "number",
    "updatedAt": "string"
};

const AmimsPurVendorDtoFields = {
    "address": "string",
    "code": "string",
    "column1": "string",
    "country": "string",
    "createdAt": "string",
    "defaultCurrency": "string",
    "deliveryTime": "number",
    "email": "string",
    "fax": "string",
    "idMcurrency": "string",
    "idPurVendor": "string",
    "idUser": "string",
    "isDeleted": "number",
    "isManufacture": "string",
    "isRepairer": "string",
    "isShipper": "string",
    "isVendor": "string",
    "isWorkshop": "string",
    "keyword": "string",
    "nameVendor": "string",
    "oldId": "string",
    "pic": "string",
    "postcode": "string",
    "rating": "string",
    "services": "string",
    "status": "string",
    "telephone": "string",
    "timezone": "string",
    "tremPayment": "number",
    "updatedAt": "string",
    "validasi": "number"
};

const AmimsPurVendorItemDtoFields = {
    "createdAt": "string",
    "idMpart": "string",
    "idPurVendor": "string",
    "idPurVendorItem": "string",
    "isDeleted": "number",
    "manufacture": "string",
    "minOrder": "number",
    "note": "string",
    "price": "number",
    "responseTime": "number",
    "updatedAt": "string"
};

const AmimsPurVendorItemReportDtoFields = {
    "createdAt": "string",
    "idMpart": "string",
    "idPurVendor": "string",
    "idPurVendorItem": "string",
    "isDeleted": "number",
    "manufacture": "string",
    "minOrder": "number",
    "mpart": "string",
    "note": "string",
    "price": "number",
    "responseTime": "number",
    "updatedAt": "string"
};

const AmimsPurVendorItemWidgetDtoFields = {
    "createdAt": "string",
    "idMpart": "string",
    "idPurVendor": "string",
    "idPurVendorItem": "string",
    "isDeleted": "number",
    "manufacture": "string",
    "minOrder": "number",
    "note": "string",
    "price": "number",
    "responseTime": "number",
    "total": "number",
    "updatedAt": "string"
};

const AmimsPurVendorReportDtoFields = {
    "address": "string",
    "code": "string",
    "column1": "string",
    "country": "string",
    "createdAt": "string",
    "defaultCurrency": "string",
    "deliveryTime": "number",
    "email": "string",
    "fax": "string",
    "idMcurrency": "string",
    "idPurVendor": "string",
    "idUser": "string",
    "isDeleted": "number",
    "isManufacture": "string",
    "isRepairer": "string",
    "isShipper": "string",
    "isVendor": "string",
    "isWorkshop": "string",
    "keyword": "string",
    "mcurrency": "string",
    "nameVendor": "string",
    "oldId": "string",
    "pic": "string",
    "postcode": "string",
    "rating": "string",
    "services": "string",
    "status": "string",
    "telephone": "string",
    "timezone": "string",
    "tremPayment": "number",
    "updatedAt": "string",
    "validasi": "number"
};

const AmimsPurVendorWidgetDtoFields = {
    "address": "string",
    "code": "string",
    "column1": "string",
    "country": "string",
    "createdAt": "string",
    "defaultCurrency": "string",
    "deliveryTime": "number",
    "email": "string",
    "fax": "string",
    "idMcurrency": "string",
    "idPurVendor": "string",
    "idUser": "string",
    "isDeleted": "number",
    "isManufacture": "string",
    "isRepairer": "string",
    "isShipper": "string",
    "isVendor": "string",
    "isWorkshop": "string",
    "keyword": "string",
    "nameVendor": "string",
    "oldId": "string",
    "pic": "string",
    "postcode": "string",
    "rating": "string",
    "services": "string",
    "status": "string",
    "telephone": "string",
    "timezone": "string",
    "total": "number",
    "tremPayment": "number",
    "updatedAt": "string",
    "validasi": "number"
};

const AmimsQaRpdDispotitionDtoFields = {
    "codeDispotition": "string",
    "color": "string",
    "dispotition": "string",
    "idQaRpdDispotition": "string",
    "printTag": "string",
    "toPosition": "string"
};

const AmimsQaRpdDispotitionReportDtoFields = {
    "codeDispotition": "string",
    "color": "string",
    "dispotition": "string",
    "idQaRpdDispotition": "string",
    "printTag": "string",
    "toPosition": "string"
};

const AmimsQaRpdDispotitionWidgetDtoFields = {
    "codeDispotition": "string",
    "color": "string",
    "dispotition": "string",
    "idQaRpdDispotition": "string",
    "printTag": "string",
    "toPosition": "string",
    "total": "number"
};

const AmimsQaRpdDtoFields = {
    "createdAt": "string",
    "dateRpd": "string",
    "idQaRpd": "string",
    "idUserQa": "string",
    "numberRpd": "string",
    "statusRpd": "string",
    "tipe": "string",
    "updatedAt": "string"
};

const AmimsQaRpdReportDtoFields = {
    "createdAt": "string",
    "dateRpd": "string",
    "idQaRpd": "string",
    "idUserQa": "string",
    "numberRpd": "string",
    "statusRpd": "string",
    "tipe": "string",
    "updatedAt": "string"
};

const AmimsQaRpdWidgetDtoFields = {
    "createdAt": "string",
    "dateRpd": "string",
    "idQaRpd": "string",
    "idUserQa": "string",
    "numberRpd": "string",
    "statusRpd": "string",
    "tipe": "string",
    "total": "number",
    "updatedAt": "string"
};

const AmimsQaTransferDtoFields = {
    "createdAt": "string",
    "dateReceived": "string",
    "dateTransfer": "string",
    "idQaTransfer": "string",
    "idSite": "string",
    "idUser": "string",
    "idUserReceived": "string",
    "noIndex": "number",
    "noteTransfer": "string",
    "numberTransfer": "string",
    "statusTransfer": "string",
    "toSite": "number",
    "typeTransfer": "string",
    "updatedAt": "string",
    "validasi": "number"
};

const AmimsQaTransferItemDtoFields = {
    "idMpcSelfMaintenance": "string",
    "idPurPrcl": "string",
    "idQaTransfer": "string",
    "idQaTransferItem": "string"
};

const AmimsQaTransferItemReportDtoFields = {
    "idMpcSelfMaintenance": "string",
    "idPurPrcl": "string",
    "idQaTransfer": "string",
    "idQaTransferItem": "string"
};

const AmimsQaTransferItemWidgetDtoFields = {
    "idMpcSelfMaintenance": "string",
    "idPurPrcl": "string",
    "idQaTransfer": "string",
    "idQaTransferItem": "string",
    "total": "number"
};

const AmimsQaTransferReportDtoFields = {
    "createdAt": "string",
    "dateReceived": "string",
    "dateTransfer": "string",
    "idQaTransfer": "string",
    "idSite": "string",
    "idUser": "string",
    "idUserReceived": "string",
    "noIndex": "number",
    "noteTransfer": "string",
    "numberTransfer": "string",
    "site": "string",
    "statusTransfer": "string",
    "toSite": "number",
    "typeTransfer": "string",
    "updatedAt": "string",
    "validasi": "number"
};

const AmimsQaTransferWidgetDtoFields = {
    "createdAt": "string",
    "dateReceived": "string",
    "dateTransfer": "string",
    "idQaTransfer": "string",
    "idSite": "string",
    "idUser": "string",
    "idUserReceived": "string",
    "noIndex": "number",
    "noteTransfer": "string",
    "numberTransfer": "string",
    "statusTransfer": "string",
    "toSite": "number",
    "total": "number",
    "typeTransfer": "string",
    "updatedAt": "string",
    "validasi": "number"
};

const AmimsRotaryFactorDtoFields = {
    "adj1": "number",
    "adj2": "number",
    "adj3": "number",
    "dateCycle": "string",
    "dateHours": "string",
    "factor1": "number",
    "factor2": "number",
    "factor3": "number",
    "hoistLeft": "number",
    "hoistRight": "number",
    "idMpart": "string",
    "idRotaryFactor": "string",
    "noteHours": "string",
    "noteRotaryFactor": "string",
    "revisionCycle": "string",
    "revisionHours": "string",
    "rumusCycle": "string",
    "rumusHours": "string"
};

const AmimsRotaryFactorReportDtoFields = {
    "adj1": "number",
    "adj2": "number",
    "adj3": "number",
    "dateCycle": "string",
    "dateHours": "string",
    "factor1": "number",
    "factor2": "number",
    "factor3": "number",
    "hoistLeft": "number",
    "hoistRight": "number",
    "idMpart": "string",
    "idRotaryFactor": "string",
    "mpart": "string",
    "noteHours": "string",
    "noteRotaryFactor": "string",
    "revisionCycle": "string",
    "revisionHours": "string",
    "rumusCycle": "string",
    "rumusHours": "string"
};

const AmimsRotaryFactorWidgetDtoFields = {
    "adj1": "number",
    "adj2": "number",
    "adj3": "number",
    "dateCycle": "string",
    "dateHours": "string",
    "factor1": "number",
    "factor2": "number",
    "factor3": "number",
    "hoistLeft": "number",
    "hoistRight": "number",
    "idMpart": "string",
    "idRotaryFactor": "string",
    "noteHours": "string",
    "noteRotaryFactor": "string",
    "revisionCycle": "string",
    "revisionHours": "string",
    "rumusCycle": "string",
    "rumusHours": "string",
    "total": "number"
};

const AmimsShippingDtoFields = {
    "createdAt": "string",
    "idShipping": "string",
    "line0": "string",
    "line1": "string",
    "line2": "string",
    "line3": "string",
    "line4": "string",
    "line5": "string",
    "line6": "string",
    "line7": "string",
    "line8": "string",
    "statusShipping": "string",
    "updatedAt": "string"
};

const AmimsShippingReportDtoFields = {
    "createdAt": "string",
    "idShipping": "string",
    "line0": "string",
    "line1": "string",
    "line2": "string",
    "line3": "string",
    "line4": "string",
    "line5": "string",
    "line6": "string",
    "line7": "string",
    "line8": "string",
    "statusShipping": "string",
    "updatedAt": "string"
};

const AmimsShippingWidgetDtoFields = {
    "createdAt": "string",
    "idShipping": "string",
    "line0": "string",
    "line1": "string",
    "line2": "string",
    "line3": "string",
    "line4": "string",
    "line5": "string",
    "line6": "string",
    "line7": "string",
    "line8": "string",
    "statusShipping": "string",
    "total": "number",
    "updatedAt": "string"
};

const AmimsSiteDtoFields = {
    "address": "string",
    "city": "string",
    "codeSite": "string",
    "contactname": "string",
    "country": "string",
    "createdAt": "string",
    "emailaddress": "string",
    "fax": "string",
    "idNewSite": "string",
    "idSite": "string",
    "idUser": "string",
    "isDeleted": "number",
    "isMain": "number",
    "isStore": "string",
    "logoSite": "string",
    "mobile": "string",
    "oldId": "string",
    "parentSite": "number",
    "site": "string",
    "statusSite": "number",
    "telephone": "string",
    "typeSite": "string",
    "updatedAt": "string",
    "validation": "number"
};

const AmimsSiteReportDtoFields = {
    "address": "string",
    "city": "string",
    "codeSite": "string",
    "contactname": "string",
    "country": "string",
    "createdAt": "string",
    "emailaddress": "string",
    "fax": "string",
    "idNewSite": "string",
    "idSite": "string",
    "idUser": "string",
    "isDeleted": "number",
    "isMain": "number",
    "isStore": "string",
    "logoSite": "string",
    "mobile": "string",
    "oldId": "string",
    "parentSite": "number",
    "site": "string",
    "statusSite": "number",
    "telephone": "string",
    "typeSite": "string",
    "updatedAt": "string",
    "validation": "number"
};

const AmimsSiteWidgetDtoFields = {
    "address": "string",
    "city": "string",
    "codeSite": "string",
    "contactname": "string",
    "country": "string",
    "createdAt": "string",
    "emailaddress": "string",
    "fax": "string",
    "idNewSite": "string",
    "idSite": "string",
    "idUser": "string",
    "isDeleted": "number",
    "isMain": "number",
    "isStore": "string",
    "logoSite": "string",
    "mobile": "string",
    "oldId": "string",
    "parentSite": "number",
    "site": "string",
    "statusSite": "number",
    "telephone": "string",
    "total": "number",
    "typeSite": "string",
    "updatedAt": "string",
    "validation": "number"
};

const AmimsStoreDestroyDtoFields = {
    "createdAt": "string",
    "dateDestroy": "string",
    "idPart": "string",
    "idSite": "string",
    "idStoreDestroy": "string",
    "idUser": "string",
    "noteDestroy": "string",
    "numberDestroy": "string",
    "refRti": "string",
    "updatedAt": "string"
};

const AmimsStoreDestroyReportDtoFields = {
    "createdAt": "string",
    "dateDestroy": "string",
    "idPart": "string",
    "idSite": "string",
    "idStoreDestroy": "string",
    "idUser": "string",
    "noteDestroy": "string",
    "numberDestroy": "string",
    "part": "string",
    "refRti": "string",
    "site": "string",
    "updatedAt": "string"
};

const AmimsStoreDestroyWidgetDtoFields = {
    "createdAt": "string",
    "dateDestroy": "string",
    "idPart": "string",
    "idSite": "string",
    "idStoreDestroy": "string",
    "idUser": "string",
    "noteDestroy": "string",
    "numberDestroy": "string",
    "refRti": "string",
    "total": "number",
    "updatedAt": "string"
};

const AmimsStoreTransferDtoFields = {
    "createdAt": "string",
    "dateReceived": "string",
    "dateTransfer": "string",
    "dimention": "string",
    "idEngineerPmtr": "string",
    "idStoreTransfer": "string",
    "idUserReceived": "string",
    "idUserTransfer": "string",
    "isDeleted": "number",
    "noIndex": "number",
    "noOfBox": "string",
    "noteTransfer": "string",
    "numberTransfer": "string",
    "sheet": "string",
    "shippingVia": "string",
    "statusTransfer": "string",
    "updatedAt": "string",
    "validasi": "number",
    "weight": "string"
};

const AmimsStoreTransferItemDtoFields = {
    "createdAt": "string",
    "idEngineerPmtrItem": "string",
    "idPart": "string",
    "idStoreTransfer": "string",
    "idStoreTransferItem": "string",
    "newBin": "string",
    "noteItemTransfer": "string",
    "oldIdPart": "string",
    "qtyTransfer": "number",
    "statusItem": "string",
    "updatedAt": "string"
};

const AmimsStoreTransferItemReportDtoFields = {
    "createdAt": "string",
    "idEngineerPmtrItem": "string",
    "idPart": "string",
    "idStoreTransfer": "string",
    "idStoreTransferItem": "string",
    "newBin": "string",
    "noteItemTransfer": "string",
    "oldIdPart": "string",
    "part": "string",
    "qtyTransfer": "number",
    "statusItem": "string",
    "updatedAt": "string"
};

const AmimsStoreTransferItemWidgetDtoFields = {
    "createdAt": "string",
    "idEngineerPmtrItem": "string",
    "idPart": "string",
    "idStoreTransfer": "string",
    "idStoreTransferItem": "string",
    "newBin": "string",
    "noteItemTransfer": "string",
    "oldIdPart": "string",
    "qtyTransfer": "number",
    "statusItem": "string",
    "total": "number",
    "updatedAt": "string"
};

const AmimsStoreTransferReportDtoFields = {
    "createdAt": "string",
    "dateReceived": "string",
    "dateTransfer": "string",
    "dimention": "string",
    "idEngineerPmtr": "string",
    "idStoreTransfer": "string",
    "idUserReceived": "string",
    "idUserTransfer": "string",
    "isDeleted": "number",
    "noIndex": "number",
    "noOfBox": "string",
    "noteTransfer": "string",
    "numberTransfer": "string",
    "sheet": "string",
    "shippingVia": "string",
    "statusTransfer": "string",
    "updatedAt": "string",
    "validasi": "number",
    "weight": "string"
};

const AmimsStoreTransferWidgetDtoFields = {
    "createdAt": "string",
    "dateReceived": "string",
    "dateTransfer": "string",
    "dimention": "string",
    "idEngineerPmtr": "string",
    "idStoreTransfer": "string",
    "idUserReceived": "string",
    "idUserTransfer": "string",
    "isDeleted": "number",
    "noIndex": "number",
    "noOfBox": "string",
    "noteTransfer": "string",
    "numberTransfer": "string",
    "sheet": "string",
    "shippingVia": "string",
    "statusTransfer": "string",
    "total": "number",
    "updatedAt": "string",
    "validasi": "number",
    "weight": "string"
};

const AmimsTdDetailAcDtoFields = {
    "complianceC": "number",
    "complianceD": "string",
    "complianceH": "number",
    "compliteC": "number",
    "compliteD": "string",
    "compliteH": "number",
    "compliteUser": "string",
    "engineer": "string",
    "idAircraft": "string",
    "idTdDetail": "string",
    "idTdDetailAc": "string",
    "idTechLog": "string",
    "isActive": "string",
    "noteClose": "string",
    "noteDetail": "string",
    "updatedAt": "string"
};

const AmimsTdDetailAcReportDtoFields = {
    "aircraft": "string",
    "complianceC": "number",
    "complianceD": "string",
    "complianceH": "number",
    "compliteC": "number",
    "compliteD": "string",
    "compliteH": "number",
    "compliteUser": "string",
    "engineer": "string",
    "idAircraft": "string",
    "idTdDetail": "string",
    "idTdDetailAc": "string",
    "idTechLog": "string",
    "isActive": "string",
    "noteClose": "string",
    "noteDetail": "string",
    "updatedAt": "string"
};

const AmimsTdDetailAcWidgetDtoFields = {
    "complianceC": "number",
    "complianceD": "string",
    "complianceH": "number",
    "compliteC": "number",
    "compliteD": "string",
    "compliteH": "number",
    "compliteUser": "string",
    "engineer": "string",
    "idAircraft": "string",
    "idTdDetail": "string",
    "idTdDetailAc": "string",
    "idTechLog": "string",
    "isActive": "string",
    "noteClose": "string",
    "noteDetail": "string",
    "total": "number",
    "updatedAt": "string"
};

const AmimsTdDetailDtoFields = {
    "applicable": "string",
    "createdAt": "string",
    "dateAcc": "string",
    "dateAccQa": "string",
    "dateDetail": "string",
    "fileDetail": "string",
    "idAcc": "string",
    "idAccQa": "string",
    "idActype": "string",
    "idTd": "string",
    "idTdDetail": "string",
    "isEngineer": "string",
    "isPilot": "string",
    "isQc": "string",
    "method": "string",
    "noteDetail": "string",
    "numberDetail": "string",
    "priority": "string",
    "statusTdDetail": "string",
    "subject": "string",
    "typeDetail": "string",
    "updatedAt": "string",
    "validasi": "number"
};

const AmimsTdDetailReportDtoFields = {
    "actype": "string",
    "applicable": "string",
    "createdAt": "string",
    "dateAcc": "string",
    "dateAccQa": "string",
    "dateDetail": "string",
    "fileDetail": "string",
    "idAcc": "string",
    "idAccQa": "string",
    "idActype": "string",
    "idTd": "string",
    "idTdDetail": "string",
    "isEngineer": "string",
    "isPilot": "string",
    "isQc": "string",
    "method": "string",
    "noteDetail": "string",
    "numberDetail": "string",
    "priority": "string",
    "statusTdDetail": "string",
    "subject": "string",
    "td": "string",
    "typeDetail": "string",
    "updatedAt": "string",
    "validasi": "number"
};

const AmimsTdDetailWidgetDtoFields = {
    "applicable": "string",
    "createdAt": "string",
    "dateAcc": "string",
    "dateAccQa": "string",
    "dateDetail": "string",
    "fileDetail": "string",
    "idAcc": "string",
    "idAccQa": "string",
    "idActype": "string",
    "idTd": "string",
    "idTdDetail": "string",
    "isEngineer": "string",
    "isPilot": "string",
    "isQc": "string",
    "method": "string",
    "noteDetail": "string",
    "numberDetail": "string",
    "priority": "string",
    "statusTdDetail": "string",
    "subject": "string",
    "total": "number",
    "typeDetail": "string",
    "updatedAt": "string",
    "validasi": "number"
};

const AmimsTdDtoFields = {
    "applicable": "string",
    "createdAt": "string",
    "docNumber": "string",
    "effectiveDate": "string",
    "fileTd": "string",
    "idDoctype": "string",
    "idTd": "string",
    "idUser": "string",
    "noteDoc": "string",
    "oldId": "string",
    "rev": "string",
    "tdParent": "string",
    "title": "string",
    "updatedAt": "string",
    "validasi": "number"
};

const AmimsTdRefDtoFields = {
    "idTd": "string",
    "idTdLain": "string",
    "idTdRef": "string",
    "noTdLain": "string"
};

const AmimsTdRefReportDtoFields = {
    "idTd": "string",
    "idTdLain": "string",
    "idTdRef": "string",
    "noTdLain": "string",
    "td": "string"
};

const AmimsTdRefWidgetDtoFields = {
    "idTd": "string",
    "idTdLain": "string",
    "idTdRef": "string",
    "noTdLain": "string",
    "total": "number"
};

const AmimsTdReportDtoFields = {
    "applicable": "string",
    "createdAt": "string",
    "docNumber": "string",
    "doctype": "string",
    "effectiveDate": "string",
    "fileTd": "string",
    "idDoctype": "string",
    "idTd": "string",
    "idUser": "string",
    "noteDoc": "string",
    "oldId": "string",
    "rev": "string",
    "tdParent": "string",
    "title": "string",
    "updatedAt": "string",
    "validasi": "number"
};

const AmimsTdTypeDtoFields = {
    "descriptionTdType": "string",
    "idTdType": "string",
    "tdType": "string"
};

const AmimsTdTypeReportDtoFields = {
    "descriptionTdType": "string",
    "idTdType": "string",
    "tdType": "string"
};

const AmimsTdTypeWidgetDtoFields = {
    "descriptionTdType": "string",
    "idTdType": "string",
    "tdType": "string",
    "total": "number"
};

const AmimsTdWidgetDtoFields = {
    "applicable": "string",
    "createdAt": "string",
    "docNumber": "string",
    "effectiveDate": "string",
    "fileTd": "string",
    "idDoctype": "string",
    "idTd": "string",
    "idUser": "string",
    "noteDoc": "string",
    "oldId": "string",
    "rev": "string",
    "tdParent": "string",
    "title": "string",
    "total": "number",
    "updatedAt": "string",
    "validasi": "number"
};

const AmimsTechDefectDtoFields = {
    "createdAt": "string",
    "dateDefect": "string",
    "doneCycle": "number",
    "doneDate": "string",
    "doneHours": "number",
    "idAircraft": "string",
    "idEngineerRti": "string",
    "idPart": "string",
    "idPartInstall": "string",
    "idTechDefect": "string",
    "idTechLog": "string",
    "noteDefect": "string",
    "statusDefect": "string",
    "updatedAt": "string",
    "userSign": "string"
};

const AmimsTechDefectReportDtoFields = {
    "aircraft": "string",
    "createdAt": "string",
    "dateDefect": "string",
    "doneCycle": "number",
    "doneDate": "string",
    "doneHours": "number",
    "idAircraft": "string",
    "idEngineerRti": "string",
    "idPart": "string",
    "idPartInstall": "string",
    "idTechDefect": "string",
    "idTechLog": "string",
    "noteDefect": "string",
    "part": "string",
    "statusDefect": "string",
    "updatedAt": "string",
    "userSign": "string"
};

const AmimsTechDefectWidgetDtoFields = {
    "createdAt": "string",
    "dateDefect": "string",
    "doneCycle": "number",
    "doneDate": "string",
    "doneHours": "number",
    "idAircraft": "string",
    "idEngineerRti": "string",
    "idPart": "string",
    "idPartInstall": "string",
    "idTechDefect": "string",
    "idTechLog": "string",
    "noteDefect": "string",
    "statusDefect": "string",
    "total": "number",
    "updatedAt": "string",
    "userSign": "string"
};

const AmimsTechDiscrepanciesDtoFields = {
    "createdAt": "string",
    "dateDiscrepancies": "string",
    "idPart": "string",
    "idTechDiscrepancies": "string",
    "idTechLog": "string",
    "isDiscrepancies": "string",
    "noteDiscrepancies": "string",
    "updatedAt": "string"
};

const AmimsTechDiscrepanciesReportDtoFields = {
    "createdAt": "string",
    "dateDiscrepancies": "string",
    "idPart": "string",
    "idTechDiscrepancies": "string",
    "idTechLog": "string",
    "isDiscrepancies": "string",
    "noteDiscrepancies": "string",
    "part": "string",
    "updatedAt": "string"
};

const AmimsTechDiscrepanciesWidgetDtoFields = {
    "createdAt": "string",
    "dateDiscrepancies": "string",
    "idPart": "string",
    "idTechDiscrepancies": "string",
    "idTechLog": "string",
    "isDiscrepancies": "string",
    "noteDiscrepancies": "string",
    "total": "number",
    "updatedAt": "string"
};

const AmimsTechLogDtoFields = {
    "authoRized": "number",
    "createdAt": "string",
    "cycleBf": "number",
    "cycleCf": "number",
    "cycleFlight": "number",
    "dateInspection": "string",
    "hoursBf": "number",
    "hoursCf": "number",
    "hoursFlight": "number",
    "idAircraft": "string",
    "idTechLog": "string",
    "idUserAcc": "string",
    "idUserInspection": "string",
    "idUserLog": "string",
    "isDeleted": "number",
    "isEdit": "number",
    "lastUpdate": "number",
    "noteLog": "string",
    "numberLog": "string",
    "numberNext": "number",
    "oldId": "string",
    "pesan": "string",
    "place": "number",
    "techLogDate": "string",
    "totalCycle": "number",
    "totalFlight": "number",
    "totalFuel": "number",
    "updatedAt": "string",
    "validasi": "number",
    "xycleInput": "number"
};

const AmimsTechLogEngineCheckDtoFields = {
    "alt": "number",
    "idTechLog": "string",
    "idTechLogEngine": "string",
    "idTechLogEngineCheck": "string",
    "itt": "number",
    "n1": "number",
    "n2": "number",
    "nr": "number",
    "oat": "number",
    "oilPress": "number",
    "oilTemp": "number",
    "powerMargin": "number",
    "speed": "number",
    "t5": "number",
    "torque": "number"
};

const AmimsTechLogEngineCheckReportDtoFields = {
    "alt": "number",
    "idTechLog": "string",
    "idTechLogEngine": "string",
    "idTechLogEngineCheck": "string",
    "itt": "number",
    "n1": "number",
    "n2": "number",
    "nr": "number",
    "oat": "number",
    "oilPress": "number",
    "oilTemp": "number",
    "powerMargin": "number",
    "speed": "number",
    "t5": "number",
    "torque": "number"
};

const AmimsTechLogEngineCheckWidgetDtoFields = {
    "alt": "number",
    "idTechLog": "string",
    "idTechLogEngine": "string",
    "idTechLogEngineCheck": "string",
    "itt": "number",
    "n1": "number",
    "n2": "number",
    "nr": "number",
    "oat": "number",
    "oilPress": "number",
    "oilTemp": "number",
    "powerMargin": "number",
    "speed": "number",
    "t5": "number",
    "torque": "number",
    "total": "number"
};

const AmimsTechLogEngineDtoFields = {
    "cycleBf": "number",
    "cycleCf": "number",
    "cycleFlight": "number",
    "fullCycleBf": "number",
    "fullCycleFlt": "number",
    "hoursBf": "number",
    "hoursCf": "number",
    "hoursFlight": "number",
    "idPart": "string",
    "idTechLog": "string",
    "idTechLogEngine": "string",
    "n1": "number",
    "n2": "number",
    "oil": "string",
    "oilAdd": "number",
    "oilTotal": "number",
    "oldId": "string",
    "partCycleBf": "number",
    "partCycleFlt": "number",
    "sn": "string",
    "timeAboveBf": "number",
    "timeAboveFlt": "number",
    "validasi": "number"
};

const AmimsTechLogEngineReportDtoFields = {
    "cycleBf": "number",
    "cycleCf": "number",
    "cycleFlight": "number",
    "fullCycleBf": "number",
    "fullCycleFlt": "number",
    "hoursBf": "number",
    "hoursCf": "number",
    "hoursFlight": "number",
    "idPart": "string",
    "idTechLog": "string",
    "idTechLogEngine": "string",
    "n1": "number",
    "n2": "number",
    "oil": "string",
    "oilAdd": "number",
    "oilTotal": "number",
    "oldId": "string",
    "part": "string",
    "partCycleBf": "number",
    "partCycleFlt": "number",
    "sn": "string",
    "timeAboveBf": "number",
    "timeAboveFlt": "number",
    "validasi": "number"
};

const AmimsTechLogEngineWidgetDtoFields = {
    "cycleBf": "number",
    "cycleCf": "number",
    "cycleFlight": "number",
    "fullCycleBf": "number",
    "fullCycleFlt": "number",
    "hoursBf": "number",
    "hoursCf": "number",
    "hoursFlight": "number",
    "idPart": "string",
    "idTechLog": "string",
    "idTechLogEngine": "string",
    "n1": "number",
    "n2": "number",
    "oil": "string",
    "oilAdd": "number",
    "oilTotal": "number",
    "oldId": "string",
    "partCycleBf": "number",
    "partCycleFlt": "number",
    "sn": "string",
    "timeAboveBf": "number",
    "timeAboveFlt": "number",
    "total": "number",
    "validasi": "number"
};

const AmimsTechLogItemDtoFields = {
    "apuStart": "number",
    "cgPenalty": "string",
    "cocaCaptain": "string",
    "cycles": "number",
    "flightFrom": "string",
    "flightHours": "number",
    "flightTo": "string",
    "hoistOperation": "string",
    "hoistUsage": "number",
    "idCaptain": "string",
    "idTechLog": "string",
    "idTechLogItem": "string",
    "landingTime": "string",
    "landings": "number",
    "noteTechLogItem": "string",
    "slingReleased": "number",
    "takeofTime": "string"
};

const AmimsTechLogItemReportDtoFields = {
    "apuStart": "number",
    "cgPenalty": "string",
    "cocaCaptain": "string",
    "cycles": "number",
    "flightFrom": "string",
    "flightHours": "number",
    "flightTo": "string",
    "hoistOperation": "string",
    "hoistUsage": "number",
    "idCaptain": "string",
    "idTechLog": "string",
    "idTechLogItem": "string",
    "landingTime": "string",
    "landings": "number",
    "noteTechLogItem": "string",
    "slingReleased": "number",
    "takeofTime": "string"
};

const AmimsTechLogItemWidgetDtoFields = {
    "apuStart": "number",
    "cgPenalty": "string",
    "cocaCaptain": "string",
    "cycles": "number",
    "flightFrom": "string",
    "flightHours": "number",
    "flightTo": "string",
    "hoistOperation": "string",
    "hoistUsage": "number",
    "idCaptain": "string",
    "idTechLog": "string",
    "idTechLogItem": "string",
    "landingTime": "string",
    "landings": "number",
    "noteTechLogItem": "string",
    "slingReleased": "number",
    "takeofTime": "string",
    "total": "number"
};

const AmimsTechLogJoDtoFields = {
    "createdAt": "string",
    "dateClose": "string",
    "idMpcJo": "string",
    "idPart": "string",
    "idTechLog": "string",
    "idTechLogClose": "string",
    "idTechLogJo": "string",
    "isContinue": "string",
    "timeClose": "string",
    "updatedAt": "string"
};

const AmimsTechLogJoReportDtoFields = {
    "createdAt": "string",
    "dateClose": "string",
    "idMpcJo": "string",
    "idPart": "string",
    "idTechLog": "string",
    "idTechLogClose": "string",
    "idTechLogJo": "string",
    "isContinue": "string",
    "part": "string",
    "timeClose": "string",
    "updatedAt": "string"
};

const AmimsTechLogJoWidgetDtoFields = {
    "createdAt": "string",
    "dateClose": "string",
    "idMpcJo": "string",
    "idPart": "string",
    "idTechLog": "string",
    "idTechLogClose": "string",
    "idTechLogJo": "string",
    "isContinue": "string",
    "timeClose": "string",
    "total": "number",
    "updatedAt": "string"
};

const AmimsTechLogReportDtoFields = {
    "aircraft": "string",
    "authoRized": "number",
    "createdAt": "string",
    "cycleBf": "number",
    "cycleCf": "number",
    "cycleFlight": "number",
    "dateInspection": "string",
    "hoursBf": "number",
    "hoursCf": "number",
    "hoursFlight": "number",
    "idAircraft": "string",
    "idTechLog": "string",
    "idUserAcc": "string",
    "idUserInspection": "string",
    "idUserLog": "string",
    "isDeleted": "number",
    "isEdit": "number",
    "lastUpdate": "number",
    "noteLog": "string",
    "numberLog": "string",
    "numberNext": "number",
    "oldId": "string",
    "pesan": "string",
    "place": "number",
    "techLogDate": "string",
    "totalCycle": "number",
    "totalFlight": "number",
    "totalFuel": "number",
    "updatedAt": "string",
    "validasi": "number",
    "xycleInput": "number"
};

const AmimsTechLogWidgetDtoFields = {
    "authoRized": "number",
    "createdAt": "string",
    "cycleBf": "number",
    "cycleCf": "number",
    "cycleFlight": "number",
    "dateInspection": "string",
    "hoursBf": "number",
    "hoursCf": "number",
    "hoursFlight": "number",
    "idAircraft": "string",
    "idTechLog": "string",
    "idUserAcc": "string",
    "idUserInspection": "string",
    "idUserLog": "string",
    "isDeleted": "number",
    "isEdit": "number",
    "lastUpdate": "number",
    "noteLog": "string",
    "numberLog": "string",
    "numberNext": "number",
    "oldId": "string",
    "pesan": "string",
    "place": "number",
    "techLogDate": "string",
    "total": "number",
    "totalCycle": "number",
    "totalFlight": "number",
    "totalFuel": "number",
    "updatedAt": "string",
    "validasi": "number",
    "xycleInput": "number"
};

const AmimsTypeOfworkDtoFields = {
    "childnameTypeOfwork": "string",
    "code": "string",
    "idTypeOfwork": "string",
    "isDeleted": "number",
    "typeOfwork": "string"
};

const AmimsTypeOfworkReportDtoFields = {
    "childnameTypeOfwork": "string",
    "code": "string",
    "idTypeOfwork": "string",
    "isDeleted": "number",
    "typeOfwork": "string"
};

const AmimsTypeOfworkWidgetDtoFields = {
    "childnameTypeOfwork": "string",
    "code": "string",
    "idTypeOfwork": "string",
    "isDeleted": "number",
    "total": "number",
    "typeOfwork": "string"
};

const AmimsWarrantyDtoFields = {
    "createdAt": "string",
    "cycle": "number",
    "days": "number",
    "effectiveDate": "string",
    "expairedDate": "string",
    "hours": "number",
    "idPart": "string",
    "idVendor": "string",
    "idWarranty": "string",
    "note": "string",
    "type": "string",
    "updatedAt": "string"
};

const AuthResponseDtoFields = {
    "access_token": "string",
    "refresh_token": "string",
    "user": "string"
};

const BaseWidgetQueryDtoFields = {
    "filter": "string",
    "groupBy": "string",
    "joinWhere": "string",
    "select": "string",
    "sortKey": "string",
    "sortValue": "string"
};

const CurrentUserResponseDtoFields = {
    "pegawai": "string",
    "role": "string",
    "user": "string"
};

const DocumentDocumentDtoFields = {
    "createdAt": "string",
    "enableDownload": "string",
    "fileExt": "string",
    "fileLocation": "string",
    "fileName": "string",
    "forModule": "string",
    "forModuleId": "string",
    "forTable": "string",
    "idDocument": "string",
    "idUsers": "string",
    "name": "string",
    "nomor": "string",
    "revisi": "string",
    "tanggal": "string",
    "updatedAt": "string"
};

const DocumentDtoFields = {
    "createdAt": "string",
    "enableDownload": "string",
    "fileExt": "string",
    "fileLocation": "string",
    "fileName": "string",
    "forModule": "string",
    "forModuleId": "string",
    "forTable": "string",
    "idDocument": "string",
    "idUser": "number",
    "name": "string",
    "nomor": "string",
    "revisi": "string",
    "tanggal": "string",
    "updatedAt": "string"
};

const LoginDtoFields = {
    "email": "string",
    "password": "string"
};

const PelangganClientContactDtoFields = {
    "catatan": "string",
    "createdAt": "string",
    "divisi": "string",
    "email": "string",
    "idClient": "string",
    "idClientContact": "string",
    "isPrimary": "boolean",
    "jabatan": "string",
    "jenisContact": "string",
    "namaContact": "string",
    "telepon": "string",
    "updatedAt": "string"
};

const PelangganClientContactReportDtoFields = {
    "catatan": "string",
    "client": "string",
    "createdAt": "string",
    "divisi": "string",
    "email": "string",
    "idClient": "string",
    "idClientContact": "string",
    "isPrimary": "boolean",
    "jabatan": "string",
    "jenisContact": "string",
    "namaContact": "string",
    "telepon": "string",
    "updatedAt": "string"
};

const PelangganClientContactWidgetDtoFields = {
    "catatan": "string",
    "createdAt": "string",
    "divisi": "string",
    "email": "string",
    "idClient": "string",
    "idClientContact": "string",
    "isPrimary": "boolean",
    "jabatan": "string",
    "jenisContact": "string",
    "namaContact": "string",
    "telepon": "string",
    "total": "number",
    "updatedAt": "string"
};

const PelangganClientDtoFields = {
    "alamat": "string",
    "catatan": "string",
    "createdAt": "string",
    "emailPerusahaan": "string",
    "idClient": "string",
    "isAktif": "boolean",
    "jenisClient": "string",
    "kodeClient": "string",
    "kodePos": "string",
    "kota": "string",
    "logoUrl": "string",
    "namaFamiliar": "string",
    "namaResmi": "string",
    "npwp": "string",
    "primaryPic": "string",
    "provinsi": "string",
    "telepon": "string",
    "updatedAt": "string",
    "website": "string"
};

const PelangganClientReportDtoFields = {
    "alamat": "string",
    "catatan": "string",
    "createdAt": "string",
    "emailPerusahaan": "string",
    "idClient": "string",
    "isAktif": "boolean",
    "jenisClient": "string",
    "kodeClient": "string",
    "kodePos": "string",
    "kota": "string",
    "logoUrl": "string",
    "namaFamiliar": "string",
    "namaResmi": "string",
    "npwp": "string",
    "primaryPic": "string",
    "provinsi": "string",
    "telepon": "string",
    "updatedAt": "string",
    "website": "string"
};

const PelangganClientSiteDtoFields = {
    "alamat": "string",
    "catatan": "string",
    "createdAt": "string",
    "idClient": "string",
    "idClientSite": "string",
    "idKantor": "string",
    "isAktif": "boolean",
    "kategoriSite": "string",
    "kodePos": "string",
    "kota": "string",
    "latitude": "number",
    "longitude": "number",
    "namaSite": "string",
    "provinsi": "string",
    "tagSite": "string",
    "updatedAt": "string"
};

const PelangganClientSiteReportDtoFields = {
    "alamat": "string",
    "catatan": "string",
    "client": "string",
    "createdAt": "string",
    "idClient": "string",
    "idClientSite": "string",
    "idKantor": "string",
    "isAktif": "boolean",
    "kantor": "string",
    "kategoriSite": "string",
    "kodePos": "string",
    "kota": "string",
    "latitude": "number",
    "longitude": "number",
    "namaSite": "string",
    "provinsi": "string",
    "tagSite": "string",
    "updatedAt": "string"
};

const PelangganClientSiteWidgetDtoFields = {
    "alamat": "string",
    "catatan": "string",
    "createdAt": "string",
    "idClient": "string",
    "idClientSite": "string",
    "idKantor": "string",
    "isAktif": "boolean",
    "kategoriSite": "string",
    "kodePos": "string",
    "kota": "string",
    "latitude": "number",
    "longitude": "number",
    "namaSite": "string",
    "provinsi": "string",
    "tagSite": "string",
    "total": "number",
    "updatedAt": "string"
};

const PelangganClientWidgetDtoFields = {
    "alamat": "string",
    "catatan": "string",
    "createdAt": "string",
    "emailPerusahaan": "string",
    "idClient": "string",
    "isAktif": "boolean",
    "jenisClient": "string",
    "kodeClient": "string",
    "kodePos": "string",
    "kota": "string",
    "logoUrl": "string",
    "namaFamiliar": "string",
    "namaResmi": "string",
    "npwp": "string",
    "primaryPic": "string",
    "provinsi": "string",
    "telepon": "string",
    "total": "number",
    "updatedAt": "string",
    "website": "string"
};

const PelangganCompanyConfigDtoFields = {
    "alamat": "string",
    "catatan": "string",
    "createdAt": "string",
    "idCompanyConfig": "string",
    "kontak": "string",
    "logoUrl": "string",
    "namaPerusahaan": "string",
    "updatedAt": "string",
    "versiErp": "string"
};

const PelangganCompanyConfigReportDtoFields = {
    "alamat": "string",
    "catatan": "string",
    "createdAt": "string",
    "idCompanyConfig": "string",
    "kontak": "string",
    "logoUrl": "string",
    "namaPerusahaan": "string",
    "updatedAt": "string",
    "versiErp": "string"
};

const PelangganCompanyConfigWidgetDtoFields = {
    "alamat": "string",
    "catatan": "string",
    "createdAt": "string",
    "idCompanyConfig": "string",
    "kontak": "string",
    "logoUrl": "string",
    "namaPerusahaan": "string",
    "total": "number",
    "updatedAt": "string",
    "versiErp": "string"
};

const PelangganContactClientUseDtoFields = {
    "catatan": "string",
    "createdAt": "string",
    "fromModule": "string",
    "fromModuleId": "string",
    "idClientContact": "string",
    "idContactClientUse": "string",
    "isPrimary": "boolean",
    "peran": "string",
    "updatedAt": "string"
};

const PelangganContactClientUseReportDtoFields = {
    "catatan": "string",
    "createdAt": "string",
    "fromModule": "string",
    "fromModuleId": "string",
    "idClientContact": "string",
    "idContactClientUse": "string",
    "isPrimary": "boolean",
    "peran": "string",
    "updatedAt": "string"
};

const PelangganContactClientUseWidgetDtoFields = {
    "catatan": "string",
    "createdAt": "string",
    "fromModule": "string",
    "fromModuleId": "string",
    "idClientContact": "string",
    "idContactClientUse": "string",
    "isPrimary": "boolean",
    "peran": "string",
    "total": "number",
    "updatedAt": "string"
};

const PelangganContractDtoFields = {
    "catatanKontrak": "string",
    "createdAt": "string",
    "dokumenUrl": "string",
    "durasiBulan": "number",
    "feeSales": "number",
    "idClient": "string",
    "idContract": "string",
    "idContractJenis": "string",
    "idDocument": "string",
    "idKantor": "string",
    "isAutoInvoice": "boolean",
    "namaSales": "string",
    "nilaiAkhir": "number",
    "nilaiBulanan": "number",
    "nilaiDiawal": "number",
    "nilaiKontrak": "number",
    "nomorKontrak": "string",
    "presentaseFee": "number",
    "refKontrakSebelumnya": "string",
    "statusContract": "string",
    "tanggalAkhir": "string",
    "tanggalKontrak": "string",
    "tanggalMulai": "string",
    "updatedAt": "string"
};

const PelangganContractJenisDtoFields = {
    "createdAt": "string",
    "idContractJenis": "string",
    "keterangan": "string",
    "namaContractJenis": "string",
    "role": "string",
    "statusContractJenis": "string",
    "updatedAt": "string"
};

const PelangganContractJenisReportDtoFields = {
    "createdAt": "string",
    "idContractJenis": "string",
    "keterangan": "string",
    "namaContractJenis": "string",
    "role": "string",
    "statusContractJenis": "string",
    "updatedAt": "string"
};

const PelangganContractJenisWidgetDtoFields = {
    "createdAt": "string",
    "idContractJenis": "string",
    "keterangan": "string",
    "namaContractJenis": "string",
    "role": "string",
    "statusContractJenis": "string",
    "total": "number",
    "updatedAt": "string"
};

const PelangganContractReportDtoFields = {
    "catatanKontrak": "string",
    "client": "string",
    "createdAt": "string",
    "dokumenUrl": "string",
    "durasiBulan": "number",
    "feeSales": "number",
    "idClient": "string",
    "idContract": "string",
    "idContractJenis": "string",
    "idDocument": "string",
    "idKantor": "string",
    "isAutoInvoice": "boolean",
    "kantor": "string",
    "namaSales": "string",
    "nilaiAkhir": "number",
    "nilaiBulanan": "number",
    "nilaiDiawal": "number",
    "nilaiKontrak": "number",
    "nomorKontrak": "string",
    "presentaseFee": "number",
    "refKontrakSebelumnya": "string",
    "statusContract": "string",
    "tanggalAkhir": "string",
    "tanggalKontrak": "string",
    "tanggalMulai": "string",
    "updatedAt": "string"
};

const PelangganContractSiteDtoFields = {
    "biayaAkhir": "number",
    "biayaBulanan": "number",
    "biayaDiawal": "number",
    "catatan": "string",
    "createdAt": "string",
    "idClientSite": "string",
    "idContract": "string",
    "idContractSite": "string",
    "jumlahJadwalPerBulan": "number",
    "nilaiTotal": "number",
    "statusContractSite": "string",
    "updatedAt": "string"
};

const PelangganContractSiteReportDtoFields = {
    "biayaAkhir": "number",
    "biayaBulanan": "number",
    "biayaDiawal": "number",
    "catatan": "string",
    "contract": "string",
    "createdAt": "string",
    "idClientSite": "string",
    "idContract": "string",
    "idContractSite": "string",
    "jumlahJadwalPerBulan": "number",
    "nilaiTotal": "number",
    "statusContractSite": "string",
    "updatedAt": "string"
};

const PelangganContractSiteServiceDtoFields = {
    "createdAt": "string",
    "deskripsiService": "string",
    "idContractSite": "string",
    "idContractSiteService": "string",
    "idService": "string",
    "spesifikasiService": "string",
    "updatedAt": "string"
};

const PelangganContractSiteServiceReportDtoFields = {
    "createdAt": "string",
    "deskripsiService": "string",
    "idContractSite": "string",
    "idContractSiteService": "string",
    "idService": "string",
    "service": "string",
    "spesifikasiService": "string",
    "updatedAt": "string"
};

const PelangganContractSiteServiceWidgetDtoFields = {
    "createdAt": "string",
    "deskripsiService": "string",
    "idContractSite": "string",
    "idContractSiteService": "string",
    "idService": "string",
    "spesifikasiService": "string",
    "total": "number",
    "updatedAt": "string"
};

const PelangganContractSiteWidgetDtoFields = {
    "biayaAkhir": "number",
    "biayaBulanan": "number",
    "biayaDiawal": "number",
    "catatan": "string",
    "createdAt": "string",
    "idClientSite": "string",
    "idContract": "string",
    "idContractSite": "string",
    "jumlahJadwalPerBulan": "number",
    "nilaiTotal": "number",
    "statusContractSite": "string",
    "total": "number",
    "updatedAt": "string"
};

const PelangganContractWidgetDtoFields = {
    "catatanKontrak": "string",
    "createdAt": "string",
    "dokumenUrl": "string",
    "durasiBulan": "number",
    "feeSales": "number",
    "idClient": "string",
    "idContract": "string",
    "idContractJenis": "string",
    "idDocument": "string",
    "idKantor": "string",
    "isAutoInvoice": "boolean",
    "namaSales": "string",
    "nilaiAkhir": "number",
    "nilaiBulanan": "number",
    "nilaiDiawal": "number",
    "nilaiKontrak": "number",
    "nomorKontrak": "string",
    "presentaseFee": "number",
    "refKontrakSebelumnya": "string",
    "statusContract": "string",
    "tanggalAkhir": "string",
    "tanggalKontrak": "string",
    "tanggalMulai": "string",
    "total": "number",
    "updatedAt": "string"
};

const PelangganFakturDtoFields = {
    "catatan": "string",
    "createdAt": "string",
    "createdBy": "string",
    "fileFakturUrl": "string",
    "idFaktur": "string",
    "idInvoice": "string",
    "metodePembayaran": "string",
    "nilaiFaktur": "number",
    "nomorFaktur": "string",
    "nomorReferensiPembayaran": "string",
    "statusPembayaran": "string",
    "tanggalFaktur": "string",
    "tanggalPembayaran": "string",
    "updatedAt": "string",
    "updatedBy": "string",
    "versiFaktur": "number"
};

const PelangganFakturReportDtoFields = {
    "catatan": "string",
    "createdAt": "string",
    "createdBy": "string",
    "fileFakturUrl": "string",
    "idFaktur": "string",
    "idInvoice": "string",
    "invoice": "string",
    "metodePembayaran": "string",
    "nilaiFaktur": "number",
    "nomorFaktur": "string",
    "nomorReferensiPembayaran": "string",
    "statusPembayaran": "string",
    "tanggalFaktur": "string",
    "tanggalPembayaran": "string",
    "updatedAt": "string",
    "updatedBy": "string",
    "versiFaktur": "number"
};

const PelangganFakturWidgetDtoFields = {
    "catatan": "string",
    "createdAt": "string",
    "createdBy": "string",
    "fileFakturUrl": "string",
    "idFaktur": "string",
    "idInvoice": "string",
    "metodePembayaran": "string",
    "nilaiFaktur": "number",
    "nomorFaktur": "string",
    "nomorReferensiPembayaran": "string",
    "statusPembayaran": "string",
    "tanggalFaktur": "string",
    "tanggalPembayaran": "string",
    "total": "number",
    "updatedAt": "string",
    "updatedBy": "string",
    "versiFaktur": "number"
};

const PelangganInvoiceDtoFields = {
    "alamatPenagihan": "string",
    "catatan": "string",
    "createdAt": "string",
    "createdBy": "string",
    "dpp": "number",
    "idContract": "string",
    "idInvoice": "string",
    "jenisInvoice": "string",
    "metodePembayaran": "string",
    "nilaiInvoice": "number",
    "nomorInvoice": "string",
    "npwp": "string",
    "periode": "string",
    "picPenagihan": "string",
    "ppn": "number",
    "statusInvoice": "string",
    "tanggalDibayar": "string",
    "tanggalJatuhTempo": "string",
    "tanggalTerbit": "string",
    "updatedAt": "string",
    "updatedBy": "string"
};

const PelangganInvoiceReportDtoFields = {
    "alamatPenagihan": "string",
    "catatan": "string",
    "contract": "string",
    "createdAt": "string",
    "createdBy": "string",
    "dpp": "number",
    "idContract": "string",
    "idInvoice": "string",
    "jenisInvoice": "string",
    "metodePembayaran": "string",
    "nilaiInvoice": "number",
    "nomorInvoice": "string",
    "npwp": "string",
    "periode": "string",
    "picPenagihan": "string",
    "ppn": "number",
    "statusInvoice": "string",
    "tanggalDibayar": "string",
    "tanggalJatuhTempo": "string",
    "tanggalTerbit": "string",
    "updatedAt": "string",
    "updatedBy": "string"
};

const PelangganInvoiceWidgetDtoFields = {
    "alamatPenagihan": "string",
    "catatan": "string",
    "createdAt": "string",
    "createdBy": "string",
    "dpp": "number",
    "idContract": "string",
    "idInvoice": "string",
    "jenisInvoice": "string",
    "metodePembayaran": "string",
    "nilaiInvoice": "number",
    "nomorInvoice": "string",
    "npwp": "string",
    "periode": "string",
    "picPenagihan": "string",
    "ppn": "number",
    "statusInvoice": "string",
    "tanggalDibayar": "string",
    "tanggalJatuhTempo": "string",
    "tanggalTerbit": "string",
    "total": "number",
    "updatedAt": "string",
    "updatedBy": "string"
};

const PelangganKantorDtoFields = {
    "alamat": "string",
    "catatan": "string",
    "createdAt": "string",
    "idKantor": "string",
    "isAktif": "boolean",
    "isPusat": "boolean",
    "kodeKantor": "string",
    "kota": "string",
    "namaKantor": "string",
    "provinsi": "string",
    "updatedAt": "string"
};

const PelangganKantorReportDtoFields = {
    "alamat": "string",
    "catatan": "string",
    "createdAt": "string",
    "idKantor": "string",
    "isAktif": "boolean",
    "isPusat": "boolean",
    "kodeKantor": "string",
    "kota": "string",
    "namaKantor": "string",
    "provinsi": "string",
    "updatedAt": "string"
};

const PelangganKantorWidgetDtoFields = {
    "alamat": "string",
    "catatan": "string",
    "createdAt": "string",
    "idKantor": "string",
    "isAktif": "boolean",
    "isPusat": "boolean",
    "kodeKantor": "string",
    "kota": "string",
    "namaKantor": "string",
    "provinsi": "string",
    "total": "number",
    "updatedAt": "string"
};

const PelangganServiceDtoFields = {
    "createdAt": "string",
    "deskripsi": "string",
    "hargaDefault": "number",
    "idService": "string",
    "isAktif": "boolean",
    "kodeService": "string",
    "namaService": "string",
    "satuan": "string",
    "updatedAt": "string"
};

const PelangganServiceReportDtoFields = {
    "createdAt": "string",
    "deskripsi": "string",
    "hargaDefault": "number",
    "idService": "string",
    "isAktif": "boolean",
    "kodeService": "string",
    "namaService": "string",
    "satuan": "string",
    "updatedAt": "string"
};

const PelangganServiceWidgetDtoFields = {
    "createdAt": "string",
    "deskripsi": "string",
    "hargaDefault": "number",
    "idService": "string",
    "isAktif": "boolean",
    "kodeService": "string",
    "namaService": "string",
    "satuan": "string",
    "total": "number",
    "updatedAt": "string"
};

const PelangganTeknisiDtoFields = {
    "createdAt": "string",
    "idPegawai": "string",
    "idTeknisi": "string",
    "idUser": "string",
    "namaTeknisi": "string",
    "statusTeknisi": "string",
    "updatedAt": "string"
};

const PelangganTeknisiReportDtoFields = {
    "createdAt": "string",
    "idPegawai": "string",
    "idTeknisi": "string",
    "idUser": "string",
    "namaTeknisi": "string",
    "statusTeknisi": "string",
    "updatedAt": "string"
};

const PelangganTeknisiWidgetDtoFields = {
    "createdAt": "string",
    "idPegawai": "string",
    "idTeknisi": "string",
    "idUser": "string",
    "namaTeknisi": "string",
    "statusTeknisi": "string",
    "total": "number",
    "updatedAt": "string"
};

const PelangganWorkScheduleDtoFields = {
    "createdAt": "string",
    "createdBy": "string",
    "durationWorking": "number",
    "endWorking": "string",
    "idContractSite": "string",
    "idContractSiteService": "string",
    "idUser": "string",
    "idWorkSchedule": "string",
    "keterangan": "string",
    "nomorWorkSchedule": "string",
    "startWorking": "string",
    "statusWorkSchedule": "string",
    "tanggalWorkSchedule": "string",
    "tipeWorkSchedule": "string",
    "updatedAt": "string",
    "updatedBy": "string"
};

const PelangganWorkScheduleReportDtoFields = {
    "createdAt": "string",
    "createdBy": "string",
    "durationWorking": "number",
    "endWorking": "string",
    "idContractSite": "string",
    "idContractSiteService": "string",
    "idUser": "string",
    "idWorkSchedule": "string",
    "keterangan": "string",
    "nomorWorkSchedule": "string",
    "startWorking": "string",
    "statusWorkSchedule": "string",
    "tanggalWorkSchedule": "string",
    "tipeWorkSchedule": "string",
    "updatedAt": "string",
    "updatedBy": "string"
};

const PelangganWorkScheduleTeknisiDtoFields = {
    "catatan": "string",
    "createdAt": "string",
    "fee": "number",
    "idTeknisi": "string",
    "idWorkSchedule": "string",
    "idWorkScheduleTeknisi": "string",
    "namaTeknisi": "string",
    "peran": "string"
};

const PelangganWorkScheduleTeknisiReportDtoFields = {
    "catatan": "string",
    "createdAt": "string",
    "fee": "number",
    "idTeknisi": "string",
    "idWorkSchedule": "string",
    "idWorkScheduleTeknisi": "string",
    "namaTeknisi": "string",
    "peran": "string",
    "teknisi": "string"
};

const PelangganWorkScheduleTeknisiWidgetDtoFields = {
    "catatan": "string",
    "createdAt": "string",
    "fee": "number",
    "idTeknisi": "string",
    "idWorkSchedule": "string",
    "idWorkScheduleTeknisi": "string",
    "namaTeknisi": "string",
    "peran": "string",
    "total": "number"
};

const PelangganWorkScheduleWidgetDtoFields = {
    "createdAt": "string",
    "createdBy": "string",
    "durationWorking": "number",
    "endWorking": "string",
    "idContractSite": "string",
    "idContractSiteService": "string",
    "idUser": "string",
    "idWorkSchedule": "string",
    "keterangan": "string",
    "nomorWorkSchedule": "string",
    "startWorking": "string",
    "statusWorkSchedule": "string",
    "tanggalWorkSchedule": "string",
    "tipeWorkSchedule": "string",
    "total": "number",
    "updatedAt": "string",
    "updatedBy": "string"
};

const RefreshTokenDtoFields = {};

const ResetPasswordDtoFields = {};

const SelectFieldDtoFields = {
    "alias": "string",
    "field": "string",
    "type": "string"
};

const SimpleMessageDtoFields = {
    "message": "string"
};

const TokenOnlyResponseDtoFields = {
    "access_token": "string",
    "refresh_token": "string"
};

const ToolsCustomFieldDtoFields = {
    "catatan": "string",
    "createdAt": "string",
    "defaultValue": "string",
    "idCustomField": "string",
    "idCustomFieldGroup": "string",
    "isFilterable": "boolean",
    "isRequired": "boolean",
    "kodeField": "string",
    "labelField": "string",
    "opsiSelect": "string",
    "prefixField": "string",
    "tipeField": "string",
    "updatedAt": "string",
    "urutan": "number",
    "validasi": "string"
};

const ToolsCustomFieldGroupDtoFields = {
    "createdAt": "string",
    "deskripsi": "string",
    "forKantor": "string",
    "forRole": "string",
    "idCustomFieldGroup": "string",
    "isRepeatable": "boolean",
    "modul": "string",
    "namaGroup": "string",
    "tableName": "string",
    "tipeRender": "string",
    "updatedAt": "string",
    "urutan": "number",
    "visibilityRule": "string"
};

const ToolsCustomFieldGroupReportDtoFields = {
    "createdAt": "string",
    "deskripsi": "string",
    "forKantor": "string",
    "forRole": "string",
    "idCustomFieldGroup": "string",
    "isRepeatable": "boolean",
    "modul": "string",
    "namaGroup": "string",
    "tableName": "string",
    "tipeRender": "string",
    "updatedAt": "string",
    "urutan": "number",
    "visibilityRule": "string"
};

const ToolsCustomFieldGroupWidgetDtoFields = {
    "createdAt": "string",
    "deskripsi": "string",
    "forKantor": "string",
    "forRole": "string",
    "idCustomFieldGroup": "string",
    "isRepeatable": "boolean",
    "modul": "string",
    "namaGroup": "string",
    "tableName": "string",
    "tipeRender": "string",
    "total": "number",
    "updatedAt": "string",
    "urutan": "number",
    "visibilityRule": "string"
};

const ToolsCustomFieldValueDtoFields = {
    "createdAt": "string",
    "idCustomField": "string",
    "idCustomFieldGroup": "string",
    "idCustomFieldValue": "string",
    "kodeField": "string",
    "labelField": "string",
    "modul": "string",
    "modulId": "string",
    "nilai": "string",
    "nilaiJson": "string",
    "tableName": "string",
    "updatedAt": "string"
};

const ToolsCustomFieldValueReportDtoFields = {
    "createdAt": "string",
    "idCustomField": "string",
    "idCustomFieldGroup": "string",
    "idCustomFieldValue": "string",
    "kodeField": "string",
    "labelField": "string",
    "modul": "string",
    "modulId": "string",
    "nilai": "string",
    "nilaiJson": "string",
    "tableName": "string",
    "updatedAt": "string"
};

const ToolsCustomFieldValueWidgetDtoFields = {
    "createdAt": "string",
    "idCustomField": "string",
    "idCustomFieldGroup": "string",
    "idCustomFieldValue": "string",
    "kodeField": "string",
    "labelField": "string",
    "modul": "string",
    "modulId": "string",
    "nilai": "string",
    "nilaiJson": "string",
    "tableName": "string",
    "total": "number",
    "updatedAt": "string"
};

const ToolsDocumentNumberingCounterDtoFields = {
    "bulan": "number",
    "createdAt": "string",
    "forModule": "string",
    "forModuleId": "string",
    "idDocumentNumbering": "string",
    "idDocumentNumberingCounter": "string",
    "idKantor": "string",
    "lastNumber": "number",
    "tahun": "number",
    "targetColumn": "string",
    "updatedAt": "string"
};

const ToolsDocumentNumberingDtoFields = {
    "allowManualEntry": "boolean",
    "allowedRoles": "string",
    "createdAt": "string",
    "digitNomor": "number",
    "forModule": "string",
    "formatNomor": "string",
    "idDocumentNumbering": "string",
    "isActive": "boolean",
    "label": "string",
    "resetPeriode": "string",
    "targetColumn": "string",
    "targetTable": "string",
    "triggerStage": "string",
    "updatedAt": "string"
};

const ToolsWorkflowAggregatorDtoFields = {
    "createdAt": "string",
    "fromModule": "string",
    "fromModuleId": "string",
    "idWorkflow": "string",
    "idWorkflowAggregator": "string",
    "lastApprovalDate": "string",
    "lastApprovalNote": "string",
    "lastApprovalStatus": "string",
    "lastApprovalUser": "string",
    "lastWorkflowStep": "string",
    "updatedAt": "string"
};

const ToolsWorkflowDtoFields = {
    "createdAt": "string",
    "forModule": "string",
    "idKantor": "string",
    "idWorkflow": "string",
    "isDefault": "boolean",
    "keterangan": "string",
    "namaWorkflow": "string",
    "statusWorkflow": "string",
    "targetDb": "string",
    "targetTable": "string",
    "updatedAt": "string"
};

const ToolsWorkflowLogDtoFields = {
    "approvedAt": "string",
    "approvedBy": "string",
    "catatan": "string",
    "forModule": "string",
    "fromModuleId": "string",
    "idUsers": "string",
    "idWorkflow": "string",
    "idWorkflowLog": "string",
    "idWorkflowStep": "string",
    "namaUser": "string",
    "statusAfter": "string",
    "statusBefore": "string"
};

const ToolsWorkflowLogReportDtoFields = {
    "approvedAt": "string",
    "approvedBy": "string",
    "catatan": "string",
    "forModule": "string",
    "fromModuleId": "string",
    "idUsers": "string",
    "idWorkflow": "string",
    "idWorkflowLog": "string",
    "idWorkflowStep": "string",
    "namaUser": "string",
    "statusAfter": "string",
    "statusBefore": "string",
    "workflow": "string"
};

const ToolsWorkflowLogWidgetDtoFields = {
    "approvedAt": "string",
    "approvedBy": "string",
    "catatan": "string",
    "forModule": "string",
    "fromModuleId": "string",
    "idUsers": "string",
    "idWorkflow": "string",
    "idWorkflowLog": "string",
    "idWorkflowStep": "string",
    "namaUser": "string",
    "statusAfter": "string",
    "statusBefore": "string",
    "total": "number"
};

const ToolsWorkflowReportDtoFields = {
    "createdAt": "string",
    "forModule": "string",
    "idKantor": "string",
    "idWorkflow": "string",
    "isDefault": "boolean",
    "keterangan": "string",
    "namaWorkflow": "string",
    "statusWorkflow": "string",
    "targetDb": "string",
    "targetTable": "string",
    "updatedAt": "string"
};

const ToolsWorkflowStepDtoFields = {
    "allowRoles": "string",
    "allowUserIds": "string",
    "createdAt": "string",
    "customCheckSql": "string",
    "idWorkflow": "string",
    "idWorkflowStep": "string",
    "messageBefore": "string",
    "ruleJson": "string",
    "statusFrom": "string",
    "statusRejectTo": "string",
    "statusTo": "string",
    "triggerJson": "string",
    "updatedAt": "string",
    "urutan": "number"
};

const ToolsWorkflowStepReportDtoFields = {
    "allowRoles": "string",
    "allowUserIds": "string",
    "createdAt": "string",
    "customCheckSql": "string",
    "idWorkflow": "string",
    "idWorkflowStep": "string",
    "messageBefore": "string",
    "ruleJson": "string",
    "statusFrom": "string",
    "statusRejectTo": "string",
    "statusTo": "string",
    "triggerJson": "string",
    "updatedAt": "string",
    "urutan": "number",
    "workflow": "string"
};

const ToolsWorkflowStepWidgetDtoFields = {
    "allowRoles": "string",
    "allowUserIds": "string",
    "createdAt": "string",
    "customCheckSql": "string",
    "idWorkflow": "string",
    "idWorkflowStep": "string",
    "messageBefore": "string",
    "ruleJson": "string",
    "statusFrom": "string",
    "statusRejectTo": "string",
    "statusTo": "string",
    "total": "number",
    "triggerJson": "string",
    "updatedAt": "string",
    "urutan": "number"
};

const ToolsWorkflowWidgetDtoFields = {
    "createdAt": "string",
    "forModule": "string",
    "idKantor": "string",
    "idWorkflow": "string",
    "isDefault": "boolean",
    "keterangan": "string",
    "namaWorkflow": "string",
    "statusWorkflow": "string",
    "targetDb": "string",
    "targetTable": "string",
    "total": "number",
    "updatedAt": "string"
};

const UserTokensDtoFields = {
    "createdAt": "string",
    "id": "string",
    "idUser": "string",
    "ipAddress": "string",
    "refreshToken": "string",
    "userAgent": "string"
};

const UsersDtoFields = {
    "createdAt": "string",
    "email": "string",
    "idUserGroup": "string",
    "idUsers": "string",
    "lastLogin": "string",
    "nama": "string",
    "password": "string",
    "status": "string",
    "wajibResetPassword": "boolean"
};

const WorkflowApplyDtoFields = {
    "catatan": "string",
    "from_module": "string",
    "from_module_id": "string",
    "status": "string",
    "user_id": "string"
};

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

/**
 * Generated bundle index. Do not edit.
 */

export { AclModuleDtoFields, AclModuleFormSchema, AclUserGroupDtoFields, AclUserGroupFormSchema, AclUserTokensDtoFields, AclUserTokensFormSchema, AclUsersDtoFields, AclUsersFormSchema, AclUsersReportDtoFields, AclUsersReportFormSchema, AclUsersWidgetDtoFields, AclUsersWidgetFormSchema, AmimsActypeDtoFields, AmimsActypeFormSchema, AmimsActypeReportDtoFields, AmimsActypeReportFormSchema, AmimsActypeWidgetDtoFields, AmimsActypeWidgetFormSchema, AmimsAircraftDetailDtoFields, AmimsAircraftDetailFormSchema, AmimsAircraftDetailReportDtoFields, AmimsAircraftDetailReportFormSchema, AmimsAircraftDetailWidgetDtoFields, AmimsAircraftDetailWidgetFormSchema, AmimsAircraftDtoFields, AmimsAircraftFormSchema, AmimsAircraftReportDtoFields, AmimsAircraftReportFormSchema, AmimsAircraftWidgetDtoFields, AmimsAircraftWidgetFormSchema, AmimsAtaDtoFields, AmimsAtaFormSchema, AmimsBinDtoFields, AmimsBinFormSchema, AmimsBinReportDtoFields, AmimsBinReportFormSchema, AmimsBinWidgetDtoFields, AmimsBinWidgetFormSchema, AmimsCompanyDtoFields, AmimsCompanyFormSchema, AmimsConditionMonitoringDtoFields, AmimsConditionMonitoringFormSchema, AmimsConditionMonitoringReportDtoFields, AmimsConditionMonitoringReportFormSchema, AmimsConditionMonitoringWidgetDtoFields, AmimsConditionMonitoringWidgetFormSchema, AmimsCurrencyDtoFields, AmimsCurrencyFormSchema, AmimsCurrencyReportDtoFields, AmimsCurrencyReportFormSchema, AmimsCurrencyWidgetDtoFields, AmimsCurrencyWidgetFormSchema, AmimsDoctypeDtoFields, AmimsDoctypeFormSchema, AmimsDueListDtoFields, AmimsDueListFormSchema, AmimsDueListOutputDtoFields, AmimsDueListOutputFormSchema, AmimsDueListOutputReportDtoFields, AmimsDueListOutputReportFormSchema, AmimsDueListOutputWidgetDtoFields, AmimsDueListOutputWidgetFormSchema, AmimsDueListReportDtoFields, AmimsDueListReportFormSchema, AmimsDueListWidgetDtoFields, AmimsDueListWidgetFormSchema, AmimsEngineerPmtrDtoFields, AmimsEngineerPmtrFormSchema, AmimsEngineerPmtrItemDtoFields, AmimsEngineerPmtrItemFormSchema, AmimsEngineerPmtrItemReportDtoFields, AmimsEngineerPmtrItemReportFormSchema, AmimsEngineerPmtrItemWidgetDtoFields, AmimsEngineerPmtrItemWidgetFormSchema, AmimsEngineerPmtrReportDtoFields, AmimsEngineerPmtrReportFormSchema, AmimsEngineerPmtrWidgetDtoFields, AmimsEngineerPmtrWidgetFormSchema, AmimsEngineerPrisDtoFields, AmimsEngineerPrisFormSchema, AmimsEngineerPrisItemDtoFields, AmimsEngineerPrisItemFormSchema, AmimsEngineerPrisItemReportDtoFields, AmimsEngineerPrisItemReportFormSchema, AmimsEngineerPrisItemWidgetDtoFields, AmimsEngineerPrisItemWidgetFormSchema, AmimsEngineerPrisReportDtoFields, AmimsEngineerPrisReportFormSchema, AmimsEngineerPrisReturnDtoFields, AmimsEngineerPrisReturnFormSchema, AmimsEngineerPrisReturnItemDtoFields, AmimsEngineerPrisReturnItemFormSchema, AmimsEngineerPrisReturnItemReportDtoFields, AmimsEngineerPrisReturnItemReportFormSchema, AmimsEngineerPrisReturnItemWidgetDtoFields, AmimsEngineerPrisReturnItemWidgetFormSchema, AmimsEngineerPrisReturnReportDtoFields, AmimsEngineerPrisReturnReportFormSchema, AmimsEngineerPrisReturnWidgetDtoFields, AmimsEngineerPrisReturnWidgetFormSchema, AmimsEngineerPrisWidgetDtoFields, AmimsEngineerPrisWidgetFormSchema, AmimsEngineerRtiDtoFields, AmimsEngineerRtiFormSchema, AmimsEngineerRtiIdentifyDtoFields, AmimsEngineerRtiIdentifyFormSchema, AmimsEngineerRtiIdentifyReportDtoFields, AmimsEngineerRtiIdentifyReportFormSchema, AmimsEngineerRtiIdentifyWidgetDtoFields, AmimsEngineerRtiIdentifyWidgetFormSchema, AmimsEngineerRtiPartDtoFields, AmimsEngineerRtiPartFormSchema, AmimsEngineerRtiPartReportDtoFields, AmimsEngineerRtiPartReportFormSchema, AmimsEngineerRtiPartWidgetDtoFields, AmimsEngineerRtiPartWidgetFormSchema, AmimsEngineerRtiReportDtoFields, AmimsEngineerRtiReportFormSchema, AmimsEngineerRtiWidgetDtoFields, AmimsEngineerRtiWidgetFormSchema, AmimsFigureIndexDtoFields, AmimsFigureIndexFormSchema, AmimsInspectionDtoFields, AmimsInspectionFormSchema, AmimsInspectionReportDtoFields, AmimsInspectionReportFormSchema, AmimsInspectionWidgetDtoFields, AmimsInspectionWidgetFormSchema, AmimsInternalGrnDtoFields, AmimsInternalGrnFormSchema, AmimsInternalGrnItemDtoFields, AmimsInternalGrnItemFormSchema, AmimsInternalGrnItemReportDtoFields, AmimsInternalGrnItemReportFormSchema, AmimsInternalGrnItemWidgetDtoFields, AmimsInternalGrnItemWidgetFormSchema, AmimsInternalGrnReportDtoFields, AmimsInternalGrnReportFormSchema, AmimsInternalGrnWidgetDtoFields, AmimsInternalGrnWidgetFormSchema, AmimsLastMaintenanceDtoFields, AmimsLastMaintenanceFormSchema, AmimsLastMaintenanceReportDtoFields, AmimsLastMaintenanceReportFormSchema, AmimsLastMaintenanceWidgetDtoFields, AmimsLastMaintenanceWidgetFormSchema, AmimsLibFormIssuedDtoFields, AmimsLibFormIssuedFormSchema, AmimsLibReferenceDtoFields, AmimsLibReferenceFormSchema, AmimsLibUploadDtoFields, AmimsLibUploadFormSchema, AmimsLifeTimeLimitDtoFields, AmimsLifeTimeLimitFormSchema, AmimsLifeTimeLimitReportDtoFields, AmimsLifeTimeLimitReportFormSchema, AmimsLifeTimeLimitWidgetDtoFields, AmimsLifeTimeLimitWidgetFormSchema, AmimsLocationFlightDtoFields, AmimsLocationFlightFormSchema, AmimsLocationFlightReportDtoFields, AmimsLocationFlightReportFormSchema, AmimsLocationFlightWidgetDtoFields, AmimsLocationFlightWidgetFormSchema, AmimsLogProcessDtoFields, AmimsLogProcessFormSchema, AmimsLogProcessReportDtoFields, AmimsLogProcessReportFormSchema, AmimsLogProcessWidgetDtoFields, AmimsLogProcessWidgetFormSchema, AmimsLogSpDtoFields, AmimsLogSpFormSchema, AmimsLogSpReportDtoFields, AmimsLogSpReportFormSchema, AmimsLogSpWidgetDtoFields, AmimsLogSpWidgetFormSchema, AmimsLogTransferDtoFields, AmimsLogTransferFormSchema, AmimsLogTransferReportDtoFields, AmimsLogTransferReportFormSchema, AmimsLogTransferWidgetDtoFields, AmimsLogTransferWidgetFormSchema, AmimsLogTsnTsoDtoFields, AmimsLogTsnTsoFormSchema, AmimsLogTsnTsoReportDtoFields, AmimsLogTsnTsoReportFormSchema, AmimsLogTsnTsoWidgetDtoFields, AmimsLogTsnTsoWidgetFormSchema, AmimsLogUserDtoFields, AmimsLogUserFormSchema, AmimsMaintenanceCodeDtoFields, AmimsMaintenanceCodeFormIssuedDtoFields, AmimsMaintenanceCodeFormIssuedFormSchema, AmimsMaintenanceCodeFormSchema, AmimsMaintenanceCodeReferenceDtoFields, AmimsMaintenanceCodeReferenceFormSchema, AmimsMaintenanceDtoFields, AmimsMaintenanceFormSchema, AmimsMaintenanceReportDtoFields, AmimsMaintenanceReportFormSchema, AmimsMaintenanceWidgetDtoFields, AmimsMaintenanceWidgetFormSchema, AmimsMcurrencyDtoFields, AmimsMcurrencyFormSchema, AmimsMelDtoFields, AmimsMelFormSchema, AmimsMpartDtoFields, AmimsMpartFormSchema, AmimsMpartReportDtoFields, AmimsMpartReportFormSchema, AmimsMpartWidgetDtoFields, AmimsMpartWidgetFormSchema, AmimsMpcGseDtoFields, AmimsMpcGseFormSchema, AmimsMpcGseReportDtoFields, AmimsMpcGseReportFormSchema, AmimsMpcGseWidgetDtoFields, AmimsMpcGseWidgetFormSchema, AmimsMpcJoDtoFields, AmimsMpcJoFormSchema, AmimsMpcJoOperatorDtoFields, AmimsMpcJoOperatorFormSchema, AmimsMpcJoOperatorReportDtoFields, AmimsMpcJoOperatorReportFormSchema, AmimsMpcJoOperatorWidgetDtoFields, AmimsMpcJoOperatorWidgetFormSchema, AmimsMpcJoReportDtoFields, AmimsMpcJoReportFormSchema, AmimsMpcJoWidgetDtoFields, AmimsMpcJoWidgetFormSchema, AmimsMpcPiroDtoFields, AmimsMpcPiroFormSchema, AmimsMpcPiroItemDtoFields, AmimsMpcPiroItemFormSchema, AmimsMpcPiroItemReportDtoFields, AmimsMpcPiroItemReportFormSchema, AmimsMpcPiroItemWidgetDtoFields, AmimsMpcPiroItemWidgetFormSchema, AmimsMpcPiroReportDtoFields, AmimsMpcPiroReportFormSchema, AmimsMpcPiroWidgetDtoFields, AmimsMpcPiroWidgetFormSchema, AmimsMpcSelfMaintenanceDtoFields, AmimsMpcSelfMaintenanceFormSchema, AmimsMpcSelfMaintenanceReportDtoFields, AmimsMpcSelfMaintenanceReportFormSchema, AmimsMpcSelfMaintenanceWidgetDtoFields, AmimsMpcSelfMaintenanceWidgetFormSchema, AmimsMpcWpDtoFields, AmimsMpcWpFormSchema, AmimsMpcWpReportDtoFields, AmimsMpcWpReportFormSchema, AmimsMpcWpWidgetDtoFields, AmimsMpcWpWidgetFormSchema, AmimsPartActypeDtoFields, AmimsPartActypeFormSchema, AmimsPartActypeReportDtoFields, AmimsPartActypeReportFormSchema, AmimsPartActypeWidgetDtoFields, AmimsPartActypeWidgetFormSchema, AmimsPartAlternativeDtoFields, AmimsPartAlternativeFormSchema, AmimsPartAlternativeReportDtoFields, AmimsPartAlternativeReportFormSchema, AmimsPartAlternativeWidgetDtoFields, AmimsPartAlternativeWidgetFormSchema, AmimsPartAtaDtoFields, AmimsPartAtaFormSchema, AmimsPartAtaReportDtoFields, AmimsPartAtaReportFormSchema, AmimsPartAtaWidgetDtoFields, AmimsPartAtaWidgetFormSchema, AmimsPartCategoryDtoFields, AmimsPartCategoryFormSchema, AmimsPartCategoryReportDtoFields, AmimsPartCategoryReportFormSchema, AmimsPartCategoryWidgetDtoFields, AmimsPartCategoryWidgetFormSchema, AmimsPartConditionDtoFields, AmimsPartConditionFormSchema, AmimsPartConditionReportDtoFields, AmimsPartConditionReportFormSchema, AmimsPartConditionWidgetDtoFields, AmimsPartConditionWidgetFormSchema, AmimsPartDtoFields, AmimsPartFigureIndexDtoFields, AmimsPartFigureIndexFormSchema, AmimsPartFigureIndexReportDtoFields, AmimsPartFigureIndexReportFormSchema, AmimsPartFigureIndexWidgetDtoFields, AmimsPartFigureIndexWidgetFormSchema, AmimsPartFormSchema, AmimsPartInstallDtoFields, AmimsPartInstallFormSchema, AmimsPartInstallOldDtoFields, AmimsPartInstallOldFormSchema, AmimsPartInstallOldReportDtoFields, AmimsPartInstallOldReportFormSchema, AmimsPartInstallOldWidgetDtoFields, AmimsPartInstallOldWidgetFormSchema, AmimsPartInstallReportDtoFields, AmimsPartInstallReportFormSchema, AmimsPartInstallWidgetDtoFields, AmimsPartInstallWidgetFormSchema, AmimsPartLogDtoFields, AmimsPartLogFormSchema, AmimsPartLogReportDtoFields, AmimsPartLogReportFormSchema, AmimsPartLogWidgetDtoFields, AmimsPartLogWidgetFormSchema, AmimsPartReportDtoFields, AmimsPartReportFormSchema, AmimsPartWidgetDtoFields, AmimsPartWidgetFormSchema, AmimsPartidDtoFields, AmimsPartidFormSchema, AmimsPartidReportDtoFields, AmimsPartidReportFormSchema, AmimsPartidWidgetDtoFields, AmimsPartidWidgetFormSchema, AmimsPilotDtoFields, AmimsPilotFormSchema, AmimsPilotReportDtoFields, AmimsPilotReportFormSchema, AmimsPilotWidgetDtoFields, AmimsPilotWidgetFormSchema, AmimsPositionDtoFields, AmimsPositionFormSchema, AmimsPositionReportDtoFields, AmimsPositionReportFormSchema, AmimsPositionWidgetDtoFields, AmimsPositionWidgetFormSchema, AmimsPurGrnDtoFields, AmimsPurGrnFormSchema, AmimsPurGrnItemDtoFields, AmimsPurGrnItemFormSchema, AmimsPurGrnItemReportDtoFields, AmimsPurGrnItemReportFormSchema, AmimsPurGrnItemWidgetDtoFields, AmimsPurGrnItemWidgetFormSchema, AmimsPurGrnReportDtoFields, AmimsPurGrnReportFormSchema, AmimsPurGrnWidgetDtoFields, AmimsPurGrnWidgetFormSchema, AmimsPurPoDtoFields, AmimsPurPoFormSchema, AmimsPurPoItemDtoFields, AmimsPurPoItemFormSchema, AmimsPurPoItemReportDtoFields, AmimsPurPoItemReportFormSchema, AmimsPurPoItemWidgetDtoFields, AmimsPurPoItemWidgetFormSchema, AmimsPurPoReportDtoFields, AmimsPurPoReportFormSchema, AmimsPurPoWidgetDtoFields, AmimsPurPoWidgetFormSchema, AmimsPurPrDtoFields, AmimsPurPrFormSchema, AmimsPurPrItemDtoFields, AmimsPurPrItemFormSchema, AmimsPurPrItemReportDtoFields, AmimsPurPrItemReportFormSchema, AmimsPurPrItemWidgetDtoFields, AmimsPurPrItemWidgetFormSchema, AmimsPurPrReportDtoFields, AmimsPurPrReportFormSchema, AmimsPurPrWidgetDtoFields, AmimsPurPrWidgetFormSchema, AmimsPurPrclDtoFields, AmimsPurPrclFormSchema, AmimsPurPrclReportDtoFields, AmimsPurPrclReportFormSchema, AmimsPurPrclWidgetDtoFields, AmimsPurPrclWidgetFormSchema, AmimsPurReturnDtoFields, AmimsPurReturnFormSchema, AmimsPurReturnItemDtoFields, AmimsPurReturnItemFormSchema, AmimsPurReturnItemReportDtoFields, AmimsPurReturnItemReportFormSchema, AmimsPurReturnItemWidgetDtoFields, AmimsPurReturnItemWidgetFormSchema, AmimsPurReturnReportDtoFields, AmimsPurReturnReportFormSchema, AmimsPurReturnWidgetDtoFields, AmimsPurReturnWidgetFormSchema, AmimsPurVendorContactDtoFields, AmimsPurVendorContactFormSchema, AmimsPurVendorContactReportDtoFields, AmimsPurVendorContactReportFormSchema, AmimsPurVendorContactWidgetDtoFields, AmimsPurVendorContactWidgetFormSchema, AmimsPurVendorDtoFields, AmimsPurVendorFormSchema, AmimsPurVendorItemDtoFields, AmimsPurVendorItemFormSchema, AmimsPurVendorItemReportDtoFields, AmimsPurVendorItemReportFormSchema, AmimsPurVendorItemWidgetDtoFields, AmimsPurVendorItemWidgetFormSchema, AmimsPurVendorReportDtoFields, AmimsPurVendorReportFormSchema, AmimsPurVendorWidgetDtoFields, AmimsPurVendorWidgetFormSchema, AmimsQaRpdDispotitionDtoFields, AmimsQaRpdDispotitionFormSchema, AmimsQaRpdDispotitionReportDtoFields, AmimsQaRpdDispotitionReportFormSchema, AmimsQaRpdDispotitionWidgetDtoFields, AmimsQaRpdDispotitionWidgetFormSchema, AmimsQaRpdDtoFields, AmimsQaRpdFormSchema, AmimsQaRpdReportDtoFields, AmimsQaRpdReportFormSchema, AmimsQaRpdWidgetDtoFields, AmimsQaRpdWidgetFormSchema, AmimsQaTransferDtoFields, AmimsQaTransferFormSchema, AmimsQaTransferItemDtoFields, AmimsQaTransferItemFormSchema, AmimsQaTransferItemReportDtoFields, AmimsQaTransferItemReportFormSchema, AmimsQaTransferItemWidgetDtoFields, AmimsQaTransferItemWidgetFormSchema, AmimsQaTransferReportDtoFields, AmimsQaTransferReportFormSchema, AmimsQaTransferWidgetDtoFields, AmimsQaTransferWidgetFormSchema, AmimsRotaryFactorDtoFields, AmimsRotaryFactorFormSchema, AmimsRotaryFactorReportDtoFields, AmimsRotaryFactorReportFormSchema, AmimsRotaryFactorWidgetDtoFields, AmimsRotaryFactorWidgetFormSchema, AmimsShippingDtoFields, AmimsShippingFormSchema, AmimsShippingReportDtoFields, AmimsShippingReportFormSchema, AmimsShippingWidgetDtoFields, AmimsShippingWidgetFormSchema, AmimsSiteDtoFields, AmimsSiteFormSchema, AmimsSiteReportDtoFields, AmimsSiteReportFormSchema, AmimsSiteWidgetDtoFields, AmimsSiteWidgetFormSchema, AmimsStoreDestroyDtoFields, AmimsStoreDestroyFormSchema, AmimsStoreDestroyReportDtoFields, AmimsStoreDestroyReportFormSchema, AmimsStoreDestroyWidgetDtoFields, AmimsStoreDestroyWidgetFormSchema, AmimsStoreTransferDtoFields, AmimsStoreTransferFormSchema, AmimsStoreTransferItemDtoFields, AmimsStoreTransferItemFormSchema, AmimsStoreTransferItemReportDtoFields, AmimsStoreTransferItemReportFormSchema, AmimsStoreTransferItemWidgetDtoFields, AmimsStoreTransferItemWidgetFormSchema, AmimsStoreTransferReportDtoFields, AmimsStoreTransferReportFormSchema, AmimsStoreTransferWidgetDtoFields, AmimsStoreTransferWidgetFormSchema, AmimsTdDetailAcDtoFields, AmimsTdDetailAcFormSchema, AmimsTdDetailAcReportDtoFields, AmimsTdDetailAcReportFormSchema, AmimsTdDetailAcWidgetDtoFields, AmimsTdDetailAcWidgetFormSchema, AmimsTdDetailDtoFields, AmimsTdDetailFormSchema, AmimsTdDetailReportDtoFields, AmimsTdDetailReportFormSchema, AmimsTdDetailWidgetDtoFields, AmimsTdDetailWidgetFormSchema, AmimsTdDtoFields, AmimsTdFormSchema, AmimsTdRefDtoFields, AmimsTdRefFormSchema, AmimsTdRefReportDtoFields, AmimsTdRefReportFormSchema, AmimsTdRefWidgetDtoFields, AmimsTdRefWidgetFormSchema, AmimsTdReportDtoFields, AmimsTdReportFormSchema, AmimsTdTypeDtoFields, AmimsTdTypeFormSchema, AmimsTdTypeReportDtoFields, AmimsTdTypeReportFormSchema, AmimsTdTypeWidgetDtoFields, AmimsTdTypeWidgetFormSchema, AmimsTdWidgetDtoFields, AmimsTdWidgetFormSchema, AmimsTechDefectDtoFields, AmimsTechDefectFormSchema, AmimsTechDefectReportDtoFields, AmimsTechDefectReportFormSchema, AmimsTechDefectWidgetDtoFields, AmimsTechDefectWidgetFormSchema, AmimsTechDiscrepanciesDtoFields, AmimsTechDiscrepanciesFormSchema, AmimsTechDiscrepanciesReportDtoFields, AmimsTechDiscrepanciesReportFormSchema, AmimsTechDiscrepanciesWidgetDtoFields, AmimsTechDiscrepanciesWidgetFormSchema, AmimsTechLogDtoFields, AmimsTechLogEngineCheckDtoFields, AmimsTechLogEngineCheckFormSchema, AmimsTechLogEngineCheckReportDtoFields, AmimsTechLogEngineCheckReportFormSchema, AmimsTechLogEngineCheckWidgetDtoFields, AmimsTechLogEngineCheckWidgetFormSchema, AmimsTechLogEngineDtoFields, AmimsTechLogEngineFormSchema, AmimsTechLogEngineReportDtoFields, AmimsTechLogEngineReportFormSchema, AmimsTechLogEngineWidgetDtoFields, AmimsTechLogEngineWidgetFormSchema, AmimsTechLogFormSchema, AmimsTechLogItemDtoFields, AmimsTechLogItemFormSchema, AmimsTechLogItemReportDtoFields, AmimsTechLogItemReportFormSchema, AmimsTechLogItemWidgetDtoFields, AmimsTechLogItemWidgetFormSchema, AmimsTechLogJoDtoFields, AmimsTechLogJoFormSchema, AmimsTechLogJoReportDtoFields, AmimsTechLogJoReportFormSchema, AmimsTechLogJoWidgetDtoFields, AmimsTechLogJoWidgetFormSchema, AmimsTechLogReportDtoFields, AmimsTechLogReportFormSchema, AmimsTechLogWidgetDtoFields, AmimsTechLogWidgetFormSchema, AmimsTypeOfworkDtoFields, AmimsTypeOfworkFormSchema, AmimsTypeOfworkReportDtoFields, AmimsTypeOfworkReportFormSchema, AmimsTypeOfworkWidgetDtoFields, AmimsTypeOfworkWidgetFormSchema, AmimsWarrantyDtoFields, AmimsWarrantyFormSchema, ApiModule, AppService, AuthProtectService, AuthPublicService, AuthResponseDtoFields, AuthResponseFormSchema, BaseWidgetQueryDtoFields, BaseWidgetQueryFormSchema, ClientContactReportService, ClientContactService, ClientContactWidgetService, ClientReportService, ClientService, ClientSiteReportService, ClientSiteService, ClientSiteWidgetService, ClientWidgetService, CompanyConfigReportService, CompanyConfigService, CompanyConfigWidgetService, ContactClientUseReportService, ContactClientUseService, ContactClientUseWidgetService, ContractJenisReportService, ContractJenisService, ContractJenisWidgetService, ContractReportService, ContractService, ContractSiteReportService, ContractSiteService, ContractSiteServiceReportService, ContractSiteServiceService, ContractSiteServiceWidgetService, ContractSiteWidgetService, ContractWidgetService, CurrentUserResponseDtoFields, CurrentUserResponseFormSchema, CustomFieldGroupReportService, CustomFieldGroupService, CustomFieldGroupWidgetService, CustomFieldService, CustomFieldValueReportService, CustomFieldValueService, CustomFieldValueWidgetService, DocumentDocumentDtoFields, DocumentDocumentFormSchema, DocumentDtoFields, DocumentFormSchema, DocumentNumberingCounterService, DocumentNumberingService, DocumentService, FakturReportService, FakturService, FakturWidgetService, InvoiceReportService, InvoiceService, InvoiceWidgetService, KantorReportService, KantorService, KantorWidgetService, LoginDtoFields, LoginFormSchema, ModuleService, PelangganClientContactDtoFields, PelangganClientContactFormSchema, PelangganClientContactReportDtoFields, PelangganClientContactReportFormSchema, PelangganClientContactWidgetDtoFields, PelangganClientContactWidgetFormSchema, PelangganClientDtoFields, PelangganClientFormSchema, PelangganClientReportDtoFields, PelangganClientReportFormSchema, PelangganClientSiteDtoFields, PelangganClientSiteFormSchema, PelangganClientSiteReportDtoFields, PelangganClientSiteReportFormSchema, PelangganClientSiteWidgetDtoFields, PelangganClientSiteWidgetFormSchema, PelangganClientWidgetDtoFields, PelangganClientWidgetFormSchema, PelangganCompanyConfigDtoFields, PelangganCompanyConfigFormSchema, PelangganCompanyConfigReportDtoFields, PelangganCompanyConfigReportFormSchema, PelangganCompanyConfigWidgetDtoFields, PelangganCompanyConfigWidgetFormSchema, PelangganContactClientUseDtoFields, PelangganContactClientUseFormSchema, PelangganContactClientUseReportDtoFields, PelangganContactClientUseReportFormSchema, PelangganContactClientUseWidgetDtoFields, PelangganContactClientUseWidgetFormSchema, PelangganContractDtoFields, PelangganContractFormSchema, PelangganContractJenisDtoFields, PelangganContractJenisFormSchema, PelangganContractJenisReportDtoFields, PelangganContractJenisReportFormSchema, PelangganContractJenisWidgetDtoFields, PelangganContractJenisWidgetFormSchema, PelangganContractReportDtoFields, PelangganContractReportFormSchema, PelangganContractSiteDtoFields, PelangganContractSiteFormSchema, PelangganContractSiteReportDtoFields, PelangganContractSiteReportFormSchema, PelangganContractSiteServiceDtoFields, PelangganContractSiteServiceFormSchema, PelangganContractSiteServiceReportDtoFields, PelangganContractSiteServiceReportFormSchema, PelangganContractSiteServiceWidgetDtoFields, PelangganContractSiteServiceWidgetFormSchema, PelangganContractSiteWidgetDtoFields, PelangganContractSiteWidgetFormSchema, PelangganContractWidgetDtoFields, PelangganContractWidgetFormSchema, PelangganFakturDtoFields, PelangganFakturFormSchema, PelangganFakturReportDtoFields, PelangganFakturReportFormSchema, PelangganFakturWidgetDtoFields, PelangganFakturWidgetFormSchema, PelangganInvoiceDtoFields, PelangganInvoiceFormSchema, PelangganInvoiceReportDtoFields, PelangganInvoiceReportFormSchema, PelangganInvoiceWidgetDtoFields, PelangganInvoiceWidgetFormSchema, PelangganKantorDtoFields, PelangganKantorFormSchema, PelangganKantorReportDtoFields, PelangganKantorReportFormSchema, PelangganKantorWidgetDtoFields, PelangganKantorWidgetFormSchema, PelangganServiceDtoFields, PelangganServiceFormSchema, PelangganServiceReportDtoFields, PelangganServiceReportFormSchema, PelangganServiceWidgetDtoFields, PelangganServiceWidgetFormSchema, PelangganTeknisiDtoFields, PelangganTeknisiFormSchema, PelangganTeknisiReportDtoFields, PelangganTeknisiReportFormSchema, PelangganTeknisiWidgetDtoFields, PelangganTeknisiWidgetFormSchema, PelangganWorkScheduleDtoFields, PelangganWorkScheduleFormSchema, PelangganWorkScheduleReportDtoFields, PelangganWorkScheduleReportFormSchema, PelangganWorkScheduleTeknisiDtoFields, PelangganWorkScheduleTeknisiFormSchema, PelangganWorkScheduleTeknisiReportDtoFields, PelangganWorkScheduleTeknisiReportFormSchema, PelangganWorkScheduleTeknisiWidgetDtoFields, PelangganWorkScheduleTeknisiWidgetFormSchema, PelangganWorkScheduleWidgetDtoFields, PelangganWorkScheduleWidgetFormSchema, RefreshTokenDtoFields, RefreshTokenFormSchema, ResetPasswordDtoFields, ResetPasswordFormSchema, SelectFieldDtoFields, SelectFieldFormSchema, ServiceReportService, ServiceService, ServiceWidgetService, SimpleMessageDtoFields, SimpleMessageFormSchema, TeknisiReportService, TeknisiService, TeknisiWidgetService, TokenOnlyResponseDtoFields, TokenOnlyResponseFormSchema, ToolsCustomFieldDtoFields, ToolsCustomFieldFormSchema, ToolsCustomFieldGroupDtoFields, ToolsCustomFieldGroupFormSchema, ToolsCustomFieldGroupReportDtoFields, ToolsCustomFieldGroupReportFormSchema, ToolsCustomFieldGroupWidgetDtoFields, ToolsCustomFieldGroupWidgetFormSchema, ToolsCustomFieldValueDtoFields, ToolsCustomFieldValueFormSchema, ToolsCustomFieldValueReportDtoFields, ToolsCustomFieldValueReportFormSchema, ToolsCustomFieldValueWidgetDtoFields, ToolsCustomFieldValueWidgetFormSchema, ToolsDocumentNumberingCounterDtoFields, ToolsDocumentNumberingCounterFormSchema, ToolsDocumentNumberingDtoFields, ToolsDocumentNumberingFormSchema, ToolsWorkflowAggregatorDtoFields, ToolsWorkflowAggregatorFormSchema, ToolsWorkflowDtoFields, ToolsWorkflowFormSchema, ToolsWorkflowLogDtoFields, ToolsWorkflowLogFormSchema, ToolsWorkflowLogReportDtoFields, ToolsWorkflowLogReportFormSchema, ToolsWorkflowLogWidgetDtoFields, ToolsWorkflowLogWidgetFormSchema, ToolsWorkflowReportDtoFields, ToolsWorkflowReportFormSchema, ToolsWorkflowStepDtoFields, ToolsWorkflowStepFormSchema, ToolsWorkflowStepReportDtoFields, ToolsWorkflowStepReportFormSchema, ToolsWorkflowStepWidgetDtoFields, ToolsWorkflowStepWidgetFormSchema, ToolsWorkflowWidgetDtoFields, ToolsWorkflowWidgetFormSchema, UserGroupService, UserTokensDtoFields, UserTokensFormSchema, UserTokensService, UsersDtoFields, UsersFormSchema, UsersReportService, UsersService, UsersWidgetService, WorkScheduleReportService, WorkScheduleService, WorkScheduleTeknisiReportService, WorkScheduleTeknisiService, WorkScheduleTeknisiWidgetService, WorkScheduleWidgetService, WorkflowAggregatorService, WorkflowApplyDtoFields, WorkflowApplyFormSchema, WorkflowApplyService, WorkflowLogReportService, WorkflowLogService, WorkflowLogWidgetService, WorkflowReportService, WorkflowService, WorkflowStepReportService, WorkflowStepService, WorkflowStepWidgetService, WorkflowWidgetService };
//# sourceMappingURL=de-sdk-core.mjs.map

import * as i0 from '@angular/core';
import { Injectable, NgModule, Optional, SkipSelf } from '@angular/core';
import * as i2 from '@angular/common/http';
import { HttpParams, HttpHeaders, HttpRequest, HttpResponse } from '@angular/common/http';
import { filter, map } from 'rxjs/operators';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
/**
 * Global configuration
 */
class ApiConfiguration {
    constructor() {
        this.rootUrl = '';
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: ApiConfiguration, deps: [], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: ApiConfiguration, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: ApiConfiguration, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root',
                }]
        }] });

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
/**
 * Base class for services
 */
class BaseService {
    constructor(config, http) {
        this.config = config;
        this.http = http;
    }
    /**
     * Returns the root url for all operations in this service. If not set directly in this
     * service, will fallback to `ApiConfiguration.rootUrl`.
     */
    get rootUrl() {
        return this._rootUrl || this.config.rootUrl;
    }
    /**
     * Sets the root URL for API operations in this service.
     */
    set rootUrl(rootUrl) {
        this._rootUrl = rootUrl;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: BaseService, deps: [{ token: ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: BaseService }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: BaseService, decorators: [{
            type: Injectable
        }], ctorParameters: () => [{ type: ApiConfiguration }, { type: i2.HttpClient }] });

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
/**
 * Custom parameter codec to correctly handle the plus sign in parameter
 * values. See https://github.com/angular/angular/issues/18261
 */
class ParameterCodec {
    encodeKey(key) {
        return encodeURIComponent(key);
    }
    encodeValue(value) {
        return encodeURIComponent(value);
    }
    decodeKey(key) {
        return decodeURIComponent(key);
    }
    decodeValue(value) {
        return decodeURIComponent(value);
    }
}
const ParameterCodecInstance = new ParameterCodec();
/**
 * Base class for a parameter
 */
class Parameter {
    constructor(name, value, options, defaultStyle, defaultExplode) {
        this.name = name;
        this.value = value;
        this.options = options;
        this.options = options || {};
        if (this.options.style === null || this.options.style === undefined) {
            this.options.style = defaultStyle;
        }
        if (this.options.explode === null || this.options.explode === undefined) {
            this.options.explode = defaultExplode;
        }
    }
    serializeValue(value, separator = ',') {
        if (value === null || value === undefined) {
            return '';
        }
        else if (value instanceof Array) {
            return value.map(v => this.serializeValue(v).split(separator).join(encodeURIComponent(separator))).join(separator);
        }
        else if (typeof value === 'object') {
            const array = [];
            for (const key of Object.keys(value)) {
                let propVal = value[key];
                if (propVal !== null && propVal !== undefined) {
                    propVal = this.serializeValue(propVal).split(separator).join(encodeURIComponent(separator));
                    if (this.options.explode) {
                        array.push(`${key}=${propVal}`);
                    }
                    else {
                        array.push(key);
                        array.push(propVal);
                    }
                }
            }
            return array.join(separator);
        }
        else {
            return String(value);
        }
    }
}
/**
 * A parameter in the operation path
 */
class PathParameter extends Parameter {
    constructor(name, value, options) {
        super(name, value, options, 'simple', false);
    }
    append(path) {
        let value = this.value;
        if (value === null || value === undefined) {
            value = '';
        }
        let prefix = this.options.style === 'label' ? '.' : '';
        let separator = this.options.explode ? prefix === '' ? ',' : prefix : ',';
        let alreadySerialized = false;
        if (this.options.style === 'matrix') {
            // The parameter name is just used as prefix, except in some cases...
            prefix = `;${this.name}=`;
            if (this.options.explode && typeof value === 'object') {
                prefix = ';';
                if (value instanceof Array) {
                    // For arrays we have to repeat the name for each element
                    value = value.map(v => `${this.name}=${this.serializeValue(v, ';')}`);
                    value = value.join(';');
                    alreadySerialized = true;
                }
                else {
                    // For objects we have to put each the key / value pairs
                    value = this.serializeValue(value, ';');
                    alreadySerialized = true;
                }
            }
        }
        value = prefix + (alreadySerialized ? value : this.serializeValue(value, separator));
        // Replace both the plain variable and the corresponding variant taking in the prefix and explode into account
        path = path.replace(`{${this.name}}`, value);
        path = path.replace(`{${prefix}${this.name}${this.options.explode ? '*' : ''}}`, value);
        return path;
    }
    // @ts-ignore
    serializeValue(value, separator = ',') {
        var result = typeof value === 'string' ? encodeURIComponent(value) : super.serializeValue(value, separator);
        result = result.replace(/%3D/g, '=');
        result = result.replace(/%3B/g, ';');
        result = result.replace(/%2C/g, ',');
        return result;
    }
}
/**
 * A parameter in the query
 */
class QueryParameter extends Parameter {
    constructor(name, value, options) {
        super(name, value, options, 'form', true);
    }
    append(params) {
        if (this.value instanceof Array) {
            // Array serialization
            if (this.options.explode) {
                for (const v of this.value) {
                    params = params.append(this.name, this.serializeValue(v));
                }
            }
            else {
                const separator = this.options.style === 'spaceDelimited'
                    ? ' ' : this.options.style === 'pipeDelimited'
                    ? '|' : ',';
                return params.append(this.name, this.serializeValue(this.value, separator));
            }
        }
        else if (this.value !== null && typeof this.value === 'object') {
            // Object serialization
            if (this.options.style === 'deepObject') {
                // Append a parameter for each key, in the form `name[key]`
                for (const key of Object.keys(this.value)) {
                    const propVal = this.value[key];
                    if (propVal !== null && propVal !== undefined) {
                        params = params.append(`${this.name}[${key}]`, this.serializeValue(propVal));
                    }
                }
            }
            else if (this.options.explode) {
                // Append a parameter for each key without using the parameter name
                for (const key of Object.keys(this.value)) {
                    const propVal = this.value[key];
                    if (propVal !== null && propVal !== undefined) {
                        params = params.append(key, this.serializeValue(propVal));
                    }
                }
            }
            else {
                // Append a single parameter whose values are a comma-separated list of key,value,key,value...
                const array = [];
                for (const key of Object.keys(this.value)) {
                    const propVal = this.value[key];
                    if (propVal !== null && propVal !== undefined) {
                        array.push(key);
                        array.push(propVal);
                    }
                }
                params = params.append(this.name, this.serializeValue(array));
            }
        }
        else if (this.value !== null && this.value !== undefined) {
            // Plain value
            params = params.append(this.name, this.serializeValue(this.value));
        }
        return params;
    }
}
/**
 * A parameter in the HTTP request header
 */
class HeaderParameter extends Parameter {
    constructor(name, value, options) {
        super(name, value, options, 'simple', false);
    }
    append(headers) {
        if (this.value !== null && this.value !== undefined) {
            if (this.value instanceof Array) {
                for (const v of this.value) {
                    headers = headers.append(this.name, this.serializeValue(v));
                }
            }
            else {
                headers = headers.append(this.name, this.serializeValue(this.value));
            }
        }
        return headers;
    }
}
/**
 * Helper to build http requests from parameters
 */
class RequestBuilder {
    constructor(rootUrl, operationPath, method) {
        this.rootUrl = rootUrl;
        this.operationPath = operationPath;
        this.method = method;
        this._path = new Map();
        this._query = new Map();
        this._header = new Map();
    }
    /**
     * Sets a path parameter
     */
    path(name, value, options) {
        this._path.set(name, new PathParameter(name, value, options || {}));
    }
    /**
     * Sets a query parameter
     */
    query(name, value, options) {
        this._query.set(name, new QueryParameter(name, value, options || {}));
    }
    /**
     * Sets a header parameter
     */
    header(name, value, options) {
        this._header.set(name, new HeaderParameter(name, value, options || {}));
    }
    /**
     * Sets the body content, along with the content type
     */
    body(value, contentType = 'application/json') {
        if (value instanceof Blob) {
            this._bodyContentType = value.type;
        }
        else {
            this._bodyContentType = contentType;
        }
        if (this._bodyContentType === 'application/x-www-form-urlencoded' && value !== null && typeof value === 'object') {
            // Handle URL-encoded data
            const pairs = [];
            for (const key of Object.keys(value)) {
                let val = value[key];
                if (!(val instanceof Array)) {
                    val = [val];
                }
                for (const v of val) {
                    const formValue = this.formDataValue(v);
                    if (formValue !== null) {
                        pairs.push([key, formValue]);
                    }
                }
            }
            this._bodyContent = pairs.map(p => `${encodeURIComponent(p[0])}=${encodeURIComponent(p[1])}`).join('&');
        }
        else if (this._bodyContentType === 'multipart/form-data') {
            // Handle multipart form data
            const formData = new FormData();
            if (value !== null && value !== undefined) {
                for (const key of Object.keys(value)) {
                    const val = value[key];
                    if (val instanceof Array) {
                        for (const v of val) {
                            const toAppend = this.formDataValue(v);
                            if (toAppend !== null) {
                                formData.append(key, toAppend);
                            }
                        }
                    }
                    else {
                        const toAppend = this.formDataValue(val);
                        if (toAppend !== null) {
                            formData.set(key, toAppend);
                        }
                    }
                }
            }
            this._bodyContent = formData;
        }
        else {
            // The body is the plain content
            this._bodyContent = value;
        }
    }
    formDataValue(value) {
        if (value === null || value === undefined) {
            return null;
        }
        if (value instanceof Blob) {
            return value;
        }
        if (typeof value === 'object') {
            return new Blob([JSON.stringify(value)], { type: 'application/json' });
        }
        return String(value);
    }
    /**
     * Builds the request with the current set parameters
     */
    build(options) {
        options = options || {};
        // Path parameters
        let path = this.operationPath;
        for (const pathParam of this._path.values()) {
            path = pathParam.append(path);
        }
        const url = this.rootUrl + path;
        // Query parameters
        let httpParams = new HttpParams({
            encoder: ParameterCodecInstance
        });
        for (const queryParam of this._query.values()) {
            httpParams = queryParam.append(httpParams);
        }
        // Header parameters
        let httpHeaders = new HttpHeaders();
        if (options.accept) {
            httpHeaders = httpHeaders.append('Accept', options.accept);
        }
        for (const headerParam of this._header.values()) {
            httpHeaders = headerParam.append(httpHeaders);
        }
        // Request content headers
        if (this._bodyContentType && !(this._bodyContent instanceof FormData)) {
            httpHeaders = httpHeaders.set('Content-Type', this._bodyContentType);
        }
        // Perform the request
        return new HttpRequest(this.method.toUpperCase(), url, this._bodyContent, {
            params: httpParams,
            headers: httpHeaders,
            responseType: options.responseType,
            reportProgress: options.reportProgress,
            context: options.context
        });
    }
}

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function appControllerGetHello(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, appControllerGetHello.PATH, 'get');
    if (params) {
    }
    return http.request(rb.build({ responseType: 'text', accept: '*/*', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r.clone({ body: undefined });
    }));
}
appControllerGetHello.PATH = '/';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
class AppService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `appControllerGetHello()` */
    static { this.AppControllerGetHelloPath = '/'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `appControllerGetHello()` instead.
     *
     * This method doesn't expect any request body.
     */
    appControllerGetHello$Response(params, context) {
        return appControllerGetHello(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `appControllerGetHello$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    appControllerGetHello(params, context) {
        return this.appControllerGetHello$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: AppService, deps: [{ token: ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: AppService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: AppService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: ApiConfiguration }, { type: i2.HttpClient }] });

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function authControllerForgotPassword(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, authControllerForgotPassword.PATH, 'post');
    if (params) {
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
authControllerForgotPassword.PATH = '/nonauth/auth/auth/forgot-password';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function authControllerLogin(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, authControllerLogin.PATH, 'post');
    if (params) {
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
authControllerLogin.PATH = '/nonauth/auth/auth/login';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function authControllerLogout(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, authControllerLogout.PATH, 'post');
    if (params) {
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
authControllerLogout.PATH = '/nonauth/auth/auth/logout';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function authControllerRefresh(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, authControllerRefresh.PATH, 'post');
    if (params) {
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
authControllerRefresh.PATH = '/nonauth/auth/auth/refresh-token';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function authControllerResetPassword(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, authControllerResetPassword.PATH, 'post');
    if (params) {
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
authControllerResetPassword.PATH = '/nonauth/auth/auth/reset-password';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
class AuthPublicService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `authControllerLogin()` */
    static { this.AuthControllerLoginPath = '/nonauth/auth/auth/login'; }
    /**
     * Login user.
     *
     *
     *
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `authControllerLogin()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    authControllerLogin$Response(params, context) {
        return authControllerLogin(this.http, this.rootUrl, params, context);
    }
    /**
     * Login user.
     *
     *
     *
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `authControllerLogin$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    authControllerLogin(params, context) {
        return this.authControllerLogin$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `authControllerRefresh()` */
    static { this.AuthControllerRefreshPath = '/nonauth/auth/auth/refresh-token'; }
    /**
     * Refresh token.
     *
     *
     *
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `authControllerRefresh()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    authControllerRefresh$Response(params, context) {
        return authControllerRefresh(this.http, this.rootUrl, params, context);
    }
    /**
     * Refresh token.
     *
     *
     *
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `authControllerRefresh$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    authControllerRefresh(params, context) {
        return this.authControllerRefresh$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `authControllerForgotPassword()` */
    static { this.AuthControllerForgotPasswordPath = '/nonauth/auth/auth/forgot-password'; }
    /**
     * Lupa password.
     *
     *
     *
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `authControllerForgotPassword()` instead.
     *
     * This method doesn't expect any request body.
     */
    authControllerForgotPassword$Response(params, context) {
        return authControllerForgotPassword(this.http, this.rootUrl, params, context);
    }
    /**
     * Lupa password.
     *
     *
     *
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `authControllerForgotPassword$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    authControllerForgotPassword(params, context) {
        return this.authControllerForgotPassword$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `authControllerResetPassword()` */
    static { this.AuthControllerResetPasswordPath = '/nonauth/auth/auth/reset-password'; }
    /**
     * Reset password.
     *
     *
     *
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `authControllerResetPassword()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    authControllerResetPassword$Response(params, context) {
        return authControllerResetPassword(this.http, this.rootUrl, params, context);
    }
    /**
     * Reset password.
     *
     *
     *
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `authControllerResetPassword$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    authControllerResetPassword(params, context) {
        return this.authControllerResetPassword$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `authControllerLogout()` */
    static { this.AuthControllerLogoutPath = '/nonauth/auth/auth/logout'; }
    /**
     * Logout user.
     *
     *
     *
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `authControllerLogout()` instead.
     *
     * This method doesn't expect any request body.
     */
    authControllerLogout$Response(params, context) {
        return authControllerLogout(this.http, this.rootUrl, params, context);
    }
    /**
     * Logout user.
     *
     *
     *
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `authControllerLogout$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    authControllerLogout(params, context) {
        return this.authControllerLogout$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: AuthPublicService, deps: [{ token: ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: AuthPublicService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: AuthPublicService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: ApiConfiguration }, { type: i2.HttpClient }] });

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function usersControllerCreate(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, usersControllerCreate.PATH, 'post');
    if (params) {
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
usersControllerCreate.PATH = '/auth/users/users';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function usersControllerFindAll(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, usersControllerFindAll.PATH, 'get');
    if (params) {
        rb.query('pageIndex', params.pageIndex, {});
        rb.query('pageSize', params.pageSize, {});
        rb.query('filter', params.filter, {});
        rb.query('sortKey', params.sortKey, {});
        rb.query('sortValue', params.sortValue, {});
        rb.query('search_field', params.search_field, {});
        rb.query('search_keyword', params.search_keyword, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
usersControllerFindAll.PATH = '/auth/users/users';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function usersControllerFindOne(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, usersControllerFindOne.PATH, 'get');
    if (params) {
        rb.path('id', params.id, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
usersControllerFindOne.PATH = '/auth/users/users/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function usersControllerRemove(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, usersControllerRemove.PATH, 'delete');
    if (params) {
        rb.path('id', params.id, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
usersControllerRemove.PATH = '/auth/users/users/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function usersControllerUpdate(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, usersControllerUpdate.PATH, 'put');
    if (params) {
        rb.path('id', params.id, {});
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
usersControllerUpdate.PATH = '/auth/users/users/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
class UsersService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `usersControllerFindAll()` */
    static { this.UsersControllerFindAllPath = '/auth/users/users'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `usersControllerFindAll()` instead.
     *
     * This method doesn't expect any request body.
     */
    usersControllerFindAll$Response(params, context) {
        return usersControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `usersControllerFindAll$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    usersControllerFindAll(params, context) {
        return this.usersControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `usersControllerCreate()` */
    static { this.UsersControllerCreatePath = '/auth/users/users'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `usersControllerCreate()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    usersControllerCreate$Response(params, context) {
        return usersControllerCreate(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `usersControllerCreate$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    usersControllerCreate(params, context) {
        return this.usersControllerCreate$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `usersControllerFindOne()` */
    static { this.UsersControllerFindOnePath = '/auth/users/users/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `usersControllerFindOne()` instead.
     *
     * This method doesn't expect any request body.
     */
    usersControllerFindOne$Response(params, context) {
        return usersControllerFindOne(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `usersControllerFindOne$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    usersControllerFindOne(params, context) {
        return this.usersControllerFindOne$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `usersControllerUpdate()` */
    static { this.UsersControllerUpdatePath = '/auth/users/users/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `usersControllerUpdate()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    usersControllerUpdate$Response(params, context) {
        return usersControllerUpdate(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `usersControllerUpdate$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    usersControllerUpdate(params, context) {
        return this.usersControllerUpdate$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `usersControllerRemove()` */
    static { this.UsersControllerRemovePath = '/auth/users/users/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `usersControllerRemove()` instead.
     *
     * This method doesn't expect any request body.
     */
    usersControllerRemove$Response(params, context) {
        return usersControllerRemove(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `usersControllerRemove$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    usersControllerRemove(params, context) {
        return this.usersControllerRemove$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: UsersService, deps: [{ token: ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: UsersService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: UsersService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: ApiConfiguration }, { type: i2.HttpClient }] });

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function usersReportControllerFindAll(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, usersReportControllerFindAll.PATH, 'post');
    if (params) {
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
usersReportControllerFindAll.PATH = '/auth/users/users_report/list';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function usersReportControllerFindOne(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, usersReportControllerFindOne.PATH, 'get');
    if (params) {
        rb.path('id', params.id, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
usersReportControllerFindOne.PATH = '/auth/users/users_report/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
class UsersReportService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `usersReportControllerFindAll()` */
    static { this.UsersReportControllerFindAllPath = '/auth/users/users_report/list'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `usersReportControllerFindAll()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    usersReportControllerFindAll$Response(params, context) {
        return usersReportControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `usersReportControllerFindAll$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    usersReportControllerFindAll(params, context) {
        return this.usersReportControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `usersReportControllerFindOne()` */
    static { this.UsersReportControllerFindOnePath = '/auth/users/users_report/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `usersReportControllerFindOne()` instead.
     *
     * This method doesn't expect any request body.
     */
    usersReportControllerFindOne$Response(params, context) {
        return usersReportControllerFindOne(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `usersReportControllerFindOne$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    usersReportControllerFindOne(params, context) {
        return this.usersReportControllerFindOne$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: UsersReportService, deps: [{ token: ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: UsersReportService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: UsersReportService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: ApiConfiguration }, { type: i2.HttpClient }] });

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function usersWidgetControllerFindAll(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, usersWidgetControllerFindAll.PATH, 'post');
    if (params) {
        rb.query('filter', params.filter, {});
        rb.query('joinWhere', params.joinWhere, {});
        rb.query('select', params.select, {});
        rb.query('groupBy', params.groupBy, {});
        rb.query('sortKey', params.sortKey, {});
        rb.query('sortValue', params.sortValue, {});
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
usersWidgetControllerFindAll.PATH = '/auth/users/users_widget';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
class UsersWidgetService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `usersWidgetControllerFindAll()` */
    static { this.UsersWidgetControllerFindAllPath = '/auth/users/users_widget'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `usersWidgetControllerFindAll()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    usersWidgetControllerFindAll$Response(params, context) {
        return usersWidgetControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `usersWidgetControllerFindAll$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    usersWidgetControllerFindAll(params, context) {
        return this.usersWidgetControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: UsersWidgetService, deps: [{ token: ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: UsersWidgetService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: UsersWidgetService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: ApiConfiguration }, { type: i2.HttpClient }] });

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function userTokensControllerCreate(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, userTokensControllerCreate.PATH, 'post');
    if (params) {
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
userTokensControllerCreate.PATH = '/auth/user_tokens/user_tokens';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function userTokensControllerFindAll(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, userTokensControllerFindAll.PATH, 'get');
    if (params) {
        rb.query('pageIndex', params.pageIndex, {});
        rb.query('pageSize', params.pageSize, {});
        rb.query('filter', params.filter, {});
        rb.query('sortKey', params.sortKey, {});
        rb.query('sortValue', params.sortValue, {});
        rb.query('search_field', params.search_field, {});
        rb.query('search_keyword', params.search_keyword, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
userTokensControllerFindAll.PATH = '/auth/user_tokens/user_tokens';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function userTokensControllerFindOne(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, userTokensControllerFindOne.PATH, 'get');
    if (params) {
        rb.path('id', params.id, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
userTokensControllerFindOne.PATH = '/auth/user_tokens/user_tokens/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function userTokensControllerRemove(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, userTokensControllerRemove.PATH, 'delete');
    if (params) {
        rb.path('id', params.id, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
userTokensControllerRemove.PATH = '/auth/user_tokens/user_tokens/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function userTokensControllerUpdate(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, userTokensControllerUpdate.PATH, 'put');
    if (params) {
        rb.path('id', params.id, {});
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
userTokensControllerUpdate.PATH = '/auth/user_tokens/user_tokens/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
class UserTokensService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `userTokensControllerFindAll()` */
    static { this.UserTokensControllerFindAllPath = '/auth/user_tokens/user_tokens'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `userTokensControllerFindAll()` instead.
     *
     * This method doesn't expect any request body.
     */
    userTokensControllerFindAll$Response(params, context) {
        return userTokensControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `userTokensControllerFindAll$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    userTokensControllerFindAll(params, context) {
        return this.userTokensControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `userTokensControllerCreate()` */
    static { this.UserTokensControllerCreatePath = '/auth/user_tokens/user_tokens'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `userTokensControllerCreate()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    userTokensControllerCreate$Response(params, context) {
        return userTokensControllerCreate(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `userTokensControllerCreate$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    userTokensControllerCreate(params, context) {
        return this.userTokensControllerCreate$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `userTokensControllerFindOne()` */
    static { this.UserTokensControllerFindOnePath = '/auth/user_tokens/user_tokens/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `userTokensControllerFindOne()` instead.
     *
     * This method doesn't expect any request body.
     */
    userTokensControllerFindOne$Response(params, context) {
        return userTokensControllerFindOne(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `userTokensControllerFindOne$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    userTokensControllerFindOne(params, context) {
        return this.userTokensControllerFindOne$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `userTokensControllerUpdate()` */
    static { this.UserTokensControllerUpdatePath = '/auth/user_tokens/user_tokens/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `userTokensControllerUpdate()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    userTokensControllerUpdate$Response(params, context) {
        return userTokensControllerUpdate(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `userTokensControllerUpdate$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    userTokensControllerUpdate(params, context) {
        return this.userTokensControllerUpdate$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `userTokensControllerRemove()` */
    static { this.UserTokensControllerRemovePath = '/auth/user_tokens/user_tokens/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `userTokensControllerRemove()` instead.
     *
     * This method doesn't expect any request body.
     */
    userTokensControllerRemove$Response(params, context) {
        return userTokensControllerRemove(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `userTokensControllerRemove$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    userTokensControllerRemove(params, context) {
        return this.userTokensControllerRemove$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: UserTokensService, deps: [{ token: ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: UserTokensService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: UserTokensService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: ApiConfiguration }, { type: i2.HttpClient }] });

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function authProtectedControllerGetMe(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, authProtectedControllerGetMe.PATH, 'get');
    if (params) {
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
authProtectedControllerGetMe.PATH = '/auth/auth-protect/auth-protect/me';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function authProtectedControllerLogout(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, authProtectedControllerLogout.PATH, 'post');
    if (params) {
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
authProtectedControllerLogout.PATH = '/auth/auth-protect/auth-protect/logout';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
class AuthProtectService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `authProtectedControllerGetMe()` */
    static { this.AuthProtectedControllerGetMePath = '/auth/auth-protect/auth-protect/me'; }
    /**
     * Get current user.
     *
     *
     *
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `authProtectedControllerGetMe()` instead.
     *
     * This method doesn't expect any request body.
     */
    authProtectedControllerGetMe$Response(params, context) {
        return authProtectedControllerGetMe(this.http, this.rootUrl, params, context);
    }
    /**
     * Get current user.
     *
     *
     *
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `authProtectedControllerGetMe$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    authProtectedControllerGetMe(params, context) {
        return this.authProtectedControllerGetMe$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `authProtectedControllerLogout()` */
    static { this.AuthProtectedControllerLogoutPath = '/auth/auth-protect/auth-protect/logout'; }
    /**
     * Logout user.
     *
     *
     *
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `authProtectedControllerLogout()` instead.
     *
     * This method doesn't expect any request body.
     */
    authProtectedControllerLogout$Response(params, context) {
        return authProtectedControllerLogout(this.http, this.rootUrl, params, context);
    }
    /**
     * Logout user.
     *
     *
     *
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `authProtectedControllerLogout$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    authProtectedControllerLogout(params, context) {
        return this.authProtectedControllerLogout$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: AuthProtectService, deps: [{ token: ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: AuthProtectService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: AuthProtectService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: ApiConfiguration }, { type: i2.HttpClient }] });

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function documentControllerCreate(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, documentControllerCreate.PATH, 'post');
    if (params) {
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
documentControllerCreate.PATH = '/auth/document/document';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function documentControllerFindAll(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, documentControllerFindAll.PATH, 'get');
    if (params) {
        rb.query('pageIndex', params.pageIndex, {});
        rb.query('pageSize', params.pageSize, {});
        rb.query('filter', params.filter, {});
        rb.query('sortKey', params.sortKey, {});
        rb.query('sortValue', params.sortValue, {});
        rb.query('search_field', params.search_field, {});
        rb.query('search_keyword', params.search_keyword, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
documentControllerFindAll.PATH = '/auth/document/document';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function documentControllerFindOne(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, documentControllerFindOne.PATH, 'get');
    if (params) {
        rb.path('id', params.id, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
documentControllerFindOne.PATH = '/auth/document/document/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function documentControllerRemove(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, documentControllerRemove.PATH, 'delete');
    if (params) {
        rb.path('id', params.id, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
documentControllerRemove.PATH = '/auth/document/document/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function documentControllerUpdate(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, documentControllerUpdate.PATH, 'put');
    if (params) {
        rb.path('id', params.id, {});
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
documentControllerUpdate.PATH = '/auth/document/document/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function documentControllerUploadFile(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, documentControllerUploadFile.PATH, 'post');
    if (params) {
        rb.body(params.body, 'multipart/form-data');
    }
    return http.request(rb.build({ responseType: 'text', accept: '*/*', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r.clone({ body: undefined });
    }));
}
documentControllerUploadFile.PATH = '/auth/document/document/upload';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
class DocumentService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `documentControllerFindAll()` */
    static { this.DocumentControllerFindAllPath = '/auth/document/document'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `documentControllerFindAll()` instead.
     *
     * This method doesn't expect any request body.
     */
    documentControllerFindAll$Response(params, context) {
        return documentControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `documentControllerFindAll$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    documentControllerFindAll(params, context) {
        return this.documentControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `documentControllerCreate()` */
    static { this.DocumentControllerCreatePath = '/auth/document/document'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `documentControllerCreate()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    documentControllerCreate$Response(params, context) {
        return documentControllerCreate(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `documentControllerCreate$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    documentControllerCreate(params, context) {
        return this.documentControllerCreate$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `documentControllerUploadFile()` */
    static { this.DocumentControllerUploadFilePath = '/auth/document/document/upload'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `documentControllerUploadFile()` instead.
     *
     * This method sends `multipart/form-data` and handles request body of type `multipart/form-data`.
     */
    documentControllerUploadFile$Response(params, context) {
        return documentControllerUploadFile(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `documentControllerUploadFile$Response()` instead.
     *
     * This method sends `multipart/form-data` and handles request body of type `multipart/form-data`.
     */
    documentControllerUploadFile(params, context) {
        return this.documentControllerUploadFile$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `documentControllerFindOne()` */
    static { this.DocumentControllerFindOnePath = '/auth/document/document/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `documentControllerFindOne()` instead.
     *
     * This method doesn't expect any request body.
     */
    documentControllerFindOne$Response(params, context) {
        return documentControllerFindOne(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `documentControllerFindOne$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    documentControllerFindOne(params, context) {
        return this.documentControllerFindOne$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `documentControllerUpdate()` */
    static { this.DocumentControllerUpdatePath = '/auth/document/document/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `documentControllerUpdate()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    documentControllerUpdate$Response(params, context) {
        return documentControllerUpdate(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `documentControllerUpdate$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    documentControllerUpdate(params, context) {
        return this.documentControllerUpdate$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `documentControllerRemove()` */
    static { this.DocumentControllerRemovePath = '/auth/document/document/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `documentControllerRemove()` instead.
     *
     * This method doesn't expect any request body.
     */
    documentControllerRemove$Response(params, context) {
        return documentControllerRemove(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `documentControllerRemove$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    documentControllerRemove(params, context) {
        return this.documentControllerRemove$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: DocumentService, deps: [{ token: ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: DocumentService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: DocumentService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: ApiConfiguration }, { type: i2.HttpClient }] });

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function workflowControllerCreate(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, workflowControllerCreate.PATH, 'post');
    if (params) {
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
workflowControllerCreate.PATH = '/auth/workflow/workflow';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function workflowControllerFindAll(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, workflowControllerFindAll.PATH, 'get');
    if (params) {
        rb.query('pageIndex', params.pageIndex, {});
        rb.query('pageSize', params.pageSize, {});
        rb.query('filter', params.filter, {});
        rb.query('sortKey', params.sortKey, {});
        rb.query('sortValue', params.sortValue, {});
        rb.query('search_field', params.search_field, {});
        rb.query('search_keyword', params.search_keyword, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
workflowControllerFindAll.PATH = '/auth/workflow/workflow';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function workflowControllerFindOne(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, workflowControllerFindOne.PATH, 'get');
    if (params) {
        rb.path('id', params.id, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
workflowControllerFindOne.PATH = '/auth/workflow/workflow/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function workflowControllerRemove(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, workflowControllerRemove.PATH, 'delete');
    if (params) {
        rb.path('id', params.id, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
workflowControllerRemove.PATH = '/auth/workflow/workflow/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function workflowControllerUpdate(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, workflowControllerUpdate.PATH, 'put');
    if (params) {
        rb.path('id', params.id, {});
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
workflowControllerUpdate.PATH = '/auth/workflow/workflow/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
class WorkflowService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `workflowControllerFindAll()` */
    static { this.WorkflowControllerFindAllPath = '/auth/workflow/workflow'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `workflowControllerFindAll()` instead.
     *
     * This method doesn't expect any request body.
     */
    workflowControllerFindAll$Response(params, context) {
        return workflowControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `workflowControllerFindAll$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    workflowControllerFindAll(params, context) {
        return this.workflowControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `workflowControllerCreate()` */
    static { this.WorkflowControllerCreatePath = '/auth/workflow/workflow'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `workflowControllerCreate()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    workflowControllerCreate$Response(params, context) {
        return workflowControllerCreate(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `workflowControllerCreate$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    workflowControllerCreate(params, context) {
        return this.workflowControllerCreate$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `workflowControllerFindOne()` */
    static { this.WorkflowControllerFindOnePath = '/auth/workflow/workflow/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `workflowControllerFindOne()` instead.
     *
     * This method doesn't expect any request body.
     */
    workflowControllerFindOne$Response(params, context) {
        return workflowControllerFindOne(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `workflowControllerFindOne$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    workflowControllerFindOne(params, context) {
        return this.workflowControllerFindOne$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `workflowControllerUpdate()` */
    static { this.WorkflowControllerUpdatePath = '/auth/workflow/workflow/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `workflowControllerUpdate()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    workflowControllerUpdate$Response(params, context) {
        return workflowControllerUpdate(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `workflowControllerUpdate$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    workflowControllerUpdate(params, context) {
        return this.workflowControllerUpdate$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `workflowControllerRemove()` */
    static { this.WorkflowControllerRemovePath = '/auth/workflow/workflow/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `workflowControllerRemove()` instead.
     *
     * This method doesn't expect any request body.
     */
    workflowControllerRemove$Response(params, context) {
        return workflowControllerRemove(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `workflowControllerRemove$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    workflowControllerRemove(params, context) {
        return this.workflowControllerRemove$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: WorkflowService, deps: [{ token: ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: WorkflowService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: WorkflowService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: ApiConfiguration }, { type: i2.HttpClient }] });

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function workflowApplyControllerApplyStep(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, workflowApplyControllerApplyStep.PATH, 'post');
    if (params) {
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'text', accept: '*/*', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r.clone({ body: undefined });
    }));
}
workflowApplyControllerApplyStep.PATH = '/auth/workflow/workflow/apply';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
class WorkflowApplyService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `workflowApplyControllerApplyStep()` */
    static { this.WorkflowApplyControllerApplyStepPath = '/auth/workflow/workflow/apply'; }
    /**
     * Apply workflow step.
     *
     *
     *
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `workflowApplyControllerApplyStep()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    workflowApplyControllerApplyStep$Response(params, context) {
        return workflowApplyControllerApplyStep(this.http, this.rootUrl, params, context);
    }
    /**
     * Apply workflow step.
     *
     *
     *
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `workflowApplyControllerApplyStep$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    workflowApplyControllerApplyStep(params, context) {
        return this.workflowApplyControllerApplyStep$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: WorkflowApplyService, deps: [{ token: ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: WorkflowApplyService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: WorkflowApplyService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: ApiConfiguration }, { type: i2.HttpClient }] });

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function workflowReportControllerFindAll(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, workflowReportControllerFindAll.PATH, 'post');
    if (params) {
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
workflowReportControllerFindAll.PATH = '/auth/workflow/workflow_report/list';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function workflowReportControllerFindOne(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, workflowReportControllerFindOne.PATH, 'get');
    if (params) {
        rb.path('id', params.id, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
workflowReportControllerFindOne.PATH = '/auth/workflow/workflow_report/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
class WorkflowReportService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `workflowReportControllerFindAll()` */
    static { this.WorkflowReportControllerFindAllPath = '/auth/workflow/workflow_report/list'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `workflowReportControllerFindAll()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    workflowReportControllerFindAll$Response(params, context) {
        return workflowReportControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `workflowReportControllerFindAll$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    workflowReportControllerFindAll(params, context) {
        return this.workflowReportControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `workflowReportControllerFindOne()` */
    static { this.WorkflowReportControllerFindOnePath = '/auth/workflow/workflow_report/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `workflowReportControllerFindOne()` instead.
     *
     * This method doesn't expect any request body.
     */
    workflowReportControllerFindOne$Response(params, context) {
        return workflowReportControllerFindOne(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `workflowReportControllerFindOne$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    workflowReportControllerFindOne(params, context) {
        return this.workflowReportControllerFindOne$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: WorkflowReportService, deps: [{ token: ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: WorkflowReportService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: WorkflowReportService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: ApiConfiguration }, { type: i2.HttpClient }] });

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function workflowWidgetControllerFindAll(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, workflowWidgetControllerFindAll.PATH, 'post');
    if (params) {
        rb.query('filter', params.filter, {});
        rb.query('joinWhere', params.joinWhere, {});
        rb.query('select', params.select, {});
        rb.query('groupBy', params.groupBy, {});
        rb.query('sortKey', params.sortKey, {});
        rb.query('sortValue', params.sortValue, {});
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
workflowWidgetControllerFindAll.PATH = '/auth/workflow/workflow_widget';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
class WorkflowWidgetService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `workflowWidgetControllerFindAll()` */
    static { this.WorkflowWidgetControllerFindAllPath = '/auth/workflow/workflow_widget'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `workflowWidgetControllerFindAll()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    workflowWidgetControllerFindAll$Response(params, context) {
        return workflowWidgetControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `workflowWidgetControllerFindAll$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    workflowWidgetControllerFindAll(params, context) {
        return this.workflowWidgetControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: WorkflowWidgetService, deps: [{ token: ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: WorkflowWidgetService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: WorkflowWidgetService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: ApiConfiguration }, { type: i2.HttpClient }] });

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function workflowLogControllerCreate(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, workflowLogControllerCreate.PATH, 'post');
    if (params) {
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
workflowLogControllerCreate.PATH = '/auth/workflow_log/workflow_log';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function workflowLogControllerFindAll(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, workflowLogControllerFindAll.PATH, 'get');
    if (params) {
        rb.query('pageIndex', params.pageIndex, {});
        rb.query('pageSize', params.pageSize, {});
        rb.query('filter', params.filter, {});
        rb.query('sortKey', params.sortKey, {});
        rb.query('sortValue', params.sortValue, {});
        rb.query('search_field', params.search_field, {});
        rb.query('search_keyword', params.search_keyword, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
workflowLogControllerFindAll.PATH = '/auth/workflow_log/workflow_log';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function workflowLogControllerFindOne(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, workflowLogControllerFindOne.PATH, 'get');
    if (params) {
        rb.path('id', params.id, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
workflowLogControllerFindOne.PATH = '/auth/workflow_log/workflow_log/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function workflowLogControllerRemove(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, workflowLogControllerRemove.PATH, 'delete');
    if (params) {
        rb.path('id', params.id, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
workflowLogControllerRemove.PATH = '/auth/workflow_log/workflow_log/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function workflowLogControllerUpdate(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, workflowLogControllerUpdate.PATH, 'put');
    if (params) {
        rb.path('id', params.id, {});
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
workflowLogControllerUpdate.PATH = '/auth/workflow_log/workflow_log/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
class WorkflowLogService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `workflowLogControllerFindAll()` */
    static { this.WorkflowLogControllerFindAllPath = '/auth/workflow_log/workflow_log'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `workflowLogControllerFindAll()` instead.
     *
     * This method doesn't expect any request body.
     */
    workflowLogControllerFindAll$Response(params, context) {
        return workflowLogControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `workflowLogControllerFindAll$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    workflowLogControllerFindAll(params, context) {
        return this.workflowLogControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `workflowLogControllerCreate()` */
    static { this.WorkflowLogControllerCreatePath = '/auth/workflow_log/workflow_log'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `workflowLogControllerCreate()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    workflowLogControllerCreate$Response(params, context) {
        return workflowLogControllerCreate(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `workflowLogControllerCreate$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    workflowLogControllerCreate(params, context) {
        return this.workflowLogControllerCreate$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `workflowLogControllerFindOne()` */
    static { this.WorkflowLogControllerFindOnePath = '/auth/workflow_log/workflow_log/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `workflowLogControllerFindOne()` instead.
     *
     * This method doesn't expect any request body.
     */
    workflowLogControllerFindOne$Response(params, context) {
        return workflowLogControllerFindOne(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `workflowLogControllerFindOne$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    workflowLogControllerFindOne(params, context) {
        return this.workflowLogControllerFindOne$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `workflowLogControllerUpdate()` */
    static { this.WorkflowLogControllerUpdatePath = '/auth/workflow_log/workflow_log/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `workflowLogControllerUpdate()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    workflowLogControllerUpdate$Response(params, context) {
        return workflowLogControllerUpdate(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `workflowLogControllerUpdate$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    workflowLogControllerUpdate(params, context) {
        return this.workflowLogControllerUpdate$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `workflowLogControllerRemove()` */
    static { this.WorkflowLogControllerRemovePath = '/auth/workflow_log/workflow_log/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `workflowLogControllerRemove()` instead.
     *
     * This method doesn't expect any request body.
     */
    workflowLogControllerRemove$Response(params, context) {
        return workflowLogControllerRemove(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `workflowLogControllerRemove$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    workflowLogControllerRemove(params, context) {
        return this.workflowLogControllerRemove$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: WorkflowLogService, deps: [{ token: ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: WorkflowLogService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: WorkflowLogService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: ApiConfiguration }, { type: i2.HttpClient }] });

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function workflowLogReportControllerFindAll(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, workflowLogReportControllerFindAll.PATH, 'post');
    if (params) {
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
workflowLogReportControllerFindAll.PATH = '/auth/workflow_log/workflow_log_report/list';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function workflowLogReportControllerFindOne(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, workflowLogReportControllerFindOne.PATH, 'get');
    if (params) {
        rb.path('id', params.id, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
workflowLogReportControllerFindOne.PATH = '/auth/workflow_log/workflow_log_report/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
class WorkflowLogReportService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `workflowLogReportControllerFindAll()` */
    static { this.WorkflowLogReportControllerFindAllPath = '/auth/workflow_log/workflow_log_report/list'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `workflowLogReportControllerFindAll()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    workflowLogReportControllerFindAll$Response(params, context) {
        return workflowLogReportControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `workflowLogReportControllerFindAll$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    workflowLogReportControllerFindAll(params, context) {
        return this.workflowLogReportControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `workflowLogReportControllerFindOne()` */
    static { this.WorkflowLogReportControllerFindOnePath = '/auth/workflow_log/workflow_log_report/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `workflowLogReportControllerFindOne()` instead.
     *
     * This method doesn't expect any request body.
     */
    workflowLogReportControllerFindOne$Response(params, context) {
        return workflowLogReportControllerFindOne(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `workflowLogReportControllerFindOne$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    workflowLogReportControllerFindOne(params, context) {
        return this.workflowLogReportControllerFindOne$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: WorkflowLogReportService, deps: [{ token: ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: WorkflowLogReportService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: WorkflowLogReportService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: ApiConfiguration }, { type: i2.HttpClient }] });

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function workflowLogWidgetControllerFindAll(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, workflowLogWidgetControllerFindAll.PATH, 'post');
    if (params) {
        rb.query('filter', params.filter, {});
        rb.query('joinWhere', params.joinWhere, {});
        rb.query('select', params.select, {});
        rb.query('groupBy', params.groupBy, {});
        rb.query('sortKey', params.sortKey, {});
        rb.query('sortValue', params.sortValue, {});
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
workflowLogWidgetControllerFindAll.PATH = '/auth/workflow_log/workflow_log_widget';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
class WorkflowLogWidgetService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `workflowLogWidgetControllerFindAll()` */
    static { this.WorkflowLogWidgetControllerFindAllPath = '/auth/workflow_log/workflow_log_widget'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `workflowLogWidgetControllerFindAll()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    workflowLogWidgetControllerFindAll$Response(params, context) {
        return workflowLogWidgetControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `workflowLogWidgetControllerFindAll$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    workflowLogWidgetControllerFindAll(params, context) {
        return this.workflowLogWidgetControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: WorkflowLogWidgetService, deps: [{ token: ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: WorkflowLogWidgetService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: WorkflowLogWidgetService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: ApiConfiguration }, { type: i2.HttpClient }] });

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function workflowStepControllerCreate(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, workflowStepControllerCreate.PATH, 'post');
    if (params) {
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
workflowStepControllerCreate.PATH = '/auth/workflow_step/workflow_step';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function workflowStepControllerFindAll(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, workflowStepControllerFindAll.PATH, 'get');
    if (params) {
        rb.query('pageIndex', params.pageIndex, {});
        rb.query('pageSize', params.pageSize, {});
        rb.query('filter', params.filter, {});
        rb.query('sortKey', params.sortKey, {});
        rb.query('sortValue', params.sortValue, {});
        rb.query('search_field', params.search_field, {});
        rb.query('search_keyword', params.search_keyword, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
workflowStepControllerFindAll.PATH = '/auth/workflow_step/workflow_step';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function workflowStepControllerFindOne(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, workflowStepControllerFindOne.PATH, 'get');
    if (params) {
        rb.path('id', params.id, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
workflowStepControllerFindOne.PATH = '/auth/workflow_step/workflow_step/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function workflowStepControllerRemove(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, workflowStepControllerRemove.PATH, 'delete');
    if (params) {
        rb.path('id', params.id, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
workflowStepControllerRemove.PATH = '/auth/workflow_step/workflow_step/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function workflowStepControllerUpdate(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, workflowStepControllerUpdate.PATH, 'put');
    if (params) {
        rb.path('id', params.id, {});
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
workflowStepControllerUpdate.PATH = '/auth/workflow_step/workflow_step/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
class WorkflowStepService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `workflowStepControllerFindAll()` */
    static { this.WorkflowStepControllerFindAllPath = '/auth/workflow_step/workflow_step'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `workflowStepControllerFindAll()` instead.
     *
     * This method doesn't expect any request body.
     */
    workflowStepControllerFindAll$Response(params, context) {
        return workflowStepControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `workflowStepControllerFindAll$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    workflowStepControllerFindAll(params, context) {
        return this.workflowStepControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `workflowStepControllerCreate()` */
    static { this.WorkflowStepControllerCreatePath = '/auth/workflow_step/workflow_step'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `workflowStepControllerCreate()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    workflowStepControllerCreate$Response(params, context) {
        return workflowStepControllerCreate(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `workflowStepControllerCreate$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    workflowStepControllerCreate(params, context) {
        return this.workflowStepControllerCreate$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `workflowStepControllerFindOne()` */
    static { this.WorkflowStepControllerFindOnePath = '/auth/workflow_step/workflow_step/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `workflowStepControllerFindOne()` instead.
     *
     * This method doesn't expect any request body.
     */
    workflowStepControllerFindOne$Response(params, context) {
        return workflowStepControllerFindOne(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `workflowStepControllerFindOne$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    workflowStepControllerFindOne(params, context) {
        return this.workflowStepControllerFindOne$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `workflowStepControllerUpdate()` */
    static { this.WorkflowStepControllerUpdatePath = '/auth/workflow_step/workflow_step/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `workflowStepControllerUpdate()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    workflowStepControllerUpdate$Response(params, context) {
        return workflowStepControllerUpdate(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `workflowStepControllerUpdate$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    workflowStepControllerUpdate(params, context) {
        return this.workflowStepControllerUpdate$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `workflowStepControllerRemove()` */
    static { this.WorkflowStepControllerRemovePath = '/auth/workflow_step/workflow_step/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `workflowStepControllerRemove()` instead.
     *
     * This method doesn't expect any request body.
     */
    workflowStepControllerRemove$Response(params, context) {
        return workflowStepControllerRemove(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `workflowStepControllerRemove$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    workflowStepControllerRemove(params, context) {
        return this.workflowStepControllerRemove$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: WorkflowStepService, deps: [{ token: ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: WorkflowStepService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: WorkflowStepService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: ApiConfiguration }, { type: i2.HttpClient }] });

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function workflowStepReportControllerFindAll(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, workflowStepReportControllerFindAll.PATH, 'post');
    if (params) {
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
workflowStepReportControllerFindAll.PATH = '/auth/workflow_step/workflow_step_report/list';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function workflowStepReportControllerFindOne(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, workflowStepReportControllerFindOne.PATH, 'get');
    if (params) {
        rb.path('id', params.id, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
workflowStepReportControllerFindOne.PATH = '/auth/workflow_step/workflow_step_report/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
class WorkflowStepReportService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `workflowStepReportControllerFindAll()` */
    static { this.WorkflowStepReportControllerFindAllPath = '/auth/workflow_step/workflow_step_report/list'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `workflowStepReportControllerFindAll()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    workflowStepReportControllerFindAll$Response(params, context) {
        return workflowStepReportControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `workflowStepReportControllerFindAll$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    workflowStepReportControllerFindAll(params, context) {
        return this.workflowStepReportControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `workflowStepReportControllerFindOne()` */
    static { this.WorkflowStepReportControllerFindOnePath = '/auth/workflow_step/workflow_step_report/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `workflowStepReportControllerFindOne()` instead.
     *
     * This method doesn't expect any request body.
     */
    workflowStepReportControllerFindOne$Response(params, context) {
        return workflowStepReportControllerFindOne(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `workflowStepReportControllerFindOne$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    workflowStepReportControllerFindOne(params, context) {
        return this.workflowStepReportControllerFindOne$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: WorkflowStepReportService, deps: [{ token: ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: WorkflowStepReportService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: WorkflowStepReportService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: ApiConfiguration }, { type: i2.HttpClient }] });

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function workflowStepWidgetControllerFindAll(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, workflowStepWidgetControllerFindAll.PATH, 'post');
    if (params) {
        rb.query('filter', params.filter, {});
        rb.query('joinWhere', params.joinWhere, {});
        rb.query('select', params.select, {});
        rb.query('groupBy', params.groupBy, {});
        rb.query('sortKey', params.sortKey, {});
        rb.query('sortValue', params.sortValue, {});
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
workflowStepWidgetControllerFindAll.PATH = '/auth/workflow_step/workflow_step_widget';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
class WorkflowStepWidgetService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `workflowStepWidgetControllerFindAll()` */
    static { this.WorkflowStepWidgetControllerFindAllPath = '/auth/workflow_step/workflow_step_widget'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `workflowStepWidgetControllerFindAll()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    workflowStepWidgetControllerFindAll$Response(params, context) {
        return workflowStepWidgetControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `workflowStepWidgetControllerFindAll$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    workflowStepWidgetControllerFindAll(params, context) {
        return this.workflowStepWidgetControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: WorkflowStepWidgetService, deps: [{ token: ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: WorkflowStepWidgetService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: WorkflowStepWidgetService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: ApiConfiguration }, { type: i2.HttpClient }] });

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function userGroupControllerCreate(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, userGroupControllerCreate.PATH, 'post');
    if (params) {
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
userGroupControllerCreate.PATH = '/auth/user_group/user_group';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function userGroupControllerFindAll(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, userGroupControllerFindAll.PATH, 'get');
    if (params) {
        rb.query('pageIndex', params.pageIndex, {});
        rb.query('pageSize', params.pageSize, {});
        rb.query('filter', params.filter, {});
        rb.query('sortKey', params.sortKey, {});
        rb.query('sortValue', params.sortValue, {});
        rb.query('search_field', params.search_field, {});
        rb.query('search_keyword', params.search_keyword, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
userGroupControllerFindAll.PATH = '/auth/user_group/user_group';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function userGroupControllerFindOne(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, userGroupControllerFindOne.PATH, 'get');
    if (params) {
        rb.path('id', params.id, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
userGroupControllerFindOne.PATH = '/auth/user_group/user_group/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function userGroupControllerRemove(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, userGroupControllerRemove.PATH, 'delete');
    if (params) {
        rb.path('id', params.id, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
userGroupControllerRemove.PATH = '/auth/user_group/user_group/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function userGroupControllerUpdate(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, userGroupControllerUpdate.PATH, 'put');
    if (params) {
        rb.path('id', params.id, {});
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
userGroupControllerUpdate.PATH = '/auth/user_group/user_group/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
class UserGroupService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `userGroupControllerFindAll()` */
    static { this.UserGroupControllerFindAllPath = '/auth/user_group/user_group'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `userGroupControllerFindAll()` instead.
     *
     * This method doesn't expect any request body.
     */
    userGroupControllerFindAll$Response(params, context) {
        return userGroupControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `userGroupControllerFindAll$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    userGroupControllerFindAll(params, context) {
        return this.userGroupControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `userGroupControllerCreate()` */
    static { this.UserGroupControllerCreatePath = '/auth/user_group/user_group'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `userGroupControllerCreate()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    userGroupControllerCreate$Response(params, context) {
        return userGroupControllerCreate(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `userGroupControllerCreate$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    userGroupControllerCreate(params, context) {
        return this.userGroupControllerCreate$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `userGroupControllerFindOne()` */
    static { this.UserGroupControllerFindOnePath = '/auth/user_group/user_group/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `userGroupControllerFindOne()` instead.
     *
     * This method doesn't expect any request body.
     */
    userGroupControllerFindOne$Response(params, context) {
        return userGroupControllerFindOne(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `userGroupControllerFindOne$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    userGroupControllerFindOne(params, context) {
        return this.userGroupControllerFindOne$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `userGroupControllerUpdate()` */
    static { this.UserGroupControllerUpdatePath = '/auth/user_group/user_group/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `userGroupControllerUpdate()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    userGroupControllerUpdate$Response(params, context) {
        return userGroupControllerUpdate(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `userGroupControllerUpdate$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    userGroupControllerUpdate(params, context) {
        return this.userGroupControllerUpdate$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `userGroupControllerRemove()` */
    static { this.UserGroupControllerRemovePath = '/auth/user_group/user_group/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `userGroupControllerRemove()` instead.
     *
     * This method doesn't expect any request body.
     */
    userGroupControllerRemove$Response(params, context) {
        return userGroupControllerRemove(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `userGroupControllerRemove$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    userGroupControllerRemove(params, context) {
        return this.userGroupControllerRemove$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: UserGroupService, deps: [{ token: ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: UserGroupService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: UserGroupService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: ApiConfiguration }, { type: i2.HttpClient }] });

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function workflowAggregatorControllerCreate(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, workflowAggregatorControllerCreate.PATH, 'post');
    if (params) {
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
workflowAggregatorControllerCreate.PATH = '/auth/workflow_aggregator/workflow_aggregator';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function workflowAggregatorControllerFindAll(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, workflowAggregatorControllerFindAll.PATH, 'get');
    if (params) {
        rb.query('pageIndex', params.pageIndex, {});
        rb.query('pageSize', params.pageSize, {});
        rb.query('filter', params.filter, {});
        rb.query('sortKey', params.sortKey, {});
        rb.query('sortValue', params.sortValue, {});
        rb.query('search_field', params.search_field, {});
        rb.query('search_keyword', params.search_keyword, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
workflowAggregatorControllerFindAll.PATH = '/auth/workflow_aggregator/workflow_aggregator';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function workflowAggregatorControllerFindOne(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, workflowAggregatorControllerFindOne.PATH, 'get');
    if (params) {
        rb.path('id', params.id, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
workflowAggregatorControllerFindOne.PATH = '/auth/workflow_aggregator/workflow_aggregator/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function workflowAggregatorControllerRemove(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, workflowAggregatorControllerRemove.PATH, 'delete');
    if (params) {
        rb.path('id', params.id, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
workflowAggregatorControllerRemove.PATH = '/auth/workflow_aggregator/workflow_aggregator/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function workflowAggregatorControllerUpdate(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, workflowAggregatorControllerUpdate.PATH, 'put');
    if (params) {
        rb.path('id', params.id, {});
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
workflowAggregatorControllerUpdate.PATH = '/auth/workflow_aggregator/workflow_aggregator/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
class WorkflowAggregatorService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `workflowAggregatorControllerFindAll()` */
    static { this.WorkflowAggregatorControllerFindAllPath = '/auth/workflow_aggregator/workflow_aggregator'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `workflowAggregatorControllerFindAll()` instead.
     *
     * This method doesn't expect any request body.
     */
    workflowAggregatorControllerFindAll$Response(params, context) {
        return workflowAggregatorControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `workflowAggregatorControllerFindAll$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    workflowAggregatorControllerFindAll(params, context) {
        return this.workflowAggregatorControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `workflowAggregatorControllerCreate()` */
    static { this.WorkflowAggregatorControllerCreatePath = '/auth/workflow_aggregator/workflow_aggregator'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `workflowAggregatorControllerCreate()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    workflowAggregatorControllerCreate$Response(params, context) {
        return workflowAggregatorControllerCreate(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `workflowAggregatorControllerCreate$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    workflowAggregatorControllerCreate(params, context) {
        return this.workflowAggregatorControllerCreate$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `workflowAggregatorControllerFindOne()` */
    static { this.WorkflowAggregatorControllerFindOnePath = '/auth/workflow_aggregator/workflow_aggregator/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `workflowAggregatorControllerFindOne()` instead.
     *
     * This method doesn't expect any request body.
     */
    workflowAggregatorControllerFindOne$Response(params, context) {
        return workflowAggregatorControllerFindOne(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `workflowAggregatorControllerFindOne$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    workflowAggregatorControllerFindOne(params, context) {
        return this.workflowAggregatorControllerFindOne$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `workflowAggregatorControllerUpdate()` */
    static { this.WorkflowAggregatorControllerUpdatePath = '/auth/workflow_aggregator/workflow_aggregator/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `workflowAggregatorControllerUpdate()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    workflowAggregatorControllerUpdate$Response(params, context) {
        return workflowAggregatorControllerUpdate(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `workflowAggregatorControllerUpdate$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    workflowAggregatorControllerUpdate(params, context) {
        return this.workflowAggregatorControllerUpdate$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `workflowAggregatorControllerRemove()` */
    static { this.WorkflowAggregatorControllerRemovePath = '/auth/workflow_aggregator/workflow_aggregator/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `workflowAggregatorControllerRemove()` instead.
     *
     * This method doesn't expect any request body.
     */
    workflowAggregatorControllerRemove$Response(params, context) {
        return workflowAggregatorControllerRemove(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `workflowAggregatorControllerRemove$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    workflowAggregatorControllerRemove(params, context) {
        return this.workflowAggregatorControllerRemove$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: WorkflowAggregatorService, deps: [{ token: ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: WorkflowAggregatorService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: WorkflowAggregatorService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: ApiConfiguration }, { type: i2.HttpClient }] });

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function moduleControllerCreate(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, moduleControllerCreate.PATH, 'post');
    if (params) {
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
moduleControllerCreate.PATH = '/auth/module/module';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function moduleControllerFindAll(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, moduleControllerFindAll.PATH, 'get');
    if (params) {
        rb.query('pageIndex', params.pageIndex, {});
        rb.query('pageSize', params.pageSize, {});
        rb.query('filter', params.filter, {});
        rb.query('sortKey', params.sortKey, {});
        rb.query('sortValue', params.sortValue, {});
        rb.query('search_field', params.search_field, {});
        rb.query('search_keyword', params.search_keyword, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
moduleControllerFindAll.PATH = '/auth/module/module';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function moduleControllerFindOne(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, moduleControllerFindOne.PATH, 'get');
    if (params) {
        rb.path('id', params.id, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
moduleControllerFindOne.PATH = '/auth/module/module/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function moduleControllerRemove(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, moduleControllerRemove.PATH, 'delete');
    if (params) {
        rb.path('id', params.id, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
moduleControllerRemove.PATH = '/auth/module/module/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function moduleControllerUpdate(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, moduleControllerUpdate.PATH, 'put');
    if (params) {
        rb.path('id', params.id, {});
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
moduleControllerUpdate.PATH = '/auth/module/module/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
class ModuleService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `moduleControllerFindAll()` */
    static { this.ModuleControllerFindAllPath = '/auth/module/module'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `moduleControllerFindAll()` instead.
     *
     * This method doesn't expect any request body.
     */
    moduleControllerFindAll$Response(params, context) {
        return moduleControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `moduleControllerFindAll$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    moduleControllerFindAll(params, context) {
        return this.moduleControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `moduleControllerCreate()` */
    static { this.ModuleControllerCreatePath = '/auth/module/module'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `moduleControllerCreate()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    moduleControllerCreate$Response(params, context) {
        return moduleControllerCreate(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `moduleControllerCreate$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    moduleControllerCreate(params, context) {
        return this.moduleControllerCreate$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `moduleControllerFindOne()` */
    static { this.ModuleControllerFindOnePath = '/auth/module/module/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `moduleControllerFindOne()` instead.
     *
     * This method doesn't expect any request body.
     */
    moduleControllerFindOne$Response(params, context) {
        return moduleControllerFindOne(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `moduleControllerFindOne$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    moduleControllerFindOne(params, context) {
        return this.moduleControllerFindOne$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `moduleControllerUpdate()` */
    static { this.ModuleControllerUpdatePath = '/auth/module/module/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `moduleControllerUpdate()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    moduleControllerUpdate$Response(params, context) {
        return moduleControllerUpdate(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `moduleControllerUpdate$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    moduleControllerUpdate(params, context) {
        return this.moduleControllerUpdate$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `moduleControllerRemove()` */
    static { this.ModuleControllerRemovePath = '/auth/module/module/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `moduleControllerRemove()` instead.
     *
     * This method doesn't expect any request body.
     */
    moduleControllerRemove$Response(params, context) {
        return moduleControllerRemove(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `moduleControllerRemove$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    moduleControllerRemove(params, context) {
        return this.moduleControllerRemove$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: ModuleService, deps: [{ token: ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: ModuleService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: ModuleService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: ApiConfiguration }, { type: i2.HttpClient }] });

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function customFieldGroupControllerCreate(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, customFieldGroupControllerCreate.PATH, 'post');
    if (params) {
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
customFieldGroupControllerCreate.PATH = '/auth/custom_field_group/custom_field_group';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function customFieldGroupControllerFindAll(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, customFieldGroupControllerFindAll.PATH, 'get');
    if (params) {
        rb.query('pageIndex', params.pageIndex, {});
        rb.query('pageSize', params.pageSize, {});
        rb.query('filter', params.filter, {});
        rb.query('sortKey', params.sortKey, {});
        rb.query('sortValue', params.sortValue, {});
        rb.query('search_field', params.search_field, {});
        rb.query('search_keyword', params.search_keyword, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
customFieldGroupControllerFindAll.PATH = '/auth/custom_field_group/custom_field_group';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function customFieldGroupControllerFindOne(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, customFieldGroupControllerFindOne.PATH, 'get');
    if (params) {
        rb.path('id', params.id, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
customFieldGroupControllerFindOne.PATH = '/auth/custom_field_group/custom_field_group/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function customFieldGroupControllerRemove(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, customFieldGroupControllerRemove.PATH, 'delete');
    if (params) {
        rb.path('id', params.id, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
customFieldGroupControllerRemove.PATH = '/auth/custom_field_group/custom_field_group/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function customFieldGroupControllerUpdate(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, customFieldGroupControllerUpdate.PATH, 'put');
    if (params) {
        rb.path('id', params.id, {});
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
customFieldGroupControllerUpdate.PATH = '/auth/custom_field_group/custom_field_group/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
class CustomFieldGroupService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `customFieldGroupControllerFindAll()` */
    static { this.CustomFieldGroupControllerFindAllPath = '/auth/custom_field_group/custom_field_group'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `customFieldGroupControllerFindAll()` instead.
     *
     * This method doesn't expect any request body.
     */
    customFieldGroupControllerFindAll$Response(params, context) {
        return customFieldGroupControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `customFieldGroupControllerFindAll$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    customFieldGroupControllerFindAll(params, context) {
        return this.customFieldGroupControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `customFieldGroupControllerCreate()` */
    static { this.CustomFieldGroupControllerCreatePath = '/auth/custom_field_group/custom_field_group'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `customFieldGroupControllerCreate()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    customFieldGroupControllerCreate$Response(params, context) {
        return customFieldGroupControllerCreate(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `customFieldGroupControllerCreate$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    customFieldGroupControllerCreate(params, context) {
        return this.customFieldGroupControllerCreate$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `customFieldGroupControllerFindOne()` */
    static { this.CustomFieldGroupControllerFindOnePath = '/auth/custom_field_group/custom_field_group/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `customFieldGroupControllerFindOne()` instead.
     *
     * This method doesn't expect any request body.
     */
    customFieldGroupControllerFindOne$Response(params, context) {
        return customFieldGroupControllerFindOne(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `customFieldGroupControllerFindOne$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    customFieldGroupControllerFindOne(params, context) {
        return this.customFieldGroupControllerFindOne$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `customFieldGroupControllerUpdate()` */
    static { this.CustomFieldGroupControllerUpdatePath = '/auth/custom_field_group/custom_field_group/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `customFieldGroupControllerUpdate()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    customFieldGroupControllerUpdate$Response(params, context) {
        return customFieldGroupControllerUpdate(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `customFieldGroupControllerUpdate$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    customFieldGroupControllerUpdate(params, context) {
        return this.customFieldGroupControllerUpdate$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `customFieldGroupControllerRemove()` */
    static { this.CustomFieldGroupControllerRemovePath = '/auth/custom_field_group/custom_field_group/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `customFieldGroupControllerRemove()` instead.
     *
     * This method doesn't expect any request body.
     */
    customFieldGroupControllerRemove$Response(params, context) {
        return customFieldGroupControllerRemove(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `customFieldGroupControllerRemove$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    customFieldGroupControllerRemove(params, context) {
        return this.customFieldGroupControllerRemove$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: CustomFieldGroupService, deps: [{ token: ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: CustomFieldGroupService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: CustomFieldGroupService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: ApiConfiguration }, { type: i2.HttpClient }] });

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function customFieldGroupReportControllerFindAll(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, customFieldGroupReportControllerFindAll.PATH, 'post');
    if (params) {
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
customFieldGroupReportControllerFindAll.PATH = '/auth/custom_field_group/custom_field_group_report/list';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function customFieldGroupReportControllerFindOne(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, customFieldGroupReportControllerFindOne.PATH, 'get');
    if (params) {
        rb.path('id', params.id, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
customFieldGroupReportControllerFindOne.PATH = '/auth/custom_field_group/custom_field_group_report/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
class CustomFieldGroupReportService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `customFieldGroupReportControllerFindAll()` */
    static { this.CustomFieldGroupReportControllerFindAllPath = '/auth/custom_field_group/custom_field_group_report/list'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `customFieldGroupReportControllerFindAll()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    customFieldGroupReportControllerFindAll$Response(params, context) {
        return customFieldGroupReportControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `customFieldGroupReportControllerFindAll$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    customFieldGroupReportControllerFindAll(params, context) {
        return this.customFieldGroupReportControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `customFieldGroupReportControllerFindOne()` */
    static { this.CustomFieldGroupReportControllerFindOnePath = '/auth/custom_field_group/custom_field_group_report/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `customFieldGroupReportControllerFindOne()` instead.
     *
     * This method doesn't expect any request body.
     */
    customFieldGroupReportControllerFindOne$Response(params, context) {
        return customFieldGroupReportControllerFindOne(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `customFieldGroupReportControllerFindOne$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    customFieldGroupReportControllerFindOne(params, context) {
        return this.customFieldGroupReportControllerFindOne$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: CustomFieldGroupReportService, deps: [{ token: ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: CustomFieldGroupReportService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: CustomFieldGroupReportService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: ApiConfiguration }, { type: i2.HttpClient }] });

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function customFieldGroupWidgetControllerFindAll(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, customFieldGroupWidgetControllerFindAll.PATH, 'post');
    if (params) {
        rb.query('filter', params.filter, {});
        rb.query('joinWhere', params.joinWhere, {});
        rb.query('select', params.select, {});
        rb.query('groupBy', params.groupBy, {});
        rb.query('sortKey', params.sortKey, {});
        rb.query('sortValue', params.sortValue, {});
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
customFieldGroupWidgetControllerFindAll.PATH = '/auth/custom_field_group/custom_field_group_widget';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
class CustomFieldGroupWidgetService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `customFieldGroupWidgetControllerFindAll()` */
    static { this.CustomFieldGroupWidgetControllerFindAllPath = '/auth/custom_field_group/custom_field_group_widget'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `customFieldGroupWidgetControllerFindAll()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    customFieldGroupWidgetControllerFindAll$Response(params, context) {
        return customFieldGroupWidgetControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `customFieldGroupWidgetControllerFindAll$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    customFieldGroupWidgetControllerFindAll(params, context) {
        return this.customFieldGroupWidgetControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: CustomFieldGroupWidgetService, deps: [{ token: ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: CustomFieldGroupWidgetService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: CustomFieldGroupWidgetService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: ApiConfiguration }, { type: i2.HttpClient }] });

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function customFieldControllerCreate(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, customFieldControllerCreate.PATH, 'post');
    if (params) {
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
customFieldControllerCreate.PATH = '/auth/custom_field/custom_field';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function customFieldControllerFindAll(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, customFieldControllerFindAll.PATH, 'get');
    if (params) {
        rb.query('pageIndex', params.pageIndex, {});
        rb.query('pageSize', params.pageSize, {});
        rb.query('filter', params.filter, {});
        rb.query('sortKey', params.sortKey, {});
        rb.query('sortValue', params.sortValue, {});
        rb.query('search_field', params.search_field, {});
        rb.query('search_keyword', params.search_keyword, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
customFieldControllerFindAll.PATH = '/auth/custom_field/custom_field';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function customFieldControllerFindOne(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, customFieldControllerFindOne.PATH, 'get');
    if (params) {
        rb.path('id', params.id, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
customFieldControllerFindOne.PATH = '/auth/custom_field/custom_field/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function customFieldControllerRemove(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, customFieldControllerRemove.PATH, 'delete');
    if (params) {
        rb.path('id', params.id, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
customFieldControllerRemove.PATH = '/auth/custom_field/custom_field/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function customFieldControllerUpdate(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, customFieldControllerUpdate.PATH, 'put');
    if (params) {
        rb.path('id', params.id, {});
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
customFieldControllerUpdate.PATH = '/auth/custom_field/custom_field/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
class CustomFieldService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `customFieldControllerFindAll()` */
    static { this.CustomFieldControllerFindAllPath = '/auth/custom_field/custom_field'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `customFieldControllerFindAll()` instead.
     *
     * This method doesn't expect any request body.
     */
    customFieldControllerFindAll$Response(params, context) {
        return customFieldControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `customFieldControllerFindAll$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    customFieldControllerFindAll(params, context) {
        return this.customFieldControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `customFieldControllerCreate()` */
    static { this.CustomFieldControllerCreatePath = '/auth/custom_field/custom_field'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `customFieldControllerCreate()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    customFieldControllerCreate$Response(params, context) {
        return customFieldControllerCreate(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `customFieldControllerCreate$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    customFieldControllerCreate(params, context) {
        return this.customFieldControllerCreate$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `customFieldControllerFindOne()` */
    static { this.CustomFieldControllerFindOnePath = '/auth/custom_field/custom_field/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `customFieldControllerFindOne()` instead.
     *
     * This method doesn't expect any request body.
     */
    customFieldControllerFindOne$Response(params, context) {
        return customFieldControllerFindOne(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `customFieldControllerFindOne$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    customFieldControllerFindOne(params, context) {
        return this.customFieldControllerFindOne$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `customFieldControllerUpdate()` */
    static { this.CustomFieldControllerUpdatePath = '/auth/custom_field/custom_field/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `customFieldControllerUpdate()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    customFieldControllerUpdate$Response(params, context) {
        return customFieldControllerUpdate(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `customFieldControllerUpdate$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    customFieldControllerUpdate(params, context) {
        return this.customFieldControllerUpdate$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `customFieldControllerRemove()` */
    static { this.CustomFieldControllerRemovePath = '/auth/custom_field/custom_field/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `customFieldControllerRemove()` instead.
     *
     * This method doesn't expect any request body.
     */
    customFieldControllerRemove$Response(params, context) {
        return customFieldControllerRemove(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `customFieldControllerRemove$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    customFieldControllerRemove(params, context) {
        return this.customFieldControllerRemove$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: CustomFieldService, deps: [{ token: ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: CustomFieldService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: CustomFieldService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: ApiConfiguration }, { type: i2.HttpClient }] });

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function customFieldValueControllerCreate(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, customFieldValueControllerCreate.PATH, 'post');
    if (params) {
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
customFieldValueControllerCreate.PATH = '/auth/custom_field_value/custom_field_value';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function customFieldValueControllerFindAll(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, customFieldValueControllerFindAll.PATH, 'get');
    if (params) {
        rb.query('pageIndex', params.pageIndex, {});
        rb.query('pageSize', params.pageSize, {});
        rb.query('filter', params.filter, {});
        rb.query('sortKey', params.sortKey, {});
        rb.query('sortValue', params.sortValue, {});
        rb.query('search_field', params.search_field, {});
        rb.query('search_keyword', params.search_keyword, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
customFieldValueControllerFindAll.PATH = '/auth/custom_field_value/custom_field_value';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function customFieldValueControllerFindOne(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, customFieldValueControllerFindOne.PATH, 'get');
    if (params) {
        rb.path('id', params.id, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
customFieldValueControllerFindOne.PATH = '/auth/custom_field_value/custom_field_value/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function customFieldValueControllerRemove(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, customFieldValueControllerRemove.PATH, 'delete');
    if (params) {
        rb.path('id', params.id, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
customFieldValueControllerRemove.PATH = '/auth/custom_field_value/custom_field_value/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function customFieldValueControllerUpdate(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, customFieldValueControllerUpdate.PATH, 'put');
    if (params) {
        rb.path('id', params.id, {});
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
customFieldValueControllerUpdate.PATH = '/auth/custom_field_value/custom_field_value/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
class CustomFieldValueService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `customFieldValueControllerFindAll()` */
    static { this.CustomFieldValueControllerFindAllPath = '/auth/custom_field_value/custom_field_value'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `customFieldValueControllerFindAll()` instead.
     *
     * This method doesn't expect any request body.
     */
    customFieldValueControllerFindAll$Response(params, context) {
        return customFieldValueControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `customFieldValueControllerFindAll$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    customFieldValueControllerFindAll(params, context) {
        return this.customFieldValueControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `customFieldValueControllerCreate()` */
    static { this.CustomFieldValueControllerCreatePath = '/auth/custom_field_value/custom_field_value'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `customFieldValueControllerCreate()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    customFieldValueControllerCreate$Response(params, context) {
        return customFieldValueControllerCreate(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `customFieldValueControllerCreate$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    customFieldValueControllerCreate(params, context) {
        return this.customFieldValueControllerCreate$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `customFieldValueControllerFindOne()` */
    static { this.CustomFieldValueControllerFindOnePath = '/auth/custom_field_value/custom_field_value/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `customFieldValueControllerFindOne()` instead.
     *
     * This method doesn't expect any request body.
     */
    customFieldValueControllerFindOne$Response(params, context) {
        return customFieldValueControllerFindOne(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `customFieldValueControllerFindOne$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    customFieldValueControllerFindOne(params, context) {
        return this.customFieldValueControllerFindOne$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `customFieldValueControllerUpdate()` */
    static { this.CustomFieldValueControllerUpdatePath = '/auth/custom_field_value/custom_field_value/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `customFieldValueControllerUpdate()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    customFieldValueControllerUpdate$Response(params, context) {
        return customFieldValueControllerUpdate(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `customFieldValueControllerUpdate$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    customFieldValueControllerUpdate(params, context) {
        return this.customFieldValueControllerUpdate$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `customFieldValueControllerRemove()` */
    static { this.CustomFieldValueControllerRemovePath = '/auth/custom_field_value/custom_field_value/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `customFieldValueControllerRemove()` instead.
     *
     * This method doesn't expect any request body.
     */
    customFieldValueControllerRemove$Response(params, context) {
        return customFieldValueControllerRemove(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `customFieldValueControllerRemove$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    customFieldValueControllerRemove(params, context) {
        return this.customFieldValueControllerRemove$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: CustomFieldValueService, deps: [{ token: ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: CustomFieldValueService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: CustomFieldValueService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: ApiConfiguration }, { type: i2.HttpClient }] });

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function customFieldValueReportControllerFindAll(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, customFieldValueReportControllerFindAll.PATH, 'post');
    if (params) {
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
customFieldValueReportControllerFindAll.PATH = '/auth/custom_field_value/custom_field_value_report/list';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function customFieldValueReportControllerFindOne(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, customFieldValueReportControllerFindOne.PATH, 'get');
    if (params) {
        rb.path('id', params.id, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
customFieldValueReportControllerFindOne.PATH = '/auth/custom_field_value/custom_field_value_report/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
class CustomFieldValueReportService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `customFieldValueReportControllerFindAll()` */
    static { this.CustomFieldValueReportControllerFindAllPath = '/auth/custom_field_value/custom_field_value_report/list'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `customFieldValueReportControllerFindAll()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    customFieldValueReportControllerFindAll$Response(params, context) {
        return customFieldValueReportControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `customFieldValueReportControllerFindAll$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    customFieldValueReportControllerFindAll(params, context) {
        return this.customFieldValueReportControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `customFieldValueReportControllerFindOne()` */
    static { this.CustomFieldValueReportControllerFindOnePath = '/auth/custom_field_value/custom_field_value_report/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `customFieldValueReportControllerFindOne()` instead.
     *
     * This method doesn't expect any request body.
     */
    customFieldValueReportControllerFindOne$Response(params, context) {
        return customFieldValueReportControllerFindOne(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `customFieldValueReportControllerFindOne$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    customFieldValueReportControllerFindOne(params, context) {
        return this.customFieldValueReportControllerFindOne$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: CustomFieldValueReportService, deps: [{ token: ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: CustomFieldValueReportService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: CustomFieldValueReportService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: ApiConfiguration }, { type: i2.HttpClient }] });

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function customFieldValueWidgetControllerFindAll(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, customFieldValueWidgetControllerFindAll.PATH, 'post');
    if (params) {
        rb.query('filter', params.filter, {});
        rb.query('joinWhere', params.joinWhere, {});
        rb.query('select', params.select, {});
        rb.query('groupBy', params.groupBy, {});
        rb.query('sortKey', params.sortKey, {});
        rb.query('sortValue', params.sortValue, {});
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
customFieldValueWidgetControllerFindAll.PATH = '/auth/custom_field_value/custom_field_value_widget';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
class CustomFieldValueWidgetService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `customFieldValueWidgetControllerFindAll()` */
    static { this.CustomFieldValueWidgetControllerFindAllPath = '/auth/custom_field_value/custom_field_value_widget'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `customFieldValueWidgetControllerFindAll()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    customFieldValueWidgetControllerFindAll$Response(params, context) {
        return customFieldValueWidgetControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `customFieldValueWidgetControllerFindAll$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    customFieldValueWidgetControllerFindAll(params, context) {
        return this.customFieldValueWidgetControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: CustomFieldValueWidgetService, deps: [{ token: ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: CustomFieldValueWidgetService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: CustomFieldValueWidgetService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: ApiConfiguration }, { type: i2.HttpClient }] });

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function documentNumberingControllerCreate(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, documentNumberingControllerCreate.PATH, 'post');
    if (params) {
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
documentNumberingControllerCreate.PATH = '/auth/document_numbering/document_numbering';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function documentNumberingControllerFindAll(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, documentNumberingControllerFindAll.PATH, 'get');
    if (params) {
        rb.query('pageIndex', params.pageIndex, {});
        rb.query('pageSize', params.pageSize, {});
        rb.query('filter', params.filter, {});
        rb.query('sortKey', params.sortKey, {});
        rb.query('sortValue', params.sortValue, {});
        rb.query('search_field', params.search_field, {});
        rb.query('search_keyword', params.search_keyword, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
documentNumberingControllerFindAll.PATH = '/auth/document_numbering/document_numbering';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function documentNumberingControllerFindOne(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, documentNumberingControllerFindOne.PATH, 'get');
    if (params) {
        rb.path('id', params.id, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
documentNumberingControllerFindOne.PATH = '/auth/document_numbering/document_numbering/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function documentNumberingControllerRemove(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, documentNumberingControllerRemove.PATH, 'delete');
    if (params) {
        rb.path('id', params.id, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
documentNumberingControllerRemove.PATH = '/auth/document_numbering/document_numbering/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function documentNumberingControllerUpdate(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, documentNumberingControllerUpdate.PATH, 'put');
    if (params) {
        rb.path('id', params.id, {});
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
documentNumberingControllerUpdate.PATH = '/auth/document_numbering/document_numbering/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
class DocumentNumberingService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `documentNumberingControllerFindAll()` */
    static { this.DocumentNumberingControllerFindAllPath = '/auth/document_numbering/document_numbering'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `documentNumberingControllerFindAll()` instead.
     *
     * This method doesn't expect any request body.
     */
    documentNumberingControllerFindAll$Response(params, context) {
        return documentNumberingControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `documentNumberingControllerFindAll$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    documentNumberingControllerFindAll(params, context) {
        return this.documentNumberingControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `documentNumberingControllerCreate()` */
    static { this.DocumentNumberingControllerCreatePath = '/auth/document_numbering/document_numbering'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `documentNumberingControllerCreate()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    documentNumberingControllerCreate$Response(params, context) {
        return documentNumberingControllerCreate(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `documentNumberingControllerCreate$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    documentNumberingControllerCreate(params, context) {
        return this.documentNumberingControllerCreate$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `documentNumberingControllerFindOne()` */
    static { this.DocumentNumberingControllerFindOnePath = '/auth/document_numbering/document_numbering/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `documentNumberingControllerFindOne()` instead.
     *
     * This method doesn't expect any request body.
     */
    documentNumberingControllerFindOne$Response(params, context) {
        return documentNumberingControllerFindOne(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `documentNumberingControllerFindOne$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    documentNumberingControllerFindOne(params, context) {
        return this.documentNumberingControllerFindOne$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `documentNumberingControllerUpdate()` */
    static { this.DocumentNumberingControllerUpdatePath = '/auth/document_numbering/document_numbering/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `documentNumberingControllerUpdate()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    documentNumberingControllerUpdate$Response(params, context) {
        return documentNumberingControllerUpdate(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `documentNumberingControllerUpdate$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    documentNumberingControllerUpdate(params, context) {
        return this.documentNumberingControllerUpdate$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `documentNumberingControllerRemove()` */
    static { this.DocumentNumberingControllerRemovePath = '/auth/document_numbering/document_numbering/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `documentNumberingControllerRemove()` instead.
     *
     * This method doesn't expect any request body.
     */
    documentNumberingControllerRemove$Response(params, context) {
        return documentNumberingControllerRemove(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `documentNumberingControllerRemove$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    documentNumberingControllerRemove(params, context) {
        return this.documentNumberingControllerRemove$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: DocumentNumberingService, deps: [{ token: ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: DocumentNumberingService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: DocumentNumberingService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: ApiConfiguration }, { type: i2.HttpClient }] });

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function documentNumberingCounterControllerCreate(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, documentNumberingCounterControllerCreate.PATH, 'post');
    if (params) {
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
documentNumberingCounterControllerCreate.PATH = '/auth/document_numbering_counter/document_numbering_counter';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function documentNumberingCounterControllerFindAll(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, documentNumberingCounterControllerFindAll.PATH, 'get');
    if (params) {
        rb.query('pageIndex', params.pageIndex, {});
        rb.query('pageSize', params.pageSize, {});
        rb.query('filter', params.filter, {});
        rb.query('sortKey', params.sortKey, {});
        rb.query('sortValue', params.sortValue, {});
        rb.query('search_field', params.search_field, {});
        rb.query('search_keyword', params.search_keyword, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
documentNumberingCounterControllerFindAll.PATH = '/auth/document_numbering_counter/document_numbering_counter';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function documentNumberingCounterControllerFindOne(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, documentNumberingCounterControllerFindOne.PATH, 'get');
    if (params) {
        rb.path('id', params.id, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
documentNumberingCounterControllerFindOne.PATH = '/auth/document_numbering_counter/document_numbering_counter/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function documentNumberingCounterControllerRemove(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, documentNumberingCounterControllerRemove.PATH, 'delete');
    if (params) {
        rb.path('id', params.id, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
documentNumberingCounterControllerRemove.PATH = '/auth/document_numbering_counter/document_numbering_counter/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function documentNumberingCounterControllerUpdate(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, documentNumberingCounterControllerUpdate.PATH, 'put');
    if (params) {
        rb.path('id', params.id, {});
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
documentNumberingCounterControllerUpdate.PATH = '/auth/document_numbering_counter/document_numbering_counter/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
class DocumentNumberingCounterService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `documentNumberingCounterControllerFindAll()` */
    static { this.DocumentNumberingCounterControllerFindAllPath = '/auth/document_numbering_counter/document_numbering_counter'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `documentNumberingCounterControllerFindAll()` instead.
     *
     * This method doesn't expect any request body.
     */
    documentNumberingCounterControllerFindAll$Response(params, context) {
        return documentNumberingCounterControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `documentNumberingCounterControllerFindAll$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    documentNumberingCounterControllerFindAll(params, context) {
        return this.documentNumberingCounterControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `documentNumberingCounterControllerCreate()` */
    static { this.DocumentNumberingCounterControllerCreatePath = '/auth/document_numbering_counter/document_numbering_counter'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `documentNumberingCounterControllerCreate()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    documentNumberingCounterControllerCreate$Response(params, context) {
        return documentNumberingCounterControllerCreate(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `documentNumberingCounterControllerCreate$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    documentNumberingCounterControllerCreate(params, context) {
        return this.documentNumberingCounterControllerCreate$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `documentNumberingCounterControllerFindOne()` */
    static { this.DocumentNumberingCounterControllerFindOnePath = '/auth/document_numbering_counter/document_numbering_counter/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `documentNumberingCounterControllerFindOne()` instead.
     *
     * This method doesn't expect any request body.
     */
    documentNumberingCounterControllerFindOne$Response(params, context) {
        return documentNumberingCounterControllerFindOne(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `documentNumberingCounterControllerFindOne$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    documentNumberingCounterControllerFindOne(params, context) {
        return this.documentNumberingCounterControllerFindOne$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `documentNumberingCounterControllerUpdate()` */
    static { this.DocumentNumberingCounterControllerUpdatePath = '/auth/document_numbering_counter/document_numbering_counter/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `documentNumberingCounterControllerUpdate()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    documentNumberingCounterControllerUpdate$Response(params, context) {
        return documentNumberingCounterControllerUpdate(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `documentNumberingCounterControllerUpdate$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    documentNumberingCounterControllerUpdate(params, context) {
        return this.documentNumberingCounterControllerUpdate$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `documentNumberingCounterControllerRemove()` */
    static { this.DocumentNumberingCounterControllerRemovePath = '/auth/document_numbering_counter/document_numbering_counter/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `documentNumberingCounterControllerRemove()` instead.
     *
     * This method doesn't expect any request body.
     */
    documentNumberingCounterControllerRemove$Response(params, context) {
        return documentNumberingCounterControllerRemove(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `documentNumberingCounterControllerRemove$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    documentNumberingCounterControllerRemove(params, context) {
        return this.documentNumberingCounterControllerRemove$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: DocumentNumberingCounterService, deps: [{ token: ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: DocumentNumberingCounterService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: DocumentNumberingCounterService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: ApiConfiguration }, { type: i2.HttpClient }] });

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function actypeControllerCreate(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, actypeControllerCreate.PATH, 'post');
    if (params) {
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
actypeControllerCreate.PATH = '/amims/actype/actype';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function actypeControllerFindAll(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, actypeControllerFindAll.PATH, 'get');
    if (params) {
        rb.query('pageIndex', params.pageIndex, {});
        rb.query('pageSize', params.pageSize, {});
        rb.query('filter', params.filter, {});
        rb.query('sortKey', params.sortKey, {});
        rb.query('sortValue', params.sortValue, {});
        rb.query('search_field', params.search_field, {});
        rb.query('search_keyword', params.search_keyword, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
actypeControllerFindAll.PATH = '/amims/actype/actype';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function actypeControllerFindOne(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, actypeControllerFindOne.PATH, 'get');
    if (params) {
        rb.path('id', params.id, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
actypeControllerFindOne.PATH = '/amims/actype/actype/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function actypeControllerRemove(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, actypeControllerRemove.PATH, 'delete');
    if (params) {
        rb.path('id', params.id, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
actypeControllerRemove.PATH = '/amims/actype/actype/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function actypeControllerUpdate(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, actypeControllerUpdate.PATH, 'put');
    if (params) {
        rb.path('id', params.id, {});
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
actypeControllerUpdate.PATH = '/amims/actype/actype/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
class ActypeService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `actypeControllerFindAll()` */
    static { this.ActypeControllerFindAllPath = '/amims/actype/actype'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `actypeControllerFindAll()` instead.
     *
     * This method doesn't expect any request body.
     */
    actypeControllerFindAll$Response(params, context) {
        return actypeControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `actypeControllerFindAll$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    actypeControllerFindAll(params, context) {
        return this.actypeControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `actypeControllerCreate()` */
    static { this.ActypeControllerCreatePath = '/amims/actype/actype'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `actypeControllerCreate()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    actypeControllerCreate$Response(params, context) {
        return actypeControllerCreate(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `actypeControllerCreate$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    actypeControllerCreate(params, context) {
        return this.actypeControllerCreate$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `actypeControllerFindOne()` */
    static { this.ActypeControllerFindOnePath = '/amims/actype/actype/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `actypeControllerFindOne()` instead.
     *
     * This method doesn't expect any request body.
     */
    actypeControllerFindOne$Response(params, context) {
        return actypeControllerFindOne(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `actypeControllerFindOne$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    actypeControllerFindOne(params, context) {
        return this.actypeControllerFindOne$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `actypeControllerUpdate()` */
    static { this.ActypeControllerUpdatePath = '/amims/actype/actype/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `actypeControllerUpdate()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    actypeControllerUpdate$Response(params, context) {
        return actypeControllerUpdate(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `actypeControllerUpdate$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    actypeControllerUpdate(params, context) {
        return this.actypeControllerUpdate$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `actypeControllerRemove()` */
    static { this.ActypeControllerRemovePath = '/amims/actype/actype/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `actypeControllerRemove()` instead.
     *
     * This method doesn't expect any request body.
     */
    actypeControllerRemove$Response(params, context) {
        return actypeControllerRemove(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `actypeControllerRemove$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    actypeControllerRemove(params, context) {
        return this.actypeControllerRemove$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: ActypeService, deps: [{ token: ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: ActypeService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: ActypeService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: ApiConfiguration }, { type: i2.HttpClient }] });

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function actypeReportControllerFindAll(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, actypeReportControllerFindAll.PATH, 'post');
    if (params) {
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
actypeReportControllerFindAll.PATH = '/amims/actype/actype_report/list';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function actypeReportControllerFindOne(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, actypeReportControllerFindOne.PATH, 'get');
    if (params) {
        rb.path('id', params.id, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
actypeReportControllerFindOne.PATH = '/amims/actype/actype_report/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
class ActypeReportService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `actypeReportControllerFindAll()` */
    static { this.ActypeReportControllerFindAllPath = '/amims/actype/actype_report/list'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `actypeReportControllerFindAll()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    actypeReportControllerFindAll$Response(params, context) {
        return actypeReportControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `actypeReportControllerFindAll$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    actypeReportControllerFindAll(params, context) {
        return this.actypeReportControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `actypeReportControllerFindOne()` */
    static { this.ActypeReportControllerFindOnePath = '/amims/actype/actype_report/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `actypeReportControllerFindOne()` instead.
     *
     * This method doesn't expect any request body.
     */
    actypeReportControllerFindOne$Response(params, context) {
        return actypeReportControllerFindOne(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `actypeReportControllerFindOne$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    actypeReportControllerFindOne(params, context) {
        return this.actypeReportControllerFindOne$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: ActypeReportService, deps: [{ token: ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: ActypeReportService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: ActypeReportService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: ApiConfiguration }, { type: i2.HttpClient }] });

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function actypeWidgetControllerFindAll(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, actypeWidgetControllerFindAll.PATH, 'post');
    if (params) {
        rb.query('filter', params.filter, {});
        rb.query('joinWhere', params.joinWhere, {});
        rb.query('select', params.select, {});
        rb.query('groupBy', params.groupBy, {});
        rb.query('sortKey', params.sortKey, {});
        rb.query('sortValue', params.sortValue, {});
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
actypeWidgetControllerFindAll.PATH = '/amims/actype/actype_widget';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
class ActypeWidgetService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `actypeWidgetControllerFindAll()` */
    static { this.ActypeWidgetControllerFindAllPath = '/amims/actype/actype_widget'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `actypeWidgetControllerFindAll()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    actypeWidgetControllerFindAll$Response(params, context) {
        return actypeWidgetControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `actypeWidgetControllerFindAll$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    actypeWidgetControllerFindAll(params, context) {
        return this.actypeWidgetControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: ActypeWidgetService, deps: [{ token: ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: ActypeWidgetService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: ActypeWidgetService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: ApiConfiguration }, { type: i2.HttpClient }] });

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function aircraftControllerCreate(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, aircraftControllerCreate.PATH, 'post');
    if (params) {
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
aircraftControllerCreate.PATH = '/amims/aircraft/aircraft';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function aircraftControllerFindAll(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, aircraftControllerFindAll.PATH, 'get');
    if (params) {
        rb.query('pageIndex', params.pageIndex, {});
        rb.query('pageSize', params.pageSize, {});
        rb.query('filter', params.filter, {});
        rb.query('sortKey', params.sortKey, {});
        rb.query('sortValue', params.sortValue, {});
        rb.query('search_field', params.search_field, {});
        rb.query('search_keyword', params.search_keyword, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
aircraftControllerFindAll.PATH = '/amims/aircraft/aircraft';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function aircraftControllerFindOne(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, aircraftControllerFindOne.PATH, 'get');
    if (params) {
        rb.path('id', params.id, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
aircraftControllerFindOne.PATH = '/amims/aircraft/aircraft/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function aircraftControllerRemove(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, aircraftControllerRemove.PATH, 'delete');
    if (params) {
        rb.path('id', params.id, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
aircraftControllerRemove.PATH = '/amims/aircraft/aircraft/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function aircraftControllerUpdate(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, aircraftControllerUpdate.PATH, 'put');
    if (params) {
        rb.path('id', params.id, {});
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
aircraftControllerUpdate.PATH = '/amims/aircraft/aircraft/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
class AircraftService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `aircraftControllerFindAll()` */
    static { this.AircraftControllerFindAllPath = '/amims/aircraft/aircraft'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `aircraftControllerFindAll()` instead.
     *
     * This method doesn't expect any request body.
     */
    aircraftControllerFindAll$Response(params, context) {
        return aircraftControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `aircraftControllerFindAll$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    aircraftControllerFindAll(params, context) {
        return this.aircraftControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `aircraftControllerCreate()` */
    static { this.AircraftControllerCreatePath = '/amims/aircraft/aircraft'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `aircraftControllerCreate()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    aircraftControllerCreate$Response(params, context) {
        return aircraftControllerCreate(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `aircraftControllerCreate$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    aircraftControllerCreate(params, context) {
        return this.aircraftControllerCreate$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `aircraftControllerFindOne()` */
    static { this.AircraftControllerFindOnePath = '/amims/aircraft/aircraft/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `aircraftControllerFindOne()` instead.
     *
     * This method doesn't expect any request body.
     */
    aircraftControllerFindOne$Response(params, context) {
        return aircraftControllerFindOne(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `aircraftControllerFindOne$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    aircraftControllerFindOne(params, context) {
        return this.aircraftControllerFindOne$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `aircraftControllerUpdate()` */
    static { this.AircraftControllerUpdatePath = '/amims/aircraft/aircraft/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `aircraftControllerUpdate()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    aircraftControllerUpdate$Response(params, context) {
        return aircraftControllerUpdate(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `aircraftControllerUpdate$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    aircraftControllerUpdate(params, context) {
        return this.aircraftControllerUpdate$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `aircraftControllerRemove()` */
    static { this.AircraftControllerRemovePath = '/amims/aircraft/aircraft/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `aircraftControllerRemove()` instead.
     *
     * This method doesn't expect any request body.
     */
    aircraftControllerRemove$Response(params, context) {
        return aircraftControllerRemove(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `aircraftControllerRemove$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    aircraftControllerRemove(params, context) {
        return this.aircraftControllerRemove$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: AircraftService, deps: [{ token: ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: AircraftService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: AircraftService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: ApiConfiguration }, { type: i2.HttpClient }] });

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function aircraftReportControllerFindAll(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, aircraftReportControllerFindAll.PATH, 'post');
    if (params) {
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
aircraftReportControllerFindAll.PATH = '/amims/aircraft/aircraft_report/list';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function aircraftReportControllerFindOne(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, aircraftReportControllerFindOne.PATH, 'get');
    if (params) {
        rb.path('id', params.id, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
aircraftReportControllerFindOne.PATH = '/amims/aircraft/aircraft_report/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
class AircraftReportService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `aircraftReportControllerFindAll()` */
    static { this.AircraftReportControllerFindAllPath = '/amims/aircraft/aircraft_report/list'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `aircraftReportControllerFindAll()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    aircraftReportControllerFindAll$Response(params, context) {
        return aircraftReportControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `aircraftReportControllerFindAll$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    aircraftReportControllerFindAll(params, context) {
        return this.aircraftReportControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `aircraftReportControllerFindOne()` */
    static { this.AircraftReportControllerFindOnePath = '/amims/aircraft/aircraft_report/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `aircraftReportControllerFindOne()` instead.
     *
     * This method doesn't expect any request body.
     */
    aircraftReportControllerFindOne$Response(params, context) {
        return aircraftReportControllerFindOne(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `aircraftReportControllerFindOne$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    aircraftReportControllerFindOne(params, context) {
        return this.aircraftReportControllerFindOne$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: AircraftReportService, deps: [{ token: ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: AircraftReportService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: AircraftReportService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: ApiConfiguration }, { type: i2.HttpClient }] });

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function aircraftWidgetControllerFindAll(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, aircraftWidgetControllerFindAll.PATH, 'post');
    if (params) {
        rb.query('filter', params.filter, {});
        rb.query('joinWhere', params.joinWhere, {});
        rb.query('select', params.select, {});
        rb.query('groupBy', params.groupBy, {});
        rb.query('sortKey', params.sortKey, {});
        rb.query('sortValue', params.sortValue, {});
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
aircraftWidgetControllerFindAll.PATH = '/amims/aircraft/aircraft_widget';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
class AircraftWidgetService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `aircraftWidgetControllerFindAll()` */
    static { this.AircraftWidgetControllerFindAllPath = '/amims/aircraft/aircraft_widget'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `aircraftWidgetControllerFindAll()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    aircraftWidgetControllerFindAll$Response(params, context) {
        return aircraftWidgetControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `aircraftWidgetControllerFindAll$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    aircraftWidgetControllerFindAll(params, context) {
        return this.aircraftWidgetControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: AircraftWidgetService, deps: [{ token: ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: AircraftWidgetService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: AircraftWidgetService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: ApiConfiguration }, { type: i2.HttpClient }] });

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function aircraftDetailControllerCreate(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, aircraftDetailControllerCreate.PATH, 'post');
    if (params) {
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
aircraftDetailControllerCreate.PATH = '/amims/aircraft_detail/aircraft_detail';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function aircraftDetailControllerFindAll(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, aircraftDetailControllerFindAll.PATH, 'get');
    if (params) {
        rb.query('pageIndex', params.pageIndex, {});
        rb.query('pageSize', params.pageSize, {});
        rb.query('filter', params.filter, {});
        rb.query('sortKey', params.sortKey, {});
        rb.query('sortValue', params.sortValue, {});
        rb.query('search_field', params.search_field, {});
        rb.query('search_keyword', params.search_keyword, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
aircraftDetailControllerFindAll.PATH = '/amims/aircraft_detail/aircraft_detail';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function aircraftDetailControllerFindOne(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, aircraftDetailControllerFindOne.PATH, 'get');
    if (params) {
        rb.path('id', params.id, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
aircraftDetailControllerFindOne.PATH = '/amims/aircraft_detail/aircraft_detail/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function aircraftDetailControllerRemove(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, aircraftDetailControllerRemove.PATH, 'delete');
    if (params) {
        rb.path('id', params.id, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
aircraftDetailControllerRemove.PATH = '/amims/aircraft_detail/aircraft_detail/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function aircraftDetailControllerUpdate(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, aircraftDetailControllerUpdate.PATH, 'put');
    if (params) {
        rb.path('id', params.id, {});
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
aircraftDetailControllerUpdate.PATH = '/amims/aircraft_detail/aircraft_detail/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
class AircraftDetailService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `aircraftDetailControllerFindAll()` */
    static { this.AircraftDetailControllerFindAllPath = '/amims/aircraft_detail/aircraft_detail'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `aircraftDetailControllerFindAll()` instead.
     *
     * This method doesn't expect any request body.
     */
    aircraftDetailControllerFindAll$Response(params, context) {
        return aircraftDetailControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `aircraftDetailControllerFindAll$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    aircraftDetailControllerFindAll(params, context) {
        return this.aircraftDetailControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `aircraftDetailControllerCreate()` */
    static { this.AircraftDetailControllerCreatePath = '/amims/aircraft_detail/aircraft_detail'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `aircraftDetailControllerCreate()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    aircraftDetailControllerCreate$Response(params, context) {
        return aircraftDetailControllerCreate(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `aircraftDetailControllerCreate$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    aircraftDetailControllerCreate(params, context) {
        return this.aircraftDetailControllerCreate$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `aircraftDetailControllerFindOne()` */
    static { this.AircraftDetailControllerFindOnePath = '/amims/aircraft_detail/aircraft_detail/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `aircraftDetailControllerFindOne()` instead.
     *
     * This method doesn't expect any request body.
     */
    aircraftDetailControllerFindOne$Response(params, context) {
        return aircraftDetailControllerFindOne(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `aircraftDetailControllerFindOne$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    aircraftDetailControllerFindOne(params, context) {
        return this.aircraftDetailControllerFindOne$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `aircraftDetailControllerUpdate()` */
    static { this.AircraftDetailControllerUpdatePath = '/amims/aircraft_detail/aircraft_detail/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `aircraftDetailControllerUpdate()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    aircraftDetailControllerUpdate$Response(params, context) {
        return aircraftDetailControllerUpdate(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `aircraftDetailControllerUpdate$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    aircraftDetailControllerUpdate(params, context) {
        return this.aircraftDetailControllerUpdate$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `aircraftDetailControllerRemove()` */
    static { this.AircraftDetailControllerRemovePath = '/amims/aircraft_detail/aircraft_detail/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `aircraftDetailControllerRemove()` instead.
     *
     * This method doesn't expect any request body.
     */
    aircraftDetailControllerRemove$Response(params, context) {
        return aircraftDetailControllerRemove(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `aircraftDetailControllerRemove$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    aircraftDetailControllerRemove(params, context) {
        return this.aircraftDetailControllerRemove$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: AircraftDetailService, deps: [{ token: ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: AircraftDetailService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: AircraftDetailService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: ApiConfiguration }, { type: i2.HttpClient }] });

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function aircraftDetailReportControllerFindAll(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, aircraftDetailReportControllerFindAll.PATH, 'post');
    if (params) {
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
aircraftDetailReportControllerFindAll.PATH = '/amims/aircraft_detail/aircraft_detail_report/list';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function aircraftDetailReportControllerFindOne(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, aircraftDetailReportControllerFindOne.PATH, 'get');
    if (params) {
        rb.path('id', params.id, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
aircraftDetailReportControllerFindOne.PATH = '/amims/aircraft_detail/aircraft_detail_report/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
class AircraftDetailReportService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `aircraftDetailReportControllerFindAll()` */
    static { this.AircraftDetailReportControllerFindAllPath = '/amims/aircraft_detail/aircraft_detail_report/list'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `aircraftDetailReportControllerFindAll()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    aircraftDetailReportControllerFindAll$Response(params, context) {
        return aircraftDetailReportControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `aircraftDetailReportControllerFindAll$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    aircraftDetailReportControllerFindAll(params, context) {
        return this.aircraftDetailReportControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `aircraftDetailReportControllerFindOne()` */
    static { this.AircraftDetailReportControllerFindOnePath = '/amims/aircraft_detail/aircraft_detail_report/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `aircraftDetailReportControllerFindOne()` instead.
     *
     * This method doesn't expect any request body.
     */
    aircraftDetailReportControllerFindOne$Response(params, context) {
        return aircraftDetailReportControllerFindOne(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `aircraftDetailReportControllerFindOne$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    aircraftDetailReportControllerFindOne(params, context) {
        return this.aircraftDetailReportControllerFindOne$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: AircraftDetailReportService, deps: [{ token: ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: AircraftDetailReportService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: AircraftDetailReportService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: ApiConfiguration }, { type: i2.HttpClient }] });

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function aircraftDetailWidgetControllerFindAll(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, aircraftDetailWidgetControllerFindAll.PATH, 'post');
    if (params) {
        rb.query('filter', params.filter, {});
        rb.query('joinWhere', params.joinWhere, {});
        rb.query('select', params.select, {});
        rb.query('groupBy', params.groupBy, {});
        rb.query('sortKey', params.sortKey, {});
        rb.query('sortValue', params.sortValue, {});
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
aircraftDetailWidgetControllerFindAll.PATH = '/amims/aircraft_detail/aircraft_detail_widget';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
class AircraftDetailWidgetService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `aircraftDetailWidgetControllerFindAll()` */
    static { this.AircraftDetailWidgetControllerFindAllPath = '/amims/aircraft_detail/aircraft_detail_widget'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `aircraftDetailWidgetControllerFindAll()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    aircraftDetailWidgetControllerFindAll$Response(params, context) {
        return aircraftDetailWidgetControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `aircraftDetailWidgetControllerFindAll$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    aircraftDetailWidgetControllerFindAll(params, context) {
        return this.aircraftDetailWidgetControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: AircraftDetailWidgetService, deps: [{ token: ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: AircraftDetailWidgetService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: AircraftDetailWidgetService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: ApiConfiguration }, { type: i2.HttpClient }] });

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function ataControllerCreate(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, ataControllerCreate.PATH, 'post');
    if (params) {
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
ataControllerCreate.PATH = '/amims/ata/ata';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function ataControllerFindAll(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, ataControllerFindAll.PATH, 'get');
    if (params) {
        rb.query('pageIndex', params.pageIndex, {});
        rb.query('pageSize', params.pageSize, {});
        rb.query('filter', params.filter, {});
        rb.query('sortKey', params.sortKey, {});
        rb.query('sortValue', params.sortValue, {});
        rb.query('search_field', params.search_field, {});
        rb.query('search_keyword', params.search_keyword, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
ataControllerFindAll.PATH = '/amims/ata/ata';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function ataControllerFindOne(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, ataControllerFindOne.PATH, 'get');
    if (params) {
        rb.path('id', params.id, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
ataControllerFindOne.PATH = '/amims/ata/ata/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function ataControllerRemove(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, ataControllerRemove.PATH, 'delete');
    if (params) {
        rb.path('id', params.id, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
ataControllerRemove.PATH = '/amims/ata/ata/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function ataControllerUpdate(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, ataControllerUpdate.PATH, 'put');
    if (params) {
        rb.path('id', params.id, {});
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
ataControllerUpdate.PATH = '/amims/ata/ata/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
class AtaService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `ataControllerFindAll()` */
    static { this.AtaControllerFindAllPath = '/amims/ata/ata'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `ataControllerFindAll()` instead.
     *
     * This method doesn't expect any request body.
     */
    ataControllerFindAll$Response(params, context) {
        return ataControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `ataControllerFindAll$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    ataControllerFindAll(params, context) {
        return this.ataControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `ataControllerCreate()` */
    static { this.AtaControllerCreatePath = '/amims/ata/ata'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `ataControllerCreate()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    ataControllerCreate$Response(params, context) {
        return ataControllerCreate(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `ataControllerCreate$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    ataControllerCreate(params, context) {
        return this.ataControllerCreate$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `ataControllerFindOne()` */
    static { this.AtaControllerFindOnePath = '/amims/ata/ata/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `ataControllerFindOne()` instead.
     *
     * This method doesn't expect any request body.
     */
    ataControllerFindOne$Response(params, context) {
        return ataControllerFindOne(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `ataControllerFindOne$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    ataControllerFindOne(params, context) {
        return this.ataControllerFindOne$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `ataControllerUpdate()` */
    static { this.AtaControllerUpdatePath = '/amims/ata/ata/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `ataControllerUpdate()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    ataControllerUpdate$Response(params, context) {
        return ataControllerUpdate(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `ataControllerUpdate$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    ataControllerUpdate(params, context) {
        return this.ataControllerUpdate$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `ataControllerRemove()` */
    static { this.AtaControllerRemovePath = '/amims/ata/ata/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `ataControllerRemove()` instead.
     *
     * This method doesn't expect any request body.
     */
    ataControllerRemove$Response(params, context) {
        return ataControllerRemove(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `ataControllerRemove$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    ataControllerRemove(params, context) {
        return this.ataControllerRemove$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: AtaService, deps: [{ token: ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: AtaService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: AtaService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: ApiConfiguration }, { type: i2.HttpClient }] });

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function binControllerCreate(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, binControllerCreate.PATH, 'post');
    if (params) {
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
binControllerCreate.PATH = '/amims/bin/bin';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function binControllerFindAll(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, binControllerFindAll.PATH, 'get');
    if (params) {
        rb.query('pageIndex', params.pageIndex, {});
        rb.query('pageSize', params.pageSize, {});
        rb.query('filter', params.filter, {});
        rb.query('sortKey', params.sortKey, {});
        rb.query('sortValue', params.sortValue, {});
        rb.query('search_field', params.search_field, {});
        rb.query('search_keyword', params.search_keyword, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
binControllerFindAll.PATH = '/amims/bin/bin';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function binControllerFindOne(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, binControllerFindOne.PATH, 'get');
    if (params) {
        rb.path('id', params.id, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
binControllerFindOne.PATH = '/amims/bin/bin/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function binControllerRemove(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, binControllerRemove.PATH, 'delete');
    if (params) {
        rb.path('id', params.id, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
binControllerRemove.PATH = '/amims/bin/bin/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function binControllerUpdate(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, binControllerUpdate.PATH, 'put');
    if (params) {
        rb.path('id', params.id, {});
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
binControllerUpdate.PATH = '/amims/bin/bin/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
class BinService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `binControllerFindAll()` */
    static { this.BinControllerFindAllPath = '/amims/bin/bin'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `binControllerFindAll()` instead.
     *
     * This method doesn't expect any request body.
     */
    binControllerFindAll$Response(params, context) {
        return binControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `binControllerFindAll$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    binControllerFindAll(params, context) {
        return this.binControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `binControllerCreate()` */
    static { this.BinControllerCreatePath = '/amims/bin/bin'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `binControllerCreate()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    binControllerCreate$Response(params, context) {
        return binControllerCreate(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `binControllerCreate$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    binControllerCreate(params, context) {
        return this.binControllerCreate$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `binControllerFindOne()` */
    static { this.BinControllerFindOnePath = '/amims/bin/bin/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `binControllerFindOne()` instead.
     *
     * This method doesn't expect any request body.
     */
    binControllerFindOne$Response(params, context) {
        return binControllerFindOne(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `binControllerFindOne$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    binControllerFindOne(params, context) {
        return this.binControllerFindOne$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `binControllerUpdate()` */
    static { this.BinControllerUpdatePath = '/amims/bin/bin/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `binControllerUpdate()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    binControllerUpdate$Response(params, context) {
        return binControllerUpdate(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `binControllerUpdate$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    binControllerUpdate(params, context) {
        return this.binControllerUpdate$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `binControllerRemove()` */
    static { this.BinControllerRemovePath = '/amims/bin/bin/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `binControllerRemove()` instead.
     *
     * This method doesn't expect any request body.
     */
    binControllerRemove$Response(params, context) {
        return binControllerRemove(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `binControllerRemove$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    binControllerRemove(params, context) {
        return this.binControllerRemove$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: BinService, deps: [{ token: ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: BinService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: BinService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: ApiConfiguration }, { type: i2.HttpClient }] });

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function binReportControllerFindAll(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, binReportControllerFindAll.PATH, 'post');
    if (params) {
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
binReportControllerFindAll.PATH = '/amims/bin/bin_report/list';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function binReportControllerFindOne(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, binReportControllerFindOne.PATH, 'get');
    if (params) {
        rb.path('id', params.id, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
binReportControllerFindOne.PATH = '/amims/bin/bin_report/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
class BinReportService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `binReportControllerFindAll()` */
    static { this.BinReportControllerFindAllPath = '/amims/bin/bin_report/list'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `binReportControllerFindAll()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    binReportControllerFindAll$Response(params, context) {
        return binReportControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `binReportControllerFindAll$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    binReportControllerFindAll(params, context) {
        return this.binReportControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `binReportControllerFindOne()` */
    static { this.BinReportControllerFindOnePath = '/amims/bin/bin_report/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `binReportControllerFindOne()` instead.
     *
     * This method doesn't expect any request body.
     */
    binReportControllerFindOne$Response(params, context) {
        return binReportControllerFindOne(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `binReportControllerFindOne$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    binReportControllerFindOne(params, context) {
        return this.binReportControllerFindOne$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: BinReportService, deps: [{ token: ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: BinReportService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: BinReportService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: ApiConfiguration }, { type: i2.HttpClient }] });

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function binWidgetControllerFindAll(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, binWidgetControllerFindAll.PATH, 'post');
    if (params) {
        rb.query('filter', params.filter, {});
        rb.query('joinWhere', params.joinWhere, {});
        rb.query('select', params.select, {});
        rb.query('groupBy', params.groupBy, {});
        rb.query('sortKey', params.sortKey, {});
        rb.query('sortValue', params.sortValue, {});
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
binWidgetControllerFindAll.PATH = '/amims/bin/bin_widget';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
class BinWidgetService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `binWidgetControllerFindAll()` */
    static { this.BinWidgetControllerFindAllPath = '/amims/bin/bin_widget'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `binWidgetControllerFindAll()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    binWidgetControllerFindAll$Response(params, context) {
        return binWidgetControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `binWidgetControllerFindAll$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    binWidgetControllerFindAll(params, context) {
        return this.binWidgetControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: BinWidgetService, deps: [{ token: ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: BinWidgetService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: BinWidgetService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: ApiConfiguration }, { type: i2.HttpClient }] });

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function companyControllerCreate(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, companyControllerCreate.PATH, 'post');
    if (params) {
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
companyControllerCreate.PATH = '/amims/company/company';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function companyControllerFindAll(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, companyControllerFindAll.PATH, 'get');
    if (params) {
        rb.query('pageIndex', params.pageIndex, {});
        rb.query('pageSize', params.pageSize, {});
        rb.query('filter', params.filter, {});
        rb.query('sortKey', params.sortKey, {});
        rb.query('sortValue', params.sortValue, {});
        rb.query('search_field', params.search_field, {});
        rb.query('search_keyword', params.search_keyword, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
companyControllerFindAll.PATH = '/amims/company/company';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function companyControllerFindOne(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, companyControllerFindOne.PATH, 'get');
    if (params) {
        rb.path('id', params.id, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
companyControllerFindOne.PATH = '/amims/company/company/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function companyControllerRemove(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, companyControllerRemove.PATH, 'delete');
    if (params) {
        rb.path('id', params.id, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
companyControllerRemove.PATH = '/amims/company/company/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function companyControllerUpdate(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, companyControllerUpdate.PATH, 'put');
    if (params) {
        rb.path('id', params.id, {});
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
companyControllerUpdate.PATH = '/amims/company/company/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
class CompanyService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `companyControllerFindAll()` */
    static { this.CompanyControllerFindAllPath = '/amims/company/company'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `companyControllerFindAll()` instead.
     *
     * This method doesn't expect any request body.
     */
    companyControllerFindAll$Response(params, context) {
        return companyControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `companyControllerFindAll$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    companyControllerFindAll(params, context) {
        return this.companyControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `companyControllerCreate()` */
    static { this.CompanyControllerCreatePath = '/amims/company/company'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `companyControllerCreate()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    companyControllerCreate$Response(params, context) {
        return companyControllerCreate(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `companyControllerCreate$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    companyControllerCreate(params, context) {
        return this.companyControllerCreate$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `companyControllerFindOne()` */
    static { this.CompanyControllerFindOnePath = '/amims/company/company/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `companyControllerFindOne()` instead.
     *
     * This method doesn't expect any request body.
     */
    companyControllerFindOne$Response(params, context) {
        return companyControllerFindOne(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `companyControllerFindOne$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    companyControllerFindOne(params, context) {
        return this.companyControllerFindOne$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `companyControllerUpdate()` */
    static { this.CompanyControllerUpdatePath = '/amims/company/company/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `companyControllerUpdate()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    companyControllerUpdate$Response(params, context) {
        return companyControllerUpdate(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `companyControllerUpdate$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    companyControllerUpdate(params, context) {
        return this.companyControllerUpdate$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `companyControllerRemove()` */
    static { this.CompanyControllerRemovePath = '/amims/company/company/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `companyControllerRemove()` instead.
     *
     * This method doesn't expect any request body.
     */
    companyControllerRemove$Response(params, context) {
        return companyControllerRemove(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `companyControllerRemove$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    companyControllerRemove(params, context) {
        return this.companyControllerRemove$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: CompanyService, deps: [{ token: ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: CompanyService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: CompanyService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: ApiConfiguration }, { type: i2.HttpClient }] });

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function conditionMonitoringControllerCreate(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, conditionMonitoringControllerCreate.PATH, 'post');
    if (params) {
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
conditionMonitoringControllerCreate.PATH = '/amims/condition_monitoring/condition_monitoring';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function conditionMonitoringControllerFindAll(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, conditionMonitoringControllerFindAll.PATH, 'get');
    if (params) {
        rb.query('pageIndex', params.pageIndex, {});
        rb.query('pageSize', params.pageSize, {});
        rb.query('filter', params.filter, {});
        rb.query('sortKey', params.sortKey, {});
        rb.query('sortValue', params.sortValue, {});
        rb.query('search_field', params.search_field, {});
        rb.query('search_keyword', params.search_keyword, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
conditionMonitoringControllerFindAll.PATH = '/amims/condition_monitoring/condition_monitoring';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function conditionMonitoringControllerFindOne(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, conditionMonitoringControllerFindOne.PATH, 'get');
    if (params) {
        rb.path('id', params.id, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
conditionMonitoringControllerFindOne.PATH = '/amims/condition_monitoring/condition_monitoring/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function conditionMonitoringControllerRemove(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, conditionMonitoringControllerRemove.PATH, 'delete');
    if (params) {
        rb.path('id', params.id, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
conditionMonitoringControllerRemove.PATH = '/amims/condition_monitoring/condition_monitoring/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function conditionMonitoringControllerUpdate(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, conditionMonitoringControllerUpdate.PATH, 'put');
    if (params) {
        rb.path('id', params.id, {});
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
conditionMonitoringControllerUpdate.PATH = '/amims/condition_monitoring/condition_monitoring/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
class ConditionMonitoringService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `conditionMonitoringControllerFindAll()` */
    static { this.ConditionMonitoringControllerFindAllPath = '/amims/condition_monitoring/condition_monitoring'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `conditionMonitoringControllerFindAll()` instead.
     *
     * This method doesn't expect any request body.
     */
    conditionMonitoringControllerFindAll$Response(params, context) {
        return conditionMonitoringControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `conditionMonitoringControllerFindAll$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    conditionMonitoringControllerFindAll(params, context) {
        return this.conditionMonitoringControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `conditionMonitoringControllerCreate()` */
    static { this.ConditionMonitoringControllerCreatePath = '/amims/condition_monitoring/condition_monitoring'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `conditionMonitoringControllerCreate()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    conditionMonitoringControllerCreate$Response(params, context) {
        return conditionMonitoringControllerCreate(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `conditionMonitoringControllerCreate$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    conditionMonitoringControllerCreate(params, context) {
        return this.conditionMonitoringControllerCreate$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `conditionMonitoringControllerFindOne()` */
    static { this.ConditionMonitoringControllerFindOnePath = '/amims/condition_monitoring/condition_monitoring/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `conditionMonitoringControllerFindOne()` instead.
     *
     * This method doesn't expect any request body.
     */
    conditionMonitoringControllerFindOne$Response(params, context) {
        return conditionMonitoringControllerFindOne(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `conditionMonitoringControllerFindOne$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    conditionMonitoringControllerFindOne(params, context) {
        return this.conditionMonitoringControllerFindOne$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `conditionMonitoringControllerUpdate()` */
    static { this.ConditionMonitoringControllerUpdatePath = '/amims/condition_monitoring/condition_monitoring/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `conditionMonitoringControllerUpdate()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    conditionMonitoringControllerUpdate$Response(params, context) {
        return conditionMonitoringControllerUpdate(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `conditionMonitoringControllerUpdate$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    conditionMonitoringControllerUpdate(params, context) {
        return this.conditionMonitoringControllerUpdate$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `conditionMonitoringControllerRemove()` */
    static { this.ConditionMonitoringControllerRemovePath = '/amims/condition_monitoring/condition_monitoring/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `conditionMonitoringControllerRemove()` instead.
     *
     * This method doesn't expect any request body.
     */
    conditionMonitoringControllerRemove$Response(params, context) {
        return conditionMonitoringControllerRemove(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `conditionMonitoringControllerRemove$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    conditionMonitoringControllerRemove(params, context) {
        return this.conditionMonitoringControllerRemove$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: ConditionMonitoringService, deps: [{ token: ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: ConditionMonitoringService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: ConditionMonitoringService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: ApiConfiguration }, { type: i2.HttpClient }] });

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function conditionMonitoringReportControllerFindAll(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, conditionMonitoringReportControllerFindAll.PATH, 'post');
    if (params) {
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
conditionMonitoringReportControllerFindAll.PATH = '/amims/condition_monitoring/condition_monitoring_report/list';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function conditionMonitoringReportControllerFindOne(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, conditionMonitoringReportControllerFindOne.PATH, 'get');
    if (params) {
        rb.path('id', params.id, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
conditionMonitoringReportControllerFindOne.PATH = '/amims/condition_monitoring/condition_monitoring_report/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
class ConditionMonitoringReportService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `conditionMonitoringReportControllerFindAll()` */
    static { this.ConditionMonitoringReportControllerFindAllPath = '/amims/condition_monitoring/condition_monitoring_report/list'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `conditionMonitoringReportControllerFindAll()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    conditionMonitoringReportControllerFindAll$Response(params, context) {
        return conditionMonitoringReportControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `conditionMonitoringReportControllerFindAll$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    conditionMonitoringReportControllerFindAll(params, context) {
        return this.conditionMonitoringReportControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `conditionMonitoringReportControllerFindOne()` */
    static { this.ConditionMonitoringReportControllerFindOnePath = '/amims/condition_monitoring/condition_monitoring_report/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `conditionMonitoringReportControllerFindOne()` instead.
     *
     * This method doesn't expect any request body.
     */
    conditionMonitoringReportControllerFindOne$Response(params, context) {
        return conditionMonitoringReportControllerFindOne(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `conditionMonitoringReportControllerFindOne$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    conditionMonitoringReportControllerFindOne(params, context) {
        return this.conditionMonitoringReportControllerFindOne$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: ConditionMonitoringReportService, deps: [{ token: ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: ConditionMonitoringReportService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: ConditionMonitoringReportService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: ApiConfiguration }, { type: i2.HttpClient }] });

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function conditionMonitoringWidgetControllerFindAll(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, conditionMonitoringWidgetControllerFindAll.PATH, 'post');
    if (params) {
        rb.query('filter', params.filter, {});
        rb.query('joinWhere', params.joinWhere, {});
        rb.query('select', params.select, {});
        rb.query('groupBy', params.groupBy, {});
        rb.query('sortKey', params.sortKey, {});
        rb.query('sortValue', params.sortValue, {});
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
conditionMonitoringWidgetControllerFindAll.PATH = '/amims/condition_monitoring/condition_monitoring_widget';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
class ConditionMonitoringWidgetService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `conditionMonitoringWidgetControllerFindAll()` */
    static { this.ConditionMonitoringWidgetControllerFindAllPath = '/amims/condition_monitoring/condition_monitoring_widget'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `conditionMonitoringWidgetControllerFindAll()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    conditionMonitoringWidgetControllerFindAll$Response(params, context) {
        return conditionMonitoringWidgetControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `conditionMonitoringWidgetControllerFindAll$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    conditionMonitoringWidgetControllerFindAll(params, context) {
        return this.conditionMonitoringWidgetControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: ConditionMonitoringWidgetService, deps: [{ token: ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: ConditionMonitoringWidgetService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: ConditionMonitoringWidgetService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: ApiConfiguration }, { type: i2.HttpClient }] });

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function currencyControllerCreate(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, currencyControllerCreate.PATH, 'post');
    if (params) {
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
currencyControllerCreate.PATH = '/amims/currency/currency';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function currencyControllerFindAll(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, currencyControllerFindAll.PATH, 'get');
    if (params) {
        rb.query('pageIndex', params.pageIndex, {});
        rb.query('pageSize', params.pageSize, {});
        rb.query('filter', params.filter, {});
        rb.query('sortKey', params.sortKey, {});
        rb.query('sortValue', params.sortValue, {});
        rb.query('search_field', params.search_field, {});
        rb.query('search_keyword', params.search_keyword, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
currencyControllerFindAll.PATH = '/amims/currency/currency';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function currencyControllerFindOne(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, currencyControllerFindOne.PATH, 'get');
    if (params) {
        rb.path('id', params.id, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
currencyControllerFindOne.PATH = '/amims/currency/currency/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function currencyControllerRemove(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, currencyControllerRemove.PATH, 'delete');
    if (params) {
        rb.path('id', params.id, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
currencyControllerRemove.PATH = '/amims/currency/currency/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function currencyControllerUpdate(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, currencyControllerUpdate.PATH, 'put');
    if (params) {
        rb.path('id', params.id, {});
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
currencyControllerUpdate.PATH = '/amims/currency/currency/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
class CurrencyService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `currencyControllerFindAll()` */
    static { this.CurrencyControllerFindAllPath = '/amims/currency/currency'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `currencyControllerFindAll()` instead.
     *
     * This method doesn't expect any request body.
     */
    currencyControllerFindAll$Response(params, context) {
        return currencyControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `currencyControllerFindAll$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    currencyControllerFindAll(params, context) {
        return this.currencyControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `currencyControllerCreate()` */
    static { this.CurrencyControllerCreatePath = '/amims/currency/currency'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `currencyControllerCreate()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    currencyControllerCreate$Response(params, context) {
        return currencyControllerCreate(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `currencyControllerCreate$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    currencyControllerCreate(params, context) {
        return this.currencyControllerCreate$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `currencyControllerFindOne()` */
    static { this.CurrencyControllerFindOnePath = '/amims/currency/currency/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `currencyControllerFindOne()` instead.
     *
     * This method doesn't expect any request body.
     */
    currencyControllerFindOne$Response(params, context) {
        return currencyControllerFindOne(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `currencyControllerFindOne$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    currencyControllerFindOne(params, context) {
        return this.currencyControllerFindOne$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `currencyControllerUpdate()` */
    static { this.CurrencyControllerUpdatePath = '/amims/currency/currency/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `currencyControllerUpdate()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    currencyControllerUpdate$Response(params, context) {
        return currencyControllerUpdate(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `currencyControllerUpdate$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    currencyControllerUpdate(params, context) {
        return this.currencyControllerUpdate$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `currencyControllerRemove()` */
    static { this.CurrencyControllerRemovePath = '/amims/currency/currency/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `currencyControllerRemove()` instead.
     *
     * This method doesn't expect any request body.
     */
    currencyControllerRemove$Response(params, context) {
        return currencyControllerRemove(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `currencyControllerRemove$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    currencyControllerRemove(params, context) {
        return this.currencyControllerRemove$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: CurrencyService, deps: [{ token: ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: CurrencyService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: CurrencyService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: ApiConfiguration }, { type: i2.HttpClient }] });

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function currencyReportControllerFindAll(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, currencyReportControllerFindAll.PATH, 'post');
    if (params) {
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
currencyReportControllerFindAll.PATH = '/amims/currency/currency_report/list';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function currencyReportControllerFindOne(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, currencyReportControllerFindOne.PATH, 'get');
    if (params) {
        rb.path('id', params.id, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
currencyReportControllerFindOne.PATH = '/amims/currency/currency_report/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
class CurrencyReportService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `currencyReportControllerFindAll()` */
    static { this.CurrencyReportControllerFindAllPath = '/amims/currency/currency_report/list'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `currencyReportControllerFindAll()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    currencyReportControllerFindAll$Response(params, context) {
        return currencyReportControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `currencyReportControllerFindAll$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    currencyReportControllerFindAll(params, context) {
        return this.currencyReportControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `currencyReportControllerFindOne()` */
    static { this.CurrencyReportControllerFindOnePath = '/amims/currency/currency_report/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `currencyReportControllerFindOne()` instead.
     *
     * This method doesn't expect any request body.
     */
    currencyReportControllerFindOne$Response(params, context) {
        return currencyReportControllerFindOne(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `currencyReportControllerFindOne$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    currencyReportControllerFindOne(params, context) {
        return this.currencyReportControllerFindOne$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: CurrencyReportService, deps: [{ token: ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: CurrencyReportService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: CurrencyReportService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: ApiConfiguration }, { type: i2.HttpClient }] });

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function currencyWidgetControllerFindAll(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, currencyWidgetControllerFindAll.PATH, 'post');
    if (params) {
        rb.query('filter', params.filter, {});
        rb.query('joinWhere', params.joinWhere, {});
        rb.query('select', params.select, {});
        rb.query('groupBy', params.groupBy, {});
        rb.query('sortKey', params.sortKey, {});
        rb.query('sortValue', params.sortValue, {});
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
currencyWidgetControllerFindAll.PATH = '/amims/currency/currency_widget';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
class CurrencyWidgetService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `currencyWidgetControllerFindAll()` */
    static { this.CurrencyWidgetControllerFindAllPath = '/amims/currency/currency_widget'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `currencyWidgetControllerFindAll()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    currencyWidgetControllerFindAll$Response(params, context) {
        return currencyWidgetControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `currencyWidgetControllerFindAll$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    currencyWidgetControllerFindAll(params, context) {
        return this.currencyWidgetControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: CurrencyWidgetService, deps: [{ token: ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: CurrencyWidgetService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: CurrencyWidgetService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: ApiConfiguration }, { type: i2.HttpClient }] });

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function doctypeControllerCreate(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, doctypeControllerCreate.PATH, 'post');
    if (params) {
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
doctypeControllerCreate.PATH = '/amims/doctype/doctype';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function doctypeControllerFindAll(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, doctypeControllerFindAll.PATH, 'get');
    if (params) {
        rb.query('pageIndex', params.pageIndex, {});
        rb.query('pageSize', params.pageSize, {});
        rb.query('filter', params.filter, {});
        rb.query('sortKey', params.sortKey, {});
        rb.query('sortValue', params.sortValue, {});
        rb.query('search_field', params.search_field, {});
        rb.query('search_keyword', params.search_keyword, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
doctypeControllerFindAll.PATH = '/amims/doctype/doctype';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function doctypeControllerFindOne(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, doctypeControllerFindOne.PATH, 'get');
    if (params) {
        rb.path('id', params.id, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
doctypeControllerFindOne.PATH = '/amims/doctype/doctype/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function doctypeControllerRemove(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, doctypeControllerRemove.PATH, 'delete');
    if (params) {
        rb.path('id', params.id, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
doctypeControllerRemove.PATH = '/amims/doctype/doctype/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function doctypeControllerUpdate(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, doctypeControllerUpdate.PATH, 'put');
    if (params) {
        rb.path('id', params.id, {});
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
doctypeControllerUpdate.PATH = '/amims/doctype/doctype/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
class DoctypeService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `doctypeControllerFindAll()` */
    static { this.DoctypeControllerFindAllPath = '/amims/doctype/doctype'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `doctypeControllerFindAll()` instead.
     *
     * This method doesn't expect any request body.
     */
    doctypeControllerFindAll$Response(params, context) {
        return doctypeControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `doctypeControllerFindAll$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    doctypeControllerFindAll(params, context) {
        return this.doctypeControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `doctypeControllerCreate()` */
    static { this.DoctypeControllerCreatePath = '/amims/doctype/doctype'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `doctypeControllerCreate()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    doctypeControllerCreate$Response(params, context) {
        return doctypeControllerCreate(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `doctypeControllerCreate$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    doctypeControllerCreate(params, context) {
        return this.doctypeControllerCreate$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `doctypeControllerFindOne()` */
    static { this.DoctypeControllerFindOnePath = '/amims/doctype/doctype/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `doctypeControllerFindOne()` instead.
     *
     * This method doesn't expect any request body.
     */
    doctypeControllerFindOne$Response(params, context) {
        return doctypeControllerFindOne(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `doctypeControllerFindOne$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    doctypeControllerFindOne(params, context) {
        return this.doctypeControllerFindOne$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `doctypeControllerUpdate()` */
    static { this.DoctypeControllerUpdatePath = '/amims/doctype/doctype/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `doctypeControllerUpdate()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    doctypeControllerUpdate$Response(params, context) {
        return doctypeControllerUpdate(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `doctypeControllerUpdate$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    doctypeControllerUpdate(params, context) {
        return this.doctypeControllerUpdate$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `doctypeControllerRemove()` */
    static { this.DoctypeControllerRemovePath = '/amims/doctype/doctype/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `doctypeControllerRemove()` instead.
     *
     * This method doesn't expect any request body.
     */
    doctypeControllerRemove$Response(params, context) {
        return doctypeControllerRemove(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `doctypeControllerRemove$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    doctypeControllerRemove(params, context) {
        return this.doctypeControllerRemove$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: DoctypeService, deps: [{ token: ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: DoctypeService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: DoctypeService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: ApiConfiguration }, { type: i2.HttpClient }] });

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function dueListOutputControllerCreate(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, dueListOutputControllerCreate.PATH, 'post');
    if (params) {
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
dueListOutputControllerCreate.PATH = '/amims/due_list_output/due_list_output';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function dueListOutputControllerFindAll(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, dueListOutputControllerFindAll.PATH, 'get');
    if (params) {
        rb.query('pageIndex', params.pageIndex, {});
        rb.query('pageSize', params.pageSize, {});
        rb.query('filter', params.filter, {});
        rb.query('sortKey', params.sortKey, {});
        rb.query('sortValue', params.sortValue, {});
        rb.query('search_field', params.search_field, {});
        rb.query('search_keyword', params.search_keyword, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
dueListOutputControllerFindAll.PATH = '/amims/due_list_output/due_list_output';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function dueListOutputControllerFindOne(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, dueListOutputControllerFindOne.PATH, 'get');
    if (params) {
        rb.path('id', params.id, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
dueListOutputControllerFindOne.PATH = '/amims/due_list_output/due_list_output/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function dueListOutputControllerRemove(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, dueListOutputControllerRemove.PATH, 'delete');
    if (params) {
        rb.path('id', params.id, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
dueListOutputControllerRemove.PATH = '/amims/due_list_output/due_list_output/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function dueListOutputControllerUpdate(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, dueListOutputControllerUpdate.PATH, 'put');
    if (params) {
        rb.path('id', params.id, {});
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
dueListOutputControllerUpdate.PATH = '/amims/due_list_output/due_list_output/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
class DueListOutputService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `dueListOutputControllerFindAll()` */
    static { this.DueListOutputControllerFindAllPath = '/amims/due_list_output/due_list_output'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `dueListOutputControllerFindAll()` instead.
     *
     * This method doesn't expect any request body.
     */
    dueListOutputControllerFindAll$Response(params, context) {
        return dueListOutputControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `dueListOutputControllerFindAll$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    dueListOutputControllerFindAll(params, context) {
        return this.dueListOutputControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `dueListOutputControllerCreate()` */
    static { this.DueListOutputControllerCreatePath = '/amims/due_list_output/due_list_output'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `dueListOutputControllerCreate()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    dueListOutputControllerCreate$Response(params, context) {
        return dueListOutputControllerCreate(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `dueListOutputControllerCreate$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    dueListOutputControllerCreate(params, context) {
        return this.dueListOutputControllerCreate$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `dueListOutputControllerFindOne()` */
    static { this.DueListOutputControllerFindOnePath = '/amims/due_list_output/due_list_output/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `dueListOutputControllerFindOne()` instead.
     *
     * This method doesn't expect any request body.
     */
    dueListOutputControllerFindOne$Response(params, context) {
        return dueListOutputControllerFindOne(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `dueListOutputControllerFindOne$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    dueListOutputControllerFindOne(params, context) {
        return this.dueListOutputControllerFindOne$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `dueListOutputControllerUpdate()` */
    static { this.DueListOutputControllerUpdatePath = '/amims/due_list_output/due_list_output/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `dueListOutputControllerUpdate()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    dueListOutputControllerUpdate$Response(params, context) {
        return dueListOutputControllerUpdate(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `dueListOutputControllerUpdate$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    dueListOutputControllerUpdate(params, context) {
        return this.dueListOutputControllerUpdate$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `dueListOutputControllerRemove()` */
    static { this.DueListOutputControllerRemovePath = '/amims/due_list_output/due_list_output/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `dueListOutputControllerRemove()` instead.
     *
     * This method doesn't expect any request body.
     */
    dueListOutputControllerRemove$Response(params, context) {
        return dueListOutputControllerRemove(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `dueListOutputControllerRemove$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    dueListOutputControllerRemove(params, context) {
        return this.dueListOutputControllerRemove$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: DueListOutputService, deps: [{ token: ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: DueListOutputService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: DueListOutputService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: ApiConfiguration }, { type: i2.HttpClient }] });

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function dueListOutputReportControllerFindAll(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, dueListOutputReportControllerFindAll.PATH, 'post');
    if (params) {
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
dueListOutputReportControllerFindAll.PATH = '/amims/due_list_output/due_list_output_report/list';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function dueListOutputReportControllerFindOne(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, dueListOutputReportControllerFindOne.PATH, 'get');
    if (params) {
        rb.path('id', params.id, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
dueListOutputReportControllerFindOne.PATH = '/amims/due_list_output/due_list_output_report/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
class DueListOutputReportService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `dueListOutputReportControllerFindAll()` */
    static { this.DueListOutputReportControllerFindAllPath = '/amims/due_list_output/due_list_output_report/list'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `dueListOutputReportControllerFindAll()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    dueListOutputReportControllerFindAll$Response(params, context) {
        return dueListOutputReportControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `dueListOutputReportControllerFindAll$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    dueListOutputReportControllerFindAll(params, context) {
        return this.dueListOutputReportControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `dueListOutputReportControllerFindOne()` */
    static { this.DueListOutputReportControllerFindOnePath = '/amims/due_list_output/due_list_output_report/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `dueListOutputReportControllerFindOne()` instead.
     *
     * This method doesn't expect any request body.
     */
    dueListOutputReportControllerFindOne$Response(params, context) {
        return dueListOutputReportControllerFindOne(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `dueListOutputReportControllerFindOne$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    dueListOutputReportControllerFindOne(params, context) {
        return this.dueListOutputReportControllerFindOne$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: DueListOutputReportService, deps: [{ token: ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: DueListOutputReportService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: DueListOutputReportService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: ApiConfiguration }, { type: i2.HttpClient }] });

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function dueListOutputWidgetControllerFindAll(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, dueListOutputWidgetControllerFindAll.PATH, 'post');
    if (params) {
        rb.query('filter', params.filter, {});
        rb.query('joinWhere', params.joinWhere, {});
        rb.query('select', params.select, {});
        rb.query('groupBy', params.groupBy, {});
        rb.query('sortKey', params.sortKey, {});
        rb.query('sortValue', params.sortValue, {});
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
dueListOutputWidgetControllerFindAll.PATH = '/amims/due_list_output/due_list_output_widget';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
class DueListOutputWidgetService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `dueListOutputWidgetControllerFindAll()` */
    static { this.DueListOutputWidgetControllerFindAllPath = '/amims/due_list_output/due_list_output_widget'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `dueListOutputWidgetControllerFindAll()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    dueListOutputWidgetControllerFindAll$Response(params, context) {
        return dueListOutputWidgetControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `dueListOutputWidgetControllerFindAll$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    dueListOutputWidgetControllerFindAll(params, context) {
        return this.dueListOutputWidgetControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: DueListOutputWidgetService, deps: [{ token: ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: DueListOutputWidgetService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: DueListOutputWidgetService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: ApiConfiguration }, { type: i2.HttpClient }] });

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function engineerPmtrControllerCreate(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, engineerPmtrControllerCreate.PATH, 'post');
    if (params) {
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
engineerPmtrControllerCreate.PATH = '/amims/engineer_pmtr/engineer_pmtr';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function engineerPmtrControllerFindAll(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, engineerPmtrControllerFindAll.PATH, 'get');
    if (params) {
        rb.query('pageIndex', params.pageIndex, {});
        rb.query('pageSize', params.pageSize, {});
        rb.query('filter', params.filter, {});
        rb.query('sortKey', params.sortKey, {});
        rb.query('sortValue', params.sortValue, {});
        rb.query('search_field', params.search_field, {});
        rb.query('search_keyword', params.search_keyword, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
engineerPmtrControllerFindAll.PATH = '/amims/engineer_pmtr/engineer_pmtr';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function engineerPmtrControllerFindOne(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, engineerPmtrControllerFindOne.PATH, 'get');
    if (params) {
        rb.path('id', params.id, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
engineerPmtrControllerFindOne.PATH = '/amims/engineer_pmtr/engineer_pmtr/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function engineerPmtrControllerRemove(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, engineerPmtrControllerRemove.PATH, 'delete');
    if (params) {
        rb.path('id', params.id, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
engineerPmtrControllerRemove.PATH = '/amims/engineer_pmtr/engineer_pmtr/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function engineerPmtrControllerUpdate(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, engineerPmtrControllerUpdate.PATH, 'put');
    if (params) {
        rb.path('id', params.id, {});
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
engineerPmtrControllerUpdate.PATH = '/amims/engineer_pmtr/engineer_pmtr/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
class EngineerPmtrService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `engineerPmtrControllerFindAll()` */
    static { this.EngineerPmtrControllerFindAllPath = '/amims/engineer_pmtr/engineer_pmtr'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `engineerPmtrControllerFindAll()` instead.
     *
     * This method doesn't expect any request body.
     */
    engineerPmtrControllerFindAll$Response(params, context) {
        return engineerPmtrControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `engineerPmtrControllerFindAll$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    engineerPmtrControllerFindAll(params, context) {
        return this.engineerPmtrControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `engineerPmtrControllerCreate()` */
    static { this.EngineerPmtrControllerCreatePath = '/amims/engineer_pmtr/engineer_pmtr'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `engineerPmtrControllerCreate()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    engineerPmtrControllerCreate$Response(params, context) {
        return engineerPmtrControllerCreate(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `engineerPmtrControllerCreate$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    engineerPmtrControllerCreate(params, context) {
        return this.engineerPmtrControllerCreate$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `engineerPmtrControllerFindOne()` */
    static { this.EngineerPmtrControllerFindOnePath = '/amims/engineer_pmtr/engineer_pmtr/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `engineerPmtrControllerFindOne()` instead.
     *
     * This method doesn't expect any request body.
     */
    engineerPmtrControllerFindOne$Response(params, context) {
        return engineerPmtrControllerFindOne(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `engineerPmtrControllerFindOne$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    engineerPmtrControllerFindOne(params, context) {
        return this.engineerPmtrControllerFindOne$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `engineerPmtrControllerUpdate()` */
    static { this.EngineerPmtrControllerUpdatePath = '/amims/engineer_pmtr/engineer_pmtr/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `engineerPmtrControllerUpdate()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    engineerPmtrControllerUpdate$Response(params, context) {
        return engineerPmtrControllerUpdate(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `engineerPmtrControllerUpdate$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    engineerPmtrControllerUpdate(params, context) {
        return this.engineerPmtrControllerUpdate$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `engineerPmtrControllerRemove()` */
    static { this.EngineerPmtrControllerRemovePath = '/amims/engineer_pmtr/engineer_pmtr/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `engineerPmtrControllerRemove()` instead.
     *
     * This method doesn't expect any request body.
     */
    engineerPmtrControllerRemove$Response(params, context) {
        return engineerPmtrControllerRemove(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `engineerPmtrControllerRemove$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    engineerPmtrControllerRemove(params, context) {
        return this.engineerPmtrControllerRemove$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: EngineerPmtrService, deps: [{ token: ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: EngineerPmtrService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: EngineerPmtrService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: ApiConfiguration }, { type: i2.HttpClient }] });

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function engineerPmtrReportControllerFindAll(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, engineerPmtrReportControllerFindAll.PATH, 'post');
    if (params) {
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
engineerPmtrReportControllerFindAll.PATH = '/amims/engineer_pmtr/engineer_pmtr_report/list';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function engineerPmtrReportControllerFindOne(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, engineerPmtrReportControllerFindOne.PATH, 'get');
    if (params) {
        rb.path('id', params.id, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
engineerPmtrReportControllerFindOne.PATH = '/amims/engineer_pmtr/engineer_pmtr_report/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
class EngineerPmtrReportService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `engineerPmtrReportControllerFindAll()` */
    static { this.EngineerPmtrReportControllerFindAllPath = '/amims/engineer_pmtr/engineer_pmtr_report/list'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `engineerPmtrReportControllerFindAll()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    engineerPmtrReportControllerFindAll$Response(params, context) {
        return engineerPmtrReportControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `engineerPmtrReportControllerFindAll$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    engineerPmtrReportControllerFindAll(params, context) {
        return this.engineerPmtrReportControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `engineerPmtrReportControllerFindOne()` */
    static { this.EngineerPmtrReportControllerFindOnePath = '/amims/engineer_pmtr/engineer_pmtr_report/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `engineerPmtrReportControllerFindOne()` instead.
     *
     * This method doesn't expect any request body.
     */
    engineerPmtrReportControllerFindOne$Response(params, context) {
        return engineerPmtrReportControllerFindOne(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `engineerPmtrReportControllerFindOne$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    engineerPmtrReportControllerFindOne(params, context) {
        return this.engineerPmtrReportControllerFindOne$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: EngineerPmtrReportService, deps: [{ token: ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: EngineerPmtrReportService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: EngineerPmtrReportService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: ApiConfiguration }, { type: i2.HttpClient }] });

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function engineerPmtrWidgetControllerFindAll(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, engineerPmtrWidgetControllerFindAll.PATH, 'post');
    if (params) {
        rb.query('filter', params.filter, {});
        rb.query('joinWhere', params.joinWhere, {});
        rb.query('select', params.select, {});
        rb.query('groupBy', params.groupBy, {});
        rb.query('sortKey', params.sortKey, {});
        rb.query('sortValue', params.sortValue, {});
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
engineerPmtrWidgetControllerFindAll.PATH = '/amims/engineer_pmtr/engineer_pmtr_widget';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
class EngineerPmtrWidgetService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `engineerPmtrWidgetControllerFindAll()` */
    static { this.EngineerPmtrWidgetControllerFindAllPath = '/amims/engineer_pmtr/engineer_pmtr_widget'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `engineerPmtrWidgetControllerFindAll()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    engineerPmtrWidgetControllerFindAll$Response(params, context) {
        return engineerPmtrWidgetControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `engineerPmtrWidgetControllerFindAll$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    engineerPmtrWidgetControllerFindAll(params, context) {
        return this.engineerPmtrWidgetControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: EngineerPmtrWidgetService, deps: [{ token: ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: EngineerPmtrWidgetService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: EngineerPmtrWidgetService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: ApiConfiguration }, { type: i2.HttpClient }] });

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function engineerPmtrItemControllerCreate(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, engineerPmtrItemControllerCreate.PATH, 'post');
    if (params) {
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
engineerPmtrItemControllerCreate.PATH = '/amims/engineer_pmtr_item/engineer_pmtr_item';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function engineerPmtrItemControllerFindAll(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, engineerPmtrItemControllerFindAll.PATH, 'get');
    if (params) {
        rb.query('pageIndex', params.pageIndex, {});
        rb.query('pageSize', params.pageSize, {});
        rb.query('filter', params.filter, {});
        rb.query('sortKey', params.sortKey, {});
        rb.query('sortValue', params.sortValue, {});
        rb.query('search_field', params.search_field, {});
        rb.query('search_keyword', params.search_keyword, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
engineerPmtrItemControllerFindAll.PATH = '/amims/engineer_pmtr_item/engineer_pmtr_item';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function engineerPmtrItemControllerFindOne(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, engineerPmtrItemControllerFindOne.PATH, 'get');
    if (params) {
        rb.path('id', params.id, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
engineerPmtrItemControllerFindOne.PATH = '/amims/engineer_pmtr_item/engineer_pmtr_item/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function engineerPmtrItemControllerRemove(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, engineerPmtrItemControllerRemove.PATH, 'delete');
    if (params) {
        rb.path('id', params.id, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
engineerPmtrItemControllerRemove.PATH = '/amims/engineer_pmtr_item/engineer_pmtr_item/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function engineerPmtrItemControllerUpdate(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, engineerPmtrItemControllerUpdate.PATH, 'put');
    if (params) {
        rb.path('id', params.id, {});
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
engineerPmtrItemControllerUpdate.PATH = '/amims/engineer_pmtr_item/engineer_pmtr_item/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
class EngineerPmtrItemService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `engineerPmtrItemControllerFindAll()` */
    static { this.EngineerPmtrItemControllerFindAllPath = '/amims/engineer_pmtr_item/engineer_pmtr_item'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `engineerPmtrItemControllerFindAll()` instead.
     *
     * This method doesn't expect any request body.
     */
    engineerPmtrItemControllerFindAll$Response(params, context) {
        return engineerPmtrItemControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `engineerPmtrItemControllerFindAll$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    engineerPmtrItemControllerFindAll(params, context) {
        return this.engineerPmtrItemControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `engineerPmtrItemControllerCreate()` */
    static { this.EngineerPmtrItemControllerCreatePath = '/amims/engineer_pmtr_item/engineer_pmtr_item'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `engineerPmtrItemControllerCreate()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    engineerPmtrItemControllerCreate$Response(params, context) {
        return engineerPmtrItemControllerCreate(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `engineerPmtrItemControllerCreate$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    engineerPmtrItemControllerCreate(params, context) {
        return this.engineerPmtrItemControllerCreate$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `engineerPmtrItemControllerFindOne()` */
    static { this.EngineerPmtrItemControllerFindOnePath = '/amims/engineer_pmtr_item/engineer_pmtr_item/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `engineerPmtrItemControllerFindOne()` instead.
     *
     * This method doesn't expect any request body.
     */
    engineerPmtrItemControllerFindOne$Response(params, context) {
        return engineerPmtrItemControllerFindOne(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `engineerPmtrItemControllerFindOne$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    engineerPmtrItemControllerFindOne(params, context) {
        return this.engineerPmtrItemControllerFindOne$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `engineerPmtrItemControllerUpdate()` */
    static { this.EngineerPmtrItemControllerUpdatePath = '/amims/engineer_pmtr_item/engineer_pmtr_item/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `engineerPmtrItemControllerUpdate()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    engineerPmtrItemControllerUpdate$Response(params, context) {
        return engineerPmtrItemControllerUpdate(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `engineerPmtrItemControllerUpdate$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    engineerPmtrItemControllerUpdate(params, context) {
        return this.engineerPmtrItemControllerUpdate$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `engineerPmtrItemControllerRemove()` */
    static { this.EngineerPmtrItemControllerRemovePath = '/amims/engineer_pmtr_item/engineer_pmtr_item/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `engineerPmtrItemControllerRemove()` instead.
     *
     * This method doesn't expect any request body.
     */
    engineerPmtrItemControllerRemove$Response(params, context) {
        return engineerPmtrItemControllerRemove(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `engineerPmtrItemControllerRemove$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    engineerPmtrItemControllerRemove(params, context) {
        return this.engineerPmtrItemControllerRemove$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: EngineerPmtrItemService, deps: [{ token: ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: EngineerPmtrItemService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: EngineerPmtrItemService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: ApiConfiguration }, { type: i2.HttpClient }] });

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function engineerPmtrItemReportControllerFindAll(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, engineerPmtrItemReportControllerFindAll.PATH, 'post');
    if (params) {
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
engineerPmtrItemReportControllerFindAll.PATH = '/amims/engineer_pmtr_item/engineer_pmtr_item_report/list';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function engineerPmtrItemReportControllerFindOne(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, engineerPmtrItemReportControllerFindOne.PATH, 'get');
    if (params) {
        rb.path('id', params.id, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
engineerPmtrItemReportControllerFindOne.PATH = '/amims/engineer_pmtr_item/engineer_pmtr_item_report/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
class EngineerPmtrItemReportService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `engineerPmtrItemReportControllerFindAll()` */
    static { this.EngineerPmtrItemReportControllerFindAllPath = '/amims/engineer_pmtr_item/engineer_pmtr_item_report/list'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `engineerPmtrItemReportControllerFindAll()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    engineerPmtrItemReportControllerFindAll$Response(params, context) {
        return engineerPmtrItemReportControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `engineerPmtrItemReportControllerFindAll$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    engineerPmtrItemReportControllerFindAll(params, context) {
        return this.engineerPmtrItemReportControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `engineerPmtrItemReportControllerFindOne()` */
    static { this.EngineerPmtrItemReportControllerFindOnePath = '/amims/engineer_pmtr_item/engineer_pmtr_item_report/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `engineerPmtrItemReportControllerFindOne()` instead.
     *
     * This method doesn't expect any request body.
     */
    engineerPmtrItemReportControllerFindOne$Response(params, context) {
        return engineerPmtrItemReportControllerFindOne(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `engineerPmtrItemReportControllerFindOne$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    engineerPmtrItemReportControllerFindOne(params, context) {
        return this.engineerPmtrItemReportControllerFindOne$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: EngineerPmtrItemReportService, deps: [{ token: ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: EngineerPmtrItemReportService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: EngineerPmtrItemReportService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: ApiConfiguration }, { type: i2.HttpClient }] });

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function engineerPmtrItemWidgetControllerFindAll(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, engineerPmtrItemWidgetControllerFindAll.PATH, 'post');
    if (params) {
        rb.query('filter', params.filter, {});
        rb.query('joinWhere', params.joinWhere, {});
        rb.query('select', params.select, {});
        rb.query('groupBy', params.groupBy, {});
        rb.query('sortKey', params.sortKey, {});
        rb.query('sortValue', params.sortValue, {});
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
engineerPmtrItemWidgetControllerFindAll.PATH = '/amims/engineer_pmtr_item/engineer_pmtr_item_widget';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
class EngineerPmtrItemWidgetService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `engineerPmtrItemWidgetControllerFindAll()` */
    static { this.EngineerPmtrItemWidgetControllerFindAllPath = '/amims/engineer_pmtr_item/engineer_pmtr_item_widget'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `engineerPmtrItemWidgetControllerFindAll()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    engineerPmtrItemWidgetControllerFindAll$Response(params, context) {
        return engineerPmtrItemWidgetControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `engineerPmtrItemWidgetControllerFindAll$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    engineerPmtrItemWidgetControllerFindAll(params, context) {
        return this.engineerPmtrItemWidgetControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: EngineerPmtrItemWidgetService, deps: [{ token: ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: EngineerPmtrItemWidgetService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: EngineerPmtrItemWidgetService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: ApiConfiguration }, { type: i2.HttpClient }] });

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function engineerPrisControllerCreate(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, engineerPrisControllerCreate.PATH, 'post');
    if (params) {
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
engineerPrisControllerCreate.PATH = '/amims/engineer_pris/engineer_pris';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function engineerPrisControllerFindAll(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, engineerPrisControllerFindAll.PATH, 'get');
    if (params) {
        rb.query('pageIndex', params.pageIndex, {});
        rb.query('pageSize', params.pageSize, {});
        rb.query('filter', params.filter, {});
        rb.query('sortKey', params.sortKey, {});
        rb.query('sortValue', params.sortValue, {});
        rb.query('search_field', params.search_field, {});
        rb.query('search_keyword', params.search_keyword, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
engineerPrisControllerFindAll.PATH = '/amims/engineer_pris/engineer_pris';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function engineerPrisControllerFindOne(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, engineerPrisControllerFindOne.PATH, 'get');
    if (params) {
        rb.path('id', params.id, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
engineerPrisControllerFindOne.PATH = '/amims/engineer_pris/engineer_pris/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function engineerPrisControllerRemove(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, engineerPrisControllerRemove.PATH, 'delete');
    if (params) {
        rb.path('id', params.id, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
engineerPrisControllerRemove.PATH = '/amims/engineer_pris/engineer_pris/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function engineerPrisControllerUpdate(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, engineerPrisControllerUpdate.PATH, 'put');
    if (params) {
        rb.path('id', params.id, {});
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
engineerPrisControllerUpdate.PATH = '/amims/engineer_pris/engineer_pris/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
class EngineerPrisService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `engineerPrisControllerFindAll()` */
    static { this.EngineerPrisControllerFindAllPath = '/amims/engineer_pris/engineer_pris'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `engineerPrisControllerFindAll()` instead.
     *
     * This method doesn't expect any request body.
     */
    engineerPrisControllerFindAll$Response(params, context) {
        return engineerPrisControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `engineerPrisControllerFindAll$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    engineerPrisControllerFindAll(params, context) {
        return this.engineerPrisControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `engineerPrisControllerCreate()` */
    static { this.EngineerPrisControllerCreatePath = '/amims/engineer_pris/engineer_pris'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `engineerPrisControllerCreate()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    engineerPrisControllerCreate$Response(params, context) {
        return engineerPrisControllerCreate(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `engineerPrisControllerCreate$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    engineerPrisControllerCreate(params, context) {
        return this.engineerPrisControllerCreate$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `engineerPrisControllerFindOne()` */
    static { this.EngineerPrisControllerFindOnePath = '/amims/engineer_pris/engineer_pris/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `engineerPrisControllerFindOne()` instead.
     *
     * This method doesn't expect any request body.
     */
    engineerPrisControllerFindOne$Response(params, context) {
        return engineerPrisControllerFindOne(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `engineerPrisControllerFindOne$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    engineerPrisControllerFindOne(params, context) {
        return this.engineerPrisControllerFindOne$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `engineerPrisControllerUpdate()` */
    static { this.EngineerPrisControllerUpdatePath = '/amims/engineer_pris/engineer_pris/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `engineerPrisControllerUpdate()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    engineerPrisControllerUpdate$Response(params, context) {
        return engineerPrisControllerUpdate(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `engineerPrisControllerUpdate$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    engineerPrisControllerUpdate(params, context) {
        return this.engineerPrisControllerUpdate$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `engineerPrisControllerRemove()` */
    static { this.EngineerPrisControllerRemovePath = '/amims/engineer_pris/engineer_pris/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `engineerPrisControllerRemove()` instead.
     *
     * This method doesn't expect any request body.
     */
    engineerPrisControllerRemove$Response(params, context) {
        return engineerPrisControllerRemove(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `engineerPrisControllerRemove$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    engineerPrisControllerRemove(params, context) {
        return this.engineerPrisControllerRemove$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: EngineerPrisService, deps: [{ token: ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: EngineerPrisService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: EngineerPrisService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: ApiConfiguration }, { type: i2.HttpClient }] });

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function engineerPrisReportControllerFindAll(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, engineerPrisReportControllerFindAll.PATH, 'post');
    if (params) {
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
engineerPrisReportControllerFindAll.PATH = '/amims/engineer_pris/engineer_pris_report/list';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function engineerPrisReportControllerFindOne(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, engineerPrisReportControllerFindOne.PATH, 'get');
    if (params) {
        rb.path('id', params.id, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
engineerPrisReportControllerFindOne.PATH = '/amims/engineer_pris/engineer_pris_report/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
class EngineerPrisReportService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `engineerPrisReportControllerFindAll()` */
    static { this.EngineerPrisReportControllerFindAllPath = '/amims/engineer_pris/engineer_pris_report/list'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `engineerPrisReportControllerFindAll()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    engineerPrisReportControllerFindAll$Response(params, context) {
        return engineerPrisReportControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `engineerPrisReportControllerFindAll$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    engineerPrisReportControllerFindAll(params, context) {
        return this.engineerPrisReportControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `engineerPrisReportControllerFindOne()` */
    static { this.EngineerPrisReportControllerFindOnePath = '/amims/engineer_pris/engineer_pris_report/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `engineerPrisReportControllerFindOne()` instead.
     *
     * This method doesn't expect any request body.
     */
    engineerPrisReportControllerFindOne$Response(params, context) {
        return engineerPrisReportControllerFindOne(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `engineerPrisReportControllerFindOne$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    engineerPrisReportControllerFindOne(params, context) {
        return this.engineerPrisReportControllerFindOne$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: EngineerPrisReportService, deps: [{ token: ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: EngineerPrisReportService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: EngineerPrisReportService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: ApiConfiguration }, { type: i2.HttpClient }] });

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function engineerPrisWidgetControllerFindAll(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, engineerPrisWidgetControllerFindAll.PATH, 'post');
    if (params) {
        rb.query('filter', params.filter, {});
        rb.query('joinWhere', params.joinWhere, {});
        rb.query('select', params.select, {});
        rb.query('groupBy', params.groupBy, {});
        rb.query('sortKey', params.sortKey, {});
        rb.query('sortValue', params.sortValue, {});
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
engineerPrisWidgetControllerFindAll.PATH = '/amims/engineer_pris/engineer_pris_widget';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
class EngineerPrisWidgetService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `engineerPrisWidgetControllerFindAll()` */
    static { this.EngineerPrisWidgetControllerFindAllPath = '/amims/engineer_pris/engineer_pris_widget'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `engineerPrisWidgetControllerFindAll()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    engineerPrisWidgetControllerFindAll$Response(params, context) {
        return engineerPrisWidgetControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `engineerPrisWidgetControllerFindAll$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    engineerPrisWidgetControllerFindAll(params, context) {
        return this.engineerPrisWidgetControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: EngineerPrisWidgetService, deps: [{ token: ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: EngineerPrisWidgetService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: EngineerPrisWidgetService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: ApiConfiguration }, { type: i2.HttpClient }] });

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function engineerPrisItemControllerCreate(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, engineerPrisItemControllerCreate.PATH, 'post');
    if (params) {
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
engineerPrisItemControllerCreate.PATH = '/amims/engineer_pris_item/engineer_pris_item';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function engineerPrisItemControllerFindAll(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, engineerPrisItemControllerFindAll.PATH, 'get');
    if (params) {
        rb.query('pageIndex', params.pageIndex, {});
        rb.query('pageSize', params.pageSize, {});
        rb.query('filter', params.filter, {});
        rb.query('sortKey', params.sortKey, {});
        rb.query('sortValue', params.sortValue, {});
        rb.query('search_field', params.search_field, {});
        rb.query('search_keyword', params.search_keyword, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
engineerPrisItemControllerFindAll.PATH = '/amims/engineer_pris_item/engineer_pris_item';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function engineerPrisItemControllerFindOne(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, engineerPrisItemControllerFindOne.PATH, 'get');
    if (params) {
        rb.path('id', params.id, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
engineerPrisItemControllerFindOne.PATH = '/amims/engineer_pris_item/engineer_pris_item/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function engineerPrisItemControllerRemove(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, engineerPrisItemControllerRemove.PATH, 'delete');
    if (params) {
        rb.path('id', params.id, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
engineerPrisItemControllerRemove.PATH = '/amims/engineer_pris_item/engineer_pris_item/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function engineerPrisItemControllerUpdate(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, engineerPrisItemControllerUpdate.PATH, 'put');
    if (params) {
        rb.path('id', params.id, {});
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
engineerPrisItemControllerUpdate.PATH = '/amims/engineer_pris_item/engineer_pris_item/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
class EngineerPrisItemService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `engineerPrisItemControllerFindAll()` */
    static { this.EngineerPrisItemControllerFindAllPath = '/amims/engineer_pris_item/engineer_pris_item'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `engineerPrisItemControllerFindAll()` instead.
     *
     * This method doesn't expect any request body.
     */
    engineerPrisItemControllerFindAll$Response(params, context) {
        return engineerPrisItemControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `engineerPrisItemControllerFindAll$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    engineerPrisItemControllerFindAll(params, context) {
        return this.engineerPrisItemControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `engineerPrisItemControllerCreate()` */
    static { this.EngineerPrisItemControllerCreatePath = '/amims/engineer_pris_item/engineer_pris_item'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `engineerPrisItemControllerCreate()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    engineerPrisItemControllerCreate$Response(params, context) {
        return engineerPrisItemControllerCreate(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `engineerPrisItemControllerCreate$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    engineerPrisItemControllerCreate(params, context) {
        return this.engineerPrisItemControllerCreate$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `engineerPrisItemControllerFindOne()` */
    static { this.EngineerPrisItemControllerFindOnePath = '/amims/engineer_pris_item/engineer_pris_item/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `engineerPrisItemControllerFindOne()` instead.
     *
     * This method doesn't expect any request body.
     */
    engineerPrisItemControllerFindOne$Response(params, context) {
        return engineerPrisItemControllerFindOne(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `engineerPrisItemControllerFindOne$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    engineerPrisItemControllerFindOne(params, context) {
        return this.engineerPrisItemControllerFindOne$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `engineerPrisItemControllerUpdate()` */
    static { this.EngineerPrisItemControllerUpdatePath = '/amims/engineer_pris_item/engineer_pris_item/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `engineerPrisItemControllerUpdate()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    engineerPrisItemControllerUpdate$Response(params, context) {
        return engineerPrisItemControllerUpdate(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `engineerPrisItemControllerUpdate$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    engineerPrisItemControllerUpdate(params, context) {
        return this.engineerPrisItemControllerUpdate$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `engineerPrisItemControllerRemove()` */
    static { this.EngineerPrisItemControllerRemovePath = '/amims/engineer_pris_item/engineer_pris_item/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `engineerPrisItemControllerRemove()` instead.
     *
     * This method doesn't expect any request body.
     */
    engineerPrisItemControllerRemove$Response(params, context) {
        return engineerPrisItemControllerRemove(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `engineerPrisItemControllerRemove$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    engineerPrisItemControllerRemove(params, context) {
        return this.engineerPrisItemControllerRemove$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: EngineerPrisItemService, deps: [{ token: ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: EngineerPrisItemService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: EngineerPrisItemService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: ApiConfiguration }, { type: i2.HttpClient }] });

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function engineerPrisItemReportControllerFindAll(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, engineerPrisItemReportControllerFindAll.PATH, 'post');
    if (params) {
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
engineerPrisItemReportControllerFindAll.PATH = '/amims/engineer_pris_item/engineer_pris_item_report/list';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function engineerPrisItemReportControllerFindOne(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, engineerPrisItemReportControllerFindOne.PATH, 'get');
    if (params) {
        rb.path('id', params.id, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
engineerPrisItemReportControllerFindOne.PATH = '/amims/engineer_pris_item/engineer_pris_item_report/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
class EngineerPrisItemReportService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `engineerPrisItemReportControllerFindAll()` */
    static { this.EngineerPrisItemReportControllerFindAllPath = '/amims/engineer_pris_item/engineer_pris_item_report/list'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `engineerPrisItemReportControllerFindAll()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    engineerPrisItemReportControllerFindAll$Response(params, context) {
        return engineerPrisItemReportControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `engineerPrisItemReportControllerFindAll$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    engineerPrisItemReportControllerFindAll(params, context) {
        return this.engineerPrisItemReportControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `engineerPrisItemReportControllerFindOne()` */
    static { this.EngineerPrisItemReportControllerFindOnePath = '/amims/engineer_pris_item/engineer_pris_item_report/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `engineerPrisItemReportControllerFindOne()` instead.
     *
     * This method doesn't expect any request body.
     */
    engineerPrisItemReportControllerFindOne$Response(params, context) {
        return engineerPrisItemReportControllerFindOne(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `engineerPrisItemReportControllerFindOne$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    engineerPrisItemReportControllerFindOne(params, context) {
        return this.engineerPrisItemReportControllerFindOne$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: EngineerPrisItemReportService, deps: [{ token: ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: EngineerPrisItemReportService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: EngineerPrisItemReportService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: ApiConfiguration }, { type: i2.HttpClient }] });

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function engineerPrisItemWidgetControllerFindAll(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, engineerPrisItemWidgetControllerFindAll.PATH, 'post');
    if (params) {
        rb.query('filter', params.filter, {});
        rb.query('joinWhere', params.joinWhere, {});
        rb.query('select', params.select, {});
        rb.query('groupBy', params.groupBy, {});
        rb.query('sortKey', params.sortKey, {});
        rb.query('sortValue', params.sortValue, {});
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
engineerPrisItemWidgetControllerFindAll.PATH = '/amims/engineer_pris_item/engineer_pris_item_widget';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
class EngineerPrisItemWidgetService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `engineerPrisItemWidgetControllerFindAll()` */
    static { this.EngineerPrisItemWidgetControllerFindAllPath = '/amims/engineer_pris_item/engineer_pris_item_widget'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `engineerPrisItemWidgetControllerFindAll()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    engineerPrisItemWidgetControllerFindAll$Response(params, context) {
        return engineerPrisItemWidgetControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `engineerPrisItemWidgetControllerFindAll$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    engineerPrisItemWidgetControllerFindAll(params, context) {
        return this.engineerPrisItemWidgetControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: EngineerPrisItemWidgetService, deps: [{ token: ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: EngineerPrisItemWidgetService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: EngineerPrisItemWidgetService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: ApiConfiguration }, { type: i2.HttpClient }] });

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function engineerPrisReturnControllerCreate(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, engineerPrisReturnControllerCreate.PATH, 'post');
    if (params) {
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
engineerPrisReturnControllerCreate.PATH = '/amims/engineer_pris_return/engineer_pris_return';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function engineerPrisReturnControllerFindAll(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, engineerPrisReturnControllerFindAll.PATH, 'get');
    if (params) {
        rb.query('pageIndex', params.pageIndex, {});
        rb.query('pageSize', params.pageSize, {});
        rb.query('filter', params.filter, {});
        rb.query('sortKey', params.sortKey, {});
        rb.query('sortValue', params.sortValue, {});
        rb.query('search_field', params.search_field, {});
        rb.query('search_keyword', params.search_keyword, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
engineerPrisReturnControllerFindAll.PATH = '/amims/engineer_pris_return/engineer_pris_return';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function engineerPrisReturnControllerFindOne(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, engineerPrisReturnControllerFindOne.PATH, 'get');
    if (params) {
        rb.path('id', params.id, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
engineerPrisReturnControllerFindOne.PATH = '/amims/engineer_pris_return/engineer_pris_return/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function engineerPrisReturnControllerRemove(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, engineerPrisReturnControllerRemove.PATH, 'delete');
    if (params) {
        rb.path('id', params.id, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
engineerPrisReturnControllerRemove.PATH = '/amims/engineer_pris_return/engineer_pris_return/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function engineerPrisReturnControllerUpdate(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, engineerPrisReturnControllerUpdate.PATH, 'put');
    if (params) {
        rb.path('id', params.id, {});
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
engineerPrisReturnControllerUpdate.PATH = '/amims/engineer_pris_return/engineer_pris_return/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
class EngineerPrisReturnService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `engineerPrisReturnControllerFindAll()` */
    static { this.EngineerPrisReturnControllerFindAllPath = '/amims/engineer_pris_return/engineer_pris_return'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `engineerPrisReturnControllerFindAll()` instead.
     *
     * This method doesn't expect any request body.
     */
    engineerPrisReturnControllerFindAll$Response(params, context) {
        return engineerPrisReturnControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `engineerPrisReturnControllerFindAll$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    engineerPrisReturnControllerFindAll(params, context) {
        return this.engineerPrisReturnControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `engineerPrisReturnControllerCreate()` */
    static { this.EngineerPrisReturnControllerCreatePath = '/amims/engineer_pris_return/engineer_pris_return'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `engineerPrisReturnControllerCreate()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    engineerPrisReturnControllerCreate$Response(params, context) {
        return engineerPrisReturnControllerCreate(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `engineerPrisReturnControllerCreate$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    engineerPrisReturnControllerCreate(params, context) {
        return this.engineerPrisReturnControllerCreate$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `engineerPrisReturnControllerFindOne()` */
    static { this.EngineerPrisReturnControllerFindOnePath = '/amims/engineer_pris_return/engineer_pris_return/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `engineerPrisReturnControllerFindOne()` instead.
     *
     * This method doesn't expect any request body.
     */
    engineerPrisReturnControllerFindOne$Response(params, context) {
        return engineerPrisReturnControllerFindOne(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `engineerPrisReturnControllerFindOne$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    engineerPrisReturnControllerFindOne(params, context) {
        return this.engineerPrisReturnControllerFindOne$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `engineerPrisReturnControllerUpdate()` */
    static { this.EngineerPrisReturnControllerUpdatePath = '/amims/engineer_pris_return/engineer_pris_return/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `engineerPrisReturnControllerUpdate()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    engineerPrisReturnControllerUpdate$Response(params, context) {
        return engineerPrisReturnControllerUpdate(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `engineerPrisReturnControllerUpdate$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    engineerPrisReturnControllerUpdate(params, context) {
        return this.engineerPrisReturnControllerUpdate$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `engineerPrisReturnControllerRemove()` */
    static { this.EngineerPrisReturnControllerRemovePath = '/amims/engineer_pris_return/engineer_pris_return/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `engineerPrisReturnControllerRemove()` instead.
     *
     * This method doesn't expect any request body.
     */
    engineerPrisReturnControllerRemove$Response(params, context) {
        return engineerPrisReturnControllerRemove(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `engineerPrisReturnControllerRemove$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    engineerPrisReturnControllerRemove(params, context) {
        return this.engineerPrisReturnControllerRemove$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: EngineerPrisReturnService, deps: [{ token: ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: EngineerPrisReturnService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: EngineerPrisReturnService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: ApiConfiguration }, { type: i2.HttpClient }] });

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function engineerPrisReturnReportControllerFindAll(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, engineerPrisReturnReportControllerFindAll.PATH, 'post');
    if (params) {
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
engineerPrisReturnReportControllerFindAll.PATH = '/amims/engineer_pris_return/engineer_pris_return_report/list';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function engineerPrisReturnReportControllerFindOne(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, engineerPrisReturnReportControllerFindOne.PATH, 'get');
    if (params) {
        rb.path('id', params.id, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
engineerPrisReturnReportControllerFindOne.PATH = '/amims/engineer_pris_return/engineer_pris_return_report/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
class EngineerPrisReturnReportService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `engineerPrisReturnReportControllerFindAll()` */
    static { this.EngineerPrisReturnReportControllerFindAllPath = '/amims/engineer_pris_return/engineer_pris_return_report/list'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `engineerPrisReturnReportControllerFindAll()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    engineerPrisReturnReportControllerFindAll$Response(params, context) {
        return engineerPrisReturnReportControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `engineerPrisReturnReportControllerFindAll$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    engineerPrisReturnReportControllerFindAll(params, context) {
        return this.engineerPrisReturnReportControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `engineerPrisReturnReportControllerFindOne()` */
    static { this.EngineerPrisReturnReportControllerFindOnePath = '/amims/engineer_pris_return/engineer_pris_return_report/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `engineerPrisReturnReportControllerFindOne()` instead.
     *
     * This method doesn't expect any request body.
     */
    engineerPrisReturnReportControllerFindOne$Response(params, context) {
        return engineerPrisReturnReportControllerFindOne(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `engineerPrisReturnReportControllerFindOne$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    engineerPrisReturnReportControllerFindOne(params, context) {
        return this.engineerPrisReturnReportControllerFindOne$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: EngineerPrisReturnReportService, deps: [{ token: ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: EngineerPrisReturnReportService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: EngineerPrisReturnReportService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: ApiConfiguration }, { type: i2.HttpClient }] });

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function engineerPrisReturnWidgetControllerFindAll(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, engineerPrisReturnWidgetControllerFindAll.PATH, 'post');
    if (params) {
        rb.query('filter', params.filter, {});
        rb.query('joinWhere', params.joinWhere, {});
        rb.query('select', params.select, {});
        rb.query('groupBy', params.groupBy, {});
        rb.query('sortKey', params.sortKey, {});
        rb.query('sortValue', params.sortValue, {});
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
engineerPrisReturnWidgetControllerFindAll.PATH = '/amims/engineer_pris_return/engineer_pris_return_widget';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
class EngineerPrisReturnWidgetService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `engineerPrisReturnWidgetControllerFindAll()` */
    static { this.EngineerPrisReturnWidgetControllerFindAllPath = '/amims/engineer_pris_return/engineer_pris_return_widget'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `engineerPrisReturnWidgetControllerFindAll()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    engineerPrisReturnWidgetControllerFindAll$Response(params, context) {
        return engineerPrisReturnWidgetControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `engineerPrisReturnWidgetControllerFindAll$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    engineerPrisReturnWidgetControllerFindAll(params, context) {
        return this.engineerPrisReturnWidgetControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: EngineerPrisReturnWidgetService, deps: [{ token: ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: EngineerPrisReturnWidgetService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: EngineerPrisReturnWidgetService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: ApiConfiguration }, { type: i2.HttpClient }] });

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function engineerPrisReturnItemControllerCreate(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, engineerPrisReturnItemControllerCreate.PATH, 'post');
    if (params) {
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
engineerPrisReturnItemControllerCreate.PATH = '/amims/engineer_pris_return_item/engineer_pris_return_item';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function engineerPrisReturnItemControllerFindAll(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, engineerPrisReturnItemControllerFindAll.PATH, 'get');
    if (params) {
        rb.query('pageIndex', params.pageIndex, {});
        rb.query('pageSize', params.pageSize, {});
        rb.query('filter', params.filter, {});
        rb.query('sortKey', params.sortKey, {});
        rb.query('sortValue', params.sortValue, {});
        rb.query('search_field', params.search_field, {});
        rb.query('search_keyword', params.search_keyword, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
engineerPrisReturnItemControllerFindAll.PATH = '/amims/engineer_pris_return_item/engineer_pris_return_item';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function engineerPrisReturnItemControllerFindOne(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, engineerPrisReturnItemControllerFindOne.PATH, 'get');
    if (params) {
        rb.path('id', params.id, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
engineerPrisReturnItemControllerFindOne.PATH = '/amims/engineer_pris_return_item/engineer_pris_return_item/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function engineerPrisReturnItemControllerRemove(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, engineerPrisReturnItemControllerRemove.PATH, 'delete');
    if (params) {
        rb.path('id', params.id, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
engineerPrisReturnItemControllerRemove.PATH = '/amims/engineer_pris_return_item/engineer_pris_return_item/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function engineerPrisReturnItemControllerUpdate(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, engineerPrisReturnItemControllerUpdate.PATH, 'put');
    if (params) {
        rb.path('id', params.id, {});
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
engineerPrisReturnItemControllerUpdate.PATH = '/amims/engineer_pris_return_item/engineer_pris_return_item/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
class EngineerPrisReturnItemService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `engineerPrisReturnItemControllerFindAll()` */
    static { this.EngineerPrisReturnItemControllerFindAllPath = '/amims/engineer_pris_return_item/engineer_pris_return_item'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `engineerPrisReturnItemControllerFindAll()` instead.
     *
     * This method doesn't expect any request body.
     */
    engineerPrisReturnItemControllerFindAll$Response(params, context) {
        return engineerPrisReturnItemControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `engineerPrisReturnItemControllerFindAll$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    engineerPrisReturnItemControllerFindAll(params, context) {
        return this.engineerPrisReturnItemControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `engineerPrisReturnItemControllerCreate()` */
    static { this.EngineerPrisReturnItemControllerCreatePath = '/amims/engineer_pris_return_item/engineer_pris_return_item'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `engineerPrisReturnItemControllerCreate()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    engineerPrisReturnItemControllerCreate$Response(params, context) {
        return engineerPrisReturnItemControllerCreate(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `engineerPrisReturnItemControllerCreate$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    engineerPrisReturnItemControllerCreate(params, context) {
        return this.engineerPrisReturnItemControllerCreate$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `engineerPrisReturnItemControllerFindOne()` */
    static { this.EngineerPrisReturnItemControllerFindOnePath = '/amims/engineer_pris_return_item/engineer_pris_return_item/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `engineerPrisReturnItemControllerFindOne()` instead.
     *
     * This method doesn't expect any request body.
     */
    engineerPrisReturnItemControllerFindOne$Response(params, context) {
        return engineerPrisReturnItemControllerFindOne(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `engineerPrisReturnItemControllerFindOne$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    engineerPrisReturnItemControllerFindOne(params, context) {
        return this.engineerPrisReturnItemControllerFindOne$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `engineerPrisReturnItemControllerUpdate()` */
    static { this.EngineerPrisReturnItemControllerUpdatePath = '/amims/engineer_pris_return_item/engineer_pris_return_item/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `engineerPrisReturnItemControllerUpdate()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    engineerPrisReturnItemControllerUpdate$Response(params, context) {
        return engineerPrisReturnItemControllerUpdate(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `engineerPrisReturnItemControllerUpdate$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    engineerPrisReturnItemControllerUpdate(params, context) {
        return this.engineerPrisReturnItemControllerUpdate$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `engineerPrisReturnItemControllerRemove()` */
    static { this.EngineerPrisReturnItemControllerRemovePath = '/amims/engineer_pris_return_item/engineer_pris_return_item/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `engineerPrisReturnItemControllerRemove()` instead.
     *
     * This method doesn't expect any request body.
     */
    engineerPrisReturnItemControllerRemove$Response(params, context) {
        return engineerPrisReturnItemControllerRemove(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `engineerPrisReturnItemControllerRemove$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    engineerPrisReturnItemControllerRemove(params, context) {
        return this.engineerPrisReturnItemControllerRemove$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: EngineerPrisReturnItemService, deps: [{ token: ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: EngineerPrisReturnItemService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: EngineerPrisReturnItemService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: ApiConfiguration }, { type: i2.HttpClient }] });

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function engineerPrisReturnItemReportControllerFindAll(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, engineerPrisReturnItemReportControllerFindAll.PATH, 'post');
    if (params) {
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
engineerPrisReturnItemReportControllerFindAll.PATH = '/amims/engineer_pris_return_item/engineer_pris_return_item_report/list';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function engineerPrisReturnItemReportControllerFindOne(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, engineerPrisReturnItemReportControllerFindOne.PATH, 'get');
    if (params) {
        rb.path('id', params.id, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
engineerPrisReturnItemReportControllerFindOne.PATH = '/amims/engineer_pris_return_item/engineer_pris_return_item_report/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
class EngineerPrisReturnItemReportService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `engineerPrisReturnItemReportControllerFindAll()` */
    static { this.EngineerPrisReturnItemReportControllerFindAllPath = '/amims/engineer_pris_return_item/engineer_pris_return_item_report/list'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `engineerPrisReturnItemReportControllerFindAll()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    engineerPrisReturnItemReportControllerFindAll$Response(params, context) {
        return engineerPrisReturnItemReportControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `engineerPrisReturnItemReportControllerFindAll$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    engineerPrisReturnItemReportControllerFindAll(params, context) {
        return this.engineerPrisReturnItemReportControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `engineerPrisReturnItemReportControllerFindOne()` */
    static { this.EngineerPrisReturnItemReportControllerFindOnePath = '/amims/engineer_pris_return_item/engineer_pris_return_item_report/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `engineerPrisReturnItemReportControllerFindOne()` instead.
     *
     * This method doesn't expect any request body.
     */
    engineerPrisReturnItemReportControllerFindOne$Response(params, context) {
        return engineerPrisReturnItemReportControllerFindOne(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `engineerPrisReturnItemReportControllerFindOne$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    engineerPrisReturnItemReportControllerFindOne(params, context) {
        return this.engineerPrisReturnItemReportControllerFindOne$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: EngineerPrisReturnItemReportService, deps: [{ token: ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: EngineerPrisReturnItemReportService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: EngineerPrisReturnItemReportService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: ApiConfiguration }, { type: i2.HttpClient }] });

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function engineerPrisReturnItemWidgetControllerFindAll(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, engineerPrisReturnItemWidgetControllerFindAll.PATH, 'post');
    if (params) {
        rb.query('filter', params.filter, {});
        rb.query('joinWhere', params.joinWhere, {});
        rb.query('select', params.select, {});
        rb.query('groupBy', params.groupBy, {});
        rb.query('sortKey', params.sortKey, {});
        rb.query('sortValue', params.sortValue, {});
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
engineerPrisReturnItemWidgetControllerFindAll.PATH = '/amims/engineer_pris_return_item/engineer_pris_return_item_widget';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
class EngineerPrisReturnItemWidgetService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `engineerPrisReturnItemWidgetControllerFindAll()` */
    static { this.EngineerPrisReturnItemWidgetControllerFindAllPath = '/amims/engineer_pris_return_item/engineer_pris_return_item_widget'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `engineerPrisReturnItemWidgetControllerFindAll()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    engineerPrisReturnItemWidgetControllerFindAll$Response(params, context) {
        return engineerPrisReturnItemWidgetControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `engineerPrisReturnItemWidgetControllerFindAll$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    engineerPrisReturnItemWidgetControllerFindAll(params, context) {
        return this.engineerPrisReturnItemWidgetControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: EngineerPrisReturnItemWidgetService, deps: [{ token: ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: EngineerPrisReturnItemWidgetService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: EngineerPrisReturnItemWidgetService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: ApiConfiguration }, { type: i2.HttpClient }] });

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function engineerRtiControllerCreate(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, engineerRtiControllerCreate.PATH, 'post');
    if (params) {
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
engineerRtiControllerCreate.PATH = '/amims/engineer_rti/engineer_rti';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function engineerRtiControllerFindAll(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, engineerRtiControllerFindAll.PATH, 'get');
    if (params) {
        rb.query('pageIndex', params.pageIndex, {});
        rb.query('pageSize', params.pageSize, {});
        rb.query('filter', params.filter, {});
        rb.query('sortKey', params.sortKey, {});
        rb.query('sortValue', params.sortValue, {});
        rb.query('search_field', params.search_field, {});
        rb.query('search_keyword', params.search_keyword, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
engineerRtiControllerFindAll.PATH = '/amims/engineer_rti/engineer_rti';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function engineerRtiControllerFindOne(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, engineerRtiControllerFindOne.PATH, 'get');
    if (params) {
        rb.path('id', params.id, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
engineerRtiControllerFindOne.PATH = '/amims/engineer_rti/engineer_rti/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function engineerRtiControllerRemove(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, engineerRtiControllerRemove.PATH, 'delete');
    if (params) {
        rb.path('id', params.id, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
engineerRtiControllerRemove.PATH = '/amims/engineer_rti/engineer_rti/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function engineerRtiControllerUpdate(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, engineerRtiControllerUpdate.PATH, 'put');
    if (params) {
        rb.path('id', params.id, {});
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
engineerRtiControllerUpdate.PATH = '/amims/engineer_rti/engineer_rti/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
class EngineerRtiService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `engineerRtiControllerFindAll()` */
    static { this.EngineerRtiControllerFindAllPath = '/amims/engineer_rti/engineer_rti'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `engineerRtiControllerFindAll()` instead.
     *
     * This method doesn't expect any request body.
     */
    engineerRtiControllerFindAll$Response(params, context) {
        return engineerRtiControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `engineerRtiControllerFindAll$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    engineerRtiControllerFindAll(params, context) {
        return this.engineerRtiControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `engineerRtiControllerCreate()` */
    static { this.EngineerRtiControllerCreatePath = '/amims/engineer_rti/engineer_rti'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `engineerRtiControllerCreate()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    engineerRtiControllerCreate$Response(params, context) {
        return engineerRtiControllerCreate(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `engineerRtiControllerCreate$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    engineerRtiControllerCreate(params, context) {
        return this.engineerRtiControllerCreate$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `engineerRtiControllerFindOne()` */
    static { this.EngineerRtiControllerFindOnePath = '/amims/engineer_rti/engineer_rti/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `engineerRtiControllerFindOne()` instead.
     *
     * This method doesn't expect any request body.
     */
    engineerRtiControllerFindOne$Response(params, context) {
        return engineerRtiControllerFindOne(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `engineerRtiControllerFindOne$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    engineerRtiControllerFindOne(params, context) {
        return this.engineerRtiControllerFindOne$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `engineerRtiControllerUpdate()` */
    static { this.EngineerRtiControllerUpdatePath = '/amims/engineer_rti/engineer_rti/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `engineerRtiControllerUpdate()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    engineerRtiControllerUpdate$Response(params, context) {
        return engineerRtiControllerUpdate(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `engineerRtiControllerUpdate$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    engineerRtiControllerUpdate(params, context) {
        return this.engineerRtiControllerUpdate$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `engineerRtiControllerRemove()` */
    static { this.EngineerRtiControllerRemovePath = '/amims/engineer_rti/engineer_rti/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `engineerRtiControllerRemove()` instead.
     *
     * This method doesn't expect any request body.
     */
    engineerRtiControllerRemove$Response(params, context) {
        return engineerRtiControllerRemove(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `engineerRtiControllerRemove$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    engineerRtiControllerRemove(params, context) {
        return this.engineerRtiControllerRemove$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: EngineerRtiService, deps: [{ token: ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: EngineerRtiService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: EngineerRtiService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: ApiConfiguration }, { type: i2.HttpClient }] });

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function engineerRtiReportControllerFindAll(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, engineerRtiReportControllerFindAll.PATH, 'post');
    if (params) {
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
engineerRtiReportControllerFindAll.PATH = '/amims/engineer_rti/engineer_rti_report/list';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function engineerRtiReportControllerFindOne(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, engineerRtiReportControllerFindOne.PATH, 'get');
    if (params) {
        rb.path('id', params.id, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
engineerRtiReportControllerFindOne.PATH = '/amims/engineer_rti/engineer_rti_report/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
class EngineerRtiReportService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `engineerRtiReportControllerFindAll()` */
    static { this.EngineerRtiReportControllerFindAllPath = '/amims/engineer_rti/engineer_rti_report/list'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `engineerRtiReportControllerFindAll()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    engineerRtiReportControllerFindAll$Response(params, context) {
        return engineerRtiReportControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `engineerRtiReportControllerFindAll$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    engineerRtiReportControllerFindAll(params, context) {
        return this.engineerRtiReportControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `engineerRtiReportControllerFindOne()` */
    static { this.EngineerRtiReportControllerFindOnePath = '/amims/engineer_rti/engineer_rti_report/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `engineerRtiReportControllerFindOne()` instead.
     *
     * This method doesn't expect any request body.
     */
    engineerRtiReportControllerFindOne$Response(params, context) {
        return engineerRtiReportControllerFindOne(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `engineerRtiReportControllerFindOne$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    engineerRtiReportControllerFindOne(params, context) {
        return this.engineerRtiReportControllerFindOne$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: EngineerRtiReportService, deps: [{ token: ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: EngineerRtiReportService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: EngineerRtiReportService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: ApiConfiguration }, { type: i2.HttpClient }] });

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function engineerRtiWidgetControllerFindAll(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, engineerRtiWidgetControllerFindAll.PATH, 'post');
    if (params) {
        rb.query('filter', params.filter, {});
        rb.query('joinWhere', params.joinWhere, {});
        rb.query('select', params.select, {});
        rb.query('groupBy', params.groupBy, {});
        rb.query('sortKey', params.sortKey, {});
        rb.query('sortValue', params.sortValue, {});
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
engineerRtiWidgetControllerFindAll.PATH = '/amims/engineer_rti/engineer_rti_widget';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
class EngineerRtiWidgetService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `engineerRtiWidgetControllerFindAll()` */
    static { this.EngineerRtiWidgetControllerFindAllPath = '/amims/engineer_rti/engineer_rti_widget'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `engineerRtiWidgetControllerFindAll()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    engineerRtiWidgetControllerFindAll$Response(params, context) {
        return engineerRtiWidgetControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `engineerRtiWidgetControllerFindAll$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    engineerRtiWidgetControllerFindAll(params, context) {
        return this.engineerRtiWidgetControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: EngineerRtiWidgetService, deps: [{ token: ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: EngineerRtiWidgetService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: EngineerRtiWidgetService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: ApiConfiguration }, { type: i2.HttpClient }] });

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function engineerRtiIdentifyControllerCreate(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, engineerRtiIdentifyControllerCreate.PATH, 'post');
    if (params) {
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
engineerRtiIdentifyControllerCreate.PATH = '/amims/engineer_rti_identify/engineer_rti_identify';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function engineerRtiIdentifyControllerFindAll(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, engineerRtiIdentifyControllerFindAll.PATH, 'get');
    if (params) {
        rb.query('pageIndex', params.pageIndex, {});
        rb.query('pageSize', params.pageSize, {});
        rb.query('filter', params.filter, {});
        rb.query('sortKey', params.sortKey, {});
        rb.query('sortValue', params.sortValue, {});
        rb.query('search_field', params.search_field, {});
        rb.query('search_keyword', params.search_keyword, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
engineerRtiIdentifyControllerFindAll.PATH = '/amims/engineer_rti_identify/engineer_rti_identify';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function engineerRtiIdentifyControllerFindOne(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, engineerRtiIdentifyControllerFindOne.PATH, 'get');
    if (params) {
        rb.path('id', params.id, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
engineerRtiIdentifyControllerFindOne.PATH = '/amims/engineer_rti_identify/engineer_rti_identify/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function engineerRtiIdentifyControllerRemove(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, engineerRtiIdentifyControllerRemove.PATH, 'delete');
    if (params) {
        rb.path('id', params.id, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
engineerRtiIdentifyControllerRemove.PATH = '/amims/engineer_rti_identify/engineer_rti_identify/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function engineerRtiIdentifyControllerUpdate(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, engineerRtiIdentifyControllerUpdate.PATH, 'put');
    if (params) {
        rb.path('id', params.id, {});
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
engineerRtiIdentifyControllerUpdate.PATH = '/amims/engineer_rti_identify/engineer_rti_identify/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
class EngineerRtiIdentifyService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `engineerRtiIdentifyControllerFindAll()` */
    static { this.EngineerRtiIdentifyControllerFindAllPath = '/amims/engineer_rti_identify/engineer_rti_identify'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `engineerRtiIdentifyControllerFindAll()` instead.
     *
     * This method doesn't expect any request body.
     */
    engineerRtiIdentifyControllerFindAll$Response(params, context) {
        return engineerRtiIdentifyControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `engineerRtiIdentifyControllerFindAll$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    engineerRtiIdentifyControllerFindAll(params, context) {
        return this.engineerRtiIdentifyControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `engineerRtiIdentifyControllerCreate()` */
    static { this.EngineerRtiIdentifyControllerCreatePath = '/amims/engineer_rti_identify/engineer_rti_identify'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `engineerRtiIdentifyControllerCreate()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    engineerRtiIdentifyControllerCreate$Response(params, context) {
        return engineerRtiIdentifyControllerCreate(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `engineerRtiIdentifyControllerCreate$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    engineerRtiIdentifyControllerCreate(params, context) {
        return this.engineerRtiIdentifyControllerCreate$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `engineerRtiIdentifyControllerFindOne()` */
    static { this.EngineerRtiIdentifyControllerFindOnePath = '/amims/engineer_rti_identify/engineer_rti_identify/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `engineerRtiIdentifyControllerFindOne()` instead.
     *
     * This method doesn't expect any request body.
     */
    engineerRtiIdentifyControllerFindOne$Response(params, context) {
        return engineerRtiIdentifyControllerFindOne(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `engineerRtiIdentifyControllerFindOne$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    engineerRtiIdentifyControllerFindOne(params, context) {
        return this.engineerRtiIdentifyControllerFindOne$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `engineerRtiIdentifyControllerUpdate()` */
    static { this.EngineerRtiIdentifyControllerUpdatePath = '/amims/engineer_rti_identify/engineer_rti_identify/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `engineerRtiIdentifyControllerUpdate()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    engineerRtiIdentifyControllerUpdate$Response(params, context) {
        return engineerRtiIdentifyControllerUpdate(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `engineerRtiIdentifyControllerUpdate$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    engineerRtiIdentifyControllerUpdate(params, context) {
        return this.engineerRtiIdentifyControllerUpdate$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `engineerRtiIdentifyControllerRemove()` */
    static { this.EngineerRtiIdentifyControllerRemovePath = '/amims/engineer_rti_identify/engineer_rti_identify/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `engineerRtiIdentifyControllerRemove()` instead.
     *
     * This method doesn't expect any request body.
     */
    engineerRtiIdentifyControllerRemove$Response(params, context) {
        return engineerRtiIdentifyControllerRemove(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `engineerRtiIdentifyControllerRemove$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    engineerRtiIdentifyControllerRemove(params, context) {
        return this.engineerRtiIdentifyControllerRemove$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: EngineerRtiIdentifyService, deps: [{ token: ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: EngineerRtiIdentifyService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: EngineerRtiIdentifyService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: ApiConfiguration }, { type: i2.HttpClient }] });

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function engineerRtiIdentifyReportControllerFindAll(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, engineerRtiIdentifyReportControllerFindAll.PATH, 'post');
    if (params) {
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
engineerRtiIdentifyReportControllerFindAll.PATH = '/amims/engineer_rti_identify/engineer_rti_identify_report/list';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function engineerRtiIdentifyReportControllerFindOne(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, engineerRtiIdentifyReportControllerFindOne.PATH, 'get');
    if (params) {
        rb.path('id', params.id, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
engineerRtiIdentifyReportControllerFindOne.PATH = '/amims/engineer_rti_identify/engineer_rti_identify_report/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
class EngineerRtiIdentifyReportService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `engineerRtiIdentifyReportControllerFindAll()` */
    static { this.EngineerRtiIdentifyReportControllerFindAllPath = '/amims/engineer_rti_identify/engineer_rti_identify_report/list'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `engineerRtiIdentifyReportControllerFindAll()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    engineerRtiIdentifyReportControllerFindAll$Response(params, context) {
        return engineerRtiIdentifyReportControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `engineerRtiIdentifyReportControllerFindAll$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    engineerRtiIdentifyReportControllerFindAll(params, context) {
        return this.engineerRtiIdentifyReportControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `engineerRtiIdentifyReportControllerFindOne()` */
    static { this.EngineerRtiIdentifyReportControllerFindOnePath = '/amims/engineer_rti_identify/engineer_rti_identify_report/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `engineerRtiIdentifyReportControllerFindOne()` instead.
     *
     * This method doesn't expect any request body.
     */
    engineerRtiIdentifyReportControllerFindOne$Response(params, context) {
        return engineerRtiIdentifyReportControllerFindOne(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `engineerRtiIdentifyReportControllerFindOne$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    engineerRtiIdentifyReportControllerFindOne(params, context) {
        return this.engineerRtiIdentifyReportControllerFindOne$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: EngineerRtiIdentifyReportService, deps: [{ token: ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: EngineerRtiIdentifyReportService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: EngineerRtiIdentifyReportService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: ApiConfiguration }, { type: i2.HttpClient }] });

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function engineerRtiIdentifyWidgetControllerFindAll(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, engineerRtiIdentifyWidgetControllerFindAll.PATH, 'post');
    if (params) {
        rb.query('filter', params.filter, {});
        rb.query('joinWhere', params.joinWhere, {});
        rb.query('select', params.select, {});
        rb.query('groupBy', params.groupBy, {});
        rb.query('sortKey', params.sortKey, {});
        rb.query('sortValue', params.sortValue, {});
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
engineerRtiIdentifyWidgetControllerFindAll.PATH = '/amims/engineer_rti_identify/engineer_rti_identify_widget';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
class EngineerRtiIdentifyWidgetService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `engineerRtiIdentifyWidgetControllerFindAll()` */
    static { this.EngineerRtiIdentifyWidgetControllerFindAllPath = '/amims/engineer_rti_identify/engineer_rti_identify_widget'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `engineerRtiIdentifyWidgetControllerFindAll()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    engineerRtiIdentifyWidgetControllerFindAll$Response(params, context) {
        return engineerRtiIdentifyWidgetControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `engineerRtiIdentifyWidgetControllerFindAll$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    engineerRtiIdentifyWidgetControllerFindAll(params, context) {
        return this.engineerRtiIdentifyWidgetControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: EngineerRtiIdentifyWidgetService, deps: [{ token: ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: EngineerRtiIdentifyWidgetService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: EngineerRtiIdentifyWidgetService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: ApiConfiguration }, { type: i2.HttpClient }] });

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function engineerRtiPartControllerCreate(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, engineerRtiPartControllerCreate.PATH, 'post');
    if (params) {
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
engineerRtiPartControllerCreate.PATH = '/amims/engineer_rti_part/engineer_rti_part';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function engineerRtiPartControllerFindAll(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, engineerRtiPartControllerFindAll.PATH, 'get');
    if (params) {
        rb.query('pageIndex', params.pageIndex, {});
        rb.query('pageSize', params.pageSize, {});
        rb.query('filter', params.filter, {});
        rb.query('sortKey', params.sortKey, {});
        rb.query('sortValue', params.sortValue, {});
        rb.query('search_field', params.search_field, {});
        rb.query('search_keyword', params.search_keyword, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
engineerRtiPartControllerFindAll.PATH = '/amims/engineer_rti_part/engineer_rti_part';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function engineerRtiPartControllerFindOne(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, engineerRtiPartControllerFindOne.PATH, 'get');
    if (params) {
        rb.path('id', params.id, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
engineerRtiPartControllerFindOne.PATH = '/amims/engineer_rti_part/engineer_rti_part/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function engineerRtiPartControllerRemove(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, engineerRtiPartControllerRemove.PATH, 'delete');
    if (params) {
        rb.path('id', params.id, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
engineerRtiPartControllerRemove.PATH = '/amims/engineer_rti_part/engineer_rti_part/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function engineerRtiPartControllerUpdate(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, engineerRtiPartControllerUpdate.PATH, 'put');
    if (params) {
        rb.path('id', params.id, {});
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
engineerRtiPartControllerUpdate.PATH = '/amims/engineer_rti_part/engineer_rti_part/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
class EngineerRtiPartService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `engineerRtiPartControllerFindAll()` */
    static { this.EngineerRtiPartControllerFindAllPath = '/amims/engineer_rti_part/engineer_rti_part'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `engineerRtiPartControllerFindAll()` instead.
     *
     * This method doesn't expect any request body.
     */
    engineerRtiPartControllerFindAll$Response(params, context) {
        return engineerRtiPartControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `engineerRtiPartControllerFindAll$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    engineerRtiPartControllerFindAll(params, context) {
        return this.engineerRtiPartControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `engineerRtiPartControllerCreate()` */
    static { this.EngineerRtiPartControllerCreatePath = '/amims/engineer_rti_part/engineer_rti_part'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `engineerRtiPartControllerCreate()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    engineerRtiPartControllerCreate$Response(params, context) {
        return engineerRtiPartControllerCreate(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `engineerRtiPartControllerCreate$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    engineerRtiPartControllerCreate(params, context) {
        return this.engineerRtiPartControllerCreate$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `engineerRtiPartControllerFindOne()` */
    static { this.EngineerRtiPartControllerFindOnePath = '/amims/engineer_rti_part/engineer_rti_part/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `engineerRtiPartControllerFindOne()` instead.
     *
     * This method doesn't expect any request body.
     */
    engineerRtiPartControllerFindOne$Response(params, context) {
        return engineerRtiPartControllerFindOne(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `engineerRtiPartControllerFindOne$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    engineerRtiPartControllerFindOne(params, context) {
        return this.engineerRtiPartControllerFindOne$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `engineerRtiPartControllerUpdate()` */
    static { this.EngineerRtiPartControllerUpdatePath = '/amims/engineer_rti_part/engineer_rti_part/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `engineerRtiPartControllerUpdate()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    engineerRtiPartControllerUpdate$Response(params, context) {
        return engineerRtiPartControllerUpdate(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `engineerRtiPartControllerUpdate$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    engineerRtiPartControllerUpdate(params, context) {
        return this.engineerRtiPartControllerUpdate$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `engineerRtiPartControllerRemove()` */
    static { this.EngineerRtiPartControllerRemovePath = '/amims/engineer_rti_part/engineer_rti_part/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `engineerRtiPartControllerRemove()` instead.
     *
     * This method doesn't expect any request body.
     */
    engineerRtiPartControllerRemove$Response(params, context) {
        return engineerRtiPartControllerRemove(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `engineerRtiPartControllerRemove$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    engineerRtiPartControllerRemove(params, context) {
        return this.engineerRtiPartControllerRemove$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: EngineerRtiPartService, deps: [{ token: ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: EngineerRtiPartService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: EngineerRtiPartService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: ApiConfiguration }, { type: i2.HttpClient }] });

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function engineerRtiPartReportControllerFindAll(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, engineerRtiPartReportControllerFindAll.PATH, 'post');
    if (params) {
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
engineerRtiPartReportControllerFindAll.PATH = '/amims/engineer_rti_part/engineer_rti_part_report/list';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function engineerRtiPartReportControllerFindOne(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, engineerRtiPartReportControllerFindOne.PATH, 'get');
    if (params) {
        rb.path('id', params.id, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
engineerRtiPartReportControllerFindOne.PATH = '/amims/engineer_rti_part/engineer_rti_part_report/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
class EngineerRtiPartReportService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `engineerRtiPartReportControllerFindAll()` */
    static { this.EngineerRtiPartReportControllerFindAllPath = '/amims/engineer_rti_part/engineer_rti_part_report/list'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `engineerRtiPartReportControllerFindAll()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    engineerRtiPartReportControllerFindAll$Response(params, context) {
        return engineerRtiPartReportControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `engineerRtiPartReportControllerFindAll$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    engineerRtiPartReportControllerFindAll(params, context) {
        return this.engineerRtiPartReportControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `engineerRtiPartReportControllerFindOne()` */
    static { this.EngineerRtiPartReportControllerFindOnePath = '/amims/engineer_rti_part/engineer_rti_part_report/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `engineerRtiPartReportControllerFindOne()` instead.
     *
     * This method doesn't expect any request body.
     */
    engineerRtiPartReportControllerFindOne$Response(params, context) {
        return engineerRtiPartReportControllerFindOne(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `engineerRtiPartReportControllerFindOne$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    engineerRtiPartReportControllerFindOne(params, context) {
        return this.engineerRtiPartReportControllerFindOne$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: EngineerRtiPartReportService, deps: [{ token: ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: EngineerRtiPartReportService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: EngineerRtiPartReportService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: ApiConfiguration }, { type: i2.HttpClient }] });

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function engineerRtiPartWidgetControllerFindAll(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, engineerRtiPartWidgetControllerFindAll.PATH, 'post');
    if (params) {
        rb.query('filter', params.filter, {});
        rb.query('joinWhere', params.joinWhere, {});
        rb.query('select', params.select, {});
        rb.query('groupBy', params.groupBy, {});
        rb.query('sortKey', params.sortKey, {});
        rb.query('sortValue', params.sortValue, {});
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
engineerRtiPartWidgetControllerFindAll.PATH = '/amims/engineer_rti_part/engineer_rti_part_widget';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
class EngineerRtiPartWidgetService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `engineerRtiPartWidgetControllerFindAll()` */
    static { this.EngineerRtiPartWidgetControllerFindAllPath = '/amims/engineer_rti_part/engineer_rti_part_widget'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `engineerRtiPartWidgetControllerFindAll()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    engineerRtiPartWidgetControllerFindAll$Response(params, context) {
        return engineerRtiPartWidgetControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `engineerRtiPartWidgetControllerFindAll$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    engineerRtiPartWidgetControllerFindAll(params, context) {
        return this.engineerRtiPartWidgetControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: EngineerRtiPartWidgetService, deps: [{ token: ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: EngineerRtiPartWidgetService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: EngineerRtiPartWidgetService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: ApiConfiguration }, { type: i2.HttpClient }] });

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function figureIndexControllerCreate(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, figureIndexControllerCreate.PATH, 'post');
    if (params) {
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
figureIndexControllerCreate.PATH = '/amims/figure_index/figure_index';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function figureIndexControllerFindAll(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, figureIndexControllerFindAll.PATH, 'get');
    if (params) {
        rb.query('pageIndex', params.pageIndex, {});
        rb.query('pageSize', params.pageSize, {});
        rb.query('filter', params.filter, {});
        rb.query('sortKey', params.sortKey, {});
        rb.query('sortValue', params.sortValue, {});
        rb.query('search_field', params.search_field, {});
        rb.query('search_keyword', params.search_keyword, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
figureIndexControllerFindAll.PATH = '/amims/figure_index/figure_index';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function figureIndexControllerFindOne(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, figureIndexControllerFindOne.PATH, 'get');
    if (params) {
        rb.path('id', params.id, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
figureIndexControllerFindOne.PATH = '/amims/figure_index/figure_index/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function figureIndexControllerRemove(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, figureIndexControllerRemove.PATH, 'delete');
    if (params) {
        rb.path('id', params.id, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
figureIndexControllerRemove.PATH = '/amims/figure_index/figure_index/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function figureIndexControllerUpdate(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, figureIndexControllerUpdate.PATH, 'put');
    if (params) {
        rb.path('id', params.id, {});
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
figureIndexControllerUpdate.PATH = '/amims/figure_index/figure_index/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
class FigureIndexService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `figureIndexControllerFindAll()` */
    static { this.FigureIndexControllerFindAllPath = '/amims/figure_index/figure_index'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `figureIndexControllerFindAll()` instead.
     *
     * This method doesn't expect any request body.
     */
    figureIndexControllerFindAll$Response(params, context) {
        return figureIndexControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `figureIndexControllerFindAll$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    figureIndexControllerFindAll(params, context) {
        return this.figureIndexControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `figureIndexControllerCreate()` */
    static { this.FigureIndexControllerCreatePath = '/amims/figure_index/figure_index'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `figureIndexControllerCreate()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    figureIndexControllerCreate$Response(params, context) {
        return figureIndexControllerCreate(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `figureIndexControllerCreate$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    figureIndexControllerCreate(params, context) {
        return this.figureIndexControllerCreate$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `figureIndexControllerFindOne()` */
    static { this.FigureIndexControllerFindOnePath = '/amims/figure_index/figure_index/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `figureIndexControllerFindOne()` instead.
     *
     * This method doesn't expect any request body.
     */
    figureIndexControllerFindOne$Response(params, context) {
        return figureIndexControllerFindOne(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `figureIndexControllerFindOne$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    figureIndexControllerFindOne(params, context) {
        return this.figureIndexControllerFindOne$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `figureIndexControllerUpdate()` */
    static { this.FigureIndexControllerUpdatePath = '/amims/figure_index/figure_index/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `figureIndexControllerUpdate()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    figureIndexControllerUpdate$Response(params, context) {
        return figureIndexControllerUpdate(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `figureIndexControllerUpdate$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    figureIndexControllerUpdate(params, context) {
        return this.figureIndexControllerUpdate$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `figureIndexControllerRemove()` */
    static { this.FigureIndexControllerRemovePath = '/amims/figure_index/figure_index/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `figureIndexControllerRemove()` instead.
     *
     * This method doesn't expect any request body.
     */
    figureIndexControllerRemove$Response(params, context) {
        return figureIndexControllerRemove(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `figureIndexControllerRemove$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    figureIndexControllerRemove(params, context) {
        return this.figureIndexControllerRemove$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: FigureIndexService, deps: [{ token: ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: FigureIndexService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: FigureIndexService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: ApiConfiguration }, { type: i2.HttpClient }] });

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function inspectionControllerCreate(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, inspectionControllerCreate.PATH, 'post');
    if (params) {
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
inspectionControllerCreate.PATH = '/amims/inspection/inspection';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function inspectionControllerFindAll(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, inspectionControllerFindAll.PATH, 'get');
    if (params) {
        rb.query('pageIndex', params.pageIndex, {});
        rb.query('pageSize', params.pageSize, {});
        rb.query('filter', params.filter, {});
        rb.query('sortKey', params.sortKey, {});
        rb.query('sortValue', params.sortValue, {});
        rb.query('search_field', params.search_field, {});
        rb.query('search_keyword', params.search_keyword, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
inspectionControllerFindAll.PATH = '/amims/inspection/inspection';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function inspectionControllerFindOne(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, inspectionControllerFindOne.PATH, 'get');
    if (params) {
        rb.path('id', params.id, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
inspectionControllerFindOne.PATH = '/amims/inspection/inspection/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function inspectionControllerRemove(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, inspectionControllerRemove.PATH, 'delete');
    if (params) {
        rb.path('id', params.id, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
inspectionControllerRemove.PATH = '/amims/inspection/inspection/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function inspectionControllerUpdate(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, inspectionControllerUpdate.PATH, 'put');
    if (params) {
        rb.path('id', params.id, {});
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
inspectionControllerUpdate.PATH = '/amims/inspection/inspection/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
class InspectionService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `inspectionControllerFindAll()` */
    static { this.InspectionControllerFindAllPath = '/amims/inspection/inspection'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `inspectionControllerFindAll()` instead.
     *
     * This method doesn't expect any request body.
     */
    inspectionControllerFindAll$Response(params, context) {
        return inspectionControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `inspectionControllerFindAll$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    inspectionControllerFindAll(params, context) {
        return this.inspectionControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `inspectionControllerCreate()` */
    static { this.InspectionControllerCreatePath = '/amims/inspection/inspection'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `inspectionControllerCreate()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    inspectionControllerCreate$Response(params, context) {
        return inspectionControllerCreate(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `inspectionControllerCreate$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    inspectionControllerCreate(params, context) {
        return this.inspectionControllerCreate$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `inspectionControllerFindOne()` */
    static { this.InspectionControllerFindOnePath = '/amims/inspection/inspection/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `inspectionControllerFindOne()` instead.
     *
     * This method doesn't expect any request body.
     */
    inspectionControllerFindOne$Response(params, context) {
        return inspectionControllerFindOne(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `inspectionControllerFindOne$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    inspectionControllerFindOne(params, context) {
        return this.inspectionControllerFindOne$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `inspectionControllerUpdate()` */
    static { this.InspectionControllerUpdatePath = '/amims/inspection/inspection/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `inspectionControllerUpdate()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    inspectionControllerUpdate$Response(params, context) {
        return inspectionControllerUpdate(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `inspectionControllerUpdate$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    inspectionControllerUpdate(params, context) {
        return this.inspectionControllerUpdate$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `inspectionControllerRemove()` */
    static { this.InspectionControllerRemovePath = '/amims/inspection/inspection/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `inspectionControllerRemove()` instead.
     *
     * This method doesn't expect any request body.
     */
    inspectionControllerRemove$Response(params, context) {
        return inspectionControllerRemove(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `inspectionControllerRemove$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    inspectionControllerRemove(params, context) {
        return this.inspectionControllerRemove$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: InspectionService, deps: [{ token: ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: InspectionService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: InspectionService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: ApiConfiguration }, { type: i2.HttpClient }] });

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function inspectionReportControllerFindAll(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, inspectionReportControllerFindAll.PATH, 'post');
    if (params) {
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
inspectionReportControllerFindAll.PATH = '/amims/inspection/inspection_report/list';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function inspectionReportControllerFindOne(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, inspectionReportControllerFindOne.PATH, 'get');
    if (params) {
        rb.path('id', params.id, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
inspectionReportControllerFindOne.PATH = '/amims/inspection/inspection_report/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
class InspectionReportService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `inspectionReportControllerFindAll()` */
    static { this.InspectionReportControllerFindAllPath = '/amims/inspection/inspection_report/list'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `inspectionReportControllerFindAll()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    inspectionReportControllerFindAll$Response(params, context) {
        return inspectionReportControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `inspectionReportControllerFindAll$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    inspectionReportControllerFindAll(params, context) {
        return this.inspectionReportControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `inspectionReportControllerFindOne()` */
    static { this.InspectionReportControllerFindOnePath = '/amims/inspection/inspection_report/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `inspectionReportControllerFindOne()` instead.
     *
     * This method doesn't expect any request body.
     */
    inspectionReportControllerFindOne$Response(params, context) {
        return inspectionReportControllerFindOne(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `inspectionReportControllerFindOne$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    inspectionReportControllerFindOne(params, context) {
        return this.inspectionReportControllerFindOne$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: InspectionReportService, deps: [{ token: ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: InspectionReportService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: InspectionReportService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: ApiConfiguration }, { type: i2.HttpClient }] });

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function inspectionWidgetControllerFindAll(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, inspectionWidgetControllerFindAll.PATH, 'post');
    if (params) {
        rb.query('filter', params.filter, {});
        rb.query('joinWhere', params.joinWhere, {});
        rb.query('select', params.select, {});
        rb.query('groupBy', params.groupBy, {});
        rb.query('sortKey', params.sortKey, {});
        rb.query('sortValue', params.sortValue, {});
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
inspectionWidgetControllerFindAll.PATH = '/amims/inspection/inspection_widget';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
class InspectionWidgetService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `inspectionWidgetControllerFindAll()` */
    static { this.InspectionWidgetControllerFindAllPath = '/amims/inspection/inspection_widget'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `inspectionWidgetControllerFindAll()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    inspectionWidgetControllerFindAll$Response(params, context) {
        return inspectionWidgetControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `inspectionWidgetControllerFindAll$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    inspectionWidgetControllerFindAll(params, context) {
        return this.inspectionWidgetControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: InspectionWidgetService, deps: [{ token: ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: InspectionWidgetService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: InspectionWidgetService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: ApiConfiguration }, { type: i2.HttpClient }] });

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function internalGrnControllerCreate(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, internalGrnControllerCreate.PATH, 'post');
    if (params) {
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
internalGrnControllerCreate.PATH = '/amims/internal_grn/internal_grn';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function internalGrnControllerFindAll(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, internalGrnControllerFindAll.PATH, 'get');
    if (params) {
        rb.query('pageIndex', params.pageIndex, {});
        rb.query('pageSize', params.pageSize, {});
        rb.query('filter', params.filter, {});
        rb.query('sortKey', params.sortKey, {});
        rb.query('sortValue', params.sortValue, {});
        rb.query('search_field', params.search_field, {});
        rb.query('search_keyword', params.search_keyword, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
internalGrnControllerFindAll.PATH = '/amims/internal_grn/internal_grn';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function internalGrnControllerFindOne(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, internalGrnControllerFindOne.PATH, 'get');
    if (params) {
        rb.path('id', params.id, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
internalGrnControllerFindOne.PATH = '/amims/internal_grn/internal_grn/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function internalGrnControllerRemove(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, internalGrnControllerRemove.PATH, 'delete');
    if (params) {
        rb.path('id', params.id, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
internalGrnControllerRemove.PATH = '/amims/internal_grn/internal_grn/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function internalGrnControllerUpdate(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, internalGrnControllerUpdate.PATH, 'put');
    if (params) {
        rb.path('id', params.id, {});
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
internalGrnControllerUpdate.PATH = '/amims/internal_grn/internal_grn/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
class InternalGrnService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `internalGrnControllerFindAll()` */
    static { this.InternalGrnControllerFindAllPath = '/amims/internal_grn/internal_grn'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `internalGrnControllerFindAll()` instead.
     *
     * This method doesn't expect any request body.
     */
    internalGrnControllerFindAll$Response(params, context) {
        return internalGrnControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `internalGrnControllerFindAll$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    internalGrnControllerFindAll(params, context) {
        return this.internalGrnControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `internalGrnControllerCreate()` */
    static { this.InternalGrnControllerCreatePath = '/amims/internal_grn/internal_grn'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `internalGrnControllerCreate()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    internalGrnControllerCreate$Response(params, context) {
        return internalGrnControllerCreate(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `internalGrnControllerCreate$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    internalGrnControllerCreate(params, context) {
        return this.internalGrnControllerCreate$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `internalGrnControllerFindOne()` */
    static { this.InternalGrnControllerFindOnePath = '/amims/internal_grn/internal_grn/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `internalGrnControllerFindOne()` instead.
     *
     * This method doesn't expect any request body.
     */
    internalGrnControllerFindOne$Response(params, context) {
        return internalGrnControllerFindOne(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `internalGrnControllerFindOne$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    internalGrnControllerFindOne(params, context) {
        return this.internalGrnControllerFindOne$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `internalGrnControllerUpdate()` */
    static { this.InternalGrnControllerUpdatePath = '/amims/internal_grn/internal_grn/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `internalGrnControllerUpdate()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    internalGrnControllerUpdate$Response(params, context) {
        return internalGrnControllerUpdate(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `internalGrnControllerUpdate$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    internalGrnControllerUpdate(params, context) {
        return this.internalGrnControllerUpdate$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `internalGrnControllerRemove()` */
    static { this.InternalGrnControllerRemovePath = '/amims/internal_grn/internal_grn/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `internalGrnControllerRemove()` instead.
     *
     * This method doesn't expect any request body.
     */
    internalGrnControllerRemove$Response(params, context) {
        return internalGrnControllerRemove(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `internalGrnControllerRemove$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    internalGrnControllerRemove(params, context) {
        return this.internalGrnControllerRemove$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: InternalGrnService, deps: [{ token: ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: InternalGrnService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: InternalGrnService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: ApiConfiguration }, { type: i2.HttpClient }] });

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function internalGrnReportControllerFindAll(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, internalGrnReportControllerFindAll.PATH, 'post');
    if (params) {
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
internalGrnReportControllerFindAll.PATH = '/amims/internal_grn/internal_grn_report/list';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function internalGrnReportControllerFindOne(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, internalGrnReportControllerFindOne.PATH, 'get');
    if (params) {
        rb.path('id', params.id, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
internalGrnReportControllerFindOne.PATH = '/amims/internal_grn/internal_grn_report/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
class InternalGrnReportService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `internalGrnReportControllerFindAll()` */
    static { this.InternalGrnReportControllerFindAllPath = '/amims/internal_grn/internal_grn_report/list'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `internalGrnReportControllerFindAll()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    internalGrnReportControllerFindAll$Response(params, context) {
        return internalGrnReportControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `internalGrnReportControllerFindAll$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    internalGrnReportControllerFindAll(params, context) {
        return this.internalGrnReportControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `internalGrnReportControllerFindOne()` */
    static { this.InternalGrnReportControllerFindOnePath = '/amims/internal_grn/internal_grn_report/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `internalGrnReportControllerFindOne()` instead.
     *
     * This method doesn't expect any request body.
     */
    internalGrnReportControllerFindOne$Response(params, context) {
        return internalGrnReportControllerFindOne(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `internalGrnReportControllerFindOne$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    internalGrnReportControllerFindOne(params, context) {
        return this.internalGrnReportControllerFindOne$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: InternalGrnReportService, deps: [{ token: ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: InternalGrnReportService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: InternalGrnReportService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: ApiConfiguration }, { type: i2.HttpClient }] });

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function internalGrnWidgetControllerFindAll(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, internalGrnWidgetControllerFindAll.PATH, 'post');
    if (params) {
        rb.query('filter', params.filter, {});
        rb.query('joinWhere', params.joinWhere, {});
        rb.query('select', params.select, {});
        rb.query('groupBy', params.groupBy, {});
        rb.query('sortKey', params.sortKey, {});
        rb.query('sortValue', params.sortValue, {});
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
internalGrnWidgetControllerFindAll.PATH = '/amims/internal_grn/internal_grn_widget';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
class InternalGrnWidgetService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `internalGrnWidgetControllerFindAll()` */
    static { this.InternalGrnWidgetControllerFindAllPath = '/amims/internal_grn/internal_grn_widget'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `internalGrnWidgetControllerFindAll()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    internalGrnWidgetControllerFindAll$Response(params, context) {
        return internalGrnWidgetControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `internalGrnWidgetControllerFindAll$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    internalGrnWidgetControllerFindAll(params, context) {
        return this.internalGrnWidgetControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: InternalGrnWidgetService, deps: [{ token: ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: InternalGrnWidgetService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: InternalGrnWidgetService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: ApiConfiguration }, { type: i2.HttpClient }] });

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function internalGrnItemControllerCreate(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, internalGrnItemControllerCreate.PATH, 'post');
    if (params) {
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
internalGrnItemControllerCreate.PATH = '/amims/internal_grn_item/internal_grn_item';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function internalGrnItemControllerFindAll(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, internalGrnItemControllerFindAll.PATH, 'get');
    if (params) {
        rb.query('pageIndex', params.pageIndex, {});
        rb.query('pageSize', params.pageSize, {});
        rb.query('filter', params.filter, {});
        rb.query('sortKey', params.sortKey, {});
        rb.query('sortValue', params.sortValue, {});
        rb.query('search_field', params.search_field, {});
        rb.query('search_keyword', params.search_keyword, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
internalGrnItemControllerFindAll.PATH = '/amims/internal_grn_item/internal_grn_item';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function internalGrnItemControllerFindOne(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, internalGrnItemControllerFindOne.PATH, 'get');
    if (params) {
        rb.path('id', params.id, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
internalGrnItemControllerFindOne.PATH = '/amims/internal_grn_item/internal_grn_item/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function internalGrnItemControllerRemove(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, internalGrnItemControllerRemove.PATH, 'delete');
    if (params) {
        rb.path('id', params.id, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
internalGrnItemControllerRemove.PATH = '/amims/internal_grn_item/internal_grn_item/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function internalGrnItemControllerUpdate(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, internalGrnItemControllerUpdate.PATH, 'put');
    if (params) {
        rb.path('id', params.id, {});
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
internalGrnItemControllerUpdate.PATH = '/amims/internal_grn_item/internal_grn_item/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
class InternalGrnItemService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `internalGrnItemControllerFindAll()` */
    static { this.InternalGrnItemControllerFindAllPath = '/amims/internal_grn_item/internal_grn_item'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `internalGrnItemControllerFindAll()` instead.
     *
     * This method doesn't expect any request body.
     */
    internalGrnItemControllerFindAll$Response(params, context) {
        return internalGrnItemControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `internalGrnItemControllerFindAll$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    internalGrnItemControllerFindAll(params, context) {
        return this.internalGrnItemControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `internalGrnItemControllerCreate()` */
    static { this.InternalGrnItemControllerCreatePath = '/amims/internal_grn_item/internal_grn_item'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `internalGrnItemControllerCreate()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    internalGrnItemControllerCreate$Response(params, context) {
        return internalGrnItemControllerCreate(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `internalGrnItemControllerCreate$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    internalGrnItemControllerCreate(params, context) {
        return this.internalGrnItemControllerCreate$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `internalGrnItemControllerFindOne()` */
    static { this.InternalGrnItemControllerFindOnePath = '/amims/internal_grn_item/internal_grn_item/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `internalGrnItemControllerFindOne()` instead.
     *
     * This method doesn't expect any request body.
     */
    internalGrnItemControllerFindOne$Response(params, context) {
        return internalGrnItemControllerFindOne(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `internalGrnItemControllerFindOne$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    internalGrnItemControllerFindOne(params, context) {
        return this.internalGrnItemControllerFindOne$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `internalGrnItemControllerUpdate()` */
    static { this.InternalGrnItemControllerUpdatePath = '/amims/internal_grn_item/internal_grn_item/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `internalGrnItemControllerUpdate()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    internalGrnItemControllerUpdate$Response(params, context) {
        return internalGrnItemControllerUpdate(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `internalGrnItemControllerUpdate$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    internalGrnItemControllerUpdate(params, context) {
        return this.internalGrnItemControllerUpdate$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `internalGrnItemControllerRemove()` */
    static { this.InternalGrnItemControllerRemovePath = '/amims/internal_grn_item/internal_grn_item/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `internalGrnItemControllerRemove()` instead.
     *
     * This method doesn't expect any request body.
     */
    internalGrnItemControllerRemove$Response(params, context) {
        return internalGrnItemControllerRemove(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `internalGrnItemControllerRemove$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    internalGrnItemControllerRemove(params, context) {
        return this.internalGrnItemControllerRemove$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: InternalGrnItemService, deps: [{ token: ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: InternalGrnItemService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: InternalGrnItemService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: ApiConfiguration }, { type: i2.HttpClient }] });

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function internalGrnItemReportControllerFindAll(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, internalGrnItemReportControllerFindAll.PATH, 'post');
    if (params) {
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
internalGrnItemReportControllerFindAll.PATH = '/amims/internal_grn_item/internal_grn_item_report/list';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function internalGrnItemReportControllerFindOne(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, internalGrnItemReportControllerFindOne.PATH, 'get');
    if (params) {
        rb.path('id', params.id, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
internalGrnItemReportControllerFindOne.PATH = '/amims/internal_grn_item/internal_grn_item_report/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
class InternalGrnItemReportService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `internalGrnItemReportControllerFindAll()` */
    static { this.InternalGrnItemReportControllerFindAllPath = '/amims/internal_grn_item/internal_grn_item_report/list'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `internalGrnItemReportControllerFindAll()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    internalGrnItemReportControllerFindAll$Response(params, context) {
        return internalGrnItemReportControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `internalGrnItemReportControllerFindAll$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    internalGrnItemReportControllerFindAll(params, context) {
        return this.internalGrnItemReportControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `internalGrnItemReportControllerFindOne()` */
    static { this.InternalGrnItemReportControllerFindOnePath = '/amims/internal_grn_item/internal_grn_item_report/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `internalGrnItemReportControllerFindOne()` instead.
     *
     * This method doesn't expect any request body.
     */
    internalGrnItemReportControllerFindOne$Response(params, context) {
        return internalGrnItemReportControllerFindOne(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `internalGrnItemReportControllerFindOne$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    internalGrnItemReportControllerFindOne(params, context) {
        return this.internalGrnItemReportControllerFindOne$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: InternalGrnItemReportService, deps: [{ token: ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: InternalGrnItemReportService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: InternalGrnItemReportService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: ApiConfiguration }, { type: i2.HttpClient }] });

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function internalGrnItemWidgetControllerFindAll(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, internalGrnItemWidgetControllerFindAll.PATH, 'post');
    if (params) {
        rb.query('filter', params.filter, {});
        rb.query('joinWhere', params.joinWhere, {});
        rb.query('select', params.select, {});
        rb.query('groupBy', params.groupBy, {});
        rb.query('sortKey', params.sortKey, {});
        rb.query('sortValue', params.sortValue, {});
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
internalGrnItemWidgetControllerFindAll.PATH = '/amims/internal_grn_item/internal_grn_item_widget';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
class InternalGrnItemWidgetService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `internalGrnItemWidgetControllerFindAll()` */
    static { this.InternalGrnItemWidgetControllerFindAllPath = '/amims/internal_grn_item/internal_grn_item_widget'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `internalGrnItemWidgetControllerFindAll()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    internalGrnItemWidgetControllerFindAll$Response(params, context) {
        return internalGrnItemWidgetControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `internalGrnItemWidgetControllerFindAll$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    internalGrnItemWidgetControllerFindAll(params, context) {
        return this.internalGrnItemWidgetControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: InternalGrnItemWidgetService, deps: [{ token: ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: InternalGrnItemWidgetService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: InternalGrnItemWidgetService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: ApiConfiguration }, { type: i2.HttpClient }] });

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function lastMaintenanceControllerCreate(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, lastMaintenanceControllerCreate.PATH, 'post');
    if (params) {
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
lastMaintenanceControllerCreate.PATH = '/amims/last_maintenance/last_maintenance';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function lastMaintenanceControllerFindAll(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, lastMaintenanceControllerFindAll.PATH, 'get');
    if (params) {
        rb.query('pageIndex', params.pageIndex, {});
        rb.query('pageSize', params.pageSize, {});
        rb.query('filter', params.filter, {});
        rb.query('sortKey', params.sortKey, {});
        rb.query('sortValue', params.sortValue, {});
        rb.query('search_field', params.search_field, {});
        rb.query('search_keyword', params.search_keyword, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
lastMaintenanceControllerFindAll.PATH = '/amims/last_maintenance/last_maintenance';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function lastMaintenanceControllerFindOne(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, lastMaintenanceControllerFindOne.PATH, 'get');
    if (params) {
        rb.path('id', params.id, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
lastMaintenanceControllerFindOne.PATH = '/amims/last_maintenance/last_maintenance/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function lastMaintenanceControllerRemove(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, lastMaintenanceControllerRemove.PATH, 'delete');
    if (params) {
        rb.path('id', params.id, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
lastMaintenanceControllerRemove.PATH = '/amims/last_maintenance/last_maintenance/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function lastMaintenanceControllerUpdate(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, lastMaintenanceControllerUpdate.PATH, 'put');
    if (params) {
        rb.path('id', params.id, {});
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
lastMaintenanceControllerUpdate.PATH = '/amims/last_maintenance/last_maintenance/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
class LastMaintenanceService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `lastMaintenanceControllerFindAll()` */
    static { this.LastMaintenanceControllerFindAllPath = '/amims/last_maintenance/last_maintenance'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `lastMaintenanceControllerFindAll()` instead.
     *
     * This method doesn't expect any request body.
     */
    lastMaintenanceControllerFindAll$Response(params, context) {
        return lastMaintenanceControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `lastMaintenanceControllerFindAll$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    lastMaintenanceControllerFindAll(params, context) {
        return this.lastMaintenanceControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `lastMaintenanceControllerCreate()` */
    static { this.LastMaintenanceControllerCreatePath = '/amims/last_maintenance/last_maintenance'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `lastMaintenanceControllerCreate()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    lastMaintenanceControllerCreate$Response(params, context) {
        return lastMaintenanceControllerCreate(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `lastMaintenanceControllerCreate$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    lastMaintenanceControllerCreate(params, context) {
        return this.lastMaintenanceControllerCreate$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `lastMaintenanceControllerFindOne()` */
    static { this.LastMaintenanceControllerFindOnePath = '/amims/last_maintenance/last_maintenance/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `lastMaintenanceControllerFindOne()` instead.
     *
     * This method doesn't expect any request body.
     */
    lastMaintenanceControllerFindOne$Response(params, context) {
        return lastMaintenanceControllerFindOne(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `lastMaintenanceControllerFindOne$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    lastMaintenanceControllerFindOne(params, context) {
        return this.lastMaintenanceControllerFindOne$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `lastMaintenanceControllerUpdate()` */
    static { this.LastMaintenanceControllerUpdatePath = '/amims/last_maintenance/last_maintenance/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `lastMaintenanceControllerUpdate()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    lastMaintenanceControllerUpdate$Response(params, context) {
        return lastMaintenanceControllerUpdate(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `lastMaintenanceControllerUpdate$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    lastMaintenanceControllerUpdate(params, context) {
        return this.lastMaintenanceControllerUpdate$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `lastMaintenanceControllerRemove()` */
    static { this.LastMaintenanceControllerRemovePath = '/amims/last_maintenance/last_maintenance/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `lastMaintenanceControllerRemove()` instead.
     *
     * This method doesn't expect any request body.
     */
    lastMaintenanceControllerRemove$Response(params, context) {
        return lastMaintenanceControllerRemove(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `lastMaintenanceControllerRemove$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    lastMaintenanceControllerRemove(params, context) {
        return this.lastMaintenanceControllerRemove$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: LastMaintenanceService, deps: [{ token: ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: LastMaintenanceService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: LastMaintenanceService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: ApiConfiguration }, { type: i2.HttpClient }] });

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function lastMaintenanceReportControllerFindAll(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, lastMaintenanceReportControllerFindAll.PATH, 'post');
    if (params) {
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
lastMaintenanceReportControllerFindAll.PATH = '/amims/last_maintenance/last_maintenance_report/list';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function lastMaintenanceReportControllerFindOne(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, lastMaintenanceReportControllerFindOne.PATH, 'get');
    if (params) {
        rb.path('id', params.id, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
lastMaintenanceReportControllerFindOne.PATH = '/amims/last_maintenance/last_maintenance_report/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
class LastMaintenanceReportService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `lastMaintenanceReportControllerFindAll()` */
    static { this.LastMaintenanceReportControllerFindAllPath = '/amims/last_maintenance/last_maintenance_report/list'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `lastMaintenanceReportControllerFindAll()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    lastMaintenanceReportControllerFindAll$Response(params, context) {
        return lastMaintenanceReportControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `lastMaintenanceReportControllerFindAll$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    lastMaintenanceReportControllerFindAll(params, context) {
        return this.lastMaintenanceReportControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `lastMaintenanceReportControllerFindOne()` */
    static { this.LastMaintenanceReportControllerFindOnePath = '/amims/last_maintenance/last_maintenance_report/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `lastMaintenanceReportControllerFindOne()` instead.
     *
     * This method doesn't expect any request body.
     */
    lastMaintenanceReportControllerFindOne$Response(params, context) {
        return lastMaintenanceReportControllerFindOne(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `lastMaintenanceReportControllerFindOne$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    lastMaintenanceReportControllerFindOne(params, context) {
        return this.lastMaintenanceReportControllerFindOne$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: LastMaintenanceReportService, deps: [{ token: ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: LastMaintenanceReportService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: LastMaintenanceReportService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: ApiConfiguration }, { type: i2.HttpClient }] });

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function lastMaintenanceWidgetControllerFindAll(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, lastMaintenanceWidgetControllerFindAll.PATH, 'post');
    if (params) {
        rb.query('filter', params.filter, {});
        rb.query('joinWhere', params.joinWhere, {});
        rb.query('select', params.select, {});
        rb.query('groupBy', params.groupBy, {});
        rb.query('sortKey', params.sortKey, {});
        rb.query('sortValue', params.sortValue, {});
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
lastMaintenanceWidgetControllerFindAll.PATH = '/amims/last_maintenance/last_maintenance_widget';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
class LastMaintenanceWidgetService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `lastMaintenanceWidgetControllerFindAll()` */
    static { this.LastMaintenanceWidgetControllerFindAllPath = '/amims/last_maintenance/last_maintenance_widget'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `lastMaintenanceWidgetControllerFindAll()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    lastMaintenanceWidgetControllerFindAll$Response(params, context) {
        return lastMaintenanceWidgetControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `lastMaintenanceWidgetControllerFindAll$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    lastMaintenanceWidgetControllerFindAll(params, context) {
        return this.lastMaintenanceWidgetControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: LastMaintenanceWidgetService, deps: [{ token: ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: LastMaintenanceWidgetService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: LastMaintenanceWidgetService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: ApiConfiguration }, { type: i2.HttpClient }] });

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function libUploadControllerCreate(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, libUploadControllerCreate.PATH, 'post');
    if (params) {
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
libUploadControllerCreate.PATH = '/amims/lib_upload/lib_upload';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function libUploadControllerFindAll(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, libUploadControllerFindAll.PATH, 'get');
    if (params) {
        rb.query('pageIndex', params.pageIndex, {});
        rb.query('pageSize', params.pageSize, {});
        rb.query('filter', params.filter, {});
        rb.query('sortKey', params.sortKey, {});
        rb.query('sortValue', params.sortValue, {});
        rb.query('search_field', params.search_field, {});
        rb.query('search_keyword', params.search_keyword, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
libUploadControllerFindAll.PATH = '/amims/lib_upload/lib_upload';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function libUploadControllerFindOne(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, libUploadControllerFindOne.PATH, 'get');
    if (params) {
        rb.path('id', params.id, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
libUploadControllerFindOne.PATH = '/amims/lib_upload/lib_upload/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function libUploadControllerRemove(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, libUploadControllerRemove.PATH, 'delete');
    if (params) {
        rb.path('id', params.id, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
libUploadControllerRemove.PATH = '/amims/lib_upload/lib_upload/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function libUploadControllerUpdate(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, libUploadControllerUpdate.PATH, 'put');
    if (params) {
        rb.path('id', params.id, {});
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
libUploadControllerUpdate.PATH = '/amims/lib_upload/lib_upload/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
class LibUploadService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `libUploadControllerFindAll()` */
    static { this.LibUploadControllerFindAllPath = '/amims/lib_upload/lib_upload'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `libUploadControllerFindAll()` instead.
     *
     * This method doesn't expect any request body.
     */
    libUploadControllerFindAll$Response(params, context) {
        return libUploadControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `libUploadControllerFindAll$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    libUploadControllerFindAll(params, context) {
        return this.libUploadControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `libUploadControllerCreate()` */
    static { this.LibUploadControllerCreatePath = '/amims/lib_upload/lib_upload'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `libUploadControllerCreate()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    libUploadControllerCreate$Response(params, context) {
        return libUploadControllerCreate(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `libUploadControllerCreate$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    libUploadControllerCreate(params, context) {
        return this.libUploadControllerCreate$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `libUploadControllerFindOne()` */
    static { this.LibUploadControllerFindOnePath = '/amims/lib_upload/lib_upload/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `libUploadControllerFindOne()` instead.
     *
     * This method doesn't expect any request body.
     */
    libUploadControllerFindOne$Response(params, context) {
        return libUploadControllerFindOne(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `libUploadControllerFindOne$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    libUploadControllerFindOne(params, context) {
        return this.libUploadControllerFindOne$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `libUploadControllerUpdate()` */
    static { this.LibUploadControllerUpdatePath = '/amims/lib_upload/lib_upload/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `libUploadControllerUpdate()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    libUploadControllerUpdate$Response(params, context) {
        return libUploadControllerUpdate(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `libUploadControllerUpdate$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    libUploadControllerUpdate(params, context) {
        return this.libUploadControllerUpdate$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `libUploadControllerRemove()` */
    static { this.LibUploadControllerRemovePath = '/amims/lib_upload/lib_upload/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `libUploadControllerRemove()` instead.
     *
     * This method doesn't expect any request body.
     */
    libUploadControllerRemove$Response(params, context) {
        return libUploadControllerRemove(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `libUploadControllerRemove$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    libUploadControllerRemove(params, context) {
        return this.libUploadControllerRemove$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: LibUploadService, deps: [{ token: ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: LibUploadService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: LibUploadService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: ApiConfiguration }, { type: i2.HttpClient }] });

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function lifeTimeLimitControllerCreate(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, lifeTimeLimitControllerCreate.PATH, 'post');
    if (params) {
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
lifeTimeLimitControllerCreate.PATH = '/amims/life_time_limit/life_time_limit';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function lifeTimeLimitControllerFindAll(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, lifeTimeLimitControllerFindAll.PATH, 'get');
    if (params) {
        rb.query('pageIndex', params.pageIndex, {});
        rb.query('pageSize', params.pageSize, {});
        rb.query('filter', params.filter, {});
        rb.query('sortKey', params.sortKey, {});
        rb.query('sortValue', params.sortValue, {});
        rb.query('search_field', params.search_field, {});
        rb.query('search_keyword', params.search_keyword, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
lifeTimeLimitControllerFindAll.PATH = '/amims/life_time_limit/life_time_limit';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function lifeTimeLimitControllerFindOne(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, lifeTimeLimitControllerFindOne.PATH, 'get');
    if (params) {
        rb.path('id', params.id, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
lifeTimeLimitControllerFindOne.PATH = '/amims/life_time_limit/life_time_limit/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function lifeTimeLimitControllerRemove(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, lifeTimeLimitControllerRemove.PATH, 'delete');
    if (params) {
        rb.path('id', params.id, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
lifeTimeLimitControllerRemove.PATH = '/amims/life_time_limit/life_time_limit/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function lifeTimeLimitControllerUpdate(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, lifeTimeLimitControllerUpdate.PATH, 'put');
    if (params) {
        rb.path('id', params.id, {});
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
lifeTimeLimitControllerUpdate.PATH = '/amims/life_time_limit/life_time_limit/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
class LifeTimeLimitService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `lifeTimeLimitControllerFindAll()` */
    static { this.LifeTimeLimitControllerFindAllPath = '/amims/life_time_limit/life_time_limit'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `lifeTimeLimitControllerFindAll()` instead.
     *
     * This method doesn't expect any request body.
     */
    lifeTimeLimitControllerFindAll$Response(params, context) {
        return lifeTimeLimitControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `lifeTimeLimitControllerFindAll$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    lifeTimeLimitControllerFindAll(params, context) {
        return this.lifeTimeLimitControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `lifeTimeLimitControllerCreate()` */
    static { this.LifeTimeLimitControllerCreatePath = '/amims/life_time_limit/life_time_limit'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `lifeTimeLimitControllerCreate()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    lifeTimeLimitControllerCreate$Response(params, context) {
        return lifeTimeLimitControllerCreate(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `lifeTimeLimitControllerCreate$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    lifeTimeLimitControllerCreate(params, context) {
        return this.lifeTimeLimitControllerCreate$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `lifeTimeLimitControllerFindOne()` */
    static { this.LifeTimeLimitControllerFindOnePath = '/amims/life_time_limit/life_time_limit/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `lifeTimeLimitControllerFindOne()` instead.
     *
     * This method doesn't expect any request body.
     */
    lifeTimeLimitControllerFindOne$Response(params, context) {
        return lifeTimeLimitControllerFindOne(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `lifeTimeLimitControllerFindOne$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    lifeTimeLimitControllerFindOne(params, context) {
        return this.lifeTimeLimitControllerFindOne$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `lifeTimeLimitControllerUpdate()` */
    static { this.LifeTimeLimitControllerUpdatePath = '/amims/life_time_limit/life_time_limit/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `lifeTimeLimitControllerUpdate()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    lifeTimeLimitControllerUpdate$Response(params, context) {
        return lifeTimeLimitControllerUpdate(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `lifeTimeLimitControllerUpdate$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    lifeTimeLimitControllerUpdate(params, context) {
        return this.lifeTimeLimitControllerUpdate$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `lifeTimeLimitControllerRemove()` */
    static { this.LifeTimeLimitControllerRemovePath = '/amims/life_time_limit/life_time_limit/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `lifeTimeLimitControllerRemove()` instead.
     *
     * This method doesn't expect any request body.
     */
    lifeTimeLimitControllerRemove$Response(params, context) {
        return lifeTimeLimitControllerRemove(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `lifeTimeLimitControllerRemove$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    lifeTimeLimitControllerRemove(params, context) {
        return this.lifeTimeLimitControllerRemove$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: LifeTimeLimitService, deps: [{ token: ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: LifeTimeLimitService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: LifeTimeLimitService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: ApiConfiguration }, { type: i2.HttpClient }] });

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function lifeTimeLimitReportControllerFindAll(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, lifeTimeLimitReportControllerFindAll.PATH, 'post');
    if (params) {
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
lifeTimeLimitReportControllerFindAll.PATH = '/amims/life_time_limit/life_time_limit_report/list';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function lifeTimeLimitReportControllerFindOne(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, lifeTimeLimitReportControllerFindOne.PATH, 'get');
    if (params) {
        rb.path('id', params.id, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
lifeTimeLimitReportControllerFindOne.PATH = '/amims/life_time_limit/life_time_limit_report/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
class LifeTimeLimitReportService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `lifeTimeLimitReportControllerFindAll()` */
    static { this.LifeTimeLimitReportControllerFindAllPath = '/amims/life_time_limit/life_time_limit_report/list'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `lifeTimeLimitReportControllerFindAll()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    lifeTimeLimitReportControllerFindAll$Response(params, context) {
        return lifeTimeLimitReportControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `lifeTimeLimitReportControllerFindAll$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    lifeTimeLimitReportControllerFindAll(params, context) {
        return this.lifeTimeLimitReportControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `lifeTimeLimitReportControllerFindOne()` */
    static { this.LifeTimeLimitReportControllerFindOnePath = '/amims/life_time_limit/life_time_limit_report/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `lifeTimeLimitReportControllerFindOne()` instead.
     *
     * This method doesn't expect any request body.
     */
    lifeTimeLimitReportControllerFindOne$Response(params, context) {
        return lifeTimeLimitReportControllerFindOne(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `lifeTimeLimitReportControllerFindOne$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    lifeTimeLimitReportControllerFindOne(params, context) {
        return this.lifeTimeLimitReportControllerFindOne$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: LifeTimeLimitReportService, deps: [{ token: ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: LifeTimeLimitReportService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: LifeTimeLimitReportService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: ApiConfiguration }, { type: i2.HttpClient }] });

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function lifeTimeLimitWidgetControllerFindAll(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, lifeTimeLimitWidgetControllerFindAll.PATH, 'post');
    if (params) {
        rb.query('filter', params.filter, {});
        rb.query('joinWhere', params.joinWhere, {});
        rb.query('select', params.select, {});
        rb.query('groupBy', params.groupBy, {});
        rb.query('sortKey', params.sortKey, {});
        rb.query('sortValue', params.sortValue, {});
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
lifeTimeLimitWidgetControllerFindAll.PATH = '/amims/life_time_limit/life_time_limit_widget';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
class LifeTimeLimitWidgetService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `lifeTimeLimitWidgetControllerFindAll()` */
    static { this.LifeTimeLimitWidgetControllerFindAllPath = '/amims/life_time_limit/life_time_limit_widget'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `lifeTimeLimitWidgetControllerFindAll()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    lifeTimeLimitWidgetControllerFindAll$Response(params, context) {
        return lifeTimeLimitWidgetControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `lifeTimeLimitWidgetControllerFindAll$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    lifeTimeLimitWidgetControllerFindAll(params, context) {
        return this.lifeTimeLimitWidgetControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: LifeTimeLimitWidgetService, deps: [{ token: ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: LifeTimeLimitWidgetService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: LifeTimeLimitWidgetService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: ApiConfiguration }, { type: i2.HttpClient }] });

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function locationFlightControllerCreate(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, locationFlightControllerCreate.PATH, 'post');
    if (params) {
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
locationFlightControllerCreate.PATH = '/amims/location_flight/location_flight';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function locationFlightControllerFindAll(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, locationFlightControllerFindAll.PATH, 'get');
    if (params) {
        rb.query('pageIndex', params.pageIndex, {});
        rb.query('pageSize', params.pageSize, {});
        rb.query('filter', params.filter, {});
        rb.query('sortKey', params.sortKey, {});
        rb.query('sortValue', params.sortValue, {});
        rb.query('search_field', params.search_field, {});
        rb.query('search_keyword', params.search_keyword, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
locationFlightControllerFindAll.PATH = '/amims/location_flight/location_flight';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function locationFlightControllerFindOne(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, locationFlightControllerFindOne.PATH, 'get');
    if (params) {
        rb.path('id', params.id, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
locationFlightControllerFindOne.PATH = '/amims/location_flight/location_flight/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function locationFlightControllerRemove(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, locationFlightControllerRemove.PATH, 'delete');
    if (params) {
        rb.path('id', params.id, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
locationFlightControllerRemove.PATH = '/amims/location_flight/location_flight/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function locationFlightControllerUpdate(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, locationFlightControllerUpdate.PATH, 'put');
    if (params) {
        rb.path('id', params.id, {});
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
locationFlightControllerUpdate.PATH = '/amims/location_flight/location_flight/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
class LocationFlightService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `locationFlightControllerFindAll()` */
    static { this.LocationFlightControllerFindAllPath = '/amims/location_flight/location_flight'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `locationFlightControllerFindAll()` instead.
     *
     * This method doesn't expect any request body.
     */
    locationFlightControllerFindAll$Response(params, context) {
        return locationFlightControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `locationFlightControllerFindAll$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    locationFlightControllerFindAll(params, context) {
        return this.locationFlightControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `locationFlightControllerCreate()` */
    static { this.LocationFlightControllerCreatePath = '/amims/location_flight/location_flight'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `locationFlightControllerCreate()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    locationFlightControllerCreate$Response(params, context) {
        return locationFlightControllerCreate(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `locationFlightControllerCreate$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    locationFlightControllerCreate(params, context) {
        return this.locationFlightControllerCreate$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `locationFlightControllerFindOne()` */
    static { this.LocationFlightControllerFindOnePath = '/amims/location_flight/location_flight/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `locationFlightControllerFindOne()` instead.
     *
     * This method doesn't expect any request body.
     */
    locationFlightControllerFindOne$Response(params, context) {
        return locationFlightControllerFindOne(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `locationFlightControllerFindOne$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    locationFlightControllerFindOne(params, context) {
        return this.locationFlightControllerFindOne$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `locationFlightControllerUpdate()` */
    static { this.LocationFlightControllerUpdatePath = '/amims/location_flight/location_flight/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `locationFlightControllerUpdate()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    locationFlightControllerUpdate$Response(params, context) {
        return locationFlightControllerUpdate(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `locationFlightControllerUpdate$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    locationFlightControllerUpdate(params, context) {
        return this.locationFlightControllerUpdate$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `locationFlightControllerRemove()` */
    static { this.LocationFlightControllerRemovePath = '/amims/location_flight/location_flight/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `locationFlightControllerRemove()` instead.
     *
     * This method doesn't expect any request body.
     */
    locationFlightControllerRemove$Response(params, context) {
        return locationFlightControllerRemove(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `locationFlightControllerRemove$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    locationFlightControllerRemove(params, context) {
        return this.locationFlightControllerRemove$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: LocationFlightService, deps: [{ token: ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: LocationFlightService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: LocationFlightService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: ApiConfiguration }, { type: i2.HttpClient }] });

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function locationFlightReportControllerFindAll(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, locationFlightReportControllerFindAll.PATH, 'post');
    if (params) {
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
locationFlightReportControllerFindAll.PATH = '/amims/location_flight/location_flight_report/list';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function locationFlightReportControllerFindOne(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, locationFlightReportControllerFindOne.PATH, 'get');
    if (params) {
        rb.path('id', params.id, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
locationFlightReportControllerFindOne.PATH = '/amims/location_flight/location_flight_report/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
class LocationFlightReportService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `locationFlightReportControllerFindAll()` */
    static { this.LocationFlightReportControllerFindAllPath = '/amims/location_flight/location_flight_report/list'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `locationFlightReportControllerFindAll()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    locationFlightReportControllerFindAll$Response(params, context) {
        return locationFlightReportControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `locationFlightReportControllerFindAll$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    locationFlightReportControllerFindAll(params, context) {
        return this.locationFlightReportControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `locationFlightReportControllerFindOne()` */
    static { this.LocationFlightReportControllerFindOnePath = '/amims/location_flight/location_flight_report/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `locationFlightReportControllerFindOne()` instead.
     *
     * This method doesn't expect any request body.
     */
    locationFlightReportControllerFindOne$Response(params, context) {
        return locationFlightReportControllerFindOne(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `locationFlightReportControllerFindOne$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    locationFlightReportControllerFindOne(params, context) {
        return this.locationFlightReportControllerFindOne$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: LocationFlightReportService, deps: [{ token: ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: LocationFlightReportService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: LocationFlightReportService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: ApiConfiguration }, { type: i2.HttpClient }] });

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function locationFlightWidgetControllerFindAll(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, locationFlightWidgetControllerFindAll.PATH, 'post');
    if (params) {
        rb.query('filter', params.filter, {});
        rb.query('joinWhere', params.joinWhere, {});
        rb.query('select', params.select, {});
        rb.query('groupBy', params.groupBy, {});
        rb.query('sortKey', params.sortKey, {});
        rb.query('sortValue', params.sortValue, {});
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
locationFlightWidgetControllerFindAll.PATH = '/amims/location_flight/location_flight_widget';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
class LocationFlightWidgetService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `locationFlightWidgetControllerFindAll()` */
    static { this.LocationFlightWidgetControllerFindAllPath = '/amims/location_flight/location_flight_widget'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `locationFlightWidgetControllerFindAll()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    locationFlightWidgetControllerFindAll$Response(params, context) {
        return locationFlightWidgetControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `locationFlightWidgetControllerFindAll$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    locationFlightWidgetControllerFindAll(params, context) {
        return this.locationFlightWidgetControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: LocationFlightWidgetService, deps: [{ token: ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: LocationFlightWidgetService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: LocationFlightWidgetService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: ApiConfiguration }, { type: i2.HttpClient }] });

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function logProcessControllerCreate(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, logProcessControllerCreate.PATH, 'post');
    if (params) {
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
logProcessControllerCreate.PATH = '/amims/log_process/log_process';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function logProcessControllerFindAll(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, logProcessControllerFindAll.PATH, 'get');
    if (params) {
        rb.query('pageIndex', params.pageIndex, {});
        rb.query('pageSize', params.pageSize, {});
        rb.query('filter', params.filter, {});
        rb.query('sortKey', params.sortKey, {});
        rb.query('sortValue', params.sortValue, {});
        rb.query('search_field', params.search_field, {});
        rb.query('search_keyword', params.search_keyword, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
logProcessControllerFindAll.PATH = '/amims/log_process/log_process';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function logProcessControllerFindOne(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, logProcessControllerFindOne.PATH, 'get');
    if (params) {
        rb.path('id', params.id, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
logProcessControllerFindOne.PATH = '/amims/log_process/log_process/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function logProcessControllerRemove(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, logProcessControllerRemove.PATH, 'delete');
    if (params) {
        rb.path('id', params.id, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
logProcessControllerRemove.PATH = '/amims/log_process/log_process/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function logProcessControllerUpdate(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, logProcessControllerUpdate.PATH, 'put');
    if (params) {
        rb.path('id', params.id, {});
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
logProcessControllerUpdate.PATH = '/amims/log_process/log_process/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
class LogProcessService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `logProcessControllerFindAll()` */
    static { this.LogProcessControllerFindAllPath = '/amims/log_process/log_process'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `logProcessControllerFindAll()` instead.
     *
     * This method doesn't expect any request body.
     */
    logProcessControllerFindAll$Response(params, context) {
        return logProcessControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `logProcessControllerFindAll$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    logProcessControllerFindAll(params, context) {
        return this.logProcessControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `logProcessControllerCreate()` */
    static { this.LogProcessControllerCreatePath = '/amims/log_process/log_process'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `logProcessControllerCreate()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    logProcessControllerCreate$Response(params, context) {
        return logProcessControllerCreate(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `logProcessControllerCreate$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    logProcessControllerCreate(params, context) {
        return this.logProcessControllerCreate$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `logProcessControllerFindOne()` */
    static { this.LogProcessControllerFindOnePath = '/amims/log_process/log_process/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `logProcessControllerFindOne()` instead.
     *
     * This method doesn't expect any request body.
     */
    logProcessControllerFindOne$Response(params, context) {
        return logProcessControllerFindOne(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `logProcessControllerFindOne$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    logProcessControllerFindOne(params, context) {
        return this.logProcessControllerFindOne$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `logProcessControllerUpdate()` */
    static { this.LogProcessControllerUpdatePath = '/amims/log_process/log_process/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `logProcessControllerUpdate()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    logProcessControllerUpdate$Response(params, context) {
        return logProcessControllerUpdate(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `logProcessControllerUpdate$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    logProcessControllerUpdate(params, context) {
        return this.logProcessControllerUpdate$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `logProcessControllerRemove()` */
    static { this.LogProcessControllerRemovePath = '/amims/log_process/log_process/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `logProcessControllerRemove()` instead.
     *
     * This method doesn't expect any request body.
     */
    logProcessControllerRemove$Response(params, context) {
        return logProcessControllerRemove(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `logProcessControllerRemove$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    logProcessControllerRemove(params, context) {
        return this.logProcessControllerRemove$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: LogProcessService, deps: [{ token: ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: LogProcessService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: LogProcessService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: ApiConfiguration }, { type: i2.HttpClient }] });

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function logProcessReportControllerFindAll(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, logProcessReportControllerFindAll.PATH, 'post');
    if (params) {
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
logProcessReportControllerFindAll.PATH = '/amims/log_process/log_process_report/list';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function logProcessReportControllerFindOne(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, logProcessReportControllerFindOne.PATH, 'get');
    if (params) {
        rb.path('id', params.id, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
logProcessReportControllerFindOne.PATH = '/amims/log_process/log_process_report/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
class LogProcessReportService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `logProcessReportControllerFindAll()` */
    static { this.LogProcessReportControllerFindAllPath = '/amims/log_process/log_process_report/list'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `logProcessReportControllerFindAll()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    logProcessReportControllerFindAll$Response(params, context) {
        return logProcessReportControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `logProcessReportControllerFindAll$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    logProcessReportControllerFindAll(params, context) {
        return this.logProcessReportControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `logProcessReportControllerFindOne()` */
    static { this.LogProcessReportControllerFindOnePath = '/amims/log_process/log_process_report/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `logProcessReportControllerFindOne()` instead.
     *
     * This method doesn't expect any request body.
     */
    logProcessReportControllerFindOne$Response(params, context) {
        return logProcessReportControllerFindOne(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `logProcessReportControllerFindOne$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    logProcessReportControllerFindOne(params, context) {
        return this.logProcessReportControllerFindOne$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: LogProcessReportService, deps: [{ token: ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: LogProcessReportService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: LogProcessReportService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: ApiConfiguration }, { type: i2.HttpClient }] });

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function logProcessWidgetControllerFindAll(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, logProcessWidgetControllerFindAll.PATH, 'post');
    if (params) {
        rb.query('filter', params.filter, {});
        rb.query('joinWhere', params.joinWhere, {});
        rb.query('select', params.select, {});
        rb.query('groupBy', params.groupBy, {});
        rb.query('sortKey', params.sortKey, {});
        rb.query('sortValue', params.sortValue, {});
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
logProcessWidgetControllerFindAll.PATH = '/amims/log_process/log_process_widget';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
class LogProcessWidgetService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `logProcessWidgetControllerFindAll()` */
    static { this.LogProcessWidgetControllerFindAllPath = '/amims/log_process/log_process_widget'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `logProcessWidgetControllerFindAll()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    logProcessWidgetControllerFindAll$Response(params, context) {
        return logProcessWidgetControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `logProcessWidgetControllerFindAll$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    logProcessWidgetControllerFindAll(params, context) {
        return this.logProcessWidgetControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: LogProcessWidgetService, deps: [{ token: ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: LogProcessWidgetService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: LogProcessWidgetService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: ApiConfiguration }, { type: i2.HttpClient }] });

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function logSpControllerCreate(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, logSpControllerCreate.PATH, 'post');
    if (params) {
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
logSpControllerCreate.PATH = '/amims/log_sp/log_sp';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function logSpControllerFindAll(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, logSpControllerFindAll.PATH, 'get');
    if (params) {
        rb.query('pageIndex', params.pageIndex, {});
        rb.query('pageSize', params.pageSize, {});
        rb.query('filter', params.filter, {});
        rb.query('sortKey', params.sortKey, {});
        rb.query('sortValue', params.sortValue, {});
        rb.query('search_field', params.search_field, {});
        rb.query('search_keyword', params.search_keyword, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
logSpControllerFindAll.PATH = '/amims/log_sp/log_sp';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function logSpControllerFindOne(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, logSpControllerFindOne.PATH, 'get');
    if (params) {
        rb.path('id', params.id, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
logSpControllerFindOne.PATH = '/amims/log_sp/log_sp/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function logSpControllerRemove(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, logSpControllerRemove.PATH, 'delete');
    if (params) {
        rb.path('id', params.id, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
logSpControllerRemove.PATH = '/amims/log_sp/log_sp/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function logSpControllerUpdate(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, logSpControllerUpdate.PATH, 'put');
    if (params) {
        rb.path('id', params.id, {});
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
logSpControllerUpdate.PATH = '/amims/log_sp/log_sp/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
class LogSpService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `logSpControllerFindAll()` */
    static { this.LogSpControllerFindAllPath = '/amims/log_sp/log_sp'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `logSpControllerFindAll()` instead.
     *
     * This method doesn't expect any request body.
     */
    logSpControllerFindAll$Response(params, context) {
        return logSpControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `logSpControllerFindAll$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    logSpControllerFindAll(params, context) {
        return this.logSpControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `logSpControllerCreate()` */
    static { this.LogSpControllerCreatePath = '/amims/log_sp/log_sp'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `logSpControllerCreate()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    logSpControllerCreate$Response(params, context) {
        return logSpControllerCreate(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `logSpControllerCreate$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    logSpControllerCreate(params, context) {
        return this.logSpControllerCreate$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `logSpControllerFindOne()` */
    static { this.LogSpControllerFindOnePath = '/amims/log_sp/log_sp/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `logSpControllerFindOne()` instead.
     *
     * This method doesn't expect any request body.
     */
    logSpControllerFindOne$Response(params, context) {
        return logSpControllerFindOne(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `logSpControllerFindOne$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    logSpControllerFindOne(params, context) {
        return this.logSpControllerFindOne$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `logSpControllerUpdate()` */
    static { this.LogSpControllerUpdatePath = '/amims/log_sp/log_sp/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `logSpControllerUpdate()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    logSpControllerUpdate$Response(params, context) {
        return logSpControllerUpdate(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `logSpControllerUpdate$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    logSpControllerUpdate(params, context) {
        return this.logSpControllerUpdate$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `logSpControllerRemove()` */
    static { this.LogSpControllerRemovePath = '/amims/log_sp/log_sp/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `logSpControllerRemove()` instead.
     *
     * This method doesn't expect any request body.
     */
    logSpControllerRemove$Response(params, context) {
        return logSpControllerRemove(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `logSpControllerRemove$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    logSpControllerRemove(params, context) {
        return this.logSpControllerRemove$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: LogSpService, deps: [{ token: ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: LogSpService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: LogSpService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: ApiConfiguration }, { type: i2.HttpClient }] });

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function logSpReportControllerFindAll(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, logSpReportControllerFindAll.PATH, 'post');
    if (params) {
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
logSpReportControllerFindAll.PATH = '/amims/log_sp/log_sp_report/list';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function logSpReportControllerFindOne(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, logSpReportControllerFindOne.PATH, 'get');
    if (params) {
        rb.path('id', params.id, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
logSpReportControllerFindOne.PATH = '/amims/log_sp/log_sp_report/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
class LogSpReportService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `logSpReportControllerFindAll()` */
    static { this.LogSpReportControllerFindAllPath = '/amims/log_sp/log_sp_report/list'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `logSpReportControllerFindAll()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    logSpReportControllerFindAll$Response(params, context) {
        return logSpReportControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `logSpReportControllerFindAll$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    logSpReportControllerFindAll(params, context) {
        return this.logSpReportControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `logSpReportControllerFindOne()` */
    static { this.LogSpReportControllerFindOnePath = '/amims/log_sp/log_sp_report/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `logSpReportControllerFindOne()` instead.
     *
     * This method doesn't expect any request body.
     */
    logSpReportControllerFindOne$Response(params, context) {
        return logSpReportControllerFindOne(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `logSpReportControllerFindOne$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    logSpReportControllerFindOne(params, context) {
        return this.logSpReportControllerFindOne$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: LogSpReportService, deps: [{ token: ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: LogSpReportService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: LogSpReportService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: ApiConfiguration }, { type: i2.HttpClient }] });

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function logSpWidgetControllerFindAll(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, logSpWidgetControllerFindAll.PATH, 'post');
    if (params) {
        rb.query('filter', params.filter, {});
        rb.query('joinWhere', params.joinWhere, {});
        rb.query('select', params.select, {});
        rb.query('groupBy', params.groupBy, {});
        rb.query('sortKey', params.sortKey, {});
        rb.query('sortValue', params.sortValue, {});
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
logSpWidgetControllerFindAll.PATH = '/amims/log_sp/log_sp_widget';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
class LogSpWidgetService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `logSpWidgetControllerFindAll()` */
    static { this.LogSpWidgetControllerFindAllPath = '/amims/log_sp/log_sp_widget'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `logSpWidgetControllerFindAll()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    logSpWidgetControllerFindAll$Response(params, context) {
        return logSpWidgetControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `logSpWidgetControllerFindAll$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    logSpWidgetControllerFindAll(params, context) {
        return this.logSpWidgetControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: LogSpWidgetService, deps: [{ token: ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: LogSpWidgetService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: LogSpWidgetService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: ApiConfiguration }, { type: i2.HttpClient }] });

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function logTransferControllerCreate(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, logTransferControllerCreate.PATH, 'post');
    if (params) {
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
logTransferControllerCreate.PATH = '/amims/log_transfer/log_transfer';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function logTransferControllerFindAll(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, logTransferControllerFindAll.PATH, 'get');
    if (params) {
        rb.query('pageIndex', params.pageIndex, {});
        rb.query('pageSize', params.pageSize, {});
        rb.query('filter', params.filter, {});
        rb.query('sortKey', params.sortKey, {});
        rb.query('sortValue', params.sortValue, {});
        rb.query('search_field', params.search_field, {});
        rb.query('search_keyword', params.search_keyword, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
logTransferControllerFindAll.PATH = '/amims/log_transfer/log_transfer';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function logTransferControllerFindOne(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, logTransferControllerFindOne.PATH, 'get');
    if (params) {
        rb.path('id', params.id, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
logTransferControllerFindOne.PATH = '/amims/log_transfer/log_transfer/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function logTransferControllerRemove(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, logTransferControllerRemove.PATH, 'delete');
    if (params) {
        rb.path('id', params.id, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
logTransferControllerRemove.PATH = '/amims/log_transfer/log_transfer/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function logTransferControllerUpdate(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, logTransferControllerUpdate.PATH, 'put');
    if (params) {
        rb.path('id', params.id, {});
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
logTransferControllerUpdate.PATH = '/amims/log_transfer/log_transfer/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
class LogTransferService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `logTransferControllerFindAll()` */
    static { this.LogTransferControllerFindAllPath = '/amims/log_transfer/log_transfer'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `logTransferControllerFindAll()` instead.
     *
     * This method doesn't expect any request body.
     */
    logTransferControllerFindAll$Response(params, context) {
        return logTransferControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `logTransferControllerFindAll$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    logTransferControllerFindAll(params, context) {
        return this.logTransferControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `logTransferControllerCreate()` */
    static { this.LogTransferControllerCreatePath = '/amims/log_transfer/log_transfer'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `logTransferControllerCreate()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    logTransferControllerCreate$Response(params, context) {
        return logTransferControllerCreate(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `logTransferControllerCreate$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    logTransferControllerCreate(params, context) {
        return this.logTransferControllerCreate$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `logTransferControllerFindOne()` */
    static { this.LogTransferControllerFindOnePath = '/amims/log_transfer/log_transfer/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `logTransferControllerFindOne()` instead.
     *
     * This method doesn't expect any request body.
     */
    logTransferControllerFindOne$Response(params, context) {
        return logTransferControllerFindOne(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `logTransferControllerFindOne$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    logTransferControllerFindOne(params, context) {
        return this.logTransferControllerFindOne$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `logTransferControllerUpdate()` */
    static { this.LogTransferControllerUpdatePath = '/amims/log_transfer/log_transfer/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `logTransferControllerUpdate()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    logTransferControllerUpdate$Response(params, context) {
        return logTransferControllerUpdate(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `logTransferControllerUpdate$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    logTransferControllerUpdate(params, context) {
        return this.logTransferControllerUpdate$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `logTransferControllerRemove()` */
    static { this.LogTransferControllerRemovePath = '/amims/log_transfer/log_transfer/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `logTransferControllerRemove()` instead.
     *
     * This method doesn't expect any request body.
     */
    logTransferControllerRemove$Response(params, context) {
        return logTransferControllerRemove(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `logTransferControllerRemove$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    logTransferControllerRemove(params, context) {
        return this.logTransferControllerRemove$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: LogTransferService, deps: [{ token: ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: LogTransferService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: LogTransferService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: ApiConfiguration }, { type: i2.HttpClient }] });

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function logTransferReportControllerFindAll(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, logTransferReportControllerFindAll.PATH, 'post');
    if (params) {
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
logTransferReportControllerFindAll.PATH = '/amims/log_transfer/log_transfer_report/list';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function logTransferReportControllerFindOne(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, logTransferReportControllerFindOne.PATH, 'get');
    if (params) {
        rb.path('id', params.id, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
logTransferReportControllerFindOne.PATH = '/amims/log_transfer/log_transfer_report/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
class LogTransferReportService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `logTransferReportControllerFindAll()` */
    static { this.LogTransferReportControllerFindAllPath = '/amims/log_transfer/log_transfer_report/list'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `logTransferReportControllerFindAll()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    logTransferReportControllerFindAll$Response(params, context) {
        return logTransferReportControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `logTransferReportControllerFindAll$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    logTransferReportControllerFindAll(params, context) {
        return this.logTransferReportControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `logTransferReportControllerFindOne()` */
    static { this.LogTransferReportControllerFindOnePath = '/amims/log_transfer/log_transfer_report/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `logTransferReportControllerFindOne()` instead.
     *
     * This method doesn't expect any request body.
     */
    logTransferReportControllerFindOne$Response(params, context) {
        return logTransferReportControllerFindOne(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `logTransferReportControllerFindOne$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    logTransferReportControllerFindOne(params, context) {
        return this.logTransferReportControllerFindOne$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: LogTransferReportService, deps: [{ token: ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: LogTransferReportService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: LogTransferReportService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: ApiConfiguration }, { type: i2.HttpClient }] });

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function logTransferWidgetControllerFindAll(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, logTransferWidgetControllerFindAll.PATH, 'post');
    if (params) {
        rb.query('filter', params.filter, {});
        rb.query('joinWhere', params.joinWhere, {});
        rb.query('select', params.select, {});
        rb.query('groupBy', params.groupBy, {});
        rb.query('sortKey', params.sortKey, {});
        rb.query('sortValue', params.sortValue, {});
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
logTransferWidgetControllerFindAll.PATH = '/amims/log_transfer/log_transfer_widget';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
class LogTransferWidgetService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `logTransferWidgetControllerFindAll()` */
    static { this.LogTransferWidgetControllerFindAllPath = '/amims/log_transfer/log_transfer_widget'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `logTransferWidgetControllerFindAll()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    logTransferWidgetControllerFindAll$Response(params, context) {
        return logTransferWidgetControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `logTransferWidgetControllerFindAll$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    logTransferWidgetControllerFindAll(params, context) {
        return this.logTransferWidgetControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: LogTransferWidgetService, deps: [{ token: ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: LogTransferWidgetService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: LogTransferWidgetService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: ApiConfiguration }, { type: i2.HttpClient }] });

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function logTsnTsoControllerCreate(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, logTsnTsoControllerCreate.PATH, 'post');
    if (params) {
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
logTsnTsoControllerCreate.PATH = '/amims/log_tsn_tso/log_tsn_tso';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function logTsnTsoControllerFindAll(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, logTsnTsoControllerFindAll.PATH, 'get');
    if (params) {
        rb.query('pageIndex', params.pageIndex, {});
        rb.query('pageSize', params.pageSize, {});
        rb.query('filter', params.filter, {});
        rb.query('sortKey', params.sortKey, {});
        rb.query('sortValue', params.sortValue, {});
        rb.query('search_field', params.search_field, {});
        rb.query('search_keyword', params.search_keyword, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
logTsnTsoControllerFindAll.PATH = '/amims/log_tsn_tso/log_tsn_tso';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function logTsnTsoControllerFindOne(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, logTsnTsoControllerFindOne.PATH, 'get');
    if (params) {
        rb.path('id', params.id, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
logTsnTsoControllerFindOne.PATH = '/amims/log_tsn_tso/log_tsn_tso/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function logTsnTsoControllerRemove(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, logTsnTsoControllerRemove.PATH, 'delete');
    if (params) {
        rb.path('id', params.id, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
logTsnTsoControllerRemove.PATH = '/amims/log_tsn_tso/log_tsn_tso/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function logTsnTsoControllerUpdate(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, logTsnTsoControllerUpdate.PATH, 'put');
    if (params) {
        rb.path('id', params.id, {});
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
logTsnTsoControllerUpdate.PATH = '/amims/log_tsn_tso/log_tsn_tso/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
class LogTsnTsoService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `logTsnTsoControllerFindAll()` */
    static { this.LogTsnTsoControllerFindAllPath = '/amims/log_tsn_tso/log_tsn_tso'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `logTsnTsoControllerFindAll()` instead.
     *
     * This method doesn't expect any request body.
     */
    logTsnTsoControllerFindAll$Response(params, context) {
        return logTsnTsoControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `logTsnTsoControllerFindAll$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    logTsnTsoControllerFindAll(params, context) {
        return this.logTsnTsoControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `logTsnTsoControllerCreate()` */
    static { this.LogTsnTsoControllerCreatePath = '/amims/log_tsn_tso/log_tsn_tso'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `logTsnTsoControllerCreate()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    logTsnTsoControllerCreate$Response(params, context) {
        return logTsnTsoControllerCreate(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `logTsnTsoControllerCreate$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    logTsnTsoControllerCreate(params, context) {
        return this.logTsnTsoControllerCreate$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `logTsnTsoControllerFindOne()` */
    static { this.LogTsnTsoControllerFindOnePath = '/amims/log_tsn_tso/log_tsn_tso/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `logTsnTsoControllerFindOne()` instead.
     *
     * This method doesn't expect any request body.
     */
    logTsnTsoControllerFindOne$Response(params, context) {
        return logTsnTsoControllerFindOne(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `logTsnTsoControllerFindOne$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    logTsnTsoControllerFindOne(params, context) {
        return this.logTsnTsoControllerFindOne$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `logTsnTsoControllerUpdate()` */
    static { this.LogTsnTsoControllerUpdatePath = '/amims/log_tsn_tso/log_tsn_tso/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `logTsnTsoControllerUpdate()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    logTsnTsoControllerUpdate$Response(params, context) {
        return logTsnTsoControllerUpdate(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `logTsnTsoControllerUpdate$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    logTsnTsoControllerUpdate(params, context) {
        return this.logTsnTsoControllerUpdate$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `logTsnTsoControllerRemove()` */
    static { this.LogTsnTsoControllerRemovePath = '/amims/log_tsn_tso/log_tsn_tso/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `logTsnTsoControllerRemove()` instead.
     *
     * This method doesn't expect any request body.
     */
    logTsnTsoControllerRemove$Response(params, context) {
        return logTsnTsoControllerRemove(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `logTsnTsoControllerRemove$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    logTsnTsoControllerRemove(params, context) {
        return this.logTsnTsoControllerRemove$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: LogTsnTsoService, deps: [{ token: ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: LogTsnTsoService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: LogTsnTsoService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: ApiConfiguration }, { type: i2.HttpClient }] });

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function logTsnTsoReportControllerFindAll(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, logTsnTsoReportControllerFindAll.PATH, 'post');
    if (params) {
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
logTsnTsoReportControllerFindAll.PATH = '/amims/log_tsn_tso/log_tsn_tso_report/list';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function logTsnTsoReportControllerFindOne(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, logTsnTsoReportControllerFindOne.PATH, 'get');
    if (params) {
        rb.path('id', params.id, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
logTsnTsoReportControllerFindOne.PATH = '/amims/log_tsn_tso/log_tsn_tso_report/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
class LogTsnTsoReportService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `logTsnTsoReportControllerFindAll()` */
    static { this.LogTsnTsoReportControllerFindAllPath = '/amims/log_tsn_tso/log_tsn_tso_report/list'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `logTsnTsoReportControllerFindAll()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    logTsnTsoReportControllerFindAll$Response(params, context) {
        return logTsnTsoReportControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `logTsnTsoReportControllerFindAll$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    logTsnTsoReportControllerFindAll(params, context) {
        return this.logTsnTsoReportControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `logTsnTsoReportControllerFindOne()` */
    static { this.LogTsnTsoReportControllerFindOnePath = '/amims/log_tsn_tso/log_tsn_tso_report/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `logTsnTsoReportControllerFindOne()` instead.
     *
     * This method doesn't expect any request body.
     */
    logTsnTsoReportControllerFindOne$Response(params, context) {
        return logTsnTsoReportControllerFindOne(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `logTsnTsoReportControllerFindOne$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    logTsnTsoReportControllerFindOne(params, context) {
        return this.logTsnTsoReportControllerFindOne$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: LogTsnTsoReportService, deps: [{ token: ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: LogTsnTsoReportService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: LogTsnTsoReportService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: ApiConfiguration }, { type: i2.HttpClient }] });

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function logTsnTsoWidgetControllerFindAll(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, logTsnTsoWidgetControllerFindAll.PATH, 'post');
    if (params) {
        rb.query('filter', params.filter, {});
        rb.query('joinWhere', params.joinWhere, {});
        rb.query('select', params.select, {});
        rb.query('groupBy', params.groupBy, {});
        rb.query('sortKey', params.sortKey, {});
        rb.query('sortValue', params.sortValue, {});
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
logTsnTsoWidgetControllerFindAll.PATH = '/amims/log_tsn_tso/log_tsn_tso_widget';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
class LogTsnTsoWidgetService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `logTsnTsoWidgetControllerFindAll()` */
    static { this.LogTsnTsoWidgetControllerFindAllPath = '/amims/log_tsn_tso/log_tsn_tso_widget'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `logTsnTsoWidgetControllerFindAll()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    logTsnTsoWidgetControllerFindAll$Response(params, context) {
        return logTsnTsoWidgetControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `logTsnTsoWidgetControllerFindAll$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    logTsnTsoWidgetControllerFindAll(params, context) {
        return this.logTsnTsoWidgetControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: LogTsnTsoWidgetService, deps: [{ token: ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: LogTsnTsoWidgetService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: LogTsnTsoWidgetService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: ApiConfiguration }, { type: i2.HttpClient }] });

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function logUserControllerCreate(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, logUserControllerCreate.PATH, 'post');
    if (params) {
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
logUserControllerCreate.PATH = '/amims/log_user/log_user';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function logUserControllerFindAll(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, logUserControllerFindAll.PATH, 'get');
    if (params) {
        rb.query('pageIndex', params.pageIndex, {});
        rb.query('pageSize', params.pageSize, {});
        rb.query('filter', params.filter, {});
        rb.query('sortKey', params.sortKey, {});
        rb.query('sortValue', params.sortValue, {});
        rb.query('search_field', params.search_field, {});
        rb.query('search_keyword', params.search_keyword, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
logUserControllerFindAll.PATH = '/amims/log_user/log_user';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function logUserControllerFindOne(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, logUserControllerFindOne.PATH, 'get');
    if (params) {
        rb.path('id', params.id, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
logUserControllerFindOne.PATH = '/amims/log_user/log_user/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function logUserControllerRemove(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, logUserControllerRemove.PATH, 'delete');
    if (params) {
        rb.path('id', params.id, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
logUserControllerRemove.PATH = '/amims/log_user/log_user/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function logUserControllerUpdate(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, logUserControllerUpdate.PATH, 'put');
    if (params) {
        rb.path('id', params.id, {});
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
logUserControllerUpdate.PATH = '/amims/log_user/log_user/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
class LogUserService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `logUserControllerFindAll()` */
    static { this.LogUserControllerFindAllPath = '/amims/log_user/log_user'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `logUserControllerFindAll()` instead.
     *
     * This method doesn't expect any request body.
     */
    logUserControllerFindAll$Response(params, context) {
        return logUserControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `logUserControllerFindAll$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    logUserControllerFindAll(params, context) {
        return this.logUserControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `logUserControllerCreate()` */
    static { this.LogUserControllerCreatePath = '/amims/log_user/log_user'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `logUserControllerCreate()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    logUserControllerCreate$Response(params, context) {
        return logUserControllerCreate(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `logUserControllerCreate$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    logUserControllerCreate(params, context) {
        return this.logUserControllerCreate$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `logUserControllerFindOne()` */
    static { this.LogUserControllerFindOnePath = '/amims/log_user/log_user/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `logUserControllerFindOne()` instead.
     *
     * This method doesn't expect any request body.
     */
    logUserControllerFindOne$Response(params, context) {
        return logUserControllerFindOne(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `logUserControllerFindOne$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    logUserControllerFindOne(params, context) {
        return this.logUserControllerFindOne$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `logUserControllerUpdate()` */
    static { this.LogUserControllerUpdatePath = '/amims/log_user/log_user/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `logUserControllerUpdate()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    logUserControllerUpdate$Response(params, context) {
        return logUserControllerUpdate(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `logUserControllerUpdate$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    logUserControllerUpdate(params, context) {
        return this.logUserControllerUpdate$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `logUserControllerRemove()` */
    static { this.LogUserControllerRemovePath = '/amims/log_user/log_user/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `logUserControllerRemove()` instead.
     *
     * This method doesn't expect any request body.
     */
    logUserControllerRemove$Response(params, context) {
        return logUserControllerRemove(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `logUserControllerRemove$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    logUserControllerRemove(params, context) {
        return this.logUserControllerRemove$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: LogUserService, deps: [{ token: ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: LogUserService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: LogUserService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: ApiConfiguration }, { type: i2.HttpClient }] });

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function maintenanceControllerCreate(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, maintenanceControllerCreate.PATH, 'post');
    if (params) {
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
maintenanceControllerCreate.PATH = '/amims/maintenance/maintenance';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function maintenanceControllerFindAll(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, maintenanceControllerFindAll.PATH, 'get');
    if (params) {
        rb.query('pageIndex', params.pageIndex, {});
        rb.query('pageSize', params.pageSize, {});
        rb.query('filter', params.filter, {});
        rb.query('sortKey', params.sortKey, {});
        rb.query('sortValue', params.sortValue, {});
        rb.query('search_field', params.search_field, {});
        rb.query('search_keyword', params.search_keyword, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
maintenanceControllerFindAll.PATH = '/amims/maintenance/maintenance';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function maintenanceControllerFindOne(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, maintenanceControllerFindOne.PATH, 'get');
    if (params) {
        rb.path('id', params.id, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
maintenanceControllerFindOne.PATH = '/amims/maintenance/maintenance/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function maintenanceControllerRemove(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, maintenanceControllerRemove.PATH, 'delete');
    if (params) {
        rb.path('id', params.id, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
maintenanceControllerRemove.PATH = '/amims/maintenance/maintenance/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function maintenanceControllerUpdate(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, maintenanceControllerUpdate.PATH, 'put');
    if (params) {
        rb.path('id', params.id, {});
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
maintenanceControllerUpdate.PATH = '/amims/maintenance/maintenance/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
class MaintenanceService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `maintenanceControllerFindAll()` */
    static { this.MaintenanceControllerFindAllPath = '/amims/maintenance/maintenance'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `maintenanceControllerFindAll()` instead.
     *
     * This method doesn't expect any request body.
     */
    maintenanceControllerFindAll$Response(params, context) {
        return maintenanceControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `maintenanceControllerFindAll$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    maintenanceControllerFindAll(params, context) {
        return this.maintenanceControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `maintenanceControllerCreate()` */
    static { this.MaintenanceControllerCreatePath = '/amims/maintenance/maintenance'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `maintenanceControllerCreate()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    maintenanceControllerCreate$Response(params, context) {
        return maintenanceControllerCreate(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `maintenanceControllerCreate$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    maintenanceControllerCreate(params, context) {
        return this.maintenanceControllerCreate$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `maintenanceControllerFindOne()` */
    static { this.MaintenanceControllerFindOnePath = '/amims/maintenance/maintenance/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `maintenanceControllerFindOne()` instead.
     *
     * This method doesn't expect any request body.
     */
    maintenanceControllerFindOne$Response(params, context) {
        return maintenanceControllerFindOne(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `maintenanceControllerFindOne$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    maintenanceControllerFindOne(params, context) {
        return this.maintenanceControllerFindOne$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `maintenanceControllerUpdate()` */
    static { this.MaintenanceControllerUpdatePath = '/amims/maintenance/maintenance/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `maintenanceControllerUpdate()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    maintenanceControllerUpdate$Response(params, context) {
        return maintenanceControllerUpdate(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `maintenanceControllerUpdate$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    maintenanceControllerUpdate(params, context) {
        return this.maintenanceControllerUpdate$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `maintenanceControllerRemove()` */
    static { this.MaintenanceControllerRemovePath = '/amims/maintenance/maintenance/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `maintenanceControllerRemove()` instead.
     *
     * This method doesn't expect any request body.
     */
    maintenanceControllerRemove$Response(params, context) {
        return maintenanceControllerRemove(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `maintenanceControllerRemove$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    maintenanceControllerRemove(params, context) {
        return this.maintenanceControllerRemove$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: MaintenanceService, deps: [{ token: ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: MaintenanceService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: MaintenanceService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: ApiConfiguration }, { type: i2.HttpClient }] });

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function maintenanceReportControllerFindAll(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, maintenanceReportControllerFindAll.PATH, 'post');
    if (params) {
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
maintenanceReportControllerFindAll.PATH = '/amims/maintenance/maintenance_report/list';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function maintenanceReportControllerFindOne(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, maintenanceReportControllerFindOne.PATH, 'get');
    if (params) {
        rb.path('id', params.id, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
maintenanceReportControllerFindOne.PATH = '/amims/maintenance/maintenance_report/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
class MaintenanceReportService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `maintenanceReportControllerFindAll()` */
    static { this.MaintenanceReportControllerFindAllPath = '/amims/maintenance/maintenance_report/list'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `maintenanceReportControllerFindAll()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    maintenanceReportControllerFindAll$Response(params, context) {
        return maintenanceReportControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `maintenanceReportControllerFindAll$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    maintenanceReportControllerFindAll(params, context) {
        return this.maintenanceReportControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `maintenanceReportControllerFindOne()` */
    static { this.MaintenanceReportControllerFindOnePath = '/amims/maintenance/maintenance_report/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `maintenanceReportControllerFindOne()` instead.
     *
     * This method doesn't expect any request body.
     */
    maintenanceReportControllerFindOne$Response(params, context) {
        return maintenanceReportControllerFindOne(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `maintenanceReportControllerFindOne$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    maintenanceReportControllerFindOne(params, context) {
        return this.maintenanceReportControllerFindOne$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: MaintenanceReportService, deps: [{ token: ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: MaintenanceReportService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: MaintenanceReportService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: ApiConfiguration }, { type: i2.HttpClient }] });

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function maintenanceWidgetControllerFindAll(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, maintenanceWidgetControllerFindAll.PATH, 'post');
    if (params) {
        rb.query('filter', params.filter, {});
        rb.query('joinWhere', params.joinWhere, {});
        rb.query('select', params.select, {});
        rb.query('groupBy', params.groupBy, {});
        rb.query('sortKey', params.sortKey, {});
        rb.query('sortValue', params.sortValue, {});
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
maintenanceWidgetControllerFindAll.PATH = '/amims/maintenance/maintenance_widget';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
class MaintenanceWidgetService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `maintenanceWidgetControllerFindAll()` */
    static { this.MaintenanceWidgetControllerFindAllPath = '/amims/maintenance/maintenance_widget'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `maintenanceWidgetControllerFindAll()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    maintenanceWidgetControllerFindAll$Response(params, context) {
        return maintenanceWidgetControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `maintenanceWidgetControllerFindAll$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    maintenanceWidgetControllerFindAll(params, context) {
        return this.maintenanceWidgetControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: MaintenanceWidgetService, deps: [{ token: ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: MaintenanceWidgetService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: MaintenanceWidgetService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: ApiConfiguration }, { type: i2.HttpClient }] });

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function maintenanceCodeControllerCreate(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, maintenanceCodeControllerCreate.PATH, 'post');
    if (params) {
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
maintenanceCodeControllerCreate.PATH = '/amims/maintenance_code/maintenance_code';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function maintenanceCodeControllerFindAll(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, maintenanceCodeControllerFindAll.PATH, 'get');
    if (params) {
        rb.query('pageIndex', params.pageIndex, {});
        rb.query('pageSize', params.pageSize, {});
        rb.query('filter', params.filter, {});
        rb.query('sortKey', params.sortKey, {});
        rb.query('sortValue', params.sortValue, {});
        rb.query('search_field', params.search_field, {});
        rb.query('search_keyword', params.search_keyword, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
maintenanceCodeControllerFindAll.PATH = '/amims/maintenance_code/maintenance_code';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function maintenanceCodeControllerFindOne(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, maintenanceCodeControllerFindOne.PATH, 'get');
    if (params) {
        rb.path('id', params.id, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
maintenanceCodeControllerFindOne.PATH = '/amims/maintenance_code/maintenance_code/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function maintenanceCodeControllerRemove(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, maintenanceCodeControllerRemove.PATH, 'delete');
    if (params) {
        rb.path('id', params.id, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
maintenanceCodeControllerRemove.PATH = '/amims/maintenance_code/maintenance_code/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function maintenanceCodeControllerUpdate(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, maintenanceCodeControllerUpdate.PATH, 'put');
    if (params) {
        rb.path('id', params.id, {});
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
maintenanceCodeControllerUpdate.PATH = '/amims/maintenance_code/maintenance_code/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
class MaintenanceCodeService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `maintenanceCodeControllerFindAll()` */
    static { this.MaintenanceCodeControllerFindAllPath = '/amims/maintenance_code/maintenance_code'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `maintenanceCodeControllerFindAll()` instead.
     *
     * This method doesn't expect any request body.
     */
    maintenanceCodeControllerFindAll$Response(params, context) {
        return maintenanceCodeControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `maintenanceCodeControllerFindAll$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    maintenanceCodeControllerFindAll(params, context) {
        return this.maintenanceCodeControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `maintenanceCodeControllerCreate()` */
    static { this.MaintenanceCodeControllerCreatePath = '/amims/maintenance_code/maintenance_code'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `maintenanceCodeControllerCreate()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    maintenanceCodeControllerCreate$Response(params, context) {
        return maintenanceCodeControllerCreate(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `maintenanceCodeControllerCreate$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    maintenanceCodeControllerCreate(params, context) {
        return this.maintenanceCodeControllerCreate$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `maintenanceCodeControllerFindOne()` */
    static { this.MaintenanceCodeControllerFindOnePath = '/amims/maintenance_code/maintenance_code/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `maintenanceCodeControllerFindOne()` instead.
     *
     * This method doesn't expect any request body.
     */
    maintenanceCodeControllerFindOne$Response(params, context) {
        return maintenanceCodeControllerFindOne(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `maintenanceCodeControllerFindOne$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    maintenanceCodeControllerFindOne(params, context) {
        return this.maintenanceCodeControllerFindOne$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `maintenanceCodeControllerUpdate()` */
    static { this.MaintenanceCodeControllerUpdatePath = '/amims/maintenance_code/maintenance_code/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `maintenanceCodeControllerUpdate()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    maintenanceCodeControllerUpdate$Response(params, context) {
        return maintenanceCodeControllerUpdate(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `maintenanceCodeControllerUpdate$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    maintenanceCodeControllerUpdate(params, context) {
        return this.maintenanceCodeControllerUpdate$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `maintenanceCodeControllerRemove()` */
    static { this.MaintenanceCodeControllerRemovePath = '/amims/maintenance_code/maintenance_code/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `maintenanceCodeControllerRemove()` instead.
     *
     * This method doesn't expect any request body.
     */
    maintenanceCodeControllerRemove$Response(params, context) {
        return maintenanceCodeControllerRemove(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `maintenanceCodeControllerRemove$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    maintenanceCodeControllerRemove(params, context) {
        return this.maintenanceCodeControllerRemove$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: MaintenanceCodeService, deps: [{ token: ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: MaintenanceCodeService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: MaintenanceCodeService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: ApiConfiguration }, { type: i2.HttpClient }] });

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function maintenanceCodeReportControllerFindAll(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, maintenanceCodeReportControllerFindAll.PATH, 'post');
    if (params) {
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
maintenanceCodeReportControllerFindAll.PATH = '/amims/maintenance_code/maintenance_code_report/list';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function maintenanceCodeReportControllerFindOne(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, maintenanceCodeReportControllerFindOne.PATH, 'get');
    if (params) {
        rb.path('id', params.id, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
maintenanceCodeReportControllerFindOne.PATH = '/amims/maintenance_code/maintenance_code_report/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
class MaintenanceCodeReportService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `maintenanceCodeReportControllerFindAll()` */
    static { this.MaintenanceCodeReportControllerFindAllPath = '/amims/maintenance_code/maintenance_code_report/list'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `maintenanceCodeReportControllerFindAll()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    maintenanceCodeReportControllerFindAll$Response(params, context) {
        return maintenanceCodeReportControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `maintenanceCodeReportControllerFindAll$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    maintenanceCodeReportControllerFindAll(params, context) {
        return this.maintenanceCodeReportControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `maintenanceCodeReportControllerFindOne()` */
    static { this.MaintenanceCodeReportControllerFindOnePath = '/amims/maintenance_code/maintenance_code_report/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `maintenanceCodeReportControllerFindOne()` instead.
     *
     * This method doesn't expect any request body.
     */
    maintenanceCodeReportControllerFindOne$Response(params, context) {
        return maintenanceCodeReportControllerFindOne(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `maintenanceCodeReportControllerFindOne$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    maintenanceCodeReportControllerFindOne(params, context) {
        return this.maintenanceCodeReportControllerFindOne$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: MaintenanceCodeReportService, deps: [{ token: ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: MaintenanceCodeReportService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: MaintenanceCodeReportService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: ApiConfiguration }, { type: i2.HttpClient }] });

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function maintenanceCodeWidgetControllerFindAll(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, maintenanceCodeWidgetControllerFindAll.PATH, 'post');
    if (params) {
        rb.query('filter', params.filter, {});
        rb.query('joinWhere', params.joinWhere, {});
        rb.query('select', params.select, {});
        rb.query('groupBy', params.groupBy, {});
        rb.query('sortKey', params.sortKey, {});
        rb.query('sortValue', params.sortValue, {});
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
maintenanceCodeWidgetControllerFindAll.PATH = '/amims/maintenance_code/maintenance_code_widget';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
class MaintenanceCodeWidgetService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `maintenanceCodeWidgetControllerFindAll()` */
    static { this.MaintenanceCodeWidgetControllerFindAllPath = '/amims/maintenance_code/maintenance_code_widget'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `maintenanceCodeWidgetControllerFindAll()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    maintenanceCodeWidgetControllerFindAll$Response(params, context) {
        return maintenanceCodeWidgetControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `maintenanceCodeWidgetControllerFindAll$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    maintenanceCodeWidgetControllerFindAll(params, context) {
        return this.maintenanceCodeWidgetControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: MaintenanceCodeWidgetService, deps: [{ token: ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: MaintenanceCodeWidgetService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: MaintenanceCodeWidgetService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: ApiConfiguration }, { type: i2.HttpClient }] });

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function melControllerCreate(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, melControllerCreate.PATH, 'post');
    if (params) {
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
melControllerCreate.PATH = '/amims/mel/mel';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function melControllerFindAll(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, melControllerFindAll.PATH, 'get');
    if (params) {
        rb.query('pageIndex', params.pageIndex, {});
        rb.query('pageSize', params.pageSize, {});
        rb.query('filter', params.filter, {});
        rb.query('sortKey', params.sortKey, {});
        rb.query('sortValue', params.sortValue, {});
        rb.query('search_field', params.search_field, {});
        rb.query('search_keyword', params.search_keyword, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
melControllerFindAll.PATH = '/amims/mel/mel';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function melControllerFindOne(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, melControllerFindOne.PATH, 'get');
    if (params) {
        rb.path('id', params.id, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
melControllerFindOne.PATH = '/amims/mel/mel/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function melControllerRemove(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, melControllerRemove.PATH, 'delete');
    if (params) {
        rb.path('id', params.id, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
melControllerRemove.PATH = '/amims/mel/mel/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function melControllerUpdate(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, melControllerUpdate.PATH, 'put');
    if (params) {
        rb.path('id', params.id, {});
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
melControllerUpdate.PATH = '/amims/mel/mel/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
class MelService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `melControllerFindAll()` */
    static { this.MelControllerFindAllPath = '/amims/mel/mel'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `melControllerFindAll()` instead.
     *
     * This method doesn't expect any request body.
     */
    melControllerFindAll$Response(params, context) {
        return melControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `melControllerFindAll$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    melControllerFindAll(params, context) {
        return this.melControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `melControllerCreate()` */
    static { this.MelControllerCreatePath = '/amims/mel/mel'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `melControllerCreate()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    melControllerCreate$Response(params, context) {
        return melControllerCreate(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `melControllerCreate$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    melControllerCreate(params, context) {
        return this.melControllerCreate$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `melControllerFindOne()` */
    static { this.MelControllerFindOnePath = '/amims/mel/mel/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `melControllerFindOne()` instead.
     *
     * This method doesn't expect any request body.
     */
    melControllerFindOne$Response(params, context) {
        return melControllerFindOne(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `melControllerFindOne$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    melControllerFindOne(params, context) {
        return this.melControllerFindOne$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `melControllerUpdate()` */
    static { this.MelControllerUpdatePath = '/amims/mel/mel/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `melControllerUpdate()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    melControllerUpdate$Response(params, context) {
        return melControllerUpdate(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `melControllerUpdate$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    melControllerUpdate(params, context) {
        return this.melControllerUpdate$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `melControllerRemove()` */
    static { this.MelControllerRemovePath = '/amims/mel/mel/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `melControllerRemove()` instead.
     *
     * This method doesn't expect any request body.
     */
    melControllerRemove$Response(params, context) {
        return melControllerRemove(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `melControllerRemove$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    melControllerRemove(params, context) {
        return this.melControllerRemove$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: MelService, deps: [{ token: ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: MelService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: MelService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: ApiConfiguration }, { type: i2.HttpClient }] });

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function mpcGseControllerCreate(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, mpcGseControllerCreate.PATH, 'post');
    if (params) {
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
mpcGseControllerCreate.PATH = '/amims/mpc_gse/mpc_gse';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function mpcGseControllerFindAll(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, mpcGseControllerFindAll.PATH, 'get');
    if (params) {
        rb.query('pageIndex', params.pageIndex, {});
        rb.query('pageSize', params.pageSize, {});
        rb.query('filter', params.filter, {});
        rb.query('sortKey', params.sortKey, {});
        rb.query('sortValue', params.sortValue, {});
        rb.query('search_field', params.search_field, {});
        rb.query('search_keyword', params.search_keyword, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
mpcGseControllerFindAll.PATH = '/amims/mpc_gse/mpc_gse';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function mpcGseControllerFindOne(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, mpcGseControllerFindOne.PATH, 'get');
    if (params) {
        rb.path('id', params.id, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
mpcGseControllerFindOne.PATH = '/amims/mpc_gse/mpc_gse/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function mpcGseControllerRemove(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, mpcGseControllerRemove.PATH, 'delete');
    if (params) {
        rb.path('id', params.id, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
mpcGseControllerRemove.PATH = '/amims/mpc_gse/mpc_gse/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function mpcGseControllerUpdate(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, mpcGseControllerUpdate.PATH, 'put');
    if (params) {
        rb.path('id', params.id, {});
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
mpcGseControllerUpdate.PATH = '/amims/mpc_gse/mpc_gse/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
class MpcGseService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `mpcGseControllerFindAll()` */
    static { this.MpcGseControllerFindAllPath = '/amims/mpc_gse/mpc_gse'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `mpcGseControllerFindAll()` instead.
     *
     * This method doesn't expect any request body.
     */
    mpcGseControllerFindAll$Response(params, context) {
        return mpcGseControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `mpcGseControllerFindAll$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    mpcGseControllerFindAll(params, context) {
        return this.mpcGseControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `mpcGseControllerCreate()` */
    static { this.MpcGseControllerCreatePath = '/amims/mpc_gse/mpc_gse'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `mpcGseControllerCreate()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    mpcGseControllerCreate$Response(params, context) {
        return mpcGseControllerCreate(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `mpcGseControllerCreate$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    mpcGseControllerCreate(params, context) {
        return this.mpcGseControllerCreate$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `mpcGseControllerFindOne()` */
    static { this.MpcGseControllerFindOnePath = '/amims/mpc_gse/mpc_gse/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `mpcGseControllerFindOne()` instead.
     *
     * This method doesn't expect any request body.
     */
    mpcGseControllerFindOne$Response(params, context) {
        return mpcGseControllerFindOne(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `mpcGseControllerFindOne$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    mpcGseControllerFindOne(params, context) {
        return this.mpcGseControllerFindOne$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `mpcGseControllerUpdate()` */
    static { this.MpcGseControllerUpdatePath = '/amims/mpc_gse/mpc_gse/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `mpcGseControllerUpdate()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    mpcGseControllerUpdate$Response(params, context) {
        return mpcGseControllerUpdate(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `mpcGseControllerUpdate$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    mpcGseControllerUpdate(params, context) {
        return this.mpcGseControllerUpdate$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `mpcGseControllerRemove()` */
    static { this.MpcGseControllerRemovePath = '/amims/mpc_gse/mpc_gse/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `mpcGseControllerRemove()` instead.
     *
     * This method doesn't expect any request body.
     */
    mpcGseControllerRemove$Response(params, context) {
        return mpcGseControllerRemove(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `mpcGseControllerRemove$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    mpcGseControllerRemove(params, context) {
        return this.mpcGseControllerRemove$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: MpcGseService, deps: [{ token: ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: MpcGseService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: MpcGseService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: ApiConfiguration }, { type: i2.HttpClient }] });

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function mpcGseReportControllerFindAll(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, mpcGseReportControllerFindAll.PATH, 'post');
    if (params) {
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
mpcGseReportControllerFindAll.PATH = '/amims/mpc_gse/mpc_gse_report/list';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function mpcGseReportControllerFindOne(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, mpcGseReportControllerFindOne.PATH, 'get');
    if (params) {
        rb.path('id', params.id, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
mpcGseReportControllerFindOne.PATH = '/amims/mpc_gse/mpc_gse_report/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
class MpcGseReportService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `mpcGseReportControllerFindAll()` */
    static { this.MpcGseReportControllerFindAllPath = '/amims/mpc_gse/mpc_gse_report/list'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `mpcGseReportControllerFindAll()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    mpcGseReportControllerFindAll$Response(params, context) {
        return mpcGseReportControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `mpcGseReportControllerFindAll$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    mpcGseReportControllerFindAll(params, context) {
        return this.mpcGseReportControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `mpcGseReportControllerFindOne()` */
    static { this.MpcGseReportControllerFindOnePath = '/amims/mpc_gse/mpc_gse_report/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `mpcGseReportControllerFindOne()` instead.
     *
     * This method doesn't expect any request body.
     */
    mpcGseReportControllerFindOne$Response(params, context) {
        return mpcGseReportControllerFindOne(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `mpcGseReportControllerFindOne$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    mpcGseReportControllerFindOne(params, context) {
        return this.mpcGseReportControllerFindOne$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: MpcGseReportService, deps: [{ token: ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: MpcGseReportService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: MpcGseReportService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: ApiConfiguration }, { type: i2.HttpClient }] });

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function mpcGseWidgetControllerFindAll(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, mpcGseWidgetControllerFindAll.PATH, 'post');
    if (params) {
        rb.query('filter', params.filter, {});
        rb.query('joinWhere', params.joinWhere, {});
        rb.query('select', params.select, {});
        rb.query('groupBy', params.groupBy, {});
        rb.query('sortKey', params.sortKey, {});
        rb.query('sortValue', params.sortValue, {});
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
mpcGseWidgetControllerFindAll.PATH = '/amims/mpc_gse/mpc_gse_widget';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
class MpcGseWidgetService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `mpcGseWidgetControllerFindAll()` */
    static { this.MpcGseWidgetControllerFindAllPath = '/amims/mpc_gse/mpc_gse_widget'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `mpcGseWidgetControllerFindAll()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    mpcGseWidgetControllerFindAll$Response(params, context) {
        return mpcGseWidgetControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `mpcGseWidgetControllerFindAll$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    mpcGseWidgetControllerFindAll(params, context) {
        return this.mpcGseWidgetControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: MpcGseWidgetService, deps: [{ token: ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: MpcGseWidgetService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: MpcGseWidgetService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: ApiConfiguration }, { type: i2.HttpClient }] });

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function mpcJoControllerCreate(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, mpcJoControllerCreate.PATH, 'post');
    if (params) {
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
mpcJoControllerCreate.PATH = '/amims/mpc_jo/mpc_jo';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function mpcJoControllerFindAll(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, mpcJoControllerFindAll.PATH, 'get');
    if (params) {
        rb.query('pageIndex', params.pageIndex, {});
        rb.query('pageSize', params.pageSize, {});
        rb.query('filter', params.filter, {});
        rb.query('sortKey', params.sortKey, {});
        rb.query('sortValue', params.sortValue, {});
        rb.query('search_field', params.search_field, {});
        rb.query('search_keyword', params.search_keyword, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
mpcJoControllerFindAll.PATH = '/amims/mpc_jo/mpc_jo';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function mpcJoControllerFindOne(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, mpcJoControllerFindOne.PATH, 'get');
    if (params) {
        rb.path('id', params.id, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
mpcJoControllerFindOne.PATH = '/amims/mpc_jo/mpc_jo/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function mpcJoControllerRemove(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, mpcJoControllerRemove.PATH, 'delete');
    if (params) {
        rb.path('id', params.id, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
mpcJoControllerRemove.PATH = '/amims/mpc_jo/mpc_jo/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function mpcJoControllerUpdate(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, mpcJoControllerUpdate.PATH, 'put');
    if (params) {
        rb.path('id', params.id, {});
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
mpcJoControllerUpdate.PATH = '/amims/mpc_jo/mpc_jo/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
class MpcJoService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `mpcJoControllerFindAll()` */
    static { this.MpcJoControllerFindAllPath = '/amims/mpc_jo/mpc_jo'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `mpcJoControllerFindAll()` instead.
     *
     * This method doesn't expect any request body.
     */
    mpcJoControllerFindAll$Response(params, context) {
        return mpcJoControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `mpcJoControllerFindAll$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    mpcJoControllerFindAll(params, context) {
        return this.mpcJoControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `mpcJoControllerCreate()` */
    static { this.MpcJoControllerCreatePath = '/amims/mpc_jo/mpc_jo'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `mpcJoControllerCreate()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    mpcJoControllerCreate$Response(params, context) {
        return mpcJoControllerCreate(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `mpcJoControllerCreate$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    mpcJoControllerCreate(params, context) {
        return this.mpcJoControllerCreate$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `mpcJoControllerFindOne()` */
    static { this.MpcJoControllerFindOnePath = '/amims/mpc_jo/mpc_jo/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `mpcJoControllerFindOne()` instead.
     *
     * This method doesn't expect any request body.
     */
    mpcJoControllerFindOne$Response(params, context) {
        return mpcJoControllerFindOne(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `mpcJoControllerFindOne$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    mpcJoControllerFindOne(params, context) {
        return this.mpcJoControllerFindOne$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `mpcJoControllerUpdate()` */
    static { this.MpcJoControllerUpdatePath = '/amims/mpc_jo/mpc_jo/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `mpcJoControllerUpdate()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    mpcJoControllerUpdate$Response(params, context) {
        return mpcJoControllerUpdate(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `mpcJoControllerUpdate$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    mpcJoControllerUpdate(params, context) {
        return this.mpcJoControllerUpdate$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `mpcJoControllerRemove()` */
    static { this.MpcJoControllerRemovePath = '/amims/mpc_jo/mpc_jo/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `mpcJoControllerRemove()` instead.
     *
     * This method doesn't expect any request body.
     */
    mpcJoControllerRemove$Response(params, context) {
        return mpcJoControllerRemove(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `mpcJoControllerRemove$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    mpcJoControllerRemove(params, context) {
        return this.mpcJoControllerRemove$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: MpcJoService, deps: [{ token: ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: MpcJoService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: MpcJoService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: ApiConfiguration }, { type: i2.HttpClient }] });

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function mpcJoReportControllerFindAll(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, mpcJoReportControllerFindAll.PATH, 'post');
    if (params) {
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
mpcJoReportControllerFindAll.PATH = '/amims/mpc_jo/mpc_jo_report/list';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function mpcJoReportControllerFindOne(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, mpcJoReportControllerFindOne.PATH, 'get');
    if (params) {
        rb.path('id', params.id, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
mpcJoReportControllerFindOne.PATH = '/amims/mpc_jo/mpc_jo_report/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
class MpcJoReportService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `mpcJoReportControllerFindAll()` */
    static { this.MpcJoReportControllerFindAllPath = '/amims/mpc_jo/mpc_jo_report/list'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `mpcJoReportControllerFindAll()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    mpcJoReportControllerFindAll$Response(params, context) {
        return mpcJoReportControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `mpcJoReportControllerFindAll$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    mpcJoReportControllerFindAll(params, context) {
        return this.mpcJoReportControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `mpcJoReportControllerFindOne()` */
    static { this.MpcJoReportControllerFindOnePath = '/amims/mpc_jo/mpc_jo_report/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `mpcJoReportControllerFindOne()` instead.
     *
     * This method doesn't expect any request body.
     */
    mpcJoReportControllerFindOne$Response(params, context) {
        return mpcJoReportControllerFindOne(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `mpcJoReportControllerFindOne$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    mpcJoReportControllerFindOne(params, context) {
        return this.mpcJoReportControllerFindOne$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: MpcJoReportService, deps: [{ token: ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: MpcJoReportService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: MpcJoReportService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: ApiConfiguration }, { type: i2.HttpClient }] });

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function mpcJoWidgetControllerFindAll(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, mpcJoWidgetControllerFindAll.PATH, 'post');
    if (params) {
        rb.query('filter', params.filter, {});
        rb.query('joinWhere', params.joinWhere, {});
        rb.query('select', params.select, {});
        rb.query('groupBy', params.groupBy, {});
        rb.query('sortKey', params.sortKey, {});
        rb.query('sortValue', params.sortValue, {});
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
mpcJoWidgetControllerFindAll.PATH = '/amims/mpc_jo/mpc_jo_widget';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
class MpcJoWidgetService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `mpcJoWidgetControllerFindAll()` */
    static { this.MpcJoWidgetControllerFindAllPath = '/amims/mpc_jo/mpc_jo_widget'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `mpcJoWidgetControllerFindAll()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    mpcJoWidgetControllerFindAll$Response(params, context) {
        return mpcJoWidgetControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `mpcJoWidgetControllerFindAll$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    mpcJoWidgetControllerFindAll(params, context) {
        return this.mpcJoWidgetControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: MpcJoWidgetService, deps: [{ token: ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: MpcJoWidgetService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: MpcJoWidgetService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: ApiConfiguration }, { type: i2.HttpClient }] });

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function mpcJoOperatorControllerCreate(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, mpcJoOperatorControllerCreate.PATH, 'post');
    if (params) {
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
mpcJoOperatorControllerCreate.PATH = '/amims/mpc_jo_operator/mpc_jo_operator';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function mpcJoOperatorControllerFindAll(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, mpcJoOperatorControllerFindAll.PATH, 'get');
    if (params) {
        rb.query('pageIndex', params.pageIndex, {});
        rb.query('pageSize', params.pageSize, {});
        rb.query('filter', params.filter, {});
        rb.query('sortKey', params.sortKey, {});
        rb.query('sortValue', params.sortValue, {});
        rb.query('search_field', params.search_field, {});
        rb.query('search_keyword', params.search_keyword, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
mpcJoOperatorControllerFindAll.PATH = '/amims/mpc_jo_operator/mpc_jo_operator';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function mpcJoOperatorControllerFindOne(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, mpcJoOperatorControllerFindOne.PATH, 'get');
    if (params) {
        rb.path('id', params.id, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
mpcJoOperatorControllerFindOne.PATH = '/amims/mpc_jo_operator/mpc_jo_operator/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function mpcJoOperatorControllerRemove(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, mpcJoOperatorControllerRemove.PATH, 'delete');
    if (params) {
        rb.path('id', params.id, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
mpcJoOperatorControllerRemove.PATH = '/amims/mpc_jo_operator/mpc_jo_operator/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function mpcJoOperatorControllerUpdate(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, mpcJoOperatorControllerUpdate.PATH, 'put');
    if (params) {
        rb.path('id', params.id, {});
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
mpcJoOperatorControllerUpdate.PATH = '/amims/mpc_jo_operator/mpc_jo_operator/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
class MpcJoOperatorService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `mpcJoOperatorControllerFindAll()` */
    static { this.MpcJoOperatorControllerFindAllPath = '/amims/mpc_jo_operator/mpc_jo_operator'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `mpcJoOperatorControllerFindAll()` instead.
     *
     * This method doesn't expect any request body.
     */
    mpcJoOperatorControllerFindAll$Response(params, context) {
        return mpcJoOperatorControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `mpcJoOperatorControllerFindAll$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    mpcJoOperatorControllerFindAll(params, context) {
        return this.mpcJoOperatorControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `mpcJoOperatorControllerCreate()` */
    static { this.MpcJoOperatorControllerCreatePath = '/amims/mpc_jo_operator/mpc_jo_operator'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `mpcJoOperatorControllerCreate()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    mpcJoOperatorControllerCreate$Response(params, context) {
        return mpcJoOperatorControllerCreate(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `mpcJoOperatorControllerCreate$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    mpcJoOperatorControllerCreate(params, context) {
        return this.mpcJoOperatorControllerCreate$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `mpcJoOperatorControllerFindOne()` */
    static { this.MpcJoOperatorControllerFindOnePath = '/amims/mpc_jo_operator/mpc_jo_operator/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `mpcJoOperatorControllerFindOne()` instead.
     *
     * This method doesn't expect any request body.
     */
    mpcJoOperatorControllerFindOne$Response(params, context) {
        return mpcJoOperatorControllerFindOne(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `mpcJoOperatorControllerFindOne$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    mpcJoOperatorControllerFindOne(params, context) {
        return this.mpcJoOperatorControllerFindOne$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `mpcJoOperatorControllerUpdate()` */
    static { this.MpcJoOperatorControllerUpdatePath = '/amims/mpc_jo_operator/mpc_jo_operator/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `mpcJoOperatorControllerUpdate()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    mpcJoOperatorControllerUpdate$Response(params, context) {
        return mpcJoOperatorControllerUpdate(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `mpcJoOperatorControllerUpdate$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    mpcJoOperatorControllerUpdate(params, context) {
        return this.mpcJoOperatorControllerUpdate$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `mpcJoOperatorControllerRemove()` */
    static { this.MpcJoOperatorControllerRemovePath = '/amims/mpc_jo_operator/mpc_jo_operator/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `mpcJoOperatorControllerRemove()` instead.
     *
     * This method doesn't expect any request body.
     */
    mpcJoOperatorControllerRemove$Response(params, context) {
        return mpcJoOperatorControllerRemove(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `mpcJoOperatorControllerRemove$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    mpcJoOperatorControllerRemove(params, context) {
        return this.mpcJoOperatorControllerRemove$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: MpcJoOperatorService, deps: [{ token: ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: MpcJoOperatorService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: MpcJoOperatorService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: ApiConfiguration }, { type: i2.HttpClient }] });

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function mpcJoOperatorReportControllerFindAll(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, mpcJoOperatorReportControllerFindAll.PATH, 'post');
    if (params) {
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
mpcJoOperatorReportControllerFindAll.PATH = '/amims/mpc_jo_operator/mpc_jo_operator_report/list';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function mpcJoOperatorReportControllerFindOne(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, mpcJoOperatorReportControllerFindOne.PATH, 'get');
    if (params) {
        rb.path('id', params.id, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
mpcJoOperatorReportControllerFindOne.PATH = '/amims/mpc_jo_operator/mpc_jo_operator_report/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
class MpcJoOperatorReportService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `mpcJoOperatorReportControllerFindAll()` */
    static { this.MpcJoOperatorReportControllerFindAllPath = '/amims/mpc_jo_operator/mpc_jo_operator_report/list'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `mpcJoOperatorReportControllerFindAll()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    mpcJoOperatorReportControllerFindAll$Response(params, context) {
        return mpcJoOperatorReportControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `mpcJoOperatorReportControllerFindAll$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    mpcJoOperatorReportControllerFindAll(params, context) {
        return this.mpcJoOperatorReportControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `mpcJoOperatorReportControllerFindOne()` */
    static { this.MpcJoOperatorReportControllerFindOnePath = '/amims/mpc_jo_operator/mpc_jo_operator_report/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `mpcJoOperatorReportControllerFindOne()` instead.
     *
     * This method doesn't expect any request body.
     */
    mpcJoOperatorReportControllerFindOne$Response(params, context) {
        return mpcJoOperatorReportControllerFindOne(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `mpcJoOperatorReportControllerFindOne$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    mpcJoOperatorReportControllerFindOne(params, context) {
        return this.mpcJoOperatorReportControllerFindOne$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: MpcJoOperatorReportService, deps: [{ token: ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: MpcJoOperatorReportService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: MpcJoOperatorReportService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: ApiConfiguration }, { type: i2.HttpClient }] });

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function mpcJoOperatorWidgetControllerFindAll(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, mpcJoOperatorWidgetControllerFindAll.PATH, 'post');
    if (params) {
        rb.query('filter', params.filter, {});
        rb.query('joinWhere', params.joinWhere, {});
        rb.query('select', params.select, {});
        rb.query('groupBy', params.groupBy, {});
        rb.query('sortKey', params.sortKey, {});
        rb.query('sortValue', params.sortValue, {});
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
mpcJoOperatorWidgetControllerFindAll.PATH = '/amims/mpc_jo_operator/mpc_jo_operator_widget';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
class MpcJoOperatorWidgetService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `mpcJoOperatorWidgetControllerFindAll()` */
    static { this.MpcJoOperatorWidgetControllerFindAllPath = '/amims/mpc_jo_operator/mpc_jo_operator_widget'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `mpcJoOperatorWidgetControllerFindAll()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    mpcJoOperatorWidgetControllerFindAll$Response(params, context) {
        return mpcJoOperatorWidgetControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `mpcJoOperatorWidgetControllerFindAll$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    mpcJoOperatorWidgetControllerFindAll(params, context) {
        return this.mpcJoOperatorWidgetControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: MpcJoOperatorWidgetService, deps: [{ token: ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: MpcJoOperatorWidgetService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: MpcJoOperatorWidgetService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: ApiConfiguration }, { type: i2.HttpClient }] });

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function mpcPiroControllerCreate(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, mpcPiroControllerCreate.PATH, 'post');
    if (params) {
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
mpcPiroControllerCreate.PATH = '/amims/mpc_piro/mpc_piro';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function mpcPiroControllerFindAll(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, mpcPiroControllerFindAll.PATH, 'get');
    if (params) {
        rb.query('pageIndex', params.pageIndex, {});
        rb.query('pageSize', params.pageSize, {});
        rb.query('filter', params.filter, {});
        rb.query('sortKey', params.sortKey, {});
        rb.query('sortValue', params.sortValue, {});
        rb.query('search_field', params.search_field, {});
        rb.query('search_keyword', params.search_keyword, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
mpcPiroControllerFindAll.PATH = '/amims/mpc_piro/mpc_piro';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function mpcPiroControllerFindOne(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, mpcPiroControllerFindOne.PATH, 'get');
    if (params) {
        rb.path('id', params.id, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
mpcPiroControllerFindOne.PATH = '/amims/mpc_piro/mpc_piro/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function mpcPiroControllerRemove(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, mpcPiroControllerRemove.PATH, 'delete');
    if (params) {
        rb.path('id', params.id, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
mpcPiroControllerRemove.PATH = '/amims/mpc_piro/mpc_piro/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function mpcPiroControllerUpdate(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, mpcPiroControllerUpdate.PATH, 'put');
    if (params) {
        rb.path('id', params.id, {});
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
mpcPiroControllerUpdate.PATH = '/amims/mpc_piro/mpc_piro/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
class MpcPiroService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `mpcPiroControllerFindAll()` */
    static { this.MpcPiroControllerFindAllPath = '/amims/mpc_piro/mpc_piro'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `mpcPiroControllerFindAll()` instead.
     *
     * This method doesn't expect any request body.
     */
    mpcPiroControllerFindAll$Response(params, context) {
        return mpcPiroControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `mpcPiroControllerFindAll$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    mpcPiroControllerFindAll(params, context) {
        return this.mpcPiroControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `mpcPiroControllerCreate()` */
    static { this.MpcPiroControllerCreatePath = '/amims/mpc_piro/mpc_piro'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `mpcPiroControllerCreate()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    mpcPiroControllerCreate$Response(params, context) {
        return mpcPiroControllerCreate(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `mpcPiroControllerCreate$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    mpcPiroControllerCreate(params, context) {
        return this.mpcPiroControllerCreate$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `mpcPiroControllerFindOne()` */
    static { this.MpcPiroControllerFindOnePath = '/amims/mpc_piro/mpc_piro/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `mpcPiroControllerFindOne()` instead.
     *
     * This method doesn't expect any request body.
     */
    mpcPiroControllerFindOne$Response(params, context) {
        return mpcPiroControllerFindOne(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `mpcPiroControllerFindOne$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    mpcPiroControllerFindOne(params, context) {
        return this.mpcPiroControllerFindOne$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `mpcPiroControllerUpdate()` */
    static { this.MpcPiroControllerUpdatePath = '/amims/mpc_piro/mpc_piro/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `mpcPiroControllerUpdate()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    mpcPiroControllerUpdate$Response(params, context) {
        return mpcPiroControllerUpdate(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `mpcPiroControllerUpdate$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    mpcPiroControllerUpdate(params, context) {
        return this.mpcPiroControllerUpdate$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `mpcPiroControllerRemove()` */
    static { this.MpcPiroControllerRemovePath = '/amims/mpc_piro/mpc_piro/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `mpcPiroControllerRemove()` instead.
     *
     * This method doesn't expect any request body.
     */
    mpcPiroControllerRemove$Response(params, context) {
        return mpcPiroControllerRemove(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `mpcPiroControllerRemove$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    mpcPiroControllerRemove(params, context) {
        return this.mpcPiroControllerRemove$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: MpcPiroService, deps: [{ token: ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: MpcPiroService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: MpcPiroService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: ApiConfiguration }, { type: i2.HttpClient }] });

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function mpcPiroReportControllerFindAll(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, mpcPiroReportControllerFindAll.PATH, 'post');
    if (params) {
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
mpcPiroReportControllerFindAll.PATH = '/amims/mpc_piro/mpc_piro_report/list';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function mpcPiroReportControllerFindOne(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, mpcPiroReportControllerFindOne.PATH, 'get');
    if (params) {
        rb.path('id', params.id, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
mpcPiroReportControllerFindOne.PATH = '/amims/mpc_piro/mpc_piro_report/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
class MpcPiroReportService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `mpcPiroReportControllerFindAll()` */
    static { this.MpcPiroReportControllerFindAllPath = '/amims/mpc_piro/mpc_piro_report/list'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `mpcPiroReportControllerFindAll()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    mpcPiroReportControllerFindAll$Response(params, context) {
        return mpcPiroReportControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `mpcPiroReportControllerFindAll$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    mpcPiroReportControllerFindAll(params, context) {
        return this.mpcPiroReportControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `mpcPiroReportControllerFindOne()` */
    static { this.MpcPiroReportControllerFindOnePath = '/amims/mpc_piro/mpc_piro_report/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `mpcPiroReportControllerFindOne()` instead.
     *
     * This method doesn't expect any request body.
     */
    mpcPiroReportControllerFindOne$Response(params, context) {
        return mpcPiroReportControllerFindOne(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `mpcPiroReportControllerFindOne$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    mpcPiroReportControllerFindOne(params, context) {
        return this.mpcPiroReportControllerFindOne$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: MpcPiroReportService, deps: [{ token: ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: MpcPiroReportService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: MpcPiroReportService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: ApiConfiguration }, { type: i2.HttpClient }] });

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function mpcPiroWidgetControllerFindAll(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, mpcPiroWidgetControllerFindAll.PATH, 'post');
    if (params) {
        rb.query('filter', params.filter, {});
        rb.query('joinWhere', params.joinWhere, {});
        rb.query('select', params.select, {});
        rb.query('groupBy', params.groupBy, {});
        rb.query('sortKey', params.sortKey, {});
        rb.query('sortValue', params.sortValue, {});
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
mpcPiroWidgetControllerFindAll.PATH = '/amims/mpc_piro/mpc_piro_widget';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
class MpcPiroWidgetService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `mpcPiroWidgetControllerFindAll()` */
    static { this.MpcPiroWidgetControllerFindAllPath = '/amims/mpc_piro/mpc_piro_widget'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `mpcPiroWidgetControllerFindAll()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    mpcPiroWidgetControllerFindAll$Response(params, context) {
        return mpcPiroWidgetControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `mpcPiroWidgetControllerFindAll$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    mpcPiroWidgetControllerFindAll(params, context) {
        return this.mpcPiroWidgetControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: MpcPiroWidgetService, deps: [{ token: ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: MpcPiroWidgetService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: MpcPiroWidgetService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: ApiConfiguration }, { type: i2.HttpClient }] });

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function mpcPiroItemControllerCreate(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, mpcPiroItemControllerCreate.PATH, 'post');
    if (params) {
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
mpcPiroItemControllerCreate.PATH = '/amims/mpc_piro_item/mpc_piro_item';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function mpcPiroItemControllerFindAll(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, mpcPiroItemControllerFindAll.PATH, 'get');
    if (params) {
        rb.query('pageIndex', params.pageIndex, {});
        rb.query('pageSize', params.pageSize, {});
        rb.query('filter', params.filter, {});
        rb.query('sortKey', params.sortKey, {});
        rb.query('sortValue', params.sortValue, {});
        rb.query('search_field', params.search_field, {});
        rb.query('search_keyword', params.search_keyword, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
mpcPiroItemControllerFindAll.PATH = '/amims/mpc_piro_item/mpc_piro_item';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function mpcPiroItemControllerFindOne(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, mpcPiroItemControllerFindOne.PATH, 'get');
    if (params) {
        rb.path('id', params.id, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
mpcPiroItemControllerFindOne.PATH = '/amims/mpc_piro_item/mpc_piro_item/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function mpcPiroItemControllerRemove(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, mpcPiroItemControllerRemove.PATH, 'delete');
    if (params) {
        rb.path('id', params.id, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
mpcPiroItemControllerRemove.PATH = '/amims/mpc_piro_item/mpc_piro_item/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function mpcPiroItemControllerUpdate(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, mpcPiroItemControllerUpdate.PATH, 'put');
    if (params) {
        rb.path('id', params.id, {});
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
mpcPiroItemControllerUpdate.PATH = '/amims/mpc_piro_item/mpc_piro_item/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
class MpcPiroItemService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `mpcPiroItemControllerFindAll()` */
    static { this.MpcPiroItemControllerFindAllPath = '/amims/mpc_piro_item/mpc_piro_item'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `mpcPiroItemControllerFindAll()` instead.
     *
     * This method doesn't expect any request body.
     */
    mpcPiroItemControllerFindAll$Response(params, context) {
        return mpcPiroItemControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `mpcPiroItemControllerFindAll$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    mpcPiroItemControllerFindAll(params, context) {
        return this.mpcPiroItemControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `mpcPiroItemControllerCreate()` */
    static { this.MpcPiroItemControllerCreatePath = '/amims/mpc_piro_item/mpc_piro_item'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `mpcPiroItemControllerCreate()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    mpcPiroItemControllerCreate$Response(params, context) {
        return mpcPiroItemControllerCreate(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `mpcPiroItemControllerCreate$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    mpcPiroItemControllerCreate(params, context) {
        return this.mpcPiroItemControllerCreate$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `mpcPiroItemControllerFindOne()` */
    static { this.MpcPiroItemControllerFindOnePath = '/amims/mpc_piro_item/mpc_piro_item/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `mpcPiroItemControllerFindOne()` instead.
     *
     * This method doesn't expect any request body.
     */
    mpcPiroItemControllerFindOne$Response(params, context) {
        return mpcPiroItemControllerFindOne(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `mpcPiroItemControllerFindOne$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    mpcPiroItemControllerFindOne(params, context) {
        return this.mpcPiroItemControllerFindOne$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `mpcPiroItemControllerUpdate()` */
    static { this.MpcPiroItemControllerUpdatePath = '/amims/mpc_piro_item/mpc_piro_item/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `mpcPiroItemControllerUpdate()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    mpcPiroItemControllerUpdate$Response(params, context) {
        return mpcPiroItemControllerUpdate(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `mpcPiroItemControllerUpdate$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    mpcPiroItemControllerUpdate(params, context) {
        return this.mpcPiroItemControllerUpdate$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `mpcPiroItemControllerRemove()` */
    static { this.MpcPiroItemControllerRemovePath = '/amims/mpc_piro_item/mpc_piro_item/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `mpcPiroItemControllerRemove()` instead.
     *
     * This method doesn't expect any request body.
     */
    mpcPiroItemControllerRemove$Response(params, context) {
        return mpcPiroItemControllerRemove(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `mpcPiroItemControllerRemove$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    mpcPiroItemControllerRemove(params, context) {
        return this.mpcPiroItemControllerRemove$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: MpcPiroItemService, deps: [{ token: ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: MpcPiroItemService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: MpcPiroItemService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: ApiConfiguration }, { type: i2.HttpClient }] });

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function mpcPiroItemReportControllerFindAll(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, mpcPiroItemReportControllerFindAll.PATH, 'post');
    if (params) {
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
mpcPiroItemReportControllerFindAll.PATH = '/amims/mpc_piro_item/mpc_piro_item_report/list';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function mpcPiroItemReportControllerFindOne(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, mpcPiroItemReportControllerFindOne.PATH, 'get');
    if (params) {
        rb.path('id', params.id, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
mpcPiroItemReportControllerFindOne.PATH = '/amims/mpc_piro_item/mpc_piro_item_report/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
class MpcPiroItemReportService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `mpcPiroItemReportControllerFindAll()` */
    static { this.MpcPiroItemReportControllerFindAllPath = '/amims/mpc_piro_item/mpc_piro_item_report/list'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `mpcPiroItemReportControllerFindAll()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    mpcPiroItemReportControllerFindAll$Response(params, context) {
        return mpcPiroItemReportControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `mpcPiroItemReportControllerFindAll$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    mpcPiroItemReportControllerFindAll(params, context) {
        return this.mpcPiroItemReportControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `mpcPiroItemReportControllerFindOne()` */
    static { this.MpcPiroItemReportControllerFindOnePath = '/amims/mpc_piro_item/mpc_piro_item_report/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `mpcPiroItemReportControllerFindOne()` instead.
     *
     * This method doesn't expect any request body.
     */
    mpcPiroItemReportControllerFindOne$Response(params, context) {
        return mpcPiroItemReportControllerFindOne(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `mpcPiroItemReportControllerFindOne$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    mpcPiroItemReportControllerFindOne(params, context) {
        return this.mpcPiroItemReportControllerFindOne$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: MpcPiroItemReportService, deps: [{ token: ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: MpcPiroItemReportService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: MpcPiroItemReportService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: ApiConfiguration }, { type: i2.HttpClient }] });

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function mpcPiroItemWidgetControllerFindAll(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, mpcPiroItemWidgetControllerFindAll.PATH, 'post');
    if (params) {
        rb.query('filter', params.filter, {});
        rb.query('joinWhere', params.joinWhere, {});
        rb.query('select', params.select, {});
        rb.query('groupBy', params.groupBy, {});
        rb.query('sortKey', params.sortKey, {});
        rb.query('sortValue', params.sortValue, {});
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
mpcPiroItemWidgetControllerFindAll.PATH = '/amims/mpc_piro_item/mpc_piro_item_widget';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
class MpcPiroItemWidgetService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `mpcPiroItemWidgetControllerFindAll()` */
    static { this.MpcPiroItemWidgetControllerFindAllPath = '/amims/mpc_piro_item/mpc_piro_item_widget'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `mpcPiroItemWidgetControllerFindAll()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    mpcPiroItemWidgetControllerFindAll$Response(params, context) {
        return mpcPiroItemWidgetControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `mpcPiroItemWidgetControllerFindAll$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    mpcPiroItemWidgetControllerFindAll(params, context) {
        return this.mpcPiroItemWidgetControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: MpcPiroItemWidgetService, deps: [{ token: ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: MpcPiroItemWidgetService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: MpcPiroItemWidgetService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: ApiConfiguration }, { type: i2.HttpClient }] });

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function mpcSelfMaintenanceControllerCreate(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, mpcSelfMaintenanceControllerCreate.PATH, 'post');
    if (params) {
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
mpcSelfMaintenanceControllerCreate.PATH = '/amims/mpc_self_maintenance/mpc_self_maintenance';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function mpcSelfMaintenanceControllerFindAll(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, mpcSelfMaintenanceControllerFindAll.PATH, 'get');
    if (params) {
        rb.query('pageIndex', params.pageIndex, {});
        rb.query('pageSize', params.pageSize, {});
        rb.query('filter', params.filter, {});
        rb.query('sortKey', params.sortKey, {});
        rb.query('sortValue', params.sortValue, {});
        rb.query('search_field', params.search_field, {});
        rb.query('search_keyword', params.search_keyword, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
mpcSelfMaintenanceControllerFindAll.PATH = '/amims/mpc_self_maintenance/mpc_self_maintenance';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function mpcSelfMaintenanceControllerFindOne(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, mpcSelfMaintenanceControllerFindOne.PATH, 'get');
    if (params) {
        rb.path('id', params.id, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
mpcSelfMaintenanceControllerFindOne.PATH = '/amims/mpc_self_maintenance/mpc_self_maintenance/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function mpcSelfMaintenanceControllerRemove(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, mpcSelfMaintenanceControllerRemove.PATH, 'delete');
    if (params) {
        rb.path('id', params.id, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
mpcSelfMaintenanceControllerRemove.PATH = '/amims/mpc_self_maintenance/mpc_self_maintenance/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function mpcSelfMaintenanceControllerUpdate(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, mpcSelfMaintenanceControllerUpdate.PATH, 'put');
    if (params) {
        rb.path('id', params.id, {});
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
mpcSelfMaintenanceControllerUpdate.PATH = '/amims/mpc_self_maintenance/mpc_self_maintenance/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
class MpcSelfMaintenanceService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `mpcSelfMaintenanceControllerFindAll()` */
    static { this.MpcSelfMaintenanceControllerFindAllPath = '/amims/mpc_self_maintenance/mpc_self_maintenance'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `mpcSelfMaintenanceControllerFindAll()` instead.
     *
     * This method doesn't expect any request body.
     */
    mpcSelfMaintenanceControllerFindAll$Response(params, context) {
        return mpcSelfMaintenanceControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `mpcSelfMaintenanceControllerFindAll$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    mpcSelfMaintenanceControllerFindAll(params, context) {
        return this.mpcSelfMaintenanceControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `mpcSelfMaintenanceControllerCreate()` */
    static { this.MpcSelfMaintenanceControllerCreatePath = '/amims/mpc_self_maintenance/mpc_self_maintenance'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `mpcSelfMaintenanceControllerCreate()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    mpcSelfMaintenanceControllerCreate$Response(params, context) {
        return mpcSelfMaintenanceControllerCreate(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `mpcSelfMaintenanceControllerCreate$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    mpcSelfMaintenanceControllerCreate(params, context) {
        return this.mpcSelfMaintenanceControllerCreate$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `mpcSelfMaintenanceControllerFindOne()` */
    static { this.MpcSelfMaintenanceControllerFindOnePath = '/amims/mpc_self_maintenance/mpc_self_maintenance/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `mpcSelfMaintenanceControllerFindOne()` instead.
     *
     * This method doesn't expect any request body.
     */
    mpcSelfMaintenanceControllerFindOne$Response(params, context) {
        return mpcSelfMaintenanceControllerFindOne(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `mpcSelfMaintenanceControllerFindOne$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    mpcSelfMaintenanceControllerFindOne(params, context) {
        return this.mpcSelfMaintenanceControllerFindOne$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `mpcSelfMaintenanceControllerUpdate()` */
    static { this.MpcSelfMaintenanceControllerUpdatePath = '/amims/mpc_self_maintenance/mpc_self_maintenance/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `mpcSelfMaintenanceControllerUpdate()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    mpcSelfMaintenanceControllerUpdate$Response(params, context) {
        return mpcSelfMaintenanceControllerUpdate(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `mpcSelfMaintenanceControllerUpdate$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    mpcSelfMaintenanceControllerUpdate(params, context) {
        return this.mpcSelfMaintenanceControllerUpdate$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `mpcSelfMaintenanceControllerRemove()` */
    static { this.MpcSelfMaintenanceControllerRemovePath = '/amims/mpc_self_maintenance/mpc_self_maintenance/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `mpcSelfMaintenanceControllerRemove()` instead.
     *
     * This method doesn't expect any request body.
     */
    mpcSelfMaintenanceControllerRemove$Response(params, context) {
        return mpcSelfMaintenanceControllerRemove(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `mpcSelfMaintenanceControllerRemove$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    mpcSelfMaintenanceControllerRemove(params, context) {
        return this.mpcSelfMaintenanceControllerRemove$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: MpcSelfMaintenanceService, deps: [{ token: ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: MpcSelfMaintenanceService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: MpcSelfMaintenanceService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: ApiConfiguration }, { type: i2.HttpClient }] });

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function mpcSelfMaintenanceReportControllerFindAll(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, mpcSelfMaintenanceReportControllerFindAll.PATH, 'post');
    if (params) {
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
mpcSelfMaintenanceReportControllerFindAll.PATH = '/amims/mpc_self_maintenance/mpc_self_maintenance_report/list';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function mpcSelfMaintenanceReportControllerFindOne(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, mpcSelfMaintenanceReportControllerFindOne.PATH, 'get');
    if (params) {
        rb.path('id', params.id, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
mpcSelfMaintenanceReportControllerFindOne.PATH = '/amims/mpc_self_maintenance/mpc_self_maintenance_report/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
class MpcSelfMaintenanceReportService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `mpcSelfMaintenanceReportControllerFindAll()` */
    static { this.MpcSelfMaintenanceReportControllerFindAllPath = '/amims/mpc_self_maintenance/mpc_self_maintenance_report/list'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `mpcSelfMaintenanceReportControllerFindAll()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    mpcSelfMaintenanceReportControllerFindAll$Response(params, context) {
        return mpcSelfMaintenanceReportControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `mpcSelfMaintenanceReportControllerFindAll$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    mpcSelfMaintenanceReportControllerFindAll(params, context) {
        return this.mpcSelfMaintenanceReportControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `mpcSelfMaintenanceReportControllerFindOne()` */
    static { this.MpcSelfMaintenanceReportControllerFindOnePath = '/amims/mpc_self_maintenance/mpc_self_maintenance_report/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `mpcSelfMaintenanceReportControllerFindOne()` instead.
     *
     * This method doesn't expect any request body.
     */
    mpcSelfMaintenanceReportControllerFindOne$Response(params, context) {
        return mpcSelfMaintenanceReportControllerFindOne(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `mpcSelfMaintenanceReportControllerFindOne$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    mpcSelfMaintenanceReportControllerFindOne(params, context) {
        return this.mpcSelfMaintenanceReportControllerFindOne$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: MpcSelfMaintenanceReportService, deps: [{ token: ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: MpcSelfMaintenanceReportService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: MpcSelfMaintenanceReportService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: ApiConfiguration }, { type: i2.HttpClient }] });

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function mpcSelfMaintenanceWidgetControllerFindAll(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, mpcSelfMaintenanceWidgetControllerFindAll.PATH, 'post');
    if (params) {
        rb.query('filter', params.filter, {});
        rb.query('joinWhere', params.joinWhere, {});
        rb.query('select', params.select, {});
        rb.query('groupBy', params.groupBy, {});
        rb.query('sortKey', params.sortKey, {});
        rb.query('sortValue', params.sortValue, {});
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
mpcSelfMaintenanceWidgetControllerFindAll.PATH = '/amims/mpc_self_maintenance/mpc_self_maintenance_widget';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
class MpcSelfMaintenanceWidgetService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `mpcSelfMaintenanceWidgetControllerFindAll()` */
    static { this.MpcSelfMaintenanceWidgetControllerFindAllPath = '/amims/mpc_self_maintenance/mpc_self_maintenance_widget'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `mpcSelfMaintenanceWidgetControllerFindAll()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    mpcSelfMaintenanceWidgetControllerFindAll$Response(params, context) {
        return mpcSelfMaintenanceWidgetControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `mpcSelfMaintenanceWidgetControllerFindAll$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    mpcSelfMaintenanceWidgetControllerFindAll(params, context) {
        return this.mpcSelfMaintenanceWidgetControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: MpcSelfMaintenanceWidgetService, deps: [{ token: ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: MpcSelfMaintenanceWidgetService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: MpcSelfMaintenanceWidgetService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: ApiConfiguration }, { type: i2.HttpClient }] });

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function mpcWpControllerCreate(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, mpcWpControllerCreate.PATH, 'post');
    if (params) {
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
mpcWpControllerCreate.PATH = '/amims/mpc_wp/mpc_wp';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function mpcWpControllerFindAll(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, mpcWpControllerFindAll.PATH, 'get');
    if (params) {
        rb.query('pageIndex', params.pageIndex, {});
        rb.query('pageSize', params.pageSize, {});
        rb.query('filter', params.filter, {});
        rb.query('sortKey', params.sortKey, {});
        rb.query('sortValue', params.sortValue, {});
        rb.query('search_field', params.search_field, {});
        rb.query('search_keyword', params.search_keyword, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
mpcWpControllerFindAll.PATH = '/amims/mpc_wp/mpc_wp';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function mpcWpControllerFindOne(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, mpcWpControllerFindOne.PATH, 'get');
    if (params) {
        rb.path('id', params.id, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
mpcWpControllerFindOne.PATH = '/amims/mpc_wp/mpc_wp/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function mpcWpControllerRemove(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, mpcWpControllerRemove.PATH, 'delete');
    if (params) {
        rb.path('id', params.id, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
mpcWpControllerRemove.PATH = '/amims/mpc_wp/mpc_wp/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function mpcWpControllerUpdate(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, mpcWpControllerUpdate.PATH, 'put');
    if (params) {
        rb.path('id', params.id, {});
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
mpcWpControllerUpdate.PATH = '/amims/mpc_wp/mpc_wp/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
class MpcWpService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `mpcWpControllerFindAll()` */
    static { this.MpcWpControllerFindAllPath = '/amims/mpc_wp/mpc_wp'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `mpcWpControllerFindAll()` instead.
     *
     * This method doesn't expect any request body.
     */
    mpcWpControllerFindAll$Response(params, context) {
        return mpcWpControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `mpcWpControllerFindAll$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    mpcWpControllerFindAll(params, context) {
        return this.mpcWpControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `mpcWpControllerCreate()` */
    static { this.MpcWpControllerCreatePath = '/amims/mpc_wp/mpc_wp'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `mpcWpControllerCreate()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    mpcWpControllerCreate$Response(params, context) {
        return mpcWpControllerCreate(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `mpcWpControllerCreate$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    mpcWpControllerCreate(params, context) {
        return this.mpcWpControllerCreate$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `mpcWpControllerFindOne()` */
    static { this.MpcWpControllerFindOnePath = '/amims/mpc_wp/mpc_wp/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `mpcWpControllerFindOne()` instead.
     *
     * This method doesn't expect any request body.
     */
    mpcWpControllerFindOne$Response(params, context) {
        return mpcWpControllerFindOne(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `mpcWpControllerFindOne$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    mpcWpControllerFindOne(params, context) {
        return this.mpcWpControllerFindOne$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `mpcWpControllerUpdate()` */
    static { this.MpcWpControllerUpdatePath = '/amims/mpc_wp/mpc_wp/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `mpcWpControllerUpdate()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    mpcWpControllerUpdate$Response(params, context) {
        return mpcWpControllerUpdate(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `mpcWpControllerUpdate$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    mpcWpControllerUpdate(params, context) {
        return this.mpcWpControllerUpdate$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `mpcWpControllerRemove()` */
    static { this.MpcWpControllerRemovePath = '/amims/mpc_wp/mpc_wp/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `mpcWpControllerRemove()` instead.
     *
     * This method doesn't expect any request body.
     */
    mpcWpControllerRemove$Response(params, context) {
        return mpcWpControllerRemove(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `mpcWpControllerRemove$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    mpcWpControllerRemove(params, context) {
        return this.mpcWpControllerRemove$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: MpcWpService, deps: [{ token: ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: MpcWpService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: MpcWpService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: ApiConfiguration }, { type: i2.HttpClient }] });

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function mpcWpReportControllerFindAll(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, mpcWpReportControllerFindAll.PATH, 'post');
    if (params) {
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
mpcWpReportControllerFindAll.PATH = '/amims/mpc_wp/mpc_wp_report/list';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function mpcWpReportControllerFindOne(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, mpcWpReportControllerFindOne.PATH, 'get');
    if (params) {
        rb.path('id', params.id, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
mpcWpReportControllerFindOne.PATH = '/amims/mpc_wp/mpc_wp_report/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
class MpcWpReportService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `mpcWpReportControllerFindAll()` */
    static { this.MpcWpReportControllerFindAllPath = '/amims/mpc_wp/mpc_wp_report/list'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `mpcWpReportControllerFindAll()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    mpcWpReportControllerFindAll$Response(params, context) {
        return mpcWpReportControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `mpcWpReportControllerFindAll$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    mpcWpReportControllerFindAll(params, context) {
        return this.mpcWpReportControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `mpcWpReportControllerFindOne()` */
    static { this.MpcWpReportControllerFindOnePath = '/amims/mpc_wp/mpc_wp_report/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `mpcWpReportControllerFindOne()` instead.
     *
     * This method doesn't expect any request body.
     */
    mpcWpReportControllerFindOne$Response(params, context) {
        return mpcWpReportControllerFindOne(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `mpcWpReportControllerFindOne$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    mpcWpReportControllerFindOne(params, context) {
        return this.mpcWpReportControllerFindOne$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: MpcWpReportService, deps: [{ token: ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: MpcWpReportService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: MpcWpReportService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: ApiConfiguration }, { type: i2.HttpClient }] });

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function mpcWpWidgetControllerFindAll(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, mpcWpWidgetControllerFindAll.PATH, 'post');
    if (params) {
        rb.query('filter', params.filter, {});
        rb.query('joinWhere', params.joinWhere, {});
        rb.query('select', params.select, {});
        rb.query('groupBy', params.groupBy, {});
        rb.query('sortKey', params.sortKey, {});
        rb.query('sortValue', params.sortValue, {});
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
mpcWpWidgetControllerFindAll.PATH = '/amims/mpc_wp/mpc_wp_widget';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
class MpcWpWidgetService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `mpcWpWidgetControllerFindAll()` */
    static { this.MpcWpWidgetControllerFindAllPath = '/amims/mpc_wp/mpc_wp_widget'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `mpcWpWidgetControllerFindAll()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    mpcWpWidgetControllerFindAll$Response(params, context) {
        return mpcWpWidgetControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `mpcWpWidgetControllerFindAll$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    mpcWpWidgetControllerFindAll(params, context) {
        return this.mpcWpWidgetControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: MpcWpWidgetService, deps: [{ token: ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: MpcWpWidgetService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: MpcWpWidgetService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: ApiConfiguration }, { type: i2.HttpClient }] });

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function partControllerCreate(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, partControllerCreate.PATH, 'post');
    if (params) {
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
partControllerCreate.PATH = '/amims/part/part';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function partControllerFindAll(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, partControllerFindAll.PATH, 'get');
    if (params) {
        rb.query('pageIndex', params.pageIndex, {});
        rb.query('pageSize', params.pageSize, {});
        rb.query('filter', params.filter, {});
        rb.query('sortKey', params.sortKey, {});
        rb.query('sortValue', params.sortValue, {});
        rb.query('search_field', params.search_field, {});
        rb.query('search_keyword', params.search_keyword, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
partControllerFindAll.PATH = '/amims/part/part';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function partControllerFindOne(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, partControllerFindOne.PATH, 'get');
    if (params) {
        rb.path('id', params.id, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
partControllerFindOne.PATH = '/amims/part/part/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function partControllerRemove(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, partControllerRemove.PATH, 'delete');
    if (params) {
        rb.path('id', params.id, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
partControllerRemove.PATH = '/amims/part/part/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function partControllerUpdate(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, partControllerUpdate.PATH, 'put');
    if (params) {
        rb.path('id', params.id, {});
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
partControllerUpdate.PATH = '/amims/part/part/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
class PartService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `partControllerFindAll()` */
    static { this.PartControllerFindAllPath = '/amims/part/part'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `partControllerFindAll()` instead.
     *
     * This method doesn't expect any request body.
     */
    partControllerFindAll$Response(params, context) {
        return partControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `partControllerFindAll$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    partControllerFindAll(params, context) {
        return this.partControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `partControllerCreate()` */
    static { this.PartControllerCreatePath = '/amims/part/part'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `partControllerCreate()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    partControllerCreate$Response(params, context) {
        return partControllerCreate(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `partControllerCreate$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    partControllerCreate(params, context) {
        return this.partControllerCreate$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `partControllerFindOne()` */
    static { this.PartControllerFindOnePath = '/amims/part/part/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `partControllerFindOne()` instead.
     *
     * This method doesn't expect any request body.
     */
    partControllerFindOne$Response(params, context) {
        return partControllerFindOne(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `partControllerFindOne$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    partControllerFindOne(params, context) {
        return this.partControllerFindOne$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `partControllerUpdate()` */
    static { this.PartControllerUpdatePath = '/amims/part/part/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `partControllerUpdate()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    partControllerUpdate$Response(params, context) {
        return partControllerUpdate(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `partControllerUpdate$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    partControllerUpdate(params, context) {
        return this.partControllerUpdate$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `partControllerRemove()` */
    static { this.PartControllerRemovePath = '/amims/part/part/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `partControllerRemove()` instead.
     *
     * This method doesn't expect any request body.
     */
    partControllerRemove$Response(params, context) {
        return partControllerRemove(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `partControllerRemove$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    partControllerRemove(params, context) {
        return this.partControllerRemove$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: PartService, deps: [{ token: ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: PartService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: PartService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: ApiConfiguration }, { type: i2.HttpClient }] });

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function partReportControllerFindAll(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, partReportControllerFindAll.PATH, 'post');
    if (params) {
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
partReportControllerFindAll.PATH = '/amims/part/part_report/list';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function partReportControllerFindOne(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, partReportControllerFindOne.PATH, 'get');
    if (params) {
        rb.path('id', params.id, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
partReportControllerFindOne.PATH = '/amims/part/part_report/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
class PartReportService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `partReportControllerFindAll()` */
    static { this.PartReportControllerFindAllPath = '/amims/part/part_report/list'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `partReportControllerFindAll()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    partReportControllerFindAll$Response(params, context) {
        return partReportControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `partReportControllerFindAll$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    partReportControllerFindAll(params, context) {
        return this.partReportControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `partReportControllerFindOne()` */
    static { this.PartReportControllerFindOnePath = '/amims/part/part_report/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `partReportControllerFindOne()` instead.
     *
     * This method doesn't expect any request body.
     */
    partReportControllerFindOne$Response(params, context) {
        return partReportControllerFindOne(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `partReportControllerFindOne$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    partReportControllerFindOne(params, context) {
        return this.partReportControllerFindOne$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: PartReportService, deps: [{ token: ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: PartReportService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: PartReportService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: ApiConfiguration }, { type: i2.HttpClient }] });

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function partWidgetControllerFindAll(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, partWidgetControllerFindAll.PATH, 'post');
    if (params) {
        rb.query('filter', params.filter, {});
        rb.query('joinWhere', params.joinWhere, {});
        rb.query('select', params.select, {});
        rb.query('groupBy', params.groupBy, {});
        rb.query('sortKey', params.sortKey, {});
        rb.query('sortValue', params.sortValue, {});
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
partWidgetControllerFindAll.PATH = '/amims/part/part_widget';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
class PartWidgetService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `partWidgetControllerFindAll()` */
    static { this.PartWidgetControllerFindAllPath = '/amims/part/part_widget'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `partWidgetControllerFindAll()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    partWidgetControllerFindAll$Response(params, context) {
        return partWidgetControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `partWidgetControllerFindAll$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    partWidgetControllerFindAll(params, context) {
        return this.partWidgetControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: PartWidgetService, deps: [{ token: ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: PartWidgetService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: PartWidgetService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: ApiConfiguration }, { type: i2.HttpClient }] });

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function partActypeControllerCreate(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, partActypeControllerCreate.PATH, 'post');
    if (params) {
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
partActypeControllerCreate.PATH = '/amims/part_actype/part_actype';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function partActypeControllerFindAll(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, partActypeControllerFindAll.PATH, 'get');
    if (params) {
        rb.query('pageIndex', params.pageIndex, {});
        rb.query('pageSize', params.pageSize, {});
        rb.query('filter', params.filter, {});
        rb.query('sortKey', params.sortKey, {});
        rb.query('sortValue', params.sortValue, {});
        rb.query('search_field', params.search_field, {});
        rb.query('search_keyword', params.search_keyword, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
partActypeControllerFindAll.PATH = '/amims/part_actype/part_actype';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function partActypeControllerFindOne(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, partActypeControllerFindOne.PATH, 'get');
    if (params) {
        rb.path('id', params.id, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
partActypeControllerFindOne.PATH = '/amims/part_actype/part_actype/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function partActypeControllerRemove(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, partActypeControllerRemove.PATH, 'delete');
    if (params) {
        rb.path('id', params.id, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
partActypeControllerRemove.PATH = '/amims/part_actype/part_actype/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function partActypeControllerUpdate(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, partActypeControllerUpdate.PATH, 'put');
    if (params) {
        rb.path('id', params.id, {});
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
partActypeControllerUpdate.PATH = '/amims/part_actype/part_actype/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
class PartActypeService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `partActypeControllerFindAll()` */
    static { this.PartActypeControllerFindAllPath = '/amims/part_actype/part_actype'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `partActypeControllerFindAll()` instead.
     *
     * This method doesn't expect any request body.
     */
    partActypeControllerFindAll$Response(params, context) {
        return partActypeControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `partActypeControllerFindAll$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    partActypeControllerFindAll(params, context) {
        return this.partActypeControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `partActypeControllerCreate()` */
    static { this.PartActypeControllerCreatePath = '/amims/part_actype/part_actype'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `partActypeControllerCreate()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    partActypeControllerCreate$Response(params, context) {
        return partActypeControllerCreate(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `partActypeControllerCreate$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    partActypeControllerCreate(params, context) {
        return this.partActypeControllerCreate$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `partActypeControllerFindOne()` */
    static { this.PartActypeControllerFindOnePath = '/amims/part_actype/part_actype/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `partActypeControllerFindOne()` instead.
     *
     * This method doesn't expect any request body.
     */
    partActypeControllerFindOne$Response(params, context) {
        return partActypeControllerFindOne(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `partActypeControllerFindOne$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    partActypeControllerFindOne(params, context) {
        return this.partActypeControllerFindOne$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `partActypeControllerUpdate()` */
    static { this.PartActypeControllerUpdatePath = '/amims/part_actype/part_actype/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `partActypeControllerUpdate()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    partActypeControllerUpdate$Response(params, context) {
        return partActypeControllerUpdate(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `partActypeControllerUpdate$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    partActypeControllerUpdate(params, context) {
        return this.partActypeControllerUpdate$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `partActypeControllerRemove()` */
    static { this.PartActypeControllerRemovePath = '/amims/part_actype/part_actype/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `partActypeControllerRemove()` instead.
     *
     * This method doesn't expect any request body.
     */
    partActypeControllerRemove$Response(params, context) {
        return partActypeControllerRemove(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `partActypeControllerRemove$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    partActypeControllerRemove(params, context) {
        return this.partActypeControllerRemove$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: PartActypeService, deps: [{ token: ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: PartActypeService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: PartActypeService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: ApiConfiguration }, { type: i2.HttpClient }] });

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function partActypeReportControllerFindAll(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, partActypeReportControllerFindAll.PATH, 'post');
    if (params) {
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
partActypeReportControllerFindAll.PATH = '/amims/part_actype/part_actype_report/list';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function partActypeReportControllerFindOne(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, partActypeReportControllerFindOne.PATH, 'get');
    if (params) {
        rb.path('id', params.id, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
partActypeReportControllerFindOne.PATH = '/amims/part_actype/part_actype_report/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
class PartActypeReportService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `partActypeReportControllerFindAll()` */
    static { this.PartActypeReportControllerFindAllPath = '/amims/part_actype/part_actype_report/list'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `partActypeReportControllerFindAll()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    partActypeReportControllerFindAll$Response(params, context) {
        return partActypeReportControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `partActypeReportControllerFindAll$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    partActypeReportControllerFindAll(params, context) {
        return this.partActypeReportControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `partActypeReportControllerFindOne()` */
    static { this.PartActypeReportControllerFindOnePath = '/amims/part_actype/part_actype_report/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `partActypeReportControllerFindOne()` instead.
     *
     * This method doesn't expect any request body.
     */
    partActypeReportControllerFindOne$Response(params, context) {
        return partActypeReportControllerFindOne(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `partActypeReportControllerFindOne$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    partActypeReportControllerFindOne(params, context) {
        return this.partActypeReportControllerFindOne$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: PartActypeReportService, deps: [{ token: ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: PartActypeReportService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: PartActypeReportService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: ApiConfiguration }, { type: i2.HttpClient }] });

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function partActypeWidgetControllerFindAll(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, partActypeWidgetControllerFindAll.PATH, 'post');
    if (params) {
        rb.query('filter', params.filter, {});
        rb.query('joinWhere', params.joinWhere, {});
        rb.query('select', params.select, {});
        rb.query('groupBy', params.groupBy, {});
        rb.query('sortKey', params.sortKey, {});
        rb.query('sortValue', params.sortValue, {});
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
partActypeWidgetControllerFindAll.PATH = '/amims/part_actype/part_actype_widget';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
class PartActypeWidgetService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `partActypeWidgetControllerFindAll()` */
    static { this.PartActypeWidgetControllerFindAllPath = '/amims/part_actype/part_actype_widget'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `partActypeWidgetControllerFindAll()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    partActypeWidgetControllerFindAll$Response(params, context) {
        return partActypeWidgetControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `partActypeWidgetControllerFindAll$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    partActypeWidgetControllerFindAll(params, context) {
        return this.partActypeWidgetControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: PartActypeWidgetService, deps: [{ token: ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: PartActypeWidgetService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: PartActypeWidgetService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: ApiConfiguration }, { type: i2.HttpClient }] });

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function partAlternativeControllerCreate(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, partAlternativeControllerCreate.PATH, 'post');
    if (params) {
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
partAlternativeControllerCreate.PATH = '/amims/part_alternative/part_alternative';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function partAlternativeControllerFindAll(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, partAlternativeControllerFindAll.PATH, 'get');
    if (params) {
        rb.query('pageIndex', params.pageIndex, {});
        rb.query('pageSize', params.pageSize, {});
        rb.query('filter', params.filter, {});
        rb.query('sortKey', params.sortKey, {});
        rb.query('sortValue', params.sortValue, {});
        rb.query('search_field', params.search_field, {});
        rb.query('search_keyword', params.search_keyword, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
partAlternativeControllerFindAll.PATH = '/amims/part_alternative/part_alternative';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function partAlternativeControllerFindOne(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, partAlternativeControllerFindOne.PATH, 'get');
    if (params) {
        rb.path('id', params.id, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
partAlternativeControllerFindOne.PATH = '/amims/part_alternative/part_alternative/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function partAlternativeControllerRemove(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, partAlternativeControllerRemove.PATH, 'delete');
    if (params) {
        rb.path('id', params.id, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
partAlternativeControllerRemove.PATH = '/amims/part_alternative/part_alternative/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function partAlternativeControllerUpdate(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, partAlternativeControllerUpdate.PATH, 'put');
    if (params) {
        rb.path('id', params.id, {});
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
partAlternativeControllerUpdate.PATH = '/amims/part_alternative/part_alternative/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
class PartAlternativeService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `partAlternativeControllerFindAll()` */
    static { this.PartAlternativeControllerFindAllPath = '/amims/part_alternative/part_alternative'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `partAlternativeControllerFindAll()` instead.
     *
     * This method doesn't expect any request body.
     */
    partAlternativeControllerFindAll$Response(params, context) {
        return partAlternativeControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `partAlternativeControllerFindAll$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    partAlternativeControllerFindAll(params, context) {
        return this.partAlternativeControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `partAlternativeControllerCreate()` */
    static { this.PartAlternativeControllerCreatePath = '/amims/part_alternative/part_alternative'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `partAlternativeControllerCreate()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    partAlternativeControllerCreate$Response(params, context) {
        return partAlternativeControllerCreate(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `partAlternativeControllerCreate$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    partAlternativeControllerCreate(params, context) {
        return this.partAlternativeControllerCreate$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `partAlternativeControllerFindOne()` */
    static { this.PartAlternativeControllerFindOnePath = '/amims/part_alternative/part_alternative/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `partAlternativeControllerFindOne()` instead.
     *
     * This method doesn't expect any request body.
     */
    partAlternativeControllerFindOne$Response(params, context) {
        return partAlternativeControllerFindOne(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `partAlternativeControllerFindOne$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    partAlternativeControllerFindOne(params, context) {
        return this.partAlternativeControllerFindOne$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `partAlternativeControllerUpdate()` */
    static { this.PartAlternativeControllerUpdatePath = '/amims/part_alternative/part_alternative/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `partAlternativeControllerUpdate()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    partAlternativeControllerUpdate$Response(params, context) {
        return partAlternativeControllerUpdate(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `partAlternativeControllerUpdate$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    partAlternativeControllerUpdate(params, context) {
        return this.partAlternativeControllerUpdate$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `partAlternativeControllerRemove()` */
    static { this.PartAlternativeControllerRemovePath = '/amims/part_alternative/part_alternative/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `partAlternativeControllerRemove()` instead.
     *
     * This method doesn't expect any request body.
     */
    partAlternativeControllerRemove$Response(params, context) {
        return partAlternativeControllerRemove(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `partAlternativeControllerRemove$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    partAlternativeControllerRemove(params, context) {
        return this.partAlternativeControllerRemove$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: PartAlternativeService, deps: [{ token: ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: PartAlternativeService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: PartAlternativeService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: ApiConfiguration }, { type: i2.HttpClient }] });

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function partAlternativeReportControllerFindAll(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, partAlternativeReportControllerFindAll.PATH, 'post');
    if (params) {
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
partAlternativeReportControllerFindAll.PATH = '/amims/part_alternative/part_alternative_report/list';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function partAlternativeReportControllerFindOne(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, partAlternativeReportControllerFindOne.PATH, 'get');
    if (params) {
        rb.path('id', params.id, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
partAlternativeReportControllerFindOne.PATH = '/amims/part_alternative/part_alternative_report/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
class PartAlternativeReportService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `partAlternativeReportControllerFindAll()` */
    static { this.PartAlternativeReportControllerFindAllPath = '/amims/part_alternative/part_alternative_report/list'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `partAlternativeReportControllerFindAll()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    partAlternativeReportControllerFindAll$Response(params, context) {
        return partAlternativeReportControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `partAlternativeReportControllerFindAll$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    partAlternativeReportControllerFindAll(params, context) {
        return this.partAlternativeReportControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `partAlternativeReportControllerFindOne()` */
    static { this.PartAlternativeReportControllerFindOnePath = '/amims/part_alternative/part_alternative_report/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `partAlternativeReportControllerFindOne()` instead.
     *
     * This method doesn't expect any request body.
     */
    partAlternativeReportControllerFindOne$Response(params, context) {
        return partAlternativeReportControllerFindOne(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `partAlternativeReportControllerFindOne$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    partAlternativeReportControllerFindOne(params, context) {
        return this.partAlternativeReportControllerFindOne$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: PartAlternativeReportService, deps: [{ token: ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: PartAlternativeReportService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: PartAlternativeReportService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: ApiConfiguration }, { type: i2.HttpClient }] });

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function partAlternativeWidgetControllerFindAll(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, partAlternativeWidgetControllerFindAll.PATH, 'post');
    if (params) {
        rb.query('filter', params.filter, {});
        rb.query('joinWhere', params.joinWhere, {});
        rb.query('select', params.select, {});
        rb.query('groupBy', params.groupBy, {});
        rb.query('sortKey', params.sortKey, {});
        rb.query('sortValue', params.sortValue, {});
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
partAlternativeWidgetControllerFindAll.PATH = '/amims/part_alternative/part_alternative_widget';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
class PartAlternativeWidgetService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `partAlternativeWidgetControllerFindAll()` */
    static { this.PartAlternativeWidgetControllerFindAllPath = '/amims/part_alternative/part_alternative_widget'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `partAlternativeWidgetControllerFindAll()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    partAlternativeWidgetControllerFindAll$Response(params, context) {
        return partAlternativeWidgetControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `partAlternativeWidgetControllerFindAll$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    partAlternativeWidgetControllerFindAll(params, context) {
        return this.partAlternativeWidgetControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: PartAlternativeWidgetService, deps: [{ token: ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: PartAlternativeWidgetService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: PartAlternativeWidgetService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: ApiConfiguration }, { type: i2.HttpClient }] });

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function partAtaControllerCreate(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, partAtaControllerCreate.PATH, 'post');
    if (params) {
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
partAtaControllerCreate.PATH = '/amims/part_ata/part_ata';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function partAtaControllerFindAll(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, partAtaControllerFindAll.PATH, 'get');
    if (params) {
        rb.query('pageIndex', params.pageIndex, {});
        rb.query('pageSize', params.pageSize, {});
        rb.query('filter', params.filter, {});
        rb.query('sortKey', params.sortKey, {});
        rb.query('sortValue', params.sortValue, {});
        rb.query('search_field', params.search_field, {});
        rb.query('search_keyword', params.search_keyword, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
partAtaControllerFindAll.PATH = '/amims/part_ata/part_ata';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function partAtaControllerFindOne(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, partAtaControllerFindOne.PATH, 'get');
    if (params) {
        rb.path('id', params.id, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
partAtaControllerFindOne.PATH = '/amims/part_ata/part_ata/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function partAtaControllerRemove(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, partAtaControllerRemove.PATH, 'delete');
    if (params) {
        rb.path('id', params.id, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
partAtaControllerRemove.PATH = '/amims/part_ata/part_ata/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function partAtaControllerUpdate(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, partAtaControllerUpdate.PATH, 'put');
    if (params) {
        rb.path('id', params.id, {});
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
partAtaControllerUpdate.PATH = '/amims/part_ata/part_ata/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
class PartAtaService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `partAtaControllerFindAll()` */
    static { this.PartAtaControllerFindAllPath = '/amims/part_ata/part_ata'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `partAtaControllerFindAll()` instead.
     *
     * This method doesn't expect any request body.
     */
    partAtaControllerFindAll$Response(params, context) {
        return partAtaControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `partAtaControllerFindAll$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    partAtaControllerFindAll(params, context) {
        return this.partAtaControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `partAtaControllerCreate()` */
    static { this.PartAtaControllerCreatePath = '/amims/part_ata/part_ata'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `partAtaControllerCreate()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    partAtaControllerCreate$Response(params, context) {
        return partAtaControllerCreate(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `partAtaControllerCreate$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    partAtaControllerCreate(params, context) {
        return this.partAtaControllerCreate$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `partAtaControllerFindOne()` */
    static { this.PartAtaControllerFindOnePath = '/amims/part_ata/part_ata/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `partAtaControllerFindOne()` instead.
     *
     * This method doesn't expect any request body.
     */
    partAtaControllerFindOne$Response(params, context) {
        return partAtaControllerFindOne(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `partAtaControllerFindOne$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    partAtaControllerFindOne(params, context) {
        return this.partAtaControllerFindOne$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `partAtaControllerUpdate()` */
    static { this.PartAtaControllerUpdatePath = '/amims/part_ata/part_ata/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `partAtaControllerUpdate()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    partAtaControllerUpdate$Response(params, context) {
        return partAtaControllerUpdate(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `partAtaControllerUpdate$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    partAtaControllerUpdate(params, context) {
        return this.partAtaControllerUpdate$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `partAtaControllerRemove()` */
    static { this.PartAtaControllerRemovePath = '/amims/part_ata/part_ata/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `partAtaControllerRemove()` instead.
     *
     * This method doesn't expect any request body.
     */
    partAtaControllerRemove$Response(params, context) {
        return partAtaControllerRemove(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `partAtaControllerRemove$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    partAtaControllerRemove(params, context) {
        return this.partAtaControllerRemove$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: PartAtaService, deps: [{ token: ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: PartAtaService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: PartAtaService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: ApiConfiguration }, { type: i2.HttpClient }] });

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function partAtaReportControllerFindAll(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, partAtaReportControllerFindAll.PATH, 'post');
    if (params) {
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
partAtaReportControllerFindAll.PATH = '/amims/part_ata/part_ata_report/list';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function partAtaReportControllerFindOne(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, partAtaReportControllerFindOne.PATH, 'get');
    if (params) {
        rb.path('id', params.id, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
partAtaReportControllerFindOne.PATH = '/amims/part_ata/part_ata_report/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
class PartAtaReportService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `partAtaReportControllerFindAll()` */
    static { this.PartAtaReportControllerFindAllPath = '/amims/part_ata/part_ata_report/list'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `partAtaReportControllerFindAll()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    partAtaReportControllerFindAll$Response(params, context) {
        return partAtaReportControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `partAtaReportControllerFindAll$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    partAtaReportControllerFindAll(params, context) {
        return this.partAtaReportControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `partAtaReportControllerFindOne()` */
    static { this.PartAtaReportControllerFindOnePath = '/amims/part_ata/part_ata_report/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `partAtaReportControllerFindOne()` instead.
     *
     * This method doesn't expect any request body.
     */
    partAtaReportControllerFindOne$Response(params, context) {
        return partAtaReportControllerFindOne(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `partAtaReportControllerFindOne$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    partAtaReportControllerFindOne(params, context) {
        return this.partAtaReportControllerFindOne$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: PartAtaReportService, deps: [{ token: ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: PartAtaReportService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: PartAtaReportService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: ApiConfiguration }, { type: i2.HttpClient }] });

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function partAtaWidgetControllerFindAll(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, partAtaWidgetControllerFindAll.PATH, 'post');
    if (params) {
        rb.query('filter', params.filter, {});
        rb.query('joinWhere', params.joinWhere, {});
        rb.query('select', params.select, {});
        rb.query('groupBy', params.groupBy, {});
        rb.query('sortKey', params.sortKey, {});
        rb.query('sortValue', params.sortValue, {});
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
partAtaWidgetControllerFindAll.PATH = '/amims/part_ata/part_ata_widget';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
class PartAtaWidgetService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `partAtaWidgetControllerFindAll()` */
    static { this.PartAtaWidgetControllerFindAllPath = '/amims/part_ata/part_ata_widget'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `partAtaWidgetControllerFindAll()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    partAtaWidgetControllerFindAll$Response(params, context) {
        return partAtaWidgetControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `partAtaWidgetControllerFindAll$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    partAtaWidgetControllerFindAll(params, context) {
        return this.partAtaWidgetControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: PartAtaWidgetService, deps: [{ token: ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: PartAtaWidgetService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: PartAtaWidgetService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: ApiConfiguration }, { type: i2.HttpClient }] });

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function partCategoryControllerCreate(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, partCategoryControllerCreate.PATH, 'post');
    if (params) {
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
partCategoryControllerCreate.PATH = '/amims/part_category/part_category';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function partCategoryControllerFindAll(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, partCategoryControllerFindAll.PATH, 'get');
    if (params) {
        rb.query('pageIndex', params.pageIndex, {});
        rb.query('pageSize', params.pageSize, {});
        rb.query('filter', params.filter, {});
        rb.query('sortKey', params.sortKey, {});
        rb.query('sortValue', params.sortValue, {});
        rb.query('search_field', params.search_field, {});
        rb.query('search_keyword', params.search_keyword, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
partCategoryControllerFindAll.PATH = '/amims/part_category/part_category';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function partCategoryControllerFindOne(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, partCategoryControllerFindOne.PATH, 'get');
    if (params) {
        rb.path('id', params.id, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
partCategoryControllerFindOne.PATH = '/amims/part_category/part_category/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function partCategoryControllerRemove(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, partCategoryControllerRemove.PATH, 'delete');
    if (params) {
        rb.path('id', params.id, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
partCategoryControllerRemove.PATH = '/amims/part_category/part_category/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function partCategoryControllerUpdate(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, partCategoryControllerUpdate.PATH, 'put');
    if (params) {
        rb.path('id', params.id, {});
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
partCategoryControllerUpdate.PATH = '/amims/part_category/part_category/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
class PartCategoryService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `partCategoryControllerFindAll()` */
    static { this.PartCategoryControllerFindAllPath = '/amims/part_category/part_category'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `partCategoryControllerFindAll()` instead.
     *
     * This method doesn't expect any request body.
     */
    partCategoryControllerFindAll$Response(params, context) {
        return partCategoryControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `partCategoryControllerFindAll$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    partCategoryControllerFindAll(params, context) {
        return this.partCategoryControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `partCategoryControllerCreate()` */
    static { this.PartCategoryControllerCreatePath = '/amims/part_category/part_category'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `partCategoryControllerCreate()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    partCategoryControllerCreate$Response(params, context) {
        return partCategoryControllerCreate(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `partCategoryControllerCreate$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    partCategoryControllerCreate(params, context) {
        return this.partCategoryControllerCreate$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `partCategoryControllerFindOne()` */
    static { this.PartCategoryControllerFindOnePath = '/amims/part_category/part_category/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `partCategoryControllerFindOne()` instead.
     *
     * This method doesn't expect any request body.
     */
    partCategoryControllerFindOne$Response(params, context) {
        return partCategoryControllerFindOne(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `partCategoryControllerFindOne$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    partCategoryControllerFindOne(params, context) {
        return this.partCategoryControllerFindOne$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `partCategoryControllerUpdate()` */
    static { this.PartCategoryControllerUpdatePath = '/amims/part_category/part_category/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `partCategoryControllerUpdate()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    partCategoryControllerUpdate$Response(params, context) {
        return partCategoryControllerUpdate(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `partCategoryControllerUpdate$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    partCategoryControllerUpdate(params, context) {
        return this.partCategoryControllerUpdate$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `partCategoryControllerRemove()` */
    static { this.PartCategoryControllerRemovePath = '/amims/part_category/part_category/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `partCategoryControllerRemove()` instead.
     *
     * This method doesn't expect any request body.
     */
    partCategoryControllerRemove$Response(params, context) {
        return partCategoryControllerRemove(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `partCategoryControllerRemove$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    partCategoryControllerRemove(params, context) {
        return this.partCategoryControllerRemove$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: PartCategoryService, deps: [{ token: ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: PartCategoryService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: PartCategoryService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: ApiConfiguration }, { type: i2.HttpClient }] });

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function partCategoryReportControllerFindAll(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, partCategoryReportControllerFindAll.PATH, 'post');
    if (params) {
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
partCategoryReportControllerFindAll.PATH = '/amims/part_category/part_category_report/list';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function partCategoryReportControllerFindOne(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, partCategoryReportControllerFindOne.PATH, 'get');
    if (params) {
        rb.path('id', params.id, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
partCategoryReportControllerFindOne.PATH = '/amims/part_category/part_category_report/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
class PartCategoryReportService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `partCategoryReportControllerFindAll()` */
    static { this.PartCategoryReportControllerFindAllPath = '/amims/part_category/part_category_report/list'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `partCategoryReportControllerFindAll()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    partCategoryReportControllerFindAll$Response(params, context) {
        return partCategoryReportControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `partCategoryReportControllerFindAll$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    partCategoryReportControllerFindAll(params, context) {
        return this.partCategoryReportControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `partCategoryReportControllerFindOne()` */
    static { this.PartCategoryReportControllerFindOnePath = '/amims/part_category/part_category_report/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `partCategoryReportControllerFindOne()` instead.
     *
     * This method doesn't expect any request body.
     */
    partCategoryReportControllerFindOne$Response(params, context) {
        return partCategoryReportControllerFindOne(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `partCategoryReportControllerFindOne$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    partCategoryReportControllerFindOne(params, context) {
        return this.partCategoryReportControllerFindOne$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: PartCategoryReportService, deps: [{ token: ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: PartCategoryReportService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: PartCategoryReportService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: ApiConfiguration }, { type: i2.HttpClient }] });

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function partCategoryWidgetControllerFindAll(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, partCategoryWidgetControllerFindAll.PATH, 'post');
    if (params) {
        rb.query('filter', params.filter, {});
        rb.query('joinWhere', params.joinWhere, {});
        rb.query('select', params.select, {});
        rb.query('groupBy', params.groupBy, {});
        rb.query('sortKey', params.sortKey, {});
        rb.query('sortValue', params.sortValue, {});
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
partCategoryWidgetControllerFindAll.PATH = '/amims/part_category/part_category_widget';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
class PartCategoryWidgetService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `partCategoryWidgetControllerFindAll()` */
    static { this.PartCategoryWidgetControllerFindAllPath = '/amims/part_category/part_category_widget'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `partCategoryWidgetControllerFindAll()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    partCategoryWidgetControllerFindAll$Response(params, context) {
        return partCategoryWidgetControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `partCategoryWidgetControllerFindAll$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    partCategoryWidgetControllerFindAll(params, context) {
        return this.partCategoryWidgetControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: PartCategoryWidgetService, deps: [{ token: ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: PartCategoryWidgetService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: PartCategoryWidgetService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: ApiConfiguration }, { type: i2.HttpClient }] });

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function partConditionControllerCreate(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, partConditionControllerCreate.PATH, 'post');
    if (params) {
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
partConditionControllerCreate.PATH = '/amims/part_condition/part_condition';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function partConditionControllerFindAll(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, partConditionControllerFindAll.PATH, 'get');
    if (params) {
        rb.query('pageIndex', params.pageIndex, {});
        rb.query('pageSize', params.pageSize, {});
        rb.query('filter', params.filter, {});
        rb.query('sortKey', params.sortKey, {});
        rb.query('sortValue', params.sortValue, {});
        rb.query('search_field', params.search_field, {});
        rb.query('search_keyword', params.search_keyword, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
partConditionControllerFindAll.PATH = '/amims/part_condition/part_condition';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function partConditionControllerFindOne(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, partConditionControllerFindOne.PATH, 'get');
    if (params) {
        rb.path('id', params.id, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
partConditionControllerFindOne.PATH = '/amims/part_condition/part_condition/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function partConditionControllerRemove(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, partConditionControllerRemove.PATH, 'delete');
    if (params) {
        rb.path('id', params.id, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
partConditionControllerRemove.PATH = '/amims/part_condition/part_condition/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function partConditionControllerUpdate(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, partConditionControllerUpdate.PATH, 'put');
    if (params) {
        rb.path('id', params.id, {});
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
partConditionControllerUpdate.PATH = '/amims/part_condition/part_condition/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
class PartConditionService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `partConditionControllerFindAll()` */
    static { this.PartConditionControllerFindAllPath = '/amims/part_condition/part_condition'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `partConditionControllerFindAll()` instead.
     *
     * This method doesn't expect any request body.
     */
    partConditionControllerFindAll$Response(params, context) {
        return partConditionControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `partConditionControllerFindAll$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    partConditionControllerFindAll(params, context) {
        return this.partConditionControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `partConditionControllerCreate()` */
    static { this.PartConditionControllerCreatePath = '/amims/part_condition/part_condition'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `partConditionControllerCreate()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    partConditionControllerCreate$Response(params, context) {
        return partConditionControllerCreate(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `partConditionControllerCreate$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    partConditionControllerCreate(params, context) {
        return this.partConditionControllerCreate$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `partConditionControllerFindOne()` */
    static { this.PartConditionControllerFindOnePath = '/amims/part_condition/part_condition/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `partConditionControllerFindOne()` instead.
     *
     * This method doesn't expect any request body.
     */
    partConditionControllerFindOne$Response(params, context) {
        return partConditionControllerFindOne(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `partConditionControllerFindOne$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    partConditionControllerFindOne(params, context) {
        return this.partConditionControllerFindOne$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `partConditionControllerUpdate()` */
    static { this.PartConditionControllerUpdatePath = '/amims/part_condition/part_condition/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `partConditionControllerUpdate()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    partConditionControllerUpdate$Response(params, context) {
        return partConditionControllerUpdate(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `partConditionControllerUpdate$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    partConditionControllerUpdate(params, context) {
        return this.partConditionControllerUpdate$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `partConditionControllerRemove()` */
    static { this.PartConditionControllerRemovePath = '/amims/part_condition/part_condition/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `partConditionControllerRemove()` instead.
     *
     * This method doesn't expect any request body.
     */
    partConditionControllerRemove$Response(params, context) {
        return partConditionControllerRemove(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `partConditionControllerRemove$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    partConditionControllerRemove(params, context) {
        return this.partConditionControllerRemove$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: PartConditionService, deps: [{ token: ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: PartConditionService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: PartConditionService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: ApiConfiguration }, { type: i2.HttpClient }] });

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function partConditionReportControllerFindAll(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, partConditionReportControllerFindAll.PATH, 'post');
    if (params) {
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
partConditionReportControllerFindAll.PATH = '/amims/part_condition/part_condition_report/list';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function partConditionReportControllerFindOne(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, partConditionReportControllerFindOne.PATH, 'get');
    if (params) {
        rb.path('id', params.id, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
partConditionReportControllerFindOne.PATH = '/amims/part_condition/part_condition_report/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
class PartConditionReportService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `partConditionReportControllerFindAll()` */
    static { this.PartConditionReportControllerFindAllPath = '/amims/part_condition/part_condition_report/list'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `partConditionReportControllerFindAll()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    partConditionReportControllerFindAll$Response(params, context) {
        return partConditionReportControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `partConditionReportControllerFindAll$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    partConditionReportControllerFindAll(params, context) {
        return this.partConditionReportControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `partConditionReportControllerFindOne()` */
    static { this.PartConditionReportControllerFindOnePath = '/amims/part_condition/part_condition_report/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `partConditionReportControllerFindOne()` instead.
     *
     * This method doesn't expect any request body.
     */
    partConditionReportControllerFindOne$Response(params, context) {
        return partConditionReportControllerFindOne(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `partConditionReportControllerFindOne$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    partConditionReportControllerFindOne(params, context) {
        return this.partConditionReportControllerFindOne$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: PartConditionReportService, deps: [{ token: ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: PartConditionReportService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: PartConditionReportService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: ApiConfiguration }, { type: i2.HttpClient }] });

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function partConditionWidgetControllerFindAll(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, partConditionWidgetControllerFindAll.PATH, 'post');
    if (params) {
        rb.query('filter', params.filter, {});
        rb.query('joinWhere', params.joinWhere, {});
        rb.query('select', params.select, {});
        rb.query('groupBy', params.groupBy, {});
        rb.query('sortKey', params.sortKey, {});
        rb.query('sortValue', params.sortValue, {});
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
partConditionWidgetControllerFindAll.PATH = '/amims/part_condition/part_condition_widget';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
class PartConditionWidgetService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `partConditionWidgetControllerFindAll()` */
    static { this.PartConditionWidgetControllerFindAllPath = '/amims/part_condition/part_condition_widget'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `partConditionWidgetControllerFindAll()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    partConditionWidgetControllerFindAll$Response(params, context) {
        return partConditionWidgetControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `partConditionWidgetControllerFindAll$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    partConditionWidgetControllerFindAll(params, context) {
        return this.partConditionWidgetControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: PartConditionWidgetService, deps: [{ token: ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: PartConditionWidgetService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: PartConditionWidgetService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: ApiConfiguration }, { type: i2.HttpClient }] });

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function partFigureIndexControllerCreate(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, partFigureIndexControllerCreate.PATH, 'post');
    if (params) {
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
partFigureIndexControllerCreate.PATH = '/amims/part_figure_index/part_figure_index';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function partFigureIndexControllerFindAll(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, partFigureIndexControllerFindAll.PATH, 'get');
    if (params) {
        rb.query('pageIndex', params.pageIndex, {});
        rb.query('pageSize', params.pageSize, {});
        rb.query('filter', params.filter, {});
        rb.query('sortKey', params.sortKey, {});
        rb.query('sortValue', params.sortValue, {});
        rb.query('search_field', params.search_field, {});
        rb.query('search_keyword', params.search_keyword, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
partFigureIndexControllerFindAll.PATH = '/amims/part_figure_index/part_figure_index';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function partFigureIndexControllerFindOne(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, partFigureIndexControllerFindOne.PATH, 'get');
    if (params) {
        rb.path('id', params.id, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
partFigureIndexControllerFindOne.PATH = '/amims/part_figure_index/part_figure_index/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function partFigureIndexControllerRemove(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, partFigureIndexControllerRemove.PATH, 'delete');
    if (params) {
        rb.path('id', params.id, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
partFigureIndexControllerRemove.PATH = '/amims/part_figure_index/part_figure_index/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function partFigureIndexControllerUpdate(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, partFigureIndexControllerUpdate.PATH, 'put');
    if (params) {
        rb.path('id', params.id, {});
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
partFigureIndexControllerUpdate.PATH = '/amims/part_figure_index/part_figure_index/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
class PartFigureIndexService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `partFigureIndexControllerFindAll()` */
    static { this.PartFigureIndexControllerFindAllPath = '/amims/part_figure_index/part_figure_index'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `partFigureIndexControllerFindAll()` instead.
     *
     * This method doesn't expect any request body.
     */
    partFigureIndexControllerFindAll$Response(params, context) {
        return partFigureIndexControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `partFigureIndexControllerFindAll$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    partFigureIndexControllerFindAll(params, context) {
        return this.partFigureIndexControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `partFigureIndexControllerCreate()` */
    static { this.PartFigureIndexControllerCreatePath = '/amims/part_figure_index/part_figure_index'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `partFigureIndexControllerCreate()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    partFigureIndexControllerCreate$Response(params, context) {
        return partFigureIndexControllerCreate(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `partFigureIndexControllerCreate$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    partFigureIndexControllerCreate(params, context) {
        return this.partFigureIndexControllerCreate$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `partFigureIndexControllerFindOne()` */
    static { this.PartFigureIndexControllerFindOnePath = '/amims/part_figure_index/part_figure_index/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `partFigureIndexControllerFindOne()` instead.
     *
     * This method doesn't expect any request body.
     */
    partFigureIndexControllerFindOne$Response(params, context) {
        return partFigureIndexControllerFindOne(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `partFigureIndexControllerFindOne$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    partFigureIndexControllerFindOne(params, context) {
        return this.partFigureIndexControllerFindOne$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `partFigureIndexControllerUpdate()` */
    static { this.PartFigureIndexControllerUpdatePath = '/amims/part_figure_index/part_figure_index/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `partFigureIndexControllerUpdate()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    partFigureIndexControllerUpdate$Response(params, context) {
        return partFigureIndexControllerUpdate(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `partFigureIndexControllerUpdate$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    partFigureIndexControllerUpdate(params, context) {
        return this.partFigureIndexControllerUpdate$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `partFigureIndexControllerRemove()` */
    static { this.PartFigureIndexControllerRemovePath = '/amims/part_figure_index/part_figure_index/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `partFigureIndexControllerRemove()` instead.
     *
     * This method doesn't expect any request body.
     */
    partFigureIndexControllerRemove$Response(params, context) {
        return partFigureIndexControllerRemove(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `partFigureIndexControllerRemove$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    partFigureIndexControllerRemove(params, context) {
        return this.partFigureIndexControllerRemove$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: PartFigureIndexService, deps: [{ token: ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: PartFigureIndexService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: PartFigureIndexService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: ApiConfiguration }, { type: i2.HttpClient }] });

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function partFigureIndexReportControllerFindAll(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, partFigureIndexReportControllerFindAll.PATH, 'post');
    if (params) {
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
partFigureIndexReportControllerFindAll.PATH = '/amims/part_figure_index/part_figure_index_report/list';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function partFigureIndexReportControllerFindOne(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, partFigureIndexReportControllerFindOne.PATH, 'get');
    if (params) {
        rb.path('id', params.id, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
partFigureIndexReportControllerFindOne.PATH = '/amims/part_figure_index/part_figure_index_report/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
class PartFigureIndexReportService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `partFigureIndexReportControllerFindAll()` */
    static { this.PartFigureIndexReportControllerFindAllPath = '/amims/part_figure_index/part_figure_index_report/list'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `partFigureIndexReportControllerFindAll()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    partFigureIndexReportControllerFindAll$Response(params, context) {
        return partFigureIndexReportControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `partFigureIndexReportControllerFindAll$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    partFigureIndexReportControllerFindAll(params, context) {
        return this.partFigureIndexReportControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `partFigureIndexReportControllerFindOne()` */
    static { this.PartFigureIndexReportControllerFindOnePath = '/amims/part_figure_index/part_figure_index_report/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `partFigureIndexReportControllerFindOne()` instead.
     *
     * This method doesn't expect any request body.
     */
    partFigureIndexReportControllerFindOne$Response(params, context) {
        return partFigureIndexReportControllerFindOne(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `partFigureIndexReportControllerFindOne$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    partFigureIndexReportControllerFindOne(params, context) {
        return this.partFigureIndexReportControllerFindOne$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: PartFigureIndexReportService, deps: [{ token: ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: PartFigureIndexReportService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: PartFigureIndexReportService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: ApiConfiguration }, { type: i2.HttpClient }] });

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function partFigureIndexWidgetControllerFindAll(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, partFigureIndexWidgetControllerFindAll.PATH, 'post');
    if (params) {
        rb.query('filter', params.filter, {});
        rb.query('joinWhere', params.joinWhere, {});
        rb.query('select', params.select, {});
        rb.query('groupBy', params.groupBy, {});
        rb.query('sortKey', params.sortKey, {});
        rb.query('sortValue', params.sortValue, {});
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
partFigureIndexWidgetControllerFindAll.PATH = '/amims/part_figure_index/part_figure_index_widget';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
class PartFigureIndexWidgetService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `partFigureIndexWidgetControllerFindAll()` */
    static { this.PartFigureIndexWidgetControllerFindAllPath = '/amims/part_figure_index/part_figure_index_widget'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `partFigureIndexWidgetControllerFindAll()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    partFigureIndexWidgetControllerFindAll$Response(params, context) {
        return partFigureIndexWidgetControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `partFigureIndexWidgetControllerFindAll$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    partFigureIndexWidgetControllerFindAll(params, context) {
        return this.partFigureIndexWidgetControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: PartFigureIndexWidgetService, deps: [{ token: ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: PartFigureIndexWidgetService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: PartFigureIndexWidgetService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: ApiConfiguration }, { type: i2.HttpClient }] });

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function partInstallControllerCreate(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, partInstallControllerCreate.PATH, 'post');
    if (params) {
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
partInstallControllerCreate.PATH = '/amims/part_install/part_install';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function partInstallControllerFindAll(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, partInstallControllerFindAll.PATH, 'get');
    if (params) {
        rb.query('pageIndex', params.pageIndex, {});
        rb.query('pageSize', params.pageSize, {});
        rb.query('filter', params.filter, {});
        rb.query('sortKey', params.sortKey, {});
        rb.query('sortValue', params.sortValue, {});
        rb.query('search_field', params.search_field, {});
        rb.query('search_keyword', params.search_keyword, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
partInstallControllerFindAll.PATH = '/amims/part_install/part_install';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function partInstallControllerFindOne(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, partInstallControllerFindOne.PATH, 'get');
    if (params) {
        rb.path('id', params.id, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
partInstallControllerFindOne.PATH = '/amims/part_install/part_install/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function partInstallControllerRemove(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, partInstallControllerRemove.PATH, 'delete');
    if (params) {
        rb.path('id', params.id, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
partInstallControllerRemove.PATH = '/amims/part_install/part_install/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function partInstallControllerUpdate(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, partInstallControllerUpdate.PATH, 'put');
    if (params) {
        rb.path('id', params.id, {});
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
partInstallControllerUpdate.PATH = '/amims/part_install/part_install/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
class PartInstallService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `partInstallControllerFindAll()` */
    static { this.PartInstallControllerFindAllPath = '/amims/part_install/part_install'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `partInstallControllerFindAll()` instead.
     *
     * This method doesn't expect any request body.
     */
    partInstallControllerFindAll$Response(params, context) {
        return partInstallControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `partInstallControllerFindAll$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    partInstallControllerFindAll(params, context) {
        return this.partInstallControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `partInstallControllerCreate()` */
    static { this.PartInstallControllerCreatePath = '/amims/part_install/part_install'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `partInstallControllerCreate()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    partInstallControllerCreate$Response(params, context) {
        return partInstallControllerCreate(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `partInstallControllerCreate$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    partInstallControllerCreate(params, context) {
        return this.partInstallControllerCreate$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `partInstallControllerFindOne()` */
    static { this.PartInstallControllerFindOnePath = '/amims/part_install/part_install/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `partInstallControllerFindOne()` instead.
     *
     * This method doesn't expect any request body.
     */
    partInstallControllerFindOne$Response(params, context) {
        return partInstallControllerFindOne(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `partInstallControllerFindOne$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    partInstallControllerFindOne(params, context) {
        return this.partInstallControllerFindOne$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `partInstallControllerUpdate()` */
    static { this.PartInstallControllerUpdatePath = '/amims/part_install/part_install/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `partInstallControllerUpdate()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    partInstallControllerUpdate$Response(params, context) {
        return partInstallControllerUpdate(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `partInstallControllerUpdate$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    partInstallControllerUpdate(params, context) {
        return this.partInstallControllerUpdate$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `partInstallControllerRemove()` */
    static { this.PartInstallControllerRemovePath = '/amims/part_install/part_install/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `partInstallControllerRemove()` instead.
     *
     * This method doesn't expect any request body.
     */
    partInstallControllerRemove$Response(params, context) {
        return partInstallControllerRemove(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `partInstallControllerRemove$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    partInstallControllerRemove(params, context) {
        return this.partInstallControllerRemove$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: PartInstallService, deps: [{ token: ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: PartInstallService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: PartInstallService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: ApiConfiguration }, { type: i2.HttpClient }] });

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function partInstallReportControllerFindAll(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, partInstallReportControllerFindAll.PATH, 'post');
    if (params) {
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
partInstallReportControllerFindAll.PATH = '/amims/part_install/part_install_report/list';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function partInstallReportControllerFindOne(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, partInstallReportControllerFindOne.PATH, 'get');
    if (params) {
        rb.path('id', params.id, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
partInstallReportControllerFindOne.PATH = '/amims/part_install/part_install_report/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
class PartInstallReportService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `partInstallReportControllerFindAll()` */
    static { this.PartInstallReportControllerFindAllPath = '/amims/part_install/part_install_report/list'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `partInstallReportControllerFindAll()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    partInstallReportControllerFindAll$Response(params, context) {
        return partInstallReportControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `partInstallReportControllerFindAll$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    partInstallReportControllerFindAll(params, context) {
        return this.partInstallReportControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `partInstallReportControllerFindOne()` */
    static { this.PartInstallReportControllerFindOnePath = '/amims/part_install/part_install_report/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `partInstallReportControllerFindOne()` instead.
     *
     * This method doesn't expect any request body.
     */
    partInstallReportControllerFindOne$Response(params, context) {
        return partInstallReportControllerFindOne(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `partInstallReportControllerFindOne$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    partInstallReportControllerFindOne(params, context) {
        return this.partInstallReportControllerFindOne$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: PartInstallReportService, deps: [{ token: ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: PartInstallReportService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: PartInstallReportService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: ApiConfiguration }, { type: i2.HttpClient }] });

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function partInstallWidgetControllerFindAll(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, partInstallWidgetControllerFindAll.PATH, 'post');
    if (params) {
        rb.query('filter', params.filter, {});
        rb.query('joinWhere', params.joinWhere, {});
        rb.query('select', params.select, {});
        rb.query('groupBy', params.groupBy, {});
        rb.query('sortKey', params.sortKey, {});
        rb.query('sortValue', params.sortValue, {});
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
partInstallWidgetControllerFindAll.PATH = '/amims/part_install/part_install_widget';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
class PartInstallWidgetService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `partInstallWidgetControllerFindAll()` */
    static { this.PartInstallWidgetControllerFindAllPath = '/amims/part_install/part_install_widget'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `partInstallWidgetControllerFindAll()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    partInstallWidgetControllerFindAll$Response(params, context) {
        return partInstallWidgetControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `partInstallWidgetControllerFindAll$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    partInstallWidgetControllerFindAll(params, context) {
        return this.partInstallWidgetControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: PartInstallWidgetService, deps: [{ token: ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: PartInstallWidgetService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: PartInstallWidgetService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: ApiConfiguration }, { type: i2.HttpClient }] });

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function partInstallOldControllerCreate(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, partInstallOldControllerCreate.PATH, 'post');
    if (params) {
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
partInstallOldControllerCreate.PATH = '/amims/part_install_old/part_install_old';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function partInstallOldControllerFindAll(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, partInstallOldControllerFindAll.PATH, 'get');
    if (params) {
        rb.query('pageIndex', params.pageIndex, {});
        rb.query('pageSize', params.pageSize, {});
        rb.query('filter', params.filter, {});
        rb.query('sortKey', params.sortKey, {});
        rb.query('sortValue', params.sortValue, {});
        rb.query('search_field', params.search_field, {});
        rb.query('search_keyword', params.search_keyword, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
partInstallOldControllerFindAll.PATH = '/amims/part_install_old/part_install_old';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function partInstallOldControllerFindOne(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, partInstallOldControllerFindOne.PATH, 'get');
    if (params) {
        rb.path('id', params.id, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
partInstallOldControllerFindOne.PATH = '/amims/part_install_old/part_install_old/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function partInstallOldControllerRemove(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, partInstallOldControllerRemove.PATH, 'delete');
    if (params) {
        rb.path('id', params.id, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
partInstallOldControllerRemove.PATH = '/amims/part_install_old/part_install_old/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function partInstallOldControllerUpdate(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, partInstallOldControllerUpdate.PATH, 'put');
    if (params) {
        rb.path('id', params.id, {});
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
partInstallOldControllerUpdate.PATH = '/amims/part_install_old/part_install_old/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
class PartInstallOldService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `partInstallOldControllerFindAll()` */
    static { this.PartInstallOldControllerFindAllPath = '/amims/part_install_old/part_install_old'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `partInstallOldControllerFindAll()` instead.
     *
     * This method doesn't expect any request body.
     */
    partInstallOldControllerFindAll$Response(params, context) {
        return partInstallOldControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `partInstallOldControllerFindAll$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    partInstallOldControllerFindAll(params, context) {
        return this.partInstallOldControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `partInstallOldControllerCreate()` */
    static { this.PartInstallOldControllerCreatePath = '/amims/part_install_old/part_install_old'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `partInstallOldControllerCreate()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    partInstallOldControllerCreate$Response(params, context) {
        return partInstallOldControllerCreate(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `partInstallOldControllerCreate$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    partInstallOldControllerCreate(params, context) {
        return this.partInstallOldControllerCreate$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `partInstallOldControllerFindOne()` */
    static { this.PartInstallOldControllerFindOnePath = '/amims/part_install_old/part_install_old/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `partInstallOldControllerFindOne()` instead.
     *
     * This method doesn't expect any request body.
     */
    partInstallOldControllerFindOne$Response(params, context) {
        return partInstallOldControllerFindOne(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `partInstallOldControllerFindOne$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    partInstallOldControllerFindOne(params, context) {
        return this.partInstallOldControllerFindOne$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `partInstallOldControllerUpdate()` */
    static { this.PartInstallOldControllerUpdatePath = '/amims/part_install_old/part_install_old/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `partInstallOldControllerUpdate()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    partInstallOldControllerUpdate$Response(params, context) {
        return partInstallOldControllerUpdate(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `partInstallOldControllerUpdate$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    partInstallOldControllerUpdate(params, context) {
        return this.partInstallOldControllerUpdate$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `partInstallOldControllerRemove()` */
    static { this.PartInstallOldControllerRemovePath = '/amims/part_install_old/part_install_old/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `partInstallOldControllerRemove()` instead.
     *
     * This method doesn't expect any request body.
     */
    partInstallOldControllerRemove$Response(params, context) {
        return partInstallOldControllerRemove(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `partInstallOldControllerRemove$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    partInstallOldControllerRemove(params, context) {
        return this.partInstallOldControllerRemove$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: PartInstallOldService, deps: [{ token: ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: PartInstallOldService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: PartInstallOldService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: ApiConfiguration }, { type: i2.HttpClient }] });

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function partInstallOldReportControllerFindAll(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, partInstallOldReportControllerFindAll.PATH, 'post');
    if (params) {
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
partInstallOldReportControllerFindAll.PATH = '/amims/part_install_old/part_install_old_report/list';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function partInstallOldReportControllerFindOne(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, partInstallOldReportControllerFindOne.PATH, 'get');
    if (params) {
        rb.path('id', params.id, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
partInstallOldReportControllerFindOne.PATH = '/amims/part_install_old/part_install_old_report/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
class PartInstallOldReportService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `partInstallOldReportControllerFindAll()` */
    static { this.PartInstallOldReportControllerFindAllPath = '/amims/part_install_old/part_install_old_report/list'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `partInstallOldReportControllerFindAll()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    partInstallOldReportControllerFindAll$Response(params, context) {
        return partInstallOldReportControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `partInstallOldReportControllerFindAll$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    partInstallOldReportControllerFindAll(params, context) {
        return this.partInstallOldReportControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `partInstallOldReportControllerFindOne()` */
    static { this.PartInstallOldReportControllerFindOnePath = '/amims/part_install_old/part_install_old_report/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `partInstallOldReportControllerFindOne()` instead.
     *
     * This method doesn't expect any request body.
     */
    partInstallOldReportControllerFindOne$Response(params, context) {
        return partInstallOldReportControllerFindOne(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `partInstallOldReportControllerFindOne$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    partInstallOldReportControllerFindOne(params, context) {
        return this.partInstallOldReportControllerFindOne$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: PartInstallOldReportService, deps: [{ token: ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: PartInstallOldReportService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: PartInstallOldReportService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: ApiConfiguration }, { type: i2.HttpClient }] });

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function partInstallOldWidgetControllerFindAll(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, partInstallOldWidgetControllerFindAll.PATH, 'post');
    if (params) {
        rb.query('filter', params.filter, {});
        rb.query('joinWhere', params.joinWhere, {});
        rb.query('select', params.select, {});
        rb.query('groupBy', params.groupBy, {});
        rb.query('sortKey', params.sortKey, {});
        rb.query('sortValue', params.sortValue, {});
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
partInstallOldWidgetControllerFindAll.PATH = '/amims/part_install_old/part_install_old_widget';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
class PartInstallOldWidgetService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `partInstallOldWidgetControllerFindAll()` */
    static { this.PartInstallOldWidgetControllerFindAllPath = '/amims/part_install_old/part_install_old_widget'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `partInstallOldWidgetControllerFindAll()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    partInstallOldWidgetControllerFindAll$Response(params, context) {
        return partInstallOldWidgetControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `partInstallOldWidgetControllerFindAll$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    partInstallOldWidgetControllerFindAll(params, context) {
        return this.partInstallOldWidgetControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: PartInstallOldWidgetService, deps: [{ token: ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: PartInstallOldWidgetService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: PartInstallOldWidgetService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: ApiConfiguration }, { type: i2.HttpClient }] });

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function partLogControllerCreate(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, partLogControllerCreate.PATH, 'post');
    if (params) {
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
partLogControllerCreate.PATH = '/amims/part_log/part_log';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function partLogControllerFindAll(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, partLogControllerFindAll.PATH, 'get');
    if (params) {
        rb.query('pageIndex', params.pageIndex, {});
        rb.query('pageSize', params.pageSize, {});
        rb.query('filter', params.filter, {});
        rb.query('sortKey', params.sortKey, {});
        rb.query('sortValue', params.sortValue, {});
        rb.query('search_field', params.search_field, {});
        rb.query('search_keyword', params.search_keyword, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
partLogControllerFindAll.PATH = '/amims/part_log/part_log';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function partLogControllerFindOne(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, partLogControllerFindOne.PATH, 'get');
    if (params) {
        rb.path('id', params.id, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
partLogControllerFindOne.PATH = '/amims/part_log/part_log/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function partLogControllerRemove(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, partLogControllerRemove.PATH, 'delete');
    if (params) {
        rb.path('id', params.id, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
partLogControllerRemove.PATH = '/amims/part_log/part_log/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function partLogControllerUpdate(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, partLogControllerUpdate.PATH, 'put');
    if (params) {
        rb.path('id', params.id, {});
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
partLogControllerUpdate.PATH = '/amims/part_log/part_log/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
class PartLogService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `partLogControllerFindAll()` */
    static { this.PartLogControllerFindAllPath = '/amims/part_log/part_log'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `partLogControllerFindAll()` instead.
     *
     * This method doesn't expect any request body.
     */
    partLogControllerFindAll$Response(params, context) {
        return partLogControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `partLogControllerFindAll$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    partLogControllerFindAll(params, context) {
        return this.partLogControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `partLogControllerCreate()` */
    static { this.PartLogControllerCreatePath = '/amims/part_log/part_log'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `partLogControllerCreate()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    partLogControllerCreate$Response(params, context) {
        return partLogControllerCreate(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `partLogControllerCreate$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    partLogControllerCreate(params, context) {
        return this.partLogControllerCreate$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `partLogControllerFindOne()` */
    static { this.PartLogControllerFindOnePath = '/amims/part_log/part_log/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `partLogControllerFindOne()` instead.
     *
     * This method doesn't expect any request body.
     */
    partLogControllerFindOne$Response(params, context) {
        return partLogControllerFindOne(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `partLogControllerFindOne$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    partLogControllerFindOne(params, context) {
        return this.partLogControllerFindOne$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `partLogControllerUpdate()` */
    static { this.PartLogControllerUpdatePath = '/amims/part_log/part_log/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `partLogControllerUpdate()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    partLogControllerUpdate$Response(params, context) {
        return partLogControllerUpdate(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `partLogControllerUpdate$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    partLogControllerUpdate(params, context) {
        return this.partLogControllerUpdate$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `partLogControllerRemove()` */
    static { this.PartLogControllerRemovePath = '/amims/part_log/part_log/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `partLogControllerRemove()` instead.
     *
     * This method doesn't expect any request body.
     */
    partLogControllerRemove$Response(params, context) {
        return partLogControllerRemove(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `partLogControllerRemove$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    partLogControllerRemove(params, context) {
        return this.partLogControllerRemove$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: PartLogService, deps: [{ token: ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: PartLogService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: PartLogService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: ApiConfiguration }, { type: i2.HttpClient }] });

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function partLogReportControllerFindAll(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, partLogReportControllerFindAll.PATH, 'post');
    if (params) {
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
partLogReportControllerFindAll.PATH = '/amims/part_log/part_log_report/list';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function partLogReportControllerFindOne(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, partLogReportControllerFindOne.PATH, 'get');
    if (params) {
        rb.path('id', params.id, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
partLogReportControllerFindOne.PATH = '/amims/part_log/part_log_report/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
class PartLogReportService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `partLogReportControllerFindAll()` */
    static { this.PartLogReportControllerFindAllPath = '/amims/part_log/part_log_report/list'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `partLogReportControllerFindAll()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    partLogReportControllerFindAll$Response(params, context) {
        return partLogReportControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `partLogReportControllerFindAll$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    partLogReportControllerFindAll(params, context) {
        return this.partLogReportControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `partLogReportControllerFindOne()` */
    static { this.PartLogReportControllerFindOnePath = '/amims/part_log/part_log_report/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `partLogReportControllerFindOne()` instead.
     *
     * This method doesn't expect any request body.
     */
    partLogReportControllerFindOne$Response(params, context) {
        return partLogReportControllerFindOne(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `partLogReportControllerFindOne$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    partLogReportControllerFindOne(params, context) {
        return this.partLogReportControllerFindOne$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: PartLogReportService, deps: [{ token: ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: PartLogReportService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: PartLogReportService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: ApiConfiguration }, { type: i2.HttpClient }] });

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function partLogWidgetControllerFindAll(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, partLogWidgetControllerFindAll.PATH, 'post');
    if (params) {
        rb.query('filter', params.filter, {});
        rb.query('joinWhere', params.joinWhere, {});
        rb.query('select', params.select, {});
        rb.query('groupBy', params.groupBy, {});
        rb.query('sortKey', params.sortKey, {});
        rb.query('sortValue', params.sortValue, {});
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
partLogWidgetControllerFindAll.PATH = '/amims/part_log/part_log_widget';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
class PartLogWidgetService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `partLogWidgetControllerFindAll()` */
    static { this.PartLogWidgetControllerFindAllPath = '/amims/part_log/part_log_widget'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `partLogWidgetControllerFindAll()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    partLogWidgetControllerFindAll$Response(params, context) {
        return partLogWidgetControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `partLogWidgetControllerFindAll$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    partLogWidgetControllerFindAll(params, context) {
        return this.partLogWidgetControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: PartLogWidgetService, deps: [{ token: ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: PartLogWidgetService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: PartLogWidgetService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: ApiConfiguration }, { type: i2.HttpClient }] });

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function partidControllerCreate(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, partidControllerCreate.PATH, 'post');
    if (params) {
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
partidControllerCreate.PATH = '/amims/partid/partid';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function partidControllerFindAll(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, partidControllerFindAll.PATH, 'get');
    if (params) {
        rb.query('pageIndex', params.pageIndex, {});
        rb.query('pageSize', params.pageSize, {});
        rb.query('filter', params.filter, {});
        rb.query('sortKey', params.sortKey, {});
        rb.query('sortValue', params.sortValue, {});
        rb.query('search_field', params.search_field, {});
        rb.query('search_keyword', params.search_keyword, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
partidControllerFindAll.PATH = '/amims/partid/partid';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function partidControllerFindOne(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, partidControllerFindOne.PATH, 'get');
    if (params) {
        rb.path('id', params.id, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
partidControllerFindOne.PATH = '/amims/partid/partid/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function partidControllerRemove(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, partidControllerRemove.PATH, 'delete');
    if (params) {
        rb.path('id', params.id, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
partidControllerRemove.PATH = '/amims/partid/partid/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function partidControllerUpdate(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, partidControllerUpdate.PATH, 'put');
    if (params) {
        rb.path('id', params.id, {});
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
partidControllerUpdate.PATH = '/amims/partid/partid/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
class PartidService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `partidControllerFindAll()` */
    static { this.PartidControllerFindAllPath = '/amims/partid/partid'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `partidControllerFindAll()` instead.
     *
     * This method doesn't expect any request body.
     */
    partidControllerFindAll$Response(params, context) {
        return partidControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `partidControllerFindAll$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    partidControllerFindAll(params, context) {
        return this.partidControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `partidControllerCreate()` */
    static { this.PartidControllerCreatePath = '/amims/partid/partid'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `partidControllerCreate()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    partidControllerCreate$Response(params, context) {
        return partidControllerCreate(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `partidControllerCreate$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    partidControllerCreate(params, context) {
        return this.partidControllerCreate$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `partidControllerFindOne()` */
    static { this.PartidControllerFindOnePath = '/amims/partid/partid/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `partidControllerFindOne()` instead.
     *
     * This method doesn't expect any request body.
     */
    partidControllerFindOne$Response(params, context) {
        return partidControllerFindOne(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `partidControllerFindOne$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    partidControllerFindOne(params, context) {
        return this.partidControllerFindOne$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `partidControllerUpdate()` */
    static { this.PartidControllerUpdatePath = '/amims/partid/partid/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `partidControllerUpdate()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    partidControllerUpdate$Response(params, context) {
        return partidControllerUpdate(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `partidControllerUpdate$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    partidControllerUpdate(params, context) {
        return this.partidControllerUpdate$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `partidControllerRemove()` */
    static { this.PartidControllerRemovePath = '/amims/partid/partid/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `partidControllerRemove()` instead.
     *
     * This method doesn't expect any request body.
     */
    partidControllerRemove$Response(params, context) {
        return partidControllerRemove(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `partidControllerRemove$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    partidControllerRemove(params, context) {
        return this.partidControllerRemove$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: PartidService, deps: [{ token: ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: PartidService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: PartidService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: ApiConfiguration }, { type: i2.HttpClient }] });

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function partidReportControllerFindAll(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, partidReportControllerFindAll.PATH, 'post');
    if (params) {
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
partidReportControllerFindAll.PATH = '/amims/partid/partid_report/list';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function partidReportControllerFindOne(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, partidReportControllerFindOne.PATH, 'get');
    if (params) {
        rb.path('id', params.id, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
partidReportControllerFindOne.PATH = '/amims/partid/partid_report/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
class PartidReportService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `partidReportControllerFindAll()` */
    static { this.PartidReportControllerFindAllPath = '/amims/partid/partid_report/list'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `partidReportControllerFindAll()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    partidReportControllerFindAll$Response(params, context) {
        return partidReportControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `partidReportControllerFindAll$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    partidReportControllerFindAll(params, context) {
        return this.partidReportControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `partidReportControllerFindOne()` */
    static { this.PartidReportControllerFindOnePath = '/amims/partid/partid_report/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `partidReportControllerFindOne()` instead.
     *
     * This method doesn't expect any request body.
     */
    partidReportControllerFindOne$Response(params, context) {
        return partidReportControllerFindOne(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `partidReportControllerFindOne$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    partidReportControllerFindOne(params, context) {
        return this.partidReportControllerFindOne$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: PartidReportService, deps: [{ token: ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: PartidReportService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: PartidReportService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: ApiConfiguration }, { type: i2.HttpClient }] });

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function partidWidgetControllerFindAll(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, partidWidgetControllerFindAll.PATH, 'post');
    if (params) {
        rb.query('filter', params.filter, {});
        rb.query('joinWhere', params.joinWhere, {});
        rb.query('select', params.select, {});
        rb.query('groupBy', params.groupBy, {});
        rb.query('sortKey', params.sortKey, {});
        rb.query('sortValue', params.sortValue, {});
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
partidWidgetControllerFindAll.PATH = '/amims/partid/partid_widget';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
class PartidWidgetService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `partidWidgetControllerFindAll()` */
    static { this.PartidWidgetControllerFindAllPath = '/amims/partid/partid_widget'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `partidWidgetControllerFindAll()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    partidWidgetControllerFindAll$Response(params, context) {
        return partidWidgetControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `partidWidgetControllerFindAll$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    partidWidgetControllerFindAll(params, context) {
        return this.partidWidgetControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: PartidWidgetService, deps: [{ token: ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: PartidWidgetService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: PartidWidgetService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: ApiConfiguration }, { type: i2.HttpClient }] });

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function pilotControllerCreate(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, pilotControllerCreate.PATH, 'post');
    if (params) {
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
pilotControllerCreate.PATH = '/amims/pilot/pilot';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function pilotControllerFindAll(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, pilotControllerFindAll.PATH, 'get');
    if (params) {
        rb.query('pageIndex', params.pageIndex, {});
        rb.query('pageSize', params.pageSize, {});
        rb.query('filter', params.filter, {});
        rb.query('sortKey', params.sortKey, {});
        rb.query('sortValue', params.sortValue, {});
        rb.query('search_field', params.search_field, {});
        rb.query('search_keyword', params.search_keyword, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
pilotControllerFindAll.PATH = '/amims/pilot/pilot';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function pilotControllerFindOne(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, pilotControllerFindOne.PATH, 'get');
    if (params) {
        rb.path('id', params.id, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
pilotControllerFindOne.PATH = '/amims/pilot/pilot/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function pilotControllerRemove(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, pilotControllerRemove.PATH, 'delete');
    if (params) {
        rb.path('id', params.id, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
pilotControllerRemove.PATH = '/amims/pilot/pilot/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function pilotControllerUpdate(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, pilotControllerUpdate.PATH, 'put');
    if (params) {
        rb.path('id', params.id, {});
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
pilotControllerUpdate.PATH = '/amims/pilot/pilot/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
class PilotService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `pilotControllerFindAll()` */
    static { this.PilotControllerFindAllPath = '/amims/pilot/pilot'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `pilotControllerFindAll()` instead.
     *
     * This method doesn't expect any request body.
     */
    pilotControllerFindAll$Response(params, context) {
        return pilotControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `pilotControllerFindAll$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    pilotControllerFindAll(params, context) {
        return this.pilotControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `pilotControllerCreate()` */
    static { this.PilotControllerCreatePath = '/amims/pilot/pilot'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `pilotControllerCreate()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    pilotControllerCreate$Response(params, context) {
        return pilotControllerCreate(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `pilotControllerCreate$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    pilotControllerCreate(params, context) {
        return this.pilotControllerCreate$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `pilotControllerFindOne()` */
    static { this.PilotControllerFindOnePath = '/amims/pilot/pilot/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `pilotControllerFindOne()` instead.
     *
     * This method doesn't expect any request body.
     */
    pilotControllerFindOne$Response(params, context) {
        return pilotControllerFindOne(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `pilotControllerFindOne$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    pilotControllerFindOne(params, context) {
        return this.pilotControllerFindOne$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `pilotControllerUpdate()` */
    static { this.PilotControllerUpdatePath = '/amims/pilot/pilot/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `pilotControllerUpdate()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    pilotControllerUpdate$Response(params, context) {
        return pilotControllerUpdate(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `pilotControllerUpdate$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    pilotControllerUpdate(params, context) {
        return this.pilotControllerUpdate$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `pilotControllerRemove()` */
    static { this.PilotControllerRemovePath = '/amims/pilot/pilot/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `pilotControllerRemove()` instead.
     *
     * This method doesn't expect any request body.
     */
    pilotControllerRemove$Response(params, context) {
        return pilotControllerRemove(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `pilotControllerRemove$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    pilotControllerRemove(params, context) {
        return this.pilotControllerRemove$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: PilotService, deps: [{ token: ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: PilotService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: PilotService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: ApiConfiguration }, { type: i2.HttpClient }] });

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function pilotReportControllerFindAll(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, pilotReportControllerFindAll.PATH, 'post');
    if (params) {
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
pilotReportControllerFindAll.PATH = '/amims/pilot/pilot_report/list';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function pilotReportControllerFindOne(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, pilotReportControllerFindOne.PATH, 'get');
    if (params) {
        rb.path('id', params.id, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
pilotReportControllerFindOne.PATH = '/amims/pilot/pilot_report/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
class PilotReportService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `pilotReportControllerFindAll()` */
    static { this.PilotReportControllerFindAllPath = '/amims/pilot/pilot_report/list'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `pilotReportControllerFindAll()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    pilotReportControllerFindAll$Response(params, context) {
        return pilotReportControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `pilotReportControllerFindAll$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    pilotReportControllerFindAll(params, context) {
        return this.pilotReportControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `pilotReportControllerFindOne()` */
    static { this.PilotReportControllerFindOnePath = '/amims/pilot/pilot_report/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `pilotReportControllerFindOne()` instead.
     *
     * This method doesn't expect any request body.
     */
    pilotReportControllerFindOne$Response(params, context) {
        return pilotReportControllerFindOne(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `pilotReportControllerFindOne$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    pilotReportControllerFindOne(params, context) {
        return this.pilotReportControllerFindOne$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: PilotReportService, deps: [{ token: ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: PilotReportService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: PilotReportService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: ApiConfiguration }, { type: i2.HttpClient }] });

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function pilotWidgetControllerFindAll(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, pilotWidgetControllerFindAll.PATH, 'post');
    if (params) {
        rb.query('filter', params.filter, {});
        rb.query('joinWhere', params.joinWhere, {});
        rb.query('select', params.select, {});
        rb.query('groupBy', params.groupBy, {});
        rb.query('sortKey', params.sortKey, {});
        rb.query('sortValue', params.sortValue, {});
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
pilotWidgetControllerFindAll.PATH = '/amims/pilot/pilot_widget';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
class PilotWidgetService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `pilotWidgetControllerFindAll()` */
    static { this.PilotWidgetControllerFindAllPath = '/amims/pilot/pilot_widget'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `pilotWidgetControllerFindAll()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    pilotWidgetControllerFindAll$Response(params, context) {
        return pilotWidgetControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `pilotWidgetControllerFindAll$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    pilotWidgetControllerFindAll(params, context) {
        return this.pilotWidgetControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: PilotWidgetService, deps: [{ token: ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: PilotWidgetService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: PilotWidgetService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: ApiConfiguration }, { type: i2.HttpClient }] });

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function positionControllerCreate(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, positionControllerCreate.PATH, 'post');
    if (params) {
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
positionControllerCreate.PATH = '/amims/position/position';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function positionControllerFindAll(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, positionControllerFindAll.PATH, 'get');
    if (params) {
        rb.query('pageIndex', params.pageIndex, {});
        rb.query('pageSize', params.pageSize, {});
        rb.query('filter', params.filter, {});
        rb.query('sortKey', params.sortKey, {});
        rb.query('sortValue', params.sortValue, {});
        rb.query('search_field', params.search_field, {});
        rb.query('search_keyword', params.search_keyword, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
positionControllerFindAll.PATH = '/amims/position/position';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function positionControllerFindOne(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, positionControllerFindOne.PATH, 'get');
    if (params) {
        rb.path('id', params.id, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
positionControllerFindOne.PATH = '/amims/position/position/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function positionControllerRemove(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, positionControllerRemove.PATH, 'delete');
    if (params) {
        rb.path('id', params.id, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
positionControllerRemove.PATH = '/amims/position/position/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function positionControllerUpdate(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, positionControllerUpdate.PATH, 'put');
    if (params) {
        rb.path('id', params.id, {});
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
positionControllerUpdate.PATH = '/amims/position/position/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
class PositionService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `positionControllerFindAll()` */
    static { this.PositionControllerFindAllPath = '/amims/position/position'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `positionControllerFindAll()` instead.
     *
     * This method doesn't expect any request body.
     */
    positionControllerFindAll$Response(params, context) {
        return positionControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `positionControllerFindAll$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    positionControllerFindAll(params, context) {
        return this.positionControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `positionControllerCreate()` */
    static { this.PositionControllerCreatePath = '/amims/position/position'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `positionControllerCreate()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    positionControllerCreate$Response(params, context) {
        return positionControllerCreate(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `positionControllerCreate$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    positionControllerCreate(params, context) {
        return this.positionControllerCreate$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `positionControllerFindOne()` */
    static { this.PositionControllerFindOnePath = '/amims/position/position/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `positionControllerFindOne()` instead.
     *
     * This method doesn't expect any request body.
     */
    positionControllerFindOne$Response(params, context) {
        return positionControllerFindOne(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `positionControllerFindOne$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    positionControllerFindOne(params, context) {
        return this.positionControllerFindOne$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `positionControllerUpdate()` */
    static { this.PositionControllerUpdatePath = '/amims/position/position/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `positionControllerUpdate()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    positionControllerUpdate$Response(params, context) {
        return positionControllerUpdate(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `positionControllerUpdate$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    positionControllerUpdate(params, context) {
        return this.positionControllerUpdate$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `positionControllerRemove()` */
    static { this.PositionControllerRemovePath = '/amims/position/position/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `positionControllerRemove()` instead.
     *
     * This method doesn't expect any request body.
     */
    positionControllerRemove$Response(params, context) {
        return positionControllerRemove(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `positionControllerRemove$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    positionControllerRemove(params, context) {
        return this.positionControllerRemove$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: PositionService, deps: [{ token: ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: PositionService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: PositionService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: ApiConfiguration }, { type: i2.HttpClient }] });

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function positionReportControllerFindAll(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, positionReportControllerFindAll.PATH, 'post');
    if (params) {
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
positionReportControllerFindAll.PATH = '/amims/position/position_report/list';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function positionReportControllerFindOne(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, positionReportControllerFindOne.PATH, 'get');
    if (params) {
        rb.path('id', params.id, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
positionReportControllerFindOne.PATH = '/amims/position/position_report/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
class PositionReportService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `positionReportControllerFindAll()` */
    static { this.PositionReportControllerFindAllPath = '/amims/position/position_report/list'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `positionReportControllerFindAll()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    positionReportControllerFindAll$Response(params, context) {
        return positionReportControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `positionReportControllerFindAll$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    positionReportControllerFindAll(params, context) {
        return this.positionReportControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `positionReportControllerFindOne()` */
    static { this.PositionReportControllerFindOnePath = '/amims/position/position_report/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `positionReportControllerFindOne()` instead.
     *
     * This method doesn't expect any request body.
     */
    positionReportControllerFindOne$Response(params, context) {
        return positionReportControllerFindOne(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `positionReportControllerFindOne$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    positionReportControllerFindOne(params, context) {
        return this.positionReportControllerFindOne$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: PositionReportService, deps: [{ token: ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: PositionReportService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: PositionReportService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: ApiConfiguration }, { type: i2.HttpClient }] });

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function positionWidgetControllerFindAll(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, positionWidgetControllerFindAll.PATH, 'post');
    if (params) {
        rb.query('filter', params.filter, {});
        rb.query('joinWhere', params.joinWhere, {});
        rb.query('select', params.select, {});
        rb.query('groupBy', params.groupBy, {});
        rb.query('sortKey', params.sortKey, {});
        rb.query('sortValue', params.sortValue, {});
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
positionWidgetControllerFindAll.PATH = '/amims/position/position_widget';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
class PositionWidgetService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `positionWidgetControllerFindAll()` */
    static { this.PositionWidgetControllerFindAllPath = '/amims/position/position_widget'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `positionWidgetControllerFindAll()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    positionWidgetControllerFindAll$Response(params, context) {
        return positionWidgetControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `positionWidgetControllerFindAll$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    positionWidgetControllerFindAll(params, context) {
        return this.positionWidgetControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: PositionWidgetService, deps: [{ token: ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: PositionWidgetService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: PositionWidgetService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: ApiConfiguration }, { type: i2.HttpClient }] });

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function purGrnControllerCreate(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, purGrnControllerCreate.PATH, 'post');
    if (params) {
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
purGrnControllerCreate.PATH = '/amims/pur_grn/pur_grn';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function purGrnControllerFindAll(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, purGrnControllerFindAll.PATH, 'get');
    if (params) {
        rb.query('pageIndex', params.pageIndex, {});
        rb.query('pageSize', params.pageSize, {});
        rb.query('filter', params.filter, {});
        rb.query('sortKey', params.sortKey, {});
        rb.query('sortValue', params.sortValue, {});
        rb.query('search_field', params.search_field, {});
        rb.query('search_keyword', params.search_keyword, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
purGrnControllerFindAll.PATH = '/amims/pur_grn/pur_grn';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function purGrnControllerFindOne(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, purGrnControllerFindOne.PATH, 'get');
    if (params) {
        rb.path('id', params.id, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
purGrnControllerFindOne.PATH = '/amims/pur_grn/pur_grn/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function purGrnControllerRemove(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, purGrnControllerRemove.PATH, 'delete');
    if (params) {
        rb.path('id', params.id, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
purGrnControllerRemove.PATH = '/amims/pur_grn/pur_grn/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function purGrnControllerUpdate(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, purGrnControllerUpdate.PATH, 'put');
    if (params) {
        rb.path('id', params.id, {});
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
purGrnControllerUpdate.PATH = '/amims/pur_grn/pur_grn/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
class PurGrnService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `purGrnControllerFindAll()` */
    static { this.PurGrnControllerFindAllPath = '/amims/pur_grn/pur_grn'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `purGrnControllerFindAll()` instead.
     *
     * This method doesn't expect any request body.
     */
    purGrnControllerFindAll$Response(params, context) {
        return purGrnControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `purGrnControllerFindAll$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    purGrnControllerFindAll(params, context) {
        return this.purGrnControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `purGrnControllerCreate()` */
    static { this.PurGrnControllerCreatePath = '/amims/pur_grn/pur_grn'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `purGrnControllerCreate()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    purGrnControllerCreate$Response(params, context) {
        return purGrnControllerCreate(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `purGrnControllerCreate$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    purGrnControllerCreate(params, context) {
        return this.purGrnControllerCreate$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `purGrnControllerFindOne()` */
    static { this.PurGrnControllerFindOnePath = '/amims/pur_grn/pur_grn/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `purGrnControllerFindOne()` instead.
     *
     * This method doesn't expect any request body.
     */
    purGrnControllerFindOne$Response(params, context) {
        return purGrnControllerFindOne(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `purGrnControllerFindOne$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    purGrnControllerFindOne(params, context) {
        return this.purGrnControllerFindOne$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `purGrnControllerUpdate()` */
    static { this.PurGrnControllerUpdatePath = '/amims/pur_grn/pur_grn/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `purGrnControllerUpdate()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    purGrnControllerUpdate$Response(params, context) {
        return purGrnControllerUpdate(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `purGrnControllerUpdate$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    purGrnControllerUpdate(params, context) {
        return this.purGrnControllerUpdate$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `purGrnControllerRemove()` */
    static { this.PurGrnControllerRemovePath = '/amims/pur_grn/pur_grn/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `purGrnControllerRemove()` instead.
     *
     * This method doesn't expect any request body.
     */
    purGrnControllerRemove$Response(params, context) {
        return purGrnControllerRemove(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `purGrnControllerRemove$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    purGrnControllerRemove(params, context) {
        return this.purGrnControllerRemove$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: PurGrnService, deps: [{ token: ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: PurGrnService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: PurGrnService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: ApiConfiguration }, { type: i2.HttpClient }] });

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function purGrnReportControllerFindAll(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, purGrnReportControllerFindAll.PATH, 'post');
    if (params) {
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
purGrnReportControllerFindAll.PATH = '/amims/pur_grn/pur_grn_report/list';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function purGrnReportControllerFindOne(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, purGrnReportControllerFindOne.PATH, 'get');
    if (params) {
        rb.path('id', params.id, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
purGrnReportControllerFindOne.PATH = '/amims/pur_grn/pur_grn_report/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
class PurGrnReportService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `purGrnReportControllerFindAll()` */
    static { this.PurGrnReportControllerFindAllPath = '/amims/pur_grn/pur_grn_report/list'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `purGrnReportControllerFindAll()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    purGrnReportControllerFindAll$Response(params, context) {
        return purGrnReportControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `purGrnReportControllerFindAll$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    purGrnReportControllerFindAll(params, context) {
        return this.purGrnReportControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `purGrnReportControllerFindOne()` */
    static { this.PurGrnReportControllerFindOnePath = '/amims/pur_grn/pur_grn_report/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `purGrnReportControllerFindOne()` instead.
     *
     * This method doesn't expect any request body.
     */
    purGrnReportControllerFindOne$Response(params, context) {
        return purGrnReportControllerFindOne(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `purGrnReportControllerFindOne$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    purGrnReportControllerFindOne(params, context) {
        return this.purGrnReportControllerFindOne$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: PurGrnReportService, deps: [{ token: ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: PurGrnReportService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: PurGrnReportService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: ApiConfiguration }, { type: i2.HttpClient }] });

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function purGrnWidgetControllerFindAll(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, purGrnWidgetControllerFindAll.PATH, 'post');
    if (params) {
        rb.query('filter', params.filter, {});
        rb.query('joinWhere', params.joinWhere, {});
        rb.query('select', params.select, {});
        rb.query('groupBy', params.groupBy, {});
        rb.query('sortKey', params.sortKey, {});
        rb.query('sortValue', params.sortValue, {});
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
purGrnWidgetControllerFindAll.PATH = '/amims/pur_grn/pur_grn_widget';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
class PurGrnWidgetService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `purGrnWidgetControllerFindAll()` */
    static { this.PurGrnWidgetControllerFindAllPath = '/amims/pur_grn/pur_grn_widget'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `purGrnWidgetControllerFindAll()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    purGrnWidgetControllerFindAll$Response(params, context) {
        return purGrnWidgetControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `purGrnWidgetControllerFindAll$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    purGrnWidgetControllerFindAll(params, context) {
        return this.purGrnWidgetControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: PurGrnWidgetService, deps: [{ token: ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: PurGrnWidgetService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: PurGrnWidgetService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: ApiConfiguration }, { type: i2.HttpClient }] });

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function purGrnItemControllerCreate(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, purGrnItemControllerCreate.PATH, 'post');
    if (params) {
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
purGrnItemControllerCreate.PATH = '/amims/pur_grn_item/pur_grn_item';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function purGrnItemControllerFindAll(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, purGrnItemControllerFindAll.PATH, 'get');
    if (params) {
        rb.query('pageIndex', params.pageIndex, {});
        rb.query('pageSize', params.pageSize, {});
        rb.query('filter', params.filter, {});
        rb.query('sortKey', params.sortKey, {});
        rb.query('sortValue', params.sortValue, {});
        rb.query('search_field', params.search_field, {});
        rb.query('search_keyword', params.search_keyword, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
purGrnItemControllerFindAll.PATH = '/amims/pur_grn_item/pur_grn_item';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function purGrnItemControllerFindOne(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, purGrnItemControllerFindOne.PATH, 'get');
    if (params) {
        rb.path('id', params.id, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
purGrnItemControllerFindOne.PATH = '/amims/pur_grn_item/pur_grn_item/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function purGrnItemControllerRemove(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, purGrnItemControllerRemove.PATH, 'delete');
    if (params) {
        rb.path('id', params.id, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
purGrnItemControllerRemove.PATH = '/amims/pur_grn_item/pur_grn_item/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function purGrnItemControllerUpdate(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, purGrnItemControllerUpdate.PATH, 'put');
    if (params) {
        rb.path('id', params.id, {});
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
purGrnItemControllerUpdate.PATH = '/amims/pur_grn_item/pur_grn_item/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
class PurGrnItemService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `purGrnItemControllerFindAll()` */
    static { this.PurGrnItemControllerFindAllPath = '/amims/pur_grn_item/pur_grn_item'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `purGrnItemControllerFindAll()` instead.
     *
     * This method doesn't expect any request body.
     */
    purGrnItemControllerFindAll$Response(params, context) {
        return purGrnItemControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `purGrnItemControllerFindAll$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    purGrnItemControllerFindAll(params, context) {
        return this.purGrnItemControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `purGrnItemControllerCreate()` */
    static { this.PurGrnItemControllerCreatePath = '/amims/pur_grn_item/pur_grn_item'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `purGrnItemControllerCreate()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    purGrnItemControllerCreate$Response(params, context) {
        return purGrnItemControllerCreate(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `purGrnItemControllerCreate$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    purGrnItemControllerCreate(params, context) {
        return this.purGrnItemControllerCreate$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `purGrnItemControllerFindOne()` */
    static { this.PurGrnItemControllerFindOnePath = '/amims/pur_grn_item/pur_grn_item/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `purGrnItemControllerFindOne()` instead.
     *
     * This method doesn't expect any request body.
     */
    purGrnItemControllerFindOne$Response(params, context) {
        return purGrnItemControllerFindOne(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `purGrnItemControllerFindOne$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    purGrnItemControllerFindOne(params, context) {
        return this.purGrnItemControllerFindOne$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `purGrnItemControllerUpdate()` */
    static { this.PurGrnItemControllerUpdatePath = '/amims/pur_grn_item/pur_grn_item/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `purGrnItemControllerUpdate()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    purGrnItemControllerUpdate$Response(params, context) {
        return purGrnItemControllerUpdate(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `purGrnItemControllerUpdate$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    purGrnItemControllerUpdate(params, context) {
        return this.purGrnItemControllerUpdate$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `purGrnItemControllerRemove()` */
    static { this.PurGrnItemControllerRemovePath = '/amims/pur_grn_item/pur_grn_item/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `purGrnItemControllerRemove()` instead.
     *
     * This method doesn't expect any request body.
     */
    purGrnItemControllerRemove$Response(params, context) {
        return purGrnItemControllerRemove(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `purGrnItemControllerRemove$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    purGrnItemControllerRemove(params, context) {
        return this.purGrnItemControllerRemove$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: PurGrnItemService, deps: [{ token: ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: PurGrnItemService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: PurGrnItemService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: ApiConfiguration }, { type: i2.HttpClient }] });

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function purGrnItemReportControllerFindAll(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, purGrnItemReportControllerFindAll.PATH, 'post');
    if (params) {
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
purGrnItemReportControllerFindAll.PATH = '/amims/pur_grn_item/pur_grn_item_report/list';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function purGrnItemReportControllerFindOne(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, purGrnItemReportControllerFindOne.PATH, 'get');
    if (params) {
        rb.path('id', params.id, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
purGrnItemReportControllerFindOne.PATH = '/amims/pur_grn_item/pur_grn_item_report/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
class PurGrnItemReportService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `purGrnItemReportControllerFindAll()` */
    static { this.PurGrnItemReportControllerFindAllPath = '/amims/pur_grn_item/pur_grn_item_report/list'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `purGrnItemReportControllerFindAll()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    purGrnItemReportControllerFindAll$Response(params, context) {
        return purGrnItemReportControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `purGrnItemReportControllerFindAll$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    purGrnItemReportControllerFindAll(params, context) {
        return this.purGrnItemReportControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `purGrnItemReportControllerFindOne()` */
    static { this.PurGrnItemReportControllerFindOnePath = '/amims/pur_grn_item/pur_grn_item_report/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `purGrnItemReportControllerFindOne()` instead.
     *
     * This method doesn't expect any request body.
     */
    purGrnItemReportControllerFindOne$Response(params, context) {
        return purGrnItemReportControllerFindOne(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `purGrnItemReportControllerFindOne$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    purGrnItemReportControllerFindOne(params, context) {
        return this.purGrnItemReportControllerFindOne$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: PurGrnItemReportService, deps: [{ token: ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: PurGrnItemReportService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: PurGrnItemReportService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: ApiConfiguration }, { type: i2.HttpClient }] });

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function purGrnItemWidgetControllerFindAll(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, purGrnItemWidgetControllerFindAll.PATH, 'post');
    if (params) {
        rb.query('filter', params.filter, {});
        rb.query('joinWhere', params.joinWhere, {});
        rb.query('select', params.select, {});
        rb.query('groupBy', params.groupBy, {});
        rb.query('sortKey', params.sortKey, {});
        rb.query('sortValue', params.sortValue, {});
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
purGrnItemWidgetControllerFindAll.PATH = '/amims/pur_grn_item/pur_grn_item_widget';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
class PurGrnItemWidgetService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `purGrnItemWidgetControllerFindAll()` */
    static { this.PurGrnItemWidgetControllerFindAllPath = '/amims/pur_grn_item/pur_grn_item_widget'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `purGrnItemWidgetControllerFindAll()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    purGrnItemWidgetControllerFindAll$Response(params, context) {
        return purGrnItemWidgetControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `purGrnItemWidgetControllerFindAll$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    purGrnItemWidgetControllerFindAll(params, context) {
        return this.purGrnItemWidgetControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: PurGrnItemWidgetService, deps: [{ token: ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: PurGrnItemWidgetService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: PurGrnItemWidgetService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: ApiConfiguration }, { type: i2.HttpClient }] });

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function purPoControllerCreate(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, purPoControllerCreate.PATH, 'post');
    if (params) {
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
purPoControllerCreate.PATH = '/amims/pur_po/pur_po';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function purPoControllerFindAll(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, purPoControllerFindAll.PATH, 'get');
    if (params) {
        rb.query('pageIndex', params.pageIndex, {});
        rb.query('pageSize', params.pageSize, {});
        rb.query('filter', params.filter, {});
        rb.query('sortKey', params.sortKey, {});
        rb.query('sortValue', params.sortValue, {});
        rb.query('search_field', params.search_field, {});
        rb.query('search_keyword', params.search_keyword, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
purPoControllerFindAll.PATH = '/amims/pur_po/pur_po';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function purPoControllerFindOne(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, purPoControllerFindOne.PATH, 'get');
    if (params) {
        rb.path('id', params.id, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
purPoControllerFindOne.PATH = '/amims/pur_po/pur_po/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function purPoControllerRemove(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, purPoControllerRemove.PATH, 'delete');
    if (params) {
        rb.path('id', params.id, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
purPoControllerRemove.PATH = '/amims/pur_po/pur_po/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function purPoControllerUpdate(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, purPoControllerUpdate.PATH, 'put');
    if (params) {
        rb.path('id', params.id, {});
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
purPoControllerUpdate.PATH = '/amims/pur_po/pur_po/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
class PurPoService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `purPoControllerFindAll()` */
    static { this.PurPoControllerFindAllPath = '/amims/pur_po/pur_po'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `purPoControllerFindAll()` instead.
     *
     * This method doesn't expect any request body.
     */
    purPoControllerFindAll$Response(params, context) {
        return purPoControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `purPoControllerFindAll$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    purPoControllerFindAll(params, context) {
        return this.purPoControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `purPoControllerCreate()` */
    static { this.PurPoControllerCreatePath = '/amims/pur_po/pur_po'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `purPoControllerCreate()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    purPoControllerCreate$Response(params, context) {
        return purPoControllerCreate(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `purPoControllerCreate$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    purPoControllerCreate(params, context) {
        return this.purPoControllerCreate$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `purPoControllerFindOne()` */
    static { this.PurPoControllerFindOnePath = '/amims/pur_po/pur_po/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `purPoControllerFindOne()` instead.
     *
     * This method doesn't expect any request body.
     */
    purPoControllerFindOne$Response(params, context) {
        return purPoControllerFindOne(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `purPoControllerFindOne$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    purPoControllerFindOne(params, context) {
        return this.purPoControllerFindOne$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `purPoControllerUpdate()` */
    static { this.PurPoControllerUpdatePath = '/amims/pur_po/pur_po/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `purPoControllerUpdate()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    purPoControllerUpdate$Response(params, context) {
        return purPoControllerUpdate(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `purPoControllerUpdate$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    purPoControllerUpdate(params, context) {
        return this.purPoControllerUpdate$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `purPoControllerRemove()` */
    static { this.PurPoControllerRemovePath = '/amims/pur_po/pur_po/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `purPoControllerRemove()` instead.
     *
     * This method doesn't expect any request body.
     */
    purPoControllerRemove$Response(params, context) {
        return purPoControllerRemove(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `purPoControllerRemove$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    purPoControllerRemove(params, context) {
        return this.purPoControllerRemove$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: PurPoService, deps: [{ token: ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: PurPoService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: PurPoService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: ApiConfiguration }, { type: i2.HttpClient }] });

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function purPoReportControllerFindAll(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, purPoReportControllerFindAll.PATH, 'post');
    if (params) {
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
purPoReportControllerFindAll.PATH = '/amims/pur_po/pur_po_report/list';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function purPoReportControllerFindOne(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, purPoReportControllerFindOne.PATH, 'get');
    if (params) {
        rb.path('id', params.id, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
purPoReportControllerFindOne.PATH = '/amims/pur_po/pur_po_report/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
class PurPoReportService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `purPoReportControllerFindAll()` */
    static { this.PurPoReportControllerFindAllPath = '/amims/pur_po/pur_po_report/list'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `purPoReportControllerFindAll()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    purPoReportControllerFindAll$Response(params, context) {
        return purPoReportControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `purPoReportControllerFindAll$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    purPoReportControllerFindAll(params, context) {
        return this.purPoReportControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `purPoReportControllerFindOne()` */
    static { this.PurPoReportControllerFindOnePath = '/amims/pur_po/pur_po_report/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `purPoReportControllerFindOne()` instead.
     *
     * This method doesn't expect any request body.
     */
    purPoReportControllerFindOne$Response(params, context) {
        return purPoReportControllerFindOne(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `purPoReportControllerFindOne$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    purPoReportControllerFindOne(params, context) {
        return this.purPoReportControllerFindOne$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: PurPoReportService, deps: [{ token: ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: PurPoReportService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: PurPoReportService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: ApiConfiguration }, { type: i2.HttpClient }] });

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function purPoWidgetControllerFindAll(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, purPoWidgetControllerFindAll.PATH, 'post');
    if (params) {
        rb.query('filter', params.filter, {});
        rb.query('joinWhere', params.joinWhere, {});
        rb.query('select', params.select, {});
        rb.query('groupBy', params.groupBy, {});
        rb.query('sortKey', params.sortKey, {});
        rb.query('sortValue', params.sortValue, {});
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
purPoWidgetControllerFindAll.PATH = '/amims/pur_po/pur_po_widget';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
class PurPoWidgetService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `purPoWidgetControllerFindAll()` */
    static { this.PurPoWidgetControllerFindAllPath = '/amims/pur_po/pur_po_widget'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `purPoWidgetControllerFindAll()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    purPoWidgetControllerFindAll$Response(params, context) {
        return purPoWidgetControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `purPoWidgetControllerFindAll$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    purPoWidgetControllerFindAll(params, context) {
        return this.purPoWidgetControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: PurPoWidgetService, deps: [{ token: ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: PurPoWidgetService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: PurPoWidgetService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: ApiConfiguration }, { type: i2.HttpClient }] });

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function purPoItemControllerCreate(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, purPoItemControllerCreate.PATH, 'post');
    if (params) {
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
purPoItemControllerCreate.PATH = '/amims/pur_po_item/pur_po_item';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function purPoItemControllerFindAll(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, purPoItemControllerFindAll.PATH, 'get');
    if (params) {
        rb.query('pageIndex', params.pageIndex, {});
        rb.query('pageSize', params.pageSize, {});
        rb.query('filter', params.filter, {});
        rb.query('sortKey', params.sortKey, {});
        rb.query('sortValue', params.sortValue, {});
        rb.query('search_field', params.search_field, {});
        rb.query('search_keyword', params.search_keyword, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
purPoItemControllerFindAll.PATH = '/amims/pur_po_item/pur_po_item';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function purPoItemControllerFindOne(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, purPoItemControllerFindOne.PATH, 'get');
    if (params) {
        rb.path('id', params.id, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
purPoItemControllerFindOne.PATH = '/amims/pur_po_item/pur_po_item/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function purPoItemControllerRemove(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, purPoItemControllerRemove.PATH, 'delete');
    if (params) {
        rb.path('id', params.id, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
purPoItemControllerRemove.PATH = '/amims/pur_po_item/pur_po_item/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function purPoItemControllerUpdate(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, purPoItemControllerUpdate.PATH, 'put');
    if (params) {
        rb.path('id', params.id, {});
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
purPoItemControllerUpdate.PATH = '/amims/pur_po_item/pur_po_item/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
class PurPoItemService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `purPoItemControllerFindAll()` */
    static { this.PurPoItemControllerFindAllPath = '/amims/pur_po_item/pur_po_item'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `purPoItemControllerFindAll()` instead.
     *
     * This method doesn't expect any request body.
     */
    purPoItemControllerFindAll$Response(params, context) {
        return purPoItemControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `purPoItemControllerFindAll$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    purPoItemControllerFindAll(params, context) {
        return this.purPoItemControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `purPoItemControllerCreate()` */
    static { this.PurPoItemControllerCreatePath = '/amims/pur_po_item/pur_po_item'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `purPoItemControllerCreate()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    purPoItemControllerCreate$Response(params, context) {
        return purPoItemControllerCreate(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `purPoItemControllerCreate$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    purPoItemControllerCreate(params, context) {
        return this.purPoItemControllerCreate$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `purPoItemControllerFindOne()` */
    static { this.PurPoItemControllerFindOnePath = '/amims/pur_po_item/pur_po_item/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `purPoItemControllerFindOne()` instead.
     *
     * This method doesn't expect any request body.
     */
    purPoItemControllerFindOne$Response(params, context) {
        return purPoItemControllerFindOne(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `purPoItemControllerFindOne$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    purPoItemControllerFindOne(params, context) {
        return this.purPoItemControllerFindOne$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `purPoItemControllerUpdate()` */
    static { this.PurPoItemControllerUpdatePath = '/amims/pur_po_item/pur_po_item/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `purPoItemControllerUpdate()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    purPoItemControllerUpdate$Response(params, context) {
        return purPoItemControllerUpdate(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `purPoItemControllerUpdate$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    purPoItemControllerUpdate(params, context) {
        return this.purPoItemControllerUpdate$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `purPoItemControllerRemove()` */
    static { this.PurPoItemControllerRemovePath = '/amims/pur_po_item/pur_po_item/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `purPoItemControllerRemove()` instead.
     *
     * This method doesn't expect any request body.
     */
    purPoItemControllerRemove$Response(params, context) {
        return purPoItemControllerRemove(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `purPoItemControllerRemove$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    purPoItemControllerRemove(params, context) {
        return this.purPoItemControllerRemove$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: PurPoItemService, deps: [{ token: ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: PurPoItemService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: PurPoItemService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: ApiConfiguration }, { type: i2.HttpClient }] });

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function purPoItemReportControllerFindAll(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, purPoItemReportControllerFindAll.PATH, 'post');
    if (params) {
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
purPoItemReportControllerFindAll.PATH = '/amims/pur_po_item/pur_po_item_report/list';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function purPoItemReportControllerFindOne(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, purPoItemReportControllerFindOne.PATH, 'get');
    if (params) {
        rb.path('id', params.id, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
purPoItemReportControllerFindOne.PATH = '/amims/pur_po_item/pur_po_item_report/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
class PurPoItemReportService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `purPoItemReportControllerFindAll()` */
    static { this.PurPoItemReportControllerFindAllPath = '/amims/pur_po_item/pur_po_item_report/list'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `purPoItemReportControllerFindAll()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    purPoItemReportControllerFindAll$Response(params, context) {
        return purPoItemReportControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `purPoItemReportControllerFindAll$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    purPoItemReportControllerFindAll(params, context) {
        return this.purPoItemReportControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `purPoItemReportControllerFindOne()` */
    static { this.PurPoItemReportControllerFindOnePath = '/amims/pur_po_item/pur_po_item_report/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `purPoItemReportControllerFindOne()` instead.
     *
     * This method doesn't expect any request body.
     */
    purPoItemReportControllerFindOne$Response(params, context) {
        return purPoItemReportControllerFindOne(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `purPoItemReportControllerFindOne$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    purPoItemReportControllerFindOne(params, context) {
        return this.purPoItemReportControllerFindOne$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: PurPoItemReportService, deps: [{ token: ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: PurPoItemReportService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: PurPoItemReportService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: ApiConfiguration }, { type: i2.HttpClient }] });

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function purPoItemWidgetControllerFindAll(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, purPoItemWidgetControllerFindAll.PATH, 'post');
    if (params) {
        rb.query('filter', params.filter, {});
        rb.query('joinWhere', params.joinWhere, {});
        rb.query('select', params.select, {});
        rb.query('groupBy', params.groupBy, {});
        rb.query('sortKey', params.sortKey, {});
        rb.query('sortValue', params.sortValue, {});
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
purPoItemWidgetControllerFindAll.PATH = '/amims/pur_po_item/pur_po_item_widget';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
class PurPoItemWidgetService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `purPoItemWidgetControllerFindAll()` */
    static { this.PurPoItemWidgetControllerFindAllPath = '/amims/pur_po_item/pur_po_item_widget'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `purPoItemWidgetControllerFindAll()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    purPoItemWidgetControllerFindAll$Response(params, context) {
        return purPoItemWidgetControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `purPoItemWidgetControllerFindAll$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    purPoItemWidgetControllerFindAll(params, context) {
        return this.purPoItemWidgetControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: PurPoItemWidgetService, deps: [{ token: ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: PurPoItemWidgetService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: PurPoItemWidgetService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: ApiConfiguration }, { type: i2.HttpClient }] });

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function purPrControllerCreate(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, purPrControllerCreate.PATH, 'post');
    if (params) {
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
purPrControllerCreate.PATH = '/amims/pur_pr/pur_pr';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function purPrControllerFindAll(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, purPrControllerFindAll.PATH, 'get');
    if (params) {
        rb.query('pageIndex', params.pageIndex, {});
        rb.query('pageSize', params.pageSize, {});
        rb.query('filter', params.filter, {});
        rb.query('sortKey', params.sortKey, {});
        rb.query('sortValue', params.sortValue, {});
        rb.query('search_field', params.search_field, {});
        rb.query('search_keyword', params.search_keyword, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
purPrControllerFindAll.PATH = '/amims/pur_pr/pur_pr';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function purPrControllerFindOne(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, purPrControllerFindOne.PATH, 'get');
    if (params) {
        rb.path('id', params.id, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
purPrControllerFindOne.PATH = '/amims/pur_pr/pur_pr/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function purPrControllerRemove(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, purPrControllerRemove.PATH, 'delete');
    if (params) {
        rb.path('id', params.id, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
purPrControllerRemove.PATH = '/amims/pur_pr/pur_pr/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function purPrControllerUpdate(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, purPrControllerUpdate.PATH, 'put');
    if (params) {
        rb.path('id', params.id, {});
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
purPrControllerUpdate.PATH = '/amims/pur_pr/pur_pr/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
class PurPrService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `purPrControllerFindAll()` */
    static { this.PurPrControllerFindAllPath = '/amims/pur_pr/pur_pr'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `purPrControllerFindAll()` instead.
     *
     * This method doesn't expect any request body.
     */
    purPrControllerFindAll$Response(params, context) {
        return purPrControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `purPrControllerFindAll$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    purPrControllerFindAll(params, context) {
        return this.purPrControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `purPrControllerCreate()` */
    static { this.PurPrControllerCreatePath = '/amims/pur_pr/pur_pr'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `purPrControllerCreate()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    purPrControllerCreate$Response(params, context) {
        return purPrControllerCreate(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `purPrControllerCreate$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    purPrControllerCreate(params, context) {
        return this.purPrControllerCreate$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `purPrControllerFindOne()` */
    static { this.PurPrControllerFindOnePath = '/amims/pur_pr/pur_pr/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `purPrControllerFindOne()` instead.
     *
     * This method doesn't expect any request body.
     */
    purPrControllerFindOne$Response(params, context) {
        return purPrControllerFindOne(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `purPrControllerFindOne$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    purPrControllerFindOne(params, context) {
        return this.purPrControllerFindOne$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `purPrControllerUpdate()` */
    static { this.PurPrControllerUpdatePath = '/amims/pur_pr/pur_pr/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `purPrControllerUpdate()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    purPrControllerUpdate$Response(params, context) {
        return purPrControllerUpdate(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `purPrControllerUpdate$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    purPrControllerUpdate(params, context) {
        return this.purPrControllerUpdate$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `purPrControllerRemove()` */
    static { this.PurPrControllerRemovePath = '/amims/pur_pr/pur_pr/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `purPrControllerRemove()` instead.
     *
     * This method doesn't expect any request body.
     */
    purPrControllerRemove$Response(params, context) {
        return purPrControllerRemove(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `purPrControllerRemove$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    purPrControllerRemove(params, context) {
        return this.purPrControllerRemove$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: PurPrService, deps: [{ token: ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: PurPrService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: PurPrService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: ApiConfiguration }, { type: i2.HttpClient }] });

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function purPrReportControllerFindAll(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, purPrReportControllerFindAll.PATH, 'post');
    if (params) {
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
purPrReportControllerFindAll.PATH = '/amims/pur_pr/pur_pr_report/list';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function purPrReportControllerFindOne(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, purPrReportControllerFindOne.PATH, 'get');
    if (params) {
        rb.path('id', params.id, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
purPrReportControllerFindOne.PATH = '/amims/pur_pr/pur_pr_report/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
class PurPrReportService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `purPrReportControllerFindAll()` */
    static { this.PurPrReportControllerFindAllPath = '/amims/pur_pr/pur_pr_report/list'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `purPrReportControllerFindAll()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    purPrReportControllerFindAll$Response(params, context) {
        return purPrReportControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `purPrReportControllerFindAll$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    purPrReportControllerFindAll(params, context) {
        return this.purPrReportControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `purPrReportControllerFindOne()` */
    static { this.PurPrReportControllerFindOnePath = '/amims/pur_pr/pur_pr_report/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `purPrReportControllerFindOne()` instead.
     *
     * This method doesn't expect any request body.
     */
    purPrReportControllerFindOne$Response(params, context) {
        return purPrReportControllerFindOne(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `purPrReportControllerFindOne$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    purPrReportControllerFindOne(params, context) {
        return this.purPrReportControllerFindOne$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: PurPrReportService, deps: [{ token: ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: PurPrReportService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: PurPrReportService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: ApiConfiguration }, { type: i2.HttpClient }] });

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function purPrWidgetControllerFindAll(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, purPrWidgetControllerFindAll.PATH, 'post');
    if (params) {
        rb.query('filter', params.filter, {});
        rb.query('joinWhere', params.joinWhere, {});
        rb.query('select', params.select, {});
        rb.query('groupBy', params.groupBy, {});
        rb.query('sortKey', params.sortKey, {});
        rb.query('sortValue', params.sortValue, {});
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
purPrWidgetControllerFindAll.PATH = '/amims/pur_pr/pur_pr_widget';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
class PurPrWidgetService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `purPrWidgetControllerFindAll()` */
    static { this.PurPrWidgetControllerFindAllPath = '/amims/pur_pr/pur_pr_widget'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `purPrWidgetControllerFindAll()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    purPrWidgetControllerFindAll$Response(params, context) {
        return purPrWidgetControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `purPrWidgetControllerFindAll$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    purPrWidgetControllerFindAll(params, context) {
        return this.purPrWidgetControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: PurPrWidgetService, deps: [{ token: ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: PurPrWidgetService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: PurPrWidgetService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: ApiConfiguration }, { type: i2.HttpClient }] });

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function purPrItemControllerCreate(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, purPrItemControllerCreate.PATH, 'post');
    if (params) {
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
purPrItemControllerCreate.PATH = '/amims/pur_pr_item/pur_pr_item';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function purPrItemControllerFindAll(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, purPrItemControllerFindAll.PATH, 'get');
    if (params) {
        rb.query('pageIndex', params.pageIndex, {});
        rb.query('pageSize', params.pageSize, {});
        rb.query('filter', params.filter, {});
        rb.query('sortKey', params.sortKey, {});
        rb.query('sortValue', params.sortValue, {});
        rb.query('search_field', params.search_field, {});
        rb.query('search_keyword', params.search_keyword, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
purPrItemControllerFindAll.PATH = '/amims/pur_pr_item/pur_pr_item';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function purPrItemControllerFindOne(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, purPrItemControllerFindOne.PATH, 'get');
    if (params) {
        rb.path('id', params.id, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
purPrItemControllerFindOne.PATH = '/amims/pur_pr_item/pur_pr_item/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function purPrItemControllerRemove(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, purPrItemControllerRemove.PATH, 'delete');
    if (params) {
        rb.path('id', params.id, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
purPrItemControllerRemove.PATH = '/amims/pur_pr_item/pur_pr_item/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function purPrItemControllerUpdate(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, purPrItemControllerUpdate.PATH, 'put');
    if (params) {
        rb.path('id', params.id, {});
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
purPrItemControllerUpdate.PATH = '/amims/pur_pr_item/pur_pr_item/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
class PurPrItemService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `purPrItemControllerFindAll()` */
    static { this.PurPrItemControllerFindAllPath = '/amims/pur_pr_item/pur_pr_item'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `purPrItemControllerFindAll()` instead.
     *
     * This method doesn't expect any request body.
     */
    purPrItemControllerFindAll$Response(params, context) {
        return purPrItemControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `purPrItemControllerFindAll$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    purPrItemControllerFindAll(params, context) {
        return this.purPrItemControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `purPrItemControllerCreate()` */
    static { this.PurPrItemControllerCreatePath = '/amims/pur_pr_item/pur_pr_item'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `purPrItemControllerCreate()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    purPrItemControllerCreate$Response(params, context) {
        return purPrItemControllerCreate(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `purPrItemControllerCreate$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    purPrItemControllerCreate(params, context) {
        return this.purPrItemControllerCreate$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `purPrItemControllerFindOne()` */
    static { this.PurPrItemControllerFindOnePath = '/amims/pur_pr_item/pur_pr_item/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `purPrItemControllerFindOne()` instead.
     *
     * This method doesn't expect any request body.
     */
    purPrItemControllerFindOne$Response(params, context) {
        return purPrItemControllerFindOne(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `purPrItemControllerFindOne$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    purPrItemControllerFindOne(params, context) {
        return this.purPrItemControllerFindOne$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `purPrItemControllerUpdate()` */
    static { this.PurPrItemControllerUpdatePath = '/amims/pur_pr_item/pur_pr_item/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `purPrItemControllerUpdate()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    purPrItemControllerUpdate$Response(params, context) {
        return purPrItemControllerUpdate(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `purPrItemControllerUpdate$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    purPrItemControllerUpdate(params, context) {
        return this.purPrItemControllerUpdate$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `purPrItemControllerRemove()` */
    static { this.PurPrItemControllerRemovePath = '/amims/pur_pr_item/pur_pr_item/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `purPrItemControllerRemove()` instead.
     *
     * This method doesn't expect any request body.
     */
    purPrItemControllerRemove$Response(params, context) {
        return purPrItemControllerRemove(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `purPrItemControllerRemove$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    purPrItemControllerRemove(params, context) {
        return this.purPrItemControllerRemove$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: PurPrItemService, deps: [{ token: ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: PurPrItemService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: PurPrItemService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: ApiConfiguration }, { type: i2.HttpClient }] });

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function purPrItemReportControllerFindAll(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, purPrItemReportControllerFindAll.PATH, 'post');
    if (params) {
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
purPrItemReportControllerFindAll.PATH = '/amims/pur_pr_item/pur_pr_item_report/list';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function purPrItemReportControllerFindOne(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, purPrItemReportControllerFindOne.PATH, 'get');
    if (params) {
        rb.path('id', params.id, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
purPrItemReportControllerFindOne.PATH = '/amims/pur_pr_item/pur_pr_item_report/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
class PurPrItemReportService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `purPrItemReportControllerFindAll()` */
    static { this.PurPrItemReportControllerFindAllPath = '/amims/pur_pr_item/pur_pr_item_report/list'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `purPrItemReportControllerFindAll()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    purPrItemReportControllerFindAll$Response(params, context) {
        return purPrItemReportControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `purPrItemReportControllerFindAll$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    purPrItemReportControllerFindAll(params, context) {
        return this.purPrItemReportControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `purPrItemReportControllerFindOne()` */
    static { this.PurPrItemReportControllerFindOnePath = '/amims/pur_pr_item/pur_pr_item_report/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `purPrItemReportControllerFindOne()` instead.
     *
     * This method doesn't expect any request body.
     */
    purPrItemReportControllerFindOne$Response(params, context) {
        return purPrItemReportControllerFindOne(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `purPrItemReportControllerFindOne$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    purPrItemReportControllerFindOne(params, context) {
        return this.purPrItemReportControllerFindOne$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: PurPrItemReportService, deps: [{ token: ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: PurPrItemReportService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: PurPrItemReportService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: ApiConfiguration }, { type: i2.HttpClient }] });

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function purPrItemWidgetControllerFindAll(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, purPrItemWidgetControllerFindAll.PATH, 'post');
    if (params) {
        rb.query('filter', params.filter, {});
        rb.query('joinWhere', params.joinWhere, {});
        rb.query('select', params.select, {});
        rb.query('groupBy', params.groupBy, {});
        rb.query('sortKey', params.sortKey, {});
        rb.query('sortValue', params.sortValue, {});
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
purPrItemWidgetControllerFindAll.PATH = '/amims/pur_pr_item/pur_pr_item_widget';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
class PurPrItemWidgetService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `purPrItemWidgetControllerFindAll()` */
    static { this.PurPrItemWidgetControllerFindAllPath = '/amims/pur_pr_item/pur_pr_item_widget'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `purPrItemWidgetControllerFindAll()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    purPrItemWidgetControllerFindAll$Response(params, context) {
        return purPrItemWidgetControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `purPrItemWidgetControllerFindAll$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    purPrItemWidgetControllerFindAll(params, context) {
        return this.purPrItemWidgetControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: PurPrItemWidgetService, deps: [{ token: ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: PurPrItemWidgetService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: PurPrItemWidgetService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: ApiConfiguration }, { type: i2.HttpClient }] });

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function purPrclControllerCreate(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, purPrclControllerCreate.PATH, 'post');
    if (params) {
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
purPrclControllerCreate.PATH = '/amims/pur_prcl/pur_prcl';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function purPrclControllerFindAll(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, purPrclControllerFindAll.PATH, 'get');
    if (params) {
        rb.query('pageIndex', params.pageIndex, {});
        rb.query('pageSize', params.pageSize, {});
        rb.query('filter', params.filter, {});
        rb.query('sortKey', params.sortKey, {});
        rb.query('sortValue', params.sortValue, {});
        rb.query('search_field', params.search_field, {});
        rb.query('search_keyword', params.search_keyword, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
purPrclControllerFindAll.PATH = '/amims/pur_prcl/pur_prcl';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function purPrclControllerFindOne(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, purPrclControllerFindOne.PATH, 'get');
    if (params) {
        rb.path('id', params.id, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
purPrclControllerFindOne.PATH = '/amims/pur_prcl/pur_prcl/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function purPrclControllerRemove(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, purPrclControllerRemove.PATH, 'delete');
    if (params) {
        rb.path('id', params.id, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
purPrclControllerRemove.PATH = '/amims/pur_prcl/pur_prcl/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function purPrclControllerUpdate(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, purPrclControllerUpdate.PATH, 'put');
    if (params) {
        rb.path('id', params.id, {});
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
purPrclControllerUpdate.PATH = '/amims/pur_prcl/pur_prcl/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
class PurPrclService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `purPrclControllerFindAll()` */
    static { this.PurPrclControllerFindAllPath = '/amims/pur_prcl/pur_prcl'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `purPrclControllerFindAll()` instead.
     *
     * This method doesn't expect any request body.
     */
    purPrclControllerFindAll$Response(params, context) {
        return purPrclControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `purPrclControllerFindAll$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    purPrclControllerFindAll(params, context) {
        return this.purPrclControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `purPrclControllerCreate()` */
    static { this.PurPrclControllerCreatePath = '/amims/pur_prcl/pur_prcl'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `purPrclControllerCreate()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    purPrclControllerCreate$Response(params, context) {
        return purPrclControllerCreate(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `purPrclControllerCreate$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    purPrclControllerCreate(params, context) {
        return this.purPrclControllerCreate$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `purPrclControllerFindOne()` */
    static { this.PurPrclControllerFindOnePath = '/amims/pur_prcl/pur_prcl/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `purPrclControllerFindOne()` instead.
     *
     * This method doesn't expect any request body.
     */
    purPrclControllerFindOne$Response(params, context) {
        return purPrclControllerFindOne(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `purPrclControllerFindOne$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    purPrclControllerFindOne(params, context) {
        return this.purPrclControllerFindOne$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `purPrclControllerUpdate()` */
    static { this.PurPrclControllerUpdatePath = '/amims/pur_prcl/pur_prcl/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `purPrclControllerUpdate()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    purPrclControllerUpdate$Response(params, context) {
        return purPrclControllerUpdate(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `purPrclControllerUpdate$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    purPrclControllerUpdate(params, context) {
        return this.purPrclControllerUpdate$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `purPrclControllerRemove()` */
    static { this.PurPrclControllerRemovePath = '/amims/pur_prcl/pur_prcl/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `purPrclControllerRemove()` instead.
     *
     * This method doesn't expect any request body.
     */
    purPrclControllerRemove$Response(params, context) {
        return purPrclControllerRemove(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `purPrclControllerRemove$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    purPrclControllerRemove(params, context) {
        return this.purPrclControllerRemove$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: PurPrclService, deps: [{ token: ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: PurPrclService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: PurPrclService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: ApiConfiguration }, { type: i2.HttpClient }] });

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function purPrclReportControllerFindAll(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, purPrclReportControllerFindAll.PATH, 'post');
    if (params) {
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
purPrclReportControllerFindAll.PATH = '/amims/pur_prcl/pur_prcl_report/list';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function purPrclReportControllerFindOne(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, purPrclReportControllerFindOne.PATH, 'get');
    if (params) {
        rb.path('id', params.id, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
purPrclReportControllerFindOne.PATH = '/amims/pur_prcl/pur_prcl_report/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
class PurPrclReportService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `purPrclReportControllerFindAll()` */
    static { this.PurPrclReportControllerFindAllPath = '/amims/pur_prcl/pur_prcl_report/list'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `purPrclReportControllerFindAll()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    purPrclReportControllerFindAll$Response(params, context) {
        return purPrclReportControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `purPrclReportControllerFindAll$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    purPrclReportControllerFindAll(params, context) {
        return this.purPrclReportControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `purPrclReportControllerFindOne()` */
    static { this.PurPrclReportControllerFindOnePath = '/amims/pur_prcl/pur_prcl_report/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `purPrclReportControllerFindOne()` instead.
     *
     * This method doesn't expect any request body.
     */
    purPrclReportControllerFindOne$Response(params, context) {
        return purPrclReportControllerFindOne(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `purPrclReportControllerFindOne$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    purPrclReportControllerFindOne(params, context) {
        return this.purPrclReportControllerFindOne$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: PurPrclReportService, deps: [{ token: ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: PurPrclReportService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: PurPrclReportService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: ApiConfiguration }, { type: i2.HttpClient }] });

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function purPrclWidgetControllerFindAll(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, purPrclWidgetControllerFindAll.PATH, 'post');
    if (params) {
        rb.query('filter', params.filter, {});
        rb.query('joinWhere', params.joinWhere, {});
        rb.query('select', params.select, {});
        rb.query('groupBy', params.groupBy, {});
        rb.query('sortKey', params.sortKey, {});
        rb.query('sortValue', params.sortValue, {});
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
purPrclWidgetControllerFindAll.PATH = '/amims/pur_prcl/pur_prcl_widget';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
class PurPrclWidgetService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `purPrclWidgetControllerFindAll()` */
    static { this.PurPrclWidgetControllerFindAllPath = '/amims/pur_prcl/pur_prcl_widget'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `purPrclWidgetControllerFindAll()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    purPrclWidgetControllerFindAll$Response(params, context) {
        return purPrclWidgetControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `purPrclWidgetControllerFindAll$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    purPrclWidgetControllerFindAll(params, context) {
        return this.purPrclWidgetControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: PurPrclWidgetService, deps: [{ token: ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: PurPrclWidgetService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: PurPrclWidgetService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: ApiConfiguration }, { type: i2.HttpClient }] });

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function purReturnControllerCreate(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, purReturnControllerCreate.PATH, 'post');
    if (params) {
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
purReturnControllerCreate.PATH = '/amims/pur_return/pur_return';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function purReturnControllerFindAll(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, purReturnControllerFindAll.PATH, 'get');
    if (params) {
        rb.query('pageIndex', params.pageIndex, {});
        rb.query('pageSize', params.pageSize, {});
        rb.query('filter', params.filter, {});
        rb.query('sortKey', params.sortKey, {});
        rb.query('sortValue', params.sortValue, {});
        rb.query('search_field', params.search_field, {});
        rb.query('search_keyword', params.search_keyword, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
purReturnControllerFindAll.PATH = '/amims/pur_return/pur_return';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function purReturnControllerFindOne(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, purReturnControllerFindOne.PATH, 'get');
    if (params) {
        rb.path('id', params.id, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
purReturnControllerFindOne.PATH = '/amims/pur_return/pur_return/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function purReturnControllerRemove(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, purReturnControllerRemove.PATH, 'delete');
    if (params) {
        rb.path('id', params.id, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
purReturnControllerRemove.PATH = '/amims/pur_return/pur_return/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function purReturnControllerUpdate(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, purReturnControllerUpdate.PATH, 'put');
    if (params) {
        rb.path('id', params.id, {});
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
purReturnControllerUpdate.PATH = '/amims/pur_return/pur_return/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
class PurReturnService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `purReturnControllerFindAll()` */
    static { this.PurReturnControllerFindAllPath = '/amims/pur_return/pur_return'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `purReturnControllerFindAll()` instead.
     *
     * This method doesn't expect any request body.
     */
    purReturnControllerFindAll$Response(params, context) {
        return purReturnControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `purReturnControllerFindAll$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    purReturnControllerFindAll(params, context) {
        return this.purReturnControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `purReturnControllerCreate()` */
    static { this.PurReturnControllerCreatePath = '/amims/pur_return/pur_return'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `purReturnControllerCreate()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    purReturnControllerCreate$Response(params, context) {
        return purReturnControllerCreate(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `purReturnControllerCreate$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    purReturnControllerCreate(params, context) {
        return this.purReturnControllerCreate$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `purReturnControllerFindOne()` */
    static { this.PurReturnControllerFindOnePath = '/amims/pur_return/pur_return/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `purReturnControllerFindOne()` instead.
     *
     * This method doesn't expect any request body.
     */
    purReturnControllerFindOne$Response(params, context) {
        return purReturnControllerFindOne(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `purReturnControllerFindOne$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    purReturnControllerFindOne(params, context) {
        return this.purReturnControllerFindOne$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `purReturnControllerUpdate()` */
    static { this.PurReturnControllerUpdatePath = '/amims/pur_return/pur_return/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `purReturnControllerUpdate()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    purReturnControllerUpdate$Response(params, context) {
        return purReturnControllerUpdate(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `purReturnControllerUpdate$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    purReturnControllerUpdate(params, context) {
        return this.purReturnControllerUpdate$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `purReturnControllerRemove()` */
    static { this.PurReturnControllerRemovePath = '/amims/pur_return/pur_return/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `purReturnControllerRemove()` instead.
     *
     * This method doesn't expect any request body.
     */
    purReturnControllerRemove$Response(params, context) {
        return purReturnControllerRemove(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `purReturnControllerRemove$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    purReturnControllerRemove(params, context) {
        return this.purReturnControllerRemove$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: PurReturnService, deps: [{ token: ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: PurReturnService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: PurReturnService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: ApiConfiguration }, { type: i2.HttpClient }] });

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function purReturnReportControllerFindAll(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, purReturnReportControllerFindAll.PATH, 'post');
    if (params) {
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
purReturnReportControllerFindAll.PATH = '/amims/pur_return/pur_return_report/list';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function purReturnReportControllerFindOne(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, purReturnReportControllerFindOne.PATH, 'get');
    if (params) {
        rb.path('id', params.id, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
purReturnReportControllerFindOne.PATH = '/amims/pur_return/pur_return_report/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
class PurReturnReportService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `purReturnReportControllerFindAll()` */
    static { this.PurReturnReportControllerFindAllPath = '/amims/pur_return/pur_return_report/list'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `purReturnReportControllerFindAll()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    purReturnReportControllerFindAll$Response(params, context) {
        return purReturnReportControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `purReturnReportControllerFindAll$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    purReturnReportControllerFindAll(params, context) {
        return this.purReturnReportControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `purReturnReportControllerFindOne()` */
    static { this.PurReturnReportControllerFindOnePath = '/amims/pur_return/pur_return_report/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `purReturnReportControllerFindOne()` instead.
     *
     * This method doesn't expect any request body.
     */
    purReturnReportControllerFindOne$Response(params, context) {
        return purReturnReportControllerFindOne(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `purReturnReportControllerFindOne$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    purReturnReportControllerFindOne(params, context) {
        return this.purReturnReportControllerFindOne$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: PurReturnReportService, deps: [{ token: ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: PurReturnReportService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: PurReturnReportService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: ApiConfiguration }, { type: i2.HttpClient }] });

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function purReturnWidgetControllerFindAll(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, purReturnWidgetControllerFindAll.PATH, 'post');
    if (params) {
        rb.query('filter', params.filter, {});
        rb.query('joinWhere', params.joinWhere, {});
        rb.query('select', params.select, {});
        rb.query('groupBy', params.groupBy, {});
        rb.query('sortKey', params.sortKey, {});
        rb.query('sortValue', params.sortValue, {});
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
purReturnWidgetControllerFindAll.PATH = '/amims/pur_return/pur_return_widget';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
class PurReturnWidgetService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `purReturnWidgetControllerFindAll()` */
    static { this.PurReturnWidgetControllerFindAllPath = '/amims/pur_return/pur_return_widget'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `purReturnWidgetControllerFindAll()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    purReturnWidgetControllerFindAll$Response(params, context) {
        return purReturnWidgetControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `purReturnWidgetControllerFindAll$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    purReturnWidgetControllerFindAll(params, context) {
        return this.purReturnWidgetControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: PurReturnWidgetService, deps: [{ token: ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: PurReturnWidgetService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: PurReturnWidgetService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: ApiConfiguration }, { type: i2.HttpClient }] });

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function purReturnItemControllerCreate(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, purReturnItemControllerCreate.PATH, 'post');
    if (params) {
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
purReturnItemControllerCreate.PATH = '/amims/pur_return_item/pur_return_item';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function purReturnItemControllerFindAll(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, purReturnItemControllerFindAll.PATH, 'get');
    if (params) {
        rb.query('pageIndex', params.pageIndex, {});
        rb.query('pageSize', params.pageSize, {});
        rb.query('filter', params.filter, {});
        rb.query('sortKey', params.sortKey, {});
        rb.query('sortValue', params.sortValue, {});
        rb.query('search_field', params.search_field, {});
        rb.query('search_keyword', params.search_keyword, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
purReturnItemControllerFindAll.PATH = '/amims/pur_return_item/pur_return_item';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function purReturnItemControllerFindOne(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, purReturnItemControllerFindOne.PATH, 'get');
    if (params) {
        rb.path('id', params.id, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
purReturnItemControllerFindOne.PATH = '/amims/pur_return_item/pur_return_item/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function purReturnItemControllerRemove(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, purReturnItemControllerRemove.PATH, 'delete');
    if (params) {
        rb.path('id', params.id, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
purReturnItemControllerRemove.PATH = '/amims/pur_return_item/pur_return_item/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function purReturnItemControllerUpdate(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, purReturnItemControllerUpdate.PATH, 'put');
    if (params) {
        rb.path('id', params.id, {});
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
purReturnItemControllerUpdate.PATH = '/amims/pur_return_item/pur_return_item/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
class PurReturnItemService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `purReturnItemControllerFindAll()` */
    static { this.PurReturnItemControllerFindAllPath = '/amims/pur_return_item/pur_return_item'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `purReturnItemControllerFindAll()` instead.
     *
     * This method doesn't expect any request body.
     */
    purReturnItemControllerFindAll$Response(params, context) {
        return purReturnItemControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `purReturnItemControllerFindAll$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    purReturnItemControllerFindAll(params, context) {
        return this.purReturnItemControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `purReturnItemControllerCreate()` */
    static { this.PurReturnItemControllerCreatePath = '/amims/pur_return_item/pur_return_item'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `purReturnItemControllerCreate()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    purReturnItemControllerCreate$Response(params, context) {
        return purReturnItemControllerCreate(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `purReturnItemControllerCreate$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    purReturnItemControllerCreate(params, context) {
        return this.purReturnItemControllerCreate$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `purReturnItemControllerFindOne()` */
    static { this.PurReturnItemControllerFindOnePath = '/amims/pur_return_item/pur_return_item/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `purReturnItemControllerFindOne()` instead.
     *
     * This method doesn't expect any request body.
     */
    purReturnItemControllerFindOne$Response(params, context) {
        return purReturnItemControllerFindOne(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `purReturnItemControllerFindOne$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    purReturnItemControllerFindOne(params, context) {
        return this.purReturnItemControllerFindOne$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `purReturnItemControllerUpdate()` */
    static { this.PurReturnItemControllerUpdatePath = '/amims/pur_return_item/pur_return_item/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `purReturnItemControllerUpdate()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    purReturnItemControllerUpdate$Response(params, context) {
        return purReturnItemControllerUpdate(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `purReturnItemControllerUpdate$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    purReturnItemControllerUpdate(params, context) {
        return this.purReturnItemControllerUpdate$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `purReturnItemControllerRemove()` */
    static { this.PurReturnItemControllerRemovePath = '/amims/pur_return_item/pur_return_item/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `purReturnItemControllerRemove()` instead.
     *
     * This method doesn't expect any request body.
     */
    purReturnItemControllerRemove$Response(params, context) {
        return purReturnItemControllerRemove(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `purReturnItemControllerRemove$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    purReturnItemControllerRemove(params, context) {
        return this.purReturnItemControllerRemove$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: PurReturnItemService, deps: [{ token: ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: PurReturnItemService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: PurReturnItemService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: ApiConfiguration }, { type: i2.HttpClient }] });

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function purReturnItemReportControllerFindAll(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, purReturnItemReportControllerFindAll.PATH, 'post');
    if (params) {
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
purReturnItemReportControllerFindAll.PATH = '/amims/pur_return_item/pur_return_item_report/list';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function purReturnItemReportControllerFindOne(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, purReturnItemReportControllerFindOne.PATH, 'get');
    if (params) {
        rb.path('id', params.id, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
purReturnItemReportControllerFindOne.PATH = '/amims/pur_return_item/pur_return_item_report/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
class PurReturnItemReportService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `purReturnItemReportControllerFindAll()` */
    static { this.PurReturnItemReportControllerFindAllPath = '/amims/pur_return_item/pur_return_item_report/list'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `purReturnItemReportControllerFindAll()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    purReturnItemReportControllerFindAll$Response(params, context) {
        return purReturnItemReportControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `purReturnItemReportControllerFindAll$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    purReturnItemReportControllerFindAll(params, context) {
        return this.purReturnItemReportControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `purReturnItemReportControllerFindOne()` */
    static { this.PurReturnItemReportControllerFindOnePath = '/amims/pur_return_item/pur_return_item_report/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `purReturnItemReportControllerFindOne()` instead.
     *
     * This method doesn't expect any request body.
     */
    purReturnItemReportControllerFindOne$Response(params, context) {
        return purReturnItemReportControllerFindOne(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `purReturnItemReportControllerFindOne$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    purReturnItemReportControllerFindOne(params, context) {
        return this.purReturnItemReportControllerFindOne$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: PurReturnItemReportService, deps: [{ token: ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: PurReturnItemReportService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: PurReturnItemReportService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: ApiConfiguration }, { type: i2.HttpClient }] });

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function purReturnItemWidgetControllerFindAll(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, purReturnItemWidgetControllerFindAll.PATH, 'post');
    if (params) {
        rb.query('filter', params.filter, {});
        rb.query('joinWhere', params.joinWhere, {});
        rb.query('select', params.select, {});
        rb.query('groupBy', params.groupBy, {});
        rb.query('sortKey', params.sortKey, {});
        rb.query('sortValue', params.sortValue, {});
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
purReturnItemWidgetControllerFindAll.PATH = '/amims/pur_return_item/pur_return_item_widget';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
class PurReturnItemWidgetService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `purReturnItemWidgetControllerFindAll()` */
    static { this.PurReturnItemWidgetControllerFindAllPath = '/amims/pur_return_item/pur_return_item_widget'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `purReturnItemWidgetControllerFindAll()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    purReturnItemWidgetControllerFindAll$Response(params, context) {
        return purReturnItemWidgetControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `purReturnItemWidgetControllerFindAll$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    purReturnItemWidgetControllerFindAll(params, context) {
        return this.purReturnItemWidgetControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: PurReturnItemWidgetService, deps: [{ token: ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: PurReturnItemWidgetService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: PurReturnItemWidgetService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: ApiConfiguration }, { type: i2.HttpClient }] });

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function purVendorControllerCreate(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, purVendorControllerCreate.PATH, 'post');
    if (params) {
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
purVendorControllerCreate.PATH = '/amims/pur_vendor/pur_vendor';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function purVendorControllerFindAll(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, purVendorControllerFindAll.PATH, 'get');
    if (params) {
        rb.query('pageIndex', params.pageIndex, {});
        rb.query('pageSize', params.pageSize, {});
        rb.query('filter', params.filter, {});
        rb.query('sortKey', params.sortKey, {});
        rb.query('sortValue', params.sortValue, {});
        rb.query('search_field', params.search_field, {});
        rb.query('search_keyword', params.search_keyword, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
purVendorControllerFindAll.PATH = '/amims/pur_vendor/pur_vendor';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function purVendorControllerFindOne(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, purVendorControllerFindOne.PATH, 'get');
    if (params) {
        rb.path('id', params.id, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
purVendorControllerFindOne.PATH = '/amims/pur_vendor/pur_vendor/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function purVendorControllerRemove(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, purVendorControllerRemove.PATH, 'delete');
    if (params) {
        rb.path('id', params.id, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
purVendorControllerRemove.PATH = '/amims/pur_vendor/pur_vendor/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function purVendorControllerUpdate(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, purVendorControllerUpdate.PATH, 'put');
    if (params) {
        rb.path('id', params.id, {});
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
purVendorControllerUpdate.PATH = '/amims/pur_vendor/pur_vendor/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
class PurVendorService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `purVendorControllerFindAll()` */
    static { this.PurVendorControllerFindAllPath = '/amims/pur_vendor/pur_vendor'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `purVendorControllerFindAll()` instead.
     *
     * This method doesn't expect any request body.
     */
    purVendorControllerFindAll$Response(params, context) {
        return purVendorControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `purVendorControllerFindAll$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    purVendorControllerFindAll(params, context) {
        return this.purVendorControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `purVendorControllerCreate()` */
    static { this.PurVendorControllerCreatePath = '/amims/pur_vendor/pur_vendor'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `purVendorControllerCreate()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    purVendorControllerCreate$Response(params, context) {
        return purVendorControllerCreate(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `purVendorControllerCreate$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    purVendorControllerCreate(params, context) {
        return this.purVendorControllerCreate$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `purVendorControllerFindOne()` */
    static { this.PurVendorControllerFindOnePath = '/amims/pur_vendor/pur_vendor/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `purVendorControllerFindOne()` instead.
     *
     * This method doesn't expect any request body.
     */
    purVendorControllerFindOne$Response(params, context) {
        return purVendorControllerFindOne(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `purVendorControllerFindOne$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    purVendorControllerFindOne(params, context) {
        return this.purVendorControllerFindOne$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `purVendorControllerUpdate()` */
    static { this.PurVendorControllerUpdatePath = '/amims/pur_vendor/pur_vendor/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `purVendorControllerUpdate()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    purVendorControllerUpdate$Response(params, context) {
        return purVendorControllerUpdate(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `purVendorControllerUpdate$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    purVendorControllerUpdate(params, context) {
        return this.purVendorControllerUpdate$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `purVendorControllerRemove()` */
    static { this.PurVendorControllerRemovePath = '/amims/pur_vendor/pur_vendor/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `purVendorControllerRemove()` instead.
     *
     * This method doesn't expect any request body.
     */
    purVendorControllerRemove$Response(params, context) {
        return purVendorControllerRemove(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `purVendorControllerRemove$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    purVendorControllerRemove(params, context) {
        return this.purVendorControllerRemove$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: PurVendorService, deps: [{ token: ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: PurVendorService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: PurVendorService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: ApiConfiguration }, { type: i2.HttpClient }] });

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function purVendorReportControllerFindAll(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, purVendorReportControllerFindAll.PATH, 'post');
    if (params) {
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
purVendorReportControllerFindAll.PATH = '/amims/pur_vendor/pur_vendor_report/list';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function purVendorReportControllerFindOne(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, purVendorReportControllerFindOne.PATH, 'get');
    if (params) {
        rb.path('id', params.id, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
purVendorReportControllerFindOne.PATH = '/amims/pur_vendor/pur_vendor_report/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
class PurVendorReportService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `purVendorReportControllerFindAll()` */
    static { this.PurVendorReportControllerFindAllPath = '/amims/pur_vendor/pur_vendor_report/list'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `purVendorReportControllerFindAll()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    purVendorReportControllerFindAll$Response(params, context) {
        return purVendorReportControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `purVendorReportControllerFindAll$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    purVendorReportControllerFindAll(params, context) {
        return this.purVendorReportControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `purVendorReportControllerFindOne()` */
    static { this.PurVendorReportControllerFindOnePath = '/amims/pur_vendor/pur_vendor_report/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `purVendorReportControllerFindOne()` instead.
     *
     * This method doesn't expect any request body.
     */
    purVendorReportControllerFindOne$Response(params, context) {
        return purVendorReportControllerFindOne(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `purVendorReportControllerFindOne$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    purVendorReportControllerFindOne(params, context) {
        return this.purVendorReportControllerFindOne$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: PurVendorReportService, deps: [{ token: ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: PurVendorReportService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: PurVendorReportService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: ApiConfiguration }, { type: i2.HttpClient }] });

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function purVendorWidgetControllerFindAll(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, purVendorWidgetControllerFindAll.PATH, 'post');
    if (params) {
        rb.query('filter', params.filter, {});
        rb.query('joinWhere', params.joinWhere, {});
        rb.query('select', params.select, {});
        rb.query('groupBy', params.groupBy, {});
        rb.query('sortKey', params.sortKey, {});
        rb.query('sortValue', params.sortValue, {});
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
purVendorWidgetControllerFindAll.PATH = '/amims/pur_vendor/pur_vendor_widget';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
class PurVendorWidgetService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `purVendorWidgetControllerFindAll()` */
    static { this.PurVendorWidgetControllerFindAllPath = '/amims/pur_vendor/pur_vendor_widget'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `purVendorWidgetControllerFindAll()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    purVendorWidgetControllerFindAll$Response(params, context) {
        return purVendorWidgetControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `purVendorWidgetControllerFindAll$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    purVendorWidgetControllerFindAll(params, context) {
        return this.purVendorWidgetControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: PurVendorWidgetService, deps: [{ token: ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: PurVendorWidgetService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: PurVendorWidgetService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: ApiConfiguration }, { type: i2.HttpClient }] });

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function purVendorContactControllerCreate(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, purVendorContactControllerCreate.PATH, 'post');
    if (params) {
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
purVendorContactControllerCreate.PATH = '/amims/pur_vendor_contact/pur_vendor_contact';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function purVendorContactControllerFindAll(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, purVendorContactControllerFindAll.PATH, 'get');
    if (params) {
        rb.query('pageIndex', params.pageIndex, {});
        rb.query('pageSize', params.pageSize, {});
        rb.query('filter', params.filter, {});
        rb.query('sortKey', params.sortKey, {});
        rb.query('sortValue', params.sortValue, {});
        rb.query('search_field', params.search_field, {});
        rb.query('search_keyword', params.search_keyword, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
purVendorContactControllerFindAll.PATH = '/amims/pur_vendor_contact/pur_vendor_contact';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function purVendorContactControllerFindOne(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, purVendorContactControllerFindOne.PATH, 'get');
    if (params) {
        rb.path('id', params.id, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
purVendorContactControllerFindOne.PATH = '/amims/pur_vendor_contact/pur_vendor_contact/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function purVendorContactControllerRemove(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, purVendorContactControllerRemove.PATH, 'delete');
    if (params) {
        rb.path('id', params.id, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
purVendorContactControllerRemove.PATH = '/amims/pur_vendor_contact/pur_vendor_contact/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function purVendorContactControllerUpdate(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, purVendorContactControllerUpdate.PATH, 'put');
    if (params) {
        rb.path('id', params.id, {});
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
purVendorContactControllerUpdate.PATH = '/amims/pur_vendor_contact/pur_vendor_contact/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
class PurVendorContactService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `purVendorContactControllerFindAll()` */
    static { this.PurVendorContactControllerFindAllPath = '/amims/pur_vendor_contact/pur_vendor_contact'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `purVendorContactControllerFindAll()` instead.
     *
     * This method doesn't expect any request body.
     */
    purVendorContactControllerFindAll$Response(params, context) {
        return purVendorContactControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `purVendorContactControllerFindAll$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    purVendorContactControllerFindAll(params, context) {
        return this.purVendorContactControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `purVendorContactControllerCreate()` */
    static { this.PurVendorContactControllerCreatePath = '/amims/pur_vendor_contact/pur_vendor_contact'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `purVendorContactControllerCreate()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    purVendorContactControllerCreate$Response(params, context) {
        return purVendorContactControllerCreate(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `purVendorContactControllerCreate$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    purVendorContactControllerCreate(params, context) {
        return this.purVendorContactControllerCreate$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `purVendorContactControllerFindOne()` */
    static { this.PurVendorContactControllerFindOnePath = '/amims/pur_vendor_contact/pur_vendor_contact/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `purVendorContactControllerFindOne()` instead.
     *
     * This method doesn't expect any request body.
     */
    purVendorContactControllerFindOne$Response(params, context) {
        return purVendorContactControllerFindOne(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `purVendorContactControllerFindOne$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    purVendorContactControllerFindOne(params, context) {
        return this.purVendorContactControllerFindOne$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `purVendorContactControllerUpdate()` */
    static { this.PurVendorContactControllerUpdatePath = '/amims/pur_vendor_contact/pur_vendor_contact/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `purVendorContactControllerUpdate()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    purVendorContactControllerUpdate$Response(params, context) {
        return purVendorContactControllerUpdate(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `purVendorContactControllerUpdate$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    purVendorContactControllerUpdate(params, context) {
        return this.purVendorContactControllerUpdate$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `purVendorContactControllerRemove()` */
    static { this.PurVendorContactControllerRemovePath = '/amims/pur_vendor_contact/pur_vendor_contact/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `purVendorContactControllerRemove()` instead.
     *
     * This method doesn't expect any request body.
     */
    purVendorContactControllerRemove$Response(params, context) {
        return purVendorContactControllerRemove(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `purVendorContactControllerRemove$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    purVendorContactControllerRemove(params, context) {
        return this.purVendorContactControllerRemove$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: PurVendorContactService, deps: [{ token: ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: PurVendorContactService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: PurVendorContactService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: ApiConfiguration }, { type: i2.HttpClient }] });

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function purVendorContactReportControllerFindAll(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, purVendorContactReportControllerFindAll.PATH, 'post');
    if (params) {
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
purVendorContactReportControllerFindAll.PATH = '/amims/pur_vendor_contact/pur_vendor_contact_report/list';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function purVendorContactReportControllerFindOne(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, purVendorContactReportControllerFindOne.PATH, 'get');
    if (params) {
        rb.path('id', params.id, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
purVendorContactReportControllerFindOne.PATH = '/amims/pur_vendor_contact/pur_vendor_contact_report/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
class PurVendorContactReportService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `purVendorContactReportControllerFindAll()` */
    static { this.PurVendorContactReportControllerFindAllPath = '/amims/pur_vendor_contact/pur_vendor_contact_report/list'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `purVendorContactReportControllerFindAll()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    purVendorContactReportControllerFindAll$Response(params, context) {
        return purVendorContactReportControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `purVendorContactReportControllerFindAll$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    purVendorContactReportControllerFindAll(params, context) {
        return this.purVendorContactReportControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `purVendorContactReportControllerFindOne()` */
    static { this.PurVendorContactReportControllerFindOnePath = '/amims/pur_vendor_contact/pur_vendor_contact_report/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `purVendorContactReportControllerFindOne()` instead.
     *
     * This method doesn't expect any request body.
     */
    purVendorContactReportControllerFindOne$Response(params, context) {
        return purVendorContactReportControllerFindOne(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `purVendorContactReportControllerFindOne$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    purVendorContactReportControllerFindOne(params, context) {
        return this.purVendorContactReportControllerFindOne$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: PurVendorContactReportService, deps: [{ token: ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: PurVendorContactReportService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: PurVendorContactReportService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: ApiConfiguration }, { type: i2.HttpClient }] });

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function purVendorContactWidgetControllerFindAll(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, purVendorContactWidgetControllerFindAll.PATH, 'post');
    if (params) {
        rb.query('filter', params.filter, {});
        rb.query('joinWhere', params.joinWhere, {});
        rb.query('select', params.select, {});
        rb.query('groupBy', params.groupBy, {});
        rb.query('sortKey', params.sortKey, {});
        rb.query('sortValue', params.sortValue, {});
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
purVendorContactWidgetControllerFindAll.PATH = '/amims/pur_vendor_contact/pur_vendor_contact_widget';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
class PurVendorContactWidgetService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `purVendorContactWidgetControllerFindAll()` */
    static { this.PurVendorContactWidgetControllerFindAllPath = '/amims/pur_vendor_contact/pur_vendor_contact_widget'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `purVendorContactWidgetControllerFindAll()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    purVendorContactWidgetControllerFindAll$Response(params, context) {
        return purVendorContactWidgetControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `purVendorContactWidgetControllerFindAll$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    purVendorContactWidgetControllerFindAll(params, context) {
        return this.purVendorContactWidgetControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: PurVendorContactWidgetService, deps: [{ token: ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: PurVendorContactWidgetService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: PurVendorContactWidgetService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: ApiConfiguration }, { type: i2.HttpClient }] });

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function purVendorItemControllerCreate(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, purVendorItemControllerCreate.PATH, 'post');
    if (params) {
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
purVendorItemControllerCreate.PATH = '/amims/pur_vendor_item/pur_vendor_item';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function purVendorItemControllerFindAll(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, purVendorItemControllerFindAll.PATH, 'get');
    if (params) {
        rb.query('pageIndex', params.pageIndex, {});
        rb.query('pageSize', params.pageSize, {});
        rb.query('filter', params.filter, {});
        rb.query('sortKey', params.sortKey, {});
        rb.query('sortValue', params.sortValue, {});
        rb.query('search_field', params.search_field, {});
        rb.query('search_keyword', params.search_keyword, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
purVendorItemControllerFindAll.PATH = '/amims/pur_vendor_item/pur_vendor_item';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function purVendorItemControllerFindOne(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, purVendorItemControllerFindOne.PATH, 'get');
    if (params) {
        rb.path('id', params.id, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
purVendorItemControllerFindOne.PATH = '/amims/pur_vendor_item/pur_vendor_item/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function purVendorItemControllerRemove(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, purVendorItemControllerRemove.PATH, 'delete');
    if (params) {
        rb.path('id', params.id, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
purVendorItemControllerRemove.PATH = '/amims/pur_vendor_item/pur_vendor_item/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function purVendorItemControllerUpdate(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, purVendorItemControllerUpdate.PATH, 'put');
    if (params) {
        rb.path('id', params.id, {});
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
purVendorItemControllerUpdate.PATH = '/amims/pur_vendor_item/pur_vendor_item/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
class PurVendorItemService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `purVendorItemControllerFindAll()` */
    static { this.PurVendorItemControllerFindAllPath = '/amims/pur_vendor_item/pur_vendor_item'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `purVendorItemControllerFindAll()` instead.
     *
     * This method doesn't expect any request body.
     */
    purVendorItemControllerFindAll$Response(params, context) {
        return purVendorItemControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `purVendorItemControllerFindAll$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    purVendorItemControllerFindAll(params, context) {
        return this.purVendorItemControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `purVendorItemControllerCreate()` */
    static { this.PurVendorItemControllerCreatePath = '/amims/pur_vendor_item/pur_vendor_item'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `purVendorItemControllerCreate()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    purVendorItemControllerCreate$Response(params, context) {
        return purVendorItemControllerCreate(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `purVendorItemControllerCreate$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    purVendorItemControllerCreate(params, context) {
        return this.purVendorItemControllerCreate$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `purVendorItemControllerFindOne()` */
    static { this.PurVendorItemControllerFindOnePath = '/amims/pur_vendor_item/pur_vendor_item/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `purVendorItemControllerFindOne()` instead.
     *
     * This method doesn't expect any request body.
     */
    purVendorItemControllerFindOne$Response(params, context) {
        return purVendorItemControllerFindOne(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `purVendorItemControllerFindOne$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    purVendorItemControllerFindOne(params, context) {
        return this.purVendorItemControllerFindOne$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `purVendorItemControllerUpdate()` */
    static { this.PurVendorItemControllerUpdatePath = '/amims/pur_vendor_item/pur_vendor_item/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `purVendorItemControllerUpdate()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    purVendorItemControllerUpdate$Response(params, context) {
        return purVendorItemControllerUpdate(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `purVendorItemControllerUpdate$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    purVendorItemControllerUpdate(params, context) {
        return this.purVendorItemControllerUpdate$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `purVendorItemControllerRemove()` */
    static { this.PurVendorItemControllerRemovePath = '/amims/pur_vendor_item/pur_vendor_item/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `purVendorItemControllerRemove()` instead.
     *
     * This method doesn't expect any request body.
     */
    purVendorItemControllerRemove$Response(params, context) {
        return purVendorItemControllerRemove(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `purVendorItemControllerRemove$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    purVendorItemControllerRemove(params, context) {
        return this.purVendorItemControllerRemove$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: PurVendorItemService, deps: [{ token: ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: PurVendorItemService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: PurVendorItemService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: ApiConfiguration }, { type: i2.HttpClient }] });

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function purVendorItemReportControllerFindAll(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, purVendorItemReportControllerFindAll.PATH, 'post');
    if (params) {
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
purVendorItemReportControllerFindAll.PATH = '/amims/pur_vendor_item/pur_vendor_item_report/list';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function purVendorItemReportControllerFindOne(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, purVendorItemReportControllerFindOne.PATH, 'get');
    if (params) {
        rb.path('id', params.id, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
purVendorItemReportControllerFindOne.PATH = '/amims/pur_vendor_item/pur_vendor_item_report/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
class PurVendorItemReportService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `purVendorItemReportControllerFindAll()` */
    static { this.PurVendorItemReportControllerFindAllPath = '/amims/pur_vendor_item/pur_vendor_item_report/list'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `purVendorItemReportControllerFindAll()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    purVendorItemReportControllerFindAll$Response(params, context) {
        return purVendorItemReportControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `purVendorItemReportControllerFindAll$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    purVendorItemReportControllerFindAll(params, context) {
        return this.purVendorItemReportControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `purVendorItemReportControllerFindOne()` */
    static { this.PurVendorItemReportControllerFindOnePath = '/amims/pur_vendor_item/pur_vendor_item_report/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `purVendorItemReportControllerFindOne()` instead.
     *
     * This method doesn't expect any request body.
     */
    purVendorItemReportControllerFindOne$Response(params, context) {
        return purVendorItemReportControllerFindOne(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `purVendorItemReportControllerFindOne$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    purVendorItemReportControllerFindOne(params, context) {
        return this.purVendorItemReportControllerFindOne$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: PurVendorItemReportService, deps: [{ token: ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: PurVendorItemReportService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: PurVendorItemReportService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: ApiConfiguration }, { type: i2.HttpClient }] });

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function purVendorItemWidgetControllerFindAll(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, purVendorItemWidgetControllerFindAll.PATH, 'post');
    if (params) {
        rb.query('filter', params.filter, {});
        rb.query('joinWhere', params.joinWhere, {});
        rb.query('select', params.select, {});
        rb.query('groupBy', params.groupBy, {});
        rb.query('sortKey', params.sortKey, {});
        rb.query('sortValue', params.sortValue, {});
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
purVendorItemWidgetControllerFindAll.PATH = '/amims/pur_vendor_item/pur_vendor_item_widget';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
class PurVendorItemWidgetService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `purVendorItemWidgetControllerFindAll()` */
    static { this.PurVendorItemWidgetControllerFindAllPath = '/amims/pur_vendor_item/pur_vendor_item_widget'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `purVendorItemWidgetControllerFindAll()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    purVendorItemWidgetControllerFindAll$Response(params, context) {
        return purVendorItemWidgetControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `purVendorItemWidgetControllerFindAll$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    purVendorItemWidgetControllerFindAll(params, context) {
        return this.purVendorItemWidgetControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: PurVendorItemWidgetService, deps: [{ token: ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: PurVendorItemWidgetService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: PurVendorItemWidgetService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: ApiConfiguration }, { type: i2.HttpClient }] });

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function qaRpdControllerCreate(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, qaRpdControllerCreate.PATH, 'post');
    if (params) {
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
qaRpdControllerCreate.PATH = '/amims/qa_rpd/qa_rpd';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function qaRpdControllerFindAll(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, qaRpdControllerFindAll.PATH, 'get');
    if (params) {
        rb.query('pageIndex', params.pageIndex, {});
        rb.query('pageSize', params.pageSize, {});
        rb.query('filter', params.filter, {});
        rb.query('sortKey', params.sortKey, {});
        rb.query('sortValue', params.sortValue, {});
        rb.query('search_field', params.search_field, {});
        rb.query('search_keyword', params.search_keyword, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
qaRpdControllerFindAll.PATH = '/amims/qa_rpd/qa_rpd';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function qaRpdControllerFindOne(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, qaRpdControllerFindOne.PATH, 'get');
    if (params) {
        rb.path('id', params.id, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
qaRpdControllerFindOne.PATH = '/amims/qa_rpd/qa_rpd/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function qaRpdControllerRemove(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, qaRpdControllerRemove.PATH, 'delete');
    if (params) {
        rb.path('id', params.id, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
qaRpdControllerRemove.PATH = '/amims/qa_rpd/qa_rpd/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function qaRpdControllerUpdate(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, qaRpdControllerUpdate.PATH, 'put');
    if (params) {
        rb.path('id', params.id, {});
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
qaRpdControllerUpdate.PATH = '/amims/qa_rpd/qa_rpd/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
class QaRpdService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `qaRpdControllerFindAll()` */
    static { this.QaRpdControllerFindAllPath = '/amims/qa_rpd/qa_rpd'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `qaRpdControllerFindAll()` instead.
     *
     * This method doesn't expect any request body.
     */
    qaRpdControllerFindAll$Response(params, context) {
        return qaRpdControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `qaRpdControllerFindAll$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    qaRpdControllerFindAll(params, context) {
        return this.qaRpdControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `qaRpdControllerCreate()` */
    static { this.QaRpdControllerCreatePath = '/amims/qa_rpd/qa_rpd'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `qaRpdControllerCreate()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    qaRpdControllerCreate$Response(params, context) {
        return qaRpdControllerCreate(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `qaRpdControllerCreate$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    qaRpdControllerCreate(params, context) {
        return this.qaRpdControllerCreate$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `qaRpdControllerFindOne()` */
    static { this.QaRpdControllerFindOnePath = '/amims/qa_rpd/qa_rpd/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `qaRpdControllerFindOne()` instead.
     *
     * This method doesn't expect any request body.
     */
    qaRpdControllerFindOne$Response(params, context) {
        return qaRpdControllerFindOne(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `qaRpdControllerFindOne$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    qaRpdControllerFindOne(params, context) {
        return this.qaRpdControllerFindOne$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `qaRpdControllerUpdate()` */
    static { this.QaRpdControllerUpdatePath = '/amims/qa_rpd/qa_rpd/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `qaRpdControllerUpdate()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    qaRpdControllerUpdate$Response(params, context) {
        return qaRpdControllerUpdate(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `qaRpdControllerUpdate$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    qaRpdControllerUpdate(params, context) {
        return this.qaRpdControllerUpdate$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `qaRpdControllerRemove()` */
    static { this.QaRpdControllerRemovePath = '/amims/qa_rpd/qa_rpd/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `qaRpdControllerRemove()` instead.
     *
     * This method doesn't expect any request body.
     */
    qaRpdControllerRemove$Response(params, context) {
        return qaRpdControllerRemove(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `qaRpdControllerRemove$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    qaRpdControllerRemove(params, context) {
        return this.qaRpdControllerRemove$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: QaRpdService, deps: [{ token: ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: QaRpdService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: QaRpdService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: ApiConfiguration }, { type: i2.HttpClient }] });

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function qaRpdReportControllerFindAll(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, qaRpdReportControllerFindAll.PATH, 'post');
    if (params) {
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
qaRpdReportControllerFindAll.PATH = '/amims/qa_rpd/qa_rpd_report/list';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function qaRpdReportControllerFindOne(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, qaRpdReportControllerFindOne.PATH, 'get');
    if (params) {
        rb.path('id', params.id, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
qaRpdReportControllerFindOne.PATH = '/amims/qa_rpd/qa_rpd_report/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
class QaRpdReportService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `qaRpdReportControllerFindAll()` */
    static { this.QaRpdReportControllerFindAllPath = '/amims/qa_rpd/qa_rpd_report/list'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `qaRpdReportControllerFindAll()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    qaRpdReportControllerFindAll$Response(params, context) {
        return qaRpdReportControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `qaRpdReportControllerFindAll$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    qaRpdReportControllerFindAll(params, context) {
        return this.qaRpdReportControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `qaRpdReportControllerFindOne()` */
    static { this.QaRpdReportControllerFindOnePath = '/amims/qa_rpd/qa_rpd_report/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `qaRpdReportControllerFindOne()` instead.
     *
     * This method doesn't expect any request body.
     */
    qaRpdReportControllerFindOne$Response(params, context) {
        return qaRpdReportControllerFindOne(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `qaRpdReportControllerFindOne$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    qaRpdReportControllerFindOne(params, context) {
        return this.qaRpdReportControllerFindOne$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: QaRpdReportService, deps: [{ token: ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: QaRpdReportService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: QaRpdReportService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: ApiConfiguration }, { type: i2.HttpClient }] });

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function qaRpdWidgetControllerFindAll(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, qaRpdWidgetControllerFindAll.PATH, 'post');
    if (params) {
        rb.query('filter', params.filter, {});
        rb.query('joinWhere', params.joinWhere, {});
        rb.query('select', params.select, {});
        rb.query('groupBy', params.groupBy, {});
        rb.query('sortKey', params.sortKey, {});
        rb.query('sortValue', params.sortValue, {});
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
qaRpdWidgetControllerFindAll.PATH = '/amims/qa_rpd/qa_rpd_widget';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
class QaRpdWidgetService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `qaRpdWidgetControllerFindAll()` */
    static { this.QaRpdWidgetControllerFindAllPath = '/amims/qa_rpd/qa_rpd_widget'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `qaRpdWidgetControllerFindAll()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    qaRpdWidgetControllerFindAll$Response(params, context) {
        return qaRpdWidgetControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `qaRpdWidgetControllerFindAll$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    qaRpdWidgetControllerFindAll(params, context) {
        return this.qaRpdWidgetControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: QaRpdWidgetService, deps: [{ token: ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: QaRpdWidgetService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: QaRpdWidgetService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: ApiConfiguration }, { type: i2.HttpClient }] });

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function qaRpdDispotitionControllerCreate(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, qaRpdDispotitionControllerCreate.PATH, 'post');
    if (params) {
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
qaRpdDispotitionControllerCreate.PATH = '/amims/qa_rpd_dispotition/qa_rpd_dispotition';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function qaRpdDispotitionControllerFindAll(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, qaRpdDispotitionControllerFindAll.PATH, 'get');
    if (params) {
        rb.query('pageIndex', params.pageIndex, {});
        rb.query('pageSize', params.pageSize, {});
        rb.query('filter', params.filter, {});
        rb.query('sortKey', params.sortKey, {});
        rb.query('sortValue', params.sortValue, {});
        rb.query('search_field', params.search_field, {});
        rb.query('search_keyword', params.search_keyword, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
qaRpdDispotitionControllerFindAll.PATH = '/amims/qa_rpd_dispotition/qa_rpd_dispotition';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function qaRpdDispotitionControllerFindOne(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, qaRpdDispotitionControllerFindOne.PATH, 'get');
    if (params) {
        rb.path('id', params.id, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
qaRpdDispotitionControllerFindOne.PATH = '/amims/qa_rpd_dispotition/qa_rpd_dispotition/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function qaRpdDispotitionControllerRemove(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, qaRpdDispotitionControllerRemove.PATH, 'delete');
    if (params) {
        rb.path('id', params.id, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
qaRpdDispotitionControllerRemove.PATH = '/amims/qa_rpd_dispotition/qa_rpd_dispotition/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function qaRpdDispotitionControllerUpdate(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, qaRpdDispotitionControllerUpdate.PATH, 'put');
    if (params) {
        rb.path('id', params.id, {});
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
qaRpdDispotitionControllerUpdate.PATH = '/amims/qa_rpd_dispotition/qa_rpd_dispotition/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
class QaRpdDispotitionService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `qaRpdDispotitionControllerFindAll()` */
    static { this.QaRpdDispotitionControllerFindAllPath = '/amims/qa_rpd_dispotition/qa_rpd_dispotition'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `qaRpdDispotitionControllerFindAll()` instead.
     *
     * This method doesn't expect any request body.
     */
    qaRpdDispotitionControllerFindAll$Response(params, context) {
        return qaRpdDispotitionControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `qaRpdDispotitionControllerFindAll$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    qaRpdDispotitionControllerFindAll(params, context) {
        return this.qaRpdDispotitionControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `qaRpdDispotitionControllerCreate()` */
    static { this.QaRpdDispotitionControllerCreatePath = '/amims/qa_rpd_dispotition/qa_rpd_dispotition'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `qaRpdDispotitionControllerCreate()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    qaRpdDispotitionControllerCreate$Response(params, context) {
        return qaRpdDispotitionControllerCreate(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `qaRpdDispotitionControllerCreate$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    qaRpdDispotitionControllerCreate(params, context) {
        return this.qaRpdDispotitionControllerCreate$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `qaRpdDispotitionControllerFindOne()` */
    static { this.QaRpdDispotitionControllerFindOnePath = '/amims/qa_rpd_dispotition/qa_rpd_dispotition/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `qaRpdDispotitionControllerFindOne()` instead.
     *
     * This method doesn't expect any request body.
     */
    qaRpdDispotitionControllerFindOne$Response(params, context) {
        return qaRpdDispotitionControllerFindOne(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `qaRpdDispotitionControllerFindOne$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    qaRpdDispotitionControllerFindOne(params, context) {
        return this.qaRpdDispotitionControllerFindOne$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `qaRpdDispotitionControllerUpdate()` */
    static { this.QaRpdDispotitionControllerUpdatePath = '/amims/qa_rpd_dispotition/qa_rpd_dispotition/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `qaRpdDispotitionControllerUpdate()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    qaRpdDispotitionControllerUpdate$Response(params, context) {
        return qaRpdDispotitionControllerUpdate(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `qaRpdDispotitionControllerUpdate$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    qaRpdDispotitionControllerUpdate(params, context) {
        return this.qaRpdDispotitionControllerUpdate$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `qaRpdDispotitionControllerRemove()` */
    static { this.QaRpdDispotitionControllerRemovePath = '/amims/qa_rpd_dispotition/qa_rpd_dispotition/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `qaRpdDispotitionControllerRemove()` instead.
     *
     * This method doesn't expect any request body.
     */
    qaRpdDispotitionControllerRemove$Response(params, context) {
        return qaRpdDispotitionControllerRemove(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `qaRpdDispotitionControllerRemove$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    qaRpdDispotitionControllerRemove(params, context) {
        return this.qaRpdDispotitionControllerRemove$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: QaRpdDispotitionService, deps: [{ token: ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: QaRpdDispotitionService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: QaRpdDispotitionService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: ApiConfiguration }, { type: i2.HttpClient }] });

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function qaRpdDispotitionReportControllerFindAll(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, qaRpdDispotitionReportControllerFindAll.PATH, 'post');
    if (params) {
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
qaRpdDispotitionReportControllerFindAll.PATH = '/amims/qa_rpd_dispotition/qa_rpd_dispotition_report/list';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function qaRpdDispotitionReportControllerFindOne(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, qaRpdDispotitionReportControllerFindOne.PATH, 'get');
    if (params) {
        rb.path('id', params.id, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
qaRpdDispotitionReportControllerFindOne.PATH = '/amims/qa_rpd_dispotition/qa_rpd_dispotition_report/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
class QaRpdDispotitionReportService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `qaRpdDispotitionReportControllerFindAll()` */
    static { this.QaRpdDispotitionReportControllerFindAllPath = '/amims/qa_rpd_dispotition/qa_rpd_dispotition_report/list'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `qaRpdDispotitionReportControllerFindAll()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    qaRpdDispotitionReportControllerFindAll$Response(params, context) {
        return qaRpdDispotitionReportControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `qaRpdDispotitionReportControllerFindAll$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    qaRpdDispotitionReportControllerFindAll(params, context) {
        return this.qaRpdDispotitionReportControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `qaRpdDispotitionReportControllerFindOne()` */
    static { this.QaRpdDispotitionReportControllerFindOnePath = '/amims/qa_rpd_dispotition/qa_rpd_dispotition_report/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `qaRpdDispotitionReportControllerFindOne()` instead.
     *
     * This method doesn't expect any request body.
     */
    qaRpdDispotitionReportControllerFindOne$Response(params, context) {
        return qaRpdDispotitionReportControllerFindOne(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `qaRpdDispotitionReportControllerFindOne$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    qaRpdDispotitionReportControllerFindOne(params, context) {
        return this.qaRpdDispotitionReportControllerFindOne$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: QaRpdDispotitionReportService, deps: [{ token: ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: QaRpdDispotitionReportService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: QaRpdDispotitionReportService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: ApiConfiguration }, { type: i2.HttpClient }] });

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function qaRpdDispotitionWidgetControllerFindAll(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, qaRpdDispotitionWidgetControllerFindAll.PATH, 'post');
    if (params) {
        rb.query('filter', params.filter, {});
        rb.query('joinWhere', params.joinWhere, {});
        rb.query('select', params.select, {});
        rb.query('groupBy', params.groupBy, {});
        rb.query('sortKey', params.sortKey, {});
        rb.query('sortValue', params.sortValue, {});
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
qaRpdDispotitionWidgetControllerFindAll.PATH = '/amims/qa_rpd_dispotition/qa_rpd_dispotition_widget';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
class QaRpdDispotitionWidgetService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `qaRpdDispotitionWidgetControllerFindAll()` */
    static { this.QaRpdDispotitionWidgetControllerFindAllPath = '/amims/qa_rpd_dispotition/qa_rpd_dispotition_widget'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `qaRpdDispotitionWidgetControllerFindAll()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    qaRpdDispotitionWidgetControllerFindAll$Response(params, context) {
        return qaRpdDispotitionWidgetControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `qaRpdDispotitionWidgetControllerFindAll$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    qaRpdDispotitionWidgetControllerFindAll(params, context) {
        return this.qaRpdDispotitionWidgetControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: QaRpdDispotitionWidgetService, deps: [{ token: ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: QaRpdDispotitionWidgetService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: QaRpdDispotitionWidgetService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: ApiConfiguration }, { type: i2.HttpClient }] });

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function qaTransferControllerCreate(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, qaTransferControllerCreate.PATH, 'post');
    if (params) {
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
qaTransferControllerCreate.PATH = '/amims/qa_transfer/qa_transfer';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function qaTransferControllerFindAll(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, qaTransferControllerFindAll.PATH, 'get');
    if (params) {
        rb.query('pageIndex', params.pageIndex, {});
        rb.query('pageSize', params.pageSize, {});
        rb.query('filter', params.filter, {});
        rb.query('sortKey', params.sortKey, {});
        rb.query('sortValue', params.sortValue, {});
        rb.query('search_field', params.search_field, {});
        rb.query('search_keyword', params.search_keyword, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
qaTransferControllerFindAll.PATH = '/amims/qa_transfer/qa_transfer';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function qaTransferControllerFindOne(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, qaTransferControllerFindOne.PATH, 'get');
    if (params) {
        rb.path('id', params.id, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
qaTransferControllerFindOne.PATH = '/amims/qa_transfer/qa_transfer/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function qaTransferControllerRemove(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, qaTransferControllerRemove.PATH, 'delete');
    if (params) {
        rb.path('id', params.id, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
qaTransferControllerRemove.PATH = '/amims/qa_transfer/qa_transfer/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function qaTransferControllerUpdate(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, qaTransferControllerUpdate.PATH, 'put');
    if (params) {
        rb.path('id', params.id, {});
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
qaTransferControllerUpdate.PATH = '/amims/qa_transfer/qa_transfer/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
class QaTransferService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `qaTransferControllerFindAll()` */
    static { this.QaTransferControllerFindAllPath = '/amims/qa_transfer/qa_transfer'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `qaTransferControllerFindAll()` instead.
     *
     * This method doesn't expect any request body.
     */
    qaTransferControllerFindAll$Response(params, context) {
        return qaTransferControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `qaTransferControllerFindAll$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    qaTransferControllerFindAll(params, context) {
        return this.qaTransferControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `qaTransferControllerCreate()` */
    static { this.QaTransferControllerCreatePath = '/amims/qa_transfer/qa_transfer'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `qaTransferControllerCreate()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    qaTransferControllerCreate$Response(params, context) {
        return qaTransferControllerCreate(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `qaTransferControllerCreate$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    qaTransferControllerCreate(params, context) {
        return this.qaTransferControllerCreate$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `qaTransferControllerFindOne()` */
    static { this.QaTransferControllerFindOnePath = '/amims/qa_transfer/qa_transfer/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `qaTransferControllerFindOne()` instead.
     *
     * This method doesn't expect any request body.
     */
    qaTransferControllerFindOne$Response(params, context) {
        return qaTransferControllerFindOne(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `qaTransferControllerFindOne$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    qaTransferControllerFindOne(params, context) {
        return this.qaTransferControllerFindOne$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `qaTransferControllerUpdate()` */
    static { this.QaTransferControllerUpdatePath = '/amims/qa_transfer/qa_transfer/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `qaTransferControllerUpdate()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    qaTransferControllerUpdate$Response(params, context) {
        return qaTransferControllerUpdate(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `qaTransferControllerUpdate$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    qaTransferControllerUpdate(params, context) {
        return this.qaTransferControllerUpdate$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `qaTransferControllerRemove()` */
    static { this.QaTransferControllerRemovePath = '/amims/qa_transfer/qa_transfer/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `qaTransferControllerRemove()` instead.
     *
     * This method doesn't expect any request body.
     */
    qaTransferControllerRemove$Response(params, context) {
        return qaTransferControllerRemove(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `qaTransferControllerRemove$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    qaTransferControllerRemove(params, context) {
        return this.qaTransferControllerRemove$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: QaTransferService, deps: [{ token: ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: QaTransferService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: QaTransferService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: ApiConfiguration }, { type: i2.HttpClient }] });

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function qaTransferReportControllerFindAll(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, qaTransferReportControllerFindAll.PATH, 'post');
    if (params) {
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
qaTransferReportControllerFindAll.PATH = '/amims/qa_transfer/qa_transfer_report/list';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function qaTransferReportControllerFindOne(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, qaTransferReportControllerFindOne.PATH, 'get');
    if (params) {
        rb.path('id', params.id, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
qaTransferReportControllerFindOne.PATH = '/amims/qa_transfer/qa_transfer_report/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
class QaTransferReportService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `qaTransferReportControllerFindAll()` */
    static { this.QaTransferReportControllerFindAllPath = '/amims/qa_transfer/qa_transfer_report/list'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `qaTransferReportControllerFindAll()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    qaTransferReportControllerFindAll$Response(params, context) {
        return qaTransferReportControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `qaTransferReportControllerFindAll$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    qaTransferReportControllerFindAll(params, context) {
        return this.qaTransferReportControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `qaTransferReportControllerFindOne()` */
    static { this.QaTransferReportControllerFindOnePath = '/amims/qa_transfer/qa_transfer_report/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `qaTransferReportControllerFindOne()` instead.
     *
     * This method doesn't expect any request body.
     */
    qaTransferReportControllerFindOne$Response(params, context) {
        return qaTransferReportControllerFindOne(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `qaTransferReportControllerFindOne$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    qaTransferReportControllerFindOne(params, context) {
        return this.qaTransferReportControllerFindOne$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: QaTransferReportService, deps: [{ token: ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: QaTransferReportService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: QaTransferReportService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: ApiConfiguration }, { type: i2.HttpClient }] });

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function qaTransferWidgetControllerFindAll(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, qaTransferWidgetControllerFindAll.PATH, 'post');
    if (params) {
        rb.query('filter', params.filter, {});
        rb.query('joinWhere', params.joinWhere, {});
        rb.query('select', params.select, {});
        rb.query('groupBy', params.groupBy, {});
        rb.query('sortKey', params.sortKey, {});
        rb.query('sortValue', params.sortValue, {});
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
qaTransferWidgetControllerFindAll.PATH = '/amims/qa_transfer/qa_transfer_widget';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
class QaTransferWidgetService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `qaTransferWidgetControllerFindAll()` */
    static { this.QaTransferWidgetControllerFindAllPath = '/amims/qa_transfer/qa_transfer_widget'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `qaTransferWidgetControllerFindAll()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    qaTransferWidgetControllerFindAll$Response(params, context) {
        return qaTransferWidgetControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `qaTransferWidgetControllerFindAll$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    qaTransferWidgetControllerFindAll(params, context) {
        return this.qaTransferWidgetControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: QaTransferWidgetService, deps: [{ token: ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: QaTransferWidgetService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: QaTransferWidgetService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: ApiConfiguration }, { type: i2.HttpClient }] });

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function qaTransferItemControllerCreate(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, qaTransferItemControllerCreate.PATH, 'post');
    if (params) {
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
qaTransferItemControllerCreate.PATH = '/amims/qa_transfer_item/qa_transfer_item';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function qaTransferItemControllerFindAll(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, qaTransferItemControllerFindAll.PATH, 'get');
    if (params) {
        rb.query('pageIndex', params.pageIndex, {});
        rb.query('pageSize', params.pageSize, {});
        rb.query('filter', params.filter, {});
        rb.query('sortKey', params.sortKey, {});
        rb.query('sortValue', params.sortValue, {});
        rb.query('search_field', params.search_field, {});
        rb.query('search_keyword', params.search_keyword, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
qaTransferItemControllerFindAll.PATH = '/amims/qa_transfer_item/qa_transfer_item';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function qaTransferItemControllerFindOne(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, qaTransferItemControllerFindOne.PATH, 'get');
    if (params) {
        rb.path('id', params.id, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
qaTransferItemControllerFindOne.PATH = '/amims/qa_transfer_item/qa_transfer_item/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function qaTransferItemControllerRemove(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, qaTransferItemControllerRemove.PATH, 'delete');
    if (params) {
        rb.path('id', params.id, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
qaTransferItemControllerRemove.PATH = '/amims/qa_transfer_item/qa_transfer_item/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function qaTransferItemControllerUpdate(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, qaTransferItemControllerUpdate.PATH, 'put');
    if (params) {
        rb.path('id', params.id, {});
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
qaTransferItemControllerUpdate.PATH = '/amims/qa_transfer_item/qa_transfer_item/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
class QaTransferItemService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `qaTransferItemControllerFindAll()` */
    static { this.QaTransferItemControllerFindAllPath = '/amims/qa_transfer_item/qa_transfer_item'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `qaTransferItemControllerFindAll()` instead.
     *
     * This method doesn't expect any request body.
     */
    qaTransferItemControllerFindAll$Response(params, context) {
        return qaTransferItemControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `qaTransferItemControllerFindAll$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    qaTransferItemControllerFindAll(params, context) {
        return this.qaTransferItemControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `qaTransferItemControllerCreate()` */
    static { this.QaTransferItemControllerCreatePath = '/amims/qa_transfer_item/qa_transfer_item'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `qaTransferItemControllerCreate()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    qaTransferItemControllerCreate$Response(params, context) {
        return qaTransferItemControllerCreate(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `qaTransferItemControllerCreate$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    qaTransferItemControllerCreate(params, context) {
        return this.qaTransferItemControllerCreate$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `qaTransferItemControllerFindOne()` */
    static { this.QaTransferItemControllerFindOnePath = '/amims/qa_transfer_item/qa_transfer_item/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `qaTransferItemControllerFindOne()` instead.
     *
     * This method doesn't expect any request body.
     */
    qaTransferItemControllerFindOne$Response(params, context) {
        return qaTransferItemControllerFindOne(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `qaTransferItemControllerFindOne$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    qaTransferItemControllerFindOne(params, context) {
        return this.qaTransferItemControllerFindOne$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `qaTransferItemControllerUpdate()` */
    static { this.QaTransferItemControllerUpdatePath = '/amims/qa_transfer_item/qa_transfer_item/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `qaTransferItemControllerUpdate()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    qaTransferItemControllerUpdate$Response(params, context) {
        return qaTransferItemControllerUpdate(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `qaTransferItemControllerUpdate$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    qaTransferItemControllerUpdate(params, context) {
        return this.qaTransferItemControllerUpdate$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `qaTransferItemControllerRemove()` */
    static { this.QaTransferItemControllerRemovePath = '/amims/qa_transfer_item/qa_transfer_item/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `qaTransferItemControllerRemove()` instead.
     *
     * This method doesn't expect any request body.
     */
    qaTransferItemControllerRemove$Response(params, context) {
        return qaTransferItemControllerRemove(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `qaTransferItemControllerRemove$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    qaTransferItemControllerRemove(params, context) {
        return this.qaTransferItemControllerRemove$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: QaTransferItemService, deps: [{ token: ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: QaTransferItemService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: QaTransferItemService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: ApiConfiguration }, { type: i2.HttpClient }] });

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function qaTransferItemReportControllerFindAll(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, qaTransferItemReportControllerFindAll.PATH, 'post');
    if (params) {
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
qaTransferItemReportControllerFindAll.PATH = '/amims/qa_transfer_item/qa_transfer_item_report/list';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function qaTransferItemReportControllerFindOne(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, qaTransferItemReportControllerFindOne.PATH, 'get');
    if (params) {
        rb.path('id', params.id, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
qaTransferItemReportControllerFindOne.PATH = '/amims/qa_transfer_item/qa_transfer_item_report/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
class QaTransferItemReportService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `qaTransferItemReportControllerFindAll()` */
    static { this.QaTransferItemReportControllerFindAllPath = '/amims/qa_transfer_item/qa_transfer_item_report/list'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `qaTransferItemReportControllerFindAll()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    qaTransferItemReportControllerFindAll$Response(params, context) {
        return qaTransferItemReportControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `qaTransferItemReportControllerFindAll$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    qaTransferItemReportControllerFindAll(params, context) {
        return this.qaTransferItemReportControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `qaTransferItemReportControllerFindOne()` */
    static { this.QaTransferItemReportControllerFindOnePath = '/amims/qa_transfer_item/qa_transfer_item_report/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `qaTransferItemReportControllerFindOne()` instead.
     *
     * This method doesn't expect any request body.
     */
    qaTransferItemReportControllerFindOne$Response(params, context) {
        return qaTransferItemReportControllerFindOne(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `qaTransferItemReportControllerFindOne$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    qaTransferItemReportControllerFindOne(params, context) {
        return this.qaTransferItemReportControllerFindOne$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: QaTransferItemReportService, deps: [{ token: ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: QaTransferItemReportService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: QaTransferItemReportService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: ApiConfiguration }, { type: i2.HttpClient }] });

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function qaTransferItemWidgetControllerFindAll(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, qaTransferItemWidgetControllerFindAll.PATH, 'post');
    if (params) {
        rb.query('filter', params.filter, {});
        rb.query('joinWhere', params.joinWhere, {});
        rb.query('select', params.select, {});
        rb.query('groupBy', params.groupBy, {});
        rb.query('sortKey', params.sortKey, {});
        rb.query('sortValue', params.sortValue, {});
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
qaTransferItemWidgetControllerFindAll.PATH = '/amims/qa_transfer_item/qa_transfer_item_widget';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
class QaTransferItemWidgetService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `qaTransferItemWidgetControllerFindAll()` */
    static { this.QaTransferItemWidgetControllerFindAllPath = '/amims/qa_transfer_item/qa_transfer_item_widget'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `qaTransferItemWidgetControllerFindAll()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    qaTransferItemWidgetControllerFindAll$Response(params, context) {
        return qaTransferItemWidgetControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `qaTransferItemWidgetControllerFindAll$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    qaTransferItemWidgetControllerFindAll(params, context) {
        return this.qaTransferItemWidgetControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: QaTransferItemWidgetService, deps: [{ token: ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: QaTransferItemWidgetService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: QaTransferItemWidgetService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: ApiConfiguration }, { type: i2.HttpClient }] });

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function rotaryFactorControllerCreate(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, rotaryFactorControllerCreate.PATH, 'post');
    if (params) {
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
rotaryFactorControllerCreate.PATH = '/amims/rotary_factor/rotary_factor';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function rotaryFactorControllerFindAll(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, rotaryFactorControllerFindAll.PATH, 'get');
    if (params) {
        rb.query('pageIndex', params.pageIndex, {});
        rb.query('pageSize', params.pageSize, {});
        rb.query('filter', params.filter, {});
        rb.query('sortKey', params.sortKey, {});
        rb.query('sortValue', params.sortValue, {});
        rb.query('search_field', params.search_field, {});
        rb.query('search_keyword', params.search_keyword, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
rotaryFactorControllerFindAll.PATH = '/amims/rotary_factor/rotary_factor';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function rotaryFactorControllerFindOne(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, rotaryFactorControllerFindOne.PATH, 'get');
    if (params) {
        rb.path('id', params.id, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
rotaryFactorControllerFindOne.PATH = '/amims/rotary_factor/rotary_factor/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function rotaryFactorControllerRemove(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, rotaryFactorControllerRemove.PATH, 'delete');
    if (params) {
        rb.path('id', params.id, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
rotaryFactorControllerRemove.PATH = '/amims/rotary_factor/rotary_factor/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function rotaryFactorControllerUpdate(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, rotaryFactorControllerUpdate.PATH, 'put');
    if (params) {
        rb.path('id', params.id, {});
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
rotaryFactorControllerUpdate.PATH = '/amims/rotary_factor/rotary_factor/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
class RotaryFactorService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `rotaryFactorControllerFindAll()` */
    static { this.RotaryFactorControllerFindAllPath = '/amims/rotary_factor/rotary_factor'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `rotaryFactorControllerFindAll()` instead.
     *
     * This method doesn't expect any request body.
     */
    rotaryFactorControllerFindAll$Response(params, context) {
        return rotaryFactorControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `rotaryFactorControllerFindAll$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    rotaryFactorControllerFindAll(params, context) {
        return this.rotaryFactorControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `rotaryFactorControllerCreate()` */
    static { this.RotaryFactorControllerCreatePath = '/amims/rotary_factor/rotary_factor'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `rotaryFactorControllerCreate()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    rotaryFactorControllerCreate$Response(params, context) {
        return rotaryFactorControllerCreate(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `rotaryFactorControllerCreate$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    rotaryFactorControllerCreate(params, context) {
        return this.rotaryFactorControllerCreate$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `rotaryFactorControllerFindOne()` */
    static { this.RotaryFactorControllerFindOnePath = '/amims/rotary_factor/rotary_factor/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `rotaryFactorControllerFindOne()` instead.
     *
     * This method doesn't expect any request body.
     */
    rotaryFactorControllerFindOne$Response(params, context) {
        return rotaryFactorControllerFindOne(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `rotaryFactorControllerFindOne$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    rotaryFactorControllerFindOne(params, context) {
        return this.rotaryFactorControllerFindOne$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `rotaryFactorControllerUpdate()` */
    static { this.RotaryFactorControllerUpdatePath = '/amims/rotary_factor/rotary_factor/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `rotaryFactorControllerUpdate()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    rotaryFactorControllerUpdate$Response(params, context) {
        return rotaryFactorControllerUpdate(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `rotaryFactorControllerUpdate$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    rotaryFactorControllerUpdate(params, context) {
        return this.rotaryFactorControllerUpdate$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `rotaryFactorControllerRemove()` */
    static { this.RotaryFactorControllerRemovePath = '/amims/rotary_factor/rotary_factor/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `rotaryFactorControllerRemove()` instead.
     *
     * This method doesn't expect any request body.
     */
    rotaryFactorControllerRemove$Response(params, context) {
        return rotaryFactorControllerRemove(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `rotaryFactorControllerRemove$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    rotaryFactorControllerRemove(params, context) {
        return this.rotaryFactorControllerRemove$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: RotaryFactorService, deps: [{ token: ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: RotaryFactorService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: RotaryFactorService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: ApiConfiguration }, { type: i2.HttpClient }] });

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function rotaryFactorReportControllerFindAll(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, rotaryFactorReportControllerFindAll.PATH, 'post');
    if (params) {
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
rotaryFactorReportControllerFindAll.PATH = '/amims/rotary_factor/rotary_factor_report/list';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function rotaryFactorReportControllerFindOne(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, rotaryFactorReportControllerFindOne.PATH, 'get');
    if (params) {
        rb.path('id', params.id, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
rotaryFactorReportControllerFindOne.PATH = '/amims/rotary_factor/rotary_factor_report/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
class RotaryFactorReportService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `rotaryFactorReportControllerFindAll()` */
    static { this.RotaryFactorReportControllerFindAllPath = '/amims/rotary_factor/rotary_factor_report/list'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `rotaryFactorReportControllerFindAll()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    rotaryFactorReportControllerFindAll$Response(params, context) {
        return rotaryFactorReportControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `rotaryFactorReportControllerFindAll$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    rotaryFactorReportControllerFindAll(params, context) {
        return this.rotaryFactorReportControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `rotaryFactorReportControllerFindOne()` */
    static { this.RotaryFactorReportControllerFindOnePath = '/amims/rotary_factor/rotary_factor_report/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `rotaryFactorReportControllerFindOne()` instead.
     *
     * This method doesn't expect any request body.
     */
    rotaryFactorReportControllerFindOne$Response(params, context) {
        return rotaryFactorReportControllerFindOne(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `rotaryFactorReportControllerFindOne$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    rotaryFactorReportControllerFindOne(params, context) {
        return this.rotaryFactorReportControllerFindOne$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: RotaryFactorReportService, deps: [{ token: ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: RotaryFactorReportService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: RotaryFactorReportService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: ApiConfiguration }, { type: i2.HttpClient }] });

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function rotaryFactorWidgetControllerFindAll(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, rotaryFactorWidgetControllerFindAll.PATH, 'post');
    if (params) {
        rb.query('filter', params.filter, {});
        rb.query('joinWhere', params.joinWhere, {});
        rb.query('select', params.select, {});
        rb.query('groupBy', params.groupBy, {});
        rb.query('sortKey', params.sortKey, {});
        rb.query('sortValue', params.sortValue, {});
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
rotaryFactorWidgetControllerFindAll.PATH = '/amims/rotary_factor/rotary_factor_widget';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
class RotaryFactorWidgetService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `rotaryFactorWidgetControllerFindAll()` */
    static { this.RotaryFactorWidgetControllerFindAllPath = '/amims/rotary_factor/rotary_factor_widget'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `rotaryFactorWidgetControllerFindAll()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    rotaryFactorWidgetControllerFindAll$Response(params, context) {
        return rotaryFactorWidgetControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `rotaryFactorWidgetControllerFindAll$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    rotaryFactorWidgetControllerFindAll(params, context) {
        return this.rotaryFactorWidgetControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: RotaryFactorWidgetService, deps: [{ token: ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: RotaryFactorWidgetService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: RotaryFactorWidgetService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: ApiConfiguration }, { type: i2.HttpClient }] });

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function shippingControllerCreate(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, shippingControllerCreate.PATH, 'post');
    if (params) {
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
shippingControllerCreate.PATH = '/amims/shipping/shipping';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function shippingControllerFindAll(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, shippingControllerFindAll.PATH, 'get');
    if (params) {
        rb.query('pageIndex', params.pageIndex, {});
        rb.query('pageSize', params.pageSize, {});
        rb.query('filter', params.filter, {});
        rb.query('sortKey', params.sortKey, {});
        rb.query('sortValue', params.sortValue, {});
        rb.query('search_field', params.search_field, {});
        rb.query('search_keyword', params.search_keyword, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
shippingControllerFindAll.PATH = '/amims/shipping/shipping';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function shippingControllerFindOne(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, shippingControllerFindOne.PATH, 'get');
    if (params) {
        rb.path('id', params.id, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
shippingControllerFindOne.PATH = '/amims/shipping/shipping/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function shippingControllerRemove(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, shippingControllerRemove.PATH, 'delete');
    if (params) {
        rb.path('id', params.id, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
shippingControllerRemove.PATH = '/amims/shipping/shipping/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function shippingControllerUpdate(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, shippingControllerUpdate.PATH, 'put');
    if (params) {
        rb.path('id', params.id, {});
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
shippingControllerUpdate.PATH = '/amims/shipping/shipping/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
class ShippingService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `shippingControllerFindAll()` */
    static { this.ShippingControllerFindAllPath = '/amims/shipping/shipping'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `shippingControllerFindAll()` instead.
     *
     * This method doesn't expect any request body.
     */
    shippingControllerFindAll$Response(params, context) {
        return shippingControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `shippingControllerFindAll$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    shippingControllerFindAll(params, context) {
        return this.shippingControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `shippingControllerCreate()` */
    static { this.ShippingControllerCreatePath = '/amims/shipping/shipping'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `shippingControllerCreate()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    shippingControllerCreate$Response(params, context) {
        return shippingControllerCreate(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `shippingControllerCreate$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    shippingControllerCreate(params, context) {
        return this.shippingControllerCreate$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `shippingControllerFindOne()` */
    static { this.ShippingControllerFindOnePath = '/amims/shipping/shipping/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `shippingControllerFindOne()` instead.
     *
     * This method doesn't expect any request body.
     */
    shippingControllerFindOne$Response(params, context) {
        return shippingControllerFindOne(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `shippingControllerFindOne$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    shippingControllerFindOne(params, context) {
        return this.shippingControllerFindOne$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `shippingControllerUpdate()` */
    static { this.ShippingControllerUpdatePath = '/amims/shipping/shipping/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `shippingControllerUpdate()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    shippingControllerUpdate$Response(params, context) {
        return shippingControllerUpdate(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `shippingControllerUpdate$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    shippingControllerUpdate(params, context) {
        return this.shippingControllerUpdate$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `shippingControllerRemove()` */
    static { this.ShippingControllerRemovePath = '/amims/shipping/shipping/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `shippingControllerRemove()` instead.
     *
     * This method doesn't expect any request body.
     */
    shippingControllerRemove$Response(params, context) {
        return shippingControllerRemove(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `shippingControllerRemove$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    shippingControllerRemove(params, context) {
        return this.shippingControllerRemove$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: ShippingService, deps: [{ token: ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: ShippingService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: ShippingService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: ApiConfiguration }, { type: i2.HttpClient }] });

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function shippingReportControllerFindAll(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, shippingReportControllerFindAll.PATH, 'post');
    if (params) {
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
shippingReportControllerFindAll.PATH = '/amims/shipping/shipping_report/list';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function shippingReportControllerFindOne(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, shippingReportControllerFindOne.PATH, 'get');
    if (params) {
        rb.path('id', params.id, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
shippingReportControllerFindOne.PATH = '/amims/shipping/shipping_report/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
class ShippingReportService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `shippingReportControllerFindAll()` */
    static { this.ShippingReportControllerFindAllPath = '/amims/shipping/shipping_report/list'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `shippingReportControllerFindAll()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    shippingReportControllerFindAll$Response(params, context) {
        return shippingReportControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `shippingReportControllerFindAll$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    shippingReportControllerFindAll(params, context) {
        return this.shippingReportControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `shippingReportControllerFindOne()` */
    static { this.ShippingReportControllerFindOnePath = '/amims/shipping/shipping_report/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `shippingReportControllerFindOne()` instead.
     *
     * This method doesn't expect any request body.
     */
    shippingReportControllerFindOne$Response(params, context) {
        return shippingReportControllerFindOne(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `shippingReportControllerFindOne$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    shippingReportControllerFindOne(params, context) {
        return this.shippingReportControllerFindOne$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: ShippingReportService, deps: [{ token: ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: ShippingReportService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: ShippingReportService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: ApiConfiguration }, { type: i2.HttpClient }] });

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function shippingWidgetControllerFindAll(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, shippingWidgetControllerFindAll.PATH, 'post');
    if (params) {
        rb.query('filter', params.filter, {});
        rb.query('joinWhere', params.joinWhere, {});
        rb.query('select', params.select, {});
        rb.query('groupBy', params.groupBy, {});
        rb.query('sortKey', params.sortKey, {});
        rb.query('sortValue', params.sortValue, {});
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
shippingWidgetControllerFindAll.PATH = '/amims/shipping/shipping_widget';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
class ShippingWidgetService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `shippingWidgetControllerFindAll()` */
    static { this.ShippingWidgetControllerFindAllPath = '/amims/shipping/shipping_widget'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `shippingWidgetControllerFindAll()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    shippingWidgetControllerFindAll$Response(params, context) {
        return shippingWidgetControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `shippingWidgetControllerFindAll$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    shippingWidgetControllerFindAll(params, context) {
        return this.shippingWidgetControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: ShippingWidgetService, deps: [{ token: ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: ShippingWidgetService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: ShippingWidgetService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: ApiConfiguration }, { type: i2.HttpClient }] });

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function siteControllerCreate(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, siteControllerCreate.PATH, 'post');
    if (params) {
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
siteControllerCreate.PATH = '/amims/site/site';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function siteControllerFindAll(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, siteControllerFindAll.PATH, 'get');
    if (params) {
        rb.query('pageIndex', params.pageIndex, {});
        rb.query('pageSize', params.pageSize, {});
        rb.query('filter', params.filter, {});
        rb.query('sortKey', params.sortKey, {});
        rb.query('sortValue', params.sortValue, {});
        rb.query('search_field', params.search_field, {});
        rb.query('search_keyword', params.search_keyword, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
siteControllerFindAll.PATH = '/amims/site/site';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function siteControllerFindOne(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, siteControllerFindOne.PATH, 'get');
    if (params) {
        rb.path('id', params.id, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
siteControllerFindOne.PATH = '/amims/site/site/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function siteControllerRemove(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, siteControllerRemove.PATH, 'delete');
    if (params) {
        rb.path('id', params.id, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
siteControllerRemove.PATH = '/amims/site/site/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function siteControllerUpdate(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, siteControllerUpdate.PATH, 'put');
    if (params) {
        rb.path('id', params.id, {});
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
siteControllerUpdate.PATH = '/amims/site/site/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
class SiteService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `siteControllerFindAll()` */
    static { this.SiteControllerFindAllPath = '/amims/site/site'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `siteControllerFindAll()` instead.
     *
     * This method doesn't expect any request body.
     */
    siteControllerFindAll$Response(params, context) {
        return siteControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `siteControllerFindAll$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    siteControllerFindAll(params, context) {
        return this.siteControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `siteControllerCreate()` */
    static { this.SiteControllerCreatePath = '/amims/site/site'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `siteControllerCreate()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    siteControllerCreate$Response(params, context) {
        return siteControllerCreate(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `siteControllerCreate$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    siteControllerCreate(params, context) {
        return this.siteControllerCreate$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `siteControllerFindOne()` */
    static { this.SiteControllerFindOnePath = '/amims/site/site/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `siteControllerFindOne()` instead.
     *
     * This method doesn't expect any request body.
     */
    siteControllerFindOne$Response(params, context) {
        return siteControllerFindOne(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `siteControllerFindOne$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    siteControllerFindOne(params, context) {
        return this.siteControllerFindOne$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `siteControllerUpdate()` */
    static { this.SiteControllerUpdatePath = '/amims/site/site/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `siteControllerUpdate()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    siteControllerUpdate$Response(params, context) {
        return siteControllerUpdate(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `siteControllerUpdate$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    siteControllerUpdate(params, context) {
        return this.siteControllerUpdate$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `siteControllerRemove()` */
    static { this.SiteControllerRemovePath = '/amims/site/site/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `siteControllerRemove()` instead.
     *
     * This method doesn't expect any request body.
     */
    siteControllerRemove$Response(params, context) {
        return siteControllerRemove(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `siteControllerRemove$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    siteControllerRemove(params, context) {
        return this.siteControllerRemove$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: SiteService, deps: [{ token: ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: SiteService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: SiteService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: ApiConfiguration }, { type: i2.HttpClient }] });

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function siteReportControllerFindAll(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, siteReportControllerFindAll.PATH, 'post');
    if (params) {
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
siteReportControllerFindAll.PATH = '/amims/site/site_report/list';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function siteReportControllerFindOne(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, siteReportControllerFindOne.PATH, 'get');
    if (params) {
        rb.path('id', params.id, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
siteReportControllerFindOne.PATH = '/amims/site/site_report/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
class SiteReportService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `siteReportControllerFindAll()` */
    static { this.SiteReportControllerFindAllPath = '/amims/site/site_report/list'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `siteReportControllerFindAll()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    siteReportControllerFindAll$Response(params, context) {
        return siteReportControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `siteReportControllerFindAll$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    siteReportControllerFindAll(params, context) {
        return this.siteReportControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `siteReportControllerFindOne()` */
    static { this.SiteReportControllerFindOnePath = '/amims/site/site_report/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `siteReportControllerFindOne()` instead.
     *
     * This method doesn't expect any request body.
     */
    siteReportControllerFindOne$Response(params, context) {
        return siteReportControllerFindOne(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `siteReportControllerFindOne$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    siteReportControllerFindOne(params, context) {
        return this.siteReportControllerFindOne$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: SiteReportService, deps: [{ token: ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: SiteReportService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: SiteReportService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: ApiConfiguration }, { type: i2.HttpClient }] });

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function siteWidgetControllerFindAll(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, siteWidgetControllerFindAll.PATH, 'post');
    if (params) {
        rb.query('filter', params.filter, {});
        rb.query('joinWhere', params.joinWhere, {});
        rb.query('select', params.select, {});
        rb.query('groupBy', params.groupBy, {});
        rb.query('sortKey', params.sortKey, {});
        rb.query('sortValue', params.sortValue, {});
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
siteWidgetControllerFindAll.PATH = '/amims/site/site_widget';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
class SiteWidgetService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `siteWidgetControllerFindAll()` */
    static { this.SiteWidgetControllerFindAllPath = '/amims/site/site_widget'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `siteWidgetControllerFindAll()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    siteWidgetControllerFindAll$Response(params, context) {
        return siteWidgetControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `siteWidgetControllerFindAll$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    siteWidgetControllerFindAll(params, context) {
        return this.siteWidgetControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: SiteWidgetService, deps: [{ token: ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: SiteWidgetService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: SiteWidgetService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: ApiConfiguration }, { type: i2.HttpClient }] });

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function storeDestroyControllerCreate(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, storeDestroyControllerCreate.PATH, 'post');
    if (params) {
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
storeDestroyControllerCreate.PATH = '/amims/store_destroy/store_destroy';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function storeDestroyControllerFindAll(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, storeDestroyControllerFindAll.PATH, 'get');
    if (params) {
        rb.query('pageIndex', params.pageIndex, {});
        rb.query('pageSize', params.pageSize, {});
        rb.query('filter', params.filter, {});
        rb.query('sortKey', params.sortKey, {});
        rb.query('sortValue', params.sortValue, {});
        rb.query('search_field', params.search_field, {});
        rb.query('search_keyword', params.search_keyword, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
storeDestroyControllerFindAll.PATH = '/amims/store_destroy/store_destroy';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function storeDestroyControllerFindOne(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, storeDestroyControllerFindOne.PATH, 'get');
    if (params) {
        rb.path('id', params.id, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
storeDestroyControllerFindOne.PATH = '/amims/store_destroy/store_destroy/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function storeDestroyControllerRemove(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, storeDestroyControllerRemove.PATH, 'delete');
    if (params) {
        rb.path('id', params.id, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
storeDestroyControllerRemove.PATH = '/amims/store_destroy/store_destroy/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function storeDestroyControllerUpdate(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, storeDestroyControllerUpdate.PATH, 'put');
    if (params) {
        rb.path('id', params.id, {});
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
storeDestroyControllerUpdate.PATH = '/amims/store_destroy/store_destroy/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
class StoreDestroyService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `storeDestroyControllerFindAll()` */
    static { this.StoreDestroyControllerFindAllPath = '/amims/store_destroy/store_destroy'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `storeDestroyControllerFindAll()` instead.
     *
     * This method doesn't expect any request body.
     */
    storeDestroyControllerFindAll$Response(params, context) {
        return storeDestroyControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `storeDestroyControllerFindAll$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    storeDestroyControllerFindAll(params, context) {
        return this.storeDestroyControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `storeDestroyControllerCreate()` */
    static { this.StoreDestroyControllerCreatePath = '/amims/store_destroy/store_destroy'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `storeDestroyControllerCreate()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    storeDestroyControllerCreate$Response(params, context) {
        return storeDestroyControllerCreate(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `storeDestroyControllerCreate$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    storeDestroyControllerCreate(params, context) {
        return this.storeDestroyControllerCreate$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `storeDestroyControllerFindOne()` */
    static { this.StoreDestroyControllerFindOnePath = '/amims/store_destroy/store_destroy/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `storeDestroyControllerFindOne()` instead.
     *
     * This method doesn't expect any request body.
     */
    storeDestroyControllerFindOne$Response(params, context) {
        return storeDestroyControllerFindOne(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `storeDestroyControllerFindOne$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    storeDestroyControllerFindOne(params, context) {
        return this.storeDestroyControllerFindOne$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `storeDestroyControllerUpdate()` */
    static { this.StoreDestroyControllerUpdatePath = '/amims/store_destroy/store_destroy/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `storeDestroyControllerUpdate()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    storeDestroyControllerUpdate$Response(params, context) {
        return storeDestroyControllerUpdate(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `storeDestroyControllerUpdate$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    storeDestroyControllerUpdate(params, context) {
        return this.storeDestroyControllerUpdate$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `storeDestroyControllerRemove()` */
    static { this.StoreDestroyControllerRemovePath = '/amims/store_destroy/store_destroy/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `storeDestroyControllerRemove()` instead.
     *
     * This method doesn't expect any request body.
     */
    storeDestroyControllerRemove$Response(params, context) {
        return storeDestroyControllerRemove(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `storeDestroyControllerRemove$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    storeDestroyControllerRemove(params, context) {
        return this.storeDestroyControllerRemove$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: StoreDestroyService, deps: [{ token: ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: StoreDestroyService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: StoreDestroyService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: ApiConfiguration }, { type: i2.HttpClient }] });

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function storeDestroyReportControllerFindAll(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, storeDestroyReportControllerFindAll.PATH, 'post');
    if (params) {
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
storeDestroyReportControllerFindAll.PATH = '/amims/store_destroy/store_destroy_report/list';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function storeDestroyReportControllerFindOne(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, storeDestroyReportControllerFindOne.PATH, 'get');
    if (params) {
        rb.path('id', params.id, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
storeDestroyReportControllerFindOne.PATH = '/amims/store_destroy/store_destroy_report/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
class StoreDestroyReportService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `storeDestroyReportControllerFindAll()` */
    static { this.StoreDestroyReportControllerFindAllPath = '/amims/store_destroy/store_destroy_report/list'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `storeDestroyReportControllerFindAll()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    storeDestroyReportControllerFindAll$Response(params, context) {
        return storeDestroyReportControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `storeDestroyReportControllerFindAll$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    storeDestroyReportControllerFindAll(params, context) {
        return this.storeDestroyReportControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `storeDestroyReportControllerFindOne()` */
    static { this.StoreDestroyReportControllerFindOnePath = '/amims/store_destroy/store_destroy_report/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `storeDestroyReportControllerFindOne()` instead.
     *
     * This method doesn't expect any request body.
     */
    storeDestroyReportControllerFindOne$Response(params, context) {
        return storeDestroyReportControllerFindOne(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `storeDestroyReportControllerFindOne$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    storeDestroyReportControllerFindOne(params, context) {
        return this.storeDestroyReportControllerFindOne$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: StoreDestroyReportService, deps: [{ token: ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: StoreDestroyReportService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: StoreDestroyReportService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: ApiConfiguration }, { type: i2.HttpClient }] });

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function storeDestroyWidgetControllerFindAll(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, storeDestroyWidgetControllerFindAll.PATH, 'post');
    if (params) {
        rb.query('filter', params.filter, {});
        rb.query('joinWhere', params.joinWhere, {});
        rb.query('select', params.select, {});
        rb.query('groupBy', params.groupBy, {});
        rb.query('sortKey', params.sortKey, {});
        rb.query('sortValue', params.sortValue, {});
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
storeDestroyWidgetControllerFindAll.PATH = '/amims/store_destroy/store_destroy_widget';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
class StoreDestroyWidgetService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `storeDestroyWidgetControllerFindAll()` */
    static { this.StoreDestroyWidgetControllerFindAllPath = '/amims/store_destroy/store_destroy_widget'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `storeDestroyWidgetControllerFindAll()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    storeDestroyWidgetControllerFindAll$Response(params, context) {
        return storeDestroyWidgetControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `storeDestroyWidgetControllerFindAll$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    storeDestroyWidgetControllerFindAll(params, context) {
        return this.storeDestroyWidgetControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: StoreDestroyWidgetService, deps: [{ token: ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: StoreDestroyWidgetService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: StoreDestroyWidgetService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: ApiConfiguration }, { type: i2.HttpClient }] });

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function storeTransferControllerCreate(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, storeTransferControllerCreate.PATH, 'post');
    if (params) {
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
storeTransferControllerCreate.PATH = '/amims/store_transfer/store_transfer';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function storeTransferControllerFindAll(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, storeTransferControllerFindAll.PATH, 'get');
    if (params) {
        rb.query('pageIndex', params.pageIndex, {});
        rb.query('pageSize', params.pageSize, {});
        rb.query('filter', params.filter, {});
        rb.query('sortKey', params.sortKey, {});
        rb.query('sortValue', params.sortValue, {});
        rb.query('search_field', params.search_field, {});
        rb.query('search_keyword', params.search_keyword, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
storeTransferControllerFindAll.PATH = '/amims/store_transfer/store_transfer';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function storeTransferControllerFindOne(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, storeTransferControllerFindOne.PATH, 'get');
    if (params) {
        rb.path('id', params.id, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
storeTransferControllerFindOne.PATH = '/amims/store_transfer/store_transfer/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function storeTransferControllerRemove(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, storeTransferControllerRemove.PATH, 'delete');
    if (params) {
        rb.path('id', params.id, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
storeTransferControllerRemove.PATH = '/amims/store_transfer/store_transfer/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function storeTransferControllerUpdate(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, storeTransferControllerUpdate.PATH, 'put');
    if (params) {
        rb.path('id', params.id, {});
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
storeTransferControllerUpdate.PATH = '/amims/store_transfer/store_transfer/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
class StoreTransferService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `storeTransferControllerFindAll()` */
    static { this.StoreTransferControllerFindAllPath = '/amims/store_transfer/store_transfer'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `storeTransferControllerFindAll()` instead.
     *
     * This method doesn't expect any request body.
     */
    storeTransferControllerFindAll$Response(params, context) {
        return storeTransferControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `storeTransferControllerFindAll$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    storeTransferControllerFindAll(params, context) {
        return this.storeTransferControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `storeTransferControllerCreate()` */
    static { this.StoreTransferControllerCreatePath = '/amims/store_transfer/store_transfer'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `storeTransferControllerCreate()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    storeTransferControllerCreate$Response(params, context) {
        return storeTransferControllerCreate(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `storeTransferControllerCreate$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    storeTransferControllerCreate(params, context) {
        return this.storeTransferControllerCreate$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `storeTransferControllerFindOne()` */
    static { this.StoreTransferControllerFindOnePath = '/amims/store_transfer/store_transfer/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `storeTransferControllerFindOne()` instead.
     *
     * This method doesn't expect any request body.
     */
    storeTransferControllerFindOne$Response(params, context) {
        return storeTransferControllerFindOne(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `storeTransferControllerFindOne$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    storeTransferControllerFindOne(params, context) {
        return this.storeTransferControllerFindOne$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `storeTransferControllerUpdate()` */
    static { this.StoreTransferControllerUpdatePath = '/amims/store_transfer/store_transfer/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `storeTransferControllerUpdate()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    storeTransferControllerUpdate$Response(params, context) {
        return storeTransferControllerUpdate(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `storeTransferControllerUpdate$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    storeTransferControllerUpdate(params, context) {
        return this.storeTransferControllerUpdate$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `storeTransferControllerRemove()` */
    static { this.StoreTransferControllerRemovePath = '/amims/store_transfer/store_transfer/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `storeTransferControllerRemove()` instead.
     *
     * This method doesn't expect any request body.
     */
    storeTransferControllerRemove$Response(params, context) {
        return storeTransferControllerRemove(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `storeTransferControllerRemove$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    storeTransferControllerRemove(params, context) {
        return this.storeTransferControllerRemove$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: StoreTransferService, deps: [{ token: ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: StoreTransferService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: StoreTransferService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: ApiConfiguration }, { type: i2.HttpClient }] });

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function storeTransferReportControllerFindAll(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, storeTransferReportControllerFindAll.PATH, 'post');
    if (params) {
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
storeTransferReportControllerFindAll.PATH = '/amims/store_transfer/store_transfer_report/list';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function storeTransferReportControllerFindOne(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, storeTransferReportControllerFindOne.PATH, 'get');
    if (params) {
        rb.path('id', params.id, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
storeTransferReportControllerFindOne.PATH = '/amims/store_transfer/store_transfer_report/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
class StoreTransferReportService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `storeTransferReportControllerFindAll()` */
    static { this.StoreTransferReportControllerFindAllPath = '/amims/store_transfer/store_transfer_report/list'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `storeTransferReportControllerFindAll()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    storeTransferReportControllerFindAll$Response(params, context) {
        return storeTransferReportControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `storeTransferReportControllerFindAll$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    storeTransferReportControllerFindAll(params, context) {
        return this.storeTransferReportControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `storeTransferReportControllerFindOne()` */
    static { this.StoreTransferReportControllerFindOnePath = '/amims/store_transfer/store_transfer_report/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `storeTransferReportControllerFindOne()` instead.
     *
     * This method doesn't expect any request body.
     */
    storeTransferReportControllerFindOne$Response(params, context) {
        return storeTransferReportControllerFindOne(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `storeTransferReportControllerFindOne$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    storeTransferReportControllerFindOne(params, context) {
        return this.storeTransferReportControllerFindOne$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: StoreTransferReportService, deps: [{ token: ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: StoreTransferReportService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: StoreTransferReportService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: ApiConfiguration }, { type: i2.HttpClient }] });

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function storeTransferWidgetControllerFindAll(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, storeTransferWidgetControllerFindAll.PATH, 'post');
    if (params) {
        rb.query('filter', params.filter, {});
        rb.query('joinWhere', params.joinWhere, {});
        rb.query('select', params.select, {});
        rb.query('groupBy', params.groupBy, {});
        rb.query('sortKey', params.sortKey, {});
        rb.query('sortValue', params.sortValue, {});
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
storeTransferWidgetControllerFindAll.PATH = '/amims/store_transfer/store_transfer_widget';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
class StoreTransferWidgetService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `storeTransferWidgetControllerFindAll()` */
    static { this.StoreTransferWidgetControllerFindAllPath = '/amims/store_transfer/store_transfer_widget'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `storeTransferWidgetControllerFindAll()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    storeTransferWidgetControllerFindAll$Response(params, context) {
        return storeTransferWidgetControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `storeTransferWidgetControllerFindAll$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    storeTransferWidgetControllerFindAll(params, context) {
        return this.storeTransferWidgetControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: StoreTransferWidgetService, deps: [{ token: ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: StoreTransferWidgetService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: StoreTransferWidgetService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: ApiConfiguration }, { type: i2.HttpClient }] });

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function storeTransferItemControllerCreate(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, storeTransferItemControllerCreate.PATH, 'post');
    if (params) {
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
storeTransferItemControllerCreate.PATH = '/amims/store_transfer_item/store_transfer_item';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function storeTransferItemControllerFindAll(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, storeTransferItemControllerFindAll.PATH, 'get');
    if (params) {
        rb.query('pageIndex', params.pageIndex, {});
        rb.query('pageSize', params.pageSize, {});
        rb.query('filter', params.filter, {});
        rb.query('sortKey', params.sortKey, {});
        rb.query('sortValue', params.sortValue, {});
        rb.query('search_field', params.search_field, {});
        rb.query('search_keyword', params.search_keyword, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
storeTransferItemControllerFindAll.PATH = '/amims/store_transfer_item/store_transfer_item';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function storeTransferItemControllerFindOne(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, storeTransferItemControllerFindOne.PATH, 'get');
    if (params) {
        rb.path('id', params.id, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
storeTransferItemControllerFindOne.PATH = '/amims/store_transfer_item/store_transfer_item/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function storeTransferItemControllerRemove(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, storeTransferItemControllerRemove.PATH, 'delete');
    if (params) {
        rb.path('id', params.id, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
storeTransferItemControllerRemove.PATH = '/amims/store_transfer_item/store_transfer_item/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function storeTransferItemControllerUpdate(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, storeTransferItemControllerUpdate.PATH, 'put');
    if (params) {
        rb.path('id', params.id, {});
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
storeTransferItemControllerUpdate.PATH = '/amims/store_transfer_item/store_transfer_item/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
class StoreTransferItemService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `storeTransferItemControllerFindAll()` */
    static { this.StoreTransferItemControllerFindAllPath = '/amims/store_transfer_item/store_transfer_item'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `storeTransferItemControllerFindAll()` instead.
     *
     * This method doesn't expect any request body.
     */
    storeTransferItemControllerFindAll$Response(params, context) {
        return storeTransferItemControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `storeTransferItemControllerFindAll$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    storeTransferItemControllerFindAll(params, context) {
        return this.storeTransferItemControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `storeTransferItemControllerCreate()` */
    static { this.StoreTransferItemControllerCreatePath = '/amims/store_transfer_item/store_transfer_item'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `storeTransferItemControllerCreate()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    storeTransferItemControllerCreate$Response(params, context) {
        return storeTransferItemControllerCreate(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `storeTransferItemControllerCreate$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    storeTransferItemControllerCreate(params, context) {
        return this.storeTransferItemControllerCreate$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `storeTransferItemControllerFindOne()` */
    static { this.StoreTransferItemControllerFindOnePath = '/amims/store_transfer_item/store_transfer_item/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `storeTransferItemControllerFindOne()` instead.
     *
     * This method doesn't expect any request body.
     */
    storeTransferItemControllerFindOne$Response(params, context) {
        return storeTransferItemControllerFindOne(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `storeTransferItemControllerFindOne$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    storeTransferItemControllerFindOne(params, context) {
        return this.storeTransferItemControllerFindOne$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `storeTransferItemControllerUpdate()` */
    static { this.StoreTransferItemControllerUpdatePath = '/amims/store_transfer_item/store_transfer_item/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `storeTransferItemControllerUpdate()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    storeTransferItemControllerUpdate$Response(params, context) {
        return storeTransferItemControllerUpdate(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `storeTransferItemControllerUpdate$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    storeTransferItemControllerUpdate(params, context) {
        return this.storeTransferItemControllerUpdate$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `storeTransferItemControllerRemove()` */
    static { this.StoreTransferItemControllerRemovePath = '/amims/store_transfer_item/store_transfer_item/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `storeTransferItemControllerRemove()` instead.
     *
     * This method doesn't expect any request body.
     */
    storeTransferItemControllerRemove$Response(params, context) {
        return storeTransferItemControllerRemove(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `storeTransferItemControllerRemove$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    storeTransferItemControllerRemove(params, context) {
        return this.storeTransferItemControllerRemove$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: StoreTransferItemService, deps: [{ token: ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: StoreTransferItemService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: StoreTransferItemService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: ApiConfiguration }, { type: i2.HttpClient }] });

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function storeTransferItemReportControllerFindAll(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, storeTransferItemReportControllerFindAll.PATH, 'post');
    if (params) {
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
storeTransferItemReportControllerFindAll.PATH = '/amims/store_transfer_item/store_transfer_item_report/list';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function storeTransferItemReportControllerFindOne(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, storeTransferItemReportControllerFindOne.PATH, 'get');
    if (params) {
        rb.path('id', params.id, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
storeTransferItemReportControllerFindOne.PATH = '/amims/store_transfer_item/store_transfer_item_report/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
class StoreTransferItemReportService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `storeTransferItemReportControllerFindAll()` */
    static { this.StoreTransferItemReportControllerFindAllPath = '/amims/store_transfer_item/store_transfer_item_report/list'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `storeTransferItemReportControllerFindAll()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    storeTransferItemReportControllerFindAll$Response(params, context) {
        return storeTransferItemReportControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `storeTransferItemReportControllerFindAll$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    storeTransferItemReportControllerFindAll(params, context) {
        return this.storeTransferItemReportControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `storeTransferItemReportControllerFindOne()` */
    static { this.StoreTransferItemReportControllerFindOnePath = '/amims/store_transfer_item/store_transfer_item_report/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `storeTransferItemReportControllerFindOne()` instead.
     *
     * This method doesn't expect any request body.
     */
    storeTransferItemReportControllerFindOne$Response(params, context) {
        return storeTransferItemReportControllerFindOne(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `storeTransferItemReportControllerFindOne$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    storeTransferItemReportControllerFindOne(params, context) {
        return this.storeTransferItemReportControllerFindOne$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: StoreTransferItemReportService, deps: [{ token: ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: StoreTransferItemReportService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: StoreTransferItemReportService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: ApiConfiguration }, { type: i2.HttpClient }] });

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function storeTransferItemWidgetControllerFindAll(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, storeTransferItemWidgetControllerFindAll.PATH, 'post');
    if (params) {
        rb.query('filter', params.filter, {});
        rb.query('joinWhere', params.joinWhere, {});
        rb.query('select', params.select, {});
        rb.query('groupBy', params.groupBy, {});
        rb.query('sortKey', params.sortKey, {});
        rb.query('sortValue', params.sortValue, {});
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
storeTransferItemWidgetControllerFindAll.PATH = '/amims/store_transfer_item/store_transfer_item_widget';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
class StoreTransferItemWidgetService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `storeTransferItemWidgetControllerFindAll()` */
    static { this.StoreTransferItemWidgetControllerFindAllPath = '/amims/store_transfer_item/store_transfer_item_widget'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `storeTransferItemWidgetControllerFindAll()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    storeTransferItemWidgetControllerFindAll$Response(params, context) {
        return storeTransferItemWidgetControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `storeTransferItemWidgetControllerFindAll$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    storeTransferItemWidgetControllerFindAll(params, context) {
        return this.storeTransferItemWidgetControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: StoreTransferItemWidgetService, deps: [{ token: ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: StoreTransferItemWidgetService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: StoreTransferItemWidgetService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: ApiConfiguration }, { type: i2.HttpClient }] });

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function tdControllerCreate(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, tdControllerCreate.PATH, 'post');
    if (params) {
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
tdControllerCreate.PATH = '/amims/td/td';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function tdControllerFindAll(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, tdControllerFindAll.PATH, 'get');
    if (params) {
        rb.query('pageIndex', params.pageIndex, {});
        rb.query('pageSize', params.pageSize, {});
        rb.query('filter', params.filter, {});
        rb.query('sortKey', params.sortKey, {});
        rb.query('sortValue', params.sortValue, {});
        rb.query('search_field', params.search_field, {});
        rb.query('search_keyword', params.search_keyword, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
tdControllerFindAll.PATH = '/amims/td/td';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function tdControllerFindOne(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, tdControllerFindOne.PATH, 'get');
    if (params) {
        rb.path('id', params.id, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
tdControllerFindOne.PATH = '/amims/td/td/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function tdControllerRemove(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, tdControllerRemove.PATH, 'delete');
    if (params) {
        rb.path('id', params.id, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
tdControllerRemove.PATH = '/amims/td/td/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function tdControllerUpdate(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, tdControllerUpdate.PATH, 'put');
    if (params) {
        rb.path('id', params.id, {});
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
tdControllerUpdate.PATH = '/amims/td/td/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
class TdService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `tdControllerFindAll()` */
    static { this.TdControllerFindAllPath = '/amims/td/td'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `tdControllerFindAll()` instead.
     *
     * This method doesn't expect any request body.
     */
    tdControllerFindAll$Response(params, context) {
        return tdControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `tdControllerFindAll$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    tdControllerFindAll(params, context) {
        return this.tdControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `tdControllerCreate()` */
    static { this.TdControllerCreatePath = '/amims/td/td'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `tdControllerCreate()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    tdControllerCreate$Response(params, context) {
        return tdControllerCreate(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `tdControllerCreate$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    tdControllerCreate(params, context) {
        return this.tdControllerCreate$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `tdControllerFindOne()` */
    static { this.TdControllerFindOnePath = '/amims/td/td/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `tdControllerFindOne()` instead.
     *
     * This method doesn't expect any request body.
     */
    tdControllerFindOne$Response(params, context) {
        return tdControllerFindOne(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `tdControllerFindOne$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    tdControllerFindOne(params, context) {
        return this.tdControllerFindOne$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `tdControllerUpdate()` */
    static { this.TdControllerUpdatePath = '/amims/td/td/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `tdControllerUpdate()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    tdControllerUpdate$Response(params, context) {
        return tdControllerUpdate(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `tdControllerUpdate$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    tdControllerUpdate(params, context) {
        return this.tdControllerUpdate$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `tdControllerRemove()` */
    static { this.TdControllerRemovePath = '/amims/td/td/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `tdControllerRemove()` instead.
     *
     * This method doesn't expect any request body.
     */
    tdControllerRemove$Response(params, context) {
        return tdControllerRemove(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `tdControllerRemove$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    tdControllerRemove(params, context) {
        return this.tdControllerRemove$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: TdService, deps: [{ token: ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: TdService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: TdService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: ApiConfiguration }, { type: i2.HttpClient }] });

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function tdReportControllerFindAll(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, tdReportControllerFindAll.PATH, 'post');
    if (params) {
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
tdReportControllerFindAll.PATH = '/amims/td/td_report/list';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function tdReportControllerFindOne(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, tdReportControllerFindOne.PATH, 'get');
    if (params) {
        rb.path('id', params.id, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
tdReportControllerFindOne.PATH = '/amims/td/td_report/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
class TdReportService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `tdReportControllerFindAll()` */
    static { this.TdReportControllerFindAllPath = '/amims/td/td_report/list'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `tdReportControllerFindAll()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    tdReportControllerFindAll$Response(params, context) {
        return tdReportControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `tdReportControllerFindAll$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    tdReportControllerFindAll(params, context) {
        return this.tdReportControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `tdReportControllerFindOne()` */
    static { this.TdReportControllerFindOnePath = '/amims/td/td_report/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `tdReportControllerFindOne()` instead.
     *
     * This method doesn't expect any request body.
     */
    tdReportControllerFindOne$Response(params, context) {
        return tdReportControllerFindOne(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `tdReportControllerFindOne$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    tdReportControllerFindOne(params, context) {
        return this.tdReportControllerFindOne$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: TdReportService, deps: [{ token: ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: TdReportService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: TdReportService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: ApiConfiguration }, { type: i2.HttpClient }] });

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function tdWidgetControllerFindAll(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, tdWidgetControllerFindAll.PATH, 'post');
    if (params) {
        rb.query('filter', params.filter, {});
        rb.query('joinWhere', params.joinWhere, {});
        rb.query('select', params.select, {});
        rb.query('groupBy', params.groupBy, {});
        rb.query('sortKey', params.sortKey, {});
        rb.query('sortValue', params.sortValue, {});
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
tdWidgetControllerFindAll.PATH = '/amims/td/td_widget';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
class TdWidgetService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `tdWidgetControllerFindAll()` */
    static { this.TdWidgetControllerFindAllPath = '/amims/td/td_widget'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `tdWidgetControllerFindAll()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    tdWidgetControllerFindAll$Response(params, context) {
        return tdWidgetControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `tdWidgetControllerFindAll$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    tdWidgetControllerFindAll(params, context) {
        return this.tdWidgetControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: TdWidgetService, deps: [{ token: ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: TdWidgetService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: TdWidgetService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: ApiConfiguration }, { type: i2.HttpClient }] });

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function tdDetailControllerCreate(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, tdDetailControllerCreate.PATH, 'post');
    if (params) {
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
tdDetailControllerCreate.PATH = '/amims/td_detail/td_detail';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function tdDetailControllerFindAll(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, tdDetailControllerFindAll.PATH, 'get');
    if (params) {
        rb.query('pageIndex', params.pageIndex, {});
        rb.query('pageSize', params.pageSize, {});
        rb.query('filter', params.filter, {});
        rb.query('sortKey', params.sortKey, {});
        rb.query('sortValue', params.sortValue, {});
        rb.query('search_field', params.search_field, {});
        rb.query('search_keyword', params.search_keyword, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
tdDetailControllerFindAll.PATH = '/amims/td_detail/td_detail';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function tdDetailControllerFindOne(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, tdDetailControllerFindOne.PATH, 'get');
    if (params) {
        rb.path('id', params.id, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
tdDetailControllerFindOne.PATH = '/amims/td_detail/td_detail/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function tdDetailControllerRemove(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, tdDetailControllerRemove.PATH, 'delete');
    if (params) {
        rb.path('id', params.id, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
tdDetailControllerRemove.PATH = '/amims/td_detail/td_detail/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function tdDetailControllerUpdate(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, tdDetailControllerUpdate.PATH, 'put');
    if (params) {
        rb.path('id', params.id, {});
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
tdDetailControllerUpdate.PATH = '/amims/td_detail/td_detail/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
class TdDetailService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `tdDetailControllerFindAll()` */
    static { this.TdDetailControllerFindAllPath = '/amims/td_detail/td_detail'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `tdDetailControllerFindAll()` instead.
     *
     * This method doesn't expect any request body.
     */
    tdDetailControllerFindAll$Response(params, context) {
        return tdDetailControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `tdDetailControllerFindAll$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    tdDetailControllerFindAll(params, context) {
        return this.tdDetailControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `tdDetailControllerCreate()` */
    static { this.TdDetailControllerCreatePath = '/amims/td_detail/td_detail'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `tdDetailControllerCreate()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    tdDetailControllerCreate$Response(params, context) {
        return tdDetailControllerCreate(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `tdDetailControllerCreate$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    tdDetailControllerCreate(params, context) {
        return this.tdDetailControllerCreate$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `tdDetailControllerFindOne()` */
    static { this.TdDetailControllerFindOnePath = '/amims/td_detail/td_detail/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `tdDetailControllerFindOne()` instead.
     *
     * This method doesn't expect any request body.
     */
    tdDetailControllerFindOne$Response(params, context) {
        return tdDetailControllerFindOne(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `tdDetailControllerFindOne$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    tdDetailControllerFindOne(params, context) {
        return this.tdDetailControllerFindOne$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `tdDetailControllerUpdate()` */
    static { this.TdDetailControllerUpdatePath = '/amims/td_detail/td_detail/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `tdDetailControllerUpdate()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    tdDetailControllerUpdate$Response(params, context) {
        return tdDetailControllerUpdate(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `tdDetailControllerUpdate$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    tdDetailControllerUpdate(params, context) {
        return this.tdDetailControllerUpdate$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `tdDetailControllerRemove()` */
    static { this.TdDetailControllerRemovePath = '/amims/td_detail/td_detail/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `tdDetailControllerRemove()` instead.
     *
     * This method doesn't expect any request body.
     */
    tdDetailControllerRemove$Response(params, context) {
        return tdDetailControllerRemove(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `tdDetailControllerRemove$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    tdDetailControllerRemove(params, context) {
        return this.tdDetailControllerRemove$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: TdDetailService, deps: [{ token: ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: TdDetailService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: TdDetailService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: ApiConfiguration }, { type: i2.HttpClient }] });

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function tdDetailReportControllerFindAll(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, tdDetailReportControllerFindAll.PATH, 'post');
    if (params) {
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
tdDetailReportControllerFindAll.PATH = '/amims/td_detail/td_detail_report/list';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function tdDetailReportControllerFindOne(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, tdDetailReportControllerFindOne.PATH, 'get');
    if (params) {
        rb.path('id', params.id, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
tdDetailReportControllerFindOne.PATH = '/amims/td_detail/td_detail_report/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
class TdDetailReportService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `tdDetailReportControllerFindAll()` */
    static { this.TdDetailReportControllerFindAllPath = '/amims/td_detail/td_detail_report/list'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `tdDetailReportControllerFindAll()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    tdDetailReportControllerFindAll$Response(params, context) {
        return tdDetailReportControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `tdDetailReportControllerFindAll$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    tdDetailReportControllerFindAll(params, context) {
        return this.tdDetailReportControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `tdDetailReportControllerFindOne()` */
    static { this.TdDetailReportControllerFindOnePath = '/amims/td_detail/td_detail_report/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `tdDetailReportControllerFindOne()` instead.
     *
     * This method doesn't expect any request body.
     */
    tdDetailReportControllerFindOne$Response(params, context) {
        return tdDetailReportControllerFindOne(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `tdDetailReportControllerFindOne$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    tdDetailReportControllerFindOne(params, context) {
        return this.tdDetailReportControllerFindOne$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: TdDetailReportService, deps: [{ token: ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: TdDetailReportService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: TdDetailReportService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: ApiConfiguration }, { type: i2.HttpClient }] });

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function tdDetailWidgetControllerFindAll(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, tdDetailWidgetControllerFindAll.PATH, 'post');
    if (params) {
        rb.query('filter', params.filter, {});
        rb.query('joinWhere', params.joinWhere, {});
        rb.query('select', params.select, {});
        rb.query('groupBy', params.groupBy, {});
        rb.query('sortKey', params.sortKey, {});
        rb.query('sortValue', params.sortValue, {});
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
tdDetailWidgetControllerFindAll.PATH = '/amims/td_detail/td_detail_widget';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
class TdDetailWidgetService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `tdDetailWidgetControllerFindAll()` */
    static { this.TdDetailWidgetControllerFindAllPath = '/amims/td_detail/td_detail_widget'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `tdDetailWidgetControllerFindAll()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    tdDetailWidgetControllerFindAll$Response(params, context) {
        return tdDetailWidgetControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `tdDetailWidgetControllerFindAll$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    tdDetailWidgetControllerFindAll(params, context) {
        return this.tdDetailWidgetControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: TdDetailWidgetService, deps: [{ token: ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: TdDetailWidgetService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: TdDetailWidgetService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: ApiConfiguration }, { type: i2.HttpClient }] });

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function tdDetailAcControllerCreate(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, tdDetailAcControllerCreate.PATH, 'post');
    if (params) {
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
tdDetailAcControllerCreate.PATH = '/amims/td_detail_ac/td_detail_ac';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function tdDetailAcControllerFindAll(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, tdDetailAcControllerFindAll.PATH, 'get');
    if (params) {
        rb.query('pageIndex', params.pageIndex, {});
        rb.query('pageSize', params.pageSize, {});
        rb.query('filter', params.filter, {});
        rb.query('sortKey', params.sortKey, {});
        rb.query('sortValue', params.sortValue, {});
        rb.query('search_field', params.search_field, {});
        rb.query('search_keyword', params.search_keyword, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
tdDetailAcControllerFindAll.PATH = '/amims/td_detail_ac/td_detail_ac';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function tdDetailAcControllerFindOne(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, tdDetailAcControllerFindOne.PATH, 'get');
    if (params) {
        rb.path('id', params.id, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
tdDetailAcControllerFindOne.PATH = '/amims/td_detail_ac/td_detail_ac/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function tdDetailAcControllerRemove(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, tdDetailAcControllerRemove.PATH, 'delete');
    if (params) {
        rb.path('id', params.id, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
tdDetailAcControllerRemove.PATH = '/amims/td_detail_ac/td_detail_ac/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function tdDetailAcControllerUpdate(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, tdDetailAcControllerUpdate.PATH, 'put');
    if (params) {
        rb.path('id', params.id, {});
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
tdDetailAcControllerUpdate.PATH = '/amims/td_detail_ac/td_detail_ac/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
class TdDetailAcService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `tdDetailAcControllerFindAll()` */
    static { this.TdDetailAcControllerFindAllPath = '/amims/td_detail_ac/td_detail_ac'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `tdDetailAcControllerFindAll()` instead.
     *
     * This method doesn't expect any request body.
     */
    tdDetailAcControllerFindAll$Response(params, context) {
        return tdDetailAcControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `tdDetailAcControllerFindAll$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    tdDetailAcControllerFindAll(params, context) {
        return this.tdDetailAcControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `tdDetailAcControllerCreate()` */
    static { this.TdDetailAcControllerCreatePath = '/amims/td_detail_ac/td_detail_ac'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `tdDetailAcControllerCreate()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    tdDetailAcControllerCreate$Response(params, context) {
        return tdDetailAcControllerCreate(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `tdDetailAcControllerCreate$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    tdDetailAcControllerCreate(params, context) {
        return this.tdDetailAcControllerCreate$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `tdDetailAcControllerFindOne()` */
    static { this.TdDetailAcControllerFindOnePath = '/amims/td_detail_ac/td_detail_ac/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `tdDetailAcControllerFindOne()` instead.
     *
     * This method doesn't expect any request body.
     */
    tdDetailAcControllerFindOne$Response(params, context) {
        return tdDetailAcControllerFindOne(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `tdDetailAcControllerFindOne$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    tdDetailAcControllerFindOne(params, context) {
        return this.tdDetailAcControllerFindOne$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `tdDetailAcControllerUpdate()` */
    static { this.TdDetailAcControllerUpdatePath = '/amims/td_detail_ac/td_detail_ac/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `tdDetailAcControllerUpdate()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    tdDetailAcControllerUpdate$Response(params, context) {
        return tdDetailAcControllerUpdate(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `tdDetailAcControllerUpdate$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    tdDetailAcControllerUpdate(params, context) {
        return this.tdDetailAcControllerUpdate$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `tdDetailAcControllerRemove()` */
    static { this.TdDetailAcControllerRemovePath = '/amims/td_detail_ac/td_detail_ac/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `tdDetailAcControllerRemove()` instead.
     *
     * This method doesn't expect any request body.
     */
    tdDetailAcControllerRemove$Response(params, context) {
        return tdDetailAcControllerRemove(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `tdDetailAcControllerRemove$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    tdDetailAcControllerRemove(params, context) {
        return this.tdDetailAcControllerRemove$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: TdDetailAcService, deps: [{ token: ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: TdDetailAcService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: TdDetailAcService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: ApiConfiguration }, { type: i2.HttpClient }] });

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function tdDetailAcReportControllerFindAll(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, tdDetailAcReportControllerFindAll.PATH, 'post');
    if (params) {
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
tdDetailAcReportControllerFindAll.PATH = '/amims/td_detail_ac/td_detail_ac_report/list';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function tdDetailAcReportControllerFindOne(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, tdDetailAcReportControllerFindOne.PATH, 'get');
    if (params) {
        rb.path('id', params.id, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
tdDetailAcReportControllerFindOne.PATH = '/amims/td_detail_ac/td_detail_ac_report/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
class TdDetailAcReportService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `tdDetailAcReportControllerFindAll()` */
    static { this.TdDetailAcReportControllerFindAllPath = '/amims/td_detail_ac/td_detail_ac_report/list'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `tdDetailAcReportControllerFindAll()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    tdDetailAcReportControllerFindAll$Response(params, context) {
        return tdDetailAcReportControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `tdDetailAcReportControllerFindAll$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    tdDetailAcReportControllerFindAll(params, context) {
        return this.tdDetailAcReportControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `tdDetailAcReportControllerFindOne()` */
    static { this.TdDetailAcReportControllerFindOnePath = '/amims/td_detail_ac/td_detail_ac_report/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `tdDetailAcReportControllerFindOne()` instead.
     *
     * This method doesn't expect any request body.
     */
    tdDetailAcReportControllerFindOne$Response(params, context) {
        return tdDetailAcReportControllerFindOne(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `tdDetailAcReportControllerFindOne$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    tdDetailAcReportControllerFindOne(params, context) {
        return this.tdDetailAcReportControllerFindOne$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: TdDetailAcReportService, deps: [{ token: ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: TdDetailAcReportService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: TdDetailAcReportService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: ApiConfiguration }, { type: i2.HttpClient }] });

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function tdDetailAcWidgetControllerFindAll(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, tdDetailAcWidgetControllerFindAll.PATH, 'post');
    if (params) {
        rb.query('filter', params.filter, {});
        rb.query('joinWhere', params.joinWhere, {});
        rb.query('select', params.select, {});
        rb.query('groupBy', params.groupBy, {});
        rb.query('sortKey', params.sortKey, {});
        rb.query('sortValue', params.sortValue, {});
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
tdDetailAcWidgetControllerFindAll.PATH = '/amims/td_detail_ac/td_detail_ac_widget';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
class TdDetailAcWidgetService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `tdDetailAcWidgetControllerFindAll()` */
    static { this.TdDetailAcWidgetControllerFindAllPath = '/amims/td_detail_ac/td_detail_ac_widget'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `tdDetailAcWidgetControllerFindAll()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    tdDetailAcWidgetControllerFindAll$Response(params, context) {
        return tdDetailAcWidgetControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `tdDetailAcWidgetControllerFindAll$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    tdDetailAcWidgetControllerFindAll(params, context) {
        return this.tdDetailAcWidgetControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: TdDetailAcWidgetService, deps: [{ token: ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: TdDetailAcWidgetService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: TdDetailAcWidgetService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: ApiConfiguration }, { type: i2.HttpClient }] });

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function tdRefControllerCreate(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, tdRefControllerCreate.PATH, 'post');
    if (params) {
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
tdRefControllerCreate.PATH = '/amims/td_ref/td_ref';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function tdRefControllerFindAll(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, tdRefControllerFindAll.PATH, 'get');
    if (params) {
        rb.query('pageIndex', params.pageIndex, {});
        rb.query('pageSize', params.pageSize, {});
        rb.query('filter', params.filter, {});
        rb.query('sortKey', params.sortKey, {});
        rb.query('sortValue', params.sortValue, {});
        rb.query('search_field', params.search_field, {});
        rb.query('search_keyword', params.search_keyword, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
tdRefControllerFindAll.PATH = '/amims/td_ref/td_ref';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function tdRefControllerFindOne(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, tdRefControllerFindOne.PATH, 'get');
    if (params) {
        rb.path('id', params.id, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
tdRefControllerFindOne.PATH = '/amims/td_ref/td_ref/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function tdRefControllerRemove(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, tdRefControllerRemove.PATH, 'delete');
    if (params) {
        rb.path('id', params.id, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
tdRefControllerRemove.PATH = '/amims/td_ref/td_ref/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function tdRefControllerUpdate(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, tdRefControllerUpdate.PATH, 'put');
    if (params) {
        rb.path('id', params.id, {});
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
tdRefControllerUpdate.PATH = '/amims/td_ref/td_ref/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
class TdRefService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `tdRefControllerFindAll()` */
    static { this.TdRefControllerFindAllPath = '/amims/td_ref/td_ref'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `tdRefControllerFindAll()` instead.
     *
     * This method doesn't expect any request body.
     */
    tdRefControllerFindAll$Response(params, context) {
        return tdRefControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `tdRefControllerFindAll$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    tdRefControllerFindAll(params, context) {
        return this.tdRefControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `tdRefControllerCreate()` */
    static { this.TdRefControllerCreatePath = '/amims/td_ref/td_ref'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `tdRefControllerCreate()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    tdRefControllerCreate$Response(params, context) {
        return tdRefControllerCreate(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `tdRefControllerCreate$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    tdRefControllerCreate(params, context) {
        return this.tdRefControllerCreate$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `tdRefControllerFindOne()` */
    static { this.TdRefControllerFindOnePath = '/amims/td_ref/td_ref/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `tdRefControllerFindOne()` instead.
     *
     * This method doesn't expect any request body.
     */
    tdRefControllerFindOne$Response(params, context) {
        return tdRefControllerFindOne(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `tdRefControllerFindOne$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    tdRefControllerFindOne(params, context) {
        return this.tdRefControllerFindOne$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `tdRefControllerUpdate()` */
    static { this.TdRefControllerUpdatePath = '/amims/td_ref/td_ref/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `tdRefControllerUpdate()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    tdRefControllerUpdate$Response(params, context) {
        return tdRefControllerUpdate(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `tdRefControllerUpdate$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    tdRefControllerUpdate(params, context) {
        return this.tdRefControllerUpdate$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `tdRefControllerRemove()` */
    static { this.TdRefControllerRemovePath = '/amims/td_ref/td_ref/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `tdRefControllerRemove()` instead.
     *
     * This method doesn't expect any request body.
     */
    tdRefControllerRemove$Response(params, context) {
        return tdRefControllerRemove(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `tdRefControllerRemove$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    tdRefControllerRemove(params, context) {
        return this.tdRefControllerRemove$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: TdRefService, deps: [{ token: ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: TdRefService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: TdRefService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: ApiConfiguration }, { type: i2.HttpClient }] });

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function tdRefReportControllerFindAll(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, tdRefReportControllerFindAll.PATH, 'post');
    if (params) {
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
tdRefReportControllerFindAll.PATH = '/amims/td_ref/td_ref_report/list';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function tdRefReportControllerFindOne(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, tdRefReportControllerFindOne.PATH, 'get');
    if (params) {
        rb.path('id', params.id, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
tdRefReportControllerFindOne.PATH = '/amims/td_ref/td_ref_report/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
class TdRefReportService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `tdRefReportControllerFindAll()` */
    static { this.TdRefReportControllerFindAllPath = '/amims/td_ref/td_ref_report/list'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `tdRefReportControllerFindAll()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    tdRefReportControllerFindAll$Response(params, context) {
        return tdRefReportControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `tdRefReportControllerFindAll$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    tdRefReportControllerFindAll(params, context) {
        return this.tdRefReportControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `tdRefReportControllerFindOne()` */
    static { this.TdRefReportControllerFindOnePath = '/amims/td_ref/td_ref_report/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `tdRefReportControllerFindOne()` instead.
     *
     * This method doesn't expect any request body.
     */
    tdRefReportControllerFindOne$Response(params, context) {
        return tdRefReportControllerFindOne(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `tdRefReportControllerFindOne$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    tdRefReportControllerFindOne(params, context) {
        return this.tdRefReportControllerFindOne$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: TdRefReportService, deps: [{ token: ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: TdRefReportService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: TdRefReportService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: ApiConfiguration }, { type: i2.HttpClient }] });

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function tdRefWidgetControllerFindAll(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, tdRefWidgetControllerFindAll.PATH, 'post');
    if (params) {
        rb.query('filter', params.filter, {});
        rb.query('joinWhere', params.joinWhere, {});
        rb.query('select', params.select, {});
        rb.query('groupBy', params.groupBy, {});
        rb.query('sortKey', params.sortKey, {});
        rb.query('sortValue', params.sortValue, {});
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
tdRefWidgetControllerFindAll.PATH = '/amims/td_ref/td_ref_widget';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
class TdRefWidgetService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `tdRefWidgetControllerFindAll()` */
    static { this.TdRefWidgetControllerFindAllPath = '/amims/td_ref/td_ref_widget'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `tdRefWidgetControllerFindAll()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    tdRefWidgetControllerFindAll$Response(params, context) {
        return tdRefWidgetControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `tdRefWidgetControllerFindAll$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    tdRefWidgetControllerFindAll(params, context) {
        return this.tdRefWidgetControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: TdRefWidgetService, deps: [{ token: ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: TdRefWidgetService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: TdRefWidgetService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: ApiConfiguration }, { type: i2.HttpClient }] });

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function tdTypeControllerCreate(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, tdTypeControllerCreate.PATH, 'post');
    if (params) {
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
tdTypeControllerCreate.PATH = '/amims/td_type/td_type';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function tdTypeControllerFindAll(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, tdTypeControllerFindAll.PATH, 'get');
    if (params) {
        rb.query('pageIndex', params.pageIndex, {});
        rb.query('pageSize', params.pageSize, {});
        rb.query('filter', params.filter, {});
        rb.query('sortKey', params.sortKey, {});
        rb.query('sortValue', params.sortValue, {});
        rb.query('search_field', params.search_field, {});
        rb.query('search_keyword', params.search_keyword, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
tdTypeControllerFindAll.PATH = '/amims/td_type/td_type';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function tdTypeControllerFindOne(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, tdTypeControllerFindOne.PATH, 'get');
    if (params) {
        rb.path('id', params.id, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
tdTypeControllerFindOne.PATH = '/amims/td_type/td_type/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function tdTypeControllerRemove(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, tdTypeControllerRemove.PATH, 'delete');
    if (params) {
        rb.path('id', params.id, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
tdTypeControllerRemove.PATH = '/amims/td_type/td_type/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function tdTypeControllerUpdate(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, tdTypeControllerUpdate.PATH, 'put');
    if (params) {
        rb.path('id', params.id, {});
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
tdTypeControllerUpdate.PATH = '/amims/td_type/td_type/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
class TdTypeService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `tdTypeControllerFindAll()` */
    static { this.TdTypeControllerFindAllPath = '/amims/td_type/td_type'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `tdTypeControllerFindAll()` instead.
     *
     * This method doesn't expect any request body.
     */
    tdTypeControllerFindAll$Response(params, context) {
        return tdTypeControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `tdTypeControllerFindAll$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    tdTypeControllerFindAll(params, context) {
        return this.tdTypeControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `tdTypeControllerCreate()` */
    static { this.TdTypeControllerCreatePath = '/amims/td_type/td_type'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `tdTypeControllerCreate()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    tdTypeControllerCreate$Response(params, context) {
        return tdTypeControllerCreate(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `tdTypeControllerCreate$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    tdTypeControllerCreate(params, context) {
        return this.tdTypeControllerCreate$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `tdTypeControllerFindOne()` */
    static { this.TdTypeControllerFindOnePath = '/amims/td_type/td_type/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `tdTypeControllerFindOne()` instead.
     *
     * This method doesn't expect any request body.
     */
    tdTypeControllerFindOne$Response(params, context) {
        return tdTypeControllerFindOne(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `tdTypeControllerFindOne$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    tdTypeControllerFindOne(params, context) {
        return this.tdTypeControllerFindOne$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `tdTypeControllerUpdate()` */
    static { this.TdTypeControllerUpdatePath = '/amims/td_type/td_type/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `tdTypeControllerUpdate()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    tdTypeControllerUpdate$Response(params, context) {
        return tdTypeControllerUpdate(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `tdTypeControllerUpdate$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    tdTypeControllerUpdate(params, context) {
        return this.tdTypeControllerUpdate$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `tdTypeControllerRemove()` */
    static { this.TdTypeControllerRemovePath = '/amims/td_type/td_type/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `tdTypeControllerRemove()` instead.
     *
     * This method doesn't expect any request body.
     */
    tdTypeControllerRemove$Response(params, context) {
        return tdTypeControllerRemove(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `tdTypeControllerRemove$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    tdTypeControllerRemove(params, context) {
        return this.tdTypeControllerRemove$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: TdTypeService, deps: [{ token: ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: TdTypeService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: TdTypeService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: ApiConfiguration }, { type: i2.HttpClient }] });

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function tdTypeReportControllerFindAll(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, tdTypeReportControllerFindAll.PATH, 'post');
    if (params) {
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
tdTypeReportControllerFindAll.PATH = '/amims/td_type/td_type_report/list';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function tdTypeReportControllerFindOne(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, tdTypeReportControllerFindOne.PATH, 'get');
    if (params) {
        rb.path('id', params.id, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
tdTypeReportControllerFindOne.PATH = '/amims/td_type/td_type_report/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
class TdTypeReportService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `tdTypeReportControllerFindAll()` */
    static { this.TdTypeReportControllerFindAllPath = '/amims/td_type/td_type_report/list'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `tdTypeReportControllerFindAll()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    tdTypeReportControllerFindAll$Response(params, context) {
        return tdTypeReportControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `tdTypeReportControllerFindAll$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    tdTypeReportControllerFindAll(params, context) {
        return this.tdTypeReportControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `tdTypeReportControllerFindOne()` */
    static { this.TdTypeReportControllerFindOnePath = '/amims/td_type/td_type_report/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `tdTypeReportControllerFindOne()` instead.
     *
     * This method doesn't expect any request body.
     */
    tdTypeReportControllerFindOne$Response(params, context) {
        return tdTypeReportControllerFindOne(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `tdTypeReportControllerFindOne$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    tdTypeReportControllerFindOne(params, context) {
        return this.tdTypeReportControllerFindOne$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: TdTypeReportService, deps: [{ token: ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: TdTypeReportService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: TdTypeReportService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: ApiConfiguration }, { type: i2.HttpClient }] });

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function tdTypeWidgetControllerFindAll(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, tdTypeWidgetControllerFindAll.PATH, 'post');
    if (params) {
        rb.query('filter', params.filter, {});
        rb.query('joinWhere', params.joinWhere, {});
        rb.query('select', params.select, {});
        rb.query('groupBy', params.groupBy, {});
        rb.query('sortKey', params.sortKey, {});
        rb.query('sortValue', params.sortValue, {});
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
tdTypeWidgetControllerFindAll.PATH = '/amims/td_type/td_type_widget';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
class TdTypeWidgetService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `tdTypeWidgetControllerFindAll()` */
    static { this.TdTypeWidgetControllerFindAllPath = '/amims/td_type/td_type_widget'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `tdTypeWidgetControllerFindAll()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    tdTypeWidgetControllerFindAll$Response(params, context) {
        return tdTypeWidgetControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `tdTypeWidgetControllerFindAll$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    tdTypeWidgetControllerFindAll(params, context) {
        return this.tdTypeWidgetControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: TdTypeWidgetService, deps: [{ token: ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: TdTypeWidgetService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: TdTypeWidgetService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: ApiConfiguration }, { type: i2.HttpClient }] });

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function techDefectControllerCreate(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, techDefectControllerCreate.PATH, 'post');
    if (params) {
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
techDefectControllerCreate.PATH = '/amims/tech_defect/tech_defect';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function techDefectControllerFindAll(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, techDefectControllerFindAll.PATH, 'get');
    if (params) {
        rb.query('pageIndex', params.pageIndex, {});
        rb.query('pageSize', params.pageSize, {});
        rb.query('filter', params.filter, {});
        rb.query('sortKey', params.sortKey, {});
        rb.query('sortValue', params.sortValue, {});
        rb.query('search_field', params.search_field, {});
        rb.query('search_keyword', params.search_keyword, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
techDefectControllerFindAll.PATH = '/amims/tech_defect/tech_defect';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function techDefectControllerFindOne(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, techDefectControllerFindOne.PATH, 'get');
    if (params) {
        rb.path('id', params.id, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
techDefectControllerFindOne.PATH = '/amims/tech_defect/tech_defect/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function techDefectControllerRemove(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, techDefectControllerRemove.PATH, 'delete');
    if (params) {
        rb.path('id', params.id, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
techDefectControllerRemove.PATH = '/amims/tech_defect/tech_defect/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function techDefectControllerUpdate(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, techDefectControllerUpdate.PATH, 'put');
    if (params) {
        rb.path('id', params.id, {});
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
techDefectControllerUpdate.PATH = '/amims/tech_defect/tech_defect/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
class TechDefectService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `techDefectControllerFindAll()` */
    static { this.TechDefectControllerFindAllPath = '/amims/tech_defect/tech_defect'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `techDefectControllerFindAll()` instead.
     *
     * This method doesn't expect any request body.
     */
    techDefectControllerFindAll$Response(params, context) {
        return techDefectControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `techDefectControllerFindAll$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    techDefectControllerFindAll(params, context) {
        return this.techDefectControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `techDefectControllerCreate()` */
    static { this.TechDefectControllerCreatePath = '/amims/tech_defect/tech_defect'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `techDefectControllerCreate()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    techDefectControllerCreate$Response(params, context) {
        return techDefectControllerCreate(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `techDefectControllerCreate$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    techDefectControllerCreate(params, context) {
        return this.techDefectControllerCreate$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `techDefectControllerFindOne()` */
    static { this.TechDefectControllerFindOnePath = '/amims/tech_defect/tech_defect/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `techDefectControllerFindOne()` instead.
     *
     * This method doesn't expect any request body.
     */
    techDefectControllerFindOne$Response(params, context) {
        return techDefectControllerFindOne(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `techDefectControllerFindOne$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    techDefectControllerFindOne(params, context) {
        return this.techDefectControllerFindOne$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `techDefectControllerUpdate()` */
    static { this.TechDefectControllerUpdatePath = '/amims/tech_defect/tech_defect/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `techDefectControllerUpdate()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    techDefectControllerUpdate$Response(params, context) {
        return techDefectControllerUpdate(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `techDefectControllerUpdate$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    techDefectControllerUpdate(params, context) {
        return this.techDefectControllerUpdate$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `techDefectControllerRemove()` */
    static { this.TechDefectControllerRemovePath = '/amims/tech_defect/tech_defect/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `techDefectControllerRemove()` instead.
     *
     * This method doesn't expect any request body.
     */
    techDefectControllerRemove$Response(params, context) {
        return techDefectControllerRemove(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `techDefectControllerRemove$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    techDefectControllerRemove(params, context) {
        return this.techDefectControllerRemove$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: TechDefectService, deps: [{ token: ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: TechDefectService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: TechDefectService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: ApiConfiguration }, { type: i2.HttpClient }] });

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function techDefectReportControllerFindAll(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, techDefectReportControllerFindAll.PATH, 'post');
    if (params) {
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
techDefectReportControllerFindAll.PATH = '/amims/tech_defect/tech_defect_report/list';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function techDefectReportControllerFindOne(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, techDefectReportControllerFindOne.PATH, 'get');
    if (params) {
        rb.path('id', params.id, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
techDefectReportControllerFindOne.PATH = '/amims/tech_defect/tech_defect_report/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
class TechDefectReportService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `techDefectReportControllerFindAll()` */
    static { this.TechDefectReportControllerFindAllPath = '/amims/tech_defect/tech_defect_report/list'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `techDefectReportControllerFindAll()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    techDefectReportControllerFindAll$Response(params, context) {
        return techDefectReportControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `techDefectReportControllerFindAll$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    techDefectReportControllerFindAll(params, context) {
        return this.techDefectReportControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `techDefectReportControllerFindOne()` */
    static { this.TechDefectReportControllerFindOnePath = '/amims/tech_defect/tech_defect_report/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `techDefectReportControllerFindOne()` instead.
     *
     * This method doesn't expect any request body.
     */
    techDefectReportControllerFindOne$Response(params, context) {
        return techDefectReportControllerFindOne(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `techDefectReportControllerFindOne$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    techDefectReportControllerFindOne(params, context) {
        return this.techDefectReportControllerFindOne$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: TechDefectReportService, deps: [{ token: ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: TechDefectReportService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: TechDefectReportService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: ApiConfiguration }, { type: i2.HttpClient }] });

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function techDefectWidgetControllerFindAll(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, techDefectWidgetControllerFindAll.PATH, 'post');
    if (params) {
        rb.query('filter', params.filter, {});
        rb.query('joinWhere', params.joinWhere, {});
        rb.query('select', params.select, {});
        rb.query('groupBy', params.groupBy, {});
        rb.query('sortKey', params.sortKey, {});
        rb.query('sortValue', params.sortValue, {});
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
techDefectWidgetControllerFindAll.PATH = '/amims/tech_defect/tech_defect_widget';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
class TechDefectWidgetService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `techDefectWidgetControllerFindAll()` */
    static { this.TechDefectWidgetControllerFindAllPath = '/amims/tech_defect/tech_defect_widget'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `techDefectWidgetControllerFindAll()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    techDefectWidgetControllerFindAll$Response(params, context) {
        return techDefectWidgetControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `techDefectWidgetControllerFindAll$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    techDefectWidgetControllerFindAll(params, context) {
        return this.techDefectWidgetControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: TechDefectWidgetService, deps: [{ token: ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: TechDefectWidgetService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: TechDefectWidgetService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: ApiConfiguration }, { type: i2.HttpClient }] });

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function techDiscrepanciesControllerCreate(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, techDiscrepanciesControllerCreate.PATH, 'post');
    if (params) {
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
techDiscrepanciesControllerCreate.PATH = '/amims/tech_discrepancies/tech_discrepancies';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function techDiscrepanciesControllerFindAll(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, techDiscrepanciesControllerFindAll.PATH, 'get');
    if (params) {
        rb.query('pageIndex', params.pageIndex, {});
        rb.query('pageSize', params.pageSize, {});
        rb.query('filter', params.filter, {});
        rb.query('sortKey', params.sortKey, {});
        rb.query('sortValue', params.sortValue, {});
        rb.query('search_field', params.search_field, {});
        rb.query('search_keyword', params.search_keyword, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
techDiscrepanciesControllerFindAll.PATH = '/amims/tech_discrepancies/tech_discrepancies';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function techDiscrepanciesControllerFindOne(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, techDiscrepanciesControllerFindOne.PATH, 'get');
    if (params) {
        rb.path('id', params.id, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
techDiscrepanciesControllerFindOne.PATH = '/amims/tech_discrepancies/tech_discrepancies/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function techDiscrepanciesControllerRemove(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, techDiscrepanciesControllerRemove.PATH, 'delete');
    if (params) {
        rb.path('id', params.id, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
techDiscrepanciesControllerRemove.PATH = '/amims/tech_discrepancies/tech_discrepancies/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function techDiscrepanciesControllerUpdate(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, techDiscrepanciesControllerUpdate.PATH, 'put');
    if (params) {
        rb.path('id', params.id, {});
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
techDiscrepanciesControllerUpdate.PATH = '/amims/tech_discrepancies/tech_discrepancies/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
class TechDiscrepanciesService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `techDiscrepanciesControllerFindAll()` */
    static { this.TechDiscrepanciesControllerFindAllPath = '/amims/tech_discrepancies/tech_discrepancies'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `techDiscrepanciesControllerFindAll()` instead.
     *
     * This method doesn't expect any request body.
     */
    techDiscrepanciesControllerFindAll$Response(params, context) {
        return techDiscrepanciesControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `techDiscrepanciesControllerFindAll$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    techDiscrepanciesControllerFindAll(params, context) {
        return this.techDiscrepanciesControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `techDiscrepanciesControllerCreate()` */
    static { this.TechDiscrepanciesControllerCreatePath = '/amims/tech_discrepancies/tech_discrepancies'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `techDiscrepanciesControllerCreate()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    techDiscrepanciesControllerCreate$Response(params, context) {
        return techDiscrepanciesControllerCreate(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `techDiscrepanciesControllerCreate$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    techDiscrepanciesControllerCreate(params, context) {
        return this.techDiscrepanciesControllerCreate$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `techDiscrepanciesControllerFindOne()` */
    static { this.TechDiscrepanciesControllerFindOnePath = '/amims/tech_discrepancies/tech_discrepancies/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `techDiscrepanciesControllerFindOne()` instead.
     *
     * This method doesn't expect any request body.
     */
    techDiscrepanciesControllerFindOne$Response(params, context) {
        return techDiscrepanciesControllerFindOne(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `techDiscrepanciesControllerFindOne$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    techDiscrepanciesControllerFindOne(params, context) {
        return this.techDiscrepanciesControllerFindOne$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `techDiscrepanciesControllerUpdate()` */
    static { this.TechDiscrepanciesControllerUpdatePath = '/amims/tech_discrepancies/tech_discrepancies/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `techDiscrepanciesControllerUpdate()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    techDiscrepanciesControllerUpdate$Response(params, context) {
        return techDiscrepanciesControllerUpdate(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `techDiscrepanciesControllerUpdate$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    techDiscrepanciesControllerUpdate(params, context) {
        return this.techDiscrepanciesControllerUpdate$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `techDiscrepanciesControllerRemove()` */
    static { this.TechDiscrepanciesControllerRemovePath = '/amims/tech_discrepancies/tech_discrepancies/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `techDiscrepanciesControllerRemove()` instead.
     *
     * This method doesn't expect any request body.
     */
    techDiscrepanciesControllerRemove$Response(params, context) {
        return techDiscrepanciesControllerRemove(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `techDiscrepanciesControllerRemove$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    techDiscrepanciesControllerRemove(params, context) {
        return this.techDiscrepanciesControllerRemove$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: TechDiscrepanciesService, deps: [{ token: ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: TechDiscrepanciesService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: TechDiscrepanciesService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: ApiConfiguration }, { type: i2.HttpClient }] });

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function techDiscrepanciesReportControllerFindAll(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, techDiscrepanciesReportControllerFindAll.PATH, 'post');
    if (params) {
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
techDiscrepanciesReportControllerFindAll.PATH = '/amims/tech_discrepancies/tech_discrepancies_report/list';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function techDiscrepanciesReportControllerFindOne(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, techDiscrepanciesReportControllerFindOne.PATH, 'get');
    if (params) {
        rb.path('id', params.id, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
techDiscrepanciesReportControllerFindOne.PATH = '/amims/tech_discrepancies/tech_discrepancies_report/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
class TechDiscrepanciesReportService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `techDiscrepanciesReportControllerFindAll()` */
    static { this.TechDiscrepanciesReportControllerFindAllPath = '/amims/tech_discrepancies/tech_discrepancies_report/list'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `techDiscrepanciesReportControllerFindAll()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    techDiscrepanciesReportControllerFindAll$Response(params, context) {
        return techDiscrepanciesReportControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `techDiscrepanciesReportControllerFindAll$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    techDiscrepanciesReportControllerFindAll(params, context) {
        return this.techDiscrepanciesReportControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `techDiscrepanciesReportControllerFindOne()` */
    static { this.TechDiscrepanciesReportControllerFindOnePath = '/amims/tech_discrepancies/tech_discrepancies_report/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `techDiscrepanciesReportControllerFindOne()` instead.
     *
     * This method doesn't expect any request body.
     */
    techDiscrepanciesReportControllerFindOne$Response(params, context) {
        return techDiscrepanciesReportControllerFindOne(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `techDiscrepanciesReportControllerFindOne$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    techDiscrepanciesReportControllerFindOne(params, context) {
        return this.techDiscrepanciesReportControllerFindOne$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: TechDiscrepanciesReportService, deps: [{ token: ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: TechDiscrepanciesReportService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: TechDiscrepanciesReportService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: ApiConfiguration }, { type: i2.HttpClient }] });

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function techDiscrepanciesWidgetControllerFindAll(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, techDiscrepanciesWidgetControllerFindAll.PATH, 'post');
    if (params) {
        rb.query('filter', params.filter, {});
        rb.query('joinWhere', params.joinWhere, {});
        rb.query('select', params.select, {});
        rb.query('groupBy', params.groupBy, {});
        rb.query('sortKey', params.sortKey, {});
        rb.query('sortValue', params.sortValue, {});
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
techDiscrepanciesWidgetControllerFindAll.PATH = '/amims/tech_discrepancies/tech_discrepancies_widget';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
class TechDiscrepanciesWidgetService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `techDiscrepanciesWidgetControllerFindAll()` */
    static { this.TechDiscrepanciesWidgetControllerFindAllPath = '/amims/tech_discrepancies/tech_discrepancies_widget'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `techDiscrepanciesWidgetControllerFindAll()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    techDiscrepanciesWidgetControllerFindAll$Response(params, context) {
        return techDiscrepanciesWidgetControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `techDiscrepanciesWidgetControllerFindAll$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    techDiscrepanciesWidgetControllerFindAll(params, context) {
        return this.techDiscrepanciesWidgetControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: TechDiscrepanciesWidgetService, deps: [{ token: ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: TechDiscrepanciesWidgetService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: TechDiscrepanciesWidgetService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: ApiConfiguration }, { type: i2.HttpClient }] });

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function techLogControllerCreate(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, techLogControllerCreate.PATH, 'post');
    if (params) {
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
techLogControllerCreate.PATH = '/amims/tech_log/tech_log';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function techLogControllerFindAll(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, techLogControllerFindAll.PATH, 'get');
    if (params) {
        rb.query('pageIndex', params.pageIndex, {});
        rb.query('pageSize', params.pageSize, {});
        rb.query('filter', params.filter, {});
        rb.query('sortKey', params.sortKey, {});
        rb.query('sortValue', params.sortValue, {});
        rb.query('search_field', params.search_field, {});
        rb.query('search_keyword', params.search_keyword, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
techLogControllerFindAll.PATH = '/amims/tech_log/tech_log';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function techLogControllerFindOne(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, techLogControllerFindOne.PATH, 'get');
    if (params) {
        rb.path('id', params.id, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
techLogControllerFindOne.PATH = '/amims/tech_log/tech_log/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function techLogControllerRemove(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, techLogControllerRemove.PATH, 'delete');
    if (params) {
        rb.path('id', params.id, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
techLogControllerRemove.PATH = '/amims/tech_log/tech_log/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function techLogControllerUpdate(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, techLogControllerUpdate.PATH, 'put');
    if (params) {
        rb.path('id', params.id, {});
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
techLogControllerUpdate.PATH = '/amims/tech_log/tech_log/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
class TechLogService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `techLogControllerFindAll()` */
    static { this.TechLogControllerFindAllPath = '/amims/tech_log/tech_log'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `techLogControllerFindAll()` instead.
     *
     * This method doesn't expect any request body.
     */
    techLogControllerFindAll$Response(params, context) {
        return techLogControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `techLogControllerFindAll$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    techLogControllerFindAll(params, context) {
        return this.techLogControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `techLogControllerCreate()` */
    static { this.TechLogControllerCreatePath = '/amims/tech_log/tech_log'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `techLogControllerCreate()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    techLogControllerCreate$Response(params, context) {
        return techLogControllerCreate(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `techLogControllerCreate$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    techLogControllerCreate(params, context) {
        return this.techLogControllerCreate$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `techLogControllerFindOne()` */
    static { this.TechLogControllerFindOnePath = '/amims/tech_log/tech_log/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `techLogControllerFindOne()` instead.
     *
     * This method doesn't expect any request body.
     */
    techLogControllerFindOne$Response(params, context) {
        return techLogControllerFindOne(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `techLogControllerFindOne$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    techLogControllerFindOne(params, context) {
        return this.techLogControllerFindOne$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `techLogControllerUpdate()` */
    static { this.TechLogControllerUpdatePath = '/amims/tech_log/tech_log/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `techLogControllerUpdate()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    techLogControllerUpdate$Response(params, context) {
        return techLogControllerUpdate(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `techLogControllerUpdate$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    techLogControllerUpdate(params, context) {
        return this.techLogControllerUpdate$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `techLogControllerRemove()` */
    static { this.TechLogControllerRemovePath = '/amims/tech_log/tech_log/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `techLogControllerRemove()` instead.
     *
     * This method doesn't expect any request body.
     */
    techLogControllerRemove$Response(params, context) {
        return techLogControllerRemove(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `techLogControllerRemove$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    techLogControllerRemove(params, context) {
        return this.techLogControllerRemove$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: TechLogService, deps: [{ token: ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: TechLogService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: TechLogService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: ApiConfiguration }, { type: i2.HttpClient }] });

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function techLogReportControllerFindAll(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, techLogReportControllerFindAll.PATH, 'post');
    if (params) {
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
techLogReportControllerFindAll.PATH = '/amims/tech_log/tech_log_report/list';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function techLogReportControllerFindOne(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, techLogReportControllerFindOne.PATH, 'get');
    if (params) {
        rb.path('id', params.id, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
techLogReportControllerFindOne.PATH = '/amims/tech_log/tech_log_report/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
class TechLogReportService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `techLogReportControllerFindAll()` */
    static { this.TechLogReportControllerFindAllPath = '/amims/tech_log/tech_log_report/list'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `techLogReportControllerFindAll()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    techLogReportControllerFindAll$Response(params, context) {
        return techLogReportControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `techLogReportControllerFindAll$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    techLogReportControllerFindAll(params, context) {
        return this.techLogReportControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `techLogReportControllerFindOne()` */
    static { this.TechLogReportControllerFindOnePath = '/amims/tech_log/tech_log_report/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `techLogReportControllerFindOne()` instead.
     *
     * This method doesn't expect any request body.
     */
    techLogReportControllerFindOne$Response(params, context) {
        return techLogReportControllerFindOne(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `techLogReportControllerFindOne$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    techLogReportControllerFindOne(params, context) {
        return this.techLogReportControllerFindOne$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: TechLogReportService, deps: [{ token: ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: TechLogReportService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: TechLogReportService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: ApiConfiguration }, { type: i2.HttpClient }] });

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function techLogWidgetControllerFindAll(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, techLogWidgetControllerFindAll.PATH, 'post');
    if (params) {
        rb.query('filter', params.filter, {});
        rb.query('joinWhere', params.joinWhere, {});
        rb.query('select', params.select, {});
        rb.query('groupBy', params.groupBy, {});
        rb.query('sortKey', params.sortKey, {});
        rb.query('sortValue', params.sortValue, {});
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
techLogWidgetControllerFindAll.PATH = '/amims/tech_log/tech_log_widget';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
class TechLogWidgetService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `techLogWidgetControllerFindAll()` */
    static { this.TechLogWidgetControllerFindAllPath = '/amims/tech_log/tech_log_widget'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `techLogWidgetControllerFindAll()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    techLogWidgetControllerFindAll$Response(params, context) {
        return techLogWidgetControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `techLogWidgetControllerFindAll$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    techLogWidgetControllerFindAll(params, context) {
        return this.techLogWidgetControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: TechLogWidgetService, deps: [{ token: ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: TechLogWidgetService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: TechLogWidgetService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: ApiConfiguration }, { type: i2.HttpClient }] });

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function techLogEngineControllerCreate(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, techLogEngineControllerCreate.PATH, 'post');
    if (params) {
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
techLogEngineControllerCreate.PATH = '/amims/tech_log_engine/tech_log_engine';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function techLogEngineControllerFindAll(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, techLogEngineControllerFindAll.PATH, 'get');
    if (params) {
        rb.query('pageIndex', params.pageIndex, {});
        rb.query('pageSize', params.pageSize, {});
        rb.query('filter', params.filter, {});
        rb.query('sortKey', params.sortKey, {});
        rb.query('sortValue', params.sortValue, {});
        rb.query('search_field', params.search_field, {});
        rb.query('search_keyword', params.search_keyword, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
techLogEngineControllerFindAll.PATH = '/amims/tech_log_engine/tech_log_engine';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function techLogEngineControllerFindOne(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, techLogEngineControllerFindOne.PATH, 'get');
    if (params) {
        rb.path('id', params.id, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
techLogEngineControllerFindOne.PATH = '/amims/tech_log_engine/tech_log_engine/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function techLogEngineControllerRemove(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, techLogEngineControllerRemove.PATH, 'delete');
    if (params) {
        rb.path('id', params.id, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
techLogEngineControllerRemove.PATH = '/amims/tech_log_engine/tech_log_engine/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function techLogEngineControllerUpdate(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, techLogEngineControllerUpdate.PATH, 'put');
    if (params) {
        rb.path('id', params.id, {});
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
techLogEngineControllerUpdate.PATH = '/amims/tech_log_engine/tech_log_engine/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
class TechLogEngineService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `techLogEngineControllerFindAll()` */
    static { this.TechLogEngineControllerFindAllPath = '/amims/tech_log_engine/tech_log_engine'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `techLogEngineControllerFindAll()` instead.
     *
     * This method doesn't expect any request body.
     */
    techLogEngineControllerFindAll$Response(params, context) {
        return techLogEngineControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `techLogEngineControllerFindAll$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    techLogEngineControllerFindAll(params, context) {
        return this.techLogEngineControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `techLogEngineControllerCreate()` */
    static { this.TechLogEngineControllerCreatePath = '/amims/tech_log_engine/tech_log_engine'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `techLogEngineControllerCreate()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    techLogEngineControllerCreate$Response(params, context) {
        return techLogEngineControllerCreate(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `techLogEngineControllerCreate$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    techLogEngineControllerCreate(params, context) {
        return this.techLogEngineControllerCreate$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `techLogEngineControllerFindOne()` */
    static { this.TechLogEngineControllerFindOnePath = '/amims/tech_log_engine/tech_log_engine/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `techLogEngineControllerFindOne()` instead.
     *
     * This method doesn't expect any request body.
     */
    techLogEngineControllerFindOne$Response(params, context) {
        return techLogEngineControllerFindOne(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `techLogEngineControllerFindOne$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    techLogEngineControllerFindOne(params, context) {
        return this.techLogEngineControllerFindOne$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `techLogEngineControllerUpdate()` */
    static { this.TechLogEngineControllerUpdatePath = '/amims/tech_log_engine/tech_log_engine/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `techLogEngineControllerUpdate()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    techLogEngineControllerUpdate$Response(params, context) {
        return techLogEngineControllerUpdate(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `techLogEngineControllerUpdate$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    techLogEngineControllerUpdate(params, context) {
        return this.techLogEngineControllerUpdate$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `techLogEngineControllerRemove()` */
    static { this.TechLogEngineControllerRemovePath = '/amims/tech_log_engine/tech_log_engine/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `techLogEngineControllerRemove()` instead.
     *
     * This method doesn't expect any request body.
     */
    techLogEngineControllerRemove$Response(params, context) {
        return techLogEngineControllerRemove(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `techLogEngineControllerRemove$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    techLogEngineControllerRemove(params, context) {
        return this.techLogEngineControllerRemove$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: TechLogEngineService, deps: [{ token: ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: TechLogEngineService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: TechLogEngineService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: ApiConfiguration }, { type: i2.HttpClient }] });

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function techLogEngineReportControllerFindAll(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, techLogEngineReportControllerFindAll.PATH, 'post');
    if (params) {
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
techLogEngineReportControllerFindAll.PATH = '/amims/tech_log_engine/tech_log_engine_report/list';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function techLogEngineReportControllerFindOne(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, techLogEngineReportControllerFindOne.PATH, 'get');
    if (params) {
        rb.path('id', params.id, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
techLogEngineReportControllerFindOne.PATH = '/amims/tech_log_engine/tech_log_engine_report/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
class TechLogEngineReportService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `techLogEngineReportControllerFindAll()` */
    static { this.TechLogEngineReportControllerFindAllPath = '/amims/tech_log_engine/tech_log_engine_report/list'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `techLogEngineReportControllerFindAll()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    techLogEngineReportControllerFindAll$Response(params, context) {
        return techLogEngineReportControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `techLogEngineReportControllerFindAll$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    techLogEngineReportControllerFindAll(params, context) {
        return this.techLogEngineReportControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `techLogEngineReportControllerFindOne()` */
    static { this.TechLogEngineReportControllerFindOnePath = '/amims/tech_log_engine/tech_log_engine_report/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `techLogEngineReportControllerFindOne()` instead.
     *
     * This method doesn't expect any request body.
     */
    techLogEngineReportControllerFindOne$Response(params, context) {
        return techLogEngineReportControllerFindOne(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `techLogEngineReportControllerFindOne$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    techLogEngineReportControllerFindOne(params, context) {
        return this.techLogEngineReportControllerFindOne$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: TechLogEngineReportService, deps: [{ token: ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: TechLogEngineReportService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: TechLogEngineReportService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: ApiConfiguration }, { type: i2.HttpClient }] });

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function techLogEngineWidgetControllerFindAll(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, techLogEngineWidgetControllerFindAll.PATH, 'post');
    if (params) {
        rb.query('filter', params.filter, {});
        rb.query('joinWhere', params.joinWhere, {});
        rb.query('select', params.select, {});
        rb.query('groupBy', params.groupBy, {});
        rb.query('sortKey', params.sortKey, {});
        rb.query('sortValue', params.sortValue, {});
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
techLogEngineWidgetControllerFindAll.PATH = '/amims/tech_log_engine/tech_log_engine_widget';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
class TechLogEngineWidgetService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `techLogEngineWidgetControllerFindAll()` */
    static { this.TechLogEngineWidgetControllerFindAllPath = '/amims/tech_log_engine/tech_log_engine_widget'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `techLogEngineWidgetControllerFindAll()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    techLogEngineWidgetControllerFindAll$Response(params, context) {
        return techLogEngineWidgetControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `techLogEngineWidgetControllerFindAll$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    techLogEngineWidgetControllerFindAll(params, context) {
        return this.techLogEngineWidgetControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: TechLogEngineWidgetService, deps: [{ token: ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: TechLogEngineWidgetService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: TechLogEngineWidgetService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: ApiConfiguration }, { type: i2.HttpClient }] });

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function techLogEngineCheckControllerCreate(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, techLogEngineCheckControllerCreate.PATH, 'post');
    if (params) {
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
techLogEngineCheckControllerCreate.PATH = '/amims/tech_log_engine_check/tech_log_engine_check';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function techLogEngineCheckControllerFindAll(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, techLogEngineCheckControllerFindAll.PATH, 'get');
    if (params) {
        rb.query('pageIndex', params.pageIndex, {});
        rb.query('pageSize', params.pageSize, {});
        rb.query('filter', params.filter, {});
        rb.query('sortKey', params.sortKey, {});
        rb.query('sortValue', params.sortValue, {});
        rb.query('search_field', params.search_field, {});
        rb.query('search_keyword', params.search_keyword, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
techLogEngineCheckControllerFindAll.PATH = '/amims/tech_log_engine_check/tech_log_engine_check';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function techLogEngineCheckControllerFindOne(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, techLogEngineCheckControllerFindOne.PATH, 'get');
    if (params) {
        rb.path('id', params.id, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
techLogEngineCheckControllerFindOne.PATH = '/amims/tech_log_engine_check/tech_log_engine_check/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function techLogEngineCheckControllerRemove(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, techLogEngineCheckControllerRemove.PATH, 'delete');
    if (params) {
        rb.path('id', params.id, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
techLogEngineCheckControllerRemove.PATH = '/amims/tech_log_engine_check/tech_log_engine_check/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function techLogEngineCheckControllerUpdate(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, techLogEngineCheckControllerUpdate.PATH, 'put');
    if (params) {
        rb.path('id', params.id, {});
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
techLogEngineCheckControllerUpdate.PATH = '/amims/tech_log_engine_check/tech_log_engine_check/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
class TechLogEngineCheckService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `techLogEngineCheckControllerFindAll()` */
    static { this.TechLogEngineCheckControllerFindAllPath = '/amims/tech_log_engine_check/tech_log_engine_check'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `techLogEngineCheckControllerFindAll()` instead.
     *
     * This method doesn't expect any request body.
     */
    techLogEngineCheckControllerFindAll$Response(params, context) {
        return techLogEngineCheckControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `techLogEngineCheckControllerFindAll$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    techLogEngineCheckControllerFindAll(params, context) {
        return this.techLogEngineCheckControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `techLogEngineCheckControllerCreate()` */
    static { this.TechLogEngineCheckControllerCreatePath = '/amims/tech_log_engine_check/tech_log_engine_check'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `techLogEngineCheckControllerCreate()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    techLogEngineCheckControllerCreate$Response(params, context) {
        return techLogEngineCheckControllerCreate(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `techLogEngineCheckControllerCreate$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    techLogEngineCheckControllerCreate(params, context) {
        return this.techLogEngineCheckControllerCreate$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `techLogEngineCheckControllerFindOne()` */
    static { this.TechLogEngineCheckControllerFindOnePath = '/amims/tech_log_engine_check/tech_log_engine_check/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `techLogEngineCheckControllerFindOne()` instead.
     *
     * This method doesn't expect any request body.
     */
    techLogEngineCheckControllerFindOne$Response(params, context) {
        return techLogEngineCheckControllerFindOne(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `techLogEngineCheckControllerFindOne$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    techLogEngineCheckControllerFindOne(params, context) {
        return this.techLogEngineCheckControllerFindOne$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `techLogEngineCheckControllerUpdate()` */
    static { this.TechLogEngineCheckControllerUpdatePath = '/amims/tech_log_engine_check/tech_log_engine_check/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `techLogEngineCheckControllerUpdate()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    techLogEngineCheckControllerUpdate$Response(params, context) {
        return techLogEngineCheckControllerUpdate(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `techLogEngineCheckControllerUpdate$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    techLogEngineCheckControllerUpdate(params, context) {
        return this.techLogEngineCheckControllerUpdate$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `techLogEngineCheckControllerRemove()` */
    static { this.TechLogEngineCheckControllerRemovePath = '/amims/tech_log_engine_check/tech_log_engine_check/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `techLogEngineCheckControllerRemove()` instead.
     *
     * This method doesn't expect any request body.
     */
    techLogEngineCheckControllerRemove$Response(params, context) {
        return techLogEngineCheckControllerRemove(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `techLogEngineCheckControllerRemove$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    techLogEngineCheckControllerRemove(params, context) {
        return this.techLogEngineCheckControllerRemove$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: TechLogEngineCheckService, deps: [{ token: ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: TechLogEngineCheckService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: TechLogEngineCheckService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: ApiConfiguration }, { type: i2.HttpClient }] });

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function techLogEngineCheckReportControllerFindAll(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, techLogEngineCheckReportControllerFindAll.PATH, 'post');
    if (params) {
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
techLogEngineCheckReportControllerFindAll.PATH = '/amims/tech_log_engine_check/tech_log_engine_check_report/list';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function techLogEngineCheckReportControllerFindOne(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, techLogEngineCheckReportControllerFindOne.PATH, 'get');
    if (params) {
        rb.path('id', params.id, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
techLogEngineCheckReportControllerFindOne.PATH = '/amims/tech_log_engine_check/tech_log_engine_check_report/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
class TechLogEngineCheckReportService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `techLogEngineCheckReportControllerFindAll()` */
    static { this.TechLogEngineCheckReportControllerFindAllPath = '/amims/tech_log_engine_check/tech_log_engine_check_report/list'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `techLogEngineCheckReportControllerFindAll()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    techLogEngineCheckReportControllerFindAll$Response(params, context) {
        return techLogEngineCheckReportControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `techLogEngineCheckReportControllerFindAll$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    techLogEngineCheckReportControllerFindAll(params, context) {
        return this.techLogEngineCheckReportControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `techLogEngineCheckReportControllerFindOne()` */
    static { this.TechLogEngineCheckReportControllerFindOnePath = '/amims/tech_log_engine_check/tech_log_engine_check_report/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `techLogEngineCheckReportControllerFindOne()` instead.
     *
     * This method doesn't expect any request body.
     */
    techLogEngineCheckReportControllerFindOne$Response(params, context) {
        return techLogEngineCheckReportControllerFindOne(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `techLogEngineCheckReportControllerFindOne$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    techLogEngineCheckReportControllerFindOne(params, context) {
        return this.techLogEngineCheckReportControllerFindOne$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: TechLogEngineCheckReportService, deps: [{ token: ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: TechLogEngineCheckReportService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: TechLogEngineCheckReportService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: ApiConfiguration }, { type: i2.HttpClient }] });

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function techLogEngineCheckWidgetControllerFindAll(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, techLogEngineCheckWidgetControllerFindAll.PATH, 'post');
    if (params) {
        rb.query('filter', params.filter, {});
        rb.query('joinWhere', params.joinWhere, {});
        rb.query('select', params.select, {});
        rb.query('groupBy', params.groupBy, {});
        rb.query('sortKey', params.sortKey, {});
        rb.query('sortValue', params.sortValue, {});
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
techLogEngineCheckWidgetControllerFindAll.PATH = '/amims/tech_log_engine_check/tech_log_engine_check_widget';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
class TechLogEngineCheckWidgetService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `techLogEngineCheckWidgetControllerFindAll()` */
    static { this.TechLogEngineCheckWidgetControllerFindAllPath = '/amims/tech_log_engine_check/tech_log_engine_check_widget'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `techLogEngineCheckWidgetControllerFindAll()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    techLogEngineCheckWidgetControllerFindAll$Response(params, context) {
        return techLogEngineCheckWidgetControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `techLogEngineCheckWidgetControllerFindAll$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    techLogEngineCheckWidgetControllerFindAll(params, context) {
        return this.techLogEngineCheckWidgetControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: TechLogEngineCheckWidgetService, deps: [{ token: ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: TechLogEngineCheckWidgetService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: TechLogEngineCheckWidgetService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: ApiConfiguration }, { type: i2.HttpClient }] });

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function techLogItemControllerCreate(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, techLogItemControllerCreate.PATH, 'post');
    if (params) {
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
techLogItemControllerCreate.PATH = '/amims/tech_log_item/tech_log_item';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function techLogItemControllerFindAll(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, techLogItemControllerFindAll.PATH, 'get');
    if (params) {
        rb.query('pageIndex', params.pageIndex, {});
        rb.query('pageSize', params.pageSize, {});
        rb.query('filter', params.filter, {});
        rb.query('sortKey', params.sortKey, {});
        rb.query('sortValue', params.sortValue, {});
        rb.query('search_field', params.search_field, {});
        rb.query('search_keyword', params.search_keyword, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
techLogItemControllerFindAll.PATH = '/amims/tech_log_item/tech_log_item';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function techLogItemControllerFindOne(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, techLogItemControllerFindOne.PATH, 'get');
    if (params) {
        rb.path('id', params.id, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
techLogItemControllerFindOne.PATH = '/amims/tech_log_item/tech_log_item/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function techLogItemControllerRemove(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, techLogItemControllerRemove.PATH, 'delete');
    if (params) {
        rb.path('id', params.id, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
techLogItemControllerRemove.PATH = '/amims/tech_log_item/tech_log_item/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function techLogItemControllerUpdate(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, techLogItemControllerUpdate.PATH, 'put');
    if (params) {
        rb.path('id', params.id, {});
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
techLogItemControllerUpdate.PATH = '/amims/tech_log_item/tech_log_item/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
class TechLogItemService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `techLogItemControllerFindAll()` */
    static { this.TechLogItemControllerFindAllPath = '/amims/tech_log_item/tech_log_item'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `techLogItemControllerFindAll()` instead.
     *
     * This method doesn't expect any request body.
     */
    techLogItemControllerFindAll$Response(params, context) {
        return techLogItemControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `techLogItemControllerFindAll$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    techLogItemControllerFindAll(params, context) {
        return this.techLogItemControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `techLogItemControllerCreate()` */
    static { this.TechLogItemControllerCreatePath = '/amims/tech_log_item/tech_log_item'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `techLogItemControllerCreate()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    techLogItemControllerCreate$Response(params, context) {
        return techLogItemControllerCreate(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `techLogItemControllerCreate$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    techLogItemControllerCreate(params, context) {
        return this.techLogItemControllerCreate$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `techLogItemControllerFindOne()` */
    static { this.TechLogItemControllerFindOnePath = '/amims/tech_log_item/tech_log_item/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `techLogItemControllerFindOne()` instead.
     *
     * This method doesn't expect any request body.
     */
    techLogItemControllerFindOne$Response(params, context) {
        return techLogItemControllerFindOne(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `techLogItemControllerFindOne$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    techLogItemControllerFindOne(params, context) {
        return this.techLogItemControllerFindOne$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `techLogItemControllerUpdate()` */
    static { this.TechLogItemControllerUpdatePath = '/amims/tech_log_item/tech_log_item/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `techLogItemControllerUpdate()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    techLogItemControllerUpdate$Response(params, context) {
        return techLogItemControllerUpdate(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `techLogItemControllerUpdate$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    techLogItemControllerUpdate(params, context) {
        return this.techLogItemControllerUpdate$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `techLogItemControllerRemove()` */
    static { this.TechLogItemControllerRemovePath = '/amims/tech_log_item/tech_log_item/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `techLogItemControllerRemove()` instead.
     *
     * This method doesn't expect any request body.
     */
    techLogItemControllerRemove$Response(params, context) {
        return techLogItemControllerRemove(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `techLogItemControllerRemove$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    techLogItemControllerRemove(params, context) {
        return this.techLogItemControllerRemove$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: TechLogItemService, deps: [{ token: ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: TechLogItemService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: TechLogItemService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: ApiConfiguration }, { type: i2.HttpClient }] });

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function techLogItemReportControllerFindAll(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, techLogItemReportControllerFindAll.PATH, 'post');
    if (params) {
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
techLogItemReportControllerFindAll.PATH = '/amims/tech_log_item/tech_log_item_report/list';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function techLogItemReportControllerFindOne(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, techLogItemReportControllerFindOne.PATH, 'get');
    if (params) {
        rb.path('id', params.id, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
techLogItemReportControllerFindOne.PATH = '/amims/tech_log_item/tech_log_item_report/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
class TechLogItemReportService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `techLogItemReportControllerFindAll()` */
    static { this.TechLogItemReportControllerFindAllPath = '/amims/tech_log_item/tech_log_item_report/list'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `techLogItemReportControllerFindAll()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    techLogItemReportControllerFindAll$Response(params, context) {
        return techLogItemReportControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `techLogItemReportControllerFindAll$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    techLogItemReportControllerFindAll(params, context) {
        return this.techLogItemReportControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `techLogItemReportControllerFindOne()` */
    static { this.TechLogItemReportControllerFindOnePath = '/amims/tech_log_item/tech_log_item_report/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `techLogItemReportControllerFindOne()` instead.
     *
     * This method doesn't expect any request body.
     */
    techLogItemReportControllerFindOne$Response(params, context) {
        return techLogItemReportControllerFindOne(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `techLogItemReportControllerFindOne$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    techLogItemReportControllerFindOne(params, context) {
        return this.techLogItemReportControllerFindOne$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: TechLogItemReportService, deps: [{ token: ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: TechLogItemReportService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: TechLogItemReportService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: ApiConfiguration }, { type: i2.HttpClient }] });

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function techLogItemWidgetControllerFindAll(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, techLogItemWidgetControllerFindAll.PATH, 'post');
    if (params) {
        rb.query('filter', params.filter, {});
        rb.query('joinWhere', params.joinWhere, {});
        rb.query('select', params.select, {});
        rb.query('groupBy', params.groupBy, {});
        rb.query('sortKey', params.sortKey, {});
        rb.query('sortValue', params.sortValue, {});
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
techLogItemWidgetControllerFindAll.PATH = '/amims/tech_log_item/tech_log_item_widget';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
class TechLogItemWidgetService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `techLogItemWidgetControllerFindAll()` */
    static { this.TechLogItemWidgetControllerFindAllPath = '/amims/tech_log_item/tech_log_item_widget'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `techLogItemWidgetControllerFindAll()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    techLogItemWidgetControllerFindAll$Response(params, context) {
        return techLogItemWidgetControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `techLogItemWidgetControllerFindAll$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    techLogItemWidgetControllerFindAll(params, context) {
        return this.techLogItemWidgetControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: TechLogItemWidgetService, deps: [{ token: ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: TechLogItemWidgetService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: TechLogItemWidgetService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: ApiConfiguration }, { type: i2.HttpClient }] });

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function techLogJoControllerCreate(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, techLogJoControllerCreate.PATH, 'post');
    if (params) {
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
techLogJoControllerCreate.PATH = '/amims/tech_log_jo/tech_log_jo';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function techLogJoControllerFindAll(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, techLogJoControllerFindAll.PATH, 'get');
    if (params) {
        rb.query('pageIndex', params.pageIndex, {});
        rb.query('pageSize', params.pageSize, {});
        rb.query('filter', params.filter, {});
        rb.query('sortKey', params.sortKey, {});
        rb.query('sortValue', params.sortValue, {});
        rb.query('search_field', params.search_field, {});
        rb.query('search_keyword', params.search_keyword, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
techLogJoControllerFindAll.PATH = '/amims/tech_log_jo/tech_log_jo';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function techLogJoControllerFindOne(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, techLogJoControllerFindOne.PATH, 'get');
    if (params) {
        rb.path('id', params.id, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
techLogJoControllerFindOne.PATH = '/amims/tech_log_jo/tech_log_jo/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function techLogJoControllerRemove(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, techLogJoControllerRemove.PATH, 'delete');
    if (params) {
        rb.path('id', params.id, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
techLogJoControllerRemove.PATH = '/amims/tech_log_jo/tech_log_jo/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function techLogJoControllerUpdate(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, techLogJoControllerUpdate.PATH, 'put');
    if (params) {
        rb.path('id', params.id, {});
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
techLogJoControllerUpdate.PATH = '/amims/tech_log_jo/tech_log_jo/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
class TechLogJoService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `techLogJoControllerFindAll()` */
    static { this.TechLogJoControllerFindAllPath = '/amims/tech_log_jo/tech_log_jo'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `techLogJoControllerFindAll()` instead.
     *
     * This method doesn't expect any request body.
     */
    techLogJoControllerFindAll$Response(params, context) {
        return techLogJoControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `techLogJoControllerFindAll$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    techLogJoControllerFindAll(params, context) {
        return this.techLogJoControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `techLogJoControllerCreate()` */
    static { this.TechLogJoControllerCreatePath = '/amims/tech_log_jo/tech_log_jo'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `techLogJoControllerCreate()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    techLogJoControllerCreate$Response(params, context) {
        return techLogJoControllerCreate(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `techLogJoControllerCreate$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    techLogJoControllerCreate(params, context) {
        return this.techLogJoControllerCreate$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `techLogJoControllerFindOne()` */
    static { this.TechLogJoControllerFindOnePath = '/amims/tech_log_jo/tech_log_jo/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `techLogJoControllerFindOne()` instead.
     *
     * This method doesn't expect any request body.
     */
    techLogJoControllerFindOne$Response(params, context) {
        return techLogJoControllerFindOne(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `techLogJoControllerFindOne$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    techLogJoControllerFindOne(params, context) {
        return this.techLogJoControllerFindOne$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `techLogJoControllerUpdate()` */
    static { this.TechLogJoControllerUpdatePath = '/amims/tech_log_jo/tech_log_jo/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `techLogJoControllerUpdate()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    techLogJoControllerUpdate$Response(params, context) {
        return techLogJoControllerUpdate(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `techLogJoControllerUpdate$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    techLogJoControllerUpdate(params, context) {
        return this.techLogJoControllerUpdate$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `techLogJoControllerRemove()` */
    static { this.TechLogJoControllerRemovePath = '/amims/tech_log_jo/tech_log_jo/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `techLogJoControllerRemove()` instead.
     *
     * This method doesn't expect any request body.
     */
    techLogJoControllerRemove$Response(params, context) {
        return techLogJoControllerRemove(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `techLogJoControllerRemove$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    techLogJoControllerRemove(params, context) {
        return this.techLogJoControllerRemove$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: TechLogJoService, deps: [{ token: ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: TechLogJoService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: TechLogJoService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: ApiConfiguration }, { type: i2.HttpClient }] });

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function techLogJoReportControllerFindAll(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, techLogJoReportControllerFindAll.PATH, 'post');
    if (params) {
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
techLogJoReportControllerFindAll.PATH = '/amims/tech_log_jo/tech_log_jo_report/list';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function techLogJoReportControllerFindOne(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, techLogJoReportControllerFindOne.PATH, 'get');
    if (params) {
        rb.path('id', params.id, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
techLogJoReportControllerFindOne.PATH = '/amims/tech_log_jo/tech_log_jo_report/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
class TechLogJoReportService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `techLogJoReportControllerFindAll()` */
    static { this.TechLogJoReportControllerFindAllPath = '/amims/tech_log_jo/tech_log_jo_report/list'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `techLogJoReportControllerFindAll()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    techLogJoReportControllerFindAll$Response(params, context) {
        return techLogJoReportControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `techLogJoReportControllerFindAll$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    techLogJoReportControllerFindAll(params, context) {
        return this.techLogJoReportControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `techLogJoReportControllerFindOne()` */
    static { this.TechLogJoReportControllerFindOnePath = '/amims/tech_log_jo/tech_log_jo_report/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `techLogJoReportControllerFindOne()` instead.
     *
     * This method doesn't expect any request body.
     */
    techLogJoReportControllerFindOne$Response(params, context) {
        return techLogJoReportControllerFindOne(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `techLogJoReportControllerFindOne$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    techLogJoReportControllerFindOne(params, context) {
        return this.techLogJoReportControllerFindOne$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: TechLogJoReportService, deps: [{ token: ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: TechLogJoReportService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: TechLogJoReportService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: ApiConfiguration }, { type: i2.HttpClient }] });

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function techLogJoWidgetControllerFindAll(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, techLogJoWidgetControllerFindAll.PATH, 'post');
    if (params) {
        rb.query('filter', params.filter, {});
        rb.query('joinWhere', params.joinWhere, {});
        rb.query('select', params.select, {});
        rb.query('groupBy', params.groupBy, {});
        rb.query('sortKey', params.sortKey, {});
        rb.query('sortValue', params.sortValue, {});
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
techLogJoWidgetControllerFindAll.PATH = '/amims/tech_log_jo/tech_log_jo_widget';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
class TechLogJoWidgetService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `techLogJoWidgetControllerFindAll()` */
    static { this.TechLogJoWidgetControllerFindAllPath = '/amims/tech_log_jo/tech_log_jo_widget'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `techLogJoWidgetControllerFindAll()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    techLogJoWidgetControllerFindAll$Response(params, context) {
        return techLogJoWidgetControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `techLogJoWidgetControllerFindAll$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    techLogJoWidgetControllerFindAll(params, context) {
        return this.techLogJoWidgetControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: TechLogJoWidgetService, deps: [{ token: ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: TechLogJoWidgetService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: TechLogJoWidgetService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: ApiConfiguration }, { type: i2.HttpClient }] });

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function typeOfworkControllerCreate(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, typeOfworkControllerCreate.PATH, 'post');
    if (params) {
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
typeOfworkControllerCreate.PATH = '/amims/type_ofwork/type_ofwork';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function typeOfworkControllerFindAll(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, typeOfworkControllerFindAll.PATH, 'get');
    if (params) {
        rb.query('pageIndex', params.pageIndex, {});
        rb.query('pageSize', params.pageSize, {});
        rb.query('filter', params.filter, {});
        rb.query('sortKey', params.sortKey, {});
        rb.query('sortValue', params.sortValue, {});
        rb.query('search_field', params.search_field, {});
        rb.query('search_keyword', params.search_keyword, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
typeOfworkControllerFindAll.PATH = '/amims/type_ofwork/type_ofwork';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function typeOfworkControllerFindOne(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, typeOfworkControllerFindOne.PATH, 'get');
    if (params) {
        rb.path('id', params.id, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
typeOfworkControllerFindOne.PATH = '/amims/type_ofwork/type_ofwork/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function typeOfworkControllerRemove(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, typeOfworkControllerRemove.PATH, 'delete');
    if (params) {
        rb.path('id', params.id, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
typeOfworkControllerRemove.PATH = '/amims/type_ofwork/type_ofwork/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function typeOfworkControllerUpdate(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, typeOfworkControllerUpdate.PATH, 'put');
    if (params) {
        rb.path('id', params.id, {});
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
typeOfworkControllerUpdate.PATH = '/amims/type_ofwork/type_ofwork/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
class TypeOfworkService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `typeOfworkControllerFindAll()` */
    static { this.TypeOfworkControllerFindAllPath = '/amims/type_ofwork/type_ofwork'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `typeOfworkControllerFindAll()` instead.
     *
     * This method doesn't expect any request body.
     */
    typeOfworkControllerFindAll$Response(params, context) {
        return typeOfworkControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `typeOfworkControllerFindAll$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    typeOfworkControllerFindAll(params, context) {
        return this.typeOfworkControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `typeOfworkControllerCreate()` */
    static { this.TypeOfworkControllerCreatePath = '/amims/type_ofwork/type_ofwork'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `typeOfworkControllerCreate()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    typeOfworkControllerCreate$Response(params, context) {
        return typeOfworkControllerCreate(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `typeOfworkControllerCreate$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    typeOfworkControllerCreate(params, context) {
        return this.typeOfworkControllerCreate$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `typeOfworkControllerFindOne()` */
    static { this.TypeOfworkControllerFindOnePath = '/amims/type_ofwork/type_ofwork/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `typeOfworkControllerFindOne()` instead.
     *
     * This method doesn't expect any request body.
     */
    typeOfworkControllerFindOne$Response(params, context) {
        return typeOfworkControllerFindOne(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `typeOfworkControllerFindOne$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    typeOfworkControllerFindOne(params, context) {
        return this.typeOfworkControllerFindOne$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `typeOfworkControllerUpdate()` */
    static { this.TypeOfworkControllerUpdatePath = '/amims/type_ofwork/type_ofwork/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `typeOfworkControllerUpdate()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    typeOfworkControllerUpdate$Response(params, context) {
        return typeOfworkControllerUpdate(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `typeOfworkControllerUpdate$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    typeOfworkControllerUpdate(params, context) {
        return this.typeOfworkControllerUpdate$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `typeOfworkControllerRemove()` */
    static { this.TypeOfworkControllerRemovePath = '/amims/type_ofwork/type_ofwork/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `typeOfworkControllerRemove()` instead.
     *
     * This method doesn't expect any request body.
     */
    typeOfworkControllerRemove$Response(params, context) {
        return typeOfworkControllerRemove(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `typeOfworkControllerRemove$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    typeOfworkControllerRemove(params, context) {
        return this.typeOfworkControllerRemove$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: TypeOfworkService, deps: [{ token: ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: TypeOfworkService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: TypeOfworkService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: ApiConfiguration }, { type: i2.HttpClient }] });

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function typeOfworkReportControllerFindAll(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, typeOfworkReportControllerFindAll.PATH, 'post');
    if (params) {
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
typeOfworkReportControllerFindAll.PATH = '/amims/type_ofwork/type_ofwork_report/list';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function typeOfworkReportControllerFindOne(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, typeOfworkReportControllerFindOne.PATH, 'get');
    if (params) {
        rb.path('id', params.id, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
typeOfworkReportControllerFindOne.PATH = '/amims/type_ofwork/type_ofwork_report/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
class TypeOfworkReportService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `typeOfworkReportControllerFindAll()` */
    static { this.TypeOfworkReportControllerFindAllPath = '/amims/type_ofwork/type_ofwork_report/list'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `typeOfworkReportControllerFindAll()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    typeOfworkReportControllerFindAll$Response(params, context) {
        return typeOfworkReportControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `typeOfworkReportControllerFindAll$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    typeOfworkReportControllerFindAll(params, context) {
        return this.typeOfworkReportControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `typeOfworkReportControllerFindOne()` */
    static { this.TypeOfworkReportControllerFindOnePath = '/amims/type_ofwork/type_ofwork_report/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `typeOfworkReportControllerFindOne()` instead.
     *
     * This method doesn't expect any request body.
     */
    typeOfworkReportControllerFindOne$Response(params, context) {
        return typeOfworkReportControllerFindOne(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `typeOfworkReportControllerFindOne$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    typeOfworkReportControllerFindOne(params, context) {
        return this.typeOfworkReportControllerFindOne$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: TypeOfworkReportService, deps: [{ token: ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: TypeOfworkReportService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: TypeOfworkReportService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: ApiConfiguration }, { type: i2.HttpClient }] });

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function typeOfworkWidgetControllerFindAll(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, typeOfworkWidgetControllerFindAll.PATH, 'post');
    if (params) {
        rb.query('filter', params.filter, {});
        rb.query('joinWhere', params.joinWhere, {});
        rb.query('select', params.select, {});
        rb.query('groupBy', params.groupBy, {});
        rb.query('sortKey', params.sortKey, {});
        rb.query('sortValue', params.sortValue, {});
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
typeOfworkWidgetControllerFindAll.PATH = '/amims/type_ofwork/type_ofwork_widget';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
class TypeOfworkWidgetService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `typeOfworkWidgetControllerFindAll()` */
    static { this.TypeOfworkWidgetControllerFindAllPath = '/amims/type_ofwork/type_ofwork_widget'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `typeOfworkWidgetControllerFindAll()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    typeOfworkWidgetControllerFindAll$Response(params, context) {
        return typeOfworkWidgetControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `typeOfworkWidgetControllerFindAll$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    typeOfworkWidgetControllerFindAll(params, context) {
        return this.typeOfworkWidgetControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: TypeOfworkWidgetService, deps: [{ token: ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: TypeOfworkWidgetService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: TypeOfworkWidgetService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: ApiConfiguration }, { type: i2.HttpClient }] });

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function warrantyControllerCreate(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, warrantyControllerCreate.PATH, 'post');
    if (params) {
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
warrantyControllerCreate.PATH = '/amims/warranty/warranty';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function warrantyControllerFindAll(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, warrantyControllerFindAll.PATH, 'get');
    if (params) {
        rb.query('pageIndex', params.pageIndex, {});
        rb.query('pageSize', params.pageSize, {});
        rb.query('filter', params.filter, {});
        rb.query('sortKey', params.sortKey, {});
        rb.query('sortValue', params.sortValue, {});
        rb.query('search_field', params.search_field, {});
        rb.query('search_keyword', params.search_keyword, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
warrantyControllerFindAll.PATH = '/amims/warranty/warranty';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function warrantyControllerFindOne(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, warrantyControllerFindOne.PATH, 'get');
    if (params) {
        rb.path('id', params.id, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
warrantyControllerFindOne.PATH = '/amims/warranty/warranty/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function warrantyControllerRemove(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, warrantyControllerRemove.PATH, 'delete');
    if (params) {
        rb.path('id', params.id, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
warrantyControllerRemove.PATH = '/amims/warranty/warranty/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function warrantyControllerUpdate(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, warrantyControllerUpdate.PATH, 'put');
    if (params) {
        rb.path('id', params.id, {});
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
warrantyControllerUpdate.PATH = '/amims/warranty/warranty/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
class WarrantyService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `warrantyControllerFindAll()` */
    static { this.WarrantyControllerFindAllPath = '/amims/warranty/warranty'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `warrantyControllerFindAll()` instead.
     *
     * This method doesn't expect any request body.
     */
    warrantyControllerFindAll$Response(params, context) {
        return warrantyControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `warrantyControllerFindAll$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    warrantyControllerFindAll(params, context) {
        return this.warrantyControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `warrantyControllerCreate()` */
    static { this.WarrantyControllerCreatePath = '/amims/warranty/warranty'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `warrantyControllerCreate()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    warrantyControllerCreate$Response(params, context) {
        return warrantyControllerCreate(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `warrantyControllerCreate$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    warrantyControllerCreate(params, context) {
        return this.warrantyControllerCreate$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `warrantyControllerFindOne()` */
    static { this.WarrantyControllerFindOnePath = '/amims/warranty/warranty/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `warrantyControllerFindOne()` instead.
     *
     * This method doesn't expect any request body.
     */
    warrantyControllerFindOne$Response(params, context) {
        return warrantyControllerFindOne(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `warrantyControllerFindOne$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    warrantyControllerFindOne(params, context) {
        return this.warrantyControllerFindOne$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `warrantyControllerUpdate()` */
    static { this.WarrantyControllerUpdatePath = '/amims/warranty/warranty/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `warrantyControllerUpdate()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    warrantyControllerUpdate$Response(params, context) {
        return warrantyControllerUpdate(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `warrantyControllerUpdate$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    warrantyControllerUpdate(params, context) {
        return this.warrantyControllerUpdate$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `warrantyControllerRemove()` */
    static { this.WarrantyControllerRemovePath = '/amims/warranty/warranty/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `warrantyControllerRemove()` instead.
     *
     * This method doesn't expect any request body.
     */
    warrantyControllerRemove$Response(params, context) {
        return warrantyControllerRemove(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `warrantyControllerRemove$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    warrantyControllerRemove(params, context) {
        return this.warrantyControllerRemove$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: WarrantyService, deps: [{ token: ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: WarrantyService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: WarrantyService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: ApiConfiguration }, { type: i2.HttpClient }] });

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function mpartControllerCreate(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, mpartControllerCreate.PATH, 'post');
    if (params) {
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
mpartControllerCreate.PATH = '/amims/mpart/mpart';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function mpartControllerFindAll(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, mpartControllerFindAll.PATH, 'get');
    if (params) {
        rb.query('pageIndex', params.pageIndex, {});
        rb.query('pageSize', params.pageSize, {});
        rb.query('filter', params.filter, {});
        rb.query('sortKey', params.sortKey, {});
        rb.query('sortValue', params.sortValue, {});
        rb.query('search_field', params.search_field, {});
        rb.query('search_keyword', params.search_keyword, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
mpartControllerFindAll.PATH = '/amims/mpart/mpart';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function mpartControllerFindOne(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, mpartControllerFindOne.PATH, 'get');
    if (params) {
        rb.path('id', params.id, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
mpartControllerFindOne.PATH = '/amims/mpart/mpart/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function mpartControllerRemove(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, mpartControllerRemove.PATH, 'delete');
    if (params) {
        rb.path('id', params.id, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
mpartControllerRemove.PATH = '/amims/mpart/mpart/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function mpartControllerUpdate(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, mpartControllerUpdate.PATH, 'put');
    if (params) {
        rb.path('id', params.id, {});
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
mpartControllerUpdate.PATH = '/amims/mpart/mpart/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
class MpartService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `mpartControllerFindAll()` */
    static { this.MpartControllerFindAllPath = '/amims/mpart/mpart'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `mpartControllerFindAll()` instead.
     *
     * This method doesn't expect any request body.
     */
    mpartControllerFindAll$Response(params, context) {
        return mpartControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `mpartControllerFindAll$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    mpartControllerFindAll(params, context) {
        return this.mpartControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `mpartControllerCreate()` */
    static { this.MpartControllerCreatePath = '/amims/mpart/mpart'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `mpartControllerCreate()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    mpartControllerCreate$Response(params, context) {
        return mpartControllerCreate(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `mpartControllerCreate$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    mpartControllerCreate(params, context) {
        return this.mpartControllerCreate$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `mpartControllerFindOne()` */
    static { this.MpartControllerFindOnePath = '/amims/mpart/mpart/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `mpartControllerFindOne()` instead.
     *
     * This method doesn't expect any request body.
     */
    mpartControllerFindOne$Response(params, context) {
        return mpartControllerFindOne(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `mpartControllerFindOne$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    mpartControllerFindOne(params, context) {
        return this.mpartControllerFindOne$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `mpartControllerUpdate()` */
    static { this.MpartControllerUpdatePath = '/amims/mpart/mpart/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `mpartControllerUpdate()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    mpartControllerUpdate$Response(params, context) {
        return mpartControllerUpdate(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `mpartControllerUpdate$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    mpartControllerUpdate(params, context) {
        return this.mpartControllerUpdate$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `mpartControllerRemove()` */
    static { this.MpartControllerRemovePath = '/amims/mpart/mpart/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `mpartControllerRemove()` instead.
     *
     * This method doesn't expect any request body.
     */
    mpartControllerRemove$Response(params, context) {
        return mpartControllerRemove(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `mpartControllerRemove$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    mpartControllerRemove(params, context) {
        return this.mpartControllerRemove$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: MpartService, deps: [{ token: ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: MpartService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: MpartService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: ApiConfiguration }, { type: i2.HttpClient }] });

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function mpartReportControllerFindAll(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, mpartReportControllerFindAll.PATH, 'post');
    if (params) {
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
mpartReportControllerFindAll.PATH = '/amims/mpart/mpart_report/list';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function mpartReportControllerFindOne(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, mpartReportControllerFindOne.PATH, 'get');
    if (params) {
        rb.path('id', params.id, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
mpartReportControllerFindOne.PATH = '/amims/mpart/mpart_report/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
class MpartReportService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `mpartReportControllerFindAll()` */
    static { this.MpartReportControllerFindAllPath = '/amims/mpart/mpart_report/list'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `mpartReportControllerFindAll()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    mpartReportControllerFindAll$Response(params, context) {
        return mpartReportControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `mpartReportControllerFindAll$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    mpartReportControllerFindAll(params, context) {
        return this.mpartReportControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `mpartReportControllerFindOne()` */
    static { this.MpartReportControllerFindOnePath = '/amims/mpart/mpart_report/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `mpartReportControllerFindOne()` instead.
     *
     * This method doesn't expect any request body.
     */
    mpartReportControllerFindOne$Response(params, context) {
        return mpartReportControllerFindOne(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `mpartReportControllerFindOne$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    mpartReportControllerFindOne(params, context) {
        return this.mpartReportControllerFindOne$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: MpartReportService, deps: [{ token: ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: MpartReportService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: MpartReportService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: ApiConfiguration }, { type: i2.HttpClient }] });

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function mpartWidgetControllerFindAll(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, mpartWidgetControllerFindAll.PATH, 'post');
    if (params) {
        rb.query('filter', params.filter, {});
        rb.query('joinWhere', params.joinWhere, {});
        rb.query('select', params.select, {});
        rb.query('groupBy', params.groupBy, {});
        rb.query('sortKey', params.sortKey, {});
        rb.query('sortValue', params.sortValue, {});
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
mpartWidgetControllerFindAll.PATH = '/amims/mpart/mpart_widget';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
class MpartWidgetService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `mpartWidgetControllerFindAll()` */
    static { this.MpartWidgetControllerFindAllPath = '/amims/mpart/mpart_widget'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `mpartWidgetControllerFindAll()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    mpartWidgetControllerFindAll$Response(params, context) {
        return mpartWidgetControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `mpartWidgetControllerFindAll$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    mpartWidgetControllerFindAll(params, context) {
        return this.mpartWidgetControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: MpartWidgetService, deps: [{ token: ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: MpartWidgetService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: MpartWidgetService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: ApiConfiguration }, { type: i2.HttpClient }] });

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function mcurrencyControllerCreate(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, mcurrencyControllerCreate.PATH, 'post');
    if (params) {
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
mcurrencyControllerCreate.PATH = '/amims/mcurrency/mcurrency';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function mcurrencyControllerFindAll(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, mcurrencyControllerFindAll.PATH, 'get');
    if (params) {
        rb.query('pageIndex', params.pageIndex, {});
        rb.query('pageSize', params.pageSize, {});
        rb.query('filter', params.filter, {});
        rb.query('sortKey', params.sortKey, {});
        rb.query('sortValue', params.sortValue, {});
        rb.query('search_field', params.search_field, {});
        rb.query('search_keyword', params.search_keyword, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
mcurrencyControllerFindAll.PATH = '/amims/mcurrency/mcurrency';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function mcurrencyControllerFindOne(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, mcurrencyControllerFindOne.PATH, 'get');
    if (params) {
        rb.path('id', params.id, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
mcurrencyControllerFindOne.PATH = '/amims/mcurrency/mcurrency/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function mcurrencyControllerRemove(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, mcurrencyControllerRemove.PATH, 'delete');
    if (params) {
        rb.path('id', params.id, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
mcurrencyControllerRemove.PATH = '/amims/mcurrency/mcurrency/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function mcurrencyControllerUpdate(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, mcurrencyControllerUpdate.PATH, 'put');
    if (params) {
        rb.path('id', params.id, {});
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
mcurrencyControllerUpdate.PATH = '/amims/mcurrency/mcurrency/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
class McurrencyService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `mcurrencyControllerFindAll()` */
    static { this.McurrencyControllerFindAllPath = '/amims/mcurrency/mcurrency'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `mcurrencyControllerFindAll()` instead.
     *
     * This method doesn't expect any request body.
     */
    mcurrencyControllerFindAll$Response(params, context) {
        return mcurrencyControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `mcurrencyControllerFindAll$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    mcurrencyControllerFindAll(params, context) {
        return this.mcurrencyControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `mcurrencyControllerCreate()` */
    static { this.McurrencyControllerCreatePath = '/amims/mcurrency/mcurrency'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `mcurrencyControllerCreate()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    mcurrencyControllerCreate$Response(params, context) {
        return mcurrencyControllerCreate(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `mcurrencyControllerCreate$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    mcurrencyControllerCreate(params, context) {
        return this.mcurrencyControllerCreate$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `mcurrencyControllerFindOne()` */
    static { this.McurrencyControllerFindOnePath = '/amims/mcurrency/mcurrency/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `mcurrencyControllerFindOne()` instead.
     *
     * This method doesn't expect any request body.
     */
    mcurrencyControllerFindOne$Response(params, context) {
        return mcurrencyControllerFindOne(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `mcurrencyControllerFindOne$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    mcurrencyControllerFindOne(params, context) {
        return this.mcurrencyControllerFindOne$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `mcurrencyControllerUpdate()` */
    static { this.McurrencyControllerUpdatePath = '/amims/mcurrency/mcurrency/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `mcurrencyControllerUpdate()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    mcurrencyControllerUpdate$Response(params, context) {
        return mcurrencyControllerUpdate(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `mcurrencyControllerUpdate$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    mcurrencyControllerUpdate(params, context) {
        return this.mcurrencyControllerUpdate$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `mcurrencyControllerRemove()` */
    static { this.McurrencyControllerRemovePath = '/amims/mcurrency/mcurrency/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `mcurrencyControllerRemove()` instead.
     *
     * This method doesn't expect any request body.
     */
    mcurrencyControllerRemove$Response(params, context) {
        return mcurrencyControllerRemove(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `mcurrencyControllerRemove$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    mcurrencyControllerRemove(params, context) {
        return this.mcurrencyControllerRemove$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: McurrencyService, deps: [{ token: ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: McurrencyService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: McurrencyService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: ApiConfiguration }, { type: i2.HttpClient }] });

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function stockControllerCreate(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, stockControllerCreate.PATH, 'post');
    if (params) {
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
stockControllerCreate.PATH = '/amims/stock/stock';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function stockControllerFindAll(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, stockControllerFindAll.PATH, 'get');
    if (params) {
        rb.query('pageIndex', params.pageIndex, {});
        rb.query('pageSize', params.pageSize, {});
        rb.query('filter', params.filter, {});
        rb.query('sortKey', params.sortKey, {});
        rb.query('sortValue', params.sortValue, {});
        rb.query('search_field', params.search_field, {});
        rb.query('search_keyword', params.search_keyword, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
stockControllerFindAll.PATH = '/amims/stock/stock';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function stockControllerFindOne(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, stockControllerFindOne.PATH, 'get');
    if (params) {
        rb.path('id', params.id, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
stockControllerFindOne.PATH = '/amims/stock/stock/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function stockControllerRemove(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, stockControllerRemove.PATH, 'delete');
    if (params) {
        rb.path('id', params.id, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
stockControllerRemove.PATH = '/amims/stock/stock/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function stockControllerUpdate(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, stockControllerUpdate.PATH, 'put');
    if (params) {
        rb.path('id', params.id, {});
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
stockControllerUpdate.PATH = '/amims/stock/stock/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
class StockService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `stockControllerFindAll()` */
    static { this.StockControllerFindAllPath = '/amims/stock/stock'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `stockControllerFindAll()` instead.
     *
     * This method doesn't expect any request body.
     */
    stockControllerFindAll$Response(params, context) {
        return stockControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `stockControllerFindAll$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    stockControllerFindAll(params, context) {
        return this.stockControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `stockControllerCreate()` */
    static { this.StockControllerCreatePath = '/amims/stock/stock'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `stockControllerCreate()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    stockControllerCreate$Response(params, context) {
        return stockControllerCreate(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `stockControllerCreate$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    stockControllerCreate(params, context) {
        return this.stockControllerCreate$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `stockControllerFindOne()` */
    static { this.StockControllerFindOnePath = '/amims/stock/stock/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `stockControllerFindOne()` instead.
     *
     * This method doesn't expect any request body.
     */
    stockControllerFindOne$Response(params, context) {
        return stockControllerFindOne(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `stockControllerFindOne$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    stockControllerFindOne(params, context) {
        return this.stockControllerFindOne$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `stockControllerUpdate()` */
    static { this.StockControllerUpdatePath = '/amims/stock/stock/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `stockControllerUpdate()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    stockControllerUpdate$Response(params, context) {
        return stockControllerUpdate(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `stockControllerUpdate$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    stockControllerUpdate(params, context) {
        return this.stockControllerUpdate$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `stockControllerRemove()` */
    static { this.StockControllerRemovePath = '/amims/stock/stock/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `stockControllerRemove()` instead.
     *
     * This method doesn't expect any request body.
     */
    stockControllerRemove$Response(params, context) {
        return stockControllerRemove(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `stockControllerRemove$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    stockControllerRemove(params, context) {
        return this.stockControllerRemove$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: StockService, deps: [{ token: ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: StockService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: StockService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: ApiConfiguration }, { type: i2.HttpClient }] });

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function stockReportControllerFindAll(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, stockReportControllerFindAll.PATH, 'post');
    if (params) {
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
stockReportControllerFindAll.PATH = '/amims/stock/stock_report/list';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function stockReportControllerFindOne(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, stockReportControllerFindOne.PATH, 'get');
    if (params) {
        rb.path('id', params.id, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
stockReportControllerFindOne.PATH = '/amims/stock/stock_report/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
class StockReportService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `stockReportControllerFindAll()` */
    static { this.StockReportControllerFindAllPath = '/amims/stock/stock_report/list'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `stockReportControllerFindAll()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    stockReportControllerFindAll$Response(params, context) {
        return stockReportControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `stockReportControllerFindAll$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    stockReportControllerFindAll(params, context) {
        return this.stockReportControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `stockReportControllerFindOne()` */
    static { this.StockReportControllerFindOnePath = '/amims/stock/stock_report/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `stockReportControllerFindOne()` instead.
     *
     * This method doesn't expect any request body.
     */
    stockReportControllerFindOne$Response(params, context) {
        return stockReportControllerFindOne(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `stockReportControllerFindOne$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    stockReportControllerFindOne(params, context) {
        return this.stockReportControllerFindOne$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: StockReportService, deps: [{ token: ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: StockReportService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: StockReportService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: ApiConfiguration }, { type: i2.HttpClient }] });

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function stockWidgetControllerFindAll(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, stockWidgetControllerFindAll.PATH, 'post');
    if (params) {
        rb.query('filter', params.filter, {});
        rb.query('joinWhere', params.joinWhere, {});
        rb.query('select', params.select, {});
        rb.query('groupBy', params.groupBy, {});
        rb.query('sortKey', params.sortKey, {});
        rb.query('sortValue', params.sortValue, {});
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
stockWidgetControllerFindAll.PATH = '/amims/stock/stock_widget';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
class StockWidgetService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `stockWidgetControllerFindAll()` */
    static { this.StockWidgetControllerFindAllPath = '/amims/stock/stock_widget'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `stockWidgetControllerFindAll()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    stockWidgetControllerFindAll$Response(params, context) {
        return stockWidgetControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `stockWidgetControllerFindAll$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    stockWidgetControllerFindAll(params, context) {
        return this.stockWidgetControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: StockWidgetService, deps: [{ token: ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: StockWidgetService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: StockWidgetService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: ApiConfiguration }, { type: i2.HttpClient }] });

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function vDueListOutputControllerCreate(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, vDueListOutputControllerCreate.PATH, 'post');
    if (params) {
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
vDueListOutputControllerCreate.PATH = '/amims/v_due_list_output/v_due_list_output';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function vDueListOutputControllerFindAll(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, vDueListOutputControllerFindAll.PATH, 'get');
    if (params) {
        rb.query('pageIndex', params.pageIndex, {});
        rb.query('pageSize', params.pageSize, {});
        rb.query('filter', params.filter, {});
        rb.query('sortKey', params.sortKey, {});
        rb.query('sortValue', params.sortValue, {});
        rb.query('search_field', params.search_field, {});
        rb.query('search_keyword', params.search_keyword, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
vDueListOutputControllerFindAll.PATH = '/amims/v_due_list_output/v_due_list_output';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function vDueListOutputControllerFindOne(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, vDueListOutputControllerFindOne.PATH, 'get');
    if (params) {
        rb.path('id', params.id, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
vDueListOutputControllerFindOne.PATH = '/amims/v_due_list_output/v_due_list_output/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function vDueListOutputControllerRemove(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, vDueListOutputControllerRemove.PATH, 'delete');
    if (params) {
        rb.path('id', params.id, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
vDueListOutputControllerRemove.PATH = '/amims/v_due_list_output/v_due_list_output/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function vDueListOutputControllerUpdate(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, vDueListOutputControllerUpdate.PATH, 'put');
    if (params) {
        rb.path('id', params.id, {});
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
vDueListOutputControllerUpdate.PATH = '/amims/v_due_list_output/v_due_list_output/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
class VDueListOutputService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `vDueListOutputControllerFindAll()` */
    static { this.VDueListOutputControllerFindAllPath = '/amims/v_due_list_output/v_due_list_output'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `vDueListOutputControllerFindAll()` instead.
     *
     * This method doesn't expect any request body.
     */
    vDueListOutputControllerFindAll$Response(params, context) {
        return vDueListOutputControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `vDueListOutputControllerFindAll$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    vDueListOutputControllerFindAll(params, context) {
        return this.vDueListOutputControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `vDueListOutputControllerCreate()` */
    static { this.VDueListOutputControllerCreatePath = '/amims/v_due_list_output/v_due_list_output'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `vDueListOutputControllerCreate()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    vDueListOutputControllerCreate$Response(params, context) {
        return vDueListOutputControllerCreate(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `vDueListOutputControllerCreate$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    vDueListOutputControllerCreate(params, context) {
        return this.vDueListOutputControllerCreate$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `vDueListOutputControllerFindOne()` */
    static { this.VDueListOutputControllerFindOnePath = '/amims/v_due_list_output/v_due_list_output/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `vDueListOutputControllerFindOne()` instead.
     *
     * This method doesn't expect any request body.
     */
    vDueListOutputControllerFindOne$Response(params, context) {
        return vDueListOutputControllerFindOne(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `vDueListOutputControllerFindOne$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    vDueListOutputControllerFindOne(params, context) {
        return this.vDueListOutputControllerFindOne$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `vDueListOutputControllerUpdate()` */
    static { this.VDueListOutputControllerUpdatePath = '/amims/v_due_list_output/v_due_list_output/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `vDueListOutputControllerUpdate()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    vDueListOutputControllerUpdate$Response(params, context) {
        return vDueListOutputControllerUpdate(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `vDueListOutputControllerUpdate$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    vDueListOutputControllerUpdate(params, context) {
        return this.vDueListOutputControllerUpdate$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `vDueListOutputControllerRemove()` */
    static { this.VDueListOutputControllerRemovePath = '/amims/v_due_list_output/v_due_list_output/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `vDueListOutputControllerRemove()` instead.
     *
     * This method doesn't expect any request body.
     */
    vDueListOutputControllerRemove$Response(params, context) {
        return vDueListOutputControllerRemove(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `vDueListOutputControllerRemove$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    vDueListOutputControllerRemove(params, context) {
        return this.vDueListOutputControllerRemove$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: VDueListOutputService, deps: [{ token: ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: VDueListOutputService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: VDueListOutputService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: ApiConfiguration }, { type: i2.HttpClient }] });

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function vDueListOutputReportControllerFindAll(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, vDueListOutputReportControllerFindAll.PATH, 'post');
    if (params) {
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
vDueListOutputReportControllerFindAll.PATH = '/amims/v_due_list_output/v_due_list_output_report/list';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function vDueListOutputReportControllerFindOne(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, vDueListOutputReportControllerFindOne.PATH, 'get');
    if (params) {
        rb.path('id', params.id, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
vDueListOutputReportControllerFindOne.PATH = '/amims/v_due_list_output/v_due_list_output_report/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
class VDueListOutputReportService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `vDueListOutputReportControllerFindAll()` */
    static { this.VDueListOutputReportControllerFindAllPath = '/amims/v_due_list_output/v_due_list_output_report/list'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `vDueListOutputReportControllerFindAll()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    vDueListOutputReportControllerFindAll$Response(params, context) {
        return vDueListOutputReportControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `vDueListOutputReportControllerFindAll$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    vDueListOutputReportControllerFindAll(params, context) {
        return this.vDueListOutputReportControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `vDueListOutputReportControllerFindOne()` */
    static { this.VDueListOutputReportControllerFindOnePath = '/amims/v_due_list_output/v_due_list_output_report/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `vDueListOutputReportControllerFindOne()` instead.
     *
     * This method doesn't expect any request body.
     */
    vDueListOutputReportControllerFindOne$Response(params, context) {
        return vDueListOutputReportControllerFindOne(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `vDueListOutputReportControllerFindOne$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    vDueListOutputReportControllerFindOne(params, context) {
        return this.vDueListOutputReportControllerFindOne$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: VDueListOutputReportService, deps: [{ token: ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: VDueListOutputReportService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: VDueListOutputReportService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: ApiConfiguration }, { type: i2.HttpClient }] });

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function vDueListOutputWidgetControllerFindAll(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, vDueListOutputWidgetControllerFindAll.PATH, 'post');
    if (params) {
        rb.query('filter', params.filter, {});
        rb.query('joinWhere', params.joinWhere, {});
        rb.query('select', params.select, {});
        rb.query('groupBy', params.groupBy, {});
        rb.query('sortKey', params.sortKey, {});
        rb.query('sortValue', params.sortValue, {});
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
vDueListOutputWidgetControllerFindAll.PATH = '/amims/v_due_list_output/v_due_list_output_widget';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
class VDueListOutputWidgetService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `vDueListOutputWidgetControllerFindAll()` */
    static { this.VDueListOutputWidgetControllerFindAllPath = '/amims/v_due_list_output/v_due_list_output_widget'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `vDueListOutputWidgetControllerFindAll()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    vDueListOutputWidgetControllerFindAll$Response(params, context) {
        return vDueListOutputWidgetControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `vDueListOutputWidgetControllerFindAll$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    vDueListOutputWidgetControllerFindAll(params, context) {
        return this.vDueListOutputWidgetControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: VDueListOutputWidgetService, deps: [{ token: ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: VDueListOutputWidgetService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: VDueListOutputWidgetService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: ApiConfiguration }, { type: i2.HttpClient }] });

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function unscheduleMaintenanceControllerCreate(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, unscheduleMaintenanceControllerCreate.PATH, 'post');
    if (params) {
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
unscheduleMaintenanceControllerCreate.PATH = '/amims/unschedule_maintenance/unschedule_maintenance';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function unscheduleMaintenanceControllerFindAll(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, unscheduleMaintenanceControllerFindAll.PATH, 'get');
    if (params) {
        rb.query('pageIndex', params.pageIndex, {});
        rb.query('pageSize', params.pageSize, {});
        rb.query('filter', params.filter, {});
        rb.query('sortKey', params.sortKey, {});
        rb.query('sortValue', params.sortValue, {});
        rb.query('search_field', params.search_field, {});
        rb.query('search_keyword', params.search_keyword, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
unscheduleMaintenanceControllerFindAll.PATH = '/amims/unschedule_maintenance/unschedule_maintenance';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function unscheduleMaintenanceControllerFindOne(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, unscheduleMaintenanceControllerFindOne.PATH, 'get');
    if (params) {
        rb.path('id', params.id, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
unscheduleMaintenanceControllerFindOne.PATH = '/amims/unschedule_maintenance/unschedule_maintenance/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function unscheduleMaintenanceControllerRemove(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, unscheduleMaintenanceControllerRemove.PATH, 'delete');
    if (params) {
        rb.path('id', params.id, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
unscheduleMaintenanceControllerRemove.PATH = '/amims/unschedule_maintenance/unschedule_maintenance/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function unscheduleMaintenanceControllerUpdate(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, unscheduleMaintenanceControllerUpdate.PATH, 'put');
    if (params) {
        rb.path('id', params.id, {});
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
unscheduleMaintenanceControllerUpdate.PATH = '/amims/unschedule_maintenance/unschedule_maintenance/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
class UnscheduleMaintenanceService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `unscheduleMaintenanceControllerFindAll()` */
    static { this.UnscheduleMaintenanceControllerFindAllPath = '/amims/unschedule_maintenance/unschedule_maintenance'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `unscheduleMaintenanceControllerFindAll()` instead.
     *
     * This method doesn't expect any request body.
     */
    unscheduleMaintenanceControllerFindAll$Response(params, context) {
        return unscheduleMaintenanceControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `unscheduleMaintenanceControllerFindAll$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    unscheduleMaintenanceControllerFindAll(params, context) {
        return this.unscheduleMaintenanceControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `unscheduleMaintenanceControllerCreate()` */
    static { this.UnscheduleMaintenanceControllerCreatePath = '/amims/unschedule_maintenance/unschedule_maintenance'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `unscheduleMaintenanceControllerCreate()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    unscheduleMaintenanceControllerCreate$Response(params, context) {
        return unscheduleMaintenanceControllerCreate(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `unscheduleMaintenanceControllerCreate$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    unscheduleMaintenanceControllerCreate(params, context) {
        return this.unscheduleMaintenanceControllerCreate$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `unscheduleMaintenanceControllerFindOne()` */
    static { this.UnscheduleMaintenanceControllerFindOnePath = '/amims/unschedule_maintenance/unschedule_maintenance/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `unscheduleMaintenanceControllerFindOne()` instead.
     *
     * This method doesn't expect any request body.
     */
    unscheduleMaintenanceControllerFindOne$Response(params, context) {
        return unscheduleMaintenanceControllerFindOne(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `unscheduleMaintenanceControllerFindOne$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    unscheduleMaintenanceControllerFindOne(params, context) {
        return this.unscheduleMaintenanceControllerFindOne$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `unscheduleMaintenanceControllerUpdate()` */
    static { this.UnscheduleMaintenanceControllerUpdatePath = '/amims/unschedule_maintenance/unschedule_maintenance/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `unscheduleMaintenanceControllerUpdate()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    unscheduleMaintenanceControllerUpdate$Response(params, context) {
        return unscheduleMaintenanceControllerUpdate(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `unscheduleMaintenanceControllerUpdate$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    unscheduleMaintenanceControllerUpdate(params, context) {
        return this.unscheduleMaintenanceControllerUpdate$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `unscheduleMaintenanceControllerRemove()` */
    static { this.UnscheduleMaintenanceControllerRemovePath = '/amims/unschedule_maintenance/unschedule_maintenance/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `unscheduleMaintenanceControllerRemove()` instead.
     *
     * This method doesn't expect any request body.
     */
    unscheduleMaintenanceControllerRemove$Response(params, context) {
        return unscheduleMaintenanceControllerRemove(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `unscheduleMaintenanceControllerRemove$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    unscheduleMaintenanceControllerRemove(params, context) {
        return this.unscheduleMaintenanceControllerRemove$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: UnscheduleMaintenanceService, deps: [{ token: ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: UnscheduleMaintenanceService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: UnscheduleMaintenanceService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: ApiConfiguration }, { type: i2.HttpClient }] });

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function unscheduleMaintenanceReportControllerFindAll(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, unscheduleMaintenanceReportControllerFindAll.PATH, 'post');
    if (params) {
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
unscheduleMaintenanceReportControllerFindAll.PATH = '/amims/unschedule_maintenance/unschedule_maintenance_report/list';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function unscheduleMaintenanceReportControllerFindOne(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, unscheduleMaintenanceReportControllerFindOne.PATH, 'get');
    if (params) {
        rb.path('id', params.id, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
unscheduleMaintenanceReportControllerFindOne.PATH = '/amims/unschedule_maintenance/unschedule_maintenance_report/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
class UnscheduleMaintenanceReportService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `unscheduleMaintenanceReportControllerFindAll()` */
    static { this.UnscheduleMaintenanceReportControllerFindAllPath = '/amims/unschedule_maintenance/unschedule_maintenance_report/list'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `unscheduleMaintenanceReportControllerFindAll()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    unscheduleMaintenanceReportControllerFindAll$Response(params, context) {
        return unscheduleMaintenanceReportControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `unscheduleMaintenanceReportControllerFindAll$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    unscheduleMaintenanceReportControllerFindAll(params, context) {
        return this.unscheduleMaintenanceReportControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `unscheduleMaintenanceReportControllerFindOne()` */
    static { this.UnscheduleMaintenanceReportControllerFindOnePath = '/amims/unschedule_maintenance/unschedule_maintenance_report/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `unscheduleMaintenanceReportControllerFindOne()` instead.
     *
     * This method doesn't expect any request body.
     */
    unscheduleMaintenanceReportControllerFindOne$Response(params, context) {
        return unscheduleMaintenanceReportControllerFindOne(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `unscheduleMaintenanceReportControllerFindOne$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    unscheduleMaintenanceReportControllerFindOne(params, context) {
        return this.unscheduleMaintenanceReportControllerFindOne$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: UnscheduleMaintenanceReportService, deps: [{ token: ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: UnscheduleMaintenanceReportService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: UnscheduleMaintenanceReportService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: ApiConfiguration }, { type: i2.HttpClient }] });

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function unscheduleMaintenanceWidgetControllerFindAll(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, unscheduleMaintenanceWidgetControllerFindAll.PATH, 'post');
    if (params) {
        rb.query('filter', params.filter, {});
        rb.query('joinWhere', params.joinWhere, {});
        rb.query('select', params.select, {});
        rb.query('groupBy', params.groupBy, {});
        rb.query('sortKey', params.sortKey, {});
        rb.query('sortValue', params.sortValue, {});
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
unscheduleMaintenanceWidgetControllerFindAll.PATH = '/amims/unschedule_maintenance/unschedule_maintenance_widget';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
class UnscheduleMaintenanceWidgetService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `unscheduleMaintenanceWidgetControllerFindAll()` */
    static { this.UnscheduleMaintenanceWidgetControllerFindAllPath = '/amims/unschedule_maintenance/unschedule_maintenance_widget'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `unscheduleMaintenanceWidgetControllerFindAll()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    unscheduleMaintenanceWidgetControllerFindAll$Response(params, context) {
        return unscheduleMaintenanceWidgetControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `unscheduleMaintenanceWidgetControllerFindAll$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    unscheduleMaintenanceWidgetControllerFindAll(params, context) {
        return this.unscheduleMaintenanceWidgetControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: UnscheduleMaintenanceWidgetService, deps: [{ token: ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: UnscheduleMaintenanceWidgetService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: UnscheduleMaintenanceWidgetService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: ApiConfiguration }, { type: i2.HttpClient }] });

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function maintenanceDocumentControllerCreate(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, maintenanceDocumentControllerCreate.PATH, 'post');
    if (params) {
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
maintenanceDocumentControllerCreate.PATH = '/amims/maintenance_document/maintenance_document';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function maintenanceDocumentControllerFindAll(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, maintenanceDocumentControllerFindAll.PATH, 'get');
    if (params) {
        rb.query('pageIndex', params.pageIndex, {});
        rb.query('pageSize', params.pageSize, {});
        rb.query('filter', params.filter, {});
        rb.query('sortKey', params.sortKey, {});
        rb.query('sortValue', params.sortValue, {});
        rb.query('search_field', params.search_field, {});
        rb.query('search_keyword', params.search_keyword, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
maintenanceDocumentControllerFindAll.PATH = '/amims/maintenance_document/maintenance_document';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function maintenanceDocumentControllerFindOne(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, maintenanceDocumentControllerFindOne.PATH, 'get');
    if (params) {
        rb.path('id', params.id, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
maintenanceDocumentControllerFindOne.PATH = '/amims/maintenance_document/maintenance_document/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function maintenanceDocumentControllerRemove(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, maintenanceDocumentControllerRemove.PATH, 'delete');
    if (params) {
        rb.path('id', params.id, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
maintenanceDocumentControllerRemove.PATH = '/amims/maintenance_document/maintenance_document/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function maintenanceDocumentControllerUpdate(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, maintenanceDocumentControllerUpdate.PATH, 'put');
    if (params) {
        rb.path('id', params.id, {});
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
maintenanceDocumentControllerUpdate.PATH = '/amims/maintenance_document/maintenance_document/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
class MaintenanceDocumentService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `maintenanceDocumentControllerFindAll()` */
    static { this.MaintenanceDocumentControllerFindAllPath = '/amims/maintenance_document/maintenance_document'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `maintenanceDocumentControllerFindAll()` instead.
     *
     * This method doesn't expect any request body.
     */
    maintenanceDocumentControllerFindAll$Response(params, context) {
        return maintenanceDocumentControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `maintenanceDocumentControllerFindAll$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    maintenanceDocumentControllerFindAll(params, context) {
        return this.maintenanceDocumentControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `maintenanceDocumentControllerCreate()` */
    static { this.MaintenanceDocumentControllerCreatePath = '/amims/maintenance_document/maintenance_document'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `maintenanceDocumentControllerCreate()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    maintenanceDocumentControllerCreate$Response(params, context) {
        return maintenanceDocumentControllerCreate(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `maintenanceDocumentControllerCreate$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    maintenanceDocumentControllerCreate(params, context) {
        return this.maintenanceDocumentControllerCreate$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `maintenanceDocumentControllerFindOne()` */
    static { this.MaintenanceDocumentControllerFindOnePath = '/amims/maintenance_document/maintenance_document/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `maintenanceDocumentControllerFindOne()` instead.
     *
     * This method doesn't expect any request body.
     */
    maintenanceDocumentControllerFindOne$Response(params, context) {
        return maintenanceDocumentControllerFindOne(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `maintenanceDocumentControllerFindOne$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    maintenanceDocumentControllerFindOne(params, context) {
        return this.maintenanceDocumentControllerFindOne$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `maintenanceDocumentControllerUpdate()` */
    static { this.MaintenanceDocumentControllerUpdatePath = '/amims/maintenance_document/maintenance_document/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `maintenanceDocumentControllerUpdate()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    maintenanceDocumentControllerUpdate$Response(params, context) {
        return maintenanceDocumentControllerUpdate(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `maintenanceDocumentControllerUpdate$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    maintenanceDocumentControllerUpdate(params, context) {
        return this.maintenanceDocumentControllerUpdate$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `maintenanceDocumentControllerRemove()` */
    static { this.MaintenanceDocumentControllerRemovePath = '/amims/maintenance_document/maintenance_document/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `maintenanceDocumentControllerRemove()` instead.
     *
     * This method doesn't expect any request body.
     */
    maintenanceDocumentControllerRemove$Response(params, context) {
        return maintenanceDocumentControllerRemove(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `maintenanceDocumentControllerRemove$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    maintenanceDocumentControllerRemove(params, context) {
        return this.maintenanceDocumentControllerRemove$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: MaintenanceDocumentService, deps: [{ token: ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: MaintenanceDocumentService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: MaintenanceDocumentService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: ApiConfiguration }, { type: i2.HttpClient }] });

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function maintenanceMaterialControllerCreate(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, maintenanceMaterialControllerCreate.PATH, 'post');
    if (params) {
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
maintenanceMaterialControllerCreate.PATH = '/amims/maintenance_material/maintenance_material';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function maintenanceMaterialControllerFindAll(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, maintenanceMaterialControllerFindAll.PATH, 'get');
    if (params) {
        rb.query('pageIndex', params.pageIndex, {});
        rb.query('pageSize', params.pageSize, {});
        rb.query('filter', params.filter, {});
        rb.query('sortKey', params.sortKey, {});
        rb.query('sortValue', params.sortValue, {});
        rb.query('search_field', params.search_field, {});
        rb.query('search_keyword', params.search_keyword, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
maintenanceMaterialControllerFindAll.PATH = '/amims/maintenance_material/maintenance_material';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function maintenanceMaterialControllerFindOne(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, maintenanceMaterialControllerFindOne.PATH, 'get');
    if (params) {
        rb.path('id', params.id, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
maintenanceMaterialControllerFindOne.PATH = '/amims/maintenance_material/maintenance_material/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function maintenanceMaterialControllerRemove(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, maintenanceMaterialControllerRemove.PATH, 'delete');
    if (params) {
        rb.path('id', params.id, {});
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
maintenanceMaterialControllerRemove.PATH = '/amims/maintenance_material/maintenance_material/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
function maintenanceMaterialControllerUpdate(http, rootUrl, params, context) {
    const rb = new RequestBuilder(rootUrl, maintenanceMaterialControllerUpdate.PATH, 'put');
    if (params) {
        rb.path('id', params.id, {});
        rb.body(params.body, 'application/json');
    }
    return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(filter((r) => r instanceof HttpResponse), map((r) => {
        return r;
    }));
}
maintenanceMaterialControllerUpdate.PATH = '/amims/maintenance_material/maintenance_material/{id}';

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
class MaintenanceMaterialService extends BaseService {
    constructor(config, http) {
        super(config, http);
    }
    /** Path part for operation `maintenanceMaterialControllerFindAll()` */
    static { this.MaintenanceMaterialControllerFindAllPath = '/amims/maintenance_material/maintenance_material'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `maintenanceMaterialControllerFindAll()` instead.
     *
     * This method doesn't expect any request body.
     */
    maintenanceMaterialControllerFindAll$Response(params, context) {
        return maintenanceMaterialControllerFindAll(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `maintenanceMaterialControllerFindAll$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    maintenanceMaterialControllerFindAll(params, context) {
        return this.maintenanceMaterialControllerFindAll$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `maintenanceMaterialControllerCreate()` */
    static { this.MaintenanceMaterialControllerCreatePath = '/amims/maintenance_material/maintenance_material'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `maintenanceMaterialControllerCreate()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    maintenanceMaterialControllerCreate$Response(params, context) {
        return maintenanceMaterialControllerCreate(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `maintenanceMaterialControllerCreate$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    maintenanceMaterialControllerCreate(params, context) {
        return this.maintenanceMaterialControllerCreate$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `maintenanceMaterialControllerFindOne()` */
    static { this.MaintenanceMaterialControllerFindOnePath = '/amims/maintenance_material/maintenance_material/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `maintenanceMaterialControllerFindOne()` instead.
     *
     * This method doesn't expect any request body.
     */
    maintenanceMaterialControllerFindOne$Response(params, context) {
        return maintenanceMaterialControllerFindOne(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `maintenanceMaterialControllerFindOne$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    maintenanceMaterialControllerFindOne(params, context) {
        return this.maintenanceMaterialControllerFindOne$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `maintenanceMaterialControllerUpdate()` */
    static { this.MaintenanceMaterialControllerUpdatePath = '/amims/maintenance_material/maintenance_material/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `maintenanceMaterialControllerUpdate()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    maintenanceMaterialControllerUpdate$Response(params, context) {
        return maintenanceMaterialControllerUpdate(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `maintenanceMaterialControllerUpdate$Response()` instead.
     *
     * This method sends `application/json` and handles request body of type `application/json`.
     */
    maintenanceMaterialControllerUpdate(params, context) {
        return this.maintenanceMaterialControllerUpdate$Response(params, context).pipe(map((r) => r.body));
    }
    /** Path part for operation `maintenanceMaterialControllerRemove()` */
    static { this.MaintenanceMaterialControllerRemovePath = '/amims/maintenance_material/maintenance_material/{id}'; }
    /**
     * This method provides access to the full `HttpResponse`, allowing access to response headers.
     * To access only the response body, use `maintenanceMaterialControllerRemove()` instead.
     *
     * This method doesn't expect any request body.
     */
    maintenanceMaterialControllerRemove$Response(params, context) {
        return maintenanceMaterialControllerRemove(this.http, this.rootUrl, params, context);
    }
    /**
     * This method provides access only to the response body.
     * To access the full response (for headers, for example), `maintenanceMaterialControllerRemove$Response()` instead.
     *
     * This method doesn't expect any request body.
     */
    maintenanceMaterialControllerRemove(params, context) {
        return this.maintenanceMaterialControllerRemove$Response(params, context).pipe(map((r) => r.body));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: MaintenanceMaterialService, deps: [{ token: ApiConfiguration }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: MaintenanceMaterialService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: MaintenanceMaterialService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: ApiConfiguration }, { type: i2.HttpClient }] });

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */
/**
 * Module that provides all services and configuration.
 */
class ApiModule {
    static forRoot(params) {
        return {
            ngModule: ApiModule,
            providers: [
                {
                    provide: ApiConfiguration,
                    useValue: params
                }
            ]
        };
    }
    constructor(parentModule, http) {
        if (parentModule) {
            throw new Error('ApiModule is already loaded. Import in your base AppModule only.');
        }
        if (!http) {
            throw new Error('You need to import the HttpClientModule in your AppModule! \n' +
                'See also https://github.com/angular/angular/issues/20575');
        }
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: ApiModule, deps: [{ token: ApiModule, optional: true, skipSelf: true }, { token: i2.HttpClient, optional: true }], target: i0.ɵɵFactoryTarget.NgModule }); }
    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "18.2.13", ngImport: i0, type: ApiModule }); }
    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: ApiModule, providers: [
            AppService,
            AuthPublicService,
            UsersService,
            UsersReportService,
            UsersWidgetService,
            UserTokensService,
            AuthProtectService,
            DocumentService,
            WorkflowService,
            WorkflowApplyService,
            WorkflowReportService,
            WorkflowWidgetService,
            WorkflowLogService,
            WorkflowLogReportService,
            WorkflowLogWidgetService,
            WorkflowStepService,
            WorkflowStepReportService,
            WorkflowStepWidgetService,
            UserGroupService,
            WorkflowAggregatorService,
            ModuleService,
            CustomFieldGroupService,
            CustomFieldGroupReportService,
            CustomFieldGroupWidgetService,
            CustomFieldService,
            CustomFieldValueService,
            CustomFieldValueReportService,
            CustomFieldValueWidgetService,
            DocumentNumberingService,
            DocumentNumberingCounterService,
            ActypeService,
            ActypeReportService,
            ActypeWidgetService,
            AircraftService,
            AircraftReportService,
            AircraftWidgetService,
            AircraftDetailService,
            AircraftDetailReportService,
            AircraftDetailWidgetService,
            AtaService,
            BinService,
            BinReportService,
            BinWidgetService,
            CompanyService,
            ConditionMonitoringService,
            ConditionMonitoringReportService,
            ConditionMonitoringWidgetService,
            CurrencyService,
            CurrencyReportService,
            CurrencyWidgetService,
            DoctypeService,
            DueListOutputService,
            DueListOutputReportService,
            DueListOutputWidgetService,
            EngineerPmtrService,
            EngineerPmtrReportService,
            EngineerPmtrWidgetService,
            EngineerPmtrItemService,
            EngineerPmtrItemReportService,
            EngineerPmtrItemWidgetService,
            EngineerPrisService,
            EngineerPrisReportService,
            EngineerPrisWidgetService,
            EngineerPrisItemService,
            EngineerPrisItemReportService,
            EngineerPrisItemWidgetService,
            EngineerPrisReturnService,
            EngineerPrisReturnReportService,
            EngineerPrisReturnWidgetService,
            EngineerPrisReturnItemService,
            EngineerPrisReturnItemReportService,
            EngineerPrisReturnItemWidgetService,
            EngineerRtiService,
            EngineerRtiReportService,
            EngineerRtiWidgetService,
            EngineerRtiIdentifyService,
            EngineerRtiIdentifyReportService,
            EngineerRtiIdentifyWidgetService,
            EngineerRtiPartService,
            EngineerRtiPartReportService,
            EngineerRtiPartWidgetService,
            FigureIndexService,
            InspectionService,
            InspectionReportService,
            InspectionWidgetService,
            InternalGrnService,
            InternalGrnReportService,
            InternalGrnWidgetService,
            InternalGrnItemService,
            InternalGrnItemReportService,
            InternalGrnItemWidgetService,
            LastMaintenanceService,
            LastMaintenanceReportService,
            LastMaintenanceWidgetService,
            LibUploadService,
            LifeTimeLimitService,
            LifeTimeLimitReportService,
            LifeTimeLimitWidgetService,
            LocationFlightService,
            LocationFlightReportService,
            LocationFlightWidgetService,
            LogProcessService,
            LogProcessReportService,
            LogProcessWidgetService,
            LogSpService,
            LogSpReportService,
            LogSpWidgetService,
            LogTransferService,
            LogTransferReportService,
            LogTransferWidgetService,
            LogTsnTsoService,
            LogTsnTsoReportService,
            LogTsnTsoWidgetService,
            LogUserService,
            MaintenanceService,
            MaintenanceReportService,
            MaintenanceWidgetService,
            MaintenanceCodeService,
            MaintenanceCodeReportService,
            MaintenanceCodeWidgetService,
            MelService,
            MpcGseService,
            MpcGseReportService,
            MpcGseWidgetService,
            MpcJoService,
            MpcJoReportService,
            MpcJoWidgetService,
            MpcJoOperatorService,
            MpcJoOperatorReportService,
            MpcJoOperatorWidgetService,
            MpcPiroService,
            MpcPiroReportService,
            MpcPiroWidgetService,
            MpcPiroItemService,
            MpcPiroItemReportService,
            MpcPiroItemWidgetService,
            MpcSelfMaintenanceService,
            MpcSelfMaintenanceReportService,
            MpcSelfMaintenanceWidgetService,
            MpcWpService,
            MpcWpReportService,
            MpcWpWidgetService,
            PartService,
            PartReportService,
            PartWidgetService,
            PartActypeService,
            PartActypeReportService,
            PartActypeWidgetService,
            PartAlternativeService,
            PartAlternativeReportService,
            PartAlternativeWidgetService,
            PartAtaService,
            PartAtaReportService,
            PartAtaWidgetService,
            PartCategoryService,
            PartCategoryReportService,
            PartCategoryWidgetService,
            PartConditionService,
            PartConditionReportService,
            PartConditionWidgetService,
            PartFigureIndexService,
            PartFigureIndexReportService,
            PartFigureIndexWidgetService,
            PartInstallService,
            PartInstallReportService,
            PartInstallWidgetService,
            PartInstallOldService,
            PartInstallOldReportService,
            PartInstallOldWidgetService,
            PartLogService,
            PartLogReportService,
            PartLogWidgetService,
            PartidService,
            PartidReportService,
            PartidWidgetService,
            PilotService,
            PilotReportService,
            PilotWidgetService,
            PositionService,
            PositionReportService,
            PositionWidgetService,
            PurGrnService,
            PurGrnReportService,
            PurGrnWidgetService,
            PurGrnItemService,
            PurGrnItemReportService,
            PurGrnItemWidgetService,
            PurPoService,
            PurPoReportService,
            PurPoWidgetService,
            PurPoItemService,
            PurPoItemReportService,
            PurPoItemWidgetService,
            PurPrService,
            PurPrReportService,
            PurPrWidgetService,
            PurPrItemService,
            PurPrItemReportService,
            PurPrItemWidgetService,
            PurPrclService,
            PurPrclReportService,
            PurPrclWidgetService,
            PurReturnService,
            PurReturnReportService,
            PurReturnWidgetService,
            PurReturnItemService,
            PurReturnItemReportService,
            PurReturnItemWidgetService,
            PurVendorService,
            PurVendorReportService,
            PurVendorWidgetService,
            PurVendorContactService,
            PurVendorContactReportService,
            PurVendorContactWidgetService,
            PurVendorItemService,
            PurVendorItemReportService,
            PurVendorItemWidgetService,
            QaRpdService,
            QaRpdReportService,
            QaRpdWidgetService,
            QaRpdDispotitionService,
            QaRpdDispotitionReportService,
            QaRpdDispotitionWidgetService,
            QaTransferService,
            QaTransferReportService,
            QaTransferWidgetService,
            QaTransferItemService,
            QaTransferItemReportService,
            QaTransferItemWidgetService,
            RotaryFactorService,
            RotaryFactorReportService,
            RotaryFactorWidgetService,
            ShippingService,
            ShippingReportService,
            ShippingWidgetService,
            SiteService,
            SiteReportService,
            SiteWidgetService,
            StoreDestroyService,
            StoreDestroyReportService,
            StoreDestroyWidgetService,
            StoreTransferService,
            StoreTransferReportService,
            StoreTransferWidgetService,
            StoreTransferItemService,
            StoreTransferItemReportService,
            StoreTransferItemWidgetService,
            TdService,
            TdReportService,
            TdWidgetService,
            TdDetailService,
            TdDetailReportService,
            TdDetailWidgetService,
            TdDetailAcService,
            TdDetailAcReportService,
            TdDetailAcWidgetService,
            TdRefService,
            TdRefReportService,
            TdRefWidgetService,
            TdTypeService,
            TdTypeReportService,
            TdTypeWidgetService,
            TechDefectService,
            TechDefectReportService,
            TechDefectWidgetService,
            TechDiscrepanciesService,
            TechDiscrepanciesReportService,
            TechDiscrepanciesWidgetService,
            TechLogService,
            TechLogReportService,
            TechLogWidgetService,
            TechLogEngineService,
            TechLogEngineReportService,
            TechLogEngineWidgetService,
            TechLogEngineCheckService,
            TechLogEngineCheckReportService,
            TechLogEngineCheckWidgetService,
            TechLogItemService,
            TechLogItemReportService,
            TechLogItemWidgetService,
            TechLogJoService,
            TechLogJoReportService,
            TechLogJoWidgetService,
            TypeOfworkService,
            TypeOfworkReportService,
            TypeOfworkWidgetService,
            WarrantyService,
            MpartService,
            MpartReportService,
            MpartWidgetService,
            McurrencyService,
            StockService,
            StockReportService,
            StockWidgetService,
            VDueListOutputService,
            VDueListOutputReportService,
            VDueListOutputWidgetService,
            UnscheduleMaintenanceService,
            UnscheduleMaintenanceReportService,
            UnscheduleMaintenanceWidgetService,
            MaintenanceDocumentService,
            MaintenanceMaterialService,
            ApiConfiguration
        ] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: ApiModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [],
                    exports: [],
                    declarations: [],
                    providers: [
                        AppService,
                        AuthPublicService,
                        UsersService,
                        UsersReportService,
                        UsersWidgetService,
                        UserTokensService,
                        AuthProtectService,
                        DocumentService,
                        WorkflowService,
                        WorkflowApplyService,
                        WorkflowReportService,
                        WorkflowWidgetService,
                        WorkflowLogService,
                        WorkflowLogReportService,
                        WorkflowLogWidgetService,
                        WorkflowStepService,
                        WorkflowStepReportService,
                        WorkflowStepWidgetService,
                        UserGroupService,
                        WorkflowAggregatorService,
                        ModuleService,
                        CustomFieldGroupService,
                        CustomFieldGroupReportService,
                        CustomFieldGroupWidgetService,
                        CustomFieldService,
                        CustomFieldValueService,
                        CustomFieldValueReportService,
                        CustomFieldValueWidgetService,
                        DocumentNumberingService,
                        DocumentNumberingCounterService,
                        ActypeService,
                        ActypeReportService,
                        ActypeWidgetService,
                        AircraftService,
                        AircraftReportService,
                        AircraftWidgetService,
                        AircraftDetailService,
                        AircraftDetailReportService,
                        AircraftDetailWidgetService,
                        AtaService,
                        BinService,
                        BinReportService,
                        BinWidgetService,
                        CompanyService,
                        ConditionMonitoringService,
                        ConditionMonitoringReportService,
                        ConditionMonitoringWidgetService,
                        CurrencyService,
                        CurrencyReportService,
                        CurrencyWidgetService,
                        DoctypeService,
                        DueListOutputService,
                        DueListOutputReportService,
                        DueListOutputWidgetService,
                        EngineerPmtrService,
                        EngineerPmtrReportService,
                        EngineerPmtrWidgetService,
                        EngineerPmtrItemService,
                        EngineerPmtrItemReportService,
                        EngineerPmtrItemWidgetService,
                        EngineerPrisService,
                        EngineerPrisReportService,
                        EngineerPrisWidgetService,
                        EngineerPrisItemService,
                        EngineerPrisItemReportService,
                        EngineerPrisItemWidgetService,
                        EngineerPrisReturnService,
                        EngineerPrisReturnReportService,
                        EngineerPrisReturnWidgetService,
                        EngineerPrisReturnItemService,
                        EngineerPrisReturnItemReportService,
                        EngineerPrisReturnItemWidgetService,
                        EngineerRtiService,
                        EngineerRtiReportService,
                        EngineerRtiWidgetService,
                        EngineerRtiIdentifyService,
                        EngineerRtiIdentifyReportService,
                        EngineerRtiIdentifyWidgetService,
                        EngineerRtiPartService,
                        EngineerRtiPartReportService,
                        EngineerRtiPartWidgetService,
                        FigureIndexService,
                        InspectionService,
                        InspectionReportService,
                        InspectionWidgetService,
                        InternalGrnService,
                        InternalGrnReportService,
                        InternalGrnWidgetService,
                        InternalGrnItemService,
                        InternalGrnItemReportService,
                        InternalGrnItemWidgetService,
                        LastMaintenanceService,
                        LastMaintenanceReportService,
                        LastMaintenanceWidgetService,
                        LibUploadService,
                        LifeTimeLimitService,
                        LifeTimeLimitReportService,
                        LifeTimeLimitWidgetService,
                        LocationFlightService,
                        LocationFlightReportService,
                        LocationFlightWidgetService,
                        LogProcessService,
                        LogProcessReportService,
                        LogProcessWidgetService,
                        LogSpService,
                        LogSpReportService,
                        LogSpWidgetService,
                        LogTransferService,
                        LogTransferReportService,
                        LogTransferWidgetService,
                        LogTsnTsoService,
                        LogTsnTsoReportService,
                        LogTsnTsoWidgetService,
                        LogUserService,
                        MaintenanceService,
                        MaintenanceReportService,
                        MaintenanceWidgetService,
                        MaintenanceCodeService,
                        MaintenanceCodeReportService,
                        MaintenanceCodeWidgetService,
                        MelService,
                        MpcGseService,
                        MpcGseReportService,
                        MpcGseWidgetService,
                        MpcJoService,
                        MpcJoReportService,
                        MpcJoWidgetService,
                        MpcJoOperatorService,
                        MpcJoOperatorReportService,
                        MpcJoOperatorWidgetService,
                        MpcPiroService,
                        MpcPiroReportService,
                        MpcPiroWidgetService,
                        MpcPiroItemService,
                        MpcPiroItemReportService,
                        MpcPiroItemWidgetService,
                        MpcSelfMaintenanceService,
                        MpcSelfMaintenanceReportService,
                        MpcSelfMaintenanceWidgetService,
                        MpcWpService,
                        MpcWpReportService,
                        MpcWpWidgetService,
                        PartService,
                        PartReportService,
                        PartWidgetService,
                        PartActypeService,
                        PartActypeReportService,
                        PartActypeWidgetService,
                        PartAlternativeService,
                        PartAlternativeReportService,
                        PartAlternativeWidgetService,
                        PartAtaService,
                        PartAtaReportService,
                        PartAtaWidgetService,
                        PartCategoryService,
                        PartCategoryReportService,
                        PartCategoryWidgetService,
                        PartConditionService,
                        PartConditionReportService,
                        PartConditionWidgetService,
                        PartFigureIndexService,
                        PartFigureIndexReportService,
                        PartFigureIndexWidgetService,
                        PartInstallService,
                        PartInstallReportService,
                        PartInstallWidgetService,
                        PartInstallOldService,
                        PartInstallOldReportService,
                        PartInstallOldWidgetService,
                        PartLogService,
                        PartLogReportService,
                        PartLogWidgetService,
                        PartidService,
                        PartidReportService,
                        PartidWidgetService,
                        PilotService,
                        PilotReportService,
                        PilotWidgetService,
                        PositionService,
                        PositionReportService,
                        PositionWidgetService,
                        PurGrnService,
                        PurGrnReportService,
                        PurGrnWidgetService,
                        PurGrnItemService,
                        PurGrnItemReportService,
                        PurGrnItemWidgetService,
                        PurPoService,
                        PurPoReportService,
                        PurPoWidgetService,
                        PurPoItemService,
                        PurPoItemReportService,
                        PurPoItemWidgetService,
                        PurPrService,
                        PurPrReportService,
                        PurPrWidgetService,
                        PurPrItemService,
                        PurPrItemReportService,
                        PurPrItemWidgetService,
                        PurPrclService,
                        PurPrclReportService,
                        PurPrclWidgetService,
                        PurReturnService,
                        PurReturnReportService,
                        PurReturnWidgetService,
                        PurReturnItemService,
                        PurReturnItemReportService,
                        PurReturnItemWidgetService,
                        PurVendorService,
                        PurVendorReportService,
                        PurVendorWidgetService,
                        PurVendorContactService,
                        PurVendorContactReportService,
                        PurVendorContactWidgetService,
                        PurVendorItemService,
                        PurVendorItemReportService,
                        PurVendorItemWidgetService,
                        QaRpdService,
                        QaRpdReportService,
                        QaRpdWidgetService,
                        QaRpdDispotitionService,
                        QaRpdDispotitionReportService,
                        QaRpdDispotitionWidgetService,
                        QaTransferService,
                        QaTransferReportService,
                        QaTransferWidgetService,
                        QaTransferItemService,
                        QaTransferItemReportService,
                        QaTransferItemWidgetService,
                        RotaryFactorService,
                        RotaryFactorReportService,
                        RotaryFactorWidgetService,
                        ShippingService,
                        ShippingReportService,
                        ShippingWidgetService,
                        SiteService,
                        SiteReportService,
                        SiteWidgetService,
                        StoreDestroyService,
                        StoreDestroyReportService,
                        StoreDestroyWidgetService,
                        StoreTransferService,
                        StoreTransferReportService,
                        StoreTransferWidgetService,
                        StoreTransferItemService,
                        StoreTransferItemReportService,
                        StoreTransferItemWidgetService,
                        TdService,
                        TdReportService,
                        TdWidgetService,
                        TdDetailService,
                        TdDetailReportService,
                        TdDetailWidgetService,
                        TdDetailAcService,
                        TdDetailAcReportService,
                        TdDetailAcWidgetService,
                        TdRefService,
                        TdRefReportService,
                        TdRefWidgetService,
                        TdTypeService,
                        TdTypeReportService,
                        TdTypeWidgetService,
                        TechDefectService,
                        TechDefectReportService,
                        TechDefectWidgetService,
                        TechDiscrepanciesService,
                        TechDiscrepanciesReportService,
                        TechDiscrepanciesWidgetService,
                        TechLogService,
                        TechLogReportService,
                        TechLogWidgetService,
                        TechLogEngineService,
                        TechLogEngineReportService,
                        TechLogEngineWidgetService,
                        TechLogEngineCheckService,
                        TechLogEngineCheckReportService,
                        TechLogEngineCheckWidgetService,
                        TechLogItemService,
                        TechLogItemReportService,
                        TechLogItemWidgetService,
                        TechLogJoService,
                        TechLogJoReportService,
                        TechLogJoWidgetService,
                        TypeOfworkService,
                        TypeOfworkReportService,
                        TypeOfworkWidgetService,
                        WarrantyService,
                        MpartService,
                        MpartReportService,
                        MpartWidgetService,
                        McurrencyService,
                        StockService,
                        StockReportService,
                        StockWidgetService,
                        VDueListOutputService,
                        VDueListOutputReportService,
                        VDueListOutputWidgetService,
                        UnscheduleMaintenanceService,
                        UnscheduleMaintenanceReportService,
                        UnscheduleMaintenanceWidgetService,
                        MaintenanceDocumentService,
                        MaintenanceMaterialService,
                        ApiConfiguration
                    ],
                }]
        }], ctorParameters: () => [{ type: ApiModule, decorators: [{
                    type: Optional
                }, {
                    type: SkipSelf
                }] }, { type: i2.HttpClient, decorators: [{
                    type: Optional
                }] }] });

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

const AclModuleFormSchema = {
    "createdAt": {
        "default": "",
        "required": false
    },
    "deskripsi": {
        "default": "",
        "required": false
    },
    "idModule": {
        "required": true
    },
    "isAktif": {
        "default": false,
        "required": false
    },
    "kodeModule": {
        "default": "",
        "required": false
    },
    "namaDb": {
        "default": "",
        "required": false
    },
    "namaModule": {
        "default": "",
        "required": false
    },
    "namaTabel": {
        "default": "",
        "required": false
    },
    "updatedAt": {
        "default": "",
        "required": false
    },
    "urutan": {
        "default": 0,
        "required": false
    }
};

const AclUserGroupFormSchema = {
    "createdAt": {
        "default": "",
        "required": false
    },
    "deskripsi": {
        "default": "",
        "required": false
    },
    "idUserGroup": {
        "required": true
    },
    "namaUserGroup": {
        "default": "",
        "required": true
    },
    "status": {
        "default": "",
        "required": true
    }
};

const AclUserTokensFormSchema = {
    "createdAt": {
        "default": "",
        "required": false
    },
    "id": {
        "required": true
    },
    "idUser": {
        "required": false
    },
    "ipAddress": {
        "default": "",
        "required": false
    },
    "refreshToken": {
        "default": "",
        "required": false
    },
    "userAgent": {
        "default": "",
        "required": false
    }
};

const AclUsersReportFormSchema = {
    "createdAt": {
        "default": "",
        "required": false
    },
    "email": {
        "default": "",
        "required": true
    },
    "idUserGroup": {
        "required": false
    },
    "idUsers": {
        "required": true
    },
    "lastLogin": {
        "default": "",
        "required": false
    },
    "nama": {
        "default": "",
        "required": false
    },
    "password": {
        "default": "",
        "required": false
    },
    "status": {
        "default": "",
        "required": false
    },
    "wajibResetPassword": {
        "default": false,
        "required": false
    }
};

const AclUsersWidgetFormSchema = {
    "createdAt": {
        "default": "",
        "required": false
    },
    "email": {
        "default": "",
        "required": true
    },
    "idUserGroup": {
        "required": false
    },
    "idUsers": {
        "required": true
    },
    "lastLogin": {
        "default": "",
        "required": false
    },
    "nama": {
        "default": "",
        "required": false
    },
    "password": {
        "default": "",
        "required": false
    },
    "status": {
        "default": "",
        "required": false
    },
    "total": {
        "default": 0,
        "required": false
    },
    "wajibResetPassword": {
        "default": false,
        "required": false
    }
};

const AclUsersFormSchema = {
    "createdAt": {
        "default": "",
        "required": false
    },
    "email": {
        "default": "",
        "required": true
    },
    "idUserGroup": {
        "required": false
    },
    "idUsers": {
        "required": true
    },
    "lastLogin": {
        "default": "",
        "required": false
    },
    "nama": {
        "default": "",
        "required": false
    },
    "password": {
        "default": "",
        "required": false
    },
    "status": {
        "default": "",
        "required": false
    },
    "wajibResetPassword": {
        "default": false,
        "required": false
    }
};

const AmimsActypeReportFormSchema = {
    "acCategory": {
        "default": "",
        "required": false
    },
    "acManufacture": {
        "default": "",
        "required": false
    },
    "actype": {
        "default": "",
        "required": false
    },
    "createdAt": {
        "default": "",
        "required": false
    },
    "description": {
        "default": "",
        "required": false
    },
    "eFlight": {
        "default": "",
        "required": false
    },
    "eStarts": {
        "default": "",
        "required": false
    },
    "engineManufacture": {
        "default": "",
        "required": false
    },
    "engineType": {
        "default": "",
        "required": false
    },
    "hashN1": {
        "default": "",
        "required": false
    },
    "hashN2": {
        "default": "",
        "required": false
    },
    "idActype": {
        "required": true
    },
    "isDeleted": {
        "default": 0,
        "required": false
    },
    "numberEngine": {
        "default": 0,
        "required": false
    },
    "oldId": {
        "default": "",
        "required": false
    },
    "statusType": {
        "default": "",
        "required": false
    },
    "updatedAt": {
        "default": "",
        "required": false
    },
    "wingtype": {
        "default": "",
        "required": false
    }
};

const AmimsActypeWidgetFormSchema = {
    "acCategory": {
        "default": "",
        "required": false
    },
    "acManufacture": {
        "default": "",
        "required": false
    },
    "actype": {
        "default": "",
        "required": false
    },
    "createdAt": {
        "default": "",
        "required": false
    },
    "description": {
        "default": "",
        "required": false
    },
    "eFlight": {
        "default": "",
        "required": false
    },
    "eStarts": {
        "default": "",
        "required": false
    },
    "engineManufacture": {
        "default": "",
        "required": false
    },
    "engineType": {
        "default": "",
        "required": false
    },
    "hashN1": {
        "default": "",
        "required": false
    },
    "hashN2": {
        "default": "",
        "required": false
    },
    "idActype": {
        "required": true
    },
    "isDeleted": {
        "default": 0,
        "required": false
    },
    "numberEngine": {
        "default": 0,
        "required": false
    },
    "oldId": {
        "default": "",
        "required": false
    },
    "statusType": {
        "default": "",
        "required": false
    },
    "total": {
        "default": 0,
        "required": false
    },
    "updatedAt": {
        "default": "",
        "required": false
    },
    "wingtype": {
        "default": "",
        "required": false
    }
};

const AmimsActypeFormSchema = {
    "acCategory": {
        "default": "",
        "required": false
    },
    "acManufacture": {
        "default": "",
        "required": false
    },
    "actype": {
        "default": "",
        "required": false
    },
    "createdAt": {
        "default": "",
        "required": false
    },
    "description": {
        "default": "",
        "required": false
    },
    "eFlight": {
        "default": "",
        "required": false
    },
    "eStarts": {
        "default": "",
        "required": false
    },
    "engineManufacture": {
        "default": "",
        "required": false
    },
    "engineType": {
        "default": "",
        "required": false
    },
    "hashN1": {
        "default": "",
        "required": false
    },
    "hashN2": {
        "default": "",
        "required": false
    },
    "idActype": {
        "required": true
    },
    "isDeleted": {
        "default": 0,
        "required": false
    },
    "numberEngine": {
        "default": 0,
        "required": false
    },
    "oldId": {
        "default": "",
        "required": false
    },
    "statusType": {
        "default": "",
        "required": false
    },
    "updatedAt": {
        "default": "",
        "required": false
    },
    "wingtype": {
        "default": "",
        "required": false
    }
};

const AmimsAircraftDetailReportFormSchema = {
    "aircraft": {
        "default": "",
        "required": true
    },
    "airworthiness": {
        "default": "",
        "required": false
    },
    "autoPilot": {
        "default": "",
        "required": false
    },
    "auxiliaryTank": {
        "default": "",
        "required": false
    },
    "baggageCompartmentSpace": {
        "default": "",
        "required": false
    },
    "cargoAreaMaximumHeight": {
        "default": "",
        "required": false
    },
    "cargoAreaOverallLength": {
        "default": "",
        "required": false
    },
    "cargoDoor": {
        "default": "",
        "required": false
    },
    "certificateOfRegistration": {
        "default": "",
        "required": false
    },
    "compassSwing": {
        "default": "",
        "required": false
    },
    "configuration": {
        "default": "",
        "required": false
    },
    "crew": {
        "default": "",
        "required": false
    },
    "crewDoor": {
        "default": "",
        "required": false
    },
    "crewLifeVest": {
        "default": "",
        "required": false
    },
    "cvr": {
        "default": "",
        "required": false
    },
    "dme": {
        "default": "",
        "required": false
    },
    "dualAdfSystem": {
        "default": "",
        "required": false
    },
    "dualRadioNavigationSystem": {
        "default": "",
        "required": false
    },
    "dualVhfCommunication": {
        "default": "",
        "required": false
    },
    "earProtector": {
        "default": "",
        "required": false
    },
    "emergency": {
        "default": "",
        "required": false
    },
    "emergencyFloatationGear": {
        "default": "",
        "required": false
    },
    "emergencyLocateTransmitter": {
        "default": "",
        "required": false
    },
    "emptyWeight": {
        "default": "",
        "required": false
    },
    "engine": {
        "default": "",
        "required": false
    },
    "engineInstrument": {
        "default": "",
        "required": false
    },
    "externalCargoHook": {
        "default": "",
        "required": false
    },
    "firstAidKit": {
        "default": "",
        "required": false
    },
    "flightControl": {
        "default": "",
        "required": false
    },
    "flightDirector": {
        "default": "",
        "required": false
    },
    "floatingBeacon": {
        "default": "",
        "required": false
    },
    "fullDoc": {
        "default": "",
        "required": false
    },
    "gps": {
        "default": "",
        "required": false
    },
    "grossWeight": {
        "default": "",
        "required": false
    },
    "gyroMagneticCompass": {
        "default": "",
        "required": false
    },
    "hfCommunication": {
        "default": "",
        "required": false
    },
    "homer": {
        "default": "",
        "required": false
    },
    "hoverCeilingOge": {
        "default": "",
        "required": false
    },
    "idAircraft": {
        "required": false
    },
    "idAircraftDetail": {
        "required": true
    },
    "intercommunicationSystem": {
        "default": "",
        "required": false
    },
    "internalHoist": {
        "default": "",
        "required": false
    },
    "landingGear": {
        "default": "",
        "required": false
    },
    "landingLight": {
        "default": "",
        "required": false
    },
    "lifeRaft": {
        "default": "",
        "required": false
    },
    "lifeVest": {
        "default": "",
        "required": false
    },
    "mainCabinSpace": {
        "default": "",
        "required": false
    },
    "mainRotorDiscDiameter": {
        "default": "",
        "required": false
    },
    "mainRotorSystem": {
        "default": "",
        "required": false
    },
    "maximumBaggageCompartment": {
        "default": "",
        "required": false
    },
    "maximumContinuous": {
        "default": "",
        "required": false
    },
    "maximumSpeed": {
        "default": "",
        "required": false
    },
    "medicalStretcher": {
        "default": "",
        "required": false
    },
    "minute": {
        "default": "",
        "required": false
    },
    "moreDetail": {
        "default": "",
        "required": false
    },
    "outputPower": {
        "default": "",
        "required": false
    },
    "passenger": {
        "default": "",
        "required": false
    },
    "passengerDoorHeight": {
        "default": "",
        "required": false
    },
    "passengerDoorWidth": {
        "default": "",
        "required": false
    },
    "payload": {
        "default": "",
        "required": false
    },
    "personal": {
        "default": "",
        "required": false
    },
    "poweredBy": {
        "default": "",
        "required": false
    },
    "publicAddress": {
        "default": "",
        "required": false
    },
    "radioAltimeter": {
        "default": "",
        "required": false
    },
    "radioPermit": {
        "default": "",
        "required": false
    },
    "range": {
        "default": "",
        "required": false
    },
    "searchLight": {
        "default": "",
        "required": false
    },
    "standardFuelCapacity": {
        "default": "",
        "required": false
    },
    "survivalKit": {
        "default": "",
        "required": false
    },
    "tailRotorDiameter": {
        "default": "",
        "required": false
    },
    "tailRotorSystem": {
        "default": "",
        "required": false
    },
    "takeOff": {
        "default": "",
        "required": false
    },
    "transponder": {
        "default": "",
        "required": false
    },
    "underwaterBeacon": {
        "default": "",
        "required": false
    },
    "updatedAt": {
        "default": "",
        "required": false
    },
    "usefulWeight": {
        "default": "",
        "required": false
    },
    "vor": {
        "default": "",
        "required": false
    },
    "weightAndBalance": {
        "default": "",
        "required": false
    },
    "withFullPassenger": {
        "default": "",
        "required": false
    },
    "wxRadar": {
        "default": "",
        "required": false
    },
    "yearOfManufacture": {
        "default": "",
        "required": false
    }
};

const AmimsAircraftDetailWidgetFormSchema = {
    "airworthiness": {
        "default": "",
        "required": false
    },
    "autoPilot": {
        "default": "",
        "required": false
    },
    "auxiliaryTank": {
        "default": "",
        "required": false
    },
    "baggageCompartmentSpace": {
        "default": "",
        "required": false
    },
    "cargoAreaMaximumHeight": {
        "default": "",
        "required": false
    },
    "cargoAreaOverallLength": {
        "default": "",
        "required": false
    },
    "cargoDoor": {
        "default": "",
        "required": false
    },
    "certificateOfRegistration": {
        "default": "",
        "required": false
    },
    "compassSwing": {
        "default": "",
        "required": false
    },
    "configuration": {
        "default": "",
        "required": false
    },
    "crew": {
        "default": "",
        "required": false
    },
    "crewDoor": {
        "default": "",
        "required": false
    },
    "crewLifeVest": {
        "default": "",
        "required": false
    },
    "cvr": {
        "default": "",
        "required": false
    },
    "dme": {
        "default": "",
        "required": false
    },
    "dualAdfSystem": {
        "default": "",
        "required": false
    },
    "dualRadioNavigationSystem": {
        "default": "",
        "required": false
    },
    "dualVhfCommunication": {
        "default": "",
        "required": false
    },
    "earProtector": {
        "default": "",
        "required": false
    },
    "emergency": {
        "default": "",
        "required": false
    },
    "emergencyFloatationGear": {
        "default": "",
        "required": false
    },
    "emergencyLocateTransmitter": {
        "default": "",
        "required": false
    },
    "emptyWeight": {
        "default": "",
        "required": false
    },
    "engine": {
        "default": "",
        "required": false
    },
    "engineInstrument": {
        "default": "",
        "required": false
    },
    "externalCargoHook": {
        "default": "",
        "required": false
    },
    "firstAidKit": {
        "default": "",
        "required": false
    },
    "flightControl": {
        "default": "",
        "required": false
    },
    "flightDirector": {
        "default": "",
        "required": false
    },
    "floatingBeacon": {
        "default": "",
        "required": false
    },
    "fullDoc": {
        "default": "",
        "required": false
    },
    "gps": {
        "default": "",
        "required": false
    },
    "grossWeight": {
        "default": "",
        "required": false
    },
    "gyroMagneticCompass": {
        "default": "",
        "required": false
    },
    "hfCommunication": {
        "default": "",
        "required": false
    },
    "homer": {
        "default": "",
        "required": false
    },
    "hoverCeilingOge": {
        "default": "",
        "required": false
    },
    "idAircraft": {
        "required": false
    },
    "idAircraftDetail": {
        "required": true
    },
    "intercommunicationSystem": {
        "default": "",
        "required": false
    },
    "internalHoist": {
        "default": "",
        "required": false
    },
    "landingGear": {
        "default": "",
        "required": false
    },
    "landingLight": {
        "default": "",
        "required": false
    },
    "lifeRaft": {
        "default": "",
        "required": false
    },
    "lifeVest": {
        "default": "",
        "required": false
    },
    "mainCabinSpace": {
        "default": "",
        "required": false
    },
    "mainRotorDiscDiameter": {
        "default": "",
        "required": false
    },
    "mainRotorSystem": {
        "default": "",
        "required": false
    },
    "maximumBaggageCompartment": {
        "default": "",
        "required": false
    },
    "maximumContinuous": {
        "default": "",
        "required": false
    },
    "maximumSpeed": {
        "default": "",
        "required": false
    },
    "medicalStretcher": {
        "default": "",
        "required": false
    },
    "minute": {
        "default": "",
        "required": false
    },
    "moreDetail": {
        "default": "",
        "required": false
    },
    "outputPower": {
        "default": "",
        "required": false
    },
    "passenger": {
        "default": "",
        "required": false
    },
    "passengerDoorHeight": {
        "default": "",
        "required": false
    },
    "passengerDoorWidth": {
        "default": "",
        "required": false
    },
    "payload": {
        "default": "",
        "required": false
    },
    "personal": {
        "default": "",
        "required": false
    },
    "poweredBy": {
        "default": "",
        "required": false
    },
    "publicAddress": {
        "default": "",
        "required": false
    },
    "radioAltimeter": {
        "default": "",
        "required": false
    },
    "radioPermit": {
        "default": "",
        "required": false
    },
    "range": {
        "default": "",
        "required": false
    },
    "searchLight": {
        "default": "",
        "required": false
    },
    "standardFuelCapacity": {
        "default": "",
        "required": false
    },
    "survivalKit": {
        "default": "",
        "required": false
    },
    "tailRotorDiameter": {
        "default": "",
        "required": false
    },
    "tailRotorSystem": {
        "default": "",
        "required": false
    },
    "takeOff": {
        "default": "",
        "required": false
    },
    "total": {
        "default": 0,
        "required": false
    },
    "transponder": {
        "default": "",
        "required": false
    },
    "underwaterBeacon": {
        "default": "",
        "required": false
    },
    "updatedAt": {
        "default": "",
        "required": false
    },
    "usefulWeight": {
        "default": "",
        "required": false
    },
    "vor": {
        "default": "",
        "required": false
    },
    "weightAndBalance": {
        "default": "",
        "required": false
    },
    "withFullPassenger": {
        "default": "",
        "required": false
    },
    "wxRadar": {
        "default": "",
        "required": false
    },
    "yearOfManufacture": {
        "default": "",
        "required": false
    }
};

const AmimsAircraftDetailFormSchema = {
    "airworthiness": {
        "default": "",
        "required": false
    },
    "autoPilot": {
        "default": "",
        "required": false
    },
    "auxiliaryTank": {
        "default": "",
        "required": false
    },
    "baggageCompartmentSpace": {
        "default": "",
        "required": false
    },
    "cargoAreaMaximumHeight": {
        "default": "",
        "required": false
    },
    "cargoAreaOverallLength": {
        "default": "",
        "required": false
    },
    "cargoDoor": {
        "default": "",
        "required": false
    },
    "certificateOfRegistration": {
        "default": "",
        "required": false
    },
    "compassSwing": {
        "default": "",
        "required": false
    },
    "configuration": {
        "default": "",
        "required": false
    },
    "crew": {
        "default": "",
        "required": false
    },
    "crewDoor": {
        "default": "",
        "required": false
    },
    "crewLifeVest": {
        "default": "",
        "required": false
    },
    "cvr": {
        "default": "",
        "required": false
    },
    "dme": {
        "default": "",
        "required": false
    },
    "dualAdfSystem": {
        "default": "",
        "required": false
    },
    "dualRadioNavigationSystem": {
        "default": "",
        "required": false
    },
    "dualVhfCommunication": {
        "default": "",
        "required": false
    },
    "earProtector": {
        "default": "",
        "required": false
    },
    "emergency": {
        "default": "",
        "required": false
    },
    "emergencyFloatationGear": {
        "default": "",
        "required": false
    },
    "emergencyLocateTransmitter": {
        "default": "",
        "required": false
    },
    "emptyWeight": {
        "default": "",
        "required": false
    },
    "engine": {
        "default": "",
        "required": false
    },
    "engineInstrument": {
        "default": "",
        "required": false
    },
    "externalCargoHook": {
        "default": "",
        "required": false
    },
    "firstAidKit": {
        "default": "",
        "required": false
    },
    "flightControl": {
        "default": "",
        "required": false
    },
    "flightDirector": {
        "default": "",
        "required": false
    },
    "floatingBeacon": {
        "default": "",
        "required": false
    },
    "fullDoc": {
        "default": "",
        "required": false
    },
    "gps": {
        "default": "",
        "required": false
    },
    "grossWeight": {
        "default": "",
        "required": false
    },
    "gyroMagneticCompass": {
        "default": "",
        "required": false
    },
    "hfCommunication": {
        "default": "",
        "required": false
    },
    "homer": {
        "default": "",
        "required": false
    },
    "hoverCeilingOge": {
        "default": "",
        "required": false
    },
    "idAircraft": {
        "required": false
    },
    "idAircraftDetail": {
        "required": true
    },
    "intercommunicationSystem": {
        "default": "",
        "required": false
    },
    "internalHoist": {
        "default": "",
        "required": false
    },
    "landingGear": {
        "default": "",
        "required": false
    },
    "landingLight": {
        "default": "",
        "required": false
    },
    "lifeRaft": {
        "default": "",
        "required": false
    },
    "lifeVest": {
        "default": "",
        "required": false
    },
    "mainCabinSpace": {
        "default": "",
        "required": false
    },
    "mainRotorDiscDiameter": {
        "default": "",
        "required": false
    },
    "mainRotorSystem": {
        "default": "",
        "required": false
    },
    "maximumBaggageCompartment": {
        "default": "",
        "required": false
    },
    "maximumContinuous": {
        "default": "",
        "required": false
    },
    "maximumSpeed": {
        "default": "",
        "required": false
    },
    "medicalStretcher": {
        "default": "",
        "required": false
    },
    "minute": {
        "default": "",
        "required": false
    },
    "moreDetail": {
        "default": "",
        "required": false
    },
    "outputPower": {
        "default": "",
        "required": false
    },
    "passenger": {
        "default": "",
        "required": false
    },
    "passengerDoorHeight": {
        "default": "",
        "required": false
    },
    "passengerDoorWidth": {
        "default": "",
        "required": false
    },
    "payload": {
        "default": "",
        "required": false
    },
    "personal": {
        "default": "",
        "required": false
    },
    "poweredBy": {
        "default": "",
        "required": false
    },
    "publicAddress": {
        "default": "",
        "required": false
    },
    "radioAltimeter": {
        "default": "",
        "required": false
    },
    "radioPermit": {
        "default": "",
        "required": false
    },
    "range": {
        "default": "",
        "required": false
    },
    "searchLight": {
        "default": "",
        "required": false
    },
    "standardFuelCapacity": {
        "default": "",
        "required": false
    },
    "survivalKit": {
        "default": "",
        "required": false
    },
    "tailRotorDiameter": {
        "default": "",
        "required": false
    },
    "tailRotorSystem": {
        "default": "",
        "required": false
    },
    "takeOff": {
        "default": "",
        "required": false
    },
    "transponder": {
        "default": "",
        "required": false
    },
    "underwaterBeacon": {
        "default": "",
        "required": false
    },
    "updatedAt": {
        "default": "",
        "required": false
    },
    "usefulWeight": {
        "default": "",
        "required": false
    },
    "vor": {
        "default": "",
        "required": false
    },
    "weightAndBalance": {
        "default": "",
        "required": false
    },
    "withFullPassenger": {
        "default": "",
        "required": false
    },
    "wxRadar": {
        "default": "",
        "required": false
    },
    "yearOfManufacture": {
        "default": "",
        "required": false
    }
};

const AmimsAircraftReportFormSchema = {
    "acFoto": {
        "default": "",
        "required": false
    },
    "actype": {
        "default": "",
        "required": true
    },
    "createdAt": {
        "default": "",
        "required": false
    },
    "descriptionAircraft": {
        "default": "",
        "required": false
    },
    "hasapu": {
        "default": "",
        "required": false
    },
    "idActype": {
        "required": false
    },
    "idAircraft": {
        "required": true
    },
    "isDeleted": {
        "default": 0,
        "required": false
    },
    "keywordAircraft": {
        "default": "",
        "required": false
    },
    "manufactureAircraft": {
        "default": "",
        "required": false
    },
    "manufactureDate": {
        "default": "",
        "required": false
    },
    "manufactureEngine": {
        "default": "",
        "required": false
    },
    "manufacturedBy": {
        "default": "",
        "required": false
    },
    "oldActype": {
        "default": "",
        "required": false
    },
    "oldId": {
        "default": "",
        "required": false
    },
    "purchasedate": {
        "default": "",
        "required": false
    },
    "reasonRegschange": {
        "default": "",
        "required": false
    },
    "registrationNumber": {
        "default": "",
        "required": false
    },
    "serialNumber": {
        "default": "",
        "required": false
    },
    "statusAc": {
        "default": "",
        "required": false
    },
    "tendurance": {
        "default": 0,
        "required": false
    },
    "updatedAt": {
        "default": "",
        "required": false
    },
    "yearMade": {
        "default": "",
        "required": false
    }
};

const AmimsAircraftWidgetFormSchema = {
    "acFoto": {
        "default": "",
        "required": false
    },
    "createdAt": {
        "default": "",
        "required": false
    },
    "descriptionAircraft": {
        "default": "",
        "required": false
    },
    "hasapu": {
        "default": "",
        "required": false
    },
    "idActype": {
        "required": false
    },
    "idAircraft": {
        "required": true
    },
    "isDeleted": {
        "default": 0,
        "required": false
    },
    "keywordAircraft": {
        "default": "",
        "required": false
    },
    "manufactureAircraft": {
        "default": "",
        "required": false
    },
    "manufactureDate": {
        "default": "",
        "required": false
    },
    "manufactureEngine": {
        "default": "",
        "required": false
    },
    "manufacturedBy": {
        "default": "",
        "required": false
    },
    "oldActype": {
        "default": "",
        "required": false
    },
    "oldId": {
        "default": "",
        "required": false
    },
    "purchasedate": {
        "default": "",
        "required": false
    },
    "reasonRegschange": {
        "default": "",
        "required": false
    },
    "registrationNumber": {
        "default": "",
        "required": false
    },
    "serialNumber": {
        "default": "",
        "required": false
    },
    "statusAc": {
        "default": "",
        "required": false
    },
    "tendurance": {
        "default": 0,
        "required": false
    },
    "total": {
        "default": 0,
        "required": false
    },
    "updatedAt": {
        "default": "",
        "required": false
    },
    "yearMade": {
        "default": "",
        "required": false
    }
};

const AmimsAircraftFormSchema = {
    "acFoto": {
        "default": "",
        "required": false
    },
    "createdAt": {
        "default": "",
        "required": false
    },
    "descriptionAircraft": {
        "default": "",
        "required": false
    },
    "hasapu": {
        "default": "",
        "required": false
    },
    "idActype": {
        "required": false
    },
    "idAircraft": {
        "required": true
    },
    "isDeleted": {
        "default": 0,
        "required": false
    },
    "keywordAircraft": {
        "default": "",
        "required": false
    },
    "manufactureAircraft": {
        "default": "",
        "required": false
    },
    "manufactureDate": {
        "default": "",
        "required": false
    },
    "manufactureEngine": {
        "default": "",
        "required": false
    },
    "manufacturedBy": {
        "default": "",
        "required": false
    },
    "oldActype": {
        "default": "",
        "required": false
    },
    "oldId": {
        "default": "",
        "required": false
    },
    "purchasedate": {
        "default": "",
        "required": false
    },
    "reasonRegschange": {
        "default": "",
        "required": false
    },
    "registrationNumber": {
        "default": "",
        "required": false
    },
    "serialNumber": {
        "default": "",
        "required": false
    },
    "statusAc": {
        "default": "",
        "required": false
    },
    "tendurance": {
        "default": 0,
        "required": false
    },
    "updatedAt": {
        "default": "",
        "required": false
    },
    "yearMade": {
        "default": "",
        "required": false
    }
};

const AmimsAtaFormSchema = {
    "ata": {
        "default": "",
        "required": false
    },
    "ataType": {
        "default": "",
        "required": false
    },
    "codeAta": {
        "default": "",
        "required": false
    },
    "createdAt": {
        "default": "",
        "required": false
    },
    "idAta": {
        "required": true
    },
    "isDeleted": {
        "default": 0,
        "required": false
    },
    "keywordAta": {
        "default": "",
        "required": false
    },
    "oldId": {
        "default": "",
        "required": false
    },
    "updatedAt": {
        "default": "",
        "required": false
    }
};

const AmimsBinReportFormSchema = {
    "bin": {
        "default": "",
        "required": false
    },
    "code": {
        "default": "",
        "required": false
    },
    "createdAt": {
        "default": "",
        "required": false
    },
    "description": {
        "default": "",
        "required": false
    },
    "idBin": {
        "required": true
    },
    "idSite": {
        "required": false
    },
    "site": {
        "default": "",
        "required": true
    },
    "updatedAt": {
        "default": "",
        "required": false
    }
};

const AmimsBinWidgetFormSchema = {
    "bin": {
        "default": "",
        "required": false
    },
    "code": {
        "default": "",
        "required": false
    },
    "createdAt": {
        "default": "",
        "required": false
    },
    "description": {
        "default": "",
        "required": false
    },
    "idBin": {
        "required": true
    },
    "idSite": {
        "required": false
    },
    "total": {
        "default": 0,
        "required": false
    },
    "updatedAt": {
        "default": "",
        "required": false
    }
};

const AmimsBinFormSchema = {
    "bin": {
        "default": "",
        "required": false
    },
    "code": {
        "default": "",
        "required": false
    },
    "createdAt": {
        "default": "",
        "required": false
    },
    "description": {
        "default": "",
        "required": false
    },
    "idBin": {
        "required": true
    },
    "idSite": {
        "required": false
    },
    "updatedAt": {
        "default": "",
        "required": false
    }
};

const AmimsCompanyFormSchema = {
    "address1": {
        "default": "",
        "required": false
    },
    "address2": {
        "default": "",
        "required": false
    },
    "createdAt": {
        "default": "",
        "required": false
    },
    "email": {
        "default": "",
        "required": false
    },
    "fax": {
        "default": "",
        "required": false
    },
    "hasIdUser": {
        "default": 0,
        "required": false
    },
    "idCompany": {
        "required": true
    },
    "isDefault": {
        "default": 0,
        "required": false
    },
    "nameCompany": {
        "default": "",
        "required": false
    },
    "phone": {
        "default": "",
        "required": false
    },
    "statusCompany": {
        "default": "",
        "required": false
    },
    "updatedAt": {
        "default": "",
        "required": false
    },
    "website": {
        "default": "",
        "required": false
    }
};

const AmimsConditionMonitoringReportFormSchema = {
    "childnameConditionMonitoring": {
        "default": "",
        "required": false
    },
    "code": {
        "default": "",
        "required": false
    },
    "conditionMonitoring": {
        "default": "",
        "required": false
    },
    "idConditionMonitoring": {
        "required": true
    },
    "isDeleted": {
        "default": 0,
        "required": false
    }
};

const AmimsConditionMonitoringWidgetFormSchema = {
    "childnameConditionMonitoring": {
        "default": "",
        "required": false
    },
    "code": {
        "default": "",
        "required": false
    },
    "conditionMonitoring": {
        "default": "",
        "required": false
    },
    "idConditionMonitoring": {
        "required": true
    },
    "isDeleted": {
        "default": 0,
        "required": false
    },
    "total": {
        "default": 0,
        "required": false
    }
};

const AmimsConditionMonitoringFormSchema = {
    "childnameConditionMonitoring": {
        "default": "",
        "required": false
    },
    "code": {
        "default": "",
        "required": false
    },
    "conditionMonitoring": {
        "default": "",
        "required": false
    },
    "idConditionMonitoring": {
        "required": true
    },
    "isDeleted": {
        "default": 0,
        "required": false
    }
};

const AmimsCurrencyReportFormSchema = {
    "createdAt": {
        "default": "",
        "required": false
    },
    "effectiveDate": {
        "default": "",
        "required": false
    },
    "forcurrency": {
        "default": "",
        "required": false
    },
    "idCurrency": {
        "required": true
    },
    "idMcurrency": {
        "required": false
    },
    "idUser": {
        "required": false
    },
    "mcurrency": {
        "default": "",
        "required": true
    },
    "newValue": {
        "default": 0,
        "required": false
    },
    "noteCurrency": {
        "default": "",
        "required": false
    },
    "oldValue": {
        "default": 0,
        "required": false
    },
    "updatedAt": {
        "default": "",
        "required": false
    }
};

const AmimsCurrencyWidgetFormSchema = {
    "createdAt": {
        "default": "",
        "required": false
    },
    "effectiveDate": {
        "default": "",
        "required": false
    },
    "forcurrency": {
        "default": "",
        "required": false
    },
    "idCurrency": {
        "required": true
    },
    "idMcurrency": {
        "required": false
    },
    "idUser": {
        "required": false
    },
    "newValue": {
        "default": 0,
        "required": false
    },
    "noteCurrency": {
        "default": "",
        "required": false
    },
    "oldValue": {
        "default": 0,
        "required": false
    },
    "total": {
        "default": 0,
        "required": false
    },
    "updatedAt": {
        "default": "",
        "required": false
    }
};

const AmimsCurrencyFormSchema = {
    "createdAt": {
        "default": "",
        "required": false
    },
    "effectiveDate": {
        "default": "",
        "required": false
    },
    "forcurrency": {
        "default": "",
        "required": false
    },
    "idCurrency": {
        "required": true
    },
    "idMcurrency": {
        "required": false
    },
    "idUser": {
        "required": false
    },
    "newValue": {
        "default": 0,
        "required": false
    },
    "noteCurrency": {
        "default": "",
        "required": false
    },
    "oldValue": {
        "default": 0,
        "required": false
    },
    "updatedAt": {
        "default": "",
        "required": false
    }
};

const AmimsDoctypeFormSchema = {
    "childname": {
        "default": "",
        "required": false
    },
    "description": {
        "default": "",
        "required": false
    },
    "doctype": {
        "default": "",
        "required": false
    },
    "idDoctype": {
        "required": true
    },
    "lastupdatestamp": {
        "default": "",
        "required": false
    }
};

const AmimsDueListOutputReportFormSchema = {
    "aircraft": {
        "default": "",
        "required": true
    },
    "atInstall": {
        "default": "",
        "required": false
    },
    "ata": {
        "default": "",
        "required": false
    },
    "code": {
        "default": "",
        "required": false
    },
    "currentPart": {
        "default": "",
        "required": false
    },
    "dueAt": {
        "default": "",
        "required": false
    },
    "dueC": {
        "default": 0,
        "required": false
    },
    "dueH": {
        "default": 0,
        "required": false
    },
    "dueT": {
        "default": 0,
        "required": false
    },
    "idAircraft": {
        "required": false
    },
    "idDueList": {
        "required": false
    },
    "idDueListOutput": {
        "required": true
    },
    "idMpart": {
        "required": false
    },
    "idPart": {
        "required": false
    },
    "installPart": {
        "default": "",
        "required": false
    },
    "keyword": {
        "default": "",
        "required": false
    },
    "mpart": {
        "default": "",
        "required": true
    },
    "noteDue": {
        "default": "",
        "required": false
    },
    "part": {
        "default": "",
        "required": true
    },
    "partNumber": {
        "default": "",
        "required": false
    },
    "peruntukan": {
        "default": "",
        "required": false
    },
    "ramaining": {
        "default": 0,
        "required": false
    },
    "sn": {
        "default": "",
        "required": false
    },
    "toDue": {
        "default": 0,
        "required": false
    },
    "typeDue": {
        "default": "",
        "required": false
    },
    "typeOfwork": {
        "default": "",
        "required": false
    },
    "variabel": {
        "default": "",
        "required": false
    }
};

const AmimsDueListOutputWidgetFormSchema = {
    "atInstall": {
        "default": "",
        "required": false
    },
    "ata": {
        "default": "",
        "required": false
    },
    "code": {
        "default": "",
        "required": false
    },
    "currentPart": {
        "default": "",
        "required": false
    },
    "dueAt": {
        "default": "",
        "required": false
    },
    "dueC": {
        "default": 0,
        "required": false
    },
    "dueH": {
        "default": 0,
        "required": false
    },
    "dueT": {
        "default": 0,
        "required": false
    },
    "idAircraft": {
        "required": false
    },
    "idDueList": {
        "required": false
    },
    "idDueListOutput": {
        "required": true
    },
    "idMpart": {
        "required": false
    },
    "idPart": {
        "required": false
    },
    "installPart": {
        "default": "",
        "required": false
    },
    "keyword": {
        "default": "",
        "required": false
    },
    "noteDue": {
        "default": "",
        "required": false
    },
    "partNumber": {
        "default": "",
        "required": false
    },
    "peruntukan": {
        "default": "",
        "required": false
    },
    "ramaining": {
        "default": 0,
        "required": false
    },
    "sn": {
        "default": "",
        "required": false
    },
    "toDue": {
        "default": 0,
        "required": false
    },
    "total": {
        "default": 0,
        "required": false
    },
    "typeDue": {
        "default": "",
        "required": false
    },
    "typeOfwork": {
        "default": "",
        "required": false
    },
    "variabel": {
        "default": "",
        "required": false
    }
};

const AmimsDueListOutputFormSchema = {
    "atInstall": {
        "default": "",
        "required": false
    },
    "ata": {
        "default": "",
        "required": false
    },
    "code": {
        "default": "",
        "required": false
    },
    "currentPart": {
        "default": "",
        "required": false
    },
    "dueAt": {
        "default": "",
        "required": false
    },
    "dueC": {
        "default": 0,
        "required": false
    },
    "dueH": {
        "default": 0,
        "required": false
    },
    "dueT": {
        "default": 0,
        "required": false
    },
    "idAircraft": {
        "required": false
    },
    "idDueList": {
        "required": false
    },
    "idDueListOutput": {
        "required": true
    },
    "idMpart": {
        "required": false
    },
    "idPart": {
        "required": false
    },
    "installPart": {
        "default": "",
        "required": false
    },
    "keyword": {
        "default": "",
        "required": false
    },
    "noteDue": {
        "default": "",
        "required": false
    },
    "partNumber": {
        "default": "",
        "required": false
    },
    "peruntukan": {
        "default": "",
        "required": false
    },
    "ramaining": {
        "default": 0,
        "required": false
    },
    "sn": {
        "default": "",
        "required": false
    },
    "toDue": {
        "default": 0,
        "required": false
    },
    "typeDue": {
        "default": "",
        "required": false
    },
    "typeOfwork": {
        "default": "",
        "required": false
    },
    "variabel": {
        "default": "",
        "required": false
    }
};

const AmimsDueListReportFormSchema = {
    "aircraft": {
        "default": "",
        "required": true
    },
    "currentCycle": {
        "default": 0,
        "required": false
    },
    "currentHours": {
        "default": 0,
        "required": false
    },
    "cycleFrom": {
        "default": 0,
        "required": false
    },
    "cycleTo": {
        "default": 0,
        "required": false
    },
    "dateDue": {
        "default": "",
        "required": false
    },
    "dueAcCycle": {
        "default": 0,
        "required": false
    },
    "dueAcHours": {
        "default": 0,
        "required": false
    },
    "dueCycle": {
        "default": 0,
        "required": false
    },
    "dueDate": {
        "default": "",
        "required": false
    },
    "dueHours": {
        "default": 0,
        "required": false
    },
    "hoursFrom": {
        "default": 0,
        "required": false
    },
    "hoursTo": {
        "default": 0,
        "required": false
    },
    "idAircraft": {
        "required": false
    },
    "idDueList": {
        "required": true
    },
    "idMantenance": {
        "required": false
    },
    "idPart": {
        "required": false
    },
    "idTypeOfwork": {
        "required": false
    },
    "lastCycle": {
        "default": 0,
        "required": false
    },
    "lastDate": {
        "default": "",
        "required": false
    },
    "lastHours": {
        "default": 0,
        "required": false
    },
    "noteDue": {
        "default": "",
        "required": false
    },
    "onSite": {
        "default": 0,
        "required": false
    },
    "parentAss": {
        "default": "",
        "required": false
    },
    "parentCycle": {
        "default": 0,
        "required": false
    },
    "parentHours": {
        "default": 0,
        "required": false
    },
    "parentTime": {
        "default": 0,
        "required": false
    },
    "part": {
        "default": "",
        "required": true
    },
    "remainingCycle": {
        "default": 0,
        "required": false
    },
    "remainingDay": {
        "default": "",
        "required": false
    },
    "remainingHours": {
        "default": 0,
        "required": false
    },
    "sn": {
        "default": "",
        "required": false
    },
    "timeFrom": {
        "default": 0,
        "required": false
    },
    "timeTo": {
        "default": 0,
        "required": false
    },
    "timeUnit": {
        "default": "",
        "required": false
    },
    "typeDue": {
        "default": "",
        "required": false
    },
    "typeOfwork": {
        "default": "",
        "required": false
    }
};

const AmimsDueListWidgetFormSchema = {
    "currentCycle": {
        "default": 0,
        "required": false
    },
    "currentHours": {
        "default": 0,
        "required": false
    },
    "cycleFrom": {
        "default": 0,
        "required": false
    },
    "cycleTo": {
        "default": 0,
        "required": false
    },
    "dateDue": {
        "default": "",
        "required": false
    },
    "dueAcCycle": {
        "default": 0,
        "required": false
    },
    "dueAcHours": {
        "default": 0,
        "required": false
    },
    "dueCycle": {
        "default": 0,
        "required": false
    },
    "dueDate": {
        "default": "",
        "required": false
    },
    "dueHours": {
        "default": 0,
        "required": false
    },
    "hoursFrom": {
        "default": 0,
        "required": false
    },
    "hoursTo": {
        "default": 0,
        "required": false
    },
    "idAircraft": {
        "required": false
    },
    "idDueList": {
        "required": true
    },
    "idMantenance": {
        "required": false
    },
    "idPart": {
        "required": false
    },
    "idTypeOfwork": {
        "required": false
    },
    "lastCycle": {
        "default": 0,
        "required": false
    },
    "lastDate": {
        "default": "",
        "required": false
    },
    "lastHours": {
        "default": 0,
        "required": false
    },
    "noteDue": {
        "default": "",
        "required": false
    },
    "onSite": {
        "default": 0,
        "required": false
    },
    "parentAss": {
        "default": "",
        "required": false
    },
    "parentCycle": {
        "default": 0,
        "required": false
    },
    "parentHours": {
        "default": 0,
        "required": false
    },
    "parentTime": {
        "default": 0,
        "required": false
    },
    "remainingCycle": {
        "default": 0,
        "required": false
    },
    "remainingDay": {
        "default": "",
        "required": false
    },
    "remainingHours": {
        "default": 0,
        "required": false
    },
    "sn": {
        "default": "",
        "required": false
    },
    "timeFrom": {
        "default": 0,
        "required": false
    },
    "timeTo": {
        "default": 0,
        "required": false
    },
    "timeUnit": {
        "default": "",
        "required": false
    },
    "total": {
        "default": 0,
        "required": false
    },
    "typeDue": {
        "default": "",
        "required": false
    },
    "typeOfwork": {
        "default": "",
        "required": false
    }
};

const AmimsDueListFormSchema = {
    "currentCycle": {
        "default": 0,
        "required": false
    },
    "currentHours": {
        "default": 0,
        "required": false
    },
    "cycleFrom": {
        "default": 0,
        "required": false
    },
    "cycleTo": {
        "default": 0,
        "required": false
    },
    "dateDue": {
        "default": "",
        "required": false
    },
    "dueAcCycle": {
        "default": 0,
        "required": false
    },
    "dueAcHours": {
        "default": 0,
        "required": false
    },
    "dueCycle": {
        "default": 0,
        "required": false
    },
    "dueDate": {
        "default": "",
        "required": false
    },
    "dueHours": {
        "default": 0,
        "required": false
    },
    "hoursFrom": {
        "default": 0,
        "required": false
    },
    "hoursTo": {
        "default": 0,
        "required": false
    },
    "idAircraft": {
        "required": false
    },
    "idDueList": {
        "required": true
    },
    "idMantenance": {
        "required": false
    },
    "idPart": {
        "required": false
    },
    "idTypeOfwork": {
        "required": false
    },
    "lastCycle": {
        "default": 0,
        "required": false
    },
    "lastDate": {
        "default": "",
        "required": false
    },
    "lastHours": {
        "default": 0,
        "required": false
    },
    "noteDue": {
        "default": "",
        "required": false
    },
    "onSite": {
        "default": 0,
        "required": false
    },
    "parentAss": {
        "default": "",
        "required": false
    },
    "parentCycle": {
        "default": 0,
        "required": false
    },
    "parentHours": {
        "default": 0,
        "required": false
    },
    "parentTime": {
        "default": 0,
        "required": false
    },
    "remainingCycle": {
        "default": 0,
        "required": false
    },
    "remainingDay": {
        "default": "",
        "required": false
    },
    "remainingHours": {
        "default": 0,
        "required": false
    },
    "sn": {
        "default": "",
        "required": false
    },
    "timeFrom": {
        "default": 0,
        "required": false
    },
    "timeTo": {
        "default": 0,
        "required": false
    },
    "timeUnit": {
        "default": "",
        "required": false
    },
    "typeDue": {
        "default": "",
        "required": false
    },
    "typeOfwork": {
        "default": "",
        "required": false
    }
};

const AmimsEngineerPmtrItemReportFormSchema = {
    "createdAt": {
        "default": "",
        "required": false
    },
    "figureIndex": {
        "default": "",
        "required": false
    },
    "idEngineerPmtr": {
        "required": false
    },
    "idEngineerPmtrItem": {
        "required": true
    },
    "idMpart": {
        "required": false
    },
    "mpart": {
        "default": "",
        "required": true
    },
    "noteItemPmtr": {
        "default": "",
        "required": false
    },
    "priority": {
        "default": "",
        "required": false
    },
    "qtyPmtr": {
        "default": 0,
        "required": false
    },
    "updatedAt": {
        "default": "",
        "required": false
    }
};

const AmimsEngineerPmtrItemWidgetFormSchema = {
    "createdAt": {
        "default": "",
        "required": false
    },
    "figureIndex": {
        "default": "",
        "required": false
    },
    "idEngineerPmtr": {
        "required": false
    },
    "idEngineerPmtrItem": {
        "required": true
    },
    "idMpart": {
        "required": false
    },
    "noteItemPmtr": {
        "default": "",
        "required": false
    },
    "priority": {
        "default": "",
        "required": false
    },
    "qtyPmtr": {
        "default": 0,
        "required": false
    },
    "total": {
        "default": 0,
        "required": false
    },
    "updatedAt": {
        "default": "",
        "required": false
    }
};

const AmimsEngineerPmtrItemFormSchema = {
    "createdAt": {
        "default": "",
        "required": false
    },
    "figureIndex": {
        "default": "",
        "required": false
    },
    "idEngineerPmtr": {
        "required": false
    },
    "idEngineerPmtrItem": {
        "required": true
    },
    "idMpart": {
        "required": false
    },
    "noteItemPmtr": {
        "default": "",
        "required": false
    },
    "priority": {
        "default": "",
        "required": false
    },
    "qtyPmtr": {
        "default": 0,
        "required": false
    },
    "updatedAt": {
        "default": "",
        "required": false
    }
};

const AmimsEngineerPmtrReportFormSchema = {
    "aircraft": {
        "default": "",
        "required": true
    },
    "createdAt": {
        "default": "",
        "required": false
    },
    "dateAcc": {
        "default": "",
        "required": false
    },
    "datePmtr": {
        "default": "",
        "required": false
    },
    "fromSite": {
        "default": 0,
        "required": false
    },
    "idAircraft": {
        "required": false
    },
    "idEngineerPmtr": {
        "required": true
    },
    "idUser": {
        "required": false
    },
    "idUserAcc": {
        "required": false
    },
    "isDeleted": {
        "default": 0,
        "required": false
    },
    "noIndex": {
        "default": 0,
        "required": false
    },
    "notePmtr": {
        "default": "",
        "required": false
    },
    "numberPmtr": {
        "default": "",
        "required": false
    },
    "statusPmtr": {
        "default": "",
        "required": false
    },
    "toSite": {
        "default": 0,
        "required": false
    },
    "updatedAt": {
        "default": "",
        "required": false
    },
    "validasi": {
        "default": 0,
        "required": false
    }
};

const AmimsEngineerPmtrWidgetFormSchema = {
    "createdAt": {
        "default": "",
        "required": false
    },
    "dateAcc": {
        "default": "",
        "required": false
    },
    "datePmtr": {
        "default": "",
        "required": false
    },
    "fromSite": {
        "default": 0,
        "required": false
    },
    "idAircraft": {
        "required": false
    },
    "idEngineerPmtr": {
        "required": true
    },
    "idUser": {
        "required": false
    },
    "idUserAcc": {
        "required": false
    },
    "isDeleted": {
        "default": 0,
        "required": false
    },
    "noIndex": {
        "default": 0,
        "required": false
    },
    "notePmtr": {
        "default": "",
        "required": false
    },
    "numberPmtr": {
        "default": "",
        "required": false
    },
    "statusPmtr": {
        "default": "",
        "required": false
    },
    "toSite": {
        "default": 0,
        "required": false
    },
    "total": {
        "default": 0,
        "required": false
    },
    "updatedAt": {
        "default": "",
        "required": false
    },
    "validasi": {
        "default": 0,
        "required": false
    }
};

const AmimsEngineerPmtrFormSchema = {
    "createdAt": {
        "default": "",
        "required": false
    },
    "dateAcc": {
        "default": "",
        "required": false
    },
    "datePmtr": {
        "default": "",
        "required": false
    },
    "fromSite": {
        "default": 0,
        "required": false
    },
    "idAircraft": {
        "required": false
    },
    "idEngineerPmtr": {
        "required": true
    },
    "idUser": {
        "required": false
    },
    "idUserAcc": {
        "required": false
    },
    "isDeleted": {
        "default": 0,
        "required": false
    },
    "noIndex": {
        "default": 0,
        "required": false
    },
    "notePmtr": {
        "default": "",
        "required": false
    },
    "numberPmtr": {
        "default": "",
        "required": false
    },
    "statusPmtr": {
        "default": "",
        "required": false
    },
    "toSite": {
        "default": 0,
        "required": false
    },
    "updatedAt": {
        "default": "",
        "required": false
    },
    "validasi": {
        "default": 0,
        "required": false
    }
};

const AmimsEngineerPrisItemReportFormSchema = {
    "createdAt": {
        "default": "",
        "required": false
    },
    "fromPart": {
        "default": "",
        "required": false
    },
    "hashTechLog": {
        "default": "",
        "required": false
    },
    "idEngineerPris": {
        "required": false
    },
    "idEngineerPrisItem": {
        "required": true
    },
    "idPart": {
        "required": false
    },
    "idPartRemove": {
        "required": false
    },
    "isDeleted": {
        "default": 0,
        "required": false
    },
    "noteItemPris": {
        "default": "",
        "required": false
    },
    "part": {
        "default": "",
        "required": true
    },
    "partOnDate": {
        "default": "",
        "required": false
    },
    "qtyInstall": {
        "default": 0,
        "required": false
    },
    "qtyPris": {
        "default": 0,
        "required": false
    },
    "statusItem": {
        "default": "",
        "required": false
    },
    "tsnCycle": {
        "default": 0,
        "required": false
    },
    "tsnHours": {
        "default": 0,
        "required": false
    },
    "tsnVal": {
        "default": 0,
        "required": false
    },
    "tsoCycle": {
        "default": 0,
        "required": false
    },
    "tsoHours": {
        "default": 0,
        "required": false
    },
    "tsoVal": {
        "default": 0,
        "required": false
    },
    "updatedAt": {
        "default": "",
        "required": false
    }
};

const AmimsEngineerPrisItemWidgetFormSchema = {
    "createdAt": {
        "default": "",
        "required": false
    },
    "fromPart": {
        "default": "",
        "required": false
    },
    "hashTechLog": {
        "default": "",
        "required": false
    },
    "idEngineerPris": {
        "required": false
    },
    "idEngineerPrisItem": {
        "required": true
    },
    "idPart": {
        "required": false
    },
    "idPartRemove": {
        "required": false
    },
    "isDeleted": {
        "default": 0,
        "required": false
    },
    "noteItemPris": {
        "default": "",
        "required": false
    },
    "partOnDate": {
        "default": "",
        "required": false
    },
    "qtyInstall": {
        "default": 0,
        "required": false
    },
    "qtyPris": {
        "default": 0,
        "required": false
    },
    "statusItem": {
        "default": "",
        "required": false
    },
    "total": {
        "default": 0,
        "required": false
    },
    "tsnCycle": {
        "default": 0,
        "required": false
    },
    "tsnHours": {
        "default": 0,
        "required": false
    },
    "tsnVal": {
        "default": 0,
        "required": false
    },
    "tsoCycle": {
        "default": 0,
        "required": false
    },
    "tsoHours": {
        "default": 0,
        "required": false
    },
    "tsoVal": {
        "default": 0,
        "required": false
    },
    "updatedAt": {
        "default": "",
        "required": false
    }
};

const AmimsEngineerPrisItemFormSchema = {
    "createdAt": {
        "default": "",
        "required": false
    },
    "fromPart": {
        "default": "",
        "required": false
    },
    "hashTechLog": {
        "default": "",
        "required": false
    },
    "idEngineerPris": {
        "required": false
    },
    "idEngineerPrisItem": {
        "required": true
    },
    "idPart": {
        "required": false
    },
    "idPartRemove": {
        "required": false
    },
    "isDeleted": {
        "default": 0,
        "required": false
    },
    "noteItemPris": {
        "default": "",
        "required": false
    },
    "partOnDate": {
        "default": "",
        "required": false
    },
    "qtyInstall": {
        "default": 0,
        "required": false
    },
    "qtyPris": {
        "default": 0,
        "required": false
    },
    "statusItem": {
        "default": "",
        "required": false
    },
    "tsnCycle": {
        "default": 0,
        "required": false
    },
    "tsnHours": {
        "default": 0,
        "required": false
    },
    "tsnVal": {
        "default": 0,
        "required": false
    },
    "tsoCycle": {
        "default": 0,
        "required": false
    },
    "tsoHours": {
        "default": 0,
        "required": false
    },
    "tsoVal": {
        "default": 0,
        "required": false
    },
    "updatedAt": {
        "default": "",
        "required": false
    }
};

const AmimsEngineerPrisReportFormSchema = {
    "aircraft": {
        "default": "",
        "required": true
    },
    "createdAt": {
        "default": "",
        "required": false
    },
    "dateAcc": {
        "default": "",
        "required": false
    },
    "dateClose": {
        "default": "",
        "required": false
    },
    "dateInstall": {
        "default": "",
        "required": false
    },
    "dateIssued": {
        "default": "",
        "required": false
    },
    "datePris": {
        "default": "",
        "required": false
    },
    "description": {
        "default": "",
        "required": false
    },
    "idAircraft": {
        "required": false
    },
    "idEngineerPris": {
        "required": true
    },
    "idPosition": {
        "required": false
    },
    "idSite": {
        "required": false
    },
    "idUser": {
        "required": false
    },
    "idUserAcc": {
        "required": false
    },
    "idUserClose": {
        "required": false
    },
    "idUserIssued": {
        "required": false
    },
    "isDeleted": {
        "default": 0,
        "required": false
    },
    "keyword": {
        "default": "",
        "required": false
    },
    "noIndex": {
        "default": 0,
        "required": false
    },
    "notePris": {
        "default": "",
        "required": false
    },
    "numberJo": {
        "default": "",
        "required": false
    },
    "numberPris": {
        "default": "",
        "required": false
    },
    "numberWp": {
        "default": "",
        "required": false
    },
    "position": {
        "default": "",
        "required": true
    },
    "priority": {
        "default": "",
        "required": false
    },
    "site": {
        "default": "",
        "required": true
    },
    "statusPris": {
        "default": "",
        "required": false
    },
    "typePris": {
        "default": "",
        "required": false
    },
    "updatedAt": {
        "default": "",
        "required": false
    },
    "validasi": {
        "default": 0,
        "required": false
    }
};

const AmimsEngineerPrisReturnItemReportFormSchema = {
    "idEngineerPrisItem": {
        "required": false
    },
    "idEngineerPrisReturnItem": {
        "required": true
    },
    "isAccept": {
        "default": "",
        "required": false
    },
    "qtyReturn": {
        "default": 0,
        "required": false
    }
};

const AmimsEngineerPrisReturnItemWidgetFormSchema = {
    "idEngineerPrisItem": {
        "required": false
    },
    "idEngineerPrisReturnItem": {
        "required": true
    },
    "isAccept": {
        "default": "",
        "required": false
    },
    "qtyReturn": {
        "default": 0,
        "required": false
    },
    "total": {
        "default": 0,
        "required": false
    }
};

const AmimsEngineerPrisReturnItemFormSchema = {
    "idEngineerPrisItem": {
        "required": false
    },
    "idEngineerPrisReturnItem": {
        "required": true
    },
    "isAccept": {
        "default": "",
        "required": false
    },
    "qtyReturn": {
        "default": 0,
        "required": false
    }
};

const AmimsEngineerPrisReturnReportFormSchema = {
    "dateReturn": {
        "default": "",
        "required": false
    },
    "idEngineerPris": {
        "required": false
    },
    "idEngineerPrisReturn": {
        "required": true
    },
    "statusReturn": {
        "default": "",
        "required": false
    }
};

const AmimsEngineerPrisReturnWidgetFormSchema = {
    "dateReturn": {
        "default": "",
        "required": false
    },
    "idEngineerPris": {
        "required": false
    },
    "idEngineerPrisReturn": {
        "required": true
    },
    "statusReturn": {
        "default": "",
        "required": false
    },
    "total": {
        "default": 0,
        "required": false
    }
};

const AmimsEngineerPrisReturnFormSchema = {
    "dateReturn": {
        "default": "",
        "required": false
    },
    "idEngineerPris": {
        "required": false
    },
    "idEngineerPrisReturn": {
        "required": true
    },
    "statusReturn": {
        "default": "",
        "required": false
    }
};

const AmimsEngineerPrisWidgetFormSchema = {
    "createdAt": {
        "default": "",
        "required": false
    },
    "dateAcc": {
        "default": "",
        "required": false
    },
    "dateClose": {
        "default": "",
        "required": false
    },
    "dateInstall": {
        "default": "",
        "required": false
    },
    "dateIssued": {
        "default": "",
        "required": false
    },
    "datePris": {
        "default": "",
        "required": false
    },
    "description": {
        "default": "",
        "required": false
    },
    "idAircraft": {
        "required": false
    },
    "idEngineerPris": {
        "required": true
    },
    "idPosition": {
        "required": false
    },
    "idSite": {
        "required": false
    },
    "idUser": {
        "required": false
    },
    "idUserAcc": {
        "required": false
    },
    "idUserClose": {
        "required": false
    },
    "idUserIssued": {
        "required": false
    },
    "isDeleted": {
        "default": 0,
        "required": false
    },
    "keyword": {
        "default": "",
        "required": false
    },
    "noIndex": {
        "default": 0,
        "required": false
    },
    "notePris": {
        "default": "",
        "required": false
    },
    "numberJo": {
        "default": "",
        "required": false
    },
    "numberPris": {
        "default": "",
        "required": false
    },
    "numberWp": {
        "default": "",
        "required": false
    },
    "priority": {
        "default": "",
        "required": false
    },
    "statusPris": {
        "default": "",
        "required": false
    },
    "total": {
        "default": 0,
        "required": false
    },
    "typePris": {
        "default": "",
        "required": false
    },
    "updatedAt": {
        "default": "",
        "required": false
    },
    "validasi": {
        "default": 0,
        "required": false
    }
};

const AmimsEngineerPrisFormSchema = {
    "createdAt": {
        "default": "",
        "required": false
    },
    "dateAcc": {
        "default": "",
        "required": false
    },
    "dateClose": {
        "default": "",
        "required": false
    },
    "dateInstall": {
        "default": "",
        "required": false
    },
    "dateIssued": {
        "default": "",
        "required": false
    },
    "datePris": {
        "default": "",
        "required": false
    },
    "description": {
        "default": "",
        "required": false
    },
    "idAircraft": {
        "required": false
    },
    "idEngineerPris": {
        "required": true
    },
    "idPosition": {
        "required": false
    },
    "idSite": {
        "required": false
    },
    "idUser": {
        "required": false
    },
    "idUserAcc": {
        "required": false
    },
    "idUserClose": {
        "required": false
    },
    "idUserIssued": {
        "required": false
    },
    "isDeleted": {
        "default": 0,
        "required": false
    },
    "keyword": {
        "default": "",
        "required": false
    },
    "noIndex": {
        "default": 0,
        "required": false
    },
    "notePris": {
        "default": "",
        "required": false
    },
    "numberJo": {
        "default": "",
        "required": false
    },
    "numberPris": {
        "default": "",
        "required": false
    },
    "numberWp": {
        "default": "",
        "required": false
    },
    "priority": {
        "default": "",
        "required": false
    },
    "statusPris": {
        "default": "",
        "required": false
    },
    "typePris": {
        "default": "",
        "required": false
    },
    "updatedAt": {
        "default": "",
        "required": false
    },
    "validasi": {
        "default": 0,
        "required": false
    }
};

const AmimsEngineerRtiIdentifyReportFormSchema = {
    "dateInstall": {
        "default": "",
        "required": false
    },
    "idEngineerRti": {
        "required": false
    },
    "idEngineerRtiIdentify": {
        "required": true
    },
    "idPart": {
        "required": false
    },
    "idPartInstall": {
        "required": false
    },
    "parent": {
        "default": "",
        "required": false
    },
    "part": {
        "default": "",
        "required": true
    },
    "tsiCycle": {
        "default": 0,
        "required": false
    },
    "tsiHours": {
        "default": 0,
        "required": false
    },
    "tsiVal": {
        "default": 0,
        "required": false
    },
    "tsiVar": {
        "default": "",
        "required": false
    },
    "tsnCycle": {
        "default": 0,
        "required": false
    },
    "tsnHours": {
        "default": 0,
        "required": false
    },
    "tsnVal": {
        "default": 0,
        "required": false
    },
    "tsnVar": {
        "default": "",
        "required": false
    },
    "tsoCycle": {
        "default": 0,
        "required": false
    },
    "tsoHours": {
        "default": 0,
        "required": false
    },
    "tsoVal": {
        "default": 0,
        "required": false
    },
    "tsoVar": {
        "default": "",
        "required": false
    },
    "warantyStartCycle": {
        "default": 0,
        "required": false
    },
    "warantyStartDate": {
        "default": "",
        "required": false
    },
    "warantyStartDays": {
        "default": 0,
        "required": false
    },
    "warantyStartHours": {
        "default": 0,
        "required": false
    }
};

const AmimsEngineerRtiIdentifyWidgetFormSchema = {
    "dateInstall": {
        "default": "",
        "required": false
    },
    "idEngineerRti": {
        "required": false
    },
    "idEngineerRtiIdentify": {
        "required": true
    },
    "idPart": {
        "required": false
    },
    "idPartInstall": {
        "required": false
    },
    "parent": {
        "default": "",
        "required": false
    },
    "total": {
        "default": 0,
        "required": false
    },
    "tsiCycle": {
        "default": 0,
        "required": false
    },
    "tsiHours": {
        "default": 0,
        "required": false
    },
    "tsiVal": {
        "default": 0,
        "required": false
    },
    "tsiVar": {
        "default": "",
        "required": false
    },
    "tsnCycle": {
        "default": 0,
        "required": false
    },
    "tsnHours": {
        "default": 0,
        "required": false
    },
    "tsnVal": {
        "default": 0,
        "required": false
    },
    "tsnVar": {
        "default": "",
        "required": false
    },
    "tsoCycle": {
        "default": 0,
        "required": false
    },
    "tsoHours": {
        "default": 0,
        "required": false
    },
    "tsoVal": {
        "default": 0,
        "required": false
    },
    "tsoVar": {
        "default": "",
        "required": false
    },
    "warantyStartCycle": {
        "default": 0,
        "required": false
    },
    "warantyStartDate": {
        "default": "",
        "required": false
    },
    "warantyStartDays": {
        "default": 0,
        "required": false
    },
    "warantyStartHours": {
        "default": 0,
        "required": false
    }
};

const AmimsEngineerRtiIdentifyFormSchema = {
    "dateInstall": {
        "default": "",
        "required": false
    },
    "idEngineerRti": {
        "required": false
    },
    "idEngineerRtiIdentify": {
        "required": true
    },
    "idPart": {
        "required": false
    },
    "idPartInstall": {
        "required": false
    },
    "parent": {
        "default": "",
        "required": false
    },
    "tsiCycle": {
        "default": 0,
        "required": false
    },
    "tsiHours": {
        "default": 0,
        "required": false
    },
    "tsiVal": {
        "default": 0,
        "required": false
    },
    "tsiVar": {
        "default": "",
        "required": false
    },
    "tsnCycle": {
        "default": 0,
        "required": false
    },
    "tsnHours": {
        "default": 0,
        "required": false
    },
    "tsnVal": {
        "default": 0,
        "required": false
    },
    "tsnVar": {
        "default": "",
        "required": false
    },
    "tsoCycle": {
        "default": 0,
        "required": false
    },
    "tsoHours": {
        "default": 0,
        "required": false
    },
    "tsoVal": {
        "default": 0,
        "required": false
    },
    "tsoVar": {
        "default": "",
        "required": false
    },
    "warantyStartCycle": {
        "default": 0,
        "required": false
    },
    "warantyStartDate": {
        "default": "",
        "required": false
    },
    "warantyStartDays": {
        "default": 0,
        "required": false
    },
    "warantyStartHours": {
        "default": 0,
        "required": false
    }
};

const AmimsEngineerRtiPartReportFormSchema = {
    "dateInstall": {
        "default": "",
        "required": false
    },
    "idEngineerRti": {
        "required": false
    },
    "idEngineerRtiPart": {
        "required": true
    },
    "idPart": {
        "required": false
    },
    "idPartInstall": {
        "required": false
    },
    "parent": {
        "default": "",
        "required": false
    },
    "part": {
        "default": "",
        "required": true
    },
    "tsiCycle": {
        "default": 0,
        "required": false
    },
    "tsiHours": {
        "default": 0,
        "required": false
    },
    "tsiVal": {
        "default": 0,
        "required": false
    },
    "tsiVar": {
        "default": "",
        "required": false
    },
    "tsnCycle": {
        "default": 0,
        "required": false
    },
    "tsnHours": {
        "default": 0,
        "required": false
    },
    "tsnVal": {
        "default": 0,
        "required": false
    },
    "tsnVar": {
        "default": "",
        "required": false
    },
    "tsoCycle": {
        "default": 0,
        "required": false
    },
    "tsoHours": {
        "default": 0,
        "required": false
    },
    "tsoVal": {
        "default": 0,
        "required": false
    },
    "tsoVar": {
        "default": "",
        "required": false
    },
    "warantyStartCycle": {
        "default": 0,
        "required": false
    },
    "warantyStartDate": {
        "default": "",
        "required": false
    },
    "warantyStartDays": {
        "default": 0,
        "required": false
    },
    "warantyStartHours": {
        "default": 0,
        "required": false
    }
};

const AmimsEngineerRtiPartWidgetFormSchema = {
    "dateInstall": {
        "default": "",
        "required": false
    },
    "idEngineerRti": {
        "required": false
    },
    "idEngineerRtiPart": {
        "required": true
    },
    "idPart": {
        "required": false
    },
    "idPartInstall": {
        "required": false
    },
    "parent": {
        "default": "",
        "required": false
    },
    "total": {
        "default": 0,
        "required": false
    },
    "tsiCycle": {
        "default": 0,
        "required": false
    },
    "tsiHours": {
        "default": 0,
        "required": false
    },
    "tsiVal": {
        "default": 0,
        "required": false
    },
    "tsiVar": {
        "default": "",
        "required": false
    },
    "tsnCycle": {
        "default": 0,
        "required": false
    },
    "tsnHours": {
        "default": 0,
        "required": false
    },
    "tsnVal": {
        "default": 0,
        "required": false
    },
    "tsnVar": {
        "default": "",
        "required": false
    },
    "tsoCycle": {
        "default": 0,
        "required": false
    },
    "tsoHours": {
        "default": 0,
        "required": false
    },
    "tsoVal": {
        "default": 0,
        "required": false
    },
    "tsoVar": {
        "default": "",
        "required": false
    },
    "warantyStartCycle": {
        "default": 0,
        "required": false
    },
    "warantyStartDate": {
        "default": "",
        "required": false
    },
    "warantyStartDays": {
        "default": 0,
        "required": false
    },
    "warantyStartHours": {
        "default": 0,
        "required": false
    }
};

const AmimsEngineerRtiPartFormSchema = {
    "dateInstall": {
        "default": "",
        "required": false
    },
    "idEngineerRti": {
        "required": false
    },
    "idEngineerRtiPart": {
        "required": true
    },
    "idPart": {
        "required": false
    },
    "idPartInstall": {
        "required": false
    },
    "parent": {
        "default": "",
        "required": false
    },
    "tsiCycle": {
        "default": 0,
        "required": false
    },
    "tsiHours": {
        "default": 0,
        "required": false
    },
    "tsiVal": {
        "default": 0,
        "required": false
    },
    "tsiVar": {
        "default": "",
        "required": false
    },
    "tsnCycle": {
        "default": 0,
        "required": false
    },
    "tsnHours": {
        "default": 0,
        "required": false
    },
    "tsnVal": {
        "default": 0,
        "required": false
    },
    "tsnVar": {
        "default": "",
        "required": false
    },
    "tsoCycle": {
        "default": 0,
        "required": false
    },
    "tsoHours": {
        "default": 0,
        "required": false
    },
    "tsoVal": {
        "default": 0,
        "required": false
    },
    "tsoVar": {
        "default": "",
        "required": false
    },
    "warantyStartCycle": {
        "default": 0,
        "required": false
    },
    "warantyStartDate": {
        "default": "",
        "required": false
    },
    "warantyStartDays": {
        "default": 0,
        "required": false
    },
    "warantyStartHours": {
        "default": 0,
        "required": false
    }
};

const AmimsEngineerRtiReportFormSchema = {
    "aircraft": {
        "default": "",
        "required": true
    },
    "base": {
        "default": "",
        "required": false
    },
    "createdAt": {
        "default": "",
        "required": false
    },
    "dateRti": {
        "default": "",
        "required": false
    },
    "dispotition": {
        "default": 0,
        "required": false
    },
    "hasPris": {
        "default": "",
        "required": false
    },
    "hashProcess": {
        "default": "",
        "required": false
    },
    "hashRpd": {
        "default": "",
        "required": false
    },
    "hashTechLog": {
        "default": "",
        "required": false
    },
    "idAircraft": {
        "required": false
    },
    "idEngineerRti": {
        "required": true
    },
    "idMpcJo": {
        "required": false
    },
    "idPart": {
        "required": false
    },
    "idPartInstall": {
        "required": false
    },
    "idSite": {
        "required": false
    },
    "inspectedBy": {
        "default": 0,
        "required": false
    },
    "numberRti": {
        "default": "",
        "required": false
    },
    "part": {
        "default": "",
        "required": true
    },
    "reason": {
        "default": "",
        "required": false
    },
    "receivedBy": {
        "default": 0,
        "required": false
    },
    "remainingHours": {
        "default": 0,
        "required": false
    },
    "remarkDisposisi": {
        "default": "",
        "required": false
    },
    "returnBy": {
        "default": 0,
        "required": false
    },
    "site": {
        "default": "",
        "required": true
    },
    "statusRti": {
        "default": "",
        "required": false
    },
    "statusService": {
        "default": "",
        "required": false
    },
    "tsnCycle": {
        "default": 0,
        "required": false
    },
    "tsnCycleParent": {
        "default": 0,
        "required": false
    },
    "tsnHours": {
        "default": 0,
        "required": false
    },
    "tsnHoursParent": {
        "default": 0,
        "required": false
    },
    "tsnVal": {
        "default": 0,
        "required": false
    },
    "tsnVar": {
        "default": "",
        "required": false
    },
    "tsoCycle": {
        "default": 0,
        "required": false
    },
    "tsoHours": {
        "default": 0,
        "required": false
    },
    "tsoVal": {
        "default": 0,
        "required": false
    },
    "tsoVar": {
        "default": "",
        "required": false
    },
    "typeRti": {
        "default": "",
        "required": false
    },
    "updatedAt": {
        "default": "",
        "required": false
    }
};

const AmimsEngineerRtiWidgetFormSchema = {
    "base": {
        "default": "",
        "required": false
    },
    "createdAt": {
        "default": "",
        "required": false
    },
    "dateRti": {
        "default": "",
        "required": false
    },
    "dispotition": {
        "default": 0,
        "required": false
    },
    "hasPris": {
        "default": "",
        "required": false
    },
    "hashProcess": {
        "default": "",
        "required": false
    },
    "hashRpd": {
        "default": "",
        "required": false
    },
    "hashTechLog": {
        "default": "",
        "required": false
    },
    "idAircraft": {
        "required": false
    },
    "idEngineerRti": {
        "required": true
    },
    "idMpcJo": {
        "required": false
    },
    "idPart": {
        "required": false
    },
    "idPartInstall": {
        "required": false
    },
    "idSite": {
        "required": false
    },
    "inspectedBy": {
        "default": 0,
        "required": false
    },
    "numberRti": {
        "default": "",
        "required": false
    },
    "reason": {
        "default": "",
        "required": false
    },
    "receivedBy": {
        "default": 0,
        "required": false
    },
    "remainingHours": {
        "default": 0,
        "required": false
    },
    "remarkDisposisi": {
        "default": "",
        "required": false
    },
    "returnBy": {
        "default": 0,
        "required": false
    },
    "statusRti": {
        "default": "",
        "required": false
    },
    "statusService": {
        "default": "",
        "required": false
    },
    "total": {
        "default": 0,
        "required": false
    },
    "tsnCycle": {
        "default": 0,
        "required": false
    },
    "tsnCycleParent": {
        "default": 0,
        "required": false
    },
    "tsnHours": {
        "default": 0,
        "required": false
    },
    "tsnHoursParent": {
        "default": 0,
        "required": false
    },
    "tsnVal": {
        "default": 0,
        "required": false
    },
    "tsnVar": {
        "default": "",
        "required": false
    },
    "tsoCycle": {
        "default": 0,
        "required": false
    },
    "tsoHours": {
        "default": 0,
        "required": false
    },
    "tsoVal": {
        "default": 0,
        "required": false
    },
    "tsoVar": {
        "default": "",
        "required": false
    },
    "typeRti": {
        "default": "",
        "required": false
    },
    "updatedAt": {
        "default": "",
        "required": false
    }
};

const AmimsEngineerRtiFormSchema = {
    "base": {
        "default": "",
        "required": false
    },
    "createdAt": {
        "default": "",
        "required": false
    },
    "dateRti": {
        "default": "",
        "required": false
    },
    "dispotition": {
        "default": 0,
        "required": false
    },
    "hasPris": {
        "default": "",
        "required": false
    },
    "hashProcess": {
        "default": "",
        "required": false
    },
    "hashRpd": {
        "default": "",
        "required": false
    },
    "hashTechLog": {
        "default": "",
        "required": false
    },
    "idAircraft": {
        "required": false
    },
    "idEngineerRti": {
        "required": true
    },
    "idMpcJo": {
        "required": false
    },
    "idPart": {
        "required": false
    },
    "idPartInstall": {
        "required": false
    },
    "idSite": {
        "required": false
    },
    "inspectedBy": {
        "default": 0,
        "required": false
    },
    "numberRti": {
        "default": "",
        "required": false
    },
    "reason": {
        "default": "",
        "required": false
    },
    "receivedBy": {
        "default": 0,
        "required": false
    },
    "remainingHours": {
        "default": 0,
        "required": false
    },
    "remarkDisposisi": {
        "default": "",
        "required": false
    },
    "returnBy": {
        "default": 0,
        "required": false
    },
    "statusRti": {
        "default": "",
        "required": false
    },
    "statusService": {
        "default": "",
        "required": false
    },
    "tsnCycle": {
        "default": 0,
        "required": false
    },
    "tsnCycleParent": {
        "default": 0,
        "required": false
    },
    "tsnHours": {
        "default": 0,
        "required": false
    },
    "tsnHoursParent": {
        "default": 0,
        "required": false
    },
    "tsnVal": {
        "default": 0,
        "required": false
    },
    "tsnVar": {
        "default": "",
        "required": false
    },
    "tsoCycle": {
        "default": 0,
        "required": false
    },
    "tsoHours": {
        "default": 0,
        "required": false
    },
    "tsoVal": {
        "default": 0,
        "required": false
    },
    "tsoVar": {
        "default": "",
        "required": false
    },
    "typeRti": {
        "default": "",
        "required": false
    },
    "updatedAt": {
        "default": "",
        "required": false
    }
};

const AmimsFigureIndexFormSchema = {
    "description": {
        "default": "",
        "required": false
    },
    "figureIndex": {
        "default": "",
        "required": false
    },
    "idAta": {
        "required": false
    },
    "idFigureIndex": {
        "required": true
    }
};

const AmimsInspectionReportFormSchema = {
    "aircraft": {
        "default": "",
        "required": true
    },
    "atachapter": {
        "default": "",
        "required": false
    },
    "createdAt": {
        "default": "",
        "required": false
    },
    "cycleTo": {
        "default": 0,
        "required": false
    },
    "flightHoursTo": {
        "default": 0,
        "required": false
    },
    "idAircraft": {
        "required": false
    },
    "idInspection": {
        "required": true
    },
    "idMaintenanceCode": {
        "required": false
    },
    "idPart": {
        "required": false
    },
    "idUser": {
        "required": false
    },
    "noteInspection": {
        "default": "",
        "required": false
    },
    "oldId": {
        "default": "",
        "required": false
    },
    "part": {
        "default": "",
        "required": true
    },
    "repetitions": {
        "default": 0,
        "required": false
    },
    "timeRangeTo": {
        "default": 0,
        "required": false
    },
    "timeUnit": {
        "default": "",
        "required": false
    },
    "updatedAt": {
        "default": "",
        "required": false
    }
};

const AmimsInspectionWidgetFormSchema = {
    "atachapter": {
        "default": "",
        "required": false
    },
    "createdAt": {
        "default": "",
        "required": false
    },
    "cycleTo": {
        "default": 0,
        "required": false
    },
    "flightHoursTo": {
        "default": 0,
        "required": false
    },
    "idAircraft": {
        "required": false
    },
    "idInspection": {
        "required": true
    },
    "idMaintenanceCode": {
        "required": false
    },
    "idPart": {
        "required": false
    },
    "idUser": {
        "required": false
    },
    "noteInspection": {
        "default": "",
        "required": false
    },
    "oldId": {
        "default": "",
        "required": false
    },
    "repetitions": {
        "default": 0,
        "required": false
    },
    "timeRangeTo": {
        "default": 0,
        "required": false
    },
    "timeUnit": {
        "default": "",
        "required": false
    },
    "total": {
        "default": 0,
        "required": false
    },
    "updatedAt": {
        "default": "",
        "required": false
    }
};

const AmimsInspectionFormSchema = {
    "atachapter": {
        "default": "",
        "required": false
    },
    "createdAt": {
        "default": "",
        "required": false
    },
    "cycleTo": {
        "default": 0,
        "required": false
    },
    "flightHoursTo": {
        "default": 0,
        "required": false
    },
    "idAircraft": {
        "required": false
    },
    "idInspection": {
        "required": true
    },
    "idMaintenanceCode": {
        "required": false
    },
    "idPart": {
        "required": false
    },
    "idUser": {
        "required": false
    },
    "noteInspection": {
        "default": "",
        "required": false
    },
    "oldId": {
        "default": "",
        "required": false
    },
    "repetitions": {
        "default": 0,
        "required": false
    },
    "timeRangeTo": {
        "default": 0,
        "required": false
    },
    "timeUnit": {
        "default": "",
        "required": false
    },
    "updatedAt": {
        "default": "",
        "required": false
    }
};

const AmimsInternalGrnItemReportFormSchema = {
    "createdAt": {
        "default": "",
        "required": false
    },
    "idEngineerPrisItem": {
        "required": false
    },
    "idInternalGrn": {
        "required": false
    },
    "idInternalGrnItem": {
        "required": true
    },
    "idMpart": {
        "required": false
    },
    "idPart": {
        "required": false
    },
    "mpart": {
        "default": "",
        "required": true
    },
    "part": {
        "default": "",
        "required": true
    },
    "qtyGrn": {
        "default": 0,
        "required": false
    },
    "remark": {
        "default": "",
        "required": false
    },
    "statusItem": {
        "default": "",
        "required": false
    },
    "updatedAt": {
        "default": "",
        "required": false
    }
};

const AmimsInternalGrnItemWidgetFormSchema = {
    "createdAt": {
        "default": "",
        "required": false
    },
    "idEngineerPrisItem": {
        "required": false
    },
    "idInternalGrn": {
        "required": false
    },
    "idInternalGrnItem": {
        "required": true
    },
    "idMpart": {
        "required": false
    },
    "idPart": {
        "required": false
    },
    "qtyGrn": {
        "default": 0,
        "required": false
    },
    "remark": {
        "default": "",
        "required": false
    },
    "statusItem": {
        "default": "",
        "required": false
    },
    "total": {
        "default": 0,
        "required": false
    },
    "updatedAt": {
        "default": "",
        "required": false
    }
};

const AmimsInternalGrnItemFormSchema = {
    "createdAt": {
        "default": "",
        "required": false
    },
    "idEngineerPrisItem": {
        "required": false
    },
    "idInternalGrn": {
        "required": false
    },
    "idInternalGrnItem": {
        "required": true
    },
    "idMpart": {
        "required": false
    },
    "idPart": {
        "required": false
    },
    "qtyGrn": {
        "default": 0,
        "required": false
    },
    "remark": {
        "default": "",
        "required": false
    },
    "statusItem": {
        "default": "",
        "required": false
    },
    "updatedAt": {
        "default": "",
        "required": false
    }
};

const AmimsInternalGrnReportFormSchema = {
    "createdAt": {
        "default": "",
        "required": false
    },
    "dateAcc": {
        "default": "",
        "required": false
    },
    "dateGrn": {
        "default": "",
        "required": false
    },
    "idInternalGrn": {
        "required": true
    },
    "idSite": {
        "required": false
    },
    "idUser": {
        "required": false
    },
    "idUserAcc": {
        "required": false
    },
    "numberGrn": {
        "default": "",
        "required": false
    },
    "remark": {
        "default": "",
        "required": false
    },
    "site": {
        "default": "",
        "required": true
    },
    "statusGrn": {
        "default": "",
        "required": false
    },
    "updatedAt": {
        "default": "",
        "required": false
    },
    "validasi": {
        "default": 0,
        "required": false
    }
};

const AmimsInternalGrnWidgetFormSchema = {
    "createdAt": {
        "default": "",
        "required": false
    },
    "dateAcc": {
        "default": "",
        "required": false
    },
    "dateGrn": {
        "default": "",
        "required": false
    },
    "idInternalGrn": {
        "required": true
    },
    "idSite": {
        "required": false
    },
    "idUser": {
        "required": false
    },
    "idUserAcc": {
        "required": false
    },
    "numberGrn": {
        "default": "",
        "required": false
    },
    "remark": {
        "default": "",
        "required": false
    },
    "statusGrn": {
        "default": "",
        "required": false
    },
    "total": {
        "default": 0,
        "required": false
    },
    "updatedAt": {
        "default": "",
        "required": false
    },
    "validasi": {
        "default": 0,
        "required": false
    }
};

const AmimsInternalGrnFormSchema = {
    "createdAt": {
        "default": "",
        "required": false
    },
    "dateAcc": {
        "default": "",
        "required": false
    },
    "dateGrn": {
        "default": "",
        "required": false
    },
    "idInternalGrn": {
        "required": true
    },
    "idSite": {
        "required": false
    },
    "idUser": {
        "required": false
    },
    "idUserAcc": {
        "required": false
    },
    "numberGrn": {
        "default": "",
        "required": false
    },
    "remark": {
        "default": "",
        "required": false
    },
    "statusGrn": {
        "default": "",
        "required": false
    },
    "updatedAt": {
        "default": "",
        "required": false
    },
    "validasi": {
        "default": 0,
        "required": false
    }
};

const AmimsLastMaintenanceReportFormSchema = {
    "createdAt": {
        "default": "",
        "required": false
    },
    "idLastMaintenance": {
        "required": true
    },
    "idMaintenance": {
        "required": false
    },
    "idMpcJo": {
        "required": false
    },
    "idPart": {
        "required": false
    },
    "idUser": {
        "required": false
    },
    "lastCycle": {
        "default": 0,
        "required": false
    },
    "lastDate": {
        "default": "",
        "required": false
    },
    "lastHours": {
        "default": 0,
        "required": false
    },
    "maintenance": {
        "default": "",
        "required": true
    },
    "oldId": {
        "default": "",
        "required": false
    },
    "parentCycle": {
        "default": 0,
        "required": false
    },
    "parentHours": {
        "default": 0,
        "required": false
    },
    "part": {
        "default": "",
        "required": true
    },
    "typeOfWork": {
        "default": 0,
        "required": false
    },
    "updatedAt": {
        "default": "",
        "required": false
    }
};

const AmimsLastMaintenanceWidgetFormSchema = {
    "createdAt": {
        "default": "",
        "required": false
    },
    "idLastMaintenance": {
        "required": true
    },
    "idMaintenance": {
        "required": false
    },
    "idMpcJo": {
        "required": false
    },
    "idPart": {
        "required": false
    },
    "idUser": {
        "required": false
    },
    "lastCycle": {
        "default": 0,
        "required": false
    },
    "lastDate": {
        "default": "",
        "required": false
    },
    "lastHours": {
        "default": 0,
        "required": false
    },
    "oldId": {
        "default": "",
        "required": false
    },
    "parentCycle": {
        "default": 0,
        "required": false
    },
    "parentHours": {
        "default": 0,
        "required": false
    },
    "total": {
        "default": 0,
        "required": false
    },
    "typeOfWork": {
        "default": 0,
        "required": false
    },
    "updatedAt": {
        "default": "",
        "required": false
    }
};

const AmimsLastMaintenanceFormSchema = {
    "createdAt": {
        "default": "",
        "required": false
    },
    "idLastMaintenance": {
        "required": true
    },
    "idMaintenance": {
        "required": false
    },
    "idMpcJo": {
        "required": false
    },
    "idPart": {
        "required": false
    },
    "idUser": {
        "required": false
    },
    "lastCycle": {
        "default": 0,
        "required": false
    },
    "lastDate": {
        "default": "",
        "required": false
    },
    "lastHours": {
        "default": 0,
        "required": false
    },
    "oldId": {
        "default": "",
        "required": false
    },
    "parentCycle": {
        "default": 0,
        "required": false
    },
    "parentHours": {
        "default": 0,
        "required": false
    },
    "typeOfWork": {
        "default": 0,
        "required": false
    },
    "updatedAt": {
        "default": "",
        "required": false
    }
};

const AmimsLibFormIssuedFormSchema = {
    "createdAt": {
        "default": "",
        "required": false
    },
    "idLibFormIssued": {
        "required": true
    },
    "lastUpdate": {
        "default": "",
        "required": false
    },
    "nameFile": {
        "default": "",
        "required": false
    },
    "numberForm": {
        "default": "",
        "required": false
    },
    "numberW": {
        "default": "",
        "required": false
    },
    "revision": {
        "default": "",
        "required": false
    },
    "updatedAt": {
        "default": "",
        "required": false
    }
};

const AmimsLibReferenceFormSchema = {
    "createdAt": {
        "default": "",
        "required": false
    },
    "idLibReference": {
        "required": true
    },
    "lastUpdate": {
        "default": "",
        "required": false
    },
    "nameFile": {
        "default": "",
        "required": false
    },
    "numberReference": {
        "default": "",
        "required": false
    },
    "updatedAt": {
        "default": "",
        "required": false
    }
};

const AmimsLibUploadFormSchema = {
    "category": {
        "default": "",
        "required": false
    },
    "createdAt": {
        "default": "",
        "required": false
    },
    "fileDate": {
        "default": "",
        "required": false
    },
    "fileName": {
        "default": "",
        "required": false
    },
    "fileNumber": {
        "default": "",
        "required": false
    },
    "forModule": {
        "default": "",
        "required": false
    },
    "idLibUpload": {
        "required": true
    },
    "idModule": {
        "required": false
    },
    "updatedAt": {
        "default": "",
        "required": false
    }
};

const AmimsLifeTimeLimitReportFormSchema = {
    "childnameLifeTimeLimit": {
        "default": "",
        "required": false
    },
    "idLifeTimeLimit": {
        "required": true
    },
    "isDeleted": {
        "default": 0,
        "required": false
    },
    "lifeTimeLimit": {
        "default": "",
        "required": false
    }
};

const AmimsLifeTimeLimitWidgetFormSchema = {
    "childnameLifeTimeLimit": {
        "default": "",
        "required": false
    },
    "idLifeTimeLimit": {
        "required": true
    },
    "isDeleted": {
        "default": 0,
        "required": false
    },
    "lifeTimeLimit": {
        "default": "",
        "required": false
    },
    "total": {
        "default": 0,
        "required": false
    }
};

const AmimsLifeTimeLimitFormSchema = {
    "childnameLifeTimeLimit": {
        "default": "",
        "required": false
    },
    "idLifeTimeLimit": {
        "required": true
    },
    "isDeleted": {
        "default": 0,
        "required": false
    },
    "lifeTimeLimit": {
        "default": "",
        "required": false
    }
};

const AmimsLocationFlightReportFormSchema = {
    "address": {
        "default": "",
        "required": false
    },
    "createdAt": {
        "default": "",
        "required": false
    },
    "idLocationFlight": {
        "required": true
    },
    "lat": {
        "default": "",
        "required": false
    },
    "lon": {
        "default": "",
        "required": false
    },
    "nameLocation": {
        "default": "",
        "required": false
    },
    "statusLocation": {
        "default": "",
        "required": false
    },
    "updatedAt": {
        "default": "",
        "required": false
    }
};

const AmimsLocationFlightWidgetFormSchema = {
    "address": {
        "default": "",
        "required": false
    },
    "createdAt": {
        "default": "",
        "required": false
    },
    "idLocationFlight": {
        "required": true
    },
    "lat": {
        "default": "",
        "required": false
    },
    "lon": {
        "default": "",
        "required": false
    },
    "nameLocation": {
        "default": "",
        "required": false
    },
    "statusLocation": {
        "default": "",
        "required": false
    },
    "total": {
        "default": 0,
        "required": false
    },
    "updatedAt": {
        "default": "",
        "required": false
    }
};

const AmimsLocationFlightFormSchema = {
    "address": {
        "default": "",
        "required": false
    },
    "createdAt": {
        "default": "",
        "required": false
    },
    "idLocationFlight": {
        "required": true
    },
    "lat": {
        "default": "",
        "required": false
    },
    "lon": {
        "default": "",
        "required": false
    },
    "nameLocation": {
        "default": "",
        "required": false
    },
    "statusLocation": {
        "default": "",
        "required": false
    },
    "updatedAt": {
        "default": "",
        "required": false
    }
};

const AmimsLogProcessReportFormSchema = {
    "adj1": {
        "default": 0,
        "required": false
    },
    "adj2": {
        "default": 0,
        "required": false
    },
    "adj3": {
        "default": 0,
        "required": false
    },
    "bugIndexLog": {
        "default": 0,
        "required": false
    },
    "calculatedCycle": {
        "default": "",
        "required": false
    },
    "calculatedHours": {
        "default": "",
        "required": false
    },
    "cgPenalti": {
        "default": "",
        "required": false
    },
    "cycle": {
        "default": 0,
        "required": false
    },
    "cycleBf": {
        "default": 0,
        "required": false
    },
    "cycleCf": {
        "default": 0,
        "required": false
    },
    "cycleFlight": {
        "default": 0,
        "required": false
    },
    "factor1": {
        "default": 0,
        "required": false
    },
    "factor2": {
        "default": 0,
        "required": false
    },
    "factor3": {
        "default": 0,
        "required": false
    },
    "fullCycleBf": {
        "default": 0,
        "required": false
    },
    "fullCycleFlt": {
        "default": 0,
        "required": false
    },
    "hasFor": {
        "default": "",
        "required": false
    },
    "hasUpdate": {
        "default": 0,
        "required": false
    },
    "hoistLeft": {
        "default": 0,
        "required": false
    },
    "hoistOperation": {
        "default": "",
        "required": false
    },
    "hoistRight": {
        "default": 0,
        "required": false
    },
    "hoistUsage": {
        "default": 0,
        "required": false
    },
    "hours": {
        "default": 0,
        "required": false
    },
    "hoursBf": {
        "default": 0,
        "required": false
    },
    "hoursCf": {
        "default": 0,
        "required": false
    },
    "hoursFlight": {
        "default": 0,
        "required": false
    },
    "idLogProcess": {
        "required": true
    },
    "idMpart": {
        "required": false
    },
    "idPart": {
        "required": false
    },
    "idPartInstall": {
        "required": false
    },
    "idTechLog": {
        "required": false
    },
    "landings": {
        "default": 0,
        "required": false
    },
    "mpart": {
        "default": "",
        "required": true
    },
    "n1": {
        "default": 0,
        "required": false
    },
    "n2": {
        "default": 0,
        "required": false
    },
    "parent": {
        "default": "",
        "required": false
    },
    "part": {
        "default": "",
        "required": true
    },
    "partCycleBf": {
        "default": 0,
        "required": false
    },
    "partCycleFlt": {
        "default": 0,
        "required": false
    },
    "rumusCycle": {
        "default": "",
        "required": false
    },
    "rumusHours": {
        "default": "",
        "required": false
    },
    "sn": {
        "default": "",
        "required": false
    },
    "timeAboveBf": {
        "default": 0,
        "required": false
    },
    "timeAboveFlt": {
        "default": 0,
        "required": false
    },
    "tsnCycle": {
        "default": 0,
        "required": false
    },
    "tsnHours": {
        "default": 0,
        "required": false
    },
    "useHoistLeft": {
        "default": 0,
        "required": false
    },
    "useHoistRight": {
        "default": 0,
        "required": false
    },
    "xcycleInput": {
        "default": 0,
        "required": false
    }
};

const AmimsLogProcessWidgetFormSchema = {
    "adj1": {
        "default": 0,
        "required": false
    },
    "adj2": {
        "default": 0,
        "required": false
    },
    "adj3": {
        "default": 0,
        "required": false
    },
    "bugIndexLog": {
        "default": 0,
        "required": false
    },
    "calculatedCycle": {
        "default": "",
        "required": false
    },
    "calculatedHours": {
        "default": "",
        "required": false
    },
    "cgPenalti": {
        "default": "",
        "required": false
    },
    "cycle": {
        "default": 0,
        "required": false
    },
    "cycleBf": {
        "default": 0,
        "required": false
    },
    "cycleCf": {
        "default": 0,
        "required": false
    },
    "cycleFlight": {
        "default": 0,
        "required": false
    },
    "factor1": {
        "default": 0,
        "required": false
    },
    "factor2": {
        "default": 0,
        "required": false
    },
    "factor3": {
        "default": 0,
        "required": false
    },
    "fullCycleBf": {
        "default": 0,
        "required": false
    },
    "fullCycleFlt": {
        "default": 0,
        "required": false
    },
    "hasFor": {
        "default": "",
        "required": false
    },
    "hasUpdate": {
        "default": 0,
        "required": false
    },
    "hoistLeft": {
        "default": 0,
        "required": false
    },
    "hoistOperation": {
        "default": "",
        "required": false
    },
    "hoistRight": {
        "default": 0,
        "required": false
    },
    "hoistUsage": {
        "default": 0,
        "required": false
    },
    "hours": {
        "default": 0,
        "required": false
    },
    "hoursBf": {
        "default": 0,
        "required": false
    },
    "hoursCf": {
        "default": 0,
        "required": false
    },
    "hoursFlight": {
        "default": 0,
        "required": false
    },
    "idLogProcess": {
        "required": true
    },
    "idMpart": {
        "required": false
    },
    "idPart": {
        "required": false
    },
    "idPartInstall": {
        "required": false
    },
    "idTechLog": {
        "required": false
    },
    "landings": {
        "default": 0,
        "required": false
    },
    "n1": {
        "default": 0,
        "required": false
    },
    "n2": {
        "default": 0,
        "required": false
    },
    "parent": {
        "default": "",
        "required": false
    },
    "partCycleBf": {
        "default": 0,
        "required": false
    },
    "partCycleFlt": {
        "default": 0,
        "required": false
    },
    "rumusCycle": {
        "default": "",
        "required": false
    },
    "rumusHours": {
        "default": "",
        "required": false
    },
    "sn": {
        "default": "",
        "required": false
    },
    "timeAboveBf": {
        "default": 0,
        "required": false
    },
    "timeAboveFlt": {
        "default": 0,
        "required": false
    },
    "total": {
        "default": 0,
        "required": false
    },
    "tsnCycle": {
        "default": 0,
        "required": false
    },
    "tsnHours": {
        "default": 0,
        "required": false
    },
    "useHoistLeft": {
        "default": 0,
        "required": false
    },
    "useHoistRight": {
        "default": 0,
        "required": false
    },
    "xcycleInput": {
        "default": 0,
        "required": false
    }
};

const AmimsLogProcessFormSchema = {
    "adj1": {
        "default": 0,
        "required": false
    },
    "adj2": {
        "default": 0,
        "required": false
    },
    "adj3": {
        "default": 0,
        "required": false
    },
    "bugIndexLog": {
        "default": 0,
        "required": false
    },
    "calculatedCycle": {
        "default": "",
        "required": false
    },
    "calculatedHours": {
        "default": "",
        "required": false
    },
    "cgPenalti": {
        "default": "",
        "required": false
    },
    "cycle": {
        "default": 0,
        "required": false
    },
    "cycleBf": {
        "default": 0,
        "required": false
    },
    "cycleCf": {
        "default": 0,
        "required": false
    },
    "cycleFlight": {
        "default": 0,
        "required": false
    },
    "factor1": {
        "default": 0,
        "required": false
    },
    "factor2": {
        "default": 0,
        "required": false
    },
    "factor3": {
        "default": 0,
        "required": false
    },
    "fullCycleBf": {
        "default": 0,
        "required": false
    },
    "fullCycleFlt": {
        "default": 0,
        "required": false
    },
    "hasFor": {
        "default": "",
        "required": false
    },
    "hasUpdate": {
        "default": 0,
        "required": false
    },
    "hoistLeft": {
        "default": 0,
        "required": false
    },
    "hoistOperation": {
        "default": "",
        "required": false
    },
    "hoistRight": {
        "default": 0,
        "required": false
    },
    "hoistUsage": {
        "default": 0,
        "required": false
    },
    "hours": {
        "default": 0,
        "required": false
    },
    "hoursBf": {
        "default": 0,
        "required": false
    },
    "hoursCf": {
        "default": 0,
        "required": false
    },
    "hoursFlight": {
        "default": 0,
        "required": false
    },
    "idLogProcess": {
        "required": true
    },
    "idMpart": {
        "required": false
    },
    "idPart": {
        "required": false
    },
    "idPartInstall": {
        "required": false
    },
    "idTechLog": {
        "required": false
    },
    "landings": {
        "default": 0,
        "required": false
    },
    "n1": {
        "default": 0,
        "required": false
    },
    "n2": {
        "default": 0,
        "required": false
    },
    "parent": {
        "default": "",
        "required": false
    },
    "partCycleBf": {
        "default": 0,
        "required": false
    },
    "partCycleFlt": {
        "default": 0,
        "required": false
    },
    "rumusCycle": {
        "default": "",
        "required": false
    },
    "rumusHours": {
        "default": "",
        "required": false
    },
    "sn": {
        "default": "",
        "required": false
    },
    "timeAboveBf": {
        "default": 0,
        "required": false
    },
    "timeAboveFlt": {
        "default": 0,
        "required": false
    },
    "tsnCycle": {
        "default": 0,
        "required": false
    },
    "tsnHours": {
        "default": 0,
        "required": false
    },
    "useHoistLeft": {
        "default": 0,
        "required": false
    },
    "useHoistRight": {
        "default": 0,
        "required": false
    },
    "xcycleInput": {
        "default": 0,
        "required": false
    }
};

const AmimsLogSpReportFormSchema = {
    "createdAt": {
        "default": "",
        "required": false
    },
    "dateClose": {
        "default": "",
        "required": false
    },
    "desk": {
        "default": "",
        "required": false
    },
    "hasId": {
        "default": "",
        "required": false
    },
    "id": {
        "required": false
    },
    "idLogSp": {
        "required": true
    },
    "name": {
        "default": "",
        "required": false
    },
    "param1": {
        "default": "",
        "required": false
    },
    "param2": {
        "default": "",
        "required": false
    },
    "sp": {
        "default": "",
        "required": false
    },
    "status": {
        "default": "",
        "required": false
    }
};

const AmimsLogSpWidgetFormSchema = {
    "createdAt": {
        "default": "",
        "required": false
    },
    "dateClose": {
        "default": "",
        "required": false
    },
    "desk": {
        "default": "",
        "required": false
    },
    "hasId": {
        "default": "",
        "required": false
    },
    "id": {
        "required": false
    },
    "idLogSp": {
        "required": true
    },
    "name": {
        "default": "",
        "required": false
    },
    "param1": {
        "default": "",
        "required": false
    },
    "param2": {
        "default": "",
        "required": false
    },
    "sp": {
        "default": "",
        "required": false
    },
    "status": {
        "default": "",
        "required": false
    },
    "total": {
        "default": 0,
        "required": false
    }
};

const AmimsLogSpFormSchema = {
    "createdAt": {
        "default": "",
        "required": false
    },
    "dateClose": {
        "default": "",
        "required": false
    },
    "desk": {
        "default": "",
        "required": false
    },
    "hasId": {
        "default": "",
        "required": false
    },
    "id": {
        "required": false
    },
    "idLogSp": {
        "required": true
    },
    "name": {
        "default": "",
        "required": false
    },
    "param1": {
        "default": "",
        "required": false
    },
    "param2": {
        "default": "",
        "required": false
    },
    "sp": {
        "default": "",
        "required": false
    },
    "status": {
        "default": "",
        "required": false
    }
};

const AmimsLogTransferReportFormSchema = {
    "dateTransfer": {
        "default": "",
        "required": false
    },
    "fromIdPart": {
        "default": "",
        "required": false
    },
    "fromSite": {
        "default": "",
        "required": false
    },
    "idLogTransfer": {
        "required": true
    },
    "idMpart": {
        "required": false
    },
    "idUser": {
        "required": false
    },
    "issingle": {
        "default": "",
        "required": false
    },
    "mpart": {
        "default": "",
        "required": true
    },
    "qty": {
        "default": 0,
        "required": false
    },
    "toIdPart": {
        "default": "",
        "required": false
    },
    "toSite": {
        "default": 0,
        "required": false
    }
};

const AmimsLogTransferWidgetFormSchema = {
    "dateTransfer": {
        "default": "",
        "required": false
    },
    "fromIdPart": {
        "default": "",
        "required": false
    },
    "fromSite": {
        "default": "",
        "required": false
    },
    "idLogTransfer": {
        "required": true
    },
    "idMpart": {
        "required": false
    },
    "idUser": {
        "required": false
    },
    "issingle": {
        "default": "",
        "required": false
    },
    "qty": {
        "default": 0,
        "required": false
    },
    "toIdPart": {
        "default": "",
        "required": false
    },
    "toSite": {
        "default": 0,
        "required": false
    },
    "total": {
        "default": 0,
        "required": false
    }
};

const AmimsLogTransferFormSchema = {
    "dateTransfer": {
        "default": "",
        "required": false
    },
    "fromIdPart": {
        "default": "",
        "required": false
    },
    "fromSite": {
        "default": "",
        "required": false
    },
    "idLogTransfer": {
        "required": true
    },
    "idMpart": {
        "required": false
    },
    "idUser": {
        "required": false
    },
    "issingle": {
        "default": "",
        "required": false
    },
    "qty": {
        "default": 0,
        "required": false
    },
    "toIdPart": {
        "default": "",
        "required": false
    },
    "toSite": {
        "default": 0,
        "required": false
    }
};

const AmimsLogTsnTsoReportFormSchema = {
    "batasId": {
        "default": "",
        "required": false
    },
    "createdAt": {
        "default": "",
        "required": false
    },
    "cycle": {
        "default": 0,
        "required": false
    },
    "hours": {
        "default": 0,
        "required": false
    },
    "idLogTsnTso": {
        "required": true
    },
    "idPart": {
        "required": false
    },
    "idTechLog": {
        "required": false
    },
    "part": {
        "default": "",
        "required": true
    },
    "tsnC": {
        "default": 0,
        "required": false
    },
    "tsnH": {
        "default": 0,
        "required": false
    },
    "tsoC": {
        "default": 0,
        "required": false
    },
    "tsoH": {
        "default": 0,
        "required": false
    }
};

const AmimsLogTsnTsoWidgetFormSchema = {
    "batasId": {
        "default": "",
        "required": false
    },
    "createdAt": {
        "default": "",
        "required": false
    },
    "cycle": {
        "default": 0,
        "required": false
    },
    "hours": {
        "default": 0,
        "required": false
    },
    "idLogTsnTso": {
        "required": true
    },
    "idPart": {
        "required": false
    },
    "idTechLog": {
        "required": false
    },
    "total": {
        "default": 0,
        "required": false
    },
    "tsnC": {
        "default": 0,
        "required": false
    },
    "tsnH": {
        "default": 0,
        "required": false
    },
    "tsoC": {
        "default": 0,
        "required": false
    },
    "tsoH": {
        "default": 0,
        "required": false
    }
};

const AmimsLogTsnTsoFormSchema = {
    "batasId": {
        "default": "",
        "required": false
    },
    "createdAt": {
        "default": "",
        "required": false
    },
    "cycle": {
        "default": 0,
        "required": false
    },
    "hours": {
        "default": 0,
        "required": false
    },
    "idLogTsnTso": {
        "required": true
    },
    "idPart": {
        "required": false
    },
    "idTechLog": {
        "required": false
    },
    "tsnC": {
        "default": 0,
        "required": false
    },
    "tsnH": {
        "default": 0,
        "required": false
    },
    "tsoC": {
        "default": 0,
        "required": false
    },
    "tsoH": {
        "default": 0,
        "required": false
    }
};

const AmimsLogUserFormSchema = {
    "dateLog": {
        "default": "",
        "required": false
    },
    "idLogUser": {
        "required": true
    },
    "idUser": {
        "required": false
    },
    "method": {
        "default": "",
        "required": false
    },
    "methodValue": {
        "default": "",
        "required": false
    },
    "typeIdKey": {
        "default": "",
        "required": false
    },
    "typeLog": {
        "default": "",
        "required": false
    },
    "typeValue": {
        "default": "",
        "required": false
    },
    "typeWork": {
        "default": "",
        "required": false
    }
};

const AmimsMaintenanceCodeFormIssuedFormSchema = {
    "idLibFormIssued": {
        "required": false
    },
    "idMaintenanceCode": {
        "required": false
    },
    "idMaintenanceCodeFormIssued": {
        "required": true
    }
};

const AmimsMaintenanceCodeReferenceFormSchema = {
    "idLibReference": {
        "required": false
    },
    "idMaintenanceCode": {
        "required": false
    },
    "idMaintenanceCodeReference": {
        "required": true
    }
};

const AmimsMaintenanceCodeReportFormSchema = {
    "classification": {
        "default": "",
        "required": false
    },
    "createdAt": {
        "default": "",
        "required": false
    },
    "descriptionMaintenance": {
        "default": "",
        "required": false
    },
    "idMaintenanceCode": {
        "required": true
    },
    "isDeleted": {
        "default": 0,
        "required": false
    },
    "maintenanceCode": {
        "default": "",
        "required": false
    },
    "oldId": {
        "default": "",
        "required": false
    },
    "reference": {
        "default": "",
        "required": false
    },
    "updatedAt": {
        "default": "",
        "required": false
    }
};

const AmimsMaintenanceCodeWidgetFormSchema = {
    "classification": {
        "default": "",
        "required": false
    },
    "createdAt": {
        "default": "",
        "required": false
    },
    "descriptionMaintenance": {
        "default": "",
        "required": false
    },
    "idMaintenanceCode": {
        "required": true
    },
    "isDeleted": {
        "default": 0,
        "required": false
    },
    "maintenanceCode": {
        "default": "",
        "required": false
    },
    "oldId": {
        "default": "",
        "required": false
    },
    "reference": {
        "default": "",
        "required": false
    },
    "total": {
        "default": 0,
        "required": false
    },
    "updatedAt": {
        "default": "",
        "required": false
    }
};

const AmimsMaintenanceCodeFormSchema = {
    "classification": {
        "default": "",
        "required": false
    },
    "createdAt": {
        "default": "",
        "required": false
    },
    "descriptionMaintenance": {
        "default": "",
        "required": false
    },
    "idMaintenanceCode": {
        "required": true
    },
    "isDeleted": {
        "default": 0,
        "required": false
    },
    "maintenanceCode": {
        "default": "",
        "required": false
    },
    "oldId": {
        "default": "",
        "required": false
    },
    "reference": {
        "default": "",
        "required": false
    },
    "updatedAt": {
        "default": "",
        "required": false
    }
};

const AmimsMaintenanceDocumentFormSchema = {
    "createdAt": {
        "default": "",
        "required": false
    },
    "documentTitle": {
        "default": "",
        "required": false
    },
    "documentType": {
        "default": "",
        "required": false
    },
    "idMaintenance": {
        "required": false
    },
    "idMaintenanceDocument": {
        "required": true
    },
    "revision": {
        "default": "",
        "required": false
    },
    "statusAktif": {
        "default": "",
        "required": false
    },
    "updatedAt": {
        "default": "",
        "required": false
    }
};

const AmimsMaintenanceMaterialFormSchema = {
    "createdAt": {
        "default": "",
        "required": false
    },
    "idMaintenance": {
        "required": false
    },
    "idMaintenanceMaterial": {
        "required": true
    },
    "idMpart": {
        "required": false
    },
    "isSpecialTool": {
        "default": false,
        "required": false
    },
    "itemName": {
        "default": "",
        "required": false
    },
    "itemType": {
        "default": "",
        "required": false
    },
    "partNumber": {
        "default": "",
        "required": false
    },
    "quantity": {
        "default": 0,
        "required": false
    },
    "status": {
        "default": "",
        "required": false
    },
    "toolCode": {
        "default": "",
        "required": false
    },
    "unit": {
        "default": "",
        "required": false
    },
    "updatedAt": {
        "default": "",
        "required": false
    }
};

const AmimsMaintenanceReportFormSchema = {
    "atachapter": {
        "default": "",
        "required": false
    },
    "createdAt": {
        "default": "",
        "required": false
    },
    "cycleFrom": {
        "default": 0,
        "required": false
    },
    "cycleTo": {
        "default": 0,
        "required": false
    },
    "flightHoursFrom": {
        "default": 0,
        "required": false
    },
    "flightHoursTo": {
        "default": 0,
        "required": false
    },
    "idMaintenance": {
        "required": true
    },
    "idMaintenanceCode": {
        "required": false
    },
    "idMpart": {
        "required": false
    },
    "idUser": {
        "required": false
    },
    "mpart": {
        "default": "",
        "required": true
    },
    "noteMaintenance": {
        "default": "",
        "required": false
    },
    "oldId": {
        "default": "",
        "required": false
    },
    "onLocation": {
        "default": "",
        "required": false
    },
    "repetitions": {
        "default": 0,
        "required": false
    },
    "timeRangeForm": {
        "default": 0,
        "required": false
    },
    "timeRangeTo": {
        "default": 0,
        "required": false
    },
    "timeUnit": {
        "default": "",
        "required": false
    },
    "typeMaintenance": {
        "default": "",
        "required": false
    },
    "updatedAt": {
        "default": "",
        "required": false
    }
};

const AmimsMaintenanceWidgetFormSchema = {
    "atachapter": {
        "default": "",
        "required": false
    },
    "createdAt": {
        "default": "",
        "required": false
    },
    "cycleFrom": {
        "default": 0,
        "required": false
    },
    "cycleTo": {
        "default": 0,
        "required": false
    },
    "flightHoursFrom": {
        "default": 0,
        "required": false
    },
    "flightHoursTo": {
        "default": 0,
        "required": false
    },
    "idMaintenance": {
        "required": true
    },
    "idMaintenanceCode": {
        "required": false
    },
    "idMpart": {
        "required": false
    },
    "idUser": {
        "required": false
    },
    "noteMaintenance": {
        "default": "",
        "required": false
    },
    "oldId": {
        "default": "",
        "required": false
    },
    "onLocation": {
        "default": "",
        "required": false
    },
    "repetitions": {
        "default": 0,
        "required": false
    },
    "timeRangeForm": {
        "default": 0,
        "required": false
    },
    "timeRangeTo": {
        "default": 0,
        "required": false
    },
    "timeUnit": {
        "default": "",
        "required": false
    },
    "total": {
        "default": 0,
        "required": false
    },
    "typeMaintenance": {
        "default": "",
        "required": false
    },
    "updatedAt": {
        "default": "",
        "required": false
    }
};

const AmimsMaintenanceFormSchema = {
    "atachapter": {
        "default": "",
        "required": false
    },
    "createdAt": {
        "default": "",
        "required": false
    },
    "cycleFrom": {
        "default": 0,
        "required": false
    },
    "cycleTo": {
        "default": 0,
        "required": false
    },
    "flightHoursFrom": {
        "default": 0,
        "required": false
    },
    "flightHoursTo": {
        "default": 0,
        "required": false
    },
    "idMaintenance": {
        "required": true
    },
    "idMaintenanceCode": {
        "required": false
    },
    "idMpart": {
        "required": false
    },
    "idUser": {
        "required": false
    },
    "noteMaintenance": {
        "default": "",
        "required": false
    },
    "oldId": {
        "default": "",
        "required": false
    },
    "onLocation": {
        "default": "",
        "required": false
    },
    "repetitions": {
        "default": 0,
        "required": false
    },
    "timeRangeForm": {
        "default": 0,
        "required": false
    },
    "timeRangeTo": {
        "default": 0,
        "required": false
    },
    "timeUnit": {
        "default": "",
        "required": false
    },
    "typeMaintenance": {
        "default": "",
        "required": false
    },
    "updatedAt": {
        "default": "",
        "required": false
    }
};

const AmimsMcurrencyFormSchema = {
    "code": {
        "default": "",
        "required": false
    },
    "createdAt": {
        "default": "",
        "required": false
    },
    "currency": {
        "default": "",
        "required": false
    },
    "idMcurrency": {
        "required": true
    },
    "isDeleted": {
        "default": 0,
        "required": false
    },
    "statusCurrency": {
        "default": "",
        "required": false
    },
    "updatedAt": {
        "default": "",
        "required": false
    },
    "usdRate": {
        "default": 0,
        "required": false
    }
};

const AmimsMelFormSchema = {
    "day": {
        "default": 0,
        "required": false
    },
    "descriptionMel": {
        "default": "",
        "required": false
    },
    "idMel": {
        "required": true
    },
    "mel": {
        "default": "",
        "required": false
    }
};

const AmimsMpartReportFormSchema = {
    "ata": {
        "default": "",
        "required": true
    },
    "calculatedCycle": {
        "default": "",
        "required": false
    },
    "calculatedHours": {
        "default": "",
        "required": false
    },
    "childname": {
        "default": "",
        "required": false
    },
    "codeAtaMentah": {
        "default": "",
        "required": false
    },
    "createdAt": {
        "default": "",
        "required": false
    },
    "descriptionMpart": {
        "default": "",
        "required": false
    },
    "forAc": {
        "default": 0,
        "required": false
    },
    "idAta": {
        "required": false
    },
    "idConditionMonitoring": {
        "required": false
    },
    "idGroup": {
        "required": false
    },
    "idLifeTimeLimit": {
        "required": false
    },
    "idMpart": {
        "required": true
    },
    "idPartCategory": {
        "required": false
    },
    "idPartid": {
        "required": false
    },
    "isDeleted": {
        "default": 0,
        "required": false
    },
    "isMandatory": {
        "default": "",
        "required": false
    },
    "ismayor": {
        "default": "",
        "required": false
    },
    "keyword": {
        "default": "",
        "required": false
    },
    "lastPrice": {
        "default": 0,
        "required": false
    },
    "lastPriceCurrency": {
        "default": "",
        "required": false
    },
    "lifeLimitCycle": {
        "default": 0,
        "required": false
    },
    "lifeLimitHours": {
        "default": 0,
        "required": false
    },
    "lifeLimitVal": {
        "default": 0,
        "required": false
    },
    "lifeLimitVar": {
        "default": "",
        "required": false
    },
    "manufactureMpart": {
        "default": "",
        "required": false
    },
    "mat_82": {
        "default": "",
        "required": false
    },
    "mfigureIndex": {
        "default": "",
        "required": false
    },
    "minQty": {
        "default": 0,
        "required": false
    },
    "mitemIndex": {
        "default": "",
        "required": false
    },
    "mtboCycle": {
        "default": 0,
        "required": false
    },
    "mtboHours": {
        "default": 0,
        "required": false
    },
    "mtboVal": {
        "default": 0,
        "required": false
    },
    "mtboVar": {
        "default": "",
        "required": false
    },
    "oldAtachapter": {
        "default": "",
        "required": false
    },
    "oldId": {
        "default": "",
        "required": false
    },
    "parent": {
        "default": "",
        "required": false
    },
    "partNumber": {
        "default": "",
        "required": false
    },
    "partid": {
        "default": "",
        "required": true
    },
    "partname": {
        "default": "",
        "required": false
    },
    "refMel": {
        "default": "",
        "required": false
    },
    "statusMpart": {
        "default": "",
        "required": false
    },
    "unit": {
        "default": "",
        "required": false
    },
    "updatedAt": {
        "default": "",
        "required": false
    }
};

const AmimsMpartWidgetFormSchema = {
    "calculatedCycle": {
        "default": "",
        "required": false
    },
    "calculatedHours": {
        "default": "",
        "required": false
    },
    "childname": {
        "default": "",
        "required": false
    },
    "codeAtaMentah": {
        "default": "",
        "required": false
    },
    "createdAt": {
        "default": "",
        "required": false
    },
    "descriptionMpart": {
        "default": "",
        "required": false
    },
    "forAc": {
        "default": 0,
        "required": false
    },
    "idAta": {
        "required": false
    },
    "idConditionMonitoring": {
        "required": false
    },
    "idGroup": {
        "required": false
    },
    "idLifeTimeLimit": {
        "required": false
    },
    "idMpart": {
        "required": true
    },
    "idPartCategory": {
        "required": false
    },
    "idPartid": {
        "required": false
    },
    "isDeleted": {
        "default": 0,
        "required": false
    },
    "isMandatory": {
        "default": "",
        "required": false
    },
    "ismayor": {
        "default": "",
        "required": false
    },
    "keyword": {
        "default": "",
        "required": false
    },
    "lastPrice": {
        "default": 0,
        "required": false
    },
    "lastPriceCurrency": {
        "default": "",
        "required": false
    },
    "lifeLimitCycle": {
        "default": 0,
        "required": false
    },
    "lifeLimitHours": {
        "default": 0,
        "required": false
    },
    "lifeLimitVal": {
        "default": 0,
        "required": false
    },
    "lifeLimitVar": {
        "default": "",
        "required": false
    },
    "manufactureMpart": {
        "default": "",
        "required": false
    },
    "mat_82": {
        "default": "",
        "required": false
    },
    "mfigureIndex": {
        "default": "",
        "required": false
    },
    "minQty": {
        "default": 0,
        "required": false
    },
    "mitemIndex": {
        "default": "",
        "required": false
    },
    "mtboCycle": {
        "default": 0,
        "required": false
    },
    "mtboHours": {
        "default": 0,
        "required": false
    },
    "mtboVal": {
        "default": 0,
        "required": false
    },
    "mtboVar": {
        "default": "",
        "required": false
    },
    "oldAtachapter": {
        "default": "",
        "required": false
    },
    "oldId": {
        "default": "",
        "required": false
    },
    "parent": {
        "default": "",
        "required": false
    },
    "partNumber": {
        "default": "",
        "required": false
    },
    "partname": {
        "default": "",
        "required": false
    },
    "refMel": {
        "default": "",
        "required": false
    },
    "statusMpart": {
        "default": "",
        "required": false
    },
    "total": {
        "default": 0,
        "required": false
    },
    "unit": {
        "default": "",
        "required": false
    },
    "updatedAt": {
        "default": "",
        "required": false
    }
};

const AmimsMpartFormSchema = {
    "calculatedCycle": {
        "default": "",
        "required": false
    },
    "calculatedHours": {
        "default": "",
        "required": false
    },
    "childname": {
        "default": "",
        "required": false
    },
    "codeAtaMentah": {
        "default": "",
        "required": false
    },
    "createdAt": {
        "default": "",
        "required": false
    },
    "descriptionMpart": {
        "default": "",
        "required": false
    },
    "forAc": {
        "default": 0,
        "required": false
    },
    "idAta": {
        "required": false
    },
    "idConditionMonitoring": {
        "required": false
    },
    "idGroup": {
        "required": false
    },
    "idLifeTimeLimit": {
        "required": false
    },
    "idMpart": {
        "required": true
    },
    "idPartCategory": {
        "required": false
    },
    "idPartid": {
        "required": false
    },
    "isDeleted": {
        "default": 0,
        "required": false
    },
    "isMandatory": {
        "default": "",
        "required": false
    },
    "ismayor": {
        "default": "",
        "required": false
    },
    "keyword": {
        "default": "",
        "required": false
    },
    "lastPrice": {
        "default": 0,
        "required": false
    },
    "lastPriceCurrency": {
        "default": "",
        "required": false
    },
    "lifeLimitCycle": {
        "default": 0,
        "required": false
    },
    "lifeLimitHours": {
        "default": 0,
        "required": false
    },
    "lifeLimitVal": {
        "default": 0,
        "required": false
    },
    "lifeLimitVar": {
        "default": "",
        "required": false
    },
    "manufactureMpart": {
        "default": "",
        "required": false
    },
    "mat_82": {
        "default": "",
        "required": false
    },
    "mfigureIndex": {
        "default": "",
        "required": false
    },
    "minQty": {
        "default": 0,
        "required": false
    },
    "mitemIndex": {
        "default": "",
        "required": false
    },
    "mtboCycle": {
        "default": 0,
        "required": false
    },
    "mtboHours": {
        "default": 0,
        "required": false
    },
    "mtboVal": {
        "default": 0,
        "required": false
    },
    "mtboVar": {
        "default": "",
        "required": false
    },
    "oldAtachapter": {
        "default": "",
        "required": false
    },
    "oldId": {
        "default": "",
        "required": false
    },
    "parent": {
        "default": "",
        "required": false
    },
    "partNumber": {
        "default": "",
        "required": false
    },
    "partname": {
        "default": "",
        "required": false
    },
    "refMel": {
        "default": "",
        "required": false
    },
    "statusMpart": {
        "default": "",
        "required": false
    },
    "unit": {
        "default": "",
        "required": false
    },
    "updatedAt": {
        "default": "",
        "required": false
    }
};

const AmimsMpcGseReportFormSchema = {
    "createdAt": {
        "default": "",
        "required": false
    },
    "dateGse": {
        "default": "",
        "required": false
    },
    "idEngineerRti": {
        "required": false
    },
    "idMpcGse": {
        "required": true
    },
    "idUserGse": {
        "required": false
    },
    "noteGse": {
        "default": "",
        "required": false
    },
    "statusGse": {
        "default": "",
        "required": false
    },
    "updatedAt": {
        "default": "",
        "required": false
    }
};

const AmimsMpcGseWidgetFormSchema = {
    "createdAt": {
        "default": "",
        "required": false
    },
    "dateGse": {
        "default": "",
        "required": false
    },
    "idEngineerRti": {
        "required": false
    },
    "idMpcGse": {
        "required": true
    },
    "idUserGse": {
        "required": false
    },
    "noteGse": {
        "default": "",
        "required": false
    },
    "statusGse": {
        "default": "",
        "required": false
    },
    "total": {
        "default": 0,
        "required": false
    },
    "updatedAt": {
        "default": "",
        "required": false
    }
};

const AmimsMpcGseFormSchema = {
    "createdAt": {
        "default": "",
        "required": false
    },
    "dateGse": {
        "default": "",
        "required": false
    },
    "idEngineerRti": {
        "required": false
    },
    "idMpcGse": {
        "required": true
    },
    "idUserGse": {
        "required": false
    },
    "noteGse": {
        "default": "",
        "required": false
    },
    "statusGse": {
        "default": "",
        "required": false
    },
    "updatedAt": {
        "default": "",
        "required": false
    }
};

const AmimsMpcJoOperatorReportFormSchema = {
    "idMpcJo": {
        "required": false
    },
    "idMpcJoOperator": {
        "required": true
    },
    "idOperator": {
        "required": false
    },
    "jobDesc": {
        "default": "",
        "required": false
    },
    "operator": {
        "default": "",
        "required": false
    },
    "position": {
        "default": "",
        "required": false
    }
};

const AmimsMpcJoOperatorWidgetFormSchema = {
    "idMpcJo": {
        "required": false
    },
    "idMpcJoOperator": {
        "required": true
    },
    "idOperator": {
        "required": false
    },
    "jobDesc": {
        "default": "",
        "required": false
    },
    "operator": {
        "default": "",
        "required": false
    },
    "position": {
        "default": "",
        "required": false
    },
    "total": {
        "default": 0,
        "required": false
    }
};

const AmimsMpcJoOperatorFormSchema = {
    "idMpcJo": {
        "required": false
    },
    "idMpcJoOperator": {
        "required": true
    },
    "idOperator": {
        "required": false
    },
    "jobDesc": {
        "default": "",
        "required": false
    },
    "operator": {
        "default": "",
        "required": false
    },
    "position": {
        "default": "",
        "required": false
    }
};

const AmimsMpcJoReportFormSchema = {
    "action": {
        "default": "",
        "required": false
    },
    "compliteCycle": {
        "default": 0,
        "required": false
    },
    "compliteDate": {
        "default": "",
        "required": false
    },
    "compliteHours": {
        "default": 0,
        "required": false
    },
    "createdAt": {
        "default": "",
        "required": false
    },
    "customIssued": {
        "default": "",
        "required": false
    },
    "customJob": {
        "default": "",
        "required": false
    },
    "customRef": {
        "default": "",
        "required": false
    },
    "cycleFrom": {
        "default": 0,
        "required": false
    },
    "cycleTo": {
        "default": 0,
        "required": false
    },
    "dateJo": {
        "default": "",
        "required": false
    },
    "hourseFrom": {
        "default": 0,
        "required": false
    },
    "hourseTo": {
        "default": 0,
        "required": false
    },
    "idDueList": {
        "required": false
    },
    "idMaintenance": {
        "required": false
    },
    "idMpcJo": {
        "required": true
    },
    "idPart": {
        "required": false
    },
    "idTechLog": {
        "required": false
    },
    "idTypeOfwork": {
        "required": false
    },
    "idUser": {
        "required": false
    },
    "isPriority": {
        "default": "",
        "required": false
    },
    "maintenance": {
        "default": "",
        "required": true
    },
    "noteJo": {
        "default": "",
        "required": false
    },
    "numberJo": {
        "default": "",
        "required": false
    },
    "onAircraft": {
        "default": "",
        "required": false
    },
    "onSite": {
        "default": 0,
        "required": false
    },
    "originalCycle": {
        "default": 0,
        "required": false
    },
    "originalDate": {
        "default": "",
        "required": false
    },
    "originalHours": {
        "default": 0,
        "required": false
    },
    "parentAss": {
        "default": "",
        "required": false
    },
    "part": {
        "default": "",
        "required": true
    },
    "reference": {
        "default": "",
        "required": false
    },
    "roflag": {
        "default": "",
        "required": false
    },
    "statusJo": {
        "default": "",
        "required": false
    },
    "timeRangeFrom": {
        "default": 0,
        "required": false
    },
    "timeRangeTo": {
        "default": 0,
        "required": false
    },
    "updatedAt": {
        "default": "",
        "required": false
    },
    "workDue": {
        "default": "",
        "required": false
    }
};

const AmimsMpcJoWidgetFormSchema = {
    "action": {
        "default": "",
        "required": false
    },
    "compliteCycle": {
        "default": 0,
        "required": false
    },
    "compliteDate": {
        "default": "",
        "required": false
    },
    "compliteHours": {
        "default": 0,
        "required": false
    },
    "createdAt": {
        "default": "",
        "required": false
    },
    "customIssued": {
        "default": "",
        "required": false
    },
    "customJob": {
        "default": "",
        "required": false
    },
    "customRef": {
        "default": "",
        "required": false
    },
    "cycleFrom": {
        "default": 0,
        "required": false
    },
    "cycleTo": {
        "default": 0,
        "required": false
    },
    "dateJo": {
        "default": "",
        "required": false
    },
    "hourseFrom": {
        "default": 0,
        "required": false
    },
    "hourseTo": {
        "default": 0,
        "required": false
    },
    "idDueList": {
        "required": false
    },
    "idMaintenance": {
        "required": false
    },
    "idMpcJo": {
        "required": true
    },
    "idPart": {
        "required": false
    },
    "idTechLog": {
        "required": false
    },
    "idTypeOfwork": {
        "required": false
    },
    "idUser": {
        "required": false
    },
    "isPriority": {
        "default": "",
        "required": false
    },
    "noteJo": {
        "default": "",
        "required": false
    },
    "numberJo": {
        "default": "",
        "required": false
    },
    "onAircraft": {
        "default": "",
        "required": false
    },
    "onSite": {
        "default": 0,
        "required": false
    },
    "originalCycle": {
        "default": 0,
        "required": false
    },
    "originalDate": {
        "default": "",
        "required": false
    },
    "originalHours": {
        "default": 0,
        "required": false
    },
    "parentAss": {
        "default": "",
        "required": false
    },
    "reference": {
        "default": "",
        "required": false
    },
    "roflag": {
        "default": "",
        "required": false
    },
    "statusJo": {
        "default": "",
        "required": false
    },
    "timeRangeFrom": {
        "default": 0,
        "required": false
    },
    "timeRangeTo": {
        "default": 0,
        "required": false
    },
    "total": {
        "default": 0,
        "required": false
    },
    "updatedAt": {
        "default": "",
        "required": false
    },
    "workDue": {
        "default": "",
        "required": false
    }
};

const AmimsMpcJoFormSchema = {
    "action": {
        "default": "",
        "required": false
    },
    "compliteCycle": {
        "default": 0,
        "required": false
    },
    "compliteDate": {
        "default": "",
        "required": false
    },
    "compliteHours": {
        "default": 0,
        "required": false
    },
    "createdAt": {
        "default": "",
        "required": false
    },
    "customIssued": {
        "default": "",
        "required": false
    },
    "customJob": {
        "default": "",
        "required": false
    },
    "customRef": {
        "default": "",
        "required": false
    },
    "cycleFrom": {
        "default": 0,
        "required": false
    },
    "cycleTo": {
        "default": 0,
        "required": false
    },
    "dateJo": {
        "default": "",
        "required": false
    },
    "hourseFrom": {
        "default": 0,
        "required": false
    },
    "hourseTo": {
        "default": 0,
        "required": false
    },
    "idDueList": {
        "required": false
    },
    "idMaintenance": {
        "required": false
    },
    "idMpcJo": {
        "required": true
    },
    "idPart": {
        "required": false
    },
    "idTechLog": {
        "required": false
    },
    "idTypeOfwork": {
        "required": false
    },
    "idUser": {
        "required": false
    },
    "isPriority": {
        "default": "",
        "required": false
    },
    "noteJo": {
        "default": "",
        "required": false
    },
    "numberJo": {
        "default": "",
        "required": false
    },
    "onAircraft": {
        "default": "",
        "required": false
    },
    "onSite": {
        "default": 0,
        "required": false
    },
    "originalCycle": {
        "default": 0,
        "required": false
    },
    "originalDate": {
        "default": "",
        "required": false
    },
    "originalHours": {
        "default": 0,
        "required": false
    },
    "parentAss": {
        "default": "",
        "required": false
    },
    "reference": {
        "default": "",
        "required": false
    },
    "roflag": {
        "default": "",
        "required": false
    },
    "statusJo": {
        "default": "",
        "required": false
    },
    "timeRangeFrom": {
        "default": 0,
        "required": false
    },
    "timeRangeTo": {
        "default": 0,
        "required": false
    },
    "updatedAt": {
        "default": "",
        "required": false
    },
    "workDue": {
        "default": "",
        "required": false
    }
};

const AmimsMpcPiroItemReportFormSchema = {
    "createdAt": {
        "default": "",
        "required": false
    },
    "forFigureIndex": {
        "default": "",
        "required": false
    },
    "idMpart": {
        "required": false
    },
    "idMpcPiro": {
        "required": false
    },
    "idMpcPiroItem": {
        "required": true
    },
    "isDeleted": {
        "default": 0,
        "required": false
    },
    "mpart": {
        "default": "",
        "required": true
    },
    "noteItemPiro": {
        "default": "",
        "required": false
    },
    "priority": {
        "default": "",
        "required": false
    },
    "qtyPiro": {
        "default": 0,
        "required": false
    },
    "statusItem": {
        "default": "",
        "required": false
    },
    "updatedAt": {
        "default": "",
        "required": false
    }
};

const AmimsMpcPiroItemWidgetFormSchema = {
    "createdAt": {
        "default": "",
        "required": false
    },
    "forFigureIndex": {
        "default": "",
        "required": false
    },
    "idMpart": {
        "required": false
    },
    "idMpcPiro": {
        "required": false
    },
    "idMpcPiroItem": {
        "required": true
    },
    "isDeleted": {
        "default": 0,
        "required": false
    },
    "noteItemPiro": {
        "default": "",
        "required": false
    },
    "priority": {
        "default": "",
        "required": false
    },
    "qtyPiro": {
        "default": 0,
        "required": false
    },
    "statusItem": {
        "default": "",
        "required": false
    },
    "total": {
        "default": 0,
        "required": false
    },
    "updatedAt": {
        "default": "",
        "required": false
    }
};

const AmimsMpcPiroItemFormSchema = {
    "createdAt": {
        "default": "",
        "required": false
    },
    "forFigureIndex": {
        "default": "",
        "required": false
    },
    "idMpart": {
        "required": false
    },
    "idMpcPiro": {
        "required": false
    },
    "idMpcPiroItem": {
        "required": true
    },
    "isDeleted": {
        "default": 0,
        "required": false
    },
    "noteItemPiro": {
        "default": "",
        "required": false
    },
    "priority": {
        "default": "",
        "required": false
    },
    "qtyPiro": {
        "default": 0,
        "required": false
    },
    "statusItem": {
        "default": "",
        "required": false
    },
    "updatedAt": {
        "default": "",
        "required": false
    }
};

const AmimsMpcPiroReportFormSchema = {
    "aircraft": {
        "default": "",
        "required": true
    },
    "createdAt": {
        "default": "",
        "required": false
    },
    "dateAcc": {
        "default": "",
        "required": false
    },
    "datePiro": {
        "default": "",
        "required": false
    },
    "description": {
        "default": "",
        "required": false
    },
    "idAircraft": {
        "required": false
    },
    "idMpcPiro": {
        "required": true
    },
    "idSite": {
        "required": false
    },
    "idUser": {
        "required": false
    },
    "idUserAcc": {
        "required": false
    },
    "isDeleted": {
        "default": 0,
        "required": false
    },
    "keyword": {
        "default": "",
        "required": false
    },
    "noIndex": {
        "default": 0,
        "required": false
    },
    "notePiro": {
        "default": "",
        "required": false
    },
    "numberPiro": {
        "default": "",
        "required": false
    },
    "site": {
        "default": "",
        "required": true
    },
    "statusPiro": {
        "default": "",
        "required": false
    },
    "typePiro": {
        "default": "",
        "required": false
    },
    "updatedAt": {
        "default": "",
        "required": false
    },
    "validasi": {
        "default": 0,
        "required": false
    }
};

const AmimsMpcPiroWidgetFormSchema = {
    "createdAt": {
        "default": "",
        "required": false
    },
    "dateAcc": {
        "default": "",
        "required": false
    },
    "datePiro": {
        "default": "",
        "required": false
    },
    "description": {
        "default": "",
        "required": false
    },
    "idAircraft": {
        "required": false
    },
    "idMpcPiro": {
        "required": true
    },
    "idSite": {
        "required": false
    },
    "idUser": {
        "required": false
    },
    "idUserAcc": {
        "required": false
    },
    "isDeleted": {
        "default": 0,
        "required": false
    },
    "keyword": {
        "default": "",
        "required": false
    },
    "noIndex": {
        "default": 0,
        "required": false
    },
    "notePiro": {
        "default": "",
        "required": false
    },
    "numberPiro": {
        "default": "",
        "required": false
    },
    "statusPiro": {
        "default": "",
        "required": false
    },
    "total": {
        "default": 0,
        "required": false
    },
    "typePiro": {
        "default": "",
        "required": false
    },
    "updatedAt": {
        "default": "",
        "required": false
    },
    "validasi": {
        "default": 0,
        "required": false
    }
};

const AmimsMpcPiroFormSchema = {
    "createdAt": {
        "default": "",
        "required": false
    },
    "dateAcc": {
        "default": "",
        "required": false
    },
    "datePiro": {
        "default": "",
        "required": false
    },
    "description": {
        "default": "",
        "required": false
    },
    "idAircraft": {
        "required": false
    },
    "idMpcPiro": {
        "required": true
    },
    "idSite": {
        "required": false
    },
    "idUser": {
        "required": false
    },
    "idUserAcc": {
        "required": false
    },
    "isDeleted": {
        "default": 0,
        "required": false
    },
    "keyword": {
        "default": "",
        "required": false
    },
    "noIndex": {
        "default": 0,
        "required": false
    },
    "notePiro": {
        "default": "",
        "required": false
    },
    "numberPiro": {
        "default": "",
        "required": false
    },
    "statusPiro": {
        "default": "",
        "required": false
    },
    "typePiro": {
        "default": "",
        "required": false
    },
    "updatedAt": {
        "default": "",
        "required": false
    },
    "validasi": {
        "default": 0,
        "required": false
    }
};

const AmimsMpcSelfMaintenanceReportFormSchema = {
    "createdAt": {
        "default": "",
        "required": false
    },
    "dateAccQa": {
        "default": "",
        "required": false
    },
    "dateMaintenance": {
        "default": "",
        "required": false
    },
    "doc": {
        "default": "",
        "required": false
    },
    "idEngineerRti": {
        "required": false
    },
    "idMpcSelfMaintenance": {
        "required": true
    },
    "idSite": {
        "required": false
    },
    "idUserMaintenance": {
        "required": false
    },
    "idUserQa": {
        "required": false
    },
    "numberMaintenance": {
        "default": "",
        "required": false
    },
    "reportMaintenance": {
        "default": "",
        "required": false
    },
    "site": {
        "default": "",
        "required": true
    },
    "statusMaintenance": {
        "default": "",
        "required": false
    },
    "typeMaintenance": {
        "default": "",
        "required": false
    },
    "updatedAt": {
        "default": "",
        "required": false
    }
};

const AmimsMpcSelfMaintenanceWidgetFormSchema = {
    "createdAt": {
        "default": "",
        "required": false
    },
    "dateAccQa": {
        "default": "",
        "required": false
    },
    "dateMaintenance": {
        "default": "",
        "required": false
    },
    "doc": {
        "default": "",
        "required": false
    },
    "idEngineerRti": {
        "required": false
    },
    "idMpcSelfMaintenance": {
        "required": true
    },
    "idSite": {
        "required": false
    },
    "idUserMaintenance": {
        "required": false
    },
    "idUserQa": {
        "required": false
    },
    "numberMaintenance": {
        "default": "",
        "required": false
    },
    "reportMaintenance": {
        "default": "",
        "required": false
    },
    "statusMaintenance": {
        "default": "",
        "required": false
    },
    "total": {
        "default": 0,
        "required": false
    },
    "typeMaintenance": {
        "default": "",
        "required": false
    },
    "updatedAt": {
        "default": "",
        "required": false
    }
};

const AmimsMpcSelfMaintenanceFormSchema = {
    "createdAt": {
        "default": "",
        "required": false
    },
    "dateAccQa": {
        "default": "",
        "required": false
    },
    "dateMaintenance": {
        "default": "",
        "required": false
    },
    "doc": {
        "default": "",
        "required": false
    },
    "idEngineerRti": {
        "required": false
    },
    "idMpcSelfMaintenance": {
        "required": true
    },
    "idSite": {
        "required": false
    },
    "idUserMaintenance": {
        "required": false
    },
    "idUserQa": {
        "required": false
    },
    "numberMaintenance": {
        "default": "",
        "required": false
    },
    "reportMaintenance": {
        "default": "",
        "required": false
    },
    "statusMaintenance": {
        "default": "",
        "required": false
    },
    "typeMaintenance": {
        "default": "",
        "required": false
    },
    "updatedAt": {
        "default": "",
        "required": false
    }
};

const AmimsMpcWpReportFormSchema = {
    "aircraft": {
        "default": "",
        "required": true
    },
    "createdAt": {
        "default": "",
        "required": false
    },
    "dateAcc": {
        "default": "",
        "required": false
    },
    "endDateWp": {
        "default": "",
        "required": false
    },
    "endHours": {
        "default": 0,
        "required": false
    },
    "engineEnd": {
        "default": "",
        "required": false
    },
    "engineStart": {
        "default": "",
        "required": false
    },
    "idAircraft": {
        "required": false
    },
    "idMpcWp": {
        "required": true
    },
    "idUserMm": {
        "required": false
    },
    "idUserMpc": {
        "required": false
    },
    "noteWp": {
        "default": "",
        "required": false
    },
    "numberWp": {
        "default": "",
        "required": false
    },
    "onSite": {
        "default": 0,
        "required": false
    },
    "period": {
        "default": "",
        "required": false
    },
    "periodYear": {
        "default": 0,
        "required": false
    },
    "place": {
        "default": "",
        "required": false
    },
    "reason": {
        "default": "",
        "required": false
    },
    "startDateWp": {
        "default": "",
        "required": false
    },
    "startHours": {
        "default": 0,
        "required": false
    },
    "statusWp": {
        "default": "",
        "required": false
    },
    "typeWork": {
        "default": "",
        "required": false
    },
    "updatedAt": {
        "default": "",
        "required": false
    },
    "validated": {
        "default": 0,
        "required": false
    }
};

const AmimsMpcWpWidgetFormSchema = {
    "createdAt": {
        "default": "",
        "required": false
    },
    "dateAcc": {
        "default": "",
        "required": false
    },
    "endDateWp": {
        "default": "",
        "required": false
    },
    "endHours": {
        "default": 0,
        "required": false
    },
    "engineEnd": {
        "default": "",
        "required": false
    },
    "engineStart": {
        "default": "",
        "required": false
    },
    "idAircraft": {
        "required": false
    },
    "idMpcWp": {
        "required": true
    },
    "idUserMm": {
        "required": false
    },
    "idUserMpc": {
        "required": false
    },
    "noteWp": {
        "default": "",
        "required": false
    },
    "numberWp": {
        "default": "",
        "required": false
    },
    "onSite": {
        "default": 0,
        "required": false
    },
    "period": {
        "default": "",
        "required": false
    },
    "periodYear": {
        "default": 0,
        "required": false
    },
    "place": {
        "default": "",
        "required": false
    },
    "reason": {
        "default": "",
        "required": false
    },
    "startDateWp": {
        "default": "",
        "required": false
    },
    "startHours": {
        "default": 0,
        "required": false
    },
    "statusWp": {
        "default": "",
        "required": false
    },
    "total": {
        "default": 0,
        "required": false
    },
    "typeWork": {
        "default": "",
        "required": false
    },
    "updatedAt": {
        "default": "",
        "required": false
    },
    "validated": {
        "default": 0,
        "required": false
    }
};

const AmimsMpcWpFormSchema = {
    "createdAt": {
        "default": "",
        "required": false
    },
    "dateAcc": {
        "default": "",
        "required": false
    },
    "endDateWp": {
        "default": "",
        "required": false
    },
    "endHours": {
        "default": 0,
        "required": false
    },
    "engineEnd": {
        "default": "",
        "required": false
    },
    "engineStart": {
        "default": "",
        "required": false
    },
    "idAircraft": {
        "required": false
    },
    "idMpcWp": {
        "required": true
    },
    "idUserMm": {
        "required": false
    },
    "idUserMpc": {
        "required": false
    },
    "noteWp": {
        "default": "",
        "required": false
    },
    "numberWp": {
        "default": "",
        "required": false
    },
    "onSite": {
        "default": 0,
        "required": false
    },
    "period": {
        "default": "",
        "required": false
    },
    "periodYear": {
        "default": 0,
        "required": false
    },
    "place": {
        "default": "",
        "required": false
    },
    "reason": {
        "default": "",
        "required": false
    },
    "startDateWp": {
        "default": "",
        "required": false
    },
    "startHours": {
        "default": 0,
        "required": false
    },
    "statusWp": {
        "default": "",
        "required": false
    },
    "typeWork": {
        "default": "",
        "required": false
    },
    "updatedAt": {
        "default": "",
        "required": false
    },
    "validated": {
        "default": 0,
        "required": false
    }
};

const AmimsPartActypeReportFormSchema = {
    "actype": {
        "default": "",
        "required": true
    },
    "createdAt": {
        "default": "",
        "required": false
    },
    "idActype": {
        "required": false
    },
    "idActypeOld": {
        "required": false
    },
    "idMpart": {
        "required": false
    },
    "idPartActype": {
        "required": true
    },
    "mpart": {
        "default": "",
        "required": true
    },
    "updatedAt": {
        "default": "",
        "required": false
    }
};

const AmimsPartActypeWidgetFormSchema = {
    "createdAt": {
        "default": "",
        "required": false
    },
    "idActype": {
        "required": false
    },
    "idActypeOld": {
        "required": false
    },
    "idMpart": {
        "required": false
    },
    "idPartActype": {
        "required": true
    },
    "total": {
        "default": 0,
        "required": false
    },
    "updatedAt": {
        "default": "",
        "required": false
    }
};

const AmimsPartActypeFormSchema = {
    "createdAt": {
        "default": "",
        "required": false
    },
    "idActype": {
        "required": false
    },
    "idActypeOld": {
        "required": false
    },
    "idMpart": {
        "required": false
    },
    "idPartActype": {
        "required": true
    },
    "updatedAt": {
        "default": "",
        "required": false
    }
};

const AmimsPartAlternativeReportFormSchema = {
    "forMpart": {
        "default": "",
        "required": false
    },
    "idMpart": {
        "required": false
    },
    "idPartAlternative": {
        "required": true
    },
    "mpart": {
        "default": "",
        "required": true
    }
};

const AmimsPartAlternativeWidgetFormSchema = {
    "forMpart": {
        "default": "",
        "required": false
    },
    "idMpart": {
        "required": false
    },
    "idPartAlternative": {
        "required": true
    },
    "total": {
        "default": 0,
        "required": false
    }
};

const AmimsPartAlternativeFormSchema = {
    "forMpart": {
        "default": "",
        "required": false
    },
    "idMpart": {
        "required": false
    },
    "idPartAlternative": {
        "required": true
    }
};

const AmimsPartAtaReportFormSchema = {
    "ata": {
        "default": "",
        "required": true
    },
    "figure": {
        "default": "",
        "required": false
    },
    "idAta": {
        "required": false
    },
    "idMpart": {
        "required": false
    },
    "idPartAta": {
        "required": true
    },
    "item": {
        "default": "",
        "required": false
    },
    "mpart": {
        "default": "",
        "required": true
    }
};

const AmimsPartAtaWidgetFormSchema = {
    "figure": {
        "default": "",
        "required": false
    },
    "idAta": {
        "required": false
    },
    "idMpart": {
        "required": false
    },
    "idPartAta": {
        "required": true
    },
    "item": {
        "default": "",
        "required": false
    },
    "total": {
        "default": 0,
        "required": false
    }
};

const AmimsPartAtaFormSchema = {
    "figure": {
        "default": "",
        "required": false
    },
    "idAta": {
        "required": false
    },
    "idMpart": {
        "required": false
    },
    "idPartAta": {
        "required": true
    },
    "item": {
        "default": "",
        "required": false
    }
};

const AmimsPartCategoryReportFormSchema = {
    "category": {
        "default": "",
        "required": false
    },
    "createdAt": {
        "default": "",
        "required": false
    },
    "descriptionCat": {
        "default": "",
        "required": false
    },
    "idPartCategory": {
        "required": true
    },
    "isDeleted": {
        "default": 0,
        "required": false
    },
    "parentCat": {
        "default": 0,
        "required": false
    },
    "updatedAt": {
        "default": "",
        "required": false
    }
};

const AmimsPartCategoryWidgetFormSchema = {
    "category": {
        "default": "",
        "required": false
    },
    "createdAt": {
        "default": "",
        "required": false
    },
    "descriptionCat": {
        "default": "",
        "required": false
    },
    "idPartCategory": {
        "required": true
    },
    "isDeleted": {
        "default": 0,
        "required": false
    },
    "parentCat": {
        "default": 0,
        "required": false
    },
    "total": {
        "default": 0,
        "required": false
    },
    "updatedAt": {
        "default": "",
        "required": false
    }
};

const AmimsPartCategoryFormSchema = {
    "category": {
        "default": "",
        "required": false
    },
    "createdAt": {
        "default": "",
        "required": false
    },
    "descriptionCat": {
        "default": "",
        "required": false
    },
    "idPartCategory": {
        "required": true
    },
    "isDeleted": {
        "default": 0,
        "required": false
    },
    "parentCat": {
        "default": 0,
        "required": false
    },
    "updatedAt": {
        "default": "",
        "required": false
    }
};

const AmimsPartConditionReportFormSchema = {
    "childnamePartCondition": {
        "default": "",
        "required": false
    },
    "idPartCondition": {
        "required": true
    },
    "isDeleted": {
        "default": 0,
        "required": false
    },
    "partCondition": {
        "default": "",
        "required": false
    }
};

const AmimsPartConditionWidgetFormSchema = {
    "childnamePartCondition": {
        "default": "",
        "required": false
    },
    "idPartCondition": {
        "required": true
    },
    "isDeleted": {
        "default": 0,
        "required": false
    },
    "partCondition": {
        "default": "",
        "required": false
    },
    "total": {
        "default": 0,
        "required": false
    }
};

const AmimsPartConditionFormSchema = {
    "childnamePartCondition": {
        "default": "",
        "required": false
    },
    "idPartCondition": {
        "required": true
    },
    "isDeleted": {
        "default": 0,
        "required": false
    },
    "partCondition": {
        "default": "",
        "required": false
    }
};

const AmimsPartFigureIndexReportFormSchema = {
    "ata": {
        "default": "",
        "required": true
    },
    "createdAt": {
        "default": "",
        "required": false
    },
    "figureIndex": {
        "default": "",
        "required": false
    },
    "idAta": {
        "required": false
    },
    "idMpart": {
        "required": false
    },
    "idPartFigureIndex": {
        "required": true
    },
    "itemIndex": {
        "default": "",
        "required": false
    },
    "mpart": {
        "default": "",
        "required": true
    },
    "updatedAt": {
        "default": "",
        "required": false
    }
};

const AmimsPartFigureIndexWidgetFormSchema = {
    "createdAt": {
        "default": "",
        "required": false
    },
    "figureIndex": {
        "default": "",
        "required": false
    },
    "idAta": {
        "required": false
    },
    "idMpart": {
        "required": false
    },
    "idPartFigureIndex": {
        "required": true
    },
    "itemIndex": {
        "default": "",
        "required": false
    },
    "total": {
        "default": 0,
        "required": false
    },
    "updatedAt": {
        "default": "",
        "required": false
    }
};

const AmimsPartFigureIndexFormSchema = {
    "createdAt": {
        "default": "",
        "required": false
    },
    "figureIndex": {
        "default": "",
        "required": false
    },
    "idAta": {
        "required": false
    },
    "idMpart": {
        "required": false
    },
    "idPartFigureIndex": {
        "required": true
    },
    "itemIndex": {
        "default": "",
        "required": false
    },
    "updatedAt": {
        "default": "",
        "required": false
    }
};

const AmimsPartInstallOldReportFormSchema = {
    "aircraft": {
        "default": "",
        "required": true
    },
    "bin": {
        "default": "",
        "required": false
    },
    "createdAt": {
        "default": "",
        "required": false
    },
    "dateInstall": {
        "default": "",
        "required": false
    },
    "dueOverhaulC": {
        "default": 0,
        "required": false
    },
    "dueOverhaulH": {
        "default": 0,
        "required": false
    },
    "dueOverhaulValue": {
        "default": 0,
        "required": false
    },
    "figureIndex": {
        "default": "",
        "required": false
    },
    "idAircraft": {
        "required": false
    },
    "idEngineerPrisItem": {
        "required": false
    },
    "idPart": {
        "required": false
    },
    "idPartInstall": {
        "required": false
    },
    "idPartInstallOld": {
        "required": true
    },
    "installedInspectionC": {
        "default": 0,
        "required": false
    },
    "installedInspectionH": {
        "default": 0,
        "required": false
    },
    "installedInspectionValue": {
        "default": 0,
        "required": false
    },
    "installedOverhaulC": {
        "default": 0,
        "required": false
    },
    "installedOverhaulH": {
        "default": 0,
        "required": false
    },
    "installedOverhaulValue": {
        "default": 0,
        "required": false
    },
    "isfeatured": {
        "default": "",
        "required": false
    },
    "itemIndex": {
        "default": "",
        "required": false
    },
    "oldId": {
        "default": "",
        "required": false
    },
    "parent": {
        "default": "",
        "required": false
    },
    "part": {
        "default": "",
        "required": true
    },
    "qtyInstall": {
        "default": 0,
        "required": false
    },
    "statusInstall": {
        "default": "",
        "required": false
    },
    "updatedAt": {
        "default": "",
        "required": false
    }
};

const AmimsPartInstallOldWidgetFormSchema = {
    "bin": {
        "default": "",
        "required": false
    },
    "createdAt": {
        "default": "",
        "required": false
    },
    "dateInstall": {
        "default": "",
        "required": false
    },
    "dueOverhaulC": {
        "default": 0,
        "required": false
    },
    "dueOverhaulH": {
        "default": 0,
        "required": false
    },
    "dueOverhaulValue": {
        "default": 0,
        "required": false
    },
    "figureIndex": {
        "default": "",
        "required": false
    },
    "idAircraft": {
        "required": false
    },
    "idEngineerPrisItem": {
        "required": false
    },
    "idPart": {
        "required": false
    },
    "idPartInstall": {
        "required": false
    },
    "idPartInstallOld": {
        "required": true
    },
    "installedInspectionC": {
        "default": 0,
        "required": false
    },
    "installedInspectionH": {
        "default": 0,
        "required": false
    },
    "installedInspectionValue": {
        "default": 0,
        "required": false
    },
    "installedOverhaulC": {
        "default": 0,
        "required": false
    },
    "installedOverhaulH": {
        "default": 0,
        "required": false
    },
    "installedOverhaulValue": {
        "default": 0,
        "required": false
    },
    "isfeatured": {
        "default": "",
        "required": false
    },
    "itemIndex": {
        "default": "",
        "required": false
    },
    "oldId": {
        "default": "",
        "required": false
    },
    "parent": {
        "default": "",
        "required": false
    },
    "qtyInstall": {
        "default": 0,
        "required": false
    },
    "statusInstall": {
        "default": "",
        "required": false
    },
    "total": {
        "default": 0,
        "required": false
    },
    "updatedAt": {
        "default": "",
        "required": false
    }
};

const AmimsPartInstallOldFormSchema = {
    "bin": {
        "default": "",
        "required": false
    },
    "createdAt": {
        "default": "",
        "required": false
    },
    "dateInstall": {
        "default": "",
        "required": false
    },
    "dueOverhaulC": {
        "default": 0,
        "required": false
    },
    "dueOverhaulH": {
        "default": 0,
        "required": false
    },
    "dueOverhaulValue": {
        "default": 0,
        "required": false
    },
    "figureIndex": {
        "default": "",
        "required": false
    },
    "idAircraft": {
        "required": false
    },
    "idEngineerPrisItem": {
        "required": false
    },
    "idPart": {
        "required": false
    },
    "idPartInstall": {
        "required": false
    },
    "idPartInstallOld": {
        "required": true
    },
    "installedInspectionC": {
        "default": 0,
        "required": false
    },
    "installedInspectionH": {
        "default": 0,
        "required": false
    },
    "installedInspectionValue": {
        "default": 0,
        "required": false
    },
    "installedOverhaulC": {
        "default": 0,
        "required": false
    },
    "installedOverhaulH": {
        "default": 0,
        "required": false
    },
    "installedOverhaulValue": {
        "default": 0,
        "required": false
    },
    "isfeatured": {
        "default": "",
        "required": false
    },
    "itemIndex": {
        "default": "",
        "required": false
    },
    "oldId": {
        "default": "",
        "required": false
    },
    "parent": {
        "default": "",
        "required": false
    },
    "qtyInstall": {
        "default": 0,
        "required": false
    },
    "statusInstall": {
        "default": "",
        "required": false
    },
    "updatedAt": {
        "default": "",
        "required": false
    }
};

const AmimsPartInstallReportFormSchema = {
    "aircraft": {
        "default": "",
        "required": true
    },
    "bin": {
        "default": "",
        "required": false
    },
    "createdAt": {
        "default": "",
        "required": false
    },
    "dateInstall": {
        "default": "",
        "required": false
    },
    "dueOverhaulC": {
        "default": 0,
        "required": false
    },
    "dueOverhaulH": {
        "default": 0,
        "required": false
    },
    "dueOverhaulValue": {
        "default": 0,
        "required": false
    },
    "figureIndex": {
        "default": "",
        "required": false
    },
    "idAircraft": {
        "required": false
    },
    "idEngineerPrisItem": {
        "required": false
    },
    "idPart": {
        "required": false
    },
    "idPartInstall": {
        "required": true
    },
    "installedOverhaulC": {
        "default": 0,
        "required": false
    },
    "installedOverhaulH": {
        "default": 0,
        "required": false
    },
    "installedOverhaulValue": {
        "default": 0,
        "required": false
    },
    "installedParentC": {
        "default": 0,
        "required": false
    },
    "installedParentH": {
        "default": 0,
        "required": false
    },
    "installedParentValue": {
        "default": 0,
        "required": false
    },
    "installedTsnC": {
        "default": 0,
        "required": false
    },
    "installedTsnH": {
        "default": 0,
        "required": false
    },
    "isfeatured": {
        "default": "",
        "required": false
    },
    "itemIndex": {
        "default": "",
        "required": false
    },
    "newParen": {
        "default": "",
        "required": false
    },
    "oldId": {
        "default": "",
        "required": false
    },
    "oldIdPart": {
        "default": "",
        "required": false
    },
    "oldParent": {
        "default": "",
        "required": false
    },
    "onPris": {
        "default": "",
        "required": false
    },
    "parent": {
        "default": "",
        "required": false
    },
    "part": {
        "default": "",
        "required": true
    },
    "qtyInstall": {
        "default": 0,
        "required": false
    },
    "refTechLog": {
        "default": "",
        "required": false
    },
    "statusInstall": {
        "default": "",
        "required": false
    },
    "topParent": {
        "default": "",
        "required": false
    },
    "updatedAt": {
        "default": "",
        "required": false
    }
};

const AmimsPartInstallWidgetFormSchema = {
    "bin": {
        "default": "",
        "required": false
    },
    "createdAt": {
        "default": "",
        "required": false
    },
    "dateInstall": {
        "default": "",
        "required": false
    },
    "dueOverhaulC": {
        "default": 0,
        "required": false
    },
    "dueOverhaulH": {
        "default": 0,
        "required": false
    },
    "dueOverhaulValue": {
        "default": 0,
        "required": false
    },
    "figureIndex": {
        "default": "",
        "required": false
    },
    "idAircraft": {
        "required": false
    },
    "idEngineerPrisItem": {
        "required": false
    },
    "idPart": {
        "required": false
    },
    "idPartInstall": {
        "required": true
    },
    "installedOverhaulC": {
        "default": 0,
        "required": false
    },
    "installedOverhaulH": {
        "default": 0,
        "required": false
    },
    "installedOverhaulValue": {
        "default": 0,
        "required": false
    },
    "installedParentC": {
        "default": 0,
        "required": false
    },
    "installedParentH": {
        "default": 0,
        "required": false
    },
    "installedParentValue": {
        "default": 0,
        "required": false
    },
    "installedTsnC": {
        "default": 0,
        "required": false
    },
    "installedTsnH": {
        "default": 0,
        "required": false
    },
    "isfeatured": {
        "default": "",
        "required": false
    },
    "itemIndex": {
        "default": "",
        "required": false
    },
    "newParen": {
        "default": "",
        "required": false
    },
    "oldId": {
        "default": "",
        "required": false
    },
    "oldIdPart": {
        "default": "",
        "required": false
    },
    "oldParent": {
        "default": "",
        "required": false
    },
    "onPris": {
        "default": "",
        "required": false
    },
    "parent": {
        "default": "",
        "required": false
    },
    "qtyInstall": {
        "default": 0,
        "required": false
    },
    "refTechLog": {
        "default": "",
        "required": false
    },
    "statusInstall": {
        "default": "",
        "required": false
    },
    "topParent": {
        "default": "",
        "required": false
    },
    "total": {
        "default": 0,
        "required": false
    },
    "updatedAt": {
        "default": "",
        "required": false
    }
};

const AmimsPartInstallFormSchema = {
    "bin": {
        "default": "",
        "required": false
    },
    "createdAt": {
        "default": "",
        "required": false
    },
    "dateInstall": {
        "default": "",
        "required": false
    },
    "dueOverhaulC": {
        "default": 0,
        "required": false
    },
    "dueOverhaulH": {
        "default": 0,
        "required": false
    },
    "dueOverhaulValue": {
        "default": 0,
        "required": false
    },
    "figureIndex": {
        "default": "",
        "required": false
    },
    "idAircraft": {
        "required": false
    },
    "idEngineerPrisItem": {
        "required": false
    },
    "idPart": {
        "required": false
    },
    "idPartInstall": {
        "required": true
    },
    "installedOverhaulC": {
        "default": 0,
        "required": false
    },
    "installedOverhaulH": {
        "default": 0,
        "required": false
    },
    "installedOverhaulValue": {
        "default": 0,
        "required": false
    },
    "installedParentC": {
        "default": 0,
        "required": false
    },
    "installedParentH": {
        "default": 0,
        "required": false
    },
    "installedParentValue": {
        "default": 0,
        "required": false
    },
    "installedTsnC": {
        "default": 0,
        "required": false
    },
    "installedTsnH": {
        "default": 0,
        "required": false
    },
    "isfeatured": {
        "default": "",
        "required": false
    },
    "itemIndex": {
        "default": "",
        "required": false
    },
    "newParen": {
        "default": "",
        "required": false
    },
    "oldId": {
        "default": "",
        "required": false
    },
    "oldIdPart": {
        "default": "",
        "required": false
    },
    "oldParent": {
        "default": "",
        "required": false
    },
    "onPris": {
        "default": "",
        "required": false
    },
    "parent": {
        "default": "",
        "required": false
    },
    "qtyInstall": {
        "default": 0,
        "required": false
    },
    "refTechLog": {
        "default": "",
        "required": false
    },
    "statusInstall": {
        "default": "",
        "required": false
    },
    "topParent": {
        "default": "",
        "required": false
    },
    "updatedAt": {
        "default": "",
        "required": false
    }
};

const AmimsPartLogReportFormSchema = {
    "activity": {
        "default": "",
        "required": false
    },
    "createdAt": {
        "default": "",
        "required": false
    },
    "dateLog": {
        "default": "",
        "required": false
    },
    "fromModule": {
        "default": "",
        "required": false
    },
    "idModule": {
        "required": false
    },
    "idPart": {
        "required": false
    },
    "idPartLog": {
        "required": true
    },
    "idPosition": {
        "required": false
    },
    "idSite": {
        "required": false
    },
    "idUser": {
        "required": false
    },
    "numberModule": {
        "default": "",
        "required": false
    },
    "oldId": {
        "default": "",
        "required": false
    },
    "part": {
        "default": "",
        "required": true
    },
    "position": {
        "default": "",
        "required": true
    },
    "qtyLog": {
        "default": 0,
        "required": false
    },
    "site": {
        "default": "",
        "required": true
    },
    "statusOnInventory": {
        "default": "",
        "required": false
    },
    "tboCycle": {
        "default": 0,
        "required": false
    },
    "tboHours": {
        "default": 0,
        "required": false
    },
    "tboVal": {
        "default": 0,
        "required": false
    },
    "tboVar": {
        "default": "",
        "required": false
    },
    "toLocation": {
        "default": "",
        "required": false
    },
    "tsnCycle": {
        "default": 0,
        "required": false
    },
    "tsnHours": {
        "default": 0,
        "required": false
    },
    "tsnVal": {
        "default": 0,
        "required": false
    },
    "tsnVar": {
        "default": "",
        "required": false
    },
    "tsoCycle": {
        "default": 0,
        "required": false
    },
    "tsoHours": {
        "default": 0,
        "required": false
    },
    "tsoVal": {
        "default": 0,
        "required": false
    },
    "tsoVar": {
        "default": "",
        "required": false
    },
    "updatedAt": {
        "default": "",
        "required": false
    }
};

const AmimsPartLogWidgetFormSchema = {
    "activity": {
        "default": "",
        "required": false
    },
    "createdAt": {
        "default": "",
        "required": false
    },
    "dateLog": {
        "default": "",
        "required": false
    },
    "fromModule": {
        "default": "",
        "required": false
    },
    "idModule": {
        "required": false
    },
    "idPart": {
        "required": false
    },
    "idPartLog": {
        "required": true
    },
    "idPosition": {
        "required": false
    },
    "idSite": {
        "required": false
    },
    "idUser": {
        "required": false
    },
    "numberModule": {
        "default": "",
        "required": false
    },
    "oldId": {
        "default": "",
        "required": false
    },
    "qtyLog": {
        "default": 0,
        "required": false
    },
    "statusOnInventory": {
        "default": "",
        "required": false
    },
    "tboCycle": {
        "default": 0,
        "required": false
    },
    "tboHours": {
        "default": 0,
        "required": false
    },
    "tboVal": {
        "default": 0,
        "required": false
    },
    "tboVar": {
        "default": "",
        "required": false
    },
    "toLocation": {
        "default": "",
        "required": false
    },
    "total": {
        "default": 0,
        "required": false
    },
    "tsnCycle": {
        "default": 0,
        "required": false
    },
    "tsnHours": {
        "default": 0,
        "required": false
    },
    "tsnVal": {
        "default": 0,
        "required": false
    },
    "tsnVar": {
        "default": "",
        "required": false
    },
    "tsoCycle": {
        "default": 0,
        "required": false
    },
    "tsoHours": {
        "default": 0,
        "required": false
    },
    "tsoVal": {
        "default": 0,
        "required": false
    },
    "tsoVar": {
        "default": "",
        "required": false
    },
    "updatedAt": {
        "default": "",
        "required": false
    }
};

const AmimsPartLogFormSchema = {
    "activity": {
        "default": "",
        "required": false
    },
    "createdAt": {
        "default": "",
        "required": false
    },
    "dateLog": {
        "default": "",
        "required": false
    },
    "fromModule": {
        "default": "",
        "required": false
    },
    "idModule": {
        "required": false
    },
    "idPart": {
        "required": false
    },
    "idPartLog": {
        "required": true
    },
    "idPosition": {
        "required": false
    },
    "idSite": {
        "required": false
    },
    "idUser": {
        "required": false
    },
    "numberModule": {
        "default": "",
        "required": false
    },
    "oldId": {
        "default": "",
        "required": false
    },
    "qtyLog": {
        "default": 0,
        "required": false
    },
    "statusOnInventory": {
        "default": "",
        "required": false
    },
    "tboCycle": {
        "default": 0,
        "required": false
    },
    "tboHours": {
        "default": 0,
        "required": false
    },
    "tboVal": {
        "default": 0,
        "required": false
    },
    "tboVar": {
        "default": "",
        "required": false
    },
    "toLocation": {
        "default": "",
        "required": false
    },
    "tsnCycle": {
        "default": 0,
        "required": false
    },
    "tsnHours": {
        "default": 0,
        "required": false
    },
    "tsnVal": {
        "default": 0,
        "required": false
    },
    "tsnVar": {
        "default": "",
        "required": false
    },
    "tsoCycle": {
        "default": 0,
        "required": false
    },
    "tsoHours": {
        "default": 0,
        "required": false
    },
    "tsoVal": {
        "default": 0,
        "required": false
    },
    "tsoVar": {
        "default": "",
        "required": false
    },
    "updatedAt": {
        "default": "",
        "required": false
    }
};

const AmimsPartReportFormSchema = {
    "bin": {
        "default": "",
        "required": false
    },
    "certificationNo": {
        "default": "",
        "required": false
    },
    "createdAt": {
        "default": "",
        "required": false
    },
    "currency": {
        "default": "",
        "required": true
    },
    "dateOrder": {
        "default": "",
        "required": false
    },
    "endOfLife": {
        "default": "",
        "required": false
    },
    "firstInstallC": {
        "default": 0,
        "required": false
    },
    "firstInstallDate": {
        "default": "",
        "required": false
    },
    "firstInstallH": {
        "default": 0,
        "required": false
    },
    "groupStatus": {
        "default": "",
        "required": false
    },
    "idConditionMonitoring": {
        "required": false
    },
    "idCurrency": {
        "required": false
    },
    "idLifeTimeLimit": {
        "required": false
    },
    "idMpart": {
        "required": false
    },
    "idPart": {
        "required": true
    },
    "idPartCondition": {
        "required": false
    },
    "idPurGrn": {
        "required": false
    },
    "idPurPoItem": {
        "required": false
    },
    "idPurPrcl": {
        "required": false
    },
    "idPurVendor": {
        "required": false
    },
    "idSite": {
        "required": false
    },
    "idTypeOfwork": {
        "required": false
    },
    "idUser": {
        "required": false
    },
    "idWarranty": {
        "required": false
    },
    "isDeleted": {
        "default": 0,
        "required": false
    },
    "lifeLimitCycle": {
        "default": 0,
        "required": false
    },
    "lifeLimitHours": {
        "default": 0,
        "required": false
    },
    "lifeLimitVal": {
        "default": 0,
        "required": false
    },
    "lifeLimitVar": {
        "default": "",
        "required": false
    },
    "manufacture": {
        "default": "",
        "required": false
    },
    "manufactureDate": {
        "default": "",
        "required": false
    },
    "mpart": {
        "default": "",
        "required": true
    },
    "newFirstInstallH": {
        "default": 0,
        "required": false
    },
    "oldId": {
        "default": "",
        "required": false
    },
    "oldParent": {
        "default": "",
        "required": false
    },
    "partParent": {
        "default": "",
        "required": false
    },
    "position": {
        "default": "",
        "required": false
    },
    "price": {
        "default": 0,
        "required": false
    },
    "purchaseDate": {
        "default": "",
        "required": false
    },
    "qty": {
        "default": 0,
        "required": false
    },
    "site": {
        "default": "",
        "required": true
    },
    "sn": {
        "default": "",
        "required": false
    },
    "startInstallC": {
        "default": 0,
        "required": false
    },
    "startInstallDate": {
        "default": "",
        "required": false
    },
    "startInstallH": {
        "default": 0,
        "required": false
    },
    "statusOnInventory": {
        "default": "",
        "required": false
    },
    "tbiCycle": {
        "default": 0,
        "required": false
    },
    "tbiHours": {
        "default": 0,
        "required": false
    },
    "tbiVal": {
        "default": 0,
        "required": false
    },
    "tbiVar": {
        "default": "",
        "required": false
    },
    "tboCycle": {
        "default": 0,
        "required": false
    },
    "tboHours": {
        "default": 0,
        "required": false
    },
    "tboVal": {
        "default": 0,
        "required": false
    },
    "tboVar": {
        "default": "",
        "required": false
    },
    "tempUse": {
        "default": 0,
        "required": false
    },
    "tsiCycle": {
        "default": 0,
        "required": false
    },
    "tsiHours": {
        "default": 0,
        "required": false
    },
    "tsiVal": {
        "default": 0,
        "required": false
    },
    "tsiVar": {
        "default": "",
        "required": false
    },
    "tsnCycle": {
        "default": 0,
        "required": false
    },
    "tsnHours": {
        "default": 0,
        "required": false
    },
    "tsnVal": {
        "default": 0,
        "required": false
    },
    "tsnVar": {
        "default": "",
        "required": false
    },
    "tsoCycle": {
        "default": 0,
        "required": false
    },
    "tsoHours": {
        "default": 0,
        "required": false
    },
    "tsoVal": {
        "default": 0,
        "required": false
    },
    "tsoVar": {
        "default": "",
        "required": false
    },
    "updatedAt": {
        "default": "",
        "required": false
    },
    "useableStatus": {
        "default": "",
        "required": false
    },
    "warranty": {
        "default": "",
        "required": true
    },
    "warrantyCycle": {
        "default": 0,
        "required": false
    },
    "warrantyDays": {
        "default": 0,
        "required": false
    },
    "warrantyHours": {
        "default": 0,
        "required": false
    },
    "warrantyStartCycle": {
        "default": 0,
        "required": false
    },
    "warrantyStartDate": {
        "default": "",
        "required": false
    },
    "warrantyVal": {
        "default": 0,
        "required": false
    },
    "warrantyYears": {
        "default": 0,
        "required": false
    }
};

const AmimsPartWidgetFormSchema = {
    "bin": {
        "default": "",
        "required": false
    },
    "certificationNo": {
        "default": "",
        "required": false
    },
    "createdAt": {
        "default": "",
        "required": false
    },
    "dateOrder": {
        "default": "",
        "required": false
    },
    "endOfLife": {
        "default": "",
        "required": false
    },
    "firstInstallC": {
        "default": 0,
        "required": false
    },
    "firstInstallDate": {
        "default": "",
        "required": false
    },
    "firstInstallH": {
        "default": 0,
        "required": false
    },
    "groupStatus": {
        "default": "",
        "required": false
    },
    "idConditionMonitoring": {
        "required": false
    },
    "idCurrency": {
        "required": false
    },
    "idLifeTimeLimit": {
        "required": false
    },
    "idMpart": {
        "required": false
    },
    "idPart": {
        "required": true
    },
    "idPartCondition": {
        "required": false
    },
    "idPurGrn": {
        "required": false
    },
    "idPurPoItem": {
        "required": false
    },
    "idPurPrcl": {
        "required": false
    },
    "idPurVendor": {
        "required": false
    },
    "idSite": {
        "required": false
    },
    "idTypeOfwork": {
        "required": false
    },
    "idUser": {
        "required": false
    },
    "idWarranty": {
        "required": false
    },
    "isDeleted": {
        "default": 0,
        "required": false
    },
    "lifeLimitCycle": {
        "default": 0,
        "required": false
    },
    "lifeLimitHours": {
        "default": 0,
        "required": false
    },
    "lifeLimitVal": {
        "default": 0,
        "required": false
    },
    "lifeLimitVar": {
        "default": "",
        "required": false
    },
    "manufacture": {
        "default": "",
        "required": false
    },
    "manufactureDate": {
        "default": "",
        "required": false
    },
    "newFirstInstallH": {
        "default": 0,
        "required": false
    },
    "oldId": {
        "default": "",
        "required": false
    },
    "oldParent": {
        "default": "",
        "required": false
    },
    "partParent": {
        "default": "",
        "required": false
    },
    "position": {
        "default": "",
        "required": false
    },
    "price": {
        "default": 0,
        "required": false
    },
    "purchaseDate": {
        "default": "",
        "required": false
    },
    "qty": {
        "default": 0,
        "required": false
    },
    "sn": {
        "default": "",
        "required": false
    },
    "startInstallC": {
        "default": 0,
        "required": false
    },
    "startInstallDate": {
        "default": "",
        "required": false
    },
    "startInstallH": {
        "default": 0,
        "required": false
    },
    "statusOnInventory": {
        "default": "",
        "required": false
    },
    "tbiCycle": {
        "default": 0,
        "required": false
    },
    "tbiHours": {
        "default": 0,
        "required": false
    },
    "tbiVal": {
        "default": 0,
        "required": false
    },
    "tbiVar": {
        "default": "",
        "required": false
    },
    "tboCycle": {
        "default": 0,
        "required": false
    },
    "tboHours": {
        "default": 0,
        "required": false
    },
    "tboVal": {
        "default": 0,
        "required": false
    },
    "tboVar": {
        "default": "",
        "required": false
    },
    "tempUse": {
        "default": 0,
        "required": false
    },
    "total": {
        "default": 0,
        "required": false
    },
    "tsiCycle": {
        "default": 0,
        "required": false
    },
    "tsiHours": {
        "default": 0,
        "required": false
    },
    "tsiVal": {
        "default": 0,
        "required": false
    },
    "tsiVar": {
        "default": "",
        "required": false
    },
    "tsnCycle": {
        "default": 0,
        "required": false
    },
    "tsnHours": {
        "default": 0,
        "required": false
    },
    "tsnVal": {
        "default": 0,
        "required": false
    },
    "tsnVar": {
        "default": "",
        "required": false
    },
    "tsoCycle": {
        "default": 0,
        "required": false
    },
    "tsoHours": {
        "default": 0,
        "required": false
    },
    "tsoVal": {
        "default": 0,
        "required": false
    },
    "tsoVar": {
        "default": "",
        "required": false
    },
    "updatedAt": {
        "default": "",
        "required": false
    },
    "useableStatus": {
        "default": "",
        "required": false
    },
    "warrantyCycle": {
        "default": 0,
        "required": false
    },
    "warrantyDays": {
        "default": 0,
        "required": false
    },
    "warrantyHours": {
        "default": 0,
        "required": false
    },
    "warrantyStartCycle": {
        "default": 0,
        "required": false
    },
    "warrantyStartDate": {
        "default": "",
        "required": false
    },
    "warrantyVal": {
        "default": 0,
        "required": false
    },
    "warrantyYears": {
        "default": 0,
        "required": false
    }
};

const AmimsPartFormSchema = {
    "bin": {
        "default": "",
        "required": false
    },
    "certificationNo": {
        "default": "",
        "required": false
    },
    "createdAt": {
        "default": "",
        "required": false
    },
    "dateOrder": {
        "default": "",
        "required": false
    },
    "endOfLife": {
        "default": "",
        "required": false
    },
    "firstInstallC": {
        "default": 0,
        "required": false
    },
    "firstInstallDate": {
        "default": "",
        "required": false
    },
    "firstInstallH": {
        "default": 0,
        "required": false
    },
    "groupStatus": {
        "default": "",
        "required": false
    },
    "idConditionMonitoring": {
        "required": false
    },
    "idCurrency": {
        "required": false
    },
    "idLifeTimeLimit": {
        "required": false
    },
    "idMpart": {
        "required": false
    },
    "idPart": {
        "required": true
    },
    "idPartCondition": {
        "required": false
    },
    "idPurGrn": {
        "required": false
    },
    "idPurPoItem": {
        "required": false
    },
    "idPurPrcl": {
        "required": false
    },
    "idPurVendor": {
        "required": false
    },
    "idSite": {
        "required": false
    },
    "idTypeOfwork": {
        "required": false
    },
    "idUser": {
        "required": false
    },
    "idWarranty": {
        "required": false
    },
    "isDeleted": {
        "default": 0,
        "required": false
    },
    "lifeLimitCycle": {
        "default": 0,
        "required": false
    },
    "lifeLimitHours": {
        "default": 0,
        "required": false
    },
    "lifeLimitVal": {
        "default": 0,
        "required": false
    },
    "lifeLimitVar": {
        "default": "",
        "required": false
    },
    "manufacture": {
        "default": "",
        "required": false
    },
    "manufactureDate": {
        "default": "",
        "required": false
    },
    "newFirstInstallH": {
        "default": 0,
        "required": false
    },
    "oldId": {
        "default": "",
        "required": false
    },
    "oldParent": {
        "default": "",
        "required": false
    },
    "partParent": {
        "default": "",
        "required": false
    },
    "position": {
        "default": "",
        "required": false
    },
    "price": {
        "default": 0,
        "required": false
    },
    "purchaseDate": {
        "default": "",
        "required": false
    },
    "qty": {
        "default": 0,
        "required": false
    },
    "sn": {
        "default": "",
        "required": false
    },
    "startInstallC": {
        "default": 0,
        "required": false
    },
    "startInstallDate": {
        "default": "",
        "required": false
    },
    "startInstallH": {
        "default": 0,
        "required": false
    },
    "statusOnInventory": {
        "default": "",
        "required": false
    },
    "tbiCycle": {
        "default": 0,
        "required": false
    },
    "tbiHours": {
        "default": 0,
        "required": false
    },
    "tbiVal": {
        "default": 0,
        "required": false
    },
    "tbiVar": {
        "default": "",
        "required": false
    },
    "tboCycle": {
        "default": 0,
        "required": false
    },
    "tboHours": {
        "default": 0,
        "required": false
    },
    "tboVal": {
        "default": 0,
        "required": false
    },
    "tboVar": {
        "default": "",
        "required": false
    },
    "tempUse": {
        "default": 0,
        "required": false
    },
    "tsiCycle": {
        "default": 0,
        "required": false
    },
    "tsiHours": {
        "default": 0,
        "required": false
    },
    "tsiVal": {
        "default": 0,
        "required": false
    },
    "tsiVar": {
        "default": "",
        "required": false
    },
    "tsnCycle": {
        "default": 0,
        "required": false
    },
    "tsnHours": {
        "default": 0,
        "required": false
    },
    "tsnVal": {
        "default": 0,
        "required": false
    },
    "tsnVar": {
        "default": "",
        "required": false
    },
    "tsoCycle": {
        "default": 0,
        "required": false
    },
    "tsoHours": {
        "default": 0,
        "required": false
    },
    "tsoVal": {
        "default": 0,
        "required": false
    },
    "tsoVar": {
        "default": "",
        "required": false
    },
    "updatedAt": {
        "default": "",
        "required": false
    },
    "useableStatus": {
        "default": "",
        "required": false
    },
    "warrantyCycle": {
        "default": 0,
        "required": false
    },
    "warrantyDays": {
        "default": 0,
        "required": false
    },
    "warrantyHours": {
        "default": 0,
        "required": false
    },
    "warrantyStartCycle": {
        "default": 0,
        "required": false
    },
    "warrantyStartDate": {
        "default": "",
        "required": false
    },
    "warrantyVal": {
        "default": 0,
        "required": false
    },
    "warrantyYears": {
        "default": 0,
        "required": false
    }
};

const AmimsPartidReportFormSchema = {
    "childnamePartid": {
        "default": "",
        "required": false
    },
    "description": {
        "default": "",
        "required": false
    },
    "idPartid": {
        "required": true
    },
    "isDeleted": {
        "default": 0,
        "required": false
    },
    "issingle": {
        "default": "",
        "required": false
    },
    "partid": {
        "default": "",
        "required": false
    }
};

const AmimsPartidWidgetFormSchema = {
    "childnamePartid": {
        "default": "",
        "required": false
    },
    "description": {
        "default": "",
        "required": false
    },
    "idPartid": {
        "required": true
    },
    "isDeleted": {
        "default": 0,
        "required": false
    },
    "issingle": {
        "default": "",
        "required": false
    },
    "partid": {
        "default": "",
        "required": false
    },
    "total": {
        "default": 0,
        "required": false
    }
};

const AmimsPartidFormSchema = {
    "childnamePartid": {
        "default": "",
        "required": false
    },
    "description": {
        "default": "",
        "required": false
    },
    "idPartid": {
        "required": true
    },
    "isDeleted": {
        "default": 0,
        "required": false
    },
    "issingle": {
        "default": "",
        "required": false
    },
    "partid": {
        "default": "",
        "required": false
    }
};

const AmimsPilotReportFormSchema = {
    "createdAt": {
        "default": "",
        "required": false
    },
    "hashIdUser": {
        "default": 0,
        "required": false
    },
    "idPilot": {
        "required": true
    },
    "isDeleted": {
        "default": 0,
        "required": false
    },
    "namePilot": {
        "default": "",
        "required": false
    },
    "status": {
        "default": 0,
        "required": false
    },
    "type": {
        "default": "",
        "required": false
    },
    "updatedAt": {
        "default": "",
        "required": false
    }
};

const AmimsPilotWidgetFormSchema = {
    "createdAt": {
        "default": "",
        "required": false
    },
    "hashIdUser": {
        "default": 0,
        "required": false
    },
    "idPilot": {
        "required": true
    },
    "isDeleted": {
        "default": 0,
        "required": false
    },
    "namePilot": {
        "default": "",
        "required": false
    },
    "status": {
        "default": 0,
        "required": false
    },
    "total": {
        "default": 0,
        "required": false
    },
    "type": {
        "default": "",
        "required": false
    },
    "updatedAt": {
        "default": "",
        "required": false
    }
};

const AmimsPilotFormSchema = {
    "createdAt": {
        "default": "",
        "required": false
    },
    "hashIdUser": {
        "default": 0,
        "required": false
    },
    "idPilot": {
        "required": true
    },
    "isDeleted": {
        "default": 0,
        "required": false
    },
    "namePilot": {
        "default": "",
        "required": false
    },
    "status": {
        "default": 0,
        "required": false
    },
    "type": {
        "default": "",
        "required": false
    },
    "updatedAt": {
        "default": "",
        "required": false
    }
};

const AmimsPositionReportFormSchema = {
    "code": {
        "default": "",
        "required": false
    },
    "description": {
        "default": "",
        "required": false
    },
    "idPosition": {
        "required": true
    },
    "isDeleted": {
        "default": 0,
        "required": false
    },
    "position": {
        "default": "",
        "required": false
    }
};

const AmimsPositionWidgetFormSchema = {
    "code": {
        "default": "",
        "required": false
    },
    "description": {
        "default": "",
        "required": false
    },
    "idPosition": {
        "required": true
    },
    "isDeleted": {
        "default": 0,
        "required": false
    },
    "position": {
        "default": "",
        "required": false
    },
    "total": {
        "default": 0,
        "required": false
    }
};

const AmimsPositionFormSchema = {
    "code": {
        "default": "",
        "required": false
    },
    "description": {
        "default": "",
        "required": false
    },
    "idPosition": {
        "required": true
    },
    "isDeleted": {
        "default": 0,
        "required": false
    },
    "position": {
        "default": "",
        "required": false
    }
};

const AmimsPurGrnItemReportFormSchema = {
    "idMpart": {
        "required": false
    },
    "idPart": {
        "required": false
    },
    "idPurGrn": {
        "required": false
    },
    "idPurGrnItem": {
        "required": true
    },
    "idPurPoItem": {
        "required": false
    },
    "mpart": {
        "default": "",
        "required": true
    },
    "noteGrnItem": {
        "default": "",
        "required": false
    },
    "part": {
        "default": "",
        "required": true
    },
    "qtyGrn": {
        "default": 0,
        "required": false
    },
    "serialNumber": {
        "default": "",
        "required": false
    },
    "statusGrn": {
        "default": "",
        "required": false
    }
};

const AmimsPurGrnItemWidgetFormSchema = {
    "idMpart": {
        "required": false
    },
    "idPart": {
        "required": false
    },
    "idPurGrn": {
        "required": false
    },
    "idPurGrnItem": {
        "required": true
    },
    "idPurPoItem": {
        "required": false
    },
    "noteGrnItem": {
        "default": "",
        "required": false
    },
    "qtyGrn": {
        "default": 0,
        "required": false
    },
    "serialNumber": {
        "default": "",
        "required": false
    },
    "statusGrn": {
        "default": "",
        "required": false
    },
    "total": {
        "default": 0,
        "required": false
    }
};

const AmimsPurGrnItemFormSchema = {
    "idMpart": {
        "required": false
    },
    "idPart": {
        "required": false
    },
    "idPurGrn": {
        "required": false
    },
    "idPurGrnItem": {
        "required": true
    },
    "idPurPoItem": {
        "required": false
    },
    "noteGrnItem": {
        "default": "",
        "required": false
    },
    "qtyGrn": {
        "default": 0,
        "required": false
    },
    "serialNumber": {
        "default": "",
        "required": false
    },
    "statusGrn": {
        "default": "",
        "required": false
    }
};

const AmimsPurGrnReportFormSchema = {
    "createdAt": {
        "default": "",
        "required": false
    },
    "dateGrn": {
        "default": "",
        "required": false
    },
    "dateQa": {
        "default": "",
        "required": false
    },
    "dateQaClose": {
        "default": "",
        "required": false
    },
    "grnKe": {
        "default": 0,
        "required": false
    },
    "idPurGrn": {
        "required": true
    },
    "idPurVendor": {
        "required": false
    },
    "idSite": {
        "required": false
    },
    "idUser": {
        "required": false
    },
    "isDeleted": {
        "default": 0,
        "required": false
    },
    "noIndex": {
        "default": 0,
        "required": false
    },
    "noteGrn": {
        "default": "",
        "required": false
    },
    "numberGrn": {
        "default": "",
        "required": false
    },
    "site": {
        "default": "",
        "required": true
    },
    "updatedAt": {
        "default": "",
        "required": false
    },
    "validasi": {
        "default": 0,
        "required": false
    }
};

const AmimsPurGrnWidgetFormSchema = {
    "createdAt": {
        "default": "",
        "required": false
    },
    "dateGrn": {
        "default": "",
        "required": false
    },
    "dateQa": {
        "default": "",
        "required": false
    },
    "dateQaClose": {
        "default": "",
        "required": false
    },
    "grnKe": {
        "default": 0,
        "required": false
    },
    "idPurGrn": {
        "required": true
    },
    "idPurVendor": {
        "required": false
    },
    "idSite": {
        "required": false
    },
    "idUser": {
        "required": false
    },
    "isDeleted": {
        "default": 0,
        "required": false
    },
    "noIndex": {
        "default": 0,
        "required": false
    },
    "noteGrn": {
        "default": "",
        "required": false
    },
    "numberGrn": {
        "default": "",
        "required": false
    },
    "total": {
        "default": 0,
        "required": false
    },
    "updatedAt": {
        "default": "",
        "required": false
    },
    "validasi": {
        "default": 0,
        "required": false
    }
};

const AmimsPurGrnFormSchema = {
    "createdAt": {
        "default": "",
        "required": false
    },
    "dateGrn": {
        "default": "",
        "required": false
    },
    "dateQa": {
        "default": "",
        "required": false
    },
    "dateQaClose": {
        "default": "",
        "required": false
    },
    "grnKe": {
        "default": 0,
        "required": false
    },
    "idPurGrn": {
        "required": true
    },
    "idPurVendor": {
        "required": false
    },
    "idSite": {
        "required": false
    },
    "idUser": {
        "required": false
    },
    "isDeleted": {
        "default": 0,
        "required": false
    },
    "noIndex": {
        "default": 0,
        "required": false
    },
    "noteGrn": {
        "default": "",
        "required": false
    },
    "numberGrn": {
        "default": "",
        "required": false
    },
    "updatedAt": {
        "default": "",
        "required": false
    },
    "validasi": {
        "default": 0,
        "required": false
    }
};

const AmimsPurPoItemReportFormSchema = {
    "edd": {
        "default": 0,
        "required": false
    },
    "idEngineerRti": {
        "required": false
    },
    "idMpart": {
        "required": false
    },
    "idPart": {
        "required": false
    },
    "idPurPo": {
        "required": false
    },
    "idPurPoItem": {
        "required": true
    },
    "idPurPrItem": {
        "required": false
    },
    "idPurPrcl": {
        "required": false
    },
    "idQaRpd": {
        "required": false
    },
    "mpart": {
        "default": "",
        "required": true
    },
    "notePoItem": {
        "default": "",
        "required": false
    },
    "oldPoItem": {
        "default": "",
        "required": false
    },
    "part": {
        "default": "",
        "required": true
    },
    "price": {
        "default": 0,
        "required": false
    },
    "priorityPoItem": {
        "default": "",
        "required": false
    },
    "qtyPo": {
        "default": 0,
        "required": false
    },
    "totalQtyGrn": {
        "default": 0,
        "required": false
    },
    "tsnCycle": {
        "default": 0,
        "required": false
    },
    "tsnHours": {
        "default": 0,
        "required": false
    },
    "tsnVal": {
        "default": 0,
        "required": false
    },
    "tsnVar": {
        "default": "",
        "required": false
    },
    "tsoCycle": {
        "default": 0,
        "required": false
    },
    "tsoHours": {
        "default": 0,
        "required": false
    },
    "tsoVal": {
        "default": 0,
        "required": false
    },
    "tsoVar": {
        "default": "",
        "required": false
    },
    "warantyStartCycle": {
        "default": 0,
        "required": false
    },
    "warantyStartDate": {
        "default": "",
        "required": false
    },
    "warantyStartDays": {
        "default": 0,
        "required": false
    },
    "warantyStartHours": {
        "default": 0,
        "required": false
    }
};

const AmimsPurPoItemWidgetFormSchema = {
    "edd": {
        "default": 0,
        "required": false
    },
    "idEngineerRti": {
        "required": false
    },
    "idMpart": {
        "required": false
    },
    "idPart": {
        "required": false
    },
    "idPurPo": {
        "required": false
    },
    "idPurPoItem": {
        "required": true
    },
    "idPurPrItem": {
        "required": false
    },
    "idPurPrcl": {
        "required": false
    },
    "idQaRpd": {
        "required": false
    },
    "notePoItem": {
        "default": "",
        "required": false
    },
    "oldPoItem": {
        "default": "",
        "required": false
    },
    "price": {
        "default": 0,
        "required": false
    },
    "priorityPoItem": {
        "default": "",
        "required": false
    },
    "qtyPo": {
        "default": 0,
        "required": false
    },
    "total": {
        "default": 0,
        "required": false
    },
    "totalQtyGrn": {
        "default": 0,
        "required": false
    },
    "tsnCycle": {
        "default": 0,
        "required": false
    },
    "tsnHours": {
        "default": 0,
        "required": false
    },
    "tsnVal": {
        "default": 0,
        "required": false
    },
    "tsnVar": {
        "default": "",
        "required": false
    },
    "tsoCycle": {
        "default": 0,
        "required": false
    },
    "tsoHours": {
        "default": 0,
        "required": false
    },
    "tsoVal": {
        "default": 0,
        "required": false
    },
    "tsoVar": {
        "default": "",
        "required": false
    },
    "warantyStartCycle": {
        "default": 0,
        "required": false
    },
    "warantyStartDate": {
        "default": "",
        "required": false
    },
    "warantyStartDays": {
        "default": 0,
        "required": false
    },
    "warantyStartHours": {
        "default": 0,
        "required": false
    }
};

const AmimsPurPoItemFormSchema = {
    "edd": {
        "default": 0,
        "required": false
    },
    "idEngineerRti": {
        "required": false
    },
    "idMpart": {
        "required": false
    },
    "idPart": {
        "required": false
    },
    "idPurPo": {
        "required": false
    },
    "idPurPoItem": {
        "required": true
    },
    "idPurPrItem": {
        "required": false
    },
    "idPurPrcl": {
        "required": false
    },
    "idQaRpd": {
        "required": false
    },
    "notePoItem": {
        "default": "",
        "required": false
    },
    "oldPoItem": {
        "default": "",
        "required": false
    },
    "price": {
        "default": 0,
        "required": false
    },
    "priorityPoItem": {
        "default": "",
        "required": false
    },
    "qtyPo": {
        "default": 0,
        "required": false
    },
    "totalQtyGrn": {
        "default": 0,
        "required": false
    },
    "tsnCycle": {
        "default": 0,
        "required": false
    },
    "tsnHours": {
        "default": 0,
        "required": false
    },
    "tsnVal": {
        "default": 0,
        "required": false
    },
    "tsnVar": {
        "default": "",
        "required": false
    },
    "tsoCycle": {
        "default": 0,
        "required": false
    },
    "tsoHours": {
        "default": 0,
        "required": false
    },
    "tsoVal": {
        "default": 0,
        "required": false
    },
    "tsoVar": {
        "default": "",
        "required": false
    },
    "warantyStartCycle": {
        "default": 0,
        "required": false
    },
    "warantyStartDate": {
        "default": "",
        "required": false
    },
    "warantyStartDays": {
        "default": 0,
        "required": false
    },
    "warantyStartHours": {
        "default": 0,
        "required": false
    }
};

const AmimsPurPoReportFormSchema = {
    "approveDirector": {
        "default": 0,
        "required": false
    },
    "createdAt": {
        "default": "",
        "required": false
    },
    "currency": {
        "default": "",
        "required": true
    },
    "dateAcc": {
        "default": "",
        "required": false
    },
    "dateAccDirector": {
        "default": "",
        "required": false
    },
    "dateDeadline": {
        "default": "",
        "required": false
    },
    "datePo": {
        "default": "",
        "required": false
    },
    "idCurrency": {
        "required": false
    },
    "idPosition": {
        "required": false
    },
    "idPurPo": {
        "required": true
    },
    "idPurVendor": {
        "required": false
    },
    "idPurVendorContact": {
        "required": false
    },
    "idSite": {
        "required": false
    },
    "idUser": {
        "required": false
    },
    "idUserDirector": {
        "required": false
    },
    "idUserManager": {
        "required": false
    },
    "isDeleted": {
        "default": 0,
        "required": false
    },
    "modeOfTransport": {
        "default": "",
        "required": false
    },
    "noIndex": {
        "default": 0,
        "required": false
    },
    "notePo": {
        "default": "",
        "required": false
    },
    "numberPo": {
        "default": "",
        "required": false
    },
    "oldPo": {
        "default": "",
        "required": false
    },
    "position": {
        "default": "",
        "required": true
    },
    "priceTotal": {
        "default": 0,
        "required": false
    },
    "quotationDate": {
        "default": "",
        "required": false
    },
    "quotationNumber": {
        "default": "",
        "required": false
    },
    "shipping": {
        "default": "",
        "required": false
    },
    "site": {
        "default": "",
        "required": true
    },
    "statusPo": {
        "default": "",
        "required": false
    },
    "term": {
        "default": "",
        "required": false
    },
    "typePo": {
        "default": "",
        "required": false
    },
    "updatedAt": {
        "default": "",
        "required": false
    },
    "validasi": {
        "default": 0,
        "required": false
    },
    "vat": {
        "default": 0,
        "required": false
    }
};

const AmimsPurPoWidgetFormSchema = {
    "approveDirector": {
        "default": 0,
        "required": false
    },
    "createdAt": {
        "default": "",
        "required": false
    },
    "dateAcc": {
        "default": "",
        "required": false
    },
    "dateAccDirector": {
        "default": "",
        "required": false
    },
    "dateDeadline": {
        "default": "",
        "required": false
    },
    "datePo": {
        "default": "",
        "required": false
    },
    "idCurrency": {
        "required": false
    },
    "idPosition": {
        "required": false
    },
    "idPurPo": {
        "required": true
    },
    "idPurVendor": {
        "required": false
    },
    "idPurVendorContact": {
        "required": false
    },
    "idSite": {
        "required": false
    },
    "idUser": {
        "required": false
    },
    "idUserDirector": {
        "required": false
    },
    "idUserManager": {
        "required": false
    },
    "isDeleted": {
        "default": 0,
        "required": false
    },
    "modeOfTransport": {
        "default": "",
        "required": false
    },
    "noIndex": {
        "default": 0,
        "required": false
    },
    "notePo": {
        "default": "",
        "required": false
    },
    "numberPo": {
        "default": "",
        "required": false
    },
    "oldPo": {
        "default": "",
        "required": false
    },
    "priceTotal": {
        "default": 0,
        "required": false
    },
    "quotationDate": {
        "default": "",
        "required": false
    },
    "quotationNumber": {
        "default": "",
        "required": false
    },
    "shipping": {
        "default": "",
        "required": false
    },
    "statusPo": {
        "default": "",
        "required": false
    },
    "term": {
        "default": "",
        "required": false
    },
    "total": {
        "default": 0,
        "required": false
    },
    "typePo": {
        "default": "",
        "required": false
    },
    "updatedAt": {
        "default": "",
        "required": false
    },
    "validasi": {
        "default": 0,
        "required": false
    },
    "vat": {
        "default": 0,
        "required": false
    }
};

const AmimsPurPoFormSchema = {
    "approveDirector": {
        "default": 0,
        "required": false
    },
    "createdAt": {
        "default": "",
        "required": false
    },
    "dateAcc": {
        "default": "",
        "required": false
    },
    "dateAccDirector": {
        "default": "",
        "required": false
    },
    "dateDeadline": {
        "default": "",
        "required": false
    },
    "datePo": {
        "default": "",
        "required": false
    },
    "idCurrency": {
        "required": false
    },
    "idPosition": {
        "required": false
    },
    "idPurPo": {
        "required": true
    },
    "idPurVendor": {
        "required": false
    },
    "idPurVendorContact": {
        "required": false
    },
    "idSite": {
        "required": false
    },
    "idUser": {
        "required": false
    },
    "idUserDirector": {
        "required": false
    },
    "idUserManager": {
        "required": false
    },
    "isDeleted": {
        "default": 0,
        "required": false
    },
    "modeOfTransport": {
        "default": "",
        "required": false
    },
    "noIndex": {
        "default": 0,
        "required": false
    },
    "notePo": {
        "default": "",
        "required": false
    },
    "numberPo": {
        "default": "",
        "required": false
    },
    "oldPo": {
        "default": "",
        "required": false
    },
    "priceTotal": {
        "default": 0,
        "required": false
    },
    "quotationDate": {
        "default": "",
        "required": false
    },
    "quotationNumber": {
        "default": "",
        "required": false
    },
    "shipping": {
        "default": "",
        "required": false
    },
    "statusPo": {
        "default": "",
        "required": false
    },
    "term": {
        "default": "",
        "required": false
    },
    "typePo": {
        "default": "",
        "required": false
    },
    "updatedAt": {
        "default": "",
        "required": false
    },
    "validasi": {
        "default": 0,
        "required": false
    },
    "vat": {
        "default": 0,
        "required": false
    }
};

const AmimsPurPrItemReportFormSchema = {
    "createdAt": {
        "default": "",
        "required": false
    },
    "idMpart": {
        "required": false
    },
    "idMpcPiroItem": {
        "required": false
    },
    "idPurPr": {
        "required": false
    },
    "idPurPrItem": {
        "required": true
    },
    "isDeleted": {
        "default": 0,
        "required": false
    },
    "mpart": {
        "default": "",
        "required": true
    },
    "notePrItem": {
        "default": "",
        "required": false
    },
    "oldPrItem": {
        "default": "",
        "required": false
    },
    "priority": {
        "default": "",
        "required": false
    },
    "qtyPr": {
        "default": 0,
        "required": false
    },
    "qtyStock": {
        "default": 0,
        "required": false
    },
    "statusItem": {
        "default": "",
        "required": false
    },
    "updatedAt": {
        "default": "",
        "required": false
    }
};

const AmimsPurPrItemWidgetFormSchema = {
    "createdAt": {
        "default": "",
        "required": false
    },
    "idMpart": {
        "required": false
    },
    "idMpcPiroItem": {
        "required": false
    },
    "idPurPr": {
        "required": false
    },
    "idPurPrItem": {
        "required": true
    },
    "isDeleted": {
        "default": 0,
        "required": false
    },
    "notePrItem": {
        "default": "",
        "required": false
    },
    "oldPrItem": {
        "default": "",
        "required": false
    },
    "priority": {
        "default": "",
        "required": false
    },
    "qtyPr": {
        "default": 0,
        "required": false
    },
    "qtyStock": {
        "default": 0,
        "required": false
    },
    "statusItem": {
        "default": "",
        "required": false
    },
    "total": {
        "default": 0,
        "required": false
    },
    "updatedAt": {
        "default": "",
        "required": false
    }
};

const AmimsPurPrItemFormSchema = {
    "createdAt": {
        "default": "",
        "required": false
    },
    "idMpart": {
        "required": false
    },
    "idMpcPiroItem": {
        "required": false
    },
    "idPurPr": {
        "required": false
    },
    "idPurPrItem": {
        "required": true
    },
    "isDeleted": {
        "default": 0,
        "required": false
    },
    "notePrItem": {
        "default": "",
        "required": false
    },
    "oldPrItem": {
        "default": "",
        "required": false
    },
    "priority": {
        "default": "",
        "required": false
    },
    "qtyPr": {
        "default": 0,
        "required": false
    },
    "qtyStock": {
        "default": 0,
        "required": false
    },
    "statusItem": {
        "default": "",
        "required": false
    },
    "updatedAt": {
        "default": "",
        "required": false
    }
};

const AmimsPurPrReportFormSchema = {
    "aircraft": {
        "default": "",
        "required": true
    },
    "createdAt": {
        "default": "",
        "required": false
    },
    "dateAcc": {
        "default": "",
        "required": false
    },
    "datePr": {
        "default": "",
        "required": false
    },
    "description": {
        "default": "",
        "required": false
    },
    "idAircraft": {
        "required": false
    },
    "idPosition": {
        "required": false
    },
    "idPurPr": {
        "required": true
    },
    "idSite": {
        "required": false
    },
    "idUser": {
        "required": false
    },
    "idUserAcc": {
        "required": false
    },
    "isDeleted": {
        "default": 0,
        "required": false
    },
    "keyword": {
        "default": "",
        "required": false
    },
    "noIndex": {
        "default": 0,
        "required": false
    },
    "notePr": {
        "default": "",
        "required": false
    },
    "numberPr": {
        "default": "",
        "required": false
    },
    "oldPr": {
        "default": "",
        "required": false
    },
    "position": {
        "default": "",
        "required": true
    },
    "site": {
        "default": "",
        "required": true
    },
    "statusPr": {
        "default": "",
        "required": false
    },
    "typePr": {
        "default": "",
        "required": false
    },
    "updatedAt": {
        "default": "",
        "required": false
    },
    "validasi": {
        "default": 0,
        "required": false
    }
};

const AmimsPurPrWidgetFormSchema = {
    "createdAt": {
        "default": "",
        "required": false
    },
    "dateAcc": {
        "default": "",
        "required": false
    },
    "datePr": {
        "default": "",
        "required": false
    },
    "description": {
        "default": "",
        "required": false
    },
    "idAircraft": {
        "required": false
    },
    "idPosition": {
        "required": false
    },
    "idPurPr": {
        "required": true
    },
    "idSite": {
        "required": false
    },
    "idUser": {
        "required": false
    },
    "idUserAcc": {
        "required": false
    },
    "isDeleted": {
        "default": 0,
        "required": false
    },
    "keyword": {
        "default": "",
        "required": false
    },
    "noIndex": {
        "default": 0,
        "required": false
    },
    "notePr": {
        "default": "",
        "required": false
    },
    "numberPr": {
        "default": "",
        "required": false
    },
    "oldPr": {
        "default": "",
        "required": false
    },
    "statusPr": {
        "default": "",
        "required": false
    },
    "total": {
        "default": 0,
        "required": false
    },
    "typePr": {
        "default": "",
        "required": false
    },
    "updatedAt": {
        "default": "",
        "required": false
    },
    "validasi": {
        "default": 0,
        "required": false
    }
};

const AmimsPurPrFormSchema = {
    "createdAt": {
        "default": "",
        "required": false
    },
    "dateAcc": {
        "default": "",
        "required": false
    },
    "datePr": {
        "default": "",
        "required": false
    },
    "description": {
        "default": "",
        "required": false
    },
    "idAircraft": {
        "required": false
    },
    "idPosition": {
        "required": false
    },
    "idPurPr": {
        "required": true
    },
    "idSite": {
        "required": false
    },
    "idUser": {
        "required": false
    },
    "idUserAcc": {
        "required": false
    },
    "isDeleted": {
        "default": 0,
        "required": false
    },
    "keyword": {
        "default": "",
        "required": false
    },
    "noIndex": {
        "default": 0,
        "required": false
    },
    "notePr": {
        "default": "",
        "required": false
    },
    "numberPr": {
        "default": "",
        "required": false
    },
    "oldPr": {
        "default": "",
        "required": false
    },
    "statusPr": {
        "default": "",
        "required": false
    },
    "typePr": {
        "default": "",
        "required": false
    },
    "updatedAt": {
        "default": "",
        "required": false
    },
    "validasi": {
        "default": 0,
        "required": false
    }
};

const AmimsPurPrclReportFormSchema = {
    "airworthiness": {
        "default": "",
        "required": false
    },
    "certificationNo": {
        "default": "",
        "required": false
    },
    "createdAt": {
        "default": "",
        "required": false
    },
    "currency": {
        "default": "",
        "required": true
    },
    "datePcrl": {
        "default": "",
        "required": false
    },
    "datePur": {
        "default": "",
        "required": false
    },
    "dateQa": {
        "default": "",
        "required": false
    },
    "description": {
        "default": "",
        "required": false
    },
    "draftBin": {
        "default": "",
        "required": false
    },
    "idConditionMonitoring": {
        "required": false
    },
    "idCurrency": {
        "required": false
    },
    "idInternalGrnItem": {
        "required": false
    },
    "idLifeTimeLimit": {
        "required": false
    },
    "idMpart": {
        "required": false
    },
    "idPart": {
        "required": false
    },
    "idPartCondition": {
        "required": false
    },
    "idPurGrn": {
        "required": false
    },
    "idPurGrnItem": {
        "required": false
    },
    "idPurPrcl": {
        "required": true
    },
    "idPurVendor": {
        "required": false
    },
    "idUserPu": {
        "required": false
    },
    "idUserQa": {
        "required": false
    },
    "isServiceable": {
        "default": 0,
        "required": false
    },
    "lifeLimitCycle": {
        "default": 0,
        "required": false
    },
    "lifeLimitHours": {
        "default": 0,
        "required": false
    },
    "lifeLimitVal": {
        "default": 0,
        "required": false
    },
    "lifeLimitVar": {
        "default": "",
        "required": false
    },
    "loopIndex": {
        "default": 0,
        "required": false
    },
    "manufacture": {
        "default": "",
        "required": false
    },
    "manufactureDate": {
        "default": "",
        "required": false
    },
    "mpart": {
        "default": "",
        "required": true
    },
    "notePcrl": {
        "default": "",
        "required": false
    },
    "part": {
        "default": "",
        "required": true
    },
    "partCheckingPur": {
        "default": "",
        "required": false
    },
    "partCheckingQa": {
        "default": "",
        "required": false
    },
    "prclParent": {
        "default": "",
        "required": false
    },
    "price": {
        "default": 0,
        "required": false
    },
    "qtyCheck": {
        "default": 0,
        "required": false
    },
    "qtyPrcl": {
        "default": 0,
        "required": false
    },
    "qtyReturn": {
        "default": 0,
        "required": false
    },
    "qualityCheck": {
        "default": "",
        "required": false
    },
    "refDate": {
        "default": "",
        "required": false
    },
    "refId": {
        "default": "",
        "required": false
    },
    "refNumber": {
        "default": "",
        "required": false
    },
    "service": {
        "default": "",
        "required": false
    },
    "sn": {
        "default": "",
        "required": false
    },
    "statusPrcl": {
        "default": "",
        "required": false
    },
    "tboCycle": {
        "default": 0,
        "required": false
    },
    "tboHours": {
        "default": 0,
        "required": false
    },
    "tboVal": {
        "default": 0,
        "required": false
    },
    "tboVar": {
        "default": "",
        "required": false
    },
    "tsnCycle": {
        "default": 0,
        "required": false
    },
    "tsnHours": {
        "default": 0,
        "required": false
    },
    "tsnVal": {
        "default": 0,
        "required": false
    },
    "tsnVar": {
        "default": "",
        "required": false
    },
    "tsoCycle": {
        "default": 0,
        "required": false
    },
    "tsoHours": {
        "default": 0,
        "required": false
    },
    "tsoVal": {
        "default": 0,
        "required": false
    },
    "tsoVar": {
        "default": "",
        "required": false
    },
    "typePrcl": {
        "default": "",
        "required": false
    },
    "updatedAt": {
        "default": "",
        "required": false
    },
    "validasi": {
        "default": 0,
        "required": false
    },
    "warrantyCycle": {
        "default": 0,
        "required": false
    },
    "warrantyDays": {
        "default": 0,
        "required": false
    },
    "warrantyHours": {
        "default": 0,
        "required": false
    },
    "warrantyMonths": {
        "default": 0,
        "required": false
    },
    "warrantyStartCycle": {
        "default": 0,
        "required": false
    },
    "warrantyStartDate": {
        "default": "",
        "required": false
    }
};

const AmimsPurPrclWidgetFormSchema = {
    "airworthiness": {
        "default": "",
        "required": false
    },
    "certificationNo": {
        "default": "",
        "required": false
    },
    "createdAt": {
        "default": "",
        "required": false
    },
    "datePcrl": {
        "default": "",
        "required": false
    },
    "datePur": {
        "default": "",
        "required": false
    },
    "dateQa": {
        "default": "",
        "required": false
    },
    "description": {
        "default": "",
        "required": false
    },
    "draftBin": {
        "default": "",
        "required": false
    },
    "idConditionMonitoring": {
        "required": false
    },
    "idCurrency": {
        "required": false
    },
    "idInternalGrnItem": {
        "required": false
    },
    "idLifeTimeLimit": {
        "required": false
    },
    "idMpart": {
        "required": false
    },
    "idPart": {
        "required": false
    },
    "idPartCondition": {
        "required": false
    },
    "idPurGrn": {
        "required": false
    },
    "idPurGrnItem": {
        "required": false
    },
    "idPurPrcl": {
        "required": true
    },
    "idPurVendor": {
        "required": false
    },
    "idUserPu": {
        "required": false
    },
    "idUserQa": {
        "required": false
    },
    "isServiceable": {
        "default": 0,
        "required": false
    },
    "lifeLimitCycle": {
        "default": 0,
        "required": false
    },
    "lifeLimitHours": {
        "default": 0,
        "required": false
    },
    "lifeLimitVal": {
        "default": 0,
        "required": false
    },
    "lifeLimitVar": {
        "default": "",
        "required": false
    },
    "loopIndex": {
        "default": 0,
        "required": false
    },
    "manufacture": {
        "default": "",
        "required": false
    },
    "manufactureDate": {
        "default": "",
        "required": false
    },
    "notePcrl": {
        "default": "",
        "required": false
    },
    "partCheckingPur": {
        "default": "",
        "required": false
    },
    "partCheckingQa": {
        "default": "",
        "required": false
    },
    "prclParent": {
        "default": "",
        "required": false
    },
    "price": {
        "default": 0,
        "required": false
    },
    "qtyCheck": {
        "default": 0,
        "required": false
    },
    "qtyPrcl": {
        "default": 0,
        "required": false
    },
    "qtyReturn": {
        "default": 0,
        "required": false
    },
    "qualityCheck": {
        "default": "",
        "required": false
    },
    "refDate": {
        "default": "",
        "required": false
    },
    "refId": {
        "default": "",
        "required": false
    },
    "refNumber": {
        "default": "",
        "required": false
    },
    "service": {
        "default": "",
        "required": false
    },
    "sn": {
        "default": "",
        "required": false
    },
    "statusPrcl": {
        "default": "",
        "required": false
    },
    "tboCycle": {
        "default": 0,
        "required": false
    },
    "tboHours": {
        "default": 0,
        "required": false
    },
    "tboVal": {
        "default": 0,
        "required": false
    },
    "tboVar": {
        "default": "",
        "required": false
    },
    "total": {
        "default": 0,
        "required": false
    },
    "tsnCycle": {
        "default": 0,
        "required": false
    },
    "tsnHours": {
        "default": 0,
        "required": false
    },
    "tsnVal": {
        "default": 0,
        "required": false
    },
    "tsnVar": {
        "default": "",
        "required": false
    },
    "tsoCycle": {
        "default": 0,
        "required": false
    },
    "tsoHours": {
        "default": 0,
        "required": false
    },
    "tsoVal": {
        "default": 0,
        "required": false
    },
    "tsoVar": {
        "default": "",
        "required": false
    },
    "typePrcl": {
        "default": "",
        "required": false
    },
    "updatedAt": {
        "default": "",
        "required": false
    },
    "validasi": {
        "default": 0,
        "required": false
    },
    "warrantyCycle": {
        "default": 0,
        "required": false
    },
    "warrantyDays": {
        "default": 0,
        "required": false
    },
    "warrantyHours": {
        "default": 0,
        "required": false
    },
    "warrantyMonths": {
        "default": 0,
        "required": false
    },
    "warrantyStartCycle": {
        "default": 0,
        "required": false
    },
    "warrantyStartDate": {
        "default": "",
        "required": false
    }
};

const AmimsPurPrclFormSchema = {
    "airworthiness": {
        "default": "",
        "required": false
    },
    "certificationNo": {
        "default": "",
        "required": false
    },
    "createdAt": {
        "default": "",
        "required": false
    },
    "datePcrl": {
        "default": "",
        "required": false
    },
    "datePur": {
        "default": "",
        "required": false
    },
    "dateQa": {
        "default": "",
        "required": false
    },
    "description": {
        "default": "",
        "required": false
    },
    "draftBin": {
        "default": "",
        "required": false
    },
    "idConditionMonitoring": {
        "required": false
    },
    "idCurrency": {
        "required": false
    },
    "idInternalGrnItem": {
        "required": false
    },
    "idLifeTimeLimit": {
        "required": false
    },
    "idMpart": {
        "required": false
    },
    "idPart": {
        "required": false
    },
    "idPartCondition": {
        "required": false
    },
    "idPurGrn": {
        "required": false
    },
    "idPurGrnItem": {
        "required": false
    },
    "idPurPrcl": {
        "required": true
    },
    "idPurVendor": {
        "required": false
    },
    "idUserPu": {
        "required": false
    },
    "idUserQa": {
        "required": false
    },
    "isServiceable": {
        "default": 0,
        "required": false
    },
    "lifeLimitCycle": {
        "default": 0,
        "required": false
    },
    "lifeLimitHours": {
        "default": 0,
        "required": false
    },
    "lifeLimitVal": {
        "default": 0,
        "required": false
    },
    "lifeLimitVar": {
        "default": "",
        "required": false
    },
    "loopIndex": {
        "default": 0,
        "required": false
    },
    "manufacture": {
        "default": "",
        "required": false
    },
    "manufactureDate": {
        "default": "",
        "required": false
    },
    "notePcrl": {
        "default": "",
        "required": false
    },
    "partCheckingPur": {
        "default": "",
        "required": false
    },
    "partCheckingQa": {
        "default": "",
        "required": false
    },
    "prclParent": {
        "default": "",
        "required": false
    },
    "price": {
        "default": 0,
        "required": false
    },
    "qtyCheck": {
        "default": 0,
        "required": false
    },
    "qtyPrcl": {
        "default": 0,
        "required": false
    },
    "qtyReturn": {
        "default": 0,
        "required": false
    },
    "qualityCheck": {
        "default": "",
        "required": false
    },
    "refDate": {
        "default": "",
        "required": false
    },
    "refId": {
        "default": "",
        "required": false
    },
    "refNumber": {
        "default": "",
        "required": false
    },
    "service": {
        "default": "",
        "required": false
    },
    "sn": {
        "default": "",
        "required": false
    },
    "statusPrcl": {
        "default": "",
        "required": false
    },
    "tboCycle": {
        "default": 0,
        "required": false
    },
    "tboHours": {
        "default": 0,
        "required": false
    },
    "tboVal": {
        "default": 0,
        "required": false
    },
    "tboVar": {
        "default": "",
        "required": false
    },
    "tsnCycle": {
        "default": 0,
        "required": false
    },
    "tsnHours": {
        "default": 0,
        "required": false
    },
    "tsnVal": {
        "default": 0,
        "required": false
    },
    "tsnVar": {
        "default": "",
        "required": false
    },
    "tsoCycle": {
        "default": 0,
        "required": false
    },
    "tsoHours": {
        "default": 0,
        "required": false
    },
    "tsoVal": {
        "default": 0,
        "required": false
    },
    "tsoVar": {
        "default": "",
        "required": false
    },
    "typePrcl": {
        "default": "",
        "required": false
    },
    "updatedAt": {
        "default": "",
        "required": false
    },
    "validasi": {
        "default": 0,
        "required": false
    },
    "warrantyCycle": {
        "default": 0,
        "required": false
    },
    "warrantyDays": {
        "default": 0,
        "required": false
    },
    "warrantyHours": {
        "default": 0,
        "required": false
    },
    "warrantyMonths": {
        "default": 0,
        "required": false
    },
    "warrantyStartCycle": {
        "default": 0,
        "required": false
    },
    "warrantyStartDate": {
        "default": "",
        "required": false
    }
};

const AmimsPurReturnItemReportFormSchema = {
    "idMpart": {
        "required": false
    },
    "idPurGrnItem": {
        "required": false
    },
    "idPurPoItem": {
        "required": false
    },
    "idPurReturn": {
        "required": false
    },
    "idPurReturnItem": {
        "required": true
    },
    "mpart": {
        "default": "",
        "required": true
    },
    "noteReturnItem": {
        "default": "",
        "required": false
    },
    "qtyReturn": {
        "default": 0,
        "required": false
    },
    "statusItem": {
        "default": 0,
        "required": false
    }
};

const AmimsPurReturnItemWidgetFormSchema = {
    "idMpart": {
        "required": false
    },
    "idPurGrnItem": {
        "required": false
    },
    "idPurPoItem": {
        "required": false
    },
    "idPurReturn": {
        "required": false
    },
    "idPurReturnItem": {
        "required": true
    },
    "noteReturnItem": {
        "default": "",
        "required": false
    },
    "qtyReturn": {
        "default": 0,
        "required": false
    },
    "statusItem": {
        "default": 0,
        "required": false
    },
    "total": {
        "default": 0,
        "required": false
    }
};

const AmimsPurReturnItemFormSchema = {
    "idMpart": {
        "required": false
    },
    "idPurGrnItem": {
        "required": false
    },
    "idPurPoItem": {
        "required": false
    },
    "idPurReturn": {
        "required": false
    },
    "idPurReturnItem": {
        "required": true
    },
    "noteReturnItem": {
        "default": "",
        "required": false
    },
    "qtyReturn": {
        "default": 0,
        "required": false
    },
    "statusItem": {
        "default": 0,
        "required": false
    }
};

const AmimsPurReturnReportFormSchema = {
    "createdAt": {
        "default": "",
        "required": false
    },
    "dateDeadlineReturn": {
        "default": "",
        "required": false
    },
    "dateReturn": {
        "default": "",
        "required": false
    },
    "idPurPo": {
        "required": false
    },
    "idPurReturn": {
        "required": true
    },
    "idPurVendor": {
        "required": false
    },
    "idUser": {
        "required": false
    },
    "isDeleted": {
        "default": 0,
        "required": false
    },
    "noteReturn": {
        "default": "",
        "required": false
    },
    "numberReturn": {
        "default": "",
        "required": false
    },
    "statusReturn": {
        "default": "",
        "required": false
    },
    "updatedAt": {
        "default": "",
        "required": false
    },
    "validasi": {
        "default": 0,
        "required": false
    }
};

const AmimsPurReturnWidgetFormSchema = {
    "createdAt": {
        "default": "",
        "required": false
    },
    "dateDeadlineReturn": {
        "default": "",
        "required": false
    },
    "dateReturn": {
        "default": "",
        "required": false
    },
    "idPurPo": {
        "required": false
    },
    "idPurReturn": {
        "required": true
    },
    "idPurVendor": {
        "required": false
    },
    "idUser": {
        "required": false
    },
    "isDeleted": {
        "default": 0,
        "required": false
    },
    "noteReturn": {
        "default": "",
        "required": false
    },
    "numberReturn": {
        "default": "",
        "required": false
    },
    "statusReturn": {
        "default": "",
        "required": false
    },
    "total": {
        "default": 0,
        "required": false
    },
    "updatedAt": {
        "default": "",
        "required": false
    },
    "validasi": {
        "default": 0,
        "required": false
    }
};

const AmimsPurReturnFormSchema = {
    "createdAt": {
        "default": "",
        "required": false
    },
    "dateDeadlineReturn": {
        "default": "",
        "required": false
    },
    "dateReturn": {
        "default": "",
        "required": false
    },
    "idPurPo": {
        "required": false
    },
    "idPurReturn": {
        "required": true
    },
    "idPurVendor": {
        "required": false
    },
    "idUser": {
        "required": false
    },
    "isDeleted": {
        "default": 0,
        "required": false
    },
    "noteReturn": {
        "default": "",
        "required": false
    },
    "numberReturn": {
        "default": "",
        "required": false
    },
    "statusReturn": {
        "default": "",
        "required": false
    },
    "updatedAt": {
        "default": "",
        "required": false
    },
    "validasi": {
        "default": 0,
        "required": false
    }
};

const AmimsPurVendorContactReportFormSchema = {
    "address": {
        "default": "",
        "required": false
    },
    "city": {
        "default": "",
        "required": false
    },
    "country": {
        "default": "",
        "required": false
    },
    "createdAt": {
        "default": "",
        "required": false
    },
    "email": {
        "default": "",
        "required": false
    },
    "fax": {
        "default": "",
        "required": false
    },
    "idPurVendor": {
        "required": false
    },
    "idPurVendorContact": {
        "required": true
    },
    "linePhone": {
        "default": "",
        "required": false
    },
    "oldId": {
        "default": "",
        "required": false
    },
    "phone": {
        "default": "",
        "required": false
    },
    "pic": {
        "default": "",
        "required": false
    },
    "postcode": {
        "default": "",
        "required": false
    },
    "state": {
        "default": "",
        "required": false
    },
    "updatedAt": {
        "default": "",
        "required": false
    }
};

const AmimsPurVendorContactWidgetFormSchema = {
    "address": {
        "default": "",
        "required": false
    },
    "city": {
        "default": "",
        "required": false
    },
    "country": {
        "default": "",
        "required": false
    },
    "createdAt": {
        "default": "",
        "required": false
    },
    "email": {
        "default": "",
        "required": false
    },
    "fax": {
        "default": "",
        "required": false
    },
    "idPurVendor": {
        "required": false
    },
    "idPurVendorContact": {
        "required": true
    },
    "linePhone": {
        "default": "",
        "required": false
    },
    "oldId": {
        "default": "",
        "required": false
    },
    "phone": {
        "default": "",
        "required": false
    },
    "pic": {
        "default": "",
        "required": false
    },
    "postcode": {
        "default": "",
        "required": false
    },
    "state": {
        "default": "",
        "required": false
    },
    "total": {
        "default": 0,
        "required": false
    },
    "updatedAt": {
        "default": "",
        "required": false
    }
};

const AmimsPurVendorContactFormSchema = {
    "address": {
        "default": "",
        "required": false
    },
    "city": {
        "default": "",
        "required": false
    },
    "country": {
        "default": "",
        "required": false
    },
    "createdAt": {
        "default": "",
        "required": false
    },
    "email": {
        "default": "",
        "required": false
    },
    "fax": {
        "default": "",
        "required": false
    },
    "idPurVendor": {
        "required": false
    },
    "idPurVendorContact": {
        "required": true
    },
    "linePhone": {
        "default": "",
        "required": false
    },
    "oldId": {
        "default": "",
        "required": false
    },
    "phone": {
        "default": "",
        "required": false
    },
    "pic": {
        "default": "",
        "required": false
    },
    "postcode": {
        "default": "",
        "required": false
    },
    "state": {
        "default": "",
        "required": false
    },
    "updatedAt": {
        "default": "",
        "required": false
    }
};

const AmimsPurVendorItemReportFormSchema = {
    "createdAt": {
        "default": "",
        "required": false
    },
    "idMpart": {
        "required": false
    },
    "idPurVendor": {
        "required": false
    },
    "idPurVendorItem": {
        "required": true
    },
    "isDeleted": {
        "default": 0,
        "required": false
    },
    "manufacture": {
        "default": "",
        "required": false
    },
    "minOrder": {
        "default": 0,
        "required": false
    },
    "mpart": {
        "default": "",
        "required": true
    },
    "note": {
        "default": "",
        "required": false
    },
    "price": {
        "default": 0,
        "required": false
    },
    "responseTime": {
        "default": 0,
        "required": false
    },
    "updatedAt": {
        "default": "",
        "required": false
    }
};

const AmimsPurVendorItemWidgetFormSchema = {
    "createdAt": {
        "default": "",
        "required": false
    },
    "idMpart": {
        "required": false
    },
    "idPurVendor": {
        "required": false
    },
    "idPurVendorItem": {
        "required": true
    },
    "isDeleted": {
        "default": 0,
        "required": false
    },
    "manufacture": {
        "default": "",
        "required": false
    },
    "minOrder": {
        "default": 0,
        "required": false
    },
    "note": {
        "default": "",
        "required": false
    },
    "price": {
        "default": 0,
        "required": false
    },
    "responseTime": {
        "default": 0,
        "required": false
    },
    "total": {
        "default": 0,
        "required": false
    },
    "updatedAt": {
        "default": "",
        "required": false
    }
};

const AmimsPurVendorItemFormSchema = {
    "createdAt": {
        "default": "",
        "required": false
    },
    "idMpart": {
        "required": false
    },
    "idPurVendor": {
        "required": false
    },
    "idPurVendorItem": {
        "required": true
    },
    "isDeleted": {
        "default": 0,
        "required": false
    },
    "manufacture": {
        "default": "",
        "required": false
    },
    "minOrder": {
        "default": 0,
        "required": false
    },
    "note": {
        "default": "",
        "required": false
    },
    "price": {
        "default": 0,
        "required": false
    },
    "responseTime": {
        "default": 0,
        "required": false
    },
    "updatedAt": {
        "default": "",
        "required": false
    }
};

const AmimsPurVendorReportFormSchema = {
    "address": {
        "default": "",
        "required": false
    },
    "code": {
        "default": "",
        "required": false
    },
    "column1": {
        "default": "",
        "required": false
    },
    "country": {
        "default": "",
        "required": false
    },
    "createdAt": {
        "default": "",
        "required": false
    },
    "defaultCurrency": {
        "default": "",
        "required": false
    },
    "deliveryTime": {
        "default": 0,
        "required": false
    },
    "email": {
        "default": "",
        "required": false
    },
    "fax": {
        "default": "",
        "required": false
    },
    "idMcurrency": {
        "required": false
    },
    "idPurVendor": {
        "required": true
    },
    "idUser": {
        "required": false
    },
    "isDeleted": {
        "default": 0,
        "required": false
    },
    "isManufacture": {
        "default": "",
        "required": false
    },
    "isRepairer": {
        "default": "",
        "required": false
    },
    "isShipper": {
        "default": "",
        "required": false
    },
    "isVendor": {
        "default": "",
        "required": false
    },
    "isWorkshop": {
        "default": "",
        "required": false
    },
    "keyword": {
        "default": "",
        "required": false
    },
    "mcurrency": {
        "default": "",
        "required": true
    },
    "nameVendor": {
        "default": "",
        "required": false
    },
    "oldId": {
        "default": "",
        "required": false
    },
    "pic": {
        "default": "",
        "required": false
    },
    "postcode": {
        "default": "",
        "required": false
    },
    "rating": {
        "default": "",
        "required": false
    },
    "services": {
        "default": "",
        "required": false
    },
    "status": {
        "default": "",
        "required": false
    },
    "telephone": {
        "default": "",
        "required": false
    },
    "timezone": {
        "default": "",
        "required": false
    },
    "tremPayment": {
        "default": 0,
        "required": false
    },
    "updatedAt": {
        "default": "",
        "required": false
    },
    "validasi": {
        "default": 0,
        "required": false
    }
};

const AmimsPurVendorWidgetFormSchema = {
    "address": {
        "default": "",
        "required": false
    },
    "code": {
        "default": "",
        "required": false
    },
    "column1": {
        "default": "",
        "required": false
    },
    "country": {
        "default": "",
        "required": false
    },
    "createdAt": {
        "default": "",
        "required": false
    },
    "defaultCurrency": {
        "default": "",
        "required": false
    },
    "deliveryTime": {
        "default": 0,
        "required": false
    },
    "email": {
        "default": "",
        "required": false
    },
    "fax": {
        "default": "",
        "required": false
    },
    "idMcurrency": {
        "required": false
    },
    "idPurVendor": {
        "required": true
    },
    "idUser": {
        "required": false
    },
    "isDeleted": {
        "default": 0,
        "required": false
    },
    "isManufacture": {
        "default": "",
        "required": false
    },
    "isRepairer": {
        "default": "",
        "required": false
    },
    "isShipper": {
        "default": "",
        "required": false
    },
    "isVendor": {
        "default": "",
        "required": false
    },
    "isWorkshop": {
        "default": "",
        "required": false
    },
    "keyword": {
        "default": "",
        "required": false
    },
    "nameVendor": {
        "default": "",
        "required": false
    },
    "oldId": {
        "default": "",
        "required": false
    },
    "pic": {
        "default": "",
        "required": false
    },
    "postcode": {
        "default": "",
        "required": false
    },
    "rating": {
        "default": "",
        "required": false
    },
    "services": {
        "default": "",
        "required": false
    },
    "status": {
        "default": "",
        "required": false
    },
    "telephone": {
        "default": "",
        "required": false
    },
    "timezone": {
        "default": "",
        "required": false
    },
    "total": {
        "default": 0,
        "required": false
    },
    "tremPayment": {
        "default": 0,
        "required": false
    },
    "updatedAt": {
        "default": "",
        "required": false
    },
    "validasi": {
        "default": 0,
        "required": false
    }
};

const AmimsPurVendorFormSchema = {
    "address": {
        "default": "",
        "required": false
    },
    "code": {
        "default": "",
        "required": false
    },
    "column1": {
        "default": "",
        "required": false
    },
    "country": {
        "default": "",
        "required": false
    },
    "createdAt": {
        "default": "",
        "required": false
    },
    "defaultCurrency": {
        "default": "",
        "required": false
    },
    "deliveryTime": {
        "default": 0,
        "required": false
    },
    "email": {
        "default": "",
        "required": false
    },
    "fax": {
        "default": "",
        "required": false
    },
    "idMcurrency": {
        "required": false
    },
    "idPurVendor": {
        "required": true
    },
    "idUser": {
        "required": false
    },
    "isDeleted": {
        "default": 0,
        "required": false
    },
    "isManufacture": {
        "default": "",
        "required": false
    },
    "isRepairer": {
        "default": "",
        "required": false
    },
    "isShipper": {
        "default": "",
        "required": false
    },
    "isVendor": {
        "default": "",
        "required": false
    },
    "isWorkshop": {
        "default": "",
        "required": false
    },
    "keyword": {
        "default": "",
        "required": false
    },
    "nameVendor": {
        "default": "",
        "required": false
    },
    "oldId": {
        "default": "",
        "required": false
    },
    "pic": {
        "default": "",
        "required": false
    },
    "postcode": {
        "default": "",
        "required": false
    },
    "rating": {
        "default": "",
        "required": false
    },
    "services": {
        "default": "",
        "required": false
    },
    "status": {
        "default": "",
        "required": false
    },
    "telephone": {
        "default": "",
        "required": false
    },
    "timezone": {
        "default": "",
        "required": false
    },
    "tremPayment": {
        "default": 0,
        "required": false
    },
    "updatedAt": {
        "default": "",
        "required": false
    },
    "validasi": {
        "default": 0,
        "required": false
    }
};

const AmimsQaRpdDispotitionReportFormSchema = {
    "codeDispotition": {
        "default": "",
        "required": false
    },
    "color": {
        "default": "",
        "required": false
    },
    "dispotition": {
        "default": "",
        "required": false
    },
    "idQaRpdDispotition": {
        "required": true
    },
    "printTag": {
        "default": "",
        "required": false
    },
    "toPosition": {
        "default": "",
        "required": false
    }
};

const AmimsQaRpdDispotitionWidgetFormSchema = {
    "codeDispotition": {
        "default": "",
        "required": false
    },
    "color": {
        "default": "",
        "required": false
    },
    "dispotition": {
        "default": "",
        "required": false
    },
    "idQaRpdDispotition": {
        "required": true
    },
    "printTag": {
        "default": "",
        "required": false
    },
    "toPosition": {
        "default": "",
        "required": false
    },
    "total": {
        "default": 0,
        "required": false
    }
};

const AmimsQaRpdDispotitionFormSchema = {
    "codeDispotition": {
        "default": "",
        "required": false
    },
    "color": {
        "default": "",
        "required": false
    },
    "dispotition": {
        "default": "",
        "required": false
    },
    "idQaRpdDispotition": {
        "required": true
    },
    "printTag": {
        "default": "",
        "required": false
    },
    "toPosition": {
        "default": "",
        "required": false
    }
};

const AmimsQaRpdReportFormSchema = {
    "createdAt": {
        "default": "",
        "required": false
    },
    "dateRpd": {
        "default": "",
        "required": false
    },
    "idQaRpd": {
        "required": true
    },
    "idUserQa": {
        "required": false
    },
    "numberRpd": {
        "default": "",
        "required": false
    },
    "statusRpd": {
        "default": "",
        "required": false
    },
    "tipe": {
        "default": "",
        "required": false
    },
    "updatedAt": {
        "default": "",
        "required": false
    }
};

const AmimsQaRpdWidgetFormSchema = {
    "createdAt": {
        "default": "",
        "required": false
    },
    "dateRpd": {
        "default": "",
        "required": false
    },
    "idQaRpd": {
        "required": true
    },
    "idUserQa": {
        "required": false
    },
    "numberRpd": {
        "default": "",
        "required": false
    },
    "statusRpd": {
        "default": "",
        "required": false
    },
    "tipe": {
        "default": "",
        "required": false
    },
    "total": {
        "default": 0,
        "required": false
    },
    "updatedAt": {
        "default": "",
        "required": false
    }
};

const AmimsQaRpdFormSchema = {
    "createdAt": {
        "default": "",
        "required": false
    },
    "dateRpd": {
        "default": "",
        "required": false
    },
    "idQaRpd": {
        "required": true
    },
    "idUserQa": {
        "required": false
    },
    "numberRpd": {
        "default": "",
        "required": false
    },
    "statusRpd": {
        "default": "",
        "required": false
    },
    "tipe": {
        "default": "",
        "required": false
    },
    "updatedAt": {
        "default": "",
        "required": false
    }
};

const AmimsQaTransferItemReportFormSchema = {
    "idMpcSelfMaintenance": {
        "required": false
    },
    "idPurPrcl": {
        "required": false
    },
    "idQaTransfer": {
        "required": false
    },
    "idQaTransferItem": {
        "required": true
    }
};

const AmimsQaTransferItemWidgetFormSchema = {
    "idMpcSelfMaintenance": {
        "required": false
    },
    "idPurPrcl": {
        "required": false
    },
    "idQaTransfer": {
        "required": false
    },
    "idQaTransferItem": {
        "required": true
    },
    "total": {
        "default": 0,
        "required": false
    }
};

const AmimsQaTransferItemFormSchema = {
    "idMpcSelfMaintenance": {
        "required": false
    },
    "idPurPrcl": {
        "required": false
    },
    "idQaTransfer": {
        "required": false
    },
    "idQaTransferItem": {
        "required": true
    }
};

const AmimsQaTransferReportFormSchema = {
    "createdAt": {
        "default": "",
        "required": false
    },
    "dateReceived": {
        "default": "",
        "required": false
    },
    "dateTransfer": {
        "default": "",
        "required": false
    },
    "idQaTransfer": {
        "required": true
    },
    "idSite": {
        "required": false
    },
    "idUser": {
        "required": false
    },
    "idUserReceived": {
        "required": false
    },
    "noIndex": {
        "default": 0,
        "required": false
    },
    "noteTransfer": {
        "default": "",
        "required": false
    },
    "numberTransfer": {
        "default": "",
        "required": false
    },
    "site": {
        "default": "",
        "required": true
    },
    "statusTransfer": {
        "default": "",
        "required": false
    },
    "toSite": {
        "default": 0,
        "required": false
    },
    "typeTransfer": {
        "default": "",
        "required": false
    },
    "updatedAt": {
        "default": "",
        "required": false
    },
    "validasi": {
        "default": 0,
        "required": false
    }
};

const AmimsQaTransferWidgetFormSchema = {
    "createdAt": {
        "default": "",
        "required": false
    },
    "dateReceived": {
        "default": "",
        "required": false
    },
    "dateTransfer": {
        "default": "",
        "required": false
    },
    "idQaTransfer": {
        "required": true
    },
    "idSite": {
        "required": false
    },
    "idUser": {
        "required": false
    },
    "idUserReceived": {
        "required": false
    },
    "noIndex": {
        "default": 0,
        "required": false
    },
    "noteTransfer": {
        "default": "",
        "required": false
    },
    "numberTransfer": {
        "default": "",
        "required": false
    },
    "statusTransfer": {
        "default": "",
        "required": false
    },
    "toSite": {
        "default": 0,
        "required": false
    },
    "total": {
        "default": 0,
        "required": false
    },
    "typeTransfer": {
        "default": "",
        "required": false
    },
    "updatedAt": {
        "default": "",
        "required": false
    },
    "validasi": {
        "default": 0,
        "required": false
    }
};

const AmimsQaTransferFormSchema = {
    "createdAt": {
        "default": "",
        "required": false
    },
    "dateReceived": {
        "default": "",
        "required": false
    },
    "dateTransfer": {
        "default": "",
        "required": false
    },
    "idQaTransfer": {
        "required": true
    },
    "idSite": {
        "required": false
    },
    "idUser": {
        "required": false
    },
    "idUserReceived": {
        "required": false
    },
    "noIndex": {
        "default": 0,
        "required": false
    },
    "noteTransfer": {
        "default": "",
        "required": false
    },
    "numberTransfer": {
        "default": "",
        "required": false
    },
    "statusTransfer": {
        "default": "",
        "required": false
    },
    "toSite": {
        "default": 0,
        "required": false
    },
    "typeTransfer": {
        "default": "",
        "required": false
    },
    "updatedAt": {
        "default": "",
        "required": false
    },
    "validasi": {
        "default": 0,
        "required": false
    }
};

const AmimsRotaryFactorReportFormSchema = {
    "adj1": {
        "default": 0,
        "required": false
    },
    "adj2": {
        "default": 0,
        "required": false
    },
    "adj3": {
        "default": 0,
        "required": false
    },
    "dateCycle": {
        "default": "",
        "required": false
    },
    "dateHours": {
        "default": "",
        "required": false
    },
    "factor1": {
        "default": 0,
        "required": false
    },
    "factor2": {
        "default": 0,
        "required": false
    },
    "factor3": {
        "default": 0,
        "required": false
    },
    "hoistLeft": {
        "default": 0,
        "required": false
    },
    "hoistRight": {
        "default": 0,
        "required": false
    },
    "idMpart": {
        "required": false
    },
    "idRotaryFactor": {
        "required": true
    },
    "mpart": {
        "default": "",
        "required": true
    },
    "noteHours": {
        "default": "",
        "required": false
    },
    "noteRotaryFactor": {
        "default": "",
        "required": false
    },
    "revisionCycle": {
        "default": "",
        "required": false
    },
    "revisionHours": {
        "default": "",
        "required": false
    },
    "rumusCycle": {
        "default": "",
        "required": false
    },
    "rumusHours": {
        "default": "",
        "required": false
    }
};

const AmimsRotaryFactorWidgetFormSchema = {
    "adj1": {
        "default": 0,
        "required": false
    },
    "adj2": {
        "default": 0,
        "required": false
    },
    "adj3": {
        "default": 0,
        "required": false
    },
    "dateCycle": {
        "default": "",
        "required": false
    },
    "dateHours": {
        "default": "",
        "required": false
    },
    "factor1": {
        "default": 0,
        "required": false
    },
    "factor2": {
        "default": 0,
        "required": false
    },
    "factor3": {
        "default": 0,
        "required": false
    },
    "hoistLeft": {
        "default": 0,
        "required": false
    },
    "hoistRight": {
        "default": 0,
        "required": false
    },
    "idMpart": {
        "required": false
    },
    "idRotaryFactor": {
        "required": true
    },
    "noteHours": {
        "default": "",
        "required": false
    },
    "noteRotaryFactor": {
        "default": "",
        "required": false
    },
    "revisionCycle": {
        "default": "",
        "required": false
    },
    "revisionHours": {
        "default": "",
        "required": false
    },
    "rumusCycle": {
        "default": "",
        "required": false
    },
    "rumusHours": {
        "default": "",
        "required": false
    },
    "total": {
        "default": 0,
        "required": false
    }
};

const AmimsRotaryFactorFormSchema = {
    "adj1": {
        "default": 0,
        "required": false
    },
    "adj2": {
        "default": 0,
        "required": false
    },
    "adj3": {
        "default": 0,
        "required": false
    },
    "dateCycle": {
        "default": "",
        "required": false
    },
    "dateHours": {
        "default": "",
        "required": false
    },
    "factor1": {
        "default": 0,
        "required": false
    },
    "factor2": {
        "default": 0,
        "required": false
    },
    "factor3": {
        "default": 0,
        "required": false
    },
    "hoistLeft": {
        "default": 0,
        "required": false
    },
    "hoistRight": {
        "default": 0,
        "required": false
    },
    "idMpart": {
        "required": false
    },
    "idRotaryFactor": {
        "required": true
    },
    "noteHours": {
        "default": "",
        "required": false
    },
    "noteRotaryFactor": {
        "default": "",
        "required": false
    },
    "revisionCycle": {
        "default": "",
        "required": false
    },
    "revisionHours": {
        "default": "",
        "required": false
    },
    "rumusCycle": {
        "default": "",
        "required": false
    },
    "rumusHours": {
        "default": "",
        "required": false
    }
};

const AmimsShippingReportFormSchema = {
    "createdAt": {
        "default": "",
        "required": false
    },
    "idShipping": {
        "required": true
    },
    "line0": {
        "default": "",
        "required": false
    },
    "line1": {
        "default": "",
        "required": false
    },
    "line2": {
        "default": "",
        "required": false
    },
    "line3": {
        "default": "",
        "required": false
    },
    "line4": {
        "default": "",
        "required": false
    },
    "line5": {
        "default": "",
        "required": false
    },
    "line6": {
        "default": "",
        "required": false
    },
    "line7": {
        "default": "",
        "required": false
    },
    "line8": {
        "default": "",
        "required": false
    },
    "statusShipping": {
        "default": "",
        "required": false
    },
    "updatedAt": {
        "default": "",
        "required": false
    }
};

const AmimsShippingWidgetFormSchema = {
    "createdAt": {
        "default": "",
        "required": false
    },
    "idShipping": {
        "required": true
    },
    "line0": {
        "default": "",
        "required": false
    },
    "line1": {
        "default": "",
        "required": false
    },
    "line2": {
        "default": "",
        "required": false
    },
    "line3": {
        "default": "",
        "required": false
    },
    "line4": {
        "default": "",
        "required": false
    },
    "line5": {
        "default": "",
        "required": false
    },
    "line6": {
        "default": "",
        "required": false
    },
    "line7": {
        "default": "",
        "required": false
    },
    "line8": {
        "default": "",
        "required": false
    },
    "statusShipping": {
        "default": "",
        "required": false
    },
    "total": {
        "default": 0,
        "required": false
    },
    "updatedAt": {
        "default": "",
        "required": false
    }
};

const AmimsShippingFormSchema = {
    "createdAt": {
        "default": "",
        "required": false
    },
    "idShipping": {
        "required": true
    },
    "line0": {
        "default": "",
        "required": false
    },
    "line1": {
        "default": "",
        "required": false
    },
    "line2": {
        "default": "",
        "required": false
    },
    "line3": {
        "default": "",
        "required": false
    },
    "line4": {
        "default": "",
        "required": false
    },
    "line5": {
        "default": "",
        "required": false
    },
    "line6": {
        "default": "",
        "required": false
    },
    "line7": {
        "default": "",
        "required": false
    },
    "line8": {
        "default": "",
        "required": false
    },
    "statusShipping": {
        "default": "",
        "required": false
    },
    "updatedAt": {
        "default": "",
        "required": false
    }
};

const AmimsSiteReportFormSchema = {
    "address": {
        "default": "",
        "required": false
    },
    "city": {
        "default": "",
        "required": false
    },
    "codeSite": {
        "default": "",
        "required": false
    },
    "contactname": {
        "default": "",
        "required": false
    },
    "country": {
        "default": "",
        "required": false
    },
    "createdAt": {
        "default": "",
        "required": false
    },
    "emailaddress": {
        "default": "",
        "required": false
    },
    "fax": {
        "default": "",
        "required": false
    },
    "idNewSite": {
        "required": false
    },
    "idSite": {
        "required": true
    },
    "idUser": {
        "required": false
    },
    "isDeleted": {
        "default": 0,
        "required": false
    },
    "isMain": {
        "default": 0,
        "required": false
    },
    "isStore": {
        "default": "",
        "required": false
    },
    "logoSite": {
        "default": "",
        "required": false
    },
    "mobile": {
        "default": "",
        "required": false
    },
    "oldId": {
        "default": "",
        "required": false
    },
    "parentSite": {
        "default": 0,
        "required": false
    },
    "site": {
        "default": "",
        "required": false
    },
    "statusSite": {
        "default": 0,
        "required": false
    },
    "telephone": {
        "default": "",
        "required": false
    },
    "typeSite": {
        "default": "",
        "required": false
    },
    "updatedAt": {
        "default": "",
        "required": false
    },
    "validation": {
        "default": 0,
        "required": false
    }
};

const AmimsSiteWidgetFormSchema = {
    "address": {
        "default": "",
        "required": false
    },
    "city": {
        "default": "",
        "required": false
    },
    "codeSite": {
        "default": "",
        "required": false
    },
    "contactname": {
        "default": "",
        "required": false
    },
    "country": {
        "default": "",
        "required": false
    },
    "createdAt": {
        "default": "",
        "required": false
    },
    "emailaddress": {
        "default": "",
        "required": false
    },
    "fax": {
        "default": "",
        "required": false
    },
    "idNewSite": {
        "required": false
    },
    "idSite": {
        "required": true
    },
    "idUser": {
        "required": false
    },
    "isDeleted": {
        "default": 0,
        "required": false
    },
    "isMain": {
        "default": 0,
        "required": false
    },
    "isStore": {
        "default": "",
        "required": false
    },
    "logoSite": {
        "default": "",
        "required": false
    },
    "mobile": {
        "default": "",
        "required": false
    },
    "oldId": {
        "default": "",
        "required": false
    },
    "parentSite": {
        "default": 0,
        "required": false
    },
    "site": {
        "default": "",
        "required": false
    },
    "statusSite": {
        "default": 0,
        "required": false
    },
    "telephone": {
        "default": "",
        "required": false
    },
    "total": {
        "default": 0,
        "required": false
    },
    "typeSite": {
        "default": "",
        "required": false
    },
    "updatedAt": {
        "default": "",
        "required": false
    },
    "validation": {
        "default": 0,
        "required": false
    }
};

const AmimsSiteFormSchema = {
    "address": {
        "default": "",
        "required": false
    },
    "city": {
        "default": "",
        "required": false
    },
    "codeSite": {
        "default": "",
        "required": false
    },
    "contactname": {
        "default": "",
        "required": false
    },
    "country": {
        "default": "",
        "required": false
    },
    "createdAt": {
        "default": "",
        "required": false
    },
    "emailaddress": {
        "default": "",
        "required": false
    },
    "fax": {
        "default": "",
        "required": false
    },
    "idNewSite": {
        "required": false
    },
    "idSite": {
        "required": true
    },
    "idUser": {
        "required": false
    },
    "isDeleted": {
        "default": 0,
        "required": false
    },
    "isMain": {
        "default": 0,
        "required": false
    },
    "isStore": {
        "default": "",
        "required": false
    },
    "logoSite": {
        "default": "",
        "required": false
    },
    "mobile": {
        "default": "",
        "required": false
    },
    "oldId": {
        "default": "",
        "required": false
    },
    "parentSite": {
        "default": 0,
        "required": false
    },
    "site": {
        "default": "",
        "required": false
    },
    "statusSite": {
        "default": 0,
        "required": false
    },
    "telephone": {
        "default": "",
        "required": false
    },
    "typeSite": {
        "default": "",
        "required": false
    },
    "updatedAt": {
        "default": "",
        "required": false
    },
    "validation": {
        "default": 0,
        "required": false
    }
};

const AmimsStockReportFormSchema = {
    "bin": {
        "default": "",
        "required": false
    },
    "codeAta": {
        "default": "",
        "required": false
    },
    "idMpart": {
        "required": true
    },
    "keyword": {
        "default": "",
        "required": false
    },
    "mfigureIndex": {
        "default": "",
        "required": false
    },
    "mitemIndex": {
        "default": "",
        "required": false
    },
    "mpart": {
        "default": "",
        "required": true
    },
    "partNumber": {
        "default": "",
        "required": false
    },
    "partid": {
        "default": "",
        "required": false
    },
    "qty": {
        "default": 0,
        "required": false
    },
    "statusOnInventory": {
        "default": "",
        "required": false
    },
    "unit": {
        "default": "",
        "required": false
    }
};

const AmimsStockWidgetFormSchema = {
    "bin": {
        "default": "",
        "required": false
    },
    "codeAta": {
        "default": "",
        "required": false
    },
    "idMpart": {
        "required": true
    },
    "keyword": {
        "default": "",
        "required": false
    },
    "mfigureIndex": {
        "default": "",
        "required": false
    },
    "mitemIndex": {
        "default": "",
        "required": false
    },
    "partNumber": {
        "default": "",
        "required": false
    },
    "partid": {
        "default": "",
        "required": false
    },
    "qty": {
        "default": 0,
        "required": false
    },
    "statusOnInventory": {
        "default": "",
        "required": false
    },
    "total": {
        "default": 0,
        "required": false
    },
    "unit": {
        "default": "",
        "required": false
    }
};

const AmimsStockFormSchema = {
    "bin": {
        "default": "",
        "required": false
    },
    "codeAta": {
        "default": "",
        "required": false
    },
    "idMpart": {
        "required": true
    },
    "keyword": {
        "default": "",
        "required": false
    },
    "mfigureIndex": {
        "default": "",
        "required": false
    },
    "mitemIndex": {
        "default": "",
        "required": false
    },
    "partNumber": {
        "default": "",
        "required": false
    },
    "partid": {
        "default": "",
        "required": false
    },
    "qty": {
        "default": 0,
        "required": false
    },
    "statusOnInventory": {
        "default": "",
        "required": false
    },
    "unit": {
        "default": "",
        "required": false
    }
};

const AmimsStoreDestroyReportFormSchema = {
    "createdAt": {
        "default": "",
        "required": false
    },
    "dateDestroy": {
        "default": "",
        "required": false
    },
    "idPart": {
        "required": false
    },
    "idSite": {
        "required": false
    },
    "idStoreDestroy": {
        "required": true
    },
    "idUser": {
        "required": false
    },
    "noteDestroy": {
        "default": "",
        "required": false
    },
    "numberDestroy": {
        "default": "",
        "required": false
    },
    "part": {
        "default": "",
        "required": true
    },
    "refRti": {
        "default": "",
        "required": false
    },
    "site": {
        "default": "",
        "required": true
    },
    "updatedAt": {
        "default": "",
        "required": false
    }
};

const AmimsStoreDestroyWidgetFormSchema = {
    "createdAt": {
        "default": "",
        "required": false
    },
    "dateDestroy": {
        "default": "",
        "required": false
    },
    "idPart": {
        "required": false
    },
    "idSite": {
        "required": false
    },
    "idStoreDestroy": {
        "required": true
    },
    "idUser": {
        "required": false
    },
    "noteDestroy": {
        "default": "",
        "required": false
    },
    "numberDestroy": {
        "default": "",
        "required": false
    },
    "refRti": {
        "default": "",
        "required": false
    },
    "total": {
        "default": 0,
        "required": false
    },
    "updatedAt": {
        "default": "",
        "required": false
    }
};

const AmimsStoreDestroyFormSchema = {
    "createdAt": {
        "default": "",
        "required": false
    },
    "dateDestroy": {
        "default": "",
        "required": false
    },
    "idPart": {
        "required": false
    },
    "idSite": {
        "required": false
    },
    "idStoreDestroy": {
        "required": true
    },
    "idUser": {
        "required": false
    },
    "noteDestroy": {
        "default": "",
        "required": false
    },
    "numberDestroy": {
        "default": "",
        "required": false
    },
    "refRti": {
        "default": "",
        "required": false
    },
    "updatedAt": {
        "default": "",
        "required": false
    }
};

const AmimsStoreTransferItemReportFormSchema = {
    "createdAt": {
        "default": "",
        "required": false
    },
    "idEngineerPmtrItem": {
        "required": false
    },
    "idPart": {
        "required": false
    },
    "idStoreTransfer": {
        "required": false
    },
    "idStoreTransferItem": {
        "required": true
    },
    "newBin": {
        "default": "",
        "required": false
    },
    "noteItemTransfer": {
        "default": "",
        "required": false
    },
    "oldIdPart": {
        "default": "",
        "required": false
    },
    "part": {
        "default": "",
        "required": true
    },
    "qtyTransfer": {
        "default": 0,
        "required": false
    },
    "statusItem": {
        "default": "",
        "required": false
    },
    "updatedAt": {
        "default": "",
        "required": false
    }
};

const AmimsStoreTransferItemWidgetFormSchema = {
    "createdAt": {
        "default": "",
        "required": false
    },
    "idEngineerPmtrItem": {
        "required": false
    },
    "idPart": {
        "required": false
    },
    "idStoreTransfer": {
        "required": false
    },
    "idStoreTransferItem": {
        "required": true
    },
    "newBin": {
        "default": "",
        "required": false
    },
    "noteItemTransfer": {
        "default": "",
        "required": false
    },
    "oldIdPart": {
        "default": "",
        "required": false
    },
    "qtyTransfer": {
        "default": 0,
        "required": false
    },
    "statusItem": {
        "default": "",
        "required": false
    },
    "total": {
        "default": 0,
        "required": false
    },
    "updatedAt": {
        "default": "",
        "required": false
    }
};

const AmimsStoreTransferItemFormSchema = {
    "createdAt": {
        "default": "",
        "required": false
    },
    "idEngineerPmtrItem": {
        "required": false
    },
    "idPart": {
        "required": false
    },
    "idStoreTransfer": {
        "required": false
    },
    "idStoreTransferItem": {
        "required": true
    },
    "newBin": {
        "default": "",
        "required": false
    },
    "noteItemTransfer": {
        "default": "",
        "required": false
    },
    "oldIdPart": {
        "default": "",
        "required": false
    },
    "qtyTransfer": {
        "default": 0,
        "required": false
    },
    "statusItem": {
        "default": "",
        "required": false
    },
    "updatedAt": {
        "default": "",
        "required": false
    }
};

const AmimsStoreTransferReportFormSchema = {
    "createdAt": {
        "default": "",
        "required": false
    },
    "dateReceived": {
        "default": "",
        "required": false
    },
    "dateTransfer": {
        "default": "",
        "required": false
    },
    "dimention": {
        "default": "",
        "required": false
    },
    "idEngineerPmtr": {
        "required": false
    },
    "idStoreTransfer": {
        "required": true
    },
    "idUserReceived": {
        "required": false
    },
    "idUserTransfer": {
        "required": false
    },
    "isDeleted": {
        "default": 0,
        "required": false
    },
    "noIndex": {
        "default": 0,
        "required": false
    },
    "noOfBox": {
        "default": "",
        "required": false
    },
    "noteTransfer": {
        "default": "",
        "required": false
    },
    "numberTransfer": {
        "default": "",
        "required": false
    },
    "sheet": {
        "default": "",
        "required": false
    },
    "shippingVia": {
        "default": "",
        "required": false
    },
    "statusTransfer": {
        "default": "",
        "required": false
    },
    "updatedAt": {
        "default": "",
        "required": false
    },
    "validasi": {
        "default": 0,
        "required": false
    },
    "weight": {
        "default": "",
        "required": false
    }
};

const AmimsStoreTransferWidgetFormSchema = {
    "createdAt": {
        "default": "",
        "required": false
    },
    "dateReceived": {
        "default": "",
        "required": false
    },
    "dateTransfer": {
        "default": "",
        "required": false
    },
    "dimention": {
        "default": "",
        "required": false
    },
    "idEngineerPmtr": {
        "required": false
    },
    "idStoreTransfer": {
        "required": true
    },
    "idUserReceived": {
        "required": false
    },
    "idUserTransfer": {
        "required": false
    },
    "isDeleted": {
        "default": 0,
        "required": false
    },
    "noIndex": {
        "default": 0,
        "required": false
    },
    "noOfBox": {
        "default": "",
        "required": false
    },
    "noteTransfer": {
        "default": "",
        "required": false
    },
    "numberTransfer": {
        "default": "",
        "required": false
    },
    "sheet": {
        "default": "",
        "required": false
    },
    "shippingVia": {
        "default": "",
        "required": false
    },
    "statusTransfer": {
        "default": "",
        "required": false
    },
    "total": {
        "default": 0,
        "required": false
    },
    "updatedAt": {
        "default": "",
        "required": false
    },
    "validasi": {
        "default": 0,
        "required": false
    },
    "weight": {
        "default": "",
        "required": false
    }
};

const AmimsStoreTransferFormSchema = {
    "createdAt": {
        "default": "",
        "required": false
    },
    "dateReceived": {
        "default": "",
        "required": false
    },
    "dateTransfer": {
        "default": "",
        "required": false
    },
    "dimention": {
        "default": "",
        "required": false
    },
    "idEngineerPmtr": {
        "required": false
    },
    "idStoreTransfer": {
        "required": true
    },
    "idUserReceived": {
        "required": false
    },
    "idUserTransfer": {
        "required": false
    },
    "isDeleted": {
        "default": 0,
        "required": false
    },
    "noIndex": {
        "default": 0,
        "required": false
    },
    "noOfBox": {
        "default": "",
        "required": false
    },
    "noteTransfer": {
        "default": "",
        "required": false
    },
    "numberTransfer": {
        "default": "",
        "required": false
    },
    "sheet": {
        "default": "",
        "required": false
    },
    "shippingVia": {
        "default": "",
        "required": false
    },
    "statusTransfer": {
        "default": "",
        "required": false
    },
    "updatedAt": {
        "default": "",
        "required": false
    },
    "validasi": {
        "default": 0,
        "required": false
    },
    "weight": {
        "default": "",
        "required": false
    }
};

const AmimsTdDetailAcReportFormSchema = {
    "aircraft": {
        "default": "",
        "required": true
    },
    "complianceC": {
        "default": 0,
        "required": false
    },
    "complianceD": {
        "default": "",
        "required": false
    },
    "complianceH": {
        "default": 0,
        "required": false
    },
    "compliteC": {
        "default": 0,
        "required": false
    },
    "compliteD": {
        "default": "",
        "required": false
    },
    "compliteH": {
        "default": 0,
        "required": false
    },
    "compliteUser": {
        "default": "",
        "required": false
    },
    "engineer": {
        "default": "",
        "required": false
    },
    "idAircraft": {
        "required": false
    },
    "idTdDetail": {
        "required": false
    },
    "idTdDetailAc": {
        "required": true
    },
    "idTechLog": {
        "required": false
    },
    "isActive": {
        "default": "",
        "required": false
    },
    "noteClose": {
        "default": "",
        "required": false
    },
    "noteDetail": {
        "default": "",
        "required": false
    },
    "updatedAt": {
        "default": "",
        "required": false
    }
};

const AmimsTdDetailAcWidgetFormSchema = {
    "complianceC": {
        "default": 0,
        "required": false
    },
    "complianceD": {
        "default": "",
        "required": false
    },
    "complianceH": {
        "default": 0,
        "required": false
    },
    "compliteC": {
        "default": 0,
        "required": false
    },
    "compliteD": {
        "default": "",
        "required": false
    },
    "compliteH": {
        "default": 0,
        "required": false
    },
    "compliteUser": {
        "default": "",
        "required": false
    },
    "engineer": {
        "default": "",
        "required": false
    },
    "idAircraft": {
        "required": false
    },
    "idTdDetail": {
        "required": false
    },
    "idTdDetailAc": {
        "required": true
    },
    "idTechLog": {
        "required": false
    },
    "isActive": {
        "default": "",
        "required": false
    },
    "noteClose": {
        "default": "",
        "required": false
    },
    "noteDetail": {
        "default": "",
        "required": false
    },
    "total": {
        "default": 0,
        "required": false
    },
    "updatedAt": {
        "default": "",
        "required": false
    }
};

const AmimsTdDetailAcFormSchema = {
    "complianceC": {
        "default": 0,
        "required": false
    },
    "complianceD": {
        "default": "",
        "required": false
    },
    "complianceH": {
        "default": 0,
        "required": false
    },
    "compliteC": {
        "default": 0,
        "required": false
    },
    "compliteD": {
        "default": "",
        "required": false
    },
    "compliteH": {
        "default": 0,
        "required": false
    },
    "compliteUser": {
        "default": "",
        "required": false
    },
    "engineer": {
        "default": "",
        "required": false
    },
    "idAircraft": {
        "required": false
    },
    "idTdDetail": {
        "required": false
    },
    "idTdDetailAc": {
        "required": true
    },
    "idTechLog": {
        "required": false
    },
    "isActive": {
        "default": "",
        "required": false
    },
    "noteClose": {
        "default": "",
        "required": false
    },
    "noteDetail": {
        "default": "",
        "required": false
    },
    "updatedAt": {
        "default": "",
        "required": false
    }
};

const AmimsTdDetailReportFormSchema = {
    "actype": {
        "default": "",
        "required": true
    },
    "applicable": {
        "default": "",
        "required": false
    },
    "createdAt": {
        "default": "",
        "required": false
    },
    "dateAcc": {
        "default": "",
        "required": false
    },
    "dateAccQa": {
        "default": "",
        "required": false
    },
    "dateDetail": {
        "default": "",
        "required": false
    },
    "fileDetail": {
        "default": "",
        "required": false
    },
    "idAcc": {
        "required": false
    },
    "idAccQa": {
        "required": false
    },
    "idActype": {
        "required": false
    },
    "idTd": {
        "required": false
    },
    "idTdDetail": {
        "required": true
    },
    "isEngineer": {
        "default": "",
        "required": false
    },
    "isPilot": {
        "default": "",
        "required": false
    },
    "isQc": {
        "default": "",
        "required": false
    },
    "method": {
        "default": "",
        "required": false
    },
    "noteDetail": {
        "default": "",
        "required": false
    },
    "numberDetail": {
        "default": "",
        "required": false
    },
    "priority": {
        "default": "",
        "required": false
    },
    "statusTdDetail": {
        "default": "",
        "required": false
    },
    "subject": {
        "default": "",
        "required": false
    },
    "td": {
        "default": "",
        "required": true
    },
    "typeDetail": {
        "default": "",
        "required": false
    },
    "updatedAt": {
        "default": "",
        "required": false
    },
    "validasi": {
        "default": 0,
        "required": false
    }
};

const AmimsTdDetailWidgetFormSchema = {
    "applicable": {
        "default": "",
        "required": false
    },
    "createdAt": {
        "default": "",
        "required": false
    },
    "dateAcc": {
        "default": "",
        "required": false
    },
    "dateAccQa": {
        "default": "",
        "required": false
    },
    "dateDetail": {
        "default": "",
        "required": false
    },
    "fileDetail": {
        "default": "",
        "required": false
    },
    "idAcc": {
        "required": false
    },
    "idAccQa": {
        "required": false
    },
    "idActype": {
        "required": false
    },
    "idTd": {
        "required": false
    },
    "idTdDetail": {
        "required": true
    },
    "isEngineer": {
        "default": "",
        "required": false
    },
    "isPilot": {
        "default": "",
        "required": false
    },
    "isQc": {
        "default": "",
        "required": false
    },
    "method": {
        "default": "",
        "required": false
    },
    "noteDetail": {
        "default": "",
        "required": false
    },
    "numberDetail": {
        "default": "",
        "required": false
    },
    "priority": {
        "default": "",
        "required": false
    },
    "statusTdDetail": {
        "default": "",
        "required": false
    },
    "subject": {
        "default": "",
        "required": false
    },
    "total": {
        "default": 0,
        "required": false
    },
    "typeDetail": {
        "default": "",
        "required": false
    },
    "updatedAt": {
        "default": "",
        "required": false
    },
    "validasi": {
        "default": 0,
        "required": false
    }
};

const AmimsTdDetailFormSchema = {
    "applicable": {
        "default": "",
        "required": false
    },
    "createdAt": {
        "default": "",
        "required": false
    },
    "dateAcc": {
        "default": "",
        "required": false
    },
    "dateAccQa": {
        "default": "",
        "required": false
    },
    "dateDetail": {
        "default": "",
        "required": false
    },
    "fileDetail": {
        "default": "",
        "required": false
    },
    "idAcc": {
        "required": false
    },
    "idAccQa": {
        "required": false
    },
    "idActype": {
        "required": false
    },
    "idTd": {
        "required": false
    },
    "idTdDetail": {
        "required": true
    },
    "isEngineer": {
        "default": "",
        "required": false
    },
    "isPilot": {
        "default": "",
        "required": false
    },
    "isQc": {
        "default": "",
        "required": false
    },
    "method": {
        "default": "",
        "required": false
    },
    "noteDetail": {
        "default": "",
        "required": false
    },
    "numberDetail": {
        "default": "",
        "required": false
    },
    "priority": {
        "default": "",
        "required": false
    },
    "statusTdDetail": {
        "default": "",
        "required": false
    },
    "subject": {
        "default": "",
        "required": false
    },
    "typeDetail": {
        "default": "",
        "required": false
    },
    "updatedAt": {
        "default": "",
        "required": false
    },
    "validasi": {
        "default": 0,
        "required": false
    }
};

const AmimsTdRefReportFormSchema = {
    "idTd": {
        "required": false
    },
    "idTdLain": {
        "required": false
    },
    "idTdRef": {
        "required": true
    },
    "noTdLain": {
        "default": "",
        "required": false
    },
    "td": {
        "default": "",
        "required": true
    }
};

const AmimsTdRefWidgetFormSchema = {
    "idTd": {
        "required": false
    },
    "idTdLain": {
        "required": false
    },
    "idTdRef": {
        "required": true
    },
    "noTdLain": {
        "default": "",
        "required": false
    },
    "total": {
        "default": 0,
        "required": false
    }
};

const AmimsTdRefFormSchema = {
    "idTd": {
        "required": false
    },
    "idTdLain": {
        "required": false
    },
    "idTdRef": {
        "required": true
    },
    "noTdLain": {
        "default": "",
        "required": false
    }
};

const AmimsTdReportFormSchema = {
    "applicable": {
        "default": "",
        "required": false
    },
    "createdAt": {
        "default": "",
        "required": false
    },
    "docNumber": {
        "default": "",
        "required": false
    },
    "doctype": {
        "default": "",
        "required": true
    },
    "effectiveDate": {
        "default": "",
        "required": false
    },
    "fileTd": {
        "default": "",
        "required": false
    },
    "idDoctype": {
        "required": false
    },
    "idTd": {
        "required": true
    },
    "idUser": {
        "required": false
    },
    "noteDoc": {
        "default": "",
        "required": false
    },
    "oldId": {
        "default": "",
        "required": false
    },
    "rev": {
        "default": "",
        "required": false
    },
    "tdParent": {
        "default": "",
        "required": false
    },
    "title": {
        "default": "",
        "required": false
    },
    "updatedAt": {
        "default": "",
        "required": false
    },
    "validasi": {
        "default": 0,
        "required": false
    }
};

const AmimsTdTypeReportFormSchema = {
    "descriptionTdType": {
        "default": "",
        "required": false
    },
    "idTdType": {
        "required": true
    },
    "tdType": {
        "default": "",
        "required": false
    }
};

const AmimsTdTypeWidgetFormSchema = {
    "descriptionTdType": {
        "default": "",
        "required": false
    },
    "idTdType": {
        "required": true
    },
    "tdType": {
        "default": "",
        "required": false
    },
    "total": {
        "default": 0,
        "required": false
    }
};

const AmimsTdTypeFormSchema = {
    "descriptionTdType": {
        "default": "",
        "required": false
    },
    "idTdType": {
        "required": true
    },
    "tdType": {
        "default": "",
        "required": false
    }
};

const AmimsTdWidgetFormSchema = {
    "applicable": {
        "default": "",
        "required": false
    },
    "createdAt": {
        "default": "",
        "required": false
    },
    "docNumber": {
        "default": "",
        "required": false
    },
    "effectiveDate": {
        "default": "",
        "required": false
    },
    "fileTd": {
        "default": "",
        "required": false
    },
    "idDoctype": {
        "required": false
    },
    "idTd": {
        "required": true
    },
    "idUser": {
        "required": false
    },
    "noteDoc": {
        "default": "",
        "required": false
    },
    "oldId": {
        "default": "",
        "required": false
    },
    "rev": {
        "default": "",
        "required": false
    },
    "tdParent": {
        "default": "",
        "required": false
    },
    "title": {
        "default": "",
        "required": false
    },
    "total": {
        "default": 0,
        "required": false
    },
    "updatedAt": {
        "default": "",
        "required": false
    },
    "validasi": {
        "default": 0,
        "required": false
    }
};

const AmimsTdFormSchema = {
    "applicable": {
        "default": "",
        "required": false
    },
    "createdAt": {
        "default": "",
        "required": false
    },
    "docNumber": {
        "default": "",
        "required": false
    },
    "effectiveDate": {
        "default": "",
        "required": false
    },
    "fileTd": {
        "default": "",
        "required": false
    },
    "idDoctype": {
        "required": false
    },
    "idTd": {
        "required": true
    },
    "idUser": {
        "required": false
    },
    "noteDoc": {
        "default": "",
        "required": false
    },
    "oldId": {
        "default": "",
        "required": false
    },
    "rev": {
        "default": "",
        "required": false
    },
    "tdParent": {
        "default": "",
        "required": false
    },
    "title": {
        "default": "",
        "required": false
    },
    "updatedAt": {
        "default": "",
        "required": false
    },
    "validasi": {
        "default": 0,
        "required": false
    }
};

const AmimsTechDefectReportFormSchema = {
    "aircraft": {
        "default": "",
        "required": true
    },
    "createdAt": {
        "default": "",
        "required": false
    },
    "dateDefect": {
        "default": "",
        "required": false
    },
    "doneCycle": {
        "default": 0,
        "required": false
    },
    "doneDate": {
        "default": "",
        "required": false
    },
    "doneHours": {
        "default": 0,
        "required": false
    },
    "idAircraft": {
        "required": false
    },
    "idEngineerRti": {
        "required": false
    },
    "idPart": {
        "required": false
    },
    "idPartInstall": {
        "required": false
    },
    "idTechDefect": {
        "required": true
    },
    "idTechLog": {
        "required": false
    },
    "noteDefect": {
        "default": "",
        "required": false
    },
    "part": {
        "default": "",
        "required": true
    },
    "statusDefect": {
        "default": "",
        "required": false
    },
    "updatedAt": {
        "default": "",
        "required": false
    },
    "userSign": {
        "default": "",
        "required": false
    }
};

const AmimsTechDefectWidgetFormSchema = {
    "createdAt": {
        "default": "",
        "required": false
    },
    "dateDefect": {
        "default": "",
        "required": false
    },
    "doneCycle": {
        "default": 0,
        "required": false
    },
    "doneDate": {
        "default": "",
        "required": false
    },
    "doneHours": {
        "default": 0,
        "required": false
    },
    "idAircraft": {
        "required": false
    },
    "idEngineerRti": {
        "required": false
    },
    "idPart": {
        "required": false
    },
    "idPartInstall": {
        "required": false
    },
    "idTechDefect": {
        "required": true
    },
    "idTechLog": {
        "required": false
    },
    "noteDefect": {
        "default": "",
        "required": false
    },
    "statusDefect": {
        "default": "",
        "required": false
    },
    "total": {
        "default": 0,
        "required": false
    },
    "updatedAt": {
        "default": "",
        "required": false
    },
    "userSign": {
        "default": "",
        "required": false
    }
};

const AmimsTechDefectFormSchema = {
    "createdAt": {
        "default": "",
        "required": false
    },
    "dateDefect": {
        "default": "",
        "required": false
    },
    "doneCycle": {
        "default": 0,
        "required": false
    },
    "doneDate": {
        "default": "",
        "required": false
    },
    "doneHours": {
        "default": 0,
        "required": false
    },
    "idAircraft": {
        "required": false
    },
    "idEngineerRti": {
        "required": false
    },
    "idPart": {
        "required": false
    },
    "idPartInstall": {
        "required": false
    },
    "idTechDefect": {
        "required": true
    },
    "idTechLog": {
        "required": false
    },
    "noteDefect": {
        "default": "",
        "required": false
    },
    "statusDefect": {
        "default": "",
        "required": false
    },
    "updatedAt": {
        "default": "",
        "required": false
    },
    "userSign": {
        "default": "",
        "required": false
    }
};

const AmimsTechDiscrepanciesReportFormSchema = {
    "createdAt": {
        "default": "",
        "required": false
    },
    "dateDiscrepancies": {
        "default": "",
        "required": false
    },
    "idPart": {
        "required": false
    },
    "idTechDiscrepancies": {
        "required": true
    },
    "idTechLog": {
        "required": false
    },
    "isDiscrepancies": {
        "default": "",
        "required": false
    },
    "noteDiscrepancies": {
        "default": "",
        "required": false
    },
    "part": {
        "default": "",
        "required": true
    },
    "updatedAt": {
        "default": "",
        "required": false
    }
};

const AmimsTechDiscrepanciesWidgetFormSchema = {
    "createdAt": {
        "default": "",
        "required": false
    },
    "dateDiscrepancies": {
        "default": "",
        "required": false
    },
    "idPart": {
        "required": false
    },
    "idTechDiscrepancies": {
        "required": true
    },
    "idTechLog": {
        "required": false
    },
    "isDiscrepancies": {
        "default": "",
        "required": false
    },
    "noteDiscrepancies": {
        "default": "",
        "required": false
    },
    "total": {
        "default": 0,
        "required": false
    },
    "updatedAt": {
        "default": "",
        "required": false
    }
};

const AmimsTechDiscrepanciesFormSchema = {
    "createdAt": {
        "default": "",
        "required": false
    },
    "dateDiscrepancies": {
        "default": "",
        "required": false
    },
    "idPart": {
        "required": false
    },
    "idTechDiscrepancies": {
        "required": true
    },
    "idTechLog": {
        "required": false
    },
    "isDiscrepancies": {
        "default": "",
        "required": false
    },
    "noteDiscrepancies": {
        "default": "",
        "required": false
    },
    "updatedAt": {
        "default": "",
        "required": false
    }
};

const AmimsTechLogEngineCheckReportFormSchema = {
    "alt": {
        "default": 0,
        "required": false
    },
    "idTechLog": {
        "required": false
    },
    "idTechLogEngine": {
        "required": false
    },
    "idTechLogEngineCheck": {
        "required": true
    },
    "itt": {
        "default": 0,
        "required": false
    },
    "n1": {
        "default": 0,
        "required": false
    },
    "n2": {
        "default": 0,
        "required": false
    },
    "nr": {
        "default": 0,
        "required": false
    },
    "oat": {
        "default": 0,
        "required": false
    },
    "oilPress": {
        "default": 0,
        "required": false
    },
    "oilTemp": {
        "default": 0,
        "required": false
    },
    "powerMargin": {
        "default": 0,
        "required": false
    },
    "speed": {
        "default": 0,
        "required": false
    },
    "t5": {
        "default": 0,
        "required": false
    },
    "torque": {
        "default": 0,
        "required": false
    }
};

const AmimsTechLogEngineCheckWidgetFormSchema = {
    "alt": {
        "default": 0,
        "required": false
    },
    "idTechLog": {
        "required": false
    },
    "idTechLogEngine": {
        "required": false
    },
    "idTechLogEngineCheck": {
        "required": true
    },
    "itt": {
        "default": 0,
        "required": false
    },
    "n1": {
        "default": 0,
        "required": false
    },
    "n2": {
        "default": 0,
        "required": false
    },
    "nr": {
        "default": 0,
        "required": false
    },
    "oat": {
        "default": 0,
        "required": false
    },
    "oilPress": {
        "default": 0,
        "required": false
    },
    "oilTemp": {
        "default": 0,
        "required": false
    },
    "powerMargin": {
        "default": 0,
        "required": false
    },
    "speed": {
        "default": 0,
        "required": false
    },
    "t5": {
        "default": 0,
        "required": false
    },
    "torque": {
        "default": 0,
        "required": false
    },
    "total": {
        "default": 0,
        "required": false
    }
};

const AmimsTechLogEngineCheckFormSchema = {
    "alt": {
        "default": 0,
        "required": false
    },
    "idTechLog": {
        "required": false
    },
    "idTechLogEngine": {
        "required": false
    },
    "idTechLogEngineCheck": {
        "required": true
    },
    "itt": {
        "default": 0,
        "required": false
    },
    "n1": {
        "default": 0,
        "required": false
    },
    "n2": {
        "default": 0,
        "required": false
    },
    "nr": {
        "default": 0,
        "required": false
    },
    "oat": {
        "default": 0,
        "required": false
    },
    "oilPress": {
        "default": 0,
        "required": false
    },
    "oilTemp": {
        "default": 0,
        "required": false
    },
    "powerMargin": {
        "default": 0,
        "required": false
    },
    "speed": {
        "default": 0,
        "required": false
    },
    "t5": {
        "default": 0,
        "required": false
    },
    "torque": {
        "default": 0,
        "required": false
    }
};

const AmimsTechLogEngineReportFormSchema = {
    "cycleBf": {
        "default": 0,
        "required": false
    },
    "cycleCf": {
        "default": 0,
        "required": false
    },
    "cycleFlight": {
        "default": 0,
        "required": false
    },
    "fullCycleBf": {
        "default": 0,
        "required": false
    },
    "fullCycleFlt": {
        "default": 0,
        "required": false
    },
    "hoursBf": {
        "default": 0,
        "required": false
    },
    "hoursCf": {
        "default": 0,
        "required": false
    },
    "hoursFlight": {
        "default": 0,
        "required": false
    },
    "idPart": {
        "required": false
    },
    "idTechLog": {
        "required": false
    },
    "idTechLogEngine": {
        "required": true
    },
    "n1": {
        "default": 0,
        "required": false
    },
    "n2": {
        "default": 0,
        "required": false
    },
    "oil": {
        "default": "",
        "required": false
    },
    "oilAdd": {
        "default": 0,
        "required": false
    },
    "oilTotal": {
        "default": 0,
        "required": false
    },
    "oldId": {
        "default": "",
        "required": false
    },
    "part": {
        "default": "",
        "required": true
    },
    "partCycleBf": {
        "default": 0,
        "required": false
    },
    "partCycleFlt": {
        "default": 0,
        "required": false
    },
    "sn": {
        "default": "",
        "required": false
    },
    "timeAboveBf": {
        "default": 0,
        "required": false
    },
    "timeAboveFlt": {
        "default": 0,
        "required": false
    },
    "validasi": {
        "default": 0,
        "required": false
    }
};

const AmimsTechLogEngineWidgetFormSchema = {
    "cycleBf": {
        "default": 0,
        "required": false
    },
    "cycleCf": {
        "default": 0,
        "required": false
    },
    "cycleFlight": {
        "default": 0,
        "required": false
    },
    "fullCycleBf": {
        "default": 0,
        "required": false
    },
    "fullCycleFlt": {
        "default": 0,
        "required": false
    },
    "hoursBf": {
        "default": 0,
        "required": false
    },
    "hoursCf": {
        "default": 0,
        "required": false
    },
    "hoursFlight": {
        "default": 0,
        "required": false
    },
    "idPart": {
        "required": false
    },
    "idTechLog": {
        "required": false
    },
    "idTechLogEngine": {
        "required": true
    },
    "n1": {
        "default": 0,
        "required": false
    },
    "n2": {
        "default": 0,
        "required": false
    },
    "oil": {
        "default": "",
        "required": false
    },
    "oilAdd": {
        "default": 0,
        "required": false
    },
    "oilTotal": {
        "default": 0,
        "required": false
    },
    "oldId": {
        "default": "",
        "required": false
    },
    "partCycleBf": {
        "default": 0,
        "required": false
    },
    "partCycleFlt": {
        "default": 0,
        "required": false
    },
    "sn": {
        "default": "",
        "required": false
    },
    "timeAboveBf": {
        "default": 0,
        "required": false
    },
    "timeAboveFlt": {
        "default": 0,
        "required": false
    },
    "total": {
        "default": 0,
        "required": false
    },
    "validasi": {
        "default": 0,
        "required": false
    }
};

const AmimsTechLogEngineFormSchema = {
    "cycleBf": {
        "default": 0,
        "required": false
    },
    "cycleCf": {
        "default": 0,
        "required": false
    },
    "cycleFlight": {
        "default": 0,
        "required": false
    },
    "fullCycleBf": {
        "default": 0,
        "required": false
    },
    "fullCycleFlt": {
        "default": 0,
        "required": false
    },
    "hoursBf": {
        "default": 0,
        "required": false
    },
    "hoursCf": {
        "default": 0,
        "required": false
    },
    "hoursFlight": {
        "default": 0,
        "required": false
    },
    "idPart": {
        "required": false
    },
    "idTechLog": {
        "required": false
    },
    "idTechLogEngine": {
        "required": true
    },
    "n1": {
        "default": 0,
        "required": false
    },
    "n2": {
        "default": 0,
        "required": false
    },
    "oil": {
        "default": "",
        "required": false
    },
    "oilAdd": {
        "default": 0,
        "required": false
    },
    "oilTotal": {
        "default": 0,
        "required": false
    },
    "oldId": {
        "default": "",
        "required": false
    },
    "partCycleBf": {
        "default": 0,
        "required": false
    },
    "partCycleFlt": {
        "default": 0,
        "required": false
    },
    "sn": {
        "default": "",
        "required": false
    },
    "timeAboveBf": {
        "default": 0,
        "required": false
    },
    "timeAboveFlt": {
        "default": 0,
        "required": false
    },
    "validasi": {
        "default": 0,
        "required": false
    }
};

const AmimsTechLogItemReportFormSchema = {
    "apuStart": {
        "default": 0,
        "required": false
    },
    "cgPenalty": {
        "default": "",
        "required": false
    },
    "cocaCaptain": {
        "default": "",
        "required": false
    },
    "cycles": {
        "default": 0,
        "required": false
    },
    "flightFrom": {
        "default": "",
        "required": false
    },
    "flightHours": {
        "default": 0,
        "required": false
    },
    "flightTo": {
        "default": "",
        "required": false
    },
    "hoistOperation": {
        "default": "",
        "required": false
    },
    "hoistUsage": {
        "default": 0,
        "required": false
    },
    "idCaptain": {
        "required": false
    },
    "idTechLog": {
        "required": false
    },
    "idTechLogItem": {
        "required": true
    },
    "landingTime": {
        "default": "",
        "required": false
    },
    "landings": {
        "default": 0,
        "required": false
    },
    "noteTechLogItem": {
        "default": "",
        "required": false
    },
    "slingReleased": {
        "default": 0,
        "required": false
    },
    "takeofTime": {
        "default": "",
        "required": false
    }
};

const AmimsTechLogItemWidgetFormSchema = {
    "apuStart": {
        "default": 0,
        "required": false
    },
    "cgPenalty": {
        "default": "",
        "required": false
    },
    "cocaCaptain": {
        "default": "",
        "required": false
    },
    "cycles": {
        "default": 0,
        "required": false
    },
    "flightFrom": {
        "default": "",
        "required": false
    },
    "flightHours": {
        "default": 0,
        "required": false
    },
    "flightTo": {
        "default": "",
        "required": false
    },
    "hoistOperation": {
        "default": "",
        "required": false
    },
    "hoistUsage": {
        "default": 0,
        "required": false
    },
    "idCaptain": {
        "required": false
    },
    "idTechLog": {
        "required": false
    },
    "idTechLogItem": {
        "required": true
    },
    "landingTime": {
        "default": "",
        "required": false
    },
    "landings": {
        "default": 0,
        "required": false
    },
    "noteTechLogItem": {
        "default": "",
        "required": false
    },
    "slingReleased": {
        "default": 0,
        "required": false
    },
    "takeofTime": {
        "default": "",
        "required": false
    },
    "total": {
        "default": 0,
        "required": false
    }
};

const AmimsTechLogItemFormSchema = {
    "apuStart": {
        "default": 0,
        "required": false
    },
    "cgPenalty": {
        "default": "",
        "required": false
    },
    "cocaCaptain": {
        "default": "",
        "required": false
    },
    "cycles": {
        "default": 0,
        "required": false
    },
    "flightFrom": {
        "default": "",
        "required": false
    },
    "flightHours": {
        "default": 0,
        "required": false
    },
    "flightTo": {
        "default": "",
        "required": false
    },
    "hoistOperation": {
        "default": "",
        "required": false
    },
    "hoistUsage": {
        "default": 0,
        "required": false
    },
    "idCaptain": {
        "required": false
    },
    "idTechLog": {
        "required": false
    },
    "idTechLogItem": {
        "required": true
    },
    "landingTime": {
        "default": "",
        "required": false
    },
    "landings": {
        "default": 0,
        "required": false
    },
    "noteTechLogItem": {
        "default": "",
        "required": false
    },
    "slingReleased": {
        "default": 0,
        "required": false
    },
    "takeofTime": {
        "default": "",
        "required": false
    }
};

const AmimsTechLogJoReportFormSchema = {
    "createdAt": {
        "default": "",
        "required": false
    },
    "dateClose": {
        "default": "",
        "required": false
    },
    "idMpcJo": {
        "required": false
    },
    "idPart": {
        "required": false
    },
    "idTechLog": {
        "required": false
    },
    "idTechLogClose": {
        "required": false
    },
    "idTechLogJo": {
        "required": true
    },
    "isContinue": {
        "default": "",
        "required": false
    },
    "part": {
        "default": "",
        "required": true
    },
    "timeClose": {
        "default": "",
        "required": false
    },
    "updatedAt": {
        "default": "",
        "required": false
    }
};

const AmimsTechLogJoWidgetFormSchema = {
    "createdAt": {
        "default": "",
        "required": false
    },
    "dateClose": {
        "default": "",
        "required": false
    },
    "idMpcJo": {
        "required": false
    },
    "idPart": {
        "required": false
    },
    "idTechLog": {
        "required": false
    },
    "idTechLogClose": {
        "required": false
    },
    "idTechLogJo": {
        "required": true
    },
    "isContinue": {
        "default": "",
        "required": false
    },
    "timeClose": {
        "default": "",
        "required": false
    },
    "total": {
        "default": 0,
        "required": false
    },
    "updatedAt": {
        "default": "",
        "required": false
    }
};

const AmimsTechLogJoFormSchema = {
    "createdAt": {
        "default": "",
        "required": false
    },
    "dateClose": {
        "default": "",
        "required": false
    },
    "idMpcJo": {
        "required": false
    },
    "idPart": {
        "required": false
    },
    "idTechLog": {
        "required": false
    },
    "idTechLogClose": {
        "required": false
    },
    "idTechLogJo": {
        "required": true
    },
    "isContinue": {
        "default": "",
        "required": false
    },
    "timeClose": {
        "default": "",
        "required": false
    },
    "updatedAt": {
        "default": "",
        "required": false
    }
};

const AmimsTechLogReportFormSchema = {
    "aircraft": {
        "default": "",
        "required": true
    },
    "authoRized": {
        "default": 0,
        "required": false
    },
    "createdAt": {
        "default": "",
        "required": false
    },
    "cycleBf": {
        "default": 0,
        "required": false
    },
    "cycleCf": {
        "default": 0,
        "required": false
    },
    "cycleFlight": {
        "default": 0,
        "required": false
    },
    "dateInspection": {
        "default": "",
        "required": false
    },
    "hoursBf": {
        "default": 0,
        "required": false
    },
    "hoursCf": {
        "default": 0,
        "required": false
    },
    "hoursFlight": {
        "default": 0,
        "required": false
    },
    "idAircraft": {
        "required": false
    },
    "idTechLog": {
        "required": true
    },
    "idUserAcc": {
        "required": false
    },
    "idUserInspection": {
        "required": false
    },
    "idUserLog": {
        "required": false
    },
    "isDeleted": {
        "default": 0,
        "required": false
    },
    "isEdit": {
        "default": 0,
        "required": false
    },
    "lastUpdate": {
        "default": 0,
        "required": false
    },
    "noteLog": {
        "default": "",
        "required": false
    },
    "numberLog": {
        "default": "",
        "required": false
    },
    "numberNext": {
        "default": 0,
        "required": false
    },
    "oldId": {
        "default": "",
        "required": false
    },
    "pesan": {
        "default": "",
        "required": false
    },
    "place": {
        "default": 0,
        "required": false
    },
    "techLogDate": {
        "default": "",
        "required": false
    },
    "totalCycle": {
        "default": 0,
        "required": false
    },
    "totalFlight": {
        "default": 0,
        "required": false
    },
    "totalFuel": {
        "default": 0,
        "required": false
    },
    "updatedAt": {
        "default": "",
        "required": false
    },
    "validasi": {
        "default": 0,
        "required": false
    },
    "xycleInput": {
        "default": 0,
        "required": false
    }
};

const AmimsTechLogWidgetFormSchema = {
    "authoRized": {
        "default": 0,
        "required": false
    },
    "createdAt": {
        "default": "",
        "required": false
    },
    "cycleBf": {
        "default": 0,
        "required": false
    },
    "cycleCf": {
        "default": 0,
        "required": false
    },
    "cycleFlight": {
        "default": 0,
        "required": false
    },
    "dateInspection": {
        "default": "",
        "required": false
    },
    "hoursBf": {
        "default": 0,
        "required": false
    },
    "hoursCf": {
        "default": 0,
        "required": false
    },
    "hoursFlight": {
        "default": 0,
        "required": false
    },
    "idAircraft": {
        "required": false
    },
    "idTechLog": {
        "required": true
    },
    "idUserAcc": {
        "required": false
    },
    "idUserInspection": {
        "required": false
    },
    "idUserLog": {
        "required": false
    },
    "isDeleted": {
        "default": 0,
        "required": false
    },
    "isEdit": {
        "default": 0,
        "required": false
    },
    "lastUpdate": {
        "default": 0,
        "required": false
    },
    "noteLog": {
        "default": "",
        "required": false
    },
    "numberLog": {
        "default": "",
        "required": false
    },
    "numberNext": {
        "default": 0,
        "required": false
    },
    "oldId": {
        "default": "",
        "required": false
    },
    "pesan": {
        "default": "",
        "required": false
    },
    "place": {
        "default": 0,
        "required": false
    },
    "techLogDate": {
        "default": "",
        "required": false
    },
    "total": {
        "default": 0,
        "required": false
    },
    "totalCycle": {
        "default": 0,
        "required": false
    },
    "totalFlight": {
        "default": 0,
        "required": false
    },
    "totalFuel": {
        "default": 0,
        "required": false
    },
    "updatedAt": {
        "default": "",
        "required": false
    },
    "validasi": {
        "default": 0,
        "required": false
    },
    "xycleInput": {
        "default": 0,
        "required": false
    }
};

const AmimsTechLogFormSchema = {
    "authoRized": {
        "default": 0,
        "required": false
    },
    "createdAt": {
        "default": "",
        "required": false
    },
    "cycleBf": {
        "default": 0,
        "required": false
    },
    "cycleCf": {
        "default": 0,
        "required": false
    },
    "cycleFlight": {
        "default": 0,
        "required": false
    },
    "dateInspection": {
        "default": "",
        "required": false
    },
    "hoursBf": {
        "default": 0,
        "required": false
    },
    "hoursCf": {
        "default": 0,
        "required": false
    },
    "hoursFlight": {
        "default": 0,
        "required": false
    },
    "idAircraft": {
        "required": false
    },
    "idTechLog": {
        "required": true
    },
    "idUserAcc": {
        "required": false
    },
    "idUserInspection": {
        "required": false
    },
    "idUserLog": {
        "required": false
    },
    "isDeleted": {
        "default": 0,
        "required": false
    },
    "isEdit": {
        "default": 0,
        "required": false
    },
    "lastUpdate": {
        "default": 0,
        "required": false
    },
    "noteLog": {
        "default": "",
        "required": false
    },
    "numberLog": {
        "default": "",
        "required": false
    },
    "numberNext": {
        "default": 0,
        "required": false
    },
    "oldId": {
        "default": "",
        "required": false
    },
    "pesan": {
        "default": "",
        "required": false
    },
    "place": {
        "default": 0,
        "required": false
    },
    "techLogDate": {
        "default": "",
        "required": false
    },
    "totalCycle": {
        "default": 0,
        "required": false
    },
    "totalFlight": {
        "default": 0,
        "required": false
    },
    "totalFuel": {
        "default": 0,
        "required": false
    },
    "updatedAt": {
        "default": "",
        "required": false
    },
    "validasi": {
        "default": 0,
        "required": false
    },
    "xycleInput": {
        "default": 0,
        "required": false
    }
};

const AmimsTypeOfworkReportFormSchema = {
    "childnameTypeOfwork": {
        "default": "",
        "required": false
    },
    "code": {
        "default": "",
        "required": false
    },
    "idTypeOfwork": {
        "required": true
    },
    "isDeleted": {
        "default": 0,
        "required": false
    },
    "typeOfwork": {
        "default": "",
        "required": false
    }
};

const AmimsTypeOfworkWidgetFormSchema = {
    "childnameTypeOfwork": {
        "default": "",
        "required": false
    },
    "code": {
        "default": "",
        "required": false
    },
    "idTypeOfwork": {
        "required": true
    },
    "isDeleted": {
        "default": 0,
        "required": false
    },
    "total": {
        "default": 0,
        "required": false
    },
    "typeOfwork": {
        "default": "",
        "required": false
    }
};

const AmimsTypeOfworkFormSchema = {
    "childnameTypeOfwork": {
        "default": "",
        "required": false
    },
    "code": {
        "default": "",
        "required": false
    },
    "idTypeOfwork": {
        "required": true
    },
    "isDeleted": {
        "default": 0,
        "required": false
    },
    "typeOfwork": {
        "default": "",
        "required": false
    }
};

const AmimsUnscheduleMaintenanceReportFormSchema = {
    "abortStatus": {
        "default": "",
        "required": false
    },
    "actionCode": {
        "default": "",
        "required": false
    },
    "aircraft": {
        "default": "",
        "required": true
    },
    "aircraftGrounded": {
        "default": "",
        "required": false
    },
    "airframeSn": {
        "default": "",
        "required": false
    },
    "amlNumber": {
        "default": "",
        "required": false
    },
    "ataCode": {
        "default": "",
        "required": false
    },
    "complianceLastPerformedBy": {
        "default": "",
        "required": false
    },
    "createdAt": {
        "default": "",
        "required": false
    },
    "delayStatus": {
        "default": "",
        "required": false
    },
    "description": {
        "default": "",
        "required": false
    },
    "discoveredBy": {
        "default": "",
        "required": false
    },
    "discoveryPoint": {
        "default": "",
        "required": false
    },
    "hiddenDamageRequired": {
        "default": "",
        "required": false
    },
    "idAircraft": {
        "required": false
    },
    "idPart": {
        "required": false
    },
    "idTechLog": {
        "required": false
    },
    "idUnscheduleMaintenance": {
        "required": true
    },
    "idUser": {
        "required": false
    },
    "inspectionDate": {
        "default": "",
        "required": false
    },
    "inspectionRequired": {
        "default": "",
        "required": false
    },
    "inspector": {
        "default": "",
        "required": false
    },
    "isOptional": {
        "default": "",
        "required": false
    },
    "lastUpdatedBy": {
        "default": "",
        "required": false
    },
    "nextDueDate": {
        "default": "",
        "required": false
    },
    "nextDueHours": {
        "default": "",
        "required": false
    },
    "nextDueLandings": {
        "default": 0,
        "required": false
    },
    "nextDueParam": {
        "default": "",
        "required": false
    },
    "notes": {
        "default": "",
        "required": false
    },
    "part": {
        "default": "",
        "required": true
    },
    "preliminaryNote": {
        "default": "",
        "required": false
    },
    "refNumber": {
        "default": "",
        "required": false
    },
    "reference": {
        "default": "",
        "required": false
    },
    "reportedDate": {
        "default": "",
        "required": false
    },
    "reportedHours": {
        "default": "",
        "required": false
    },
    "reportedLandings": {
        "default": 0,
        "required": false
    },
    "resolvedDate": {
        "default": "",
        "required": false
    },
    "resolvedHours": {
        "default": "",
        "required": false
    },
    "resolvedLandings": {
        "default": "",
        "required": false
    },
    "status": {
        "default": "",
        "required": false
    },
    "type": {
        "default": "",
        "required": false
    },
    "updatedAt": {
        "default": "",
        "required": false
    }
};

const AmimsUnscheduleMaintenanceWidgetFormSchema = {
    "abortStatus": {
        "default": "",
        "required": false
    },
    "actionCode": {
        "default": "",
        "required": false
    },
    "aircraftGrounded": {
        "default": "",
        "required": false
    },
    "airframeSn": {
        "default": "",
        "required": false
    },
    "amlNumber": {
        "default": "",
        "required": false
    },
    "ataCode": {
        "default": "",
        "required": false
    },
    "complianceLastPerformedBy": {
        "default": "",
        "required": false
    },
    "createdAt": {
        "default": "",
        "required": false
    },
    "delayStatus": {
        "default": "",
        "required": false
    },
    "description": {
        "default": "",
        "required": false
    },
    "discoveredBy": {
        "default": "",
        "required": false
    },
    "discoveryPoint": {
        "default": "",
        "required": false
    },
    "hiddenDamageRequired": {
        "default": "",
        "required": false
    },
    "idAircraft": {
        "required": false
    },
    "idPart": {
        "required": false
    },
    "idTechLog": {
        "required": false
    },
    "idUnscheduleMaintenance": {
        "required": true
    },
    "idUser": {
        "required": false
    },
    "inspectionDate": {
        "default": "",
        "required": false
    },
    "inspectionRequired": {
        "default": "",
        "required": false
    },
    "inspector": {
        "default": "",
        "required": false
    },
    "isOptional": {
        "default": "",
        "required": false
    },
    "lastUpdatedBy": {
        "default": "",
        "required": false
    },
    "nextDueDate": {
        "default": "",
        "required": false
    },
    "nextDueHours": {
        "default": "",
        "required": false
    },
    "nextDueLandings": {
        "default": 0,
        "required": false
    },
    "nextDueParam": {
        "default": "",
        "required": false
    },
    "notes": {
        "default": "",
        "required": false
    },
    "preliminaryNote": {
        "default": "",
        "required": false
    },
    "refNumber": {
        "default": "",
        "required": false
    },
    "reference": {
        "default": "",
        "required": false
    },
    "reportedDate": {
        "default": "",
        "required": false
    },
    "reportedHours": {
        "default": "",
        "required": false
    },
    "reportedLandings": {
        "default": 0,
        "required": false
    },
    "resolvedDate": {
        "default": "",
        "required": false
    },
    "resolvedHours": {
        "default": "",
        "required": false
    },
    "resolvedLandings": {
        "default": "",
        "required": false
    },
    "status": {
        "default": "",
        "required": false
    },
    "total": {
        "default": 0,
        "required": false
    },
    "type": {
        "default": "",
        "required": false
    },
    "updatedAt": {
        "default": "",
        "required": false
    }
};

const AmimsUnscheduleMaintenanceFormSchema = {
    "abortStatus": {
        "default": "",
        "required": false
    },
    "actionCode": {
        "default": "",
        "required": false
    },
    "aircraftGrounded": {
        "default": "",
        "required": false
    },
    "airframeSn": {
        "default": "",
        "required": false
    },
    "amlNumber": {
        "default": "",
        "required": false
    },
    "ataCode": {
        "default": "",
        "required": false
    },
    "complianceLastPerformedBy": {
        "default": "",
        "required": false
    },
    "createdAt": {
        "default": "",
        "required": false
    },
    "delayStatus": {
        "default": "",
        "required": false
    },
    "description": {
        "default": "",
        "required": false
    },
    "discoveredBy": {
        "default": "",
        "required": false
    },
    "discoveryPoint": {
        "default": "",
        "required": false
    },
    "hiddenDamageRequired": {
        "default": "",
        "required": false
    },
    "idAircraft": {
        "required": false
    },
    "idPart": {
        "required": false
    },
    "idTechLog": {
        "required": false
    },
    "idUnscheduleMaintenance": {
        "required": true
    },
    "idUser": {
        "required": false
    },
    "inspectionDate": {
        "default": "",
        "required": false
    },
    "inspectionRequired": {
        "default": "",
        "required": false
    },
    "inspector": {
        "default": "",
        "required": false
    },
    "isOptional": {
        "default": "",
        "required": false
    },
    "lastUpdatedBy": {
        "default": "",
        "required": false
    },
    "nextDueDate": {
        "default": "",
        "required": false
    },
    "nextDueHours": {
        "default": "",
        "required": false
    },
    "nextDueLandings": {
        "default": 0,
        "required": false
    },
    "nextDueParam": {
        "default": "",
        "required": false
    },
    "notes": {
        "default": "",
        "required": false
    },
    "preliminaryNote": {
        "default": "",
        "required": false
    },
    "refNumber": {
        "default": "",
        "required": false
    },
    "reference": {
        "default": "",
        "required": false
    },
    "reportedDate": {
        "default": "",
        "required": false
    },
    "reportedHours": {
        "default": "",
        "required": false
    },
    "reportedLandings": {
        "default": 0,
        "required": false
    },
    "resolvedDate": {
        "default": "",
        "required": false
    },
    "resolvedHours": {
        "default": "",
        "required": false
    },
    "resolvedLandings": {
        "default": "",
        "required": false
    },
    "status": {
        "default": "",
        "required": false
    },
    "type": {
        "default": "",
        "required": false
    },
    "updatedAt": {
        "default": "",
        "required": false
    }
};

const AmimsVDueListOutputReportFormSchema = {
    "aircraft": {
        "default": "",
        "required": true
    },
    "atInstallCy": {
        "default": "",
        "required": false
    },
    "atInstallDy": {
        "default": "",
        "required": false
    },
    "atInstallHr": {
        "default": "",
        "required": false
    },
    "ata": {
        "default": "",
        "required": false
    },
    "code": {
        "default": "",
        "required": false
    },
    "createdAt": {
        "default": "",
        "required": false
    },
    "dueAtCy": {
        "default": "",
        "required": false
    },
    "dueAtDy": {
        "default": "",
        "required": false
    },
    "dueAtHr": {
        "default": "",
        "required": false
    },
    "idAircraft": {
        "required": false
    },
    "idDueListOutput": {
        "required": true
    },
    "idMpart": {
        "required": false
    },
    "idPart": {
        "required": false
    },
    "keyword": {
        "default": "",
        "required": false
    },
    "lastPrice": {
        "default": 0,
        "required": false
    },
    "lastPriceCurrency": {
        "default": "",
        "required": false
    },
    "mpart": {
        "default": "",
        "required": true
    },
    "noteDue": {
        "default": "",
        "required": false
    },
    "part": {
        "default": "",
        "required": true
    },
    "partNumber": {
        "default": "",
        "required": false
    },
    "partPrice": {
        "default": 0,
        "required": false
    },
    "peruntukan": {
        "default": "",
        "required": false
    },
    "remainingCy": {
        "default": 0,
        "required": false
    },
    "remainingDy": {
        "default": 0,
        "required": false
    },
    "remainingHr": {
        "default": 0,
        "required": false
    },
    "sn": {
        "default": "",
        "required": false
    },
    "toDueCy": {
        "default": 0,
        "required": false
    },
    "toDueDy": {
        "default": 0,
        "required": false
    },
    "toDueHr": {
        "default": 0,
        "required": false
    },
    "typeDue": {
        "default": "",
        "required": false
    },
    "typeOfwork": {
        "default": "",
        "required": false
    },
    "variabel": {
        "default": "",
        "required": false
    }
};

const AmimsVDueListOutputWidgetFormSchema = {
    "atInstallCy": {
        "default": "",
        "required": false
    },
    "atInstallDy": {
        "default": "",
        "required": false
    },
    "atInstallHr": {
        "default": "",
        "required": false
    },
    "ata": {
        "default": "",
        "required": false
    },
    "code": {
        "default": "",
        "required": false
    },
    "createdAt": {
        "default": "",
        "required": false
    },
    "dueAtCy": {
        "default": "",
        "required": false
    },
    "dueAtDy": {
        "default": "",
        "required": false
    },
    "dueAtHr": {
        "default": "",
        "required": false
    },
    "idAircraft": {
        "required": false
    },
    "idDueListOutput": {
        "required": true
    },
    "idMpart": {
        "required": false
    },
    "idPart": {
        "required": false
    },
    "keyword": {
        "default": "",
        "required": false
    },
    "lastPrice": {
        "default": 0,
        "required": false
    },
    "lastPriceCurrency": {
        "default": "",
        "required": false
    },
    "noteDue": {
        "default": "",
        "required": false
    },
    "partNumber": {
        "default": "",
        "required": false
    },
    "partPrice": {
        "default": 0,
        "required": false
    },
    "peruntukan": {
        "default": "",
        "required": false
    },
    "remainingCy": {
        "default": 0,
        "required": false
    },
    "remainingDy": {
        "default": 0,
        "required": false
    },
    "remainingHr": {
        "default": 0,
        "required": false
    },
    "sn": {
        "default": "",
        "required": false
    },
    "toDueCy": {
        "default": 0,
        "required": false
    },
    "toDueDy": {
        "default": 0,
        "required": false
    },
    "toDueHr": {
        "default": 0,
        "required": false
    },
    "total": {
        "default": 0,
        "required": false
    },
    "typeDue": {
        "default": "",
        "required": false
    },
    "typeOfwork": {
        "default": "",
        "required": false
    },
    "variabel": {
        "default": "",
        "required": false
    }
};

const AmimsVDueListOutputFormSchema = {
    "atInstallCy": {
        "default": "",
        "required": false
    },
    "atInstallDy": {
        "default": "",
        "required": false
    },
    "atInstallHr": {
        "default": "",
        "required": false
    },
    "ata": {
        "default": "",
        "required": false
    },
    "code": {
        "default": "",
        "required": false
    },
    "createdAt": {
        "default": "",
        "required": false
    },
    "dueAtCy": {
        "default": "",
        "required": false
    },
    "dueAtDy": {
        "default": "",
        "required": false
    },
    "dueAtHr": {
        "default": "",
        "required": false
    },
    "idAircraft": {
        "required": false
    },
    "idDueListOutput": {
        "required": true
    },
    "idMpart": {
        "required": false
    },
    "idPart": {
        "required": false
    },
    "keyword": {
        "default": "",
        "required": false
    },
    "lastPrice": {
        "default": 0,
        "required": false
    },
    "lastPriceCurrency": {
        "default": "",
        "required": false
    },
    "noteDue": {
        "default": "",
        "required": false
    },
    "partNumber": {
        "default": "",
        "required": false
    },
    "partPrice": {
        "default": 0,
        "required": false
    },
    "peruntukan": {
        "default": "",
        "required": false
    },
    "remainingCy": {
        "default": 0,
        "required": false
    },
    "remainingDy": {
        "default": 0,
        "required": false
    },
    "remainingHr": {
        "default": 0,
        "required": false
    },
    "sn": {
        "default": "",
        "required": false
    },
    "toDueCy": {
        "default": 0,
        "required": false
    },
    "toDueDy": {
        "default": 0,
        "required": false
    },
    "toDueHr": {
        "default": 0,
        "required": false
    },
    "typeDue": {
        "default": "",
        "required": false
    },
    "typeOfwork": {
        "default": "",
        "required": false
    },
    "variabel": {
        "default": "",
        "required": false
    }
};

const AmimsWarrantyFormSchema = {
    "createdAt": {
        "default": "",
        "required": false
    },
    "cycle": {
        "default": 0,
        "required": false
    },
    "days": {
        "default": 0,
        "required": false
    },
    "effectiveDate": {
        "default": "",
        "required": false
    },
    "expairedDate": {
        "default": "",
        "required": false
    },
    "hours": {
        "default": 0,
        "required": false
    },
    "idPart": {
        "required": false
    },
    "idVendor": {
        "required": false
    },
    "idWarranty": {
        "required": true
    },
    "note": {
        "default": "",
        "required": false
    },
    "type": {
        "default": "",
        "required": false
    },
    "updatedAt": {
        "default": "",
        "required": false
    }
};

const AuthResponseFormSchema = {
    "access_token": {
        "default": "",
        "required": true
    },
    "refresh_token": {
        "default": "",
        "required": true
    },
    "user": {
        "default": "",
        "required": true
    }
};

const BaseWidgetQueryFormSchema = {
    "filter": {
        "default": "",
        "required": false
    },
    "groupBy": {
        "default": "",
        "required": false
    },
    "joinWhere": {
        "default": "",
        "required": false
    },
    "select": {
        "default": "",
        "required": false
    },
    "sortKey": {
        "default": "",
        "required": false
    },
    "sortValue": {
        "default": "",
        "required": false
    }
};

const CurrentUserResponseFormSchema = {
    "pegawai": {
        "default": "",
        "required": true
    },
    "role": {
        "default": "",
        "required": true
    },
    "user": {
        "default": "",
        "required": true
    }
};

const DocumentDocumentFormSchema = {
    "createdAt": {
        "default": "",
        "required": false
    },
    "enableDownload": {
        "default": "",
        "required": false
    },
    "fileExt": {
        "default": "",
        "required": false
    },
    "fileLocation": {
        "default": "",
        "required": false
    },
    "fileName": {
        "default": "",
        "required": false
    },
    "forModule": {
        "default": "",
        "required": false
    },
    "forModuleId": {
        "default": "",
        "required": false
    },
    "forTable": {
        "default": "",
        "required": false
    },
    "idDocument": {
        "required": true
    },
    "idUsers": {
        "required": false
    },
    "name": {
        "default": "",
        "required": false
    },
    "nomor": {
        "default": "",
        "required": false
    },
    "revisi": {
        "default": "",
        "required": false
    },
    "tanggal": {
        "default": "",
        "required": false
    },
    "updatedAt": {
        "default": "",
        "required": false
    }
};

const LoginFormSchema = {
    "email": {
        "default": "",
        "required": true
    },
    "password": {
        "default": "",
        "required": true
    }
};

const PelangganClientContactFormSchema = {
    "catatan": {
        "default": "",
        "required": false
    },
    "createdAt": {
        "default": "",
        "required": false
    },
    "divisi": {
        "default": "",
        "required": false
    },
    "email": {
        "default": "",
        "required": false
    },
    "idClient": {
        "required": true
    },
    "idClientContact": {
        "required": true
    },
    "isPrimary": {
        "default": false,
        "required": false
    },
    "jabatan": {
        "default": "",
        "required": false
    },
    "jenisContact": {
        "default": "",
        "required": false
    },
    "namaContact": {
        "default": "",
        "required": false
    },
    "telepon": {
        "default": "",
        "required": false
    },
    "updatedAt": {
        "default": "",
        "required": false
    }
};

const PelangganClientReportFormSchema = {
    "alamat": {
        "default": "",
        "required": false
    },
    "catatan": {
        "default": "",
        "required": false
    },
    "createdAt": {
        "default": "",
        "required": false
    },
    "emailPerusahaan": {
        "default": "",
        "required": false
    },
    "idClient": {
        "required": true
    },
    "isAktif": {
        "default": false,
        "required": false
    },
    "jenisClient": {
        "default": "",
        "required": false
    },
    "kodeClient": {
        "default": "",
        "required": false
    },
    "kodePos": {
        "default": "",
        "required": false
    },
    "kota": {
        "default": "",
        "required": false
    },
    "logoUrl": {
        "default": "",
        "required": false
    },
    "namaFamiliar": {
        "default": "",
        "required": false
    },
    "namaResmi": {
        "default": "",
        "required": true
    },
    "npwp": {
        "default": "",
        "required": false
    },
    "primaryPic": {
        "default": "",
        "required": false
    },
    "provinsi": {
        "default": "",
        "required": false
    },
    "telepon": {
        "default": "",
        "required": false
    },
    "updatedAt": {
        "default": "",
        "required": false
    },
    "website": {
        "default": "",
        "required": false
    }
};

const PelangganClientSiteFormSchema = {
    "alamat": {
        "default": "",
        "required": false
    },
    "catatan": {
        "default": "",
        "required": false
    },
    "createdAt": {
        "default": "",
        "required": false
    },
    "idClient": {
        "required": true
    },
    "idClientSite": {
        "required": true
    },
    "idKantor": {
        "required": false
    },
    "isAktif": {
        "default": false,
        "required": false
    },
    "kategoriSite": {
        "default": "",
        "required": false
    },
    "kodePos": {
        "default": "",
        "required": false
    },
    "kota": {
        "default": "",
        "required": false
    },
    "latitude": {
        "default": 0,
        "required": false
    },
    "longitude": {
        "default": 0,
        "required": false
    },
    "namaSite": {
        "default": "",
        "required": false
    },
    "provinsi": {
        "default": "",
        "required": false
    },
    "tagSite": {
        "default": "",
        "required": false
    },
    "updatedAt": {
        "default": "",
        "required": false
    }
};

const PelangganClientWidgetFormSchema = {
    "alamat": {
        "default": "",
        "required": false
    },
    "catatan": {
        "default": "",
        "required": false
    },
    "createdAt": {
        "default": "",
        "required": false
    },
    "emailPerusahaan": {
        "default": "",
        "required": false
    },
    "idClient": {
        "required": true
    },
    "isAktif": {
        "default": false,
        "required": false
    },
    "jenisClient": {
        "default": "",
        "required": false
    },
    "kodeClient": {
        "default": "",
        "required": false
    },
    "kodePos": {
        "default": "",
        "required": false
    },
    "kota": {
        "default": "",
        "required": false
    },
    "logoUrl": {
        "default": "",
        "required": false
    },
    "namaFamiliar": {
        "default": "",
        "required": false
    },
    "namaResmi": {
        "default": "",
        "required": true
    },
    "npwp": {
        "default": "",
        "required": false
    },
    "primaryPic": {
        "default": "",
        "required": false
    },
    "provinsi": {
        "default": "",
        "required": false
    },
    "telepon": {
        "default": "",
        "required": false
    },
    "total": {
        "default": 0,
        "required": false
    },
    "updatedAt": {
        "default": "",
        "required": false
    },
    "website": {
        "default": "",
        "required": false
    }
};

const PelangganClientFormSchema = {
    "alamat": {
        "default": "",
        "required": false
    },
    "catatan": {
        "default": "",
        "required": false
    },
    "createdAt": {
        "default": "",
        "required": false
    },
    "emailPerusahaan": {
        "default": "",
        "required": false
    },
    "idClient": {
        "required": true
    },
    "isAktif": {
        "default": false,
        "required": false
    },
    "jenisClient": {
        "default": "",
        "required": false
    },
    "kodeClient": {
        "default": "",
        "required": false
    },
    "kodePos": {
        "default": "",
        "required": false
    },
    "kota": {
        "default": "",
        "required": false
    },
    "logoUrl": {
        "default": "",
        "required": false
    },
    "namaFamiliar": {
        "default": "",
        "required": false
    },
    "namaResmi": {
        "default": "",
        "required": true
    },
    "npwp": {
        "default": "",
        "required": false
    },
    "primaryPic": {
        "default": "",
        "required": false
    },
    "provinsi": {
        "default": "",
        "required": false
    },
    "telepon": {
        "default": "",
        "required": false
    },
    "updatedAt": {
        "default": "",
        "required": false
    },
    "website": {
        "default": "",
        "required": false
    }
};

const PelangganContractJenisFormSchema = {
    "createdAt": {
        "default": "",
        "required": false
    },
    "idContractJenis": {
        "required": true
    },
    "keterangan": {
        "default": "",
        "required": false
    },
    "namaContractJenis": {
        "default": "",
        "required": true
    },
    "role": {
        "default": "",
        "required": false
    },
    "statusContractJenis": {
        "default": "",
        "required": false
    },
    "updatedAt": {
        "default": "",
        "required": false
    }
};

const PelangganContractReportFormSchema = {
    "catatanKontrak": {
        "default": "",
        "required": false
    },
    "client": {
        "default": "",
        "required": true
    },
    "createdAt": {
        "default": "",
        "required": false
    },
    "dokumenUrl": {
        "default": "",
        "required": false
    },
    "durasiBulan": {
        "default": 0,
        "required": false
    },
    "feeSales": {
        "default": 0,
        "required": false
    },
    "idClient": {
        "required": true
    },
    "idContract": {
        "required": true
    },
    "idContractJenis": {
        "required": false
    },
    "idDocument": {
        "required": false
    },
    "idKantor": {
        "required": false
    },
    "isAutoInvoice": {
        "default": false,
        "required": false
    },
    "kantor": {
        "default": "",
        "required": true
    },
    "namaSales": {
        "default": "",
        "required": false
    },
    "nilaiAkhir": {
        "default": 0,
        "required": false
    },
    "nilaiBulanan": {
        "default": 0,
        "required": false
    },
    "nilaiDiawal": {
        "default": 0,
        "required": false
    },
    "nilaiKontrak": {
        "default": 0,
        "required": false
    },
    "nomorKontrak": {
        "default": "",
        "required": false
    },
    "presentaseFee": {
        "default": 0,
        "required": false
    },
    "refKontrakSebelumnya": {
        "default": "",
        "required": false
    },
    "statusContract": {
        "default": "",
        "required": false
    },
    "tanggalAkhir": {
        "default": "",
        "required": false
    },
    "tanggalKontrak": {
        "default": "",
        "required": false
    },
    "tanggalMulai": {
        "default": "",
        "required": false
    },
    "updatedAt": {
        "default": "",
        "required": false
    }
};

const PelangganContractSiteReportFormSchema = {
    "biayaAkhir": {
        "default": 0,
        "required": false
    },
    "biayaBulanan": {
        "default": 0,
        "required": false
    },
    "biayaDiawal": {
        "default": 0,
        "required": false
    },
    "catatan": {
        "default": "",
        "required": false
    },
    "contract": {
        "default": "",
        "required": true
    },
    "createdAt": {
        "default": "",
        "required": false
    },
    "idClientSite": {
        "required": true
    },
    "idContract": {
        "required": true
    },
    "idContractSite": {
        "required": true
    },
    "jumlahJadwalPerBulan": {
        "default": 0,
        "required": false
    },
    "statusContractSite": {
        "default": "",
        "required": false
    },
    "updatedAt": {
        "default": "",
        "required": false
    }
};

const PelangganContractSiteWidgetFormSchema = {
    "biayaAkhir": {
        "default": 0,
        "required": false
    },
    "biayaBulanan": {
        "default": 0,
        "required": false
    },
    "biayaDiawal": {
        "default": 0,
        "required": false
    },
    "catatan": {
        "default": "",
        "required": false
    },
    "createdAt": {
        "default": "",
        "required": false
    },
    "idClientSite": {
        "required": true
    },
    "idContract": {
        "required": true
    },
    "idContractSite": {
        "required": true
    },
    "jumlahJadwalPerBulan": {
        "default": 0,
        "required": false
    },
    "statusContractSite": {
        "default": "",
        "required": false
    },
    "total": {
        "default": 0,
        "required": false
    },
    "updatedAt": {
        "default": "",
        "required": false
    }
};

const PelangganContractSiteFormSchema = {
    "biayaAkhir": {
        "default": 0,
        "required": false
    },
    "biayaBulanan": {
        "default": 0,
        "required": false
    },
    "biayaDiawal": {
        "default": 0,
        "required": false
    },
    "catatan": {
        "default": "",
        "required": false
    },
    "createdAt": {
        "default": "",
        "required": false
    },
    "idClientSite": {
        "required": true
    },
    "idContract": {
        "required": true
    },
    "idContractSite": {
        "required": true
    },
    "jumlahJadwalPerBulan": {
        "default": 0,
        "required": false
    },
    "statusContractSite": {
        "default": "",
        "required": false
    },
    "updatedAt": {
        "default": "",
        "required": false
    }
};

const PelangganContractWidgetFormSchema = {
    "catatanKontrak": {
        "default": "",
        "required": false
    },
    "createdAt": {
        "default": "",
        "required": false
    },
    "dokumenUrl": {
        "default": "",
        "required": false
    },
    "durasiBulan": {
        "default": 0,
        "required": false
    },
    "feeSales": {
        "default": 0,
        "required": false
    },
    "idClient": {
        "required": true
    },
    "idContract": {
        "required": true
    },
    "idContractJenis": {
        "required": false
    },
    "idDocument": {
        "required": false
    },
    "idKantor": {
        "required": false
    },
    "isAutoInvoice": {
        "default": false,
        "required": false
    },
    "namaSales": {
        "default": "",
        "required": false
    },
    "nilaiAkhir": {
        "default": 0,
        "required": false
    },
    "nilaiBulanan": {
        "default": 0,
        "required": false
    },
    "nilaiDiawal": {
        "default": 0,
        "required": false
    },
    "nilaiKontrak": {
        "default": 0,
        "required": false
    },
    "nomorKontrak": {
        "default": "",
        "required": false
    },
    "presentaseFee": {
        "default": 0,
        "required": false
    },
    "refKontrakSebelumnya": {
        "default": "",
        "required": false
    },
    "statusContract": {
        "default": "",
        "required": false
    },
    "tanggalAkhir": {
        "default": "",
        "required": false
    },
    "tanggalKontrak": {
        "default": "",
        "required": false
    },
    "tanggalMulai": {
        "default": "",
        "required": false
    },
    "total": {
        "default": 0,
        "required": false
    },
    "updatedAt": {
        "default": "",
        "required": false
    }
};

const PelangganContractFormSchema = {
    "catatanKontrak": {
        "default": "",
        "required": false
    },
    "createdAt": {
        "default": "",
        "required": false
    },
    "dokumenUrl": {
        "default": "",
        "required": false
    },
    "durasiBulan": {
        "default": 0,
        "required": false
    },
    "feeSales": {
        "default": 0,
        "required": false
    },
    "idClient": {
        "required": true
    },
    "idContract": {
        "required": true
    },
    "idContractJenis": {
        "required": false
    },
    "idDocument": {
        "required": false
    },
    "idKantor": {
        "required": false
    },
    "isAutoInvoice": {
        "default": false,
        "required": false
    },
    "namaSales": {
        "default": "",
        "required": false
    },
    "nilaiAkhir": {
        "default": 0,
        "required": false
    },
    "nilaiBulanan": {
        "default": 0,
        "required": false
    },
    "nilaiDiawal": {
        "default": 0,
        "required": false
    },
    "nilaiKontrak": {
        "default": 0,
        "required": false
    },
    "nomorKontrak": {
        "default": "",
        "required": false
    },
    "presentaseFee": {
        "default": 0,
        "required": false
    },
    "refKontrakSebelumnya": {
        "default": "",
        "required": false
    },
    "statusContract": {
        "default": "",
        "required": false
    },
    "tanggalAkhir": {
        "default": "",
        "required": false
    },
    "tanggalKontrak": {
        "default": "",
        "required": false
    },
    "tanggalMulai": {
        "default": "",
        "required": false
    },
    "updatedAt": {
        "default": "",
        "required": false
    }
};

const PelangganInvoiceReportFormSchema = {
    "alamatPenagihan": {
        "default": "",
        "required": false
    },
    "catatan": {
        "default": "",
        "required": false
    },
    "contract": {
        "default": "",
        "required": true
    },
    "createdAt": {
        "default": "",
        "required": false
    },
    "createdBy": {
        "default": "",
        "required": false
    },
    "dpp": {
        "default": 0,
        "required": false
    },
    "idContract": {
        "required": false
    },
    "idInvoice": {
        "required": true
    },
    "jenisInvoice": {
        "default": "",
        "required": false
    },
    "metodePembayaran": {
        "default": "",
        "required": false
    },
    "nilaiInvoice": {
        "default": 0,
        "required": false
    },
    "nomorInvoice": {
        "default": "",
        "required": false
    },
    "npwp": {
        "default": "",
        "required": false
    },
    "periode": {
        "default": "",
        "required": false
    },
    "picPenagihan": {
        "default": "",
        "required": false
    },
    "ppn": {
        "default": 0,
        "required": false
    },
    "statusInvoice": {
        "default": "",
        "required": false
    },
    "tanggalDibayar": {
        "default": "",
        "required": false
    },
    "tanggalJatuhTempo": {
        "default": "",
        "required": false
    },
    "tanggalTerbit": {
        "default": "",
        "required": false
    },
    "updatedAt": {
        "default": "",
        "required": false
    },
    "updatedBy": {
        "default": "",
        "required": false
    }
};

const PelangganInvoiceWidgetFormSchema = {
    "alamatPenagihan": {
        "default": "",
        "required": false
    },
    "catatan": {
        "default": "",
        "required": false
    },
    "createdAt": {
        "default": "",
        "required": false
    },
    "createdBy": {
        "default": "",
        "required": false
    },
    "dpp": {
        "default": 0,
        "required": false
    },
    "idContract": {
        "required": false
    },
    "idInvoice": {
        "required": true
    },
    "jenisInvoice": {
        "default": "",
        "required": false
    },
    "metodePembayaran": {
        "default": "",
        "required": false
    },
    "nilaiInvoice": {
        "default": 0,
        "required": false
    },
    "nomorInvoice": {
        "default": "",
        "required": false
    },
    "npwp": {
        "default": "",
        "required": false
    },
    "periode": {
        "default": "",
        "required": false
    },
    "picPenagihan": {
        "default": "",
        "required": false
    },
    "ppn": {
        "default": 0,
        "required": false
    },
    "statusInvoice": {
        "default": "",
        "required": false
    },
    "tanggalDibayar": {
        "default": "",
        "required": false
    },
    "tanggalJatuhTempo": {
        "default": "",
        "required": false
    },
    "tanggalTerbit": {
        "default": "",
        "required": false
    },
    "total": {
        "default": 0,
        "required": false
    },
    "updatedAt": {
        "default": "",
        "required": false
    },
    "updatedBy": {
        "default": "",
        "required": false
    }
};

const PelangganInvoiceFormSchema = {
    "alamatPenagihan": {
        "default": "",
        "required": false
    },
    "catatan": {
        "default": "",
        "required": false
    },
    "createdAt": {
        "default": "",
        "required": false
    },
    "createdBy": {
        "default": "",
        "required": false
    },
    "dpp": {
        "default": 0,
        "required": false
    },
    "idContract": {
        "required": false
    },
    "idInvoice": {
        "required": true
    },
    "jenisInvoice": {
        "default": "",
        "required": false
    },
    "metodePembayaran": {
        "default": "",
        "required": false
    },
    "nilaiInvoice": {
        "default": 0,
        "required": false
    },
    "nomorInvoice": {
        "default": "",
        "required": false
    },
    "npwp": {
        "default": "",
        "required": false
    },
    "periode": {
        "default": "",
        "required": false
    },
    "picPenagihan": {
        "default": "",
        "required": false
    },
    "ppn": {
        "default": 0,
        "required": false
    },
    "statusInvoice": {
        "default": "",
        "required": false
    },
    "tanggalDibayar": {
        "default": "",
        "required": false
    },
    "tanggalJatuhTempo": {
        "default": "",
        "required": false
    },
    "tanggalTerbit": {
        "default": "",
        "required": false
    },
    "updatedAt": {
        "default": "",
        "required": false
    },
    "updatedBy": {
        "default": "",
        "required": false
    }
};

const PelangganKantorFormSchema = {
    "alamat": {
        "default": "",
        "required": false
    },
    "catatan": {
        "default": "",
        "required": false
    },
    "createdAt": {
        "default": "",
        "required": false
    },
    "idKantor": {
        "required": true
    },
    "isAktif": {
        "default": false,
        "required": false
    },
    "isPusat": {
        "default": false,
        "required": false
    },
    "kodeKantor": {
        "default": "",
        "required": false
    },
    "kota": {
        "default": "",
        "required": false
    },
    "namaKantor": {
        "default": "",
        "required": true
    },
    "provinsi": {
        "default": "",
        "required": false
    },
    "updatedAt": {
        "default": "",
        "required": false
    }
};

const RefreshTokenFormSchema = {};

const ResetPasswordFormSchema = {};

const SelectFieldFormSchema = {
    "alias": {
        "default": "",
        "required": false
    },
    "field": {
        "default": "",
        "required": false
    },
    "type": {
        "default": "",
        "required": false
    }
};

const SimpleMessageFormSchema = {
    "message": {
        "default": "",
        "required": true
    }
};

const TokenOnlyResponseFormSchema = {
    "access_token": {
        "default": "",
        "required": true
    },
    "refresh_token": {
        "default": "",
        "required": true
    }
};

const ToolsCustomFieldGroupReportFormSchema = {
    "createdAt": {
        "default": "",
        "required": false
    },
    "deskripsi": {
        "default": "",
        "required": false
    },
    "forKantor": {
        "default": "",
        "required": false
    },
    "forRole": {
        "default": "",
        "required": false
    },
    "idCustomFieldGroup": {
        "required": true
    },
    "isRepeatable": {
        "default": false,
        "required": false
    },
    "modul": {
        "default": "",
        "required": false
    },
    "namaGroup": {
        "default": "",
        "required": true
    },
    "tableName": {
        "default": "",
        "required": false
    },
    "tipeRender": {
        "default": "",
        "required": false
    },
    "updatedAt": {
        "default": "",
        "required": false
    },
    "urutan": {
        "default": 0,
        "required": false
    },
    "visibilityRule": {
        "default": "",
        "required": false
    }
};

const ToolsCustomFieldGroupWidgetFormSchema = {
    "createdAt": {
        "default": "",
        "required": false
    },
    "deskripsi": {
        "default": "",
        "required": false
    },
    "forKantor": {
        "default": "",
        "required": false
    },
    "forRole": {
        "default": "",
        "required": false
    },
    "idCustomFieldGroup": {
        "required": true
    },
    "isRepeatable": {
        "default": false,
        "required": false
    },
    "modul": {
        "default": "",
        "required": false
    },
    "namaGroup": {
        "default": "",
        "required": true
    },
    "tableName": {
        "default": "",
        "required": false
    },
    "tipeRender": {
        "default": "",
        "required": false
    },
    "total": {
        "default": 0,
        "required": false
    },
    "updatedAt": {
        "default": "",
        "required": false
    },
    "urutan": {
        "default": 0,
        "required": false
    },
    "visibilityRule": {
        "default": "",
        "required": false
    }
};

const ToolsCustomFieldGroupFormSchema = {
    "createdAt": {
        "default": "",
        "required": false
    },
    "deskripsi": {
        "default": "",
        "required": false
    },
    "forKantor": {
        "default": "",
        "required": false
    },
    "forRole": {
        "default": "",
        "required": false
    },
    "idCustomFieldGroup": {
        "required": true
    },
    "isRepeatable": {
        "default": false,
        "required": false
    },
    "modul": {
        "default": "",
        "required": false
    },
    "namaGroup": {
        "default": "",
        "required": true
    },
    "tableName": {
        "default": "",
        "required": false
    },
    "tipeRender": {
        "default": "",
        "required": false
    },
    "updatedAt": {
        "default": "",
        "required": false
    },
    "urutan": {
        "default": 0,
        "required": false
    },
    "visibilityRule": {
        "default": "",
        "required": false
    }
};

const ToolsCustomFieldValueReportFormSchema = {
    "createdAt": {
        "default": "",
        "required": false
    },
    "idCustomField": {
        "required": true
    },
    "idCustomFieldGroup": {
        "required": false
    },
    "idCustomFieldValue": {
        "required": true
    },
    "kodeField": {
        "default": "",
        "required": false
    },
    "labelField": {
        "default": "",
        "required": false
    },
    "modul": {
        "default": "",
        "required": false
    },
    "modulId": {
        "default": "",
        "required": true
    },
    "nilai": {
        "default": "",
        "required": false
    },
    "nilaiJson": {
        "default": "",
        "required": false
    },
    "tableName": {
        "default": "",
        "required": false
    },
    "updatedAt": {
        "default": "",
        "required": false
    }
};

const ToolsCustomFieldValueWidgetFormSchema = {
    "createdAt": {
        "default": "",
        "required": false
    },
    "idCustomField": {
        "required": true
    },
    "idCustomFieldGroup": {
        "required": false
    },
    "idCustomFieldValue": {
        "required": true
    },
    "kodeField": {
        "default": "",
        "required": false
    },
    "labelField": {
        "default": "",
        "required": false
    },
    "modul": {
        "default": "",
        "required": false
    },
    "modulId": {
        "default": "",
        "required": true
    },
    "nilai": {
        "default": "",
        "required": false
    },
    "nilaiJson": {
        "default": "",
        "required": false
    },
    "tableName": {
        "default": "",
        "required": false
    },
    "total": {
        "default": 0,
        "required": false
    },
    "updatedAt": {
        "default": "",
        "required": false
    }
};

const ToolsCustomFieldValueFormSchema = {
    "createdAt": {
        "default": "",
        "required": false
    },
    "idCustomField": {
        "required": true
    },
    "idCustomFieldGroup": {
        "required": false
    },
    "idCustomFieldValue": {
        "required": true
    },
    "kodeField": {
        "default": "",
        "required": false
    },
    "labelField": {
        "default": "",
        "required": false
    },
    "modul": {
        "default": "",
        "required": false
    },
    "modulId": {
        "default": "",
        "required": true
    },
    "nilai": {
        "default": "",
        "required": false
    },
    "nilaiJson": {
        "default": "",
        "required": false
    },
    "tableName": {
        "default": "",
        "required": false
    },
    "updatedAt": {
        "default": "",
        "required": false
    }
};

const ToolsCustomFieldFormSchema = {
    "catatan": {
        "default": "",
        "required": false
    },
    "createdAt": {
        "default": "",
        "required": false
    },
    "defaultValue": {
        "default": "",
        "required": false
    },
    "idCustomField": {
        "required": true
    },
    "idCustomFieldGroup": {
        "required": false
    },
    "isFilterable": {
        "default": false,
        "required": false
    },
    "isRequired": {
        "default": false,
        "required": false
    },
    "kodeField": {
        "default": "",
        "required": true
    },
    "labelField": {
        "default": "",
        "required": true
    },
    "opsiSelect": {
        "default": "",
        "required": false
    },
    "prefixField": {
        "default": "",
        "required": false
    },
    "tipeField": {
        "default": "",
        "required": true
    },
    "updatedAt": {
        "default": "",
        "required": false
    },
    "urutan": {
        "default": 0,
        "required": false
    },
    "validasi": {
        "default": "",
        "required": false
    }
};

const ToolsDocumentNumberingCounterFormSchema = {
    "bulan": {
        "default": 0,
        "required": false
    },
    "createdAt": {
        "default": "",
        "required": false
    },
    "forModule": {
        "default": "",
        "required": false
    },
    "forModuleId": {
        "default": "",
        "required": false
    },
    "idDocumentNumbering": {
        "required": true
    },
    "idDocumentNumberingCounter": {
        "required": true
    },
    "idKantor": {
        "required": false
    },
    "lastNumber": {
        "default": 0,
        "required": false
    },
    "tahun": {
        "default": 0,
        "required": true
    },
    "targetColumn": {
        "default": "",
        "required": false
    },
    "updatedAt": {
        "default": "",
        "required": false
    }
};

const ToolsDocumentNumberingFormSchema = {
    "allowManualEntry": {
        "default": false,
        "required": false
    },
    "allowedRoles": {
        "default": "",
        "required": false
    },
    "createdAt": {
        "default": "",
        "required": false
    },
    "digitNomor": {
        "default": 0,
        "required": false
    },
    "forModule": {
        "default": "",
        "required": true
    },
    "formatNomor": {
        "default": "",
        "required": true
    },
    "idDocumentNumbering": {
        "required": true
    },
    "isActive": {
        "default": false,
        "required": false
    },
    "label": {
        "default": "",
        "required": false
    },
    "resetPeriode": {
        "default": "",
        "required": false
    },
    "targetColumn": {
        "default": "",
        "required": true
    },
    "targetTable": {
        "default": "",
        "required": true
    },
    "triggerStage": {
        "default": "",
        "required": false
    },
    "updatedAt": {
        "default": "",
        "required": false
    }
};

const ToolsWorkflowAggregatorFormSchema = {
    "createdAt": {
        "default": "",
        "required": false
    },
    "fromModule": {
        "default": "",
        "required": true
    },
    "fromModuleId": {
        "default": "",
        "required": true
    },
    "idWorkflow": {
        "required": true
    },
    "idWorkflowAggregator": {
        "required": true
    },
    "lastApprovalDate": {
        "default": "",
        "required": false
    },
    "lastApprovalNote": {
        "default": "",
        "required": false
    },
    "lastApprovalStatus": {
        "default": "",
        "required": false
    },
    "lastApprovalUser": {
        "default": "",
        "required": false
    },
    "lastWorkflowStep": {
        "default": "",
        "required": false
    },
    "updatedAt": {
        "default": "",
        "required": false
    }
};

const ToolsWorkflowLogReportFormSchema = {
    "approvedAt": {
        "default": "",
        "required": false
    },
    "approvedBy": {
        "default": "",
        "required": false
    },
    "catatan": {
        "default": "",
        "required": false
    },
    "forModule": {
        "default": "",
        "required": true
    },
    "fromModuleId": {
        "default": "",
        "required": true
    },
    "idUsers": {
        "required": true
    },
    "idWorkflow": {
        "required": false
    },
    "idWorkflowLog": {
        "required": true
    },
    "idWorkflowStep": {
        "required": true
    },
    "namaUser": {
        "default": "",
        "required": false
    },
    "statusAfter": {
        "default": "",
        "required": false
    },
    "statusBefore": {
        "default": "",
        "required": false
    },
    "workflow": {
        "default": "",
        "required": true
    }
};

const ToolsWorkflowLogWidgetFormSchema = {
    "approvedAt": {
        "default": "",
        "required": false
    },
    "approvedBy": {
        "default": "",
        "required": false
    },
    "catatan": {
        "default": "",
        "required": false
    },
    "forModule": {
        "default": "",
        "required": true
    },
    "fromModuleId": {
        "default": "",
        "required": true
    },
    "idUsers": {
        "required": true
    },
    "idWorkflow": {
        "required": false
    },
    "idWorkflowLog": {
        "required": true
    },
    "idWorkflowStep": {
        "required": true
    },
    "namaUser": {
        "default": "",
        "required": false
    },
    "statusAfter": {
        "default": "",
        "required": false
    },
    "statusBefore": {
        "default": "",
        "required": false
    },
    "total": {
        "default": 0,
        "required": false
    }
};

const ToolsWorkflowLogFormSchema = {
    "approvedAt": {
        "default": "",
        "required": false
    },
    "approvedBy": {
        "default": "",
        "required": false
    },
    "catatan": {
        "default": "",
        "required": false
    },
    "forModule": {
        "default": "",
        "required": true
    },
    "fromModuleId": {
        "default": "",
        "required": true
    },
    "idUsers": {
        "required": true
    },
    "idWorkflow": {
        "required": false
    },
    "idWorkflowLog": {
        "required": true
    },
    "idWorkflowStep": {
        "required": true
    },
    "namaUser": {
        "default": "",
        "required": false
    },
    "statusAfter": {
        "default": "",
        "required": false
    },
    "statusBefore": {
        "default": "",
        "required": false
    }
};

const ToolsWorkflowReportFormSchema = {
    "createdAt": {
        "default": "",
        "required": false
    },
    "forModule": {
        "default": "",
        "required": true
    },
    "idKantor": {
        "required": false
    },
    "idWorkflow": {
        "required": true
    },
    "isDefault": {
        "default": false,
        "required": false
    },
    "keterangan": {
        "default": "",
        "required": false
    },
    "namaWorkflow": {
        "default": "",
        "required": true
    },
    "statusField": {
        "default": "",
        "required": false
    },
    "statusWorkflow": {
        "default": "",
        "required": false
    },
    "targetDb": {
        "default": "",
        "required": true
    },
    "targetTable": {
        "default": "",
        "required": true
    },
    "updatedAt": {
        "default": "",
        "required": false
    }
};

const ToolsWorkflowStepReportFormSchema = {
    "allowRoles": {
        "default": "",
        "required": false
    },
    "allowUserIds": {
        "default": "",
        "required": false
    },
    "createdAt": {
        "default": "",
        "required": false
    },
    "customCheckSql": {
        "default": "",
        "required": false
    },
    "idWorkflow": {
        "required": true
    },
    "idWorkflowStep": {
        "required": true
    },
    "messageBefore": {
        "default": "",
        "required": false
    },
    "ruleJson": {
        "default": "",
        "required": false
    },
    "statusFrom": {
        "default": "",
        "required": true
    },
    "statusRejectTo": {
        "default": 0,
        "required": false
    },
    "statusTo": {
        "default": "",
        "required": true
    },
    "triggerJson": {
        "default": "",
        "required": false
    },
    "updatedAt": {
        "default": "",
        "required": false
    },
    "urutan": {
        "default": 0,
        "required": true
    },
    "workflow": {
        "default": "",
        "required": true
    }
};

const ToolsWorkflowStepWidgetFormSchema = {
    "allowRoles": {
        "default": "",
        "required": false
    },
    "allowUserIds": {
        "default": "",
        "required": false
    },
    "createdAt": {
        "default": "",
        "required": false
    },
    "customCheckSql": {
        "default": "",
        "required": false
    },
    "idWorkflow": {
        "required": true
    },
    "idWorkflowStep": {
        "required": true
    },
    "messageBefore": {
        "default": "",
        "required": false
    },
    "ruleJson": {
        "default": "",
        "required": false
    },
    "statusFrom": {
        "default": "",
        "required": true
    },
    "statusRejectTo": {
        "default": 0,
        "required": false
    },
    "statusTo": {
        "default": "",
        "required": true
    },
    "total": {
        "default": 0,
        "required": false
    },
    "triggerJson": {
        "default": "",
        "required": false
    },
    "updatedAt": {
        "default": "",
        "required": false
    },
    "urutan": {
        "default": 0,
        "required": true
    }
};

const ToolsWorkflowStepFormSchema = {
    "allowRoles": {
        "default": "",
        "required": false
    },
    "allowUserIds": {
        "default": "",
        "required": false
    },
    "createdAt": {
        "default": "",
        "required": false
    },
    "customCheckSql": {
        "default": "",
        "required": false
    },
    "idWorkflow": {
        "required": true
    },
    "idWorkflowStep": {
        "required": true
    },
    "messageBefore": {
        "default": "",
        "required": false
    },
    "ruleJson": {
        "default": "",
        "required": false
    },
    "statusFrom": {
        "default": "",
        "required": true
    },
    "statusRejectTo": {
        "default": 0,
        "required": false
    },
    "statusTo": {
        "default": "",
        "required": true
    },
    "triggerJson": {
        "default": "",
        "required": false
    },
    "updatedAt": {
        "default": "",
        "required": false
    },
    "urutan": {
        "default": 0,
        "required": true
    }
};

const ToolsWorkflowWidgetFormSchema = {
    "createdAt": {
        "default": "",
        "required": false
    },
    "forModule": {
        "default": "",
        "required": true
    },
    "idKantor": {
        "required": false
    },
    "idWorkflow": {
        "required": true
    },
    "isDefault": {
        "default": false,
        "required": false
    },
    "keterangan": {
        "default": "",
        "required": false
    },
    "namaWorkflow": {
        "default": "",
        "required": true
    },
    "statusField": {
        "default": "",
        "required": false
    },
    "statusWorkflow": {
        "default": "",
        "required": false
    },
    "targetDb": {
        "default": "",
        "required": true
    },
    "targetTable": {
        "default": "",
        "required": true
    },
    "total": {
        "default": 0,
        "required": false
    },
    "updatedAt": {
        "default": "",
        "required": false
    }
};

const ToolsWorkflowFormSchema = {
    "createdAt": {
        "default": "",
        "required": false
    },
    "forModule": {
        "default": "",
        "required": true
    },
    "idKantor": {
        "required": false
    },
    "idWorkflow": {
        "required": true
    },
    "isDefault": {
        "default": false,
        "required": false
    },
    "keterangan": {
        "default": "",
        "required": false
    },
    "namaWorkflow": {
        "default": "",
        "required": true
    },
    "statusField": {
        "default": "",
        "required": false
    },
    "statusWorkflow": {
        "default": "",
        "required": false
    },
    "targetDb": {
        "default": "",
        "required": true
    },
    "targetTable": {
        "default": "",
        "required": true
    },
    "updatedAt": {
        "default": "",
        "required": false
    }
};

const WorkflowApplyFormSchema = {
    "catatan": {
        "default": "",
        "required": true
    },
    "from_module": {
        "default": "",
        "required": true
    },
    "from_module_id": {
        "default": "",
        "required": true
    },
    "status": {
        "default": "",
        "required": true
    },
    "user_id": {
        "default": "",
        "required": true
    }
};

const AclModuleDtoFields = {
    "createdAt": "string",
    "deskripsi": "string",
    "idModule": "string",
    "isAktif": "boolean",
    "kodeModule": "string",
    "namaDb": "string",
    "namaModule": "string",
    "namaTabel": "string",
    "updatedAt": "string",
    "urutan": "number"
};

const AclUserGroupDtoFields = {
    "createdAt": "string",
    "deskripsi": "string",
    "idUserGroup": "string",
    "namaUserGroup": "string",
    "status": "string"
};

const AclUserTokensDtoFields = {
    "createdAt": "string",
    "id": "string",
    "idUser": "string",
    "ipAddress": "string",
    "refreshToken": "string",
    "userAgent": "string"
};

const AclUsersDtoFields = {
    "createdAt": "string",
    "email": "string",
    "idUserGroup": "string",
    "idUsers": "string",
    "lastLogin": "string",
    "nama": "string",
    "password": "string",
    "status": "string",
    "wajibResetPassword": "boolean"
};

const AclUsersReportDtoFields = {
    "createdAt": "string",
    "email": "string",
    "idUserGroup": "string",
    "idUsers": "string",
    "lastLogin": "string",
    "nama": "string",
    "password": "string",
    "status": "string",
    "wajibResetPassword": "boolean"
};

const AclUsersWidgetDtoFields = {
    "createdAt": "string",
    "email": "string",
    "idUserGroup": "string",
    "idUsers": "string",
    "lastLogin": "string",
    "nama": "string",
    "password": "string",
    "status": "string",
    "total": "number",
    "wajibResetPassword": "boolean"
};

const AmimsActypeDtoFields = {
    "acCategory": "string",
    "acManufacture": "string",
    "actype": "string",
    "createdAt": "string",
    "description": "string",
    "eFlight": "string",
    "eStarts": "string",
    "engineManufacture": "string",
    "engineType": "string",
    "hashN1": "string",
    "hashN2": "string",
    "idActype": "string",
    "isDeleted": "number",
    "numberEngine": "number",
    "oldId": "string",
    "statusType": "string",
    "updatedAt": "string",
    "wingtype": "string"
};

const AmimsActypeReportDtoFields = {
    "acCategory": "string",
    "acManufacture": "string",
    "actype": "string",
    "createdAt": "string",
    "description": "string",
    "eFlight": "string",
    "eStarts": "string",
    "engineManufacture": "string",
    "engineType": "string",
    "hashN1": "string",
    "hashN2": "string",
    "idActype": "string",
    "isDeleted": "number",
    "numberEngine": "number",
    "oldId": "string",
    "statusType": "string",
    "updatedAt": "string",
    "wingtype": "string"
};

const AmimsActypeWidgetDtoFields = {
    "acCategory": "string",
    "acManufacture": "string",
    "actype": "string",
    "createdAt": "string",
    "description": "string",
    "eFlight": "string",
    "eStarts": "string",
    "engineManufacture": "string",
    "engineType": "string",
    "hashN1": "string",
    "hashN2": "string",
    "idActype": "string",
    "isDeleted": "number",
    "numberEngine": "number",
    "oldId": "string",
    "statusType": "string",
    "total": "number",
    "updatedAt": "string",
    "wingtype": "string"
};

const AmimsAircraftDetailDtoFields = {
    "airworthiness": "string",
    "autoPilot": "string",
    "auxiliaryTank": "string",
    "baggageCompartmentSpace": "string",
    "cargoAreaMaximumHeight": "string",
    "cargoAreaOverallLength": "string",
    "cargoDoor": "string",
    "certificateOfRegistration": "string",
    "compassSwing": "string",
    "configuration": "string",
    "crew": "string",
    "crewDoor": "string",
    "crewLifeVest": "string",
    "cvr": "string",
    "dme": "string",
    "dualAdfSystem": "string",
    "dualRadioNavigationSystem": "string",
    "dualVhfCommunication": "string",
    "earProtector": "string",
    "emergency": "string",
    "emergencyFloatationGear": "string",
    "emergencyLocateTransmitter": "string",
    "emptyWeight": "string",
    "engine": "string",
    "engineInstrument": "string",
    "externalCargoHook": "string",
    "firstAidKit": "string",
    "flightControl": "string",
    "flightDirector": "string",
    "floatingBeacon": "string",
    "fullDoc": "string",
    "gps": "string",
    "grossWeight": "string",
    "gyroMagneticCompass": "string",
    "hfCommunication": "string",
    "homer": "string",
    "hoverCeilingOge": "string",
    "idAircraft": "string",
    "idAircraftDetail": "string",
    "intercommunicationSystem": "string",
    "internalHoist": "string",
    "landingGear": "string",
    "landingLight": "string",
    "lifeRaft": "string",
    "lifeVest": "string",
    "mainCabinSpace": "string",
    "mainRotorDiscDiameter": "string",
    "mainRotorSystem": "string",
    "maximumBaggageCompartment": "string",
    "maximumContinuous": "string",
    "maximumSpeed": "string",
    "medicalStretcher": "string",
    "minute": "string",
    "moreDetail": "string",
    "outputPower": "string",
    "passenger": "string",
    "passengerDoorHeight": "string",
    "passengerDoorWidth": "string",
    "payload": "string",
    "personal": "string",
    "poweredBy": "string",
    "publicAddress": "string",
    "radioAltimeter": "string",
    "radioPermit": "string",
    "range": "string",
    "searchLight": "string",
    "standardFuelCapacity": "string",
    "survivalKit": "string",
    "tailRotorDiameter": "string",
    "tailRotorSystem": "string",
    "takeOff": "string",
    "transponder": "string",
    "underwaterBeacon": "string",
    "updatedAt": "string",
    "usefulWeight": "string",
    "vor": "string",
    "weightAndBalance": "string",
    "withFullPassenger": "string",
    "wxRadar": "string",
    "yearOfManufacture": "string"
};

const AmimsAircraftDetailReportDtoFields = {
    "aircraft": "string",
    "airworthiness": "string",
    "autoPilot": "string",
    "auxiliaryTank": "string",
    "baggageCompartmentSpace": "string",
    "cargoAreaMaximumHeight": "string",
    "cargoAreaOverallLength": "string",
    "cargoDoor": "string",
    "certificateOfRegistration": "string",
    "compassSwing": "string",
    "configuration": "string",
    "crew": "string",
    "crewDoor": "string",
    "crewLifeVest": "string",
    "cvr": "string",
    "dme": "string",
    "dualAdfSystem": "string",
    "dualRadioNavigationSystem": "string",
    "dualVhfCommunication": "string",
    "earProtector": "string",
    "emergency": "string",
    "emergencyFloatationGear": "string",
    "emergencyLocateTransmitter": "string",
    "emptyWeight": "string",
    "engine": "string",
    "engineInstrument": "string",
    "externalCargoHook": "string",
    "firstAidKit": "string",
    "flightControl": "string",
    "flightDirector": "string",
    "floatingBeacon": "string",
    "fullDoc": "string",
    "gps": "string",
    "grossWeight": "string",
    "gyroMagneticCompass": "string",
    "hfCommunication": "string",
    "homer": "string",
    "hoverCeilingOge": "string",
    "idAircraft": "string",
    "idAircraftDetail": "string",
    "intercommunicationSystem": "string",
    "internalHoist": "string",
    "landingGear": "string",
    "landingLight": "string",
    "lifeRaft": "string",
    "lifeVest": "string",
    "mainCabinSpace": "string",
    "mainRotorDiscDiameter": "string",
    "mainRotorSystem": "string",
    "maximumBaggageCompartment": "string",
    "maximumContinuous": "string",
    "maximumSpeed": "string",
    "medicalStretcher": "string",
    "minute": "string",
    "moreDetail": "string",
    "outputPower": "string",
    "passenger": "string",
    "passengerDoorHeight": "string",
    "passengerDoorWidth": "string",
    "payload": "string",
    "personal": "string",
    "poweredBy": "string",
    "publicAddress": "string",
    "radioAltimeter": "string",
    "radioPermit": "string",
    "range": "string",
    "searchLight": "string",
    "standardFuelCapacity": "string",
    "survivalKit": "string",
    "tailRotorDiameter": "string",
    "tailRotorSystem": "string",
    "takeOff": "string",
    "transponder": "string",
    "underwaterBeacon": "string",
    "updatedAt": "string",
    "usefulWeight": "string",
    "vor": "string",
    "weightAndBalance": "string",
    "withFullPassenger": "string",
    "wxRadar": "string",
    "yearOfManufacture": "string"
};

const AmimsAircraftDetailWidgetDtoFields = {
    "airworthiness": "string",
    "autoPilot": "string",
    "auxiliaryTank": "string",
    "baggageCompartmentSpace": "string",
    "cargoAreaMaximumHeight": "string",
    "cargoAreaOverallLength": "string",
    "cargoDoor": "string",
    "certificateOfRegistration": "string",
    "compassSwing": "string",
    "configuration": "string",
    "crew": "string",
    "crewDoor": "string",
    "crewLifeVest": "string",
    "cvr": "string",
    "dme": "string",
    "dualAdfSystem": "string",
    "dualRadioNavigationSystem": "string",
    "dualVhfCommunication": "string",
    "earProtector": "string",
    "emergency": "string",
    "emergencyFloatationGear": "string",
    "emergencyLocateTransmitter": "string",
    "emptyWeight": "string",
    "engine": "string",
    "engineInstrument": "string",
    "externalCargoHook": "string",
    "firstAidKit": "string",
    "flightControl": "string",
    "flightDirector": "string",
    "floatingBeacon": "string",
    "fullDoc": "string",
    "gps": "string",
    "grossWeight": "string",
    "gyroMagneticCompass": "string",
    "hfCommunication": "string",
    "homer": "string",
    "hoverCeilingOge": "string",
    "idAircraft": "string",
    "idAircraftDetail": "string",
    "intercommunicationSystem": "string",
    "internalHoist": "string",
    "landingGear": "string",
    "landingLight": "string",
    "lifeRaft": "string",
    "lifeVest": "string",
    "mainCabinSpace": "string",
    "mainRotorDiscDiameter": "string",
    "mainRotorSystem": "string",
    "maximumBaggageCompartment": "string",
    "maximumContinuous": "string",
    "maximumSpeed": "string",
    "medicalStretcher": "string",
    "minute": "string",
    "moreDetail": "string",
    "outputPower": "string",
    "passenger": "string",
    "passengerDoorHeight": "string",
    "passengerDoorWidth": "string",
    "payload": "string",
    "personal": "string",
    "poweredBy": "string",
    "publicAddress": "string",
    "radioAltimeter": "string",
    "radioPermit": "string",
    "range": "string",
    "searchLight": "string",
    "standardFuelCapacity": "string",
    "survivalKit": "string",
    "tailRotorDiameter": "string",
    "tailRotorSystem": "string",
    "takeOff": "string",
    "total": "number",
    "transponder": "string",
    "underwaterBeacon": "string",
    "updatedAt": "string",
    "usefulWeight": "string",
    "vor": "string",
    "weightAndBalance": "string",
    "withFullPassenger": "string",
    "wxRadar": "string",
    "yearOfManufacture": "string"
};

const AmimsAircraftDtoFields = {
    "acFoto": "string",
    "createdAt": "string",
    "descriptionAircraft": "string",
    "hasapu": "string",
    "idActype": "string",
    "idAircraft": "string",
    "isDeleted": "number",
    "keywordAircraft": "string",
    "manufactureAircraft": "string",
    "manufactureDate": "string",
    "manufactureEngine": "string",
    "manufacturedBy": "string",
    "oldActype": "string",
    "oldId": "string",
    "purchasedate": "string",
    "reasonRegschange": "string",
    "registrationNumber": "string",
    "serialNumber": "string",
    "statusAc": "string",
    "tendurance": "number",
    "updatedAt": "string",
    "yearMade": "string"
};

const AmimsAircraftReportDtoFields = {
    "acFoto": "string",
    "actype": "string",
    "createdAt": "string",
    "descriptionAircraft": "string",
    "hasapu": "string",
    "idActype": "string",
    "idAircraft": "string",
    "isDeleted": "number",
    "keywordAircraft": "string",
    "manufactureAircraft": "string",
    "manufactureDate": "string",
    "manufactureEngine": "string",
    "manufacturedBy": "string",
    "oldActype": "string",
    "oldId": "string",
    "purchasedate": "string",
    "reasonRegschange": "string",
    "registrationNumber": "string",
    "serialNumber": "string",
    "statusAc": "string",
    "tendurance": "number",
    "updatedAt": "string",
    "yearMade": "string"
};

const AmimsAircraftWidgetDtoFields = {
    "acFoto": "string",
    "createdAt": "string",
    "descriptionAircraft": "string",
    "hasapu": "string",
    "idActype": "string",
    "idAircraft": "string",
    "isDeleted": "number",
    "keywordAircraft": "string",
    "manufactureAircraft": "string",
    "manufactureDate": "string",
    "manufactureEngine": "string",
    "manufacturedBy": "string",
    "oldActype": "string",
    "oldId": "string",
    "purchasedate": "string",
    "reasonRegschange": "string",
    "registrationNumber": "string",
    "serialNumber": "string",
    "statusAc": "string",
    "tendurance": "number",
    "total": "number",
    "updatedAt": "string",
    "yearMade": "string"
};

const AmimsAtaDtoFields = {
    "ata": "string",
    "ataType": "string",
    "codeAta": "string",
    "createdAt": "string",
    "idAta": "string",
    "isDeleted": "number",
    "keywordAta": "string",
    "oldId": "string",
    "updatedAt": "string"
};

const AmimsBinDtoFields = {
    "bin": "string",
    "code": "string",
    "createdAt": "string",
    "description": "string",
    "idBin": "string",
    "idSite": "string",
    "updatedAt": "string"
};

const AmimsBinReportDtoFields = {
    "bin": "string",
    "code": "string",
    "createdAt": "string",
    "description": "string",
    "idBin": "string",
    "idSite": "string",
    "site": "string",
    "updatedAt": "string"
};

const AmimsBinWidgetDtoFields = {
    "bin": "string",
    "code": "string",
    "createdAt": "string",
    "description": "string",
    "idBin": "string",
    "idSite": "string",
    "total": "number",
    "updatedAt": "string"
};

const AmimsCompanyDtoFields = {
    "address1": "string",
    "address2": "string",
    "createdAt": "string",
    "email": "string",
    "fax": "string",
    "hasIdUser": "number",
    "idCompany": "string",
    "isDefault": "number",
    "nameCompany": "string",
    "phone": "string",
    "statusCompany": "string",
    "updatedAt": "string",
    "website": "string"
};

const AmimsConditionMonitoringDtoFields = {
    "childnameConditionMonitoring": "string",
    "code": "string",
    "conditionMonitoring": "string",
    "idConditionMonitoring": "string",
    "isDeleted": "number"
};

const AmimsConditionMonitoringReportDtoFields = {
    "childnameConditionMonitoring": "string",
    "code": "string",
    "conditionMonitoring": "string",
    "idConditionMonitoring": "string",
    "isDeleted": "number"
};

const AmimsConditionMonitoringWidgetDtoFields = {
    "childnameConditionMonitoring": "string",
    "code": "string",
    "conditionMonitoring": "string",
    "idConditionMonitoring": "string",
    "isDeleted": "number",
    "total": "number"
};

const AmimsCurrencyDtoFields = {
    "createdAt": "string",
    "effectiveDate": "string",
    "forcurrency": "string",
    "idCurrency": "string",
    "idMcurrency": "string",
    "idUser": "string",
    "newValue": "number",
    "noteCurrency": "string",
    "oldValue": "number",
    "updatedAt": "string"
};

const AmimsCurrencyReportDtoFields = {
    "createdAt": "string",
    "effectiveDate": "string",
    "forcurrency": "string",
    "idCurrency": "string",
    "idMcurrency": "string",
    "idUser": "string",
    "mcurrency": "string",
    "newValue": "number",
    "noteCurrency": "string",
    "oldValue": "number",
    "updatedAt": "string"
};

const AmimsCurrencyWidgetDtoFields = {
    "createdAt": "string",
    "effectiveDate": "string",
    "forcurrency": "string",
    "idCurrency": "string",
    "idMcurrency": "string",
    "idUser": "string",
    "newValue": "number",
    "noteCurrency": "string",
    "oldValue": "number",
    "total": "number",
    "updatedAt": "string"
};

const AmimsDoctypeDtoFields = {
    "childname": "string",
    "description": "string",
    "doctype": "string",
    "idDoctype": "string",
    "lastupdatestamp": "string"
};

const AmimsDueListDtoFields = {
    "currentCycle": "number",
    "currentHours": "number",
    "cycleFrom": "number",
    "cycleTo": "number",
    "dateDue": "string",
    "dueAcCycle": "number",
    "dueAcHours": "number",
    "dueCycle": "number",
    "dueDate": "string",
    "dueHours": "number",
    "hoursFrom": "number",
    "hoursTo": "number",
    "idAircraft": "string",
    "idDueList": "string",
    "idMantenance": "string",
    "idPart": "string",
    "idTypeOfwork": "string",
    "lastCycle": "number",
    "lastDate": "string",
    "lastHours": "number",
    "noteDue": "string",
    "onSite": "number",
    "parentAss": "string",
    "parentCycle": "number",
    "parentHours": "number",
    "parentTime": "number",
    "remainingCycle": "number",
    "remainingDay": "string",
    "remainingHours": "number",
    "sn": "string",
    "timeFrom": "number",
    "timeTo": "number",
    "timeUnit": "string",
    "typeDue": "string",
    "typeOfwork": "string"
};

const AmimsDueListOutputDtoFields = {
    "atInstall": "string",
    "ata": "string",
    "code": "string",
    "currentPart": "string",
    "dueAt": "string",
    "dueC": "number",
    "dueH": "number",
    "dueT": "number",
    "idAircraft": "string",
    "idDueList": "string",
    "idDueListOutput": "string",
    "idMpart": "string",
    "idPart": "string",
    "installPart": "string",
    "keyword": "string",
    "noteDue": "string",
    "partNumber": "string",
    "peruntukan": "string",
    "ramaining": "number",
    "sn": "string",
    "toDue": "number",
    "typeDue": "string",
    "typeOfwork": "string",
    "variabel": "string"
};

const AmimsDueListOutputReportDtoFields = {
    "aircraft": "string",
    "atInstall": "string",
    "ata": "string",
    "code": "string",
    "currentPart": "string",
    "dueAt": "string",
    "dueC": "number",
    "dueH": "number",
    "dueT": "number",
    "idAircraft": "string",
    "idDueList": "string",
    "idDueListOutput": "string",
    "idMpart": "string",
    "idPart": "string",
    "installPart": "string",
    "keyword": "string",
    "mpart": "string",
    "noteDue": "string",
    "part": "string",
    "partNumber": "string",
    "peruntukan": "string",
    "ramaining": "number",
    "sn": "string",
    "toDue": "number",
    "typeDue": "string",
    "typeOfwork": "string",
    "variabel": "string"
};

const AmimsDueListOutputWidgetDtoFields = {
    "atInstall": "string",
    "ata": "string",
    "code": "string",
    "currentPart": "string",
    "dueAt": "string",
    "dueC": "number",
    "dueH": "number",
    "dueT": "number",
    "idAircraft": "string",
    "idDueList": "string",
    "idDueListOutput": "string",
    "idMpart": "string",
    "idPart": "string",
    "installPart": "string",
    "keyword": "string",
    "noteDue": "string",
    "partNumber": "string",
    "peruntukan": "string",
    "ramaining": "number",
    "sn": "string",
    "toDue": "number",
    "total": "number",
    "typeDue": "string",
    "typeOfwork": "string",
    "variabel": "string"
};

const AmimsDueListReportDtoFields = {
    "aircraft": "string",
    "currentCycle": "number",
    "currentHours": "number",
    "cycleFrom": "number",
    "cycleTo": "number",
    "dateDue": "string",
    "dueAcCycle": "number",
    "dueAcHours": "number",
    "dueCycle": "number",
    "dueDate": "string",
    "dueHours": "number",
    "hoursFrom": "number",
    "hoursTo": "number",
    "idAircraft": "string",
    "idDueList": "string",
    "idMantenance": "string",
    "idPart": "string",
    "idTypeOfwork": "string",
    "lastCycle": "number",
    "lastDate": "string",
    "lastHours": "number",
    "noteDue": "string",
    "onSite": "number",
    "parentAss": "string",
    "parentCycle": "number",
    "parentHours": "number",
    "parentTime": "number",
    "part": "string",
    "remainingCycle": "number",
    "remainingDay": "string",
    "remainingHours": "number",
    "sn": "string",
    "timeFrom": "number",
    "timeTo": "number",
    "timeUnit": "string",
    "typeDue": "string",
    "typeOfwork": "string"
};

const AmimsDueListWidgetDtoFields = {
    "currentCycle": "number",
    "currentHours": "number",
    "cycleFrom": "number",
    "cycleTo": "number",
    "dateDue": "string",
    "dueAcCycle": "number",
    "dueAcHours": "number",
    "dueCycle": "number",
    "dueDate": "string",
    "dueHours": "number",
    "hoursFrom": "number",
    "hoursTo": "number",
    "idAircraft": "string",
    "idDueList": "string",
    "idMantenance": "string",
    "idPart": "string",
    "idTypeOfwork": "string",
    "lastCycle": "number",
    "lastDate": "string",
    "lastHours": "number",
    "noteDue": "string",
    "onSite": "number",
    "parentAss": "string",
    "parentCycle": "number",
    "parentHours": "number",
    "parentTime": "number",
    "remainingCycle": "number",
    "remainingDay": "string",
    "remainingHours": "number",
    "sn": "string",
    "timeFrom": "number",
    "timeTo": "number",
    "timeUnit": "string",
    "total": "number",
    "typeDue": "string",
    "typeOfwork": "string"
};

const AmimsEngineerPmtrDtoFields = {
    "createdAt": "string",
    "dateAcc": "string",
    "datePmtr": "string",
    "fromSite": "number",
    "idAircraft": "string",
    "idEngineerPmtr": "string",
    "idUser": "string",
    "idUserAcc": "string",
    "isDeleted": "number",
    "noIndex": "number",
    "notePmtr": "string",
    "numberPmtr": "string",
    "statusPmtr": "string",
    "toSite": "number",
    "updatedAt": "string",
    "validasi": "number"
};

const AmimsEngineerPmtrItemDtoFields = {
    "createdAt": "string",
    "figureIndex": "string",
    "idEngineerPmtr": "string",
    "idEngineerPmtrItem": "string",
    "idMpart": "string",
    "noteItemPmtr": "string",
    "priority": "string",
    "qtyPmtr": "number",
    "updatedAt": "string"
};

const AmimsEngineerPmtrItemReportDtoFields = {
    "createdAt": "string",
    "figureIndex": "string",
    "idEngineerPmtr": "string",
    "idEngineerPmtrItem": "string",
    "idMpart": "string",
    "mpart": "string",
    "noteItemPmtr": "string",
    "priority": "string",
    "qtyPmtr": "number",
    "updatedAt": "string"
};

const AmimsEngineerPmtrItemWidgetDtoFields = {
    "createdAt": "string",
    "figureIndex": "string",
    "idEngineerPmtr": "string",
    "idEngineerPmtrItem": "string",
    "idMpart": "string",
    "noteItemPmtr": "string",
    "priority": "string",
    "qtyPmtr": "number",
    "total": "number",
    "updatedAt": "string"
};

const AmimsEngineerPmtrReportDtoFields = {
    "aircraft": "string",
    "createdAt": "string",
    "dateAcc": "string",
    "datePmtr": "string",
    "fromSite": "number",
    "idAircraft": "string",
    "idEngineerPmtr": "string",
    "idUser": "string",
    "idUserAcc": "string",
    "isDeleted": "number",
    "noIndex": "number",
    "notePmtr": "string",
    "numberPmtr": "string",
    "statusPmtr": "string",
    "toSite": "number",
    "updatedAt": "string",
    "validasi": "number"
};

const AmimsEngineerPmtrWidgetDtoFields = {
    "createdAt": "string",
    "dateAcc": "string",
    "datePmtr": "string",
    "fromSite": "number",
    "idAircraft": "string",
    "idEngineerPmtr": "string",
    "idUser": "string",
    "idUserAcc": "string",
    "isDeleted": "number",
    "noIndex": "number",
    "notePmtr": "string",
    "numberPmtr": "string",
    "statusPmtr": "string",
    "toSite": "number",
    "total": "number",
    "updatedAt": "string",
    "validasi": "number"
};

const AmimsEngineerPrisDtoFields = {
    "createdAt": "string",
    "dateAcc": "string",
    "dateClose": "string",
    "dateInstall": "string",
    "dateIssued": "string",
    "datePris": "string",
    "description": "string",
    "idAircraft": "string",
    "idEngineerPris": "string",
    "idPosition": "string",
    "idSite": "string",
    "idUser": "string",
    "idUserAcc": "string",
    "idUserClose": "string",
    "idUserIssued": "string",
    "isDeleted": "number",
    "keyword": "string",
    "noIndex": "number",
    "notePris": "string",
    "numberJo": "string",
    "numberPris": "string",
    "numberWp": "string",
    "priority": "string",
    "statusPris": "string",
    "typePris": "string",
    "updatedAt": "string",
    "validasi": "number"
};

const AmimsEngineerPrisItemDtoFields = {
    "createdAt": "string",
    "fromPart": "string",
    "hashTechLog": "string",
    "idEngineerPris": "string",
    "idEngineerPrisItem": "string",
    "idPart": "string",
    "idPartRemove": "string",
    "isDeleted": "number",
    "noteItemPris": "string",
    "partOnDate": "string",
    "qtyInstall": "number",
    "qtyPris": "number",
    "statusItem": "string",
    "tsnCycle": "number",
    "tsnHours": "number",
    "tsnVal": "number",
    "tsoCycle": "number",
    "tsoHours": "number",
    "tsoVal": "number",
    "updatedAt": "string"
};

const AmimsEngineerPrisItemReportDtoFields = {
    "createdAt": "string",
    "fromPart": "string",
    "hashTechLog": "string",
    "idEngineerPris": "string",
    "idEngineerPrisItem": "string",
    "idPart": "string",
    "idPartRemove": "string",
    "isDeleted": "number",
    "noteItemPris": "string",
    "part": "string",
    "partOnDate": "string",
    "qtyInstall": "number",
    "qtyPris": "number",
    "statusItem": "string",
    "tsnCycle": "number",
    "tsnHours": "number",
    "tsnVal": "number",
    "tsoCycle": "number",
    "tsoHours": "number",
    "tsoVal": "number",
    "updatedAt": "string"
};

const AmimsEngineerPrisItemWidgetDtoFields = {
    "createdAt": "string",
    "fromPart": "string",
    "hashTechLog": "string",
    "idEngineerPris": "string",
    "idEngineerPrisItem": "string",
    "idPart": "string",
    "idPartRemove": "string",
    "isDeleted": "number",
    "noteItemPris": "string",
    "partOnDate": "string",
    "qtyInstall": "number",
    "qtyPris": "number",
    "statusItem": "string",
    "total": "number",
    "tsnCycle": "number",
    "tsnHours": "number",
    "tsnVal": "number",
    "tsoCycle": "number",
    "tsoHours": "number",
    "tsoVal": "number",
    "updatedAt": "string"
};

const AmimsEngineerPrisReportDtoFields = {
    "aircraft": "string",
    "createdAt": "string",
    "dateAcc": "string",
    "dateClose": "string",
    "dateInstall": "string",
    "dateIssued": "string",
    "datePris": "string",
    "description": "string",
    "idAircraft": "string",
    "idEngineerPris": "string",
    "idPosition": "string",
    "idSite": "string",
    "idUser": "string",
    "idUserAcc": "string",
    "idUserClose": "string",
    "idUserIssued": "string",
    "isDeleted": "number",
    "keyword": "string",
    "noIndex": "number",
    "notePris": "string",
    "numberJo": "string",
    "numberPris": "string",
    "numberWp": "string",
    "position": "string",
    "priority": "string",
    "site": "string",
    "statusPris": "string",
    "typePris": "string",
    "updatedAt": "string",
    "validasi": "number"
};

const AmimsEngineerPrisReturnDtoFields = {
    "dateReturn": "string",
    "idEngineerPris": "string",
    "idEngineerPrisReturn": "string",
    "statusReturn": "string"
};

const AmimsEngineerPrisReturnItemDtoFields = {
    "idEngineerPrisItem": "string",
    "idEngineerPrisReturnItem": "string",
    "isAccept": "string",
    "qtyReturn": "number"
};

const AmimsEngineerPrisReturnItemReportDtoFields = {
    "idEngineerPrisItem": "string",
    "idEngineerPrisReturnItem": "string",
    "isAccept": "string",
    "qtyReturn": "number"
};

const AmimsEngineerPrisReturnItemWidgetDtoFields = {
    "idEngineerPrisItem": "string",
    "idEngineerPrisReturnItem": "string",
    "isAccept": "string",
    "qtyReturn": "number",
    "total": "number"
};

const AmimsEngineerPrisReturnReportDtoFields = {
    "dateReturn": "string",
    "idEngineerPris": "string",
    "idEngineerPrisReturn": "string",
    "statusReturn": "string"
};

const AmimsEngineerPrisReturnWidgetDtoFields = {
    "dateReturn": "string",
    "idEngineerPris": "string",
    "idEngineerPrisReturn": "string",
    "statusReturn": "string",
    "total": "number"
};

const AmimsEngineerPrisWidgetDtoFields = {
    "createdAt": "string",
    "dateAcc": "string",
    "dateClose": "string",
    "dateInstall": "string",
    "dateIssued": "string",
    "datePris": "string",
    "description": "string",
    "idAircraft": "string",
    "idEngineerPris": "string",
    "idPosition": "string",
    "idSite": "string",
    "idUser": "string",
    "idUserAcc": "string",
    "idUserClose": "string",
    "idUserIssued": "string",
    "isDeleted": "number",
    "keyword": "string",
    "noIndex": "number",
    "notePris": "string",
    "numberJo": "string",
    "numberPris": "string",
    "numberWp": "string",
    "priority": "string",
    "statusPris": "string",
    "total": "number",
    "typePris": "string",
    "updatedAt": "string",
    "validasi": "number"
};

const AmimsEngineerRtiDtoFields = {
    "base": "string",
    "createdAt": "string",
    "dateRti": "string",
    "dispotition": "number",
    "hasPris": "string",
    "hashProcess": "string",
    "hashRpd": "string",
    "hashTechLog": "string",
    "idAircraft": "string",
    "idEngineerRti": "string",
    "idMpcJo": "string",
    "idPart": "string",
    "idPartInstall": "string",
    "idSite": "string",
    "inspectedBy": "number",
    "numberRti": "string",
    "reason": "string",
    "receivedBy": "number",
    "remainingHours": "number",
    "remarkDisposisi": "string",
    "returnBy": "number",
    "statusRti": "string",
    "statusService": "string",
    "tsnCycle": "number",
    "tsnCycleParent": "number",
    "tsnHours": "number",
    "tsnHoursParent": "number",
    "tsnVal": "number",
    "tsnVar": "string",
    "tsoCycle": "number",
    "tsoHours": "number",
    "tsoVal": "number",
    "tsoVar": "string",
    "typeRti": "string",
    "updatedAt": "string"
};

const AmimsEngineerRtiIdentifyDtoFields = {
    "dateInstall": "string",
    "idEngineerRti": "string",
    "idEngineerRtiIdentify": "string",
    "idPart": "string",
    "idPartInstall": "string",
    "parent": "string",
    "tsiCycle": "number",
    "tsiHours": "number",
    "tsiVal": "number",
    "tsiVar": "string",
    "tsnCycle": "number",
    "tsnHours": "number",
    "tsnVal": "number",
    "tsnVar": "string",
    "tsoCycle": "number",
    "tsoHours": "number",
    "tsoVal": "number",
    "tsoVar": "string",
    "warantyStartCycle": "number",
    "warantyStartDate": "string",
    "warantyStartDays": "number",
    "warantyStartHours": "number"
};

const AmimsEngineerRtiIdentifyReportDtoFields = {
    "dateInstall": "string",
    "idEngineerRti": "string",
    "idEngineerRtiIdentify": "string",
    "idPart": "string",
    "idPartInstall": "string",
    "parent": "string",
    "part": "string",
    "tsiCycle": "number",
    "tsiHours": "number",
    "tsiVal": "number",
    "tsiVar": "string",
    "tsnCycle": "number",
    "tsnHours": "number",
    "tsnVal": "number",
    "tsnVar": "string",
    "tsoCycle": "number",
    "tsoHours": "number",
    "tsoVal": "number",
    "tsoVar": "string",
    "warantyStartCycle": "number",
    "warantyStartDate": "string",
    "warantyStartDays": "number",
    "warantyStartHours": "number"
};

const AmimsEngineerRtiIdentifyWidgetDtoFields = {
    "dateInstall": "string",
    "idEngineerRti": "string",
    "idEngineerRtiIdentify": "string",
    "idPart": "string",
    "idPartInstall": "string",
    "parent": "string",
    "total": "number",
    "tsiCycle": "number",
    "tsiHours": "number",
    "tsiVal": "number",
    "tsiVar": "string",
    "tsnCycle": "number",
    "tsnHours": "number",
    "tsnVal": "number",
    "tsnVar": "string",
    "tsoCycle": "number",
    "tsoHours": "number",
    "tsoVal": "number",
    "tsoVar": "string",
    "warantyStartCycle": "number",
    "warantyStartDate": "string",
    "warantyStartDays": "number",
    "warantyStartHours": "number"
};

const AmimsEngineerRtiPartDtoFields = {
    "dateInstall": "string",
    "idEngineerRti": "string",
    "idEngineerRtiPart": "string",
    "idPart": "string",
    "idPartInstall": "string",
    "parent": "string",
    "tsiCycle": "number",
    "tsiHours": "number",
    "tsiVal": "number",
    "tsiVar": "string",
    "tsnCycle": "number",
    "tsnHours": "number",
    "tsnVal": "number",
    "tsnVar": "string",
    "tsoCycle": "number",
    "tsoHours": "number",
    "tsoVal": "number",
    "tsoVar": "string",
    "warantyStartCycle": "number",
    "warantyStartDate": "string",
    "warantyStartDays": "number",
    "warantyStartHours": "number"
};

const AmimsEngineerRtiPartReportDtoFields = {
    "dateInstall": "string",
    "idEngineerRti": "string",
    "idEngineerRtiPart": "string",
    "idPart": "string",
    "idPartInstall": "string",
    "parent": "string",
    "part": "string",
    "tsiCycle": "number",
    "tsiHours": "number",
    "tsiVal": "number",
    "tsiVar": "string",
    "tsnCycle": "number",
    "tsnHours": "number",
    "tsnVal": "number",
    "tsnVar": "string",
    "tsoCycle": "number",
    "tsoHours": "number",
    "tsoVal": "number",
    "tsoVar": "string",
    "warantyStartCycle": "number",
    "warantyStartDate": "string",
    "warantyStartDays": "number",
    "warantyStartHours": "number"
};

const AmimsEngineerRtiPartWidgetDtoFields = {
    "dateInstall": "string",
    "idEngineerRti": "string",
    "idEngineerRtiPart": "string",
    "idPart": "string",
    "idPartInstall": "string",
    "parent": "string",
    "total": "number",
    "tsiCycle": "number",
    "tsiHours": "number",
    "tsiVal": "number",
    "tsiVar": "string",
    "tsnCycle": "number",
    "tsnHours": "number",
    "tsnVal": "number",
    "tsnVar": "string",
    "tsoCycle": "number",
    "tsoHours": "number",
    "tsoVal": "number",
    "tsoVar": "string",
    "warantyStartCycle": "number",
    "warantyStartDate": "string",
    "warantyStartDays": "number",
    "warantyStartHours": "number"
};

const AmimsEngineerRtiReportDtoFields = {
    "aircraft": "string",
    "base": "string",
    "createdAt": "string",
    "dateRti": "string",
    "dispotition": "number",
    "hasPris": "string",
    "hashProcess": "string",
    "hashRpd": "string",
    "hashTechLog": "string",
    "idAircraft": "string",
    "idEngineerRti": "string",
    "idMpcJo": "string",
    "idPart": "string",
    "idPartInstall": "string",
    "idSite": "string",
    "inspectedBy": "number",
    "numberRti": "string",
    "part": "string",
    "reason": "string",
    "receivedBy": "number",
    "remainingHours": "number",
    "remarkDisposisi": "string",
    "returnBy": "number",
    "site": "string",
    "statusRti": "string",
    "statusService": "string",
    "tsnCycle": "number",
    "tsnCycleParent": "number",
    "tsnHours": "number",
    "tsnHoursParent": "number",
    "tsnVal": "number",
    "tsnVar": "string",
    "tsoCycle": "number",
    "tsoHours": "number",
    "tsoVal": "number",
    "tsoVar": "string",
    "typeRti": "string",
    "updatedAt": "string"
};

const AmimsEngineerRtiWidgetDtoFields = {
    "base": "string",
    "createdAt": "string",
    "dateRti": "string",
    "dispotition": "number",
    "hasPris": "string",
    "hashProcess": "string",
    "hashRpd": "string",
    "hashTechLog": "string",
    "idAircraft": "string",
    "idEngineerRti": "string",
    "idMpcJo": "string",
    "idPart": "string",
    "idPartInstall": "string",
    "idSite": "string",
    "inspectedBy": "number",
    "numberRti": "string",
    "reason": "string",
    "receivedBy": "number",
    "remainingHours": "number",
    "remarkDisposisi": "string",
    "returnBy": "number",
    "statusRti": "string",
    "statusService": "string",
    "total": "number",
    "tsnCycle": "number",
    "tsnCycleParent": "number",
    "tsnHours": "number",
    "tsnHoursParent": "number",
    "tsnVal": "number",
    "tsnVar": "string",
    "tsoCycle": "number",
    "tsoHours": "number",
    "tsoVal": "number",
    "tsoVar": "string",
    "typeRti": "string",
    "updatedAt": "string"
};

const AmimsFigureIndexDtoFields = {
    "description": "string",
    "figureIndex": "string",
    "idAta": "string",
    "idFigureIndex": "string"
};

const AmimsInspectionDtoFields = {
    "atachapter": "string",
    "createdAt": "string",
    "cycleTo": "number",
    "flightHoursTo": "number",
    "idAircraft": "string",
    "idInspection": "string",
    "idMaintenanceCode": "string",
    "idPart": "string",
    "idUser": "string",
    "noteInspection": "string",
    "oldId": "string",
    "repetitions": "number",
    "timeRangeTo": "number",
    "timeUnit": "string",
    "updatedAt": "string"
};

const AmimsInspectionReportDtoFields = {
    "aircraft": "string",
    "atachapter": "string",
    "createdAt": "string",
    "cycleTo": "number",
    "flightHoursTo": "number",
    "idAircraft": "string",
    "idInspection": "string",
    "idMaintenanceCode": "string",
    "idPart": "string",
    "idUser": "string",
    "noteInspection": "string",
    "oldId": "string",
    "part": "string",
    "repetitions": "number",
    "timeRangeTo": "number",
    "timeUnit": "string",
    "updatedAt": "string"
};

const AmimsInspectionWidgetDtoFields = {
    "atachapter": "string",
    "createdAt": "string",
    "cycleTo": "number",
    "flightHoursTo": "number",
    "idAircraft": "string",
    "idInspection": "string",
    "idMaintenanceCode": "string",
    "idPart": "string",
    "idUser": "string",
    "noteInspection": "string",
    "oldId": "string",
    "repetitions": "number",
    "timeRangeTo": "number",
    "timeUnit": "string",
    "total": "number",
    "updatedAt": "string"
};

const AmimsInternalGrnDtoFields = {
    "createdAt": "string",
    "dateAcc": "string",
    "dateGrn": "string",
    "idInternalGrn": "string",
    "idSite": "string",
    "idUser": "string",
    "idUserAcc": "string",
    "numberGrn": "string",
    "remark": "string",
    "statusGrn": "string",
    "updatedAt": "string",
    "validasi": "number"
};

const AmimsInternalGrnItemDtoFields = {
    "createdAt": "string",
    "idEngineerPrisItem": "string",
    "idInternalGrn": "string",
    "idInternalGrnItem": "string",
    "idMpart": "string",
    "idPart": "string",
    "qtyGrn": "number",
    "remark": "string",
    "statusItem": "string",
    "updatedAt": "string"
};

const AmimsInternalGrnItemReportDtoFields = {
    "createdAt": "string",
    "idEngineerPrisItem": "string",
    "idInternalGrn": "string",
    "idInternalGrnItem": "string",
    "idMpart": "string",
    "idPart": "string",
    "mpart": "string",
    "part": "string",
    "qtyGrn": "number",
    "remark": "string",
    "statusItem": "string",
    "updatedAt": "string"
};

const AmimsInternalGrnItemWidgetDtoFields = {
    "createdAt": "string",
    "idEngineerPrisItem": "string",
    "idInternalGrn": "string",
    "idInternalGrnItem": "string",
    "idMpart": "string",
    "idPart": "string",
    "qtyGrn": "number",
    "remark": "string",
    "statusItem": "string",
    "total": "number",
    "updatedAt": "string"
};

const AmimsInternalGrnReportDtoFields = {
    "createdAt": "string",
    "dateAcc": "string",
    "dateGrn": "string",
    "idInternalGrn": "string",
    "idSite": "string",
    "idUser": "string",
    "idUserAcc": "string",
    "numberGrn": "string",
    "remark": "string",
    "site": "string",
    "statusGrn": "string",
    "updatedAt": "string",
    "validasi": "number"
};

const AmimsInternalGrnWidgetDtoFields = {
    "createdAt": "string",
    "dateAcc": "string",
    "dateGrn": "string",
    "idInternalGrn": "string",
    "idSite": "string",
    "idUser": "string",
    "idUserAcc": "string",
    "numberGrn": "string",
    "remark": "string",
    "statusGrn": "string",
    "total": "number",
    "updatedAt": "string",
    "validasi": "number"
};

const AmimsLastMaintenanceDtoFields = {
    "createdAt": "string",
    "idLastMaintenance": "string",
    "idMaintenance": "string",
    "idMpcJo": "string",
    "idPart": "string",
    "idUser": "string",
    "lastCycle": "number",
    "lastDate": "string",
    "lastHours": "number",
    "oldId": "string",
    "parentCycle": "number",
    "parentHours": "number",
    "typeOfWork": "number",
    "updatedAt": "string"
};

const AmimsLastMaintenanceReportDtoFields = {
    "createdAt": "string",
    "idLastMaintenance": "string",
    "idMaintenance": "string",
    "idMpcJo": "string",
    "idPart": "string",
    "idUser": "string",
    "lastCycle": "number",
    "lastDate": "string",
    "lastHours": "number",
    "maintenance": "string",
    "oldId": "string",
    "parentCycle": "number",
    "parentHours": "number",
    "part": "string",
    "typeOfWork": "number",
    "updatedAt": "string"
};

const AmimsLastMaintenanceWidgetDtoFields = {
    "createdAt": "string",
    "idLastMaintenance": "string",
    "idMaintenance": "string",
    "idMpcJo": "string",
    "idPart": "string",
    "idUser": "string",
    "lastCycle": "number",
    "lastDate": "string",
    "lastHours": "number",
    "oldId": "string",
    "parentCycle": "number",
    "parentHours": "number",
    "total": "number",
    "typeOfWork": "number",
    "updatedAt": "string"
};

const AmimsLibFormIssuedDtoFields = {
    "createdAt": "string",
    "idLibFormIssued": "string",
    "lastUpdate": "string",
    "nameFile": "string",
    "numberForm": "string",
    "numberW": "string",
    "revision": "string",
    "updatedAt": "string"
};

const AmimsLibReferenceDtoFields = {
    "createdAt": "string",
    "idLibReference": "string",
    "lastUpdate": "string",
    "nameFile": "string",
    "numberReference": "string",
    "updatedAt": "string"
};

const AmimsLibUploadDtoFields = {
    "category": "string",
    "createdAt": "string",
    "fileDate": "string",
    "fileName": "string",
    "fileNumber": "string",
    "forModule": "string",
    "idLibUpload": "string",
    "idModule": "string",
    "updatedAt": "string"
};

const AmimsLifeTimeLimitDtoFields = {
    "childnameLifeTimeLimit": "string",
    "idLifeTimeLimit": "string",
    "isDeleted": "number",
    "lifeTimeLimit": "string"
};

const AmimsLifeTimeLimitReportDtoFields = {
    "childnameLifeTimeLimit": "string",
    "idLifeTimeLimit": "string",
    "isDeleted": "number",
    "lifeTimeLimit": "string"
};

const AmimsLifeTimeLimitWidgetDtoFields = {
    "childnameLifeTimeLimit": "string",
    "idLifeTimeLimit": "string",
    "isDeleted": "number",
    "lifeTimeLimit": "string",
    "total": "number"
};

const AmimsLocationFlightDtoFields = {
    "address": "string",
    "createdAt": "string",
    "idLocationFlight": "string",
    "lat": "string",
    "lon": "string",
    "nameLocation": "string",
    "statusLocation": "string",
    "updatedAt": "string"
};

const AmimsLocationFlightReportDtoFields = {
    "address": "string",
    "createdAt": "string",
    "idLocationFlight": "string",
    "lat": "string",
    "lon": "string",
    "nameLocation": "string",
    "statusLocation": "string",
    "updatedAt": "string"
};

const AmimsLocationFlightWidgetDtoFields = {
    "address": "string",
    "createdAt": "string",
    "idLocationFlight": "string",
    "lat": "string",
    "lon": "string",
    "nameLocation": "string",
    "statusLocation": "string",
    "total": "number",
    "updatedAt": "string"
};

const AmimsLogProcessDtoFields = {
    "adj1": "number",
    "adj2": "number",
    "adj3": "number",
    "bugIndexLog": "number",
    "calculatedCycle": "string",
    "calculatedHours": "string",
    "cgPenalti": "string",
    "cycle": "number",
    "cycleBf": "number",
    "cycleCf": "number",
    "cycleFlight": "number",
    "factor1": "number",
    "factor2": "number",
    "factor3": "number",
    "fullCycleBf": "number",
    "fullCycleFlt": "number",
    "hasFor": "string",
    "hasUpdate": "number",
    "hoistLeft": "number",
    "hoistOperation": "string",
    "hoistRight": "number",
    "hoistUsage": "number",
    "hours": "number",
    "hoursBf": "number",
    "hoursCf": "number",
    "hoursFlight": "number",
    "idLogProcess": "string",
    "idMpart": "string",
    "idPart": "string",
    "idPartInstall": "string",
    "idTechLog": "string",
    "landings": "number",
    "n1": "number",
    "n2": "number",
    "parent": "string",
    "partCycleBf": "number",
    "partCycleFlt": "number",
    "rumusCycle": "string",
    "rumusHours": "string",
    "sn": "string",
    "timeAboveBf": "number",
    "timeAboveFlt": "number",
    "tsnCycle": "number",
    "tsnHours": "number",
    "useHoistLeft": "number",
    "useHoistRight": "number",
    "xcycleInput": "number"
};

const AmimsLogProcessReportDtoFields = {
    "adj1": "number",
    "adj2": "number",
    "adj3": "number",
    "bugIndexLog": "number",
    "calculatedCycle": "string",
    "calculatedHours": "string",
    "cgPenalti": "string",
    "cycle": "number",
    "cycleBf": "number",
    "cycleCf": "number",
    "cycleFlight": "number",
    "factor1": "number",
    "factor2": "number",
    "factor3": "number",
    "fullCycleBf": "number",
    "fullCycleFlt": "number",
    "hasFor": "string",
    "hasUpdate": "number",
    "hoistLeft": "number",
    "hoistOperation": "string",
    "hoistRight": "number",
    "hoistUsage": "number",
    "hours": "number",
    "hoursBf": "number",
    "hoursCf": "number",
    "hoursFlight": "number",
    "idLogProcess": "string",
    "idMpart": "string",
    "idPart": "string",
    "idPartInstall": "string",
    "idTechLog": "string",
    "landings": "number",
    "mpart": "string",
    "n1": "number",
    "n2": "number",
    "parent": "string",
    "part": "string",
    "partCycleBf": "number",
    "partCycleFlt": "number",
    "rumusCycle": "string",
    "rumusHours": "string",
    "sn": "string",
    "timeAboveBf": "number",
    "timeAboveFlt": "number",
    "tsnCycle": "number",
    "tsnHours": "number",
    "useHoistLeft": "number",
    "useHoistRight": "number",
    "xcycleInput": "number"
};

const AmimsLogProcessWidgetDtoFields = {
    "adj1": "number",
    "adj2": "number",
    "adj3": "number",
    "bugIndexLog": "number",
    "calculatedCycle": "string",
    "calculatedHours": "string",
    "cgPenalti": "string",
    "cycle": "number",
    "cycleBf": "number",
    "cycleCf": "number",
    "cycleFlight": "number",
    "factor1": "number",
    "factor2": "number",
    "factor3": "number",
    "fullCycleBf": "number",
    "fullCycleFlt": "number",
    "hasFor": "string",
    "hasUpdate": "number",
    "hoistLeft": "number",
    "hoistOperation": "string",
    "hoistRight": "number",
    "hoistUsage": "number",
    "hours": "number",
    "hoursBf": "number",
    "hoursCf": "number",
    "hoursFlight": "number",
    "idLogProcess": "string",
    "idMpart": "string",
    "idPart": "string",
    "idPartInstall": "string",
    "idTechLog": "string",
    "landings": "number",
    "n1": "number",
    "n2": "number",
    "parent": "string",
    "partCycleBf": "number",
    "partCycleFlt": "number",
    "rumusCycle": "string",
    "rumusHours": "string",
    "sn": "string",
    "timeAboveBf": "number",
    "timeAboveFlt": "number",
    "total": "number",
    "tsnCycle": "number",
    "tsnHours": "number",
    "useHoistLeft": "number",
    "useHoistRight": "number",
    "xcycleInput": "number"
};

const AmimsLogSpDtoFields = {
    "createdAt": "string",
    "dateClose": "string",
    "desk": "string",
    "hasId": "string",
    "id": "string",
    "idLogSp": "string",
    "name": "string",
    "param1": "string",
    "param2": "string",
    "sp": "string",
    "status": "string"
};

const AmimsLogSpReportDtoFields = {
    "createdAt": "string",
    "dateClose": "string",
    "desk": "string",
    "hasId": "string",
    "id": "string",
    "idLogSp": "string",
    "name": "string",
    "param1": "string",
    "param2": "string",
    "sp": "string",
    "status": "string"
};

const AmimsLogSpWidgetDtoFields = {
    "createdAt": "string",
    "dateClose": "string",
    "desk": "string",
    "hasId": "string",
    "id": "string",
    "idLogSp": "string",
    "name": "string",
    "param1": "string",
    "param2": "string",
    "sp": "string",
    "status": "string",
    "total": "number"
};

const AmimsLogTransferDtoFields = {
    "dateTransfer": "string",
    "fromIdPart": "string",
    "fromSite": "string",
    "idLogTransfer": "string",
    "idMpart": "string",
    "idUser": "string",
    "issingle": "string",
    "qty": "number",
    "toIdPart": "string",
    "toSite": "number"
};

const AmimsLogTransferReportDtoFields = {
    "dateTransfer": "string",
    "fromIdPart": "string",
    "fromSite": "string",
    "idLogTransfer": "string",
    "idMpart": "string",
    "idUser": "string",
    "issingle": "string",
    "mpart": "string",
    "qty": "number",
    "toIdPart": "string",
    "toSite": "number"
};

const AmimsLogTransferWidgetDtoFields = {
    "dateTransfer": "string",
    "fromIdPart": "string",
    "fromSite": "string",
    "idLogTransfer": "string",
    "idMpart": "string",
    "idUser": "string",
    "issingle": "string",
    "qty": "number",
    "toIdPart": "string",
    "toSite": "number",
    "total": "number"
};

const AmimsLogTsnTsoDtoFields = {
    "batasId": "string",
    "createdAt": "string",
    "cycle": "number",
    "hours": "number",
    "idLogTsnTso": "string",
    "idPart": "string",
    "idTechLog": "string",
    "tsnC": "number",
    "tsnH": "number",
    "tsoC": "number",
    "tsoH": "number"
};

const AmimsLogTsnTsoReportDtoFields = {
    "batasId": "string",
    "createdAt": "string",
    "cycle": "number",
    "hours": "number",
    "idLogTsnTso": "string",
    "idPart": "string",
    "idTechLog": "string",
    "part": "string",
    "tsnC": "number",
    "tsnH": "number",
    "tsoC": "number",
    "tsoH": "number"
};

const AmimsLogTsnTsoWidgetDtoFields = {
    "batasId": "string",
    "createdAt": "string",
    "cycle": "number",
    "hours": "number",
    "idLogTsnTso": "string",
    "idPart": "string",
    "idTechLog": "string",
    "total": "number",
    "tsnC": "number",
    "tsnH": "number",
    "tsoC": "number",
    "tsoH": "number"
};

const AmimsLogUserDtoFields = {
    "dateLog": "string",
    "idLogUser": "string",
    "idUser": "string",
    "method": "string",
    "methodValue": "string",
    "typeIdKey": "string",
    "typeLog": "string",
    "typeValue": "string",
    "typeWork": "string"
};

const AmimsMaintenanceCodeDtoFields = {
    "classification": "string",
    "createdAt": "string",
    "descriptionMaintenance": "string",
    "idMaintenanceCode": "string",
    "isDeleted": "number",
    "maintenanceCode": "string",
    "oldId": "string",
    "reference": "string",
    "updatedAt": "string"
};

const AmimsMaintenanceCodeFormIssuedDtoFields = {
    "idLibFormIssued": "string",
    "idMaintenanceCode": "string",
    "idMaintenanceCodeFormIssued": "string"
};

const AmimsMaintenanceCodeReferenceDtoFields = {
    "idLibReference": "string",
    "idMaintenanceCode": "string",
    "idMaintenanceCodeReference": "string"
};

const AmimsMaintenanceCodeReportDtoFields = {
    "classification": "string",
    "createdAt": "string",
    "descriptionMaintenance": "string",
    "idMaintenanceCode": "string",
    "isDeleted": "number",
    "maintenanceCode": "string",
    "oldId": "string",
    "reference": "string",
    "updatedAt": "string"
};

const AmimsMaintenanceCodeWidgetDtoFields = {
    "classification": "string",
    "createdAt": "string",
    "descriptionMaintenance": "string",
    "idMaintenanceCode": "string",
    "isDeleted": "number",
    "maintenanceCode": "string",
    "oldId": "string",
    "reference": "string",
    "total": "number",
    "updatedAt": "string"
};

const AmimsMaintenanceDocumentDtoFields = {
    "createdAt": "string",
    "documentTitle": "string",
    "documentType": "string",
    "idMaintenance": "string",
    "idMaintenanceDocument": "string",
    "revision": "string",
    "statusAktif": "string",
    "updatedAt": "string"
};

const AmimsMaintenanceDtoFields = {
    "atachapter": "string",
    "createdAt": "string",
    "cycleFrom": "number",
    "cycleTo": "number",
    "flightHoursFrom": "number",
    "flightHoursTo": "number",
    "idMaintenance": "string",
    "idMaintenanceCode": "string",
    "idMpart": "string",
    "idUser": "string",
    "noteMaintenance": "string",
    "oldId": "string",
    "onLocation": "string",
    "repetitions": "number",
    "timeRangeForm": "number",
    "timeRangeTo": "number",
    "timeUnit": "string",
    "typeMaintenance": "string",
    "updatedAt": "string"
};

const AmimsMaintenanceMaterialDtoFields = {
    "createdAt": "string",
    "idMaintenance": "string",
    "idMaintenanceMaterial": "string",
    "idMpart": "string",
    "isSpecialTool": "boolean",
    "itemName": "string",
    "itemType": "string",
    "partNumber": "string",
    "quantity": "number",
    "status": "string",
    "toolCode": "string",
    "unit": "string",
    "updatedAt": "string"
};

const AmimsMaintenanceReportDtoFields = {
    "atachapter": "string",
    "createdAt": "string",
    "cycleFrom": "number",
    "cycleTo": "number",
    "flightHoursFrom": "number",
    "flightHoursTo": "number",
    "idMaintenance": "string",
    "idMaintenanceCode": "string",
    "idMpart": "string",
    "idUser": "string",
    "mpart": "string",
    "noteMaintenance": "string",
    "oldId": "string",
    "onLocation": "string",
    "repetitions": "number",
    "timeRangeForm": "number",
    "timeRangeTo": "number",
    "timeUnit": "string",
    "typeMaintenance": "string",
    "updatedAt": "string"
};

const AmimsMaintenanceWidgetDtoFields = {
    "atachapter": "string",
    "createdAt": "string",
    "cycleFrom": "number",
    "cycleTo": "number",
    "flightHoursFrom": "number",
    "flightHoursTo": "number",
    "idMaintenance": "string",
    "idMaintenanceCode": "string",
    "idMpart": "string",
    "idUser": "string",
    "noteMaintenance": "string",
    "oldId": "string",
    "onLocation": "string",
    "repetitions": "number",
    "timeRangeForm": "number",
    "timeRangeTo": "number",
    "timeUnit": "string",
    "total": "number",
    "typeMaintenance": "string",
    "updatedAt": "string"
};

const AmimsMcurrencyDtoFields = {
    "code": "string",
    "createdAt": "string",
    "currency": "string",
    "idMcurrency": "string",
    "isDeleted": "number",
    "statusCurrency": "string",
    "updatedAt": "string",
    "usdRate": "number"
};

const AmimsMelDtoFields = {
    "day": "number",
    "descriptionMel": "string",
    "idMel": "string",
    "mel": "string"
};

const AmimsMpartDtoFields = {
    "calculatedCycle": "string",
    "calculatedHours": "string",
    "childname": "string",
    "codeAtaMentah": "string",
    "createdAt": "string",
    "descriptionMpart": "string",
    "forAc": "number",
    "idAta": "string",
    "idConditionMonitoring": "string",
    "idGroup": "string",
    "idLifeTimeLimit": "string",
    "idMpart": "string",
    "idPartCategory": "string",
    "idPartid": "string",
    "isDeleted": "number",
    "isMandatory": "string",
    "ismayor": "string",
    "keyword": "string",
    "lastPrice": "number",
    "lastPriceCurrency": "string",
    "lifeLimitCycle": "number",
    "lifeLimitHours": "number",
    "lifeLimitVal": "number",
    "lifeLimitVar": "string",
    "manufactureMpart": "string",
    "mat_82": "string",
    "mfigureIndex": "string",
    "minQty": "number",
    "mitemIndex": "string",
    "mtboCycle": "number",
    "mtboHours": "number",
    "mtboVal": "number",
    "mtboVar": "string",
    "oldAtachapter": "string",
    "oldId": "string",
    "parent": "string",
    "partNumber": "string",
    "partname": "string",
    "refMel": "string",
    "statusMpart": "string",
    "unit": "string",
    "updatedAt": "string"
};

const AmimsMpartReportDtoFields = {
    "ata": "string",
    "calculatedCycle": "string",
    "calculatedHours": "string",
    "childname": "string",
    "codeAtaMentah": "string",
    "createdAt": "string",
    "descriptionMpart": "string",
    "forAc": "number",
    "idAta": "string",
    "idConditionMonitoring": "string",
    "idGroup": "string",
    "idLifeTimeLimit": "string",
    "idMpart": "string",
    "idPartCategory": "string",
    "idPartid": "string",
    "isDeleted": "number",
    "isMandatory": "string",
    "ismayor": "string",
    "keyword": "string",
    "lastPrice": "number",
    "lastPriceCurrency": "string",
    "lifeLimitCycle": "number",
    "lifeLimitHours": "number",
    "lifeLimitVal": "number",
    "lifeLimitVar": "string",
    "manufactureMpart": "string",
    "mat_82": "string",
    "mfigureIndex": "string",
    "minQty": "number",
    "mitemIndex": "string",
    "mtboCycle": "number",
    "mtboHours": "number",
    "mtboVal": "number",
    "mtboVar": "string",
    "oldAtachapter": "string",
    "oldId": "string",
    "parent": "string",
    "partNumber": "string",
    "partid": "string",
    "partname": "string",
    "refMel": "string",
    "statusMpart": "string",
    "unit": "string",
    "updatedAt": "string"
};

const AmimsMpartWidgetDtoFields = {
    "calculatedCycle": "string",
    "calculatedHours": "string",
    "childname": "string",
    "codeAtaMentah": "string",
    "createdAt": "string",
    "descriptionMpart": "string",
    "forAc": "number",
    "idAta": "string",
    "idConditionMonitoring": "string",
    "idGroup": "string",
    "idLifeTimeLimit": "string",
    "idMpart": "string",
    "idPartCategory": "string",
    "idPartid": "string",
    "isDeleted": "number",
    "isMandatory": "string",
    "ismayor": "string",
    "keyword": "string",
    "lastPrice": "number",
    "lastPriceCurrency": "string",
    "lifeLimitCycle": "number",
    "lifeLimitHours": "number",
    "lifeLimitVal": "number",
    "lifeLimitVar": "string",
    "manufactureMpart": "string",
    "mat_82": "string",
    "mfigureIndex": "string",
    "minQty": "number",
    "mitemIndex": "string",
    "mtboCycle": "number",
    "mtboHours": "number",
    "mtboVal": "number",
    "mtboVar": "string",
    "oldAtachapter": "string",
    "oldId": "string",
    "parent": "string",
    "partNumber": "string",
    "partname": "string",
    "refMel": "string",
    "statusMpart": "string",
    "total": "number",
    "unit": "string",
    "updatedAt": "string"
};

const AmimsMpcGseDtoFields = {
    "createdAt": "string",
    "dateGse": "string",
    "idEngineerRti": "string",
    "idMpcGse": "string",
    "idUserGse": "string",
    "noteGse": "string",
    "statusGse": "string",
    "updatedAt": "string"
};

const AmimsMpcGseReportDtoFields = {
    "createdAt": "string",
    "dateGse": "string",
    "idEngineerRti": "string",
    "idMpcGse": "string",
    "idUserGse": "string",
    "noteGse": "string",
    "statusGse": "string",
    "updatedAt": "string"
};

const AmimsMpcGseWidgetDtoFields = {
    "createdAt": "string",
    "dateGse": "string",
    "idEngineerRti": "string",
    "idMpcGse": "string",
    "idUserGse": "string",
    "noteGse": "string",
    "statusGse": "string",
    "total": "number",
    "updatedAt": "string"
};

const AmimsMpcJoDtoFields = {
    "action": "string",
    "compliteCycle": "number",
    "compliteDate": "string",
    "compliteHours": "number",
    "createdAt": "string",
    "customIssued": "string",
    "customJob": "string",
    "customRef": "string",
    "cycleFrom": "number",
    "cycleTo": "number",
    "dateJo": "string",
    "hourseFrom": "number",
    "hourseTo": "number",
    "idDueList": "string",
    "idMaintenance": "string",
    "idMpcJo": "string",
    "idPart": "string",
    "idTechLog": "string",
    "idTypeOfwork": "string",
    "idUser": "string",
    "isPriority": "string",
    "noteJo": "string",
    "numberJo": "string",
    "onAircraft": "string",
    "onSite": "number",
    "originalCycle": "number",
    "originalDate": "string",
    "originalHours": "number",
    "parentAss": "string",
    "reference": "string",
    "roflag": "string",
    "statusJo": "string",
    "timeRangeFrom": "number",
    "timeRangeTo": "number",
    "updatedAt": "string",
    "workDue": "string"
};

const AmimsMpcJoOperatorDtoFields = {
    "idMpcJo": "string",
    "idMpcJoOperator": "string",
    "idOperator": "string",
    "jobDesc": "string",
    "operator": "string",
    "position": "string"
};

const AmimsMpcJoOperatorReportDtoFields = {
    "idMpcJo": "string",
    "idMpcJoOperator": "string",
    "idOperator": "string",
    "jobDesc": "string",
    "operator": "string",
    "position": "string"
};

const AmimsMpcJoOperatorWidgetDtoFields = {
    "idMpcJo": "string",
    "idMpcJoOperator": "string",
    "idOperator": "string",
    "jobDesc": "string",
    "operator": "string",
    "position": "string",
    "total": "number"
};

const AmimsMpcJoReportDtoFields = {
    "action": "string",
    "compliteCycle": "number",
    "compliteDate": "string",
    "compliteHours": "number",
    "createdAt": "string",
    "customIssued": "string",
    "customJob": "string",
    "customRef": "string",
    "cycleFrom": "number",
    "cycleTo": "number",
    "dateJo": "string",
    "hourseFrom": "number",
    "hourseTo": "number",
    "idDueList": "string",
    "idMaintenance": "string",
    "idMpcJo": "string",
    "idPart": "string",
    "idTechLog": "string",
    "idTypeOfwork": "string",
    "idUser": "string",
    "isPriority": "string",
    "maintenance": "string",
    "noteJo": "string",
    "numberJo": "string",
    "onAircraft": "string",
    "onSite": "number",
    "originalCycle": "number",
    "originalDate": "string",
    "originalHours": "number",
    "parentAss": "string",
    "part": "string",
    "reference": "string",
    "roflag": "string",
    "statusJo": "string",
    "timeRangeFrom": "number",
    "timeRangeTo": "number",
    "updatedAt": "string",
    "workDue": "string"
};

const AmimsMpcJoWidgetDtoFields = {
    "action": "string",
    "compliteCycle": "number",
    "compliteDate": "string",
    "compliteHours": "number",
    "createdAt": "string",
    "customIssued": "string",
    "customJob": "string",
    "customRef": "string",
    "cycleFrom": "number",
    "cycleTo": "number",
    "dateJo": "string",
    "hourseFrom": "number",
    "hourseTo": "number",
    "idDueList": "string",
    "idMaintenance": "string",
    "idMpcJo": "string",
    "idPart": "string",
    "idTechLog": "string",
    "idTypeOfwork": "string",
    "idUser": "string",
    "isPriority": "string",
    "noteJo": "string",
    "numberJo": "string",
    "onAircraft": "string",
    "onSite": "number",
    "originalCycle": "number",
    "originalDate": "string",
    "originalHours": "number",
    "parentAss": "string",
    "reference": "string",
    "roflag": "string",
    "statusJo": "string",
    "timeRangeFrom": "number",
    "timeRangeTo": "number",
    "total": "number",
    "updatedAt": "string",
    "workDue": "string"
};

const AmimsMpcPiroDtoFields = {
    "createdAt": "string",
    "dateAcc": "string",
    "datePiro": "string",
    "description": "string",
    "idAircraft": "string",
    "idMpcPiro": "string",
    "idSite": "string",
    "idUser": "string",
    "idUserAcc": "string",
    "isDeleted": "number",
    "keyword": "string",
    "noIndex": "number",
    "notePiro": "string",
    "numberPiro": "string",
    "statusPiro": "string",
    "typePiro": "string",
    "updatedAt": "string",
    "validasi": "number"
};

const AmimsMpcPiroItemDtoFields = {
    "createdAt": "string",
    "forFigureIndex": "string",
    "idMpart": "string",
    "idMpcPiro": "string",
    "idMpcPiroItem": "string",
    "isDeleted": "number",
    "noteItemPiro": "string",
    "priority": "string",
    "qtyPiro": "number",
    "statusItem": "string",
    "updatedAt": "string"
};

const AmimsMpcPiroItemReportDtoFields = {
    "createdAt": "string",
    "forFigureIndex": "string",
    "idMpart": "string",
    "idMpcPiro": "string",
    "idMpcPiroItem": "string",
    "isDeleted": "number",
    "mpart": "string",
    "noteItemPiro": "string",
    "priority": "string",
    "qtyPiro": "number",
    "statusItem": "string",
    "updatedAt": "string"
};

const AmimsMpcPiroItemWidgetDtoFields = {
    "createdAt": "string",
    "forFigureIndex": "string",
    "idMpart": "string",
    "idMpcPiro": "string",
    "idMpcPiroItem": "string",
    "isDeleted": "number",
    "noteItemPiro": "string",
    "priority": "string",
    "qtyPiro": "number",
    "statusItem": "string",
    "total": "number",
    "updatedAt": "string"
};

const AmimsMpcPiroReportDtoFields = {
    "aircraft": "string",
    "createdAt": "string",
    "dateAcc": "string",
    "datePiro": "string",
    "description": "string",
    "idAircraft": "string",
    "idMpcPiro": "string",
    "idSite": "string",
    "idUser": "string",
    "idUserAcc": "string",
    "isDeleted": "number",
    "keyword": "string",
    "noIndex": "number",
    "notePiro": "string",
    "numberPiro": "string",
    "site": "string",
    "statusPiro": "string",
    "typePiro": "string",
    "updatedAt": "string",
    "validasi": "number"
};

const AmimsMpcPiroWidgetDtoFields = {
    "createdAt": "string",
    "dateAcc": "string",
    "datePiro": "string",
    "description": "string",
    "idAircraft": "string",
    "idMpcPiro": "string",
    "idSite": "string",
    "idUser": "string",
    "idUserAcc": "string",
    "isDeleted": "number",
    "keyword": "string",
    "noIndex": "number",
    "notePiro": "string",
    "numberPiro": "string",
    "statusPiro": "string",
    "total": "number",
    "typePiro": "string",
    "updatedAt": "string",
    "validasi": "number"
};

const AmimsMpcSelfMaintenanceDtoFields = {
    "createdAt": "string",
    "dateAccQa": "string",
    "dateMaintenance": "string",
    "doc": "string",
    "idEngineerRti": "string",
    "idMpcSelfMaintenance": "string",
    "idSite": "string",
    "idUserMaintenance": "string",
    "idUserQa": "string",
    "numberMaintenance": "string",
    "reportMaintenance": "string",
    "statusMaintenance": "string",
    "typeMaintenance": "string",
    "updatedAt": "string"
};

const AmimsMpcSelfMaintenanceReportDtoFields = {
    "createdAt": "string",
    "dateAccQa": "string",
    "dateMaintenance": "string",
    "doc": "string",
    "idEngineerRti": "string",
    "idMpcSelfMaintenance": "string",
    "idSite": "string",
    "idUserMaintenance": "string",
    "idUserQa": "string",
    "numberMaintenance": "string",
    "reportMaintenance": "string",
    "site": "string",
    "statusMaintenance": "string",
    "typeMaintenance": "string",
    "updatedAt": "string"
};

const AmimsMpcSelfMaintenanceWidgetDtoFields = {
    "createdAt": "string",
    "dateAccQa": "string",
    "dateMaintenance": "string",
    "doc": "string",
    "idEngineerRti": "string",
    "idMpcSelfMaintenance": "string",
    "idSite": "string",
    "idUserMaintenance": "string",
    "idUserQa": "string",
    "numberMaintenance": "string",
    "reportMaintenance": "string",
    "statusMaintenance": "string",
    "total": "number",
    "typeMaintenance": "string",
    "updatedAt": "string"
};

const AmimsMpcWpDtoFields = {
    "createdAt": "string",
    "dateAcc": "string",
    "endDateWp": "string",
    "endHours": "number",
    "engineEnd": "string",
    "engineStart": "string",
    "idAircraft": "string",
    "idMpcWp": "string",
    "idUserMm": "string",
    "idUserMpc": "string",
    "noteWp": "string",
    "numberWp": "string",
    "onSite": "number",
    "period": "string",
    "periodYear": "number",
    "place": "string",
    "reason": "string",
    "startDateWp": "string",
    "startHours": "number",
    "statusWp": "string",
    "typeWork": "string",
    "updatedAt": "string",
    "validated": "number"
};

const AmimsMpcWpReportDtoFields = {
    "aircraft": "string",
    "createdAt": "string",
    "dateAcc": "string",
    "endDateWp": "string",
    "endHours": "number",
    "engineEnd": "string",
    "engineStart": "string",
    "idAircraft": "string",
    "idMpcWp": "string",
    "idUserMm": "string",
    "idUserMpc": "string",
    "noteWp": "string",
    "numberWp": "string",
    "onSite": "number",
    "period": "string",
    "periodYear": "number",
    "place": "string",
    "reason": "string",
    "startDateWp": "string",
    "startHours": "number",
    "statusWp": "string",
    "typeWork": "string",
    "updatedAt": "string",
    "validated": "number"
};

const AmimsMpcWpWidgetDtoFields = {
    "createdAt": "string",
    "dateAcc": "string",
    "endDateWp": "string",
    "endHours": "number",
    "engineEnd": "string",
    "engineStart": "string",
    "idAircraft": "string",
    "idMpcWp": "string",
    "idUserMm": "string",
    "idUserMpc": "string",
    "noteWp": "string",
    "numberWp": "string",
    "onSite": "number",
    "period": "string",
    "periodYear": "number",
    "place": "string",
    "reason": "string",
    "startDateWp": "string",
    "startHours": "number",
    "statusWp": "string",
    "total": "number",
    "typeWork": "string",
    "updatedAt": "string",
    "validated": "number"
};

const AmimsPartActypeDtoFields = {
    "createdAt": "string",
    "idActype": "string",
    "idActypeOld": "string",
    "idMpart": "string",
    "idPartActype": "string",
    "updatedAt": "string"
};

const AmimsPartActypeReportDtoFields = {
    "actype": "string",
    "createdAt": "string",
    "idActype": "string",
    "idActypeOld": "string",
    "idMpart": "string",
    "idPartActype": "string",
    "mpart": "string",
    "updatedAt": "string"
};

const AmimsPartActypeWidgetDtoFields = {
    "createdAt": "string",
    "idActype": "string",
    "idActypeOld": "string",
    "idMpart": "string",
    "idPartActype": "string",
    "total": "number",
    "updatedAt": "string"
};

const AmimsPartAlternativeDtoFields = {
    "forMpart": "string",
    "idMpart": "string",
    "idPartAlternative": "string"
};

const AmimsPartAlternativeReportDtoFields = {
    "forMpart": "string",
    "idMpart": "string",
    "idPartAlternative": "string",
    "mpart": "string"
};

const AmimsPartAlternativeWidgetDtoFields = {
    "forMpart": "string",
    "idMpart": "string",
    "idPartAlternative": "string",
    "total": "number"
};

const AmimsPartAtaDtoFields = {
    "figure": "string",
    "idAta": "string",
    "idMpart": "string",
    "idPartAta": "string",
    "item": "string"
};

const AmimsPartAtaReportDtoFields = {
    "ata": "string",
    "figure": "string",
    "idAta": "string",
    "idMpart": "string",
    "idPartAta": "string",
    "item": "string",
    "mpart": "string"
};

const AmimsPartAtaWidgetDtoFields = {
    "figure": "string",
    "idAta": "string",
    "idMpart": "string",
    "idPartAta": "string",
    "item": "string",
    "total": "number"
};

const AmimsPartCategoryDtoFields = {
    "category": "string",
    "createdAt": "string",
    "descriptionCat": "string",
    "idPartCategory": "string",
    "isDeleted": "number",
    "parentCat": "number",
    "updatedAt": "string"
};

const AmimsPartCategoryReportDtoFields = {
    "category": "string",
    "createdAt": "string",
    "descriptionCat": "string",
    "idPartCategory": "string",
    "isDeleted": "number",
    "parentCat": "number",
    "updatedAt": "string"
};

const AmimsPartCategoryWidgetDtoFields = {
    "category": "string",
    "createdAt": "string",
    "descriptionCat": "string",
    "idPartCategory": "string",
    "isDeleted": "number",
    "parentCat": "number",
    "total": "number",
    "updatedAt": "string"
};

const AmimsPartConditionDtoFields = {
    "childnamePartCondition": "string",
    "idPartCondition": "string",
    "isDeleted": "number",
    "partCondition": "string"
};

const AmimsPartConditionReportDtoFields = {
    "childnamePartCondition": "string",
    "idPartCondition": "string",
    "isDeleted": "number",
    "partCondition": "string"
};

const AmimsPartConditionWidgetDtoFields = {
    "childnamePartCondition": "string",
    "idPartCondition": "string",
    "isDeleted": "number",
    "partCondition": "string",
    "total": "number"
};

const AmimsPartDtoFields = {
    "bin": "string",
    "certificationNo": "string",
    "createdAt": "string",
    "dateOrder": "string",
    "endOfLife": "string",
    "firstInstallC": "number",
    "firstInstallDate": "string",
    "firstInstallH": "number",
    "groupStatus": "string",
    "idConditionMonitoring": "string",
    "idCurrency": "string",
    "idLifeTimeLimit": "string",
    "idMpart": "string",
    "idPart": "string",
    "idPartCondition": "string",
    "idPurGrn": "string",
    "idPurPoItem": "string",
    "idPurPrcl": "string",
    "idPurVendor": "string",
    "idSite": "string",
    "idTypeOfwork": "string",
    "idUser": "string",
    "idWarranty": "string",
    "isDeleted": "number",
    "lifeLimitCycle": "number",
    "lifeLimitHours": "number",
    "lifeLimitVal": "number",
    "lifeLimitVar": "string",
    "manufacture": "string",
    "manufactureDate": "string",
    "newFirstInstallH": "number",
    "oldId": "string",
    "oldParent": "string",
    "partParent": "string",
    "position": "string",
    "price": "number",
    "purchaseDate": "string",
    "qty": "number",
    "sn": "string",
    "startInstallC": "number",
    "startInstallDate": "string",
    "startInstallH": "number",
    "statusOnInventory": "string",
    "tbiCycle": "number",
    "tbiHours": "number",
    "tbiVal": "number",
    "tbiVar": "string",
    "tboCycle": "number",
    "tboHours": "number",
    "tboVal": "number",
    "tboVar": "string",
    "tempUse": "number",
    "tsiCycle": "number",
    "tsiHours": "number",
    "tsiVal": "number",
    "tsiVar": "string",
    "tsnCycle": "number",
    "tsnHours": "number",
    "tsnVal": "number",
    "tsnVar": "string",
    "tsoCycle": "number",
    "tsoHours": "number",
    "tsoVal": "number",
    "tsoVar": "string",
    "updatedAt": "string",
    "useableStatus": "string",
    "warrantyCycle": "number",
    "warrantyDays": "number",
    "warrantyHours": "number",
    "warrantyStartCycle": "number",
    "warrantyStartDate": "string",
    "warrantyVal": "number",
    "warrantyYears": "number"
};

const AmimsPartFigureIndexDtoFields = {
    "createdAt": "string",
    "figureIndex": "string",
    "idAta": "string",
    "idMpart": "string",
    "idPartFigureIndex": "string",
    "itemIndex": "string",
    "updatedAt": "string"
};

const AmimsPartFigureIndexReportDtoFields = {
    "ata": "string",
    "createdAt": "string",
    "figureIndex": "string",
    "idAta": "string",
    "idMpart": "string",
    "idPartFigureIndex": "string",
    "itemIndex": "string",
    "mpart": "string",
    "updatedAt": "string"
};

const AmimsPartFigureIndexWidgetDtoFields = {
    "createdAt": "string",
    "figureIndex": "string",
    "idAta": "string",
    "idMpart": "string",
    "idPartFigureIndex": "string",
    "itemIndex": "string",
    "total": "number",
    "updatedAt": "string"
};

const AmimsPartInstallDtoFields = {
    "bin": "string",
    "createdAt": "string",
    "dateInstall": "string",
    "dueOverhaulC": "number",
    "dueOverhaulH": "number",
    "dueOverhaulValue": "number",
    "figureIndex": "string",
    "idAircraft": "string",
    "idEngineerPrisItem": "string",
    "idPart": "string",
    "idPartInstall": "string",
    "installedOverhaulC": "number",
    "installedOverhaulH": "number",
    "installedOverhaulValue": "number",
    "installedParentC": "number",
    "installedParentH": "number",
    "installedParentValue": "number",
    "installedTsnC": "number",
    "installedTsnH": "number",
    "isfeatured": "string",
    "itemIndex": "string",
    "newParen": "string",
    "oldId": "string",
    "oldIdPart": "string",
    "oldParent": "string",
    "onPris": "string",
    "parent": "string",
    "qtyInstall": "number",
    "refTechLog": "string",
    "statusInstall": "string",
    "topParent": "string",
    "updatedAt": "string"
};

const AmimsPartInstallOldDtoFields = {
    "bin": "string",
    "createdAt": "string",
    "dateInstall": "string",
    "dueOverhaulC": "number",
    "dueOverhaulH": "number",
    "dueOverhaulValue": "number",
    "figureIndex": "string",
    "idAircraft": "string",
    "idEngineerPrisItem": "string",
    "idPart": "string",
    "idPartInstall": "string",
    "idPartInstallOld": "string",
    "installedInspectionC": "number",
    "installedInspectionH": "number",
    "installedInspectionValue": "number",
    "installedOverhaulC": "number",
    "installedOverhaulH": "number",
    "installedOverhaulValue": "number",
    "isfeatured": "string",
    "itemIndex": "string",
    "oldId": "string",
    "parent": "string",
    "qtyInstall": "number",
    "statusInstall": "string",
    "updatedAt": "string"
};

const AmimsPartInstallOldReportDtoFields = {
    "aircraft": "string",
    "bin": "string",
    "createdAt": "string",
    "dateInstall": "string",
    "dueOverhaulC": "number",
    "dueOverhaulH": "number",
    "dueOverhaulValue": "number",
    "figureIndex": "string",
    "idAircraft": "string",
    "idEngineerPrisItem": "string",
    "idPart": "string",
    "idPartInstall": "string",
    "idPartInstallOld": "string",
    "installedInspectionC": "number",
    "installedInspectionH": "number",
    "installedInspectionValue": "number",
    "installedOverhaulC": "number",
    "installedOverhaulH": "number",
    "installedOverhaulValue": "number",
    "isfeatured": "string",
    "itemIndex": "string",
    "oldId": "string",
    "parent": "string",
    "part": "string",
    "qtyInstall": "number",
    "statusInstall": "string",
    "updatedAt": "string"
};

const AmimsPartInstallOldWidgetDtoFields = {
    "bin": "string",
    "createdAt": "string",
    "dateInstall": "string",
    "dueOverhaulC": "number",
    "dueOverhaulH": "number",
    "dueOverhaulValue": "number",
    "figureIndex": "string",
    "idAircraft": "string",
    "idEngineerPrisItem": "string",
    "idPart": "string",
    "idPartInstall": "string",
    "idPartInstallOld": "string",
    "installedInspectionC": "number",
    "installedInspectionH": "number",
    "installedInspectionValue": "number",
    "installedOverhaulC": "number",
    "installedOverhaulH": "number",
    "installedOverhaulValue": "number",
    "isfeatured": "string",
    "itemIndex": "string",
    "oldId": "string",
    "parent": "string",
    "qtyInstall": "number",
    "statusInstall": "string",
    "total": "number",
    "updatedAt": "string"
};

const AmimsPartInstallReportDtoFields = {
    "aircraft": "string",
    "bin": "string",
    "createdAt": "string",
    "dateInstall": "string",
    "dueOverhaulC": "number",
    "dueOverhaulH": "number",
    "dueOverhaulValue": "number",
    "figureIndex": "string",
    "idAircraft": "string",
    "idEngineerPrisItem": "string",
    "idPart": "string",
    "idPartInstall": "string",
    "installedOverhaulC": "number",
    "installedOverhaulH": "number",
    "installedOverhaulValue": "number",
    "installedParentC": "number",
    "installedParentH": "number",
    "installedParentValue": "number",
    "installedTsnC": "number",
    "installedTsnH": "number",
    "isfeatured": "string",
    "itemIndex": "string",
    "newParen": "string",
    "oldId": "string",
    "oldIdPart": "string",
    "oldParent": "string",
    "onPris": "string",
    "parent": "string",
    "part": "string",
    "qtyInstall": "number",
    "refTechLog": "string",
    "statusInstall": "string",
    "topParent": "string",
    "updatedAt": "string"
};

const AmimsPartInstallWidgetDtoFields = {
    "bin": "string",
    "createdAt": "string",
    "dateInstall": "string",
    "dueOverhaulC": "number",
    "dueOverhaulH": "number",
    "dueOverhaulValue": "number",
    "figureIndex": "string",
    "idAircraft": "string",
    "idEngineerPrisItem": "string",
    "idPart": "string",
    "idPartInstall": "string",
    "installedOverhaulC": "number",
    "installedOverhaulH": "number",
    "installedOverhaulValue": "number",
    "installedParentC": "number",
    "installedParentH": "number",
    "installedParentValue": "number",
    "installedTsnC": "number",
    "installedTsnH": "number",
    "isfeatured": "string",
    "itemIndex": "string",
    "newParen": "string",
    "oldId": "string",
    "oldIdPart": "string",
    "oldParent": "string",
    "onPris": "string",
    "parent": "string",
    "qtyInstall": "number",
    "refTechLog": "string",
    "statusInstall": "string",
    "topParent": "string",
    "total": "number",
    "updatedAt": "string"
};

const AmimsPartLogDtoFields = {
    "activity": "string",
    "createdAt": "string",
    "dateLog": "string",
    "fromModule": "string",
    "idModule": "string",
    "idPart": "string",
    "idPartLog": "string",
    "idPosition": "string",
    "idSite": "string",
    "idUser": "string",
    "numberModule": "string",
    "oldId": "string",
    "qtyLog": "number",
    "statusOnInventory": "string",
    "tboCycle": "number",
    "tboHours": "number",
    "tboVal": "number",
    "tboVar": "string",
    "toLocation": "string",
    "tsnCycle": "number",
    "tsnHours": "number",
    "tsnVal": "number",
    "tsnVar": "string",
    "tsoCycle": "number",
    "tsoHours": "number",
    "tsoVal": "number",
    "tsoVar": "string",
    "updatedAt": "string"
};

const AmimsPartLogReportDtoFields = {
    "activity": "string",
    "createdAt": "string",
    "dateLog": "string",
    "fromModule": "string",
    "idModule": "string",
    "idPart": "string",
    "idPartLog": "string",
    "idPosition": "string",
    "idSite": "string",
    "idUser": "string",
    "numberModule": "string",
    "oldId": "string",
    "part": "string",
    "position": "string",
    "qtyLog": "number",
    "site": "string",
    "statusOnInventory": "string",
    "tboCycle": "number",
    "tboHours": "number",
    "tboVal": "number",
    "tboVar": "string",
    "toLocation": "string",
    "tsnCycle": "number",
    "tsnHours": "number",
    "tsnVal": "number",
    "tsnVar": "string",
    "tsoCycle": "number",
    "tsoHours": "number",
    "tsoVal": "number",
    "tsoVar": "string",
    "updatedAt": "string"
};

const AmimsPartLogWidgetDtoFields = {
    "activity": "string",
    "createdAt": "string",
    "dateLog": "string",
    "fromModule": "string",
    "idModule": "string",
    "idPart": "string",
    "idPartLog": "string",
    "idPosition": "string",
    "idSite": "string",
    "idUser": "string",
    "numberModule": "string",
    "oldId": "string",
    "qtyLog": "number",
    "statusOnInventory": "string",
    "tboCycle": "number",
    "tboHours": "number",
    "tboVal": "number",
    "tboVar": "string",
    "toLocation": "string",
    "total": "number",
    "tsnCycle": "number",
    "tsnHours": "number",
    "tsnVal": "number",
    "tsnVar": "string",
    "tsoCycle": "number",
    "tsoHours": "number",
    "tsoVal": "number",
    "tsoVar": "string",
    "updatedAt": "string"
};

const AmimsPartReportDtoFields = {
    "bin": "string",
    "certificationNo": "string",
    "createdAt": "string",
    "currency": "string",
    "dateOrder": "string",
    "endOfLife": "string",
    "firstInstallC": "number",
    "firstInstallDate": "string",
    "firstInstallH": "number",
    "groupStatus": "string",
    "idConditionMonitoring": "string",
    "idCurrency": "string",
    "idLifeTimeLimit": "string",
    "idMpart": "string",
    "idPart": "string",
    "idPartCondition": "string",
    "idPurGrn": "string",
    "idPurPoItem": "string",
    "idPurPrcl": "string",
    "idPurVendor": "string",
    "idSite": "string",
    "idTypeOfwork": "string",
    "idUser": "string",
    "idWarranty": "string",
    "isDeleted": "number",
    "lifeLimitCycle": "number",
    "lifeLimitHours": "number",
    "lifeLimitVal": "number",
    "lifeLimitVar": "string",
    "manufacture": "string",
    "manufactureDate": "string",
    "mpart": "string",
    "newFirstInstallH": "number",
    "oldId": "string",
    "oldParent": "string",
    "partParent": "string",
    "position": "string",
    "price": "number",
    "purchaseDate": "string",
    "qty": "number",
    "site": "string",
    "sn": "string",
    "startInstallC": "number",
    "startInstallDate": "string",
    "startInstallH": "number",
    "statusOnInventory": "string",
    "tbiCycle": "number",
    "tbiHours": "number",
    "tbiVal": "number",
    "tbiVar": "string",
    "tboCycle": "number",
    "tboHours": "number",
    "tboVal": "number",
    "tboVar": "string",
    "tempUse": "number",
    "tsiCycle": "number",
    "tsiHours": "number",
    "tsiVal": "number",
    "tsiVar": "string",
    "tsnCycle": "number",
    "tsnHours": "number",
    "tsnVal": "number",
    "tsnVar": "string",
    "tsoCycle": "number",
    "tsoHours": "number",
    "tsoVal": "number",
    "tsoVar": "string",
    "updatedAt": "string",
    "useableStatus": "string",
    "warranty": "string",
    "warrantyCycle": "number",
    "warrantyDays": "number",
    "warrantyHours": "number",
    "warrantyStartCycle": "number",
    "warrantyStartDate": "string",
    "warrantyVal": "number",
    "warrantyYears": "number"
};

const AmimsPartWidgetDtoFields = {
    "bin": "string",
    "certificationNo": "string",
    "createdAt": "string",
    "dateOrder": "string",
    "endOfLife": "string",
    "firstInstallC": "number",
    "firstInstallDate": "string",
    "firstInstallH": "number",
    "groupStatus": "string",
    "idConditionMonitoring": "string",
    "idCurrency": "string",
    "idLifeTimeLimit": "string",
    "idMpart": "string",
    "idPart": "string",
    "idPartCondition": "string",
    "idPurGrn": "string",
    "idPurPoItem": "string",
    "idPurPrcl": "string",
    "idPurVendor": "string",
    "idSite": "string",
    "idTypeOfwork": "string",
    "idUser": "string",
    "idWarranty": "string",
    "isDeleted": "number",
    "lifeLimitCycle": "number",
    "lifeLimitHours": "number",
    "lifeLimitVal": "number",
    "lifeLimitVar": "string",
    "manufacture": "string",
    "manufactureDate": "string",
    "newFirstInstallH": "number",
    "oldId": "string",
    "oldParent": "string",
    "partParent": "string",
    "position": "string",
    "price": "number",
    "purchaseDate": "string",
    "qty": "number",
    "sn": "string",
    "startInstallC": "number",
    "startInstallDate": "string",
    "startInstallH": "number",
    "statusOnInventory": "string",
    "tbiCycle": "number",
    "tbiHours": "number",
    "tbiVal": "number",
    "tbiVar": "string",
    "tboCycle": "number",
    "tboHours": "number",
    "tboVal": "number",
    "tboVar": "string",
    "tempUse": "number",
    "total": "number",
    "tsiCycle": "number",
    "tsiHours": "number",
    "tsiVal": "number",
    "tsiVar": "string",
    "tsnCycle": "number",
    "tsnHours": "number",
    "tsnVal": "number",
    "tsnVar": "string",
    "tsoCycle": "number",
    "tsoHours": "number",
    "tsoVal": "number",
    "tsoVar": "string",
    "updatedAt": "string",
    "useableStatus": "string",
    "warrantyCycle": "number",
    "warrantyDays": "number",
    "warrantyHours": "number",
    "warrantyStartCycle": "number",
    "warrantyStartDate": "string",
    "warrantyVal": "number",
    "warrantyYears": "number"
};

const AmimsPartidDtoFields = {
    "childnamePartid": "string",
    "description": "string",
    "idPartid": "string",
    "isDeleted": "number",
    "issingle": "string",
    "partid": "string"
};

const AmimsPartidReportDtoFields = {
    "childnamePartid": "string",
    "description": "string",
    "idPartid": "string",
    "isDeleted": "number",
    "issingle": "string",
    "partid": "string"
};

const AmimsPartidWidgetDtoFields = {
    "childnamePartid": "string",
    "description": "string",
    "idPartid": "string",
    "isDeleted": "number",
    "issingle": "string",
    "partid": "string",
    "total": "number"
};

const AmimsPilotDtoFields = {
    "createdAt": "string",
    "hashIdUser": "number",
    "idPilot": "string",
    "isDeleted": "number",
    "namePilot": "string",
    "status": "number",
    "type": "string",
    "updatedAt": "string"
};

const AmimsPilotReportDtoFields = {
    "createdAt": "string",
    "hashIdUser": "number",
    "idPilot": "string",
    "isDeleted": "number",
    "namePilot": "string",
    "status": "number",
    "type": "string",
    "updatedAt": "string"
};

const AmimsPilotWidgetDtoFields = {
    "createdAt": "string",
    "hashIdUser": "number",
    "idPilot": "string",
    "isDeleted": "number",
    "namePilot": "string",
    "status": "number",
    "total": "number",
    "type": "string",
    "updatedAt": "string"
};

const AmimsPositionDtoFields = {
    "code": "string",
    "description": "string",
    "idPosition": "string",
    "isDeleted": "number",
    "position": "string"
};

const AmimsPositionReportDtoFields = {
    "code": "string",
    "description": "string",
    "idPosition": "string",
    "isDeleted": "number",
    "position": "string"
};

const AmimsPositionWidgetDtoFields = {
    "code": "string",
    "description": "string",
    "idPosition": "string",
    "isDeleted": "number",
    "position": "string",
    "total": "number"
};

const AmimsPurGrnDtoFields = {
    "createdAt": "string",
    "dateGrn": "string",
    "dateQa": "string",
    "dateQaClose": "string",
    "grnKe": "number",
    "idPurGrn": "string",
    "idPurVendor": "string",
    "idSite": "string",
    "idUser": "string",
    "isDeleted": "number",
    "noIndex": "number",
    "noteGrn": "string",
    "numberGrn": "string",
    "updatedAt": "string",
    "validasi": "number"
};

const AmimsPurGrnItemDtoFields = {
    "idMpart": "string",
    "idPart": "string",
    "idPurGrn": "string",
    "idPurGrnItem": "string",
    "idPurPoItem": "string",
    "noteGrnItem": "string",
    "qtyGrn": "number",
    "serialNumber": "string",
    "statusGrn": "string"
};

const AmimsPurGrnItemReportDtoFields = {
    "idMpart": "string",
    "idPart": "string",
    "idPurGrn": "string",
    "idPurGrnItem": "string",
    "idPurPoItem": "string",
    "mpart": "string",
    "noteGrnItem": "string",
    "part": "string",
    "qtyGrn": "number",
    "serialNumber": "string",
    "statusGrn": "string"
};

const AmimsPurGrnItemWidgetDtoFields = {
    "idMpart": "string",
    "idPart": "string",
    "idPurGrn": "string",
    "idPurGrnItem": "string",
    "idPurPoItem": "string",
    "noteGrnItem": "string",
    "qtyGrn": "number",
    "serialNumber": "string",
    "statusGrn": "string",
    "total": "number"
};

const AmimsPurGrnReportDtoFields = {
    "createdAt": "string",
    "dateGrn": "string",
    "dateQa": "string",
    "dateQaClose": "string",
    "grnKe": "number",
    "idPurGrn": "string",
    "idPurVendor": "string",
    "idSite": "string",
    "idUser": "string",
    "isDeleted": "number",
    "noIndex": "number",
    "noteGrn": "string",
    "numberGrn": "string",
    "site": "string",
    "updatedAt": "string",
    "validasi": "number"
};

const AmimsPurGrnWidgetDtoFields = {
    "createdAt": "string",
    "dateGrn": "string",
    "dateQa": "string",
    "dateQaClose": "string",
    "grnKe": "number",
    "idPurGrn": "string",
    "idPurVendor": "string",
    "idSite": "string",
    "idUser": "string",
    "isDeleted": "number",
    "noIndex": "number",
    "noteGrn": "string",
    "numberGrn": "string",
    "total": "number",
    "updatedAt": "string",
    "validasi": "number"
};

const AmimsPurPoDtoFields = {
    "approveDirector": "number",
    "createdAt": "string",
    "dateAcc": "string",
    "dateAccDirector": "string",
    "dateDeadline": "string",
    "datePo": "string",
    "idCurrency": "string",
    "idPosition": "string",
    "idPurPo": "string",
    "idPurVendor": "string",
    "idPurVendorContact": "string",
    "idSite": "string",
    "idUser": "string",
    "idUserDirector": "string",
    "idUserManager": "string",
    "isDeleted": "number",
    "modeOfTransport": "string",
    "noIndex": "number",
    "notePo": "string",
    "numberPo": "string",
    "oldPo": "string",
    "priceTotal": "number",
    "quotationDate": "string",
    "quotationNumber": "string",
    "shipping": "string",
    "statusPo": "string",
    "term": "string",
    "typePo": "string",
    "updatedAt": "string",
    "validasi": "number",
    "vat": "number"
};

const AmimsPurPoItemDtoFields = {
    "edd": "number",
    "idEngineerRti": "string",
    "idMpart": "string",
    "idPart": "string",
    "idPurPo": "string",
    "idPurPoItem": "string",
    "idPurPrItem": "string",
    "idPurPrcl": "string",
    "idQaRpd": "string",
    "notePoItem": "string",
    "oldPoItem": "string",
    "price": "number",
    "priorityPoItem": "string",
    "qtyPo": "number",
    "totalQtyGrn": "number",
    "tsnCycle": "number",
    "tsnHours": "number",
    "tsnVal": "number",
    "tsnVar": "string",
    "tsoCycle": "number",
    "tsoHours": "number",
    "tsoVal": "number",
    "tsoVar": "string",
    "warantyStartCycle": "number",
    "warantyStartDate": "string",
    "warantyStartDays": "number",
    "warantyStartHours": "number"
};

const AmimsPurPoItemReportDtoFields = {
    "edd": "number",
    "idEngineerRti": "string",
    "idMpart": "string",
    "idPart": "string",
    "idPurPo": "string",
    "idPurPoItem": "string",
    "idPurPrItem": "string",
    "idPurPrcl": "string",
    "idQaRpd": "string",
    "mpart": "string",
    "notePoItem": "string",
    "oldPoItem": "string",
    "part": "string",
    "price": "number",
    "priorityPoItem": "string",
    "qtyPo": "number",
    "totalQtyGrn": "number",
    "tsnCycle": "number",
    "tsnHours": "number",
    "tsnVal": "number",
    "tsnVar": "string",
    "tsoCycle": "number",
    "tsoHours": "number",
    "tsoVal": "number",
    "tsoVar": "string",
    "warantyStartCycle": "number",
    "warantyStartDate": "string",
    "warantyStartDays": "number",
    "warantyStartHours": "number"
};

const AmimsPurPoItemWidgetDtoFields = {
    "edd": "number",
    "idEngineerRti": "string",
    "idMpart": "string",
    "idPart": "string",
    "idPurPo": "string",
    "idPurPoItem": "string",
    "idPurPrItem": "string",
    "idPurPrcl": "string",
    "idQaRpd": "string",
    "notePoItem": "string",
    "oldPoItem": "string",
    "price": "number",
    "priorityPoItem": "string",
    "qtyPo": "number",
    "total": "number",
    "totalQtyGrn": "number",
    "tsnCycle": "number",
    "tsnHours": "number",
    "tsnVal": "number",
    "tsnVar": "string",
    "tsoCycle": "number",
    "tsoHours": "number",
    "tsoVal": "number",
    "tsoVar": "string",
    "warantyStartCycle": "number",
    "warantyStartDate": "string",
    "warantyStartDays": "number",
    "warantyStartHours": "number"
};

const AmimsPurPoReportDtoFields = {
    "approveDirector": "number",
    "createdAt": "string",
    "currency": "string",
    "dateAcc": "string",
    "dateAccDirector": "string",
    "dateDeadline": "string",
    "datePo": "string",
    "idCurrency": "string",
    "idPosition": "string",
    "idPurPo": "string",
    "idPurVendor": "string",
    "idPurVendorContact": "string",
    "idSite": "string",
    "idUser": "string",
    "idUserDirector": "string",
    "idUserManager": "string",
    "isDeleted": "number",
    "modeOfTransport": "string",
    "noIndex": "number",
    "notePo": "string",
    "numberPo": "string",
    "oldPo": "string",
    "position": "string",
    "priceTotal": "number",
    "quotationDate": "string",
    "quotationNumber": "string",
    "shipping": "string",
    "site": "string",
    "statusPo": "string",
    "term": "string",
    "typePo": "string",
    "updatedAt": "string",
    "validasi": "number",
    "vat": "number"
};

const AmimsPurPoWidgetDtoFields = {
    "approveDirector": "number",
    "createdAt": "string",
    "dateAcc": "string",
    "dateAccDirector": "string",
    "dateDeadline": "string",
    "datePo": "string",
    "idCurrency": "string",
    "idPosition": "string",
    "idPurPo": "string",
    "idPurVendor": "string",
    "idPurVendorContact": "string",
    "idSite": "string",
    "idUser": "string",
    "idUserDirector": "string",
    "idUserManager": "string",
    "isDeleted": "number",
    "modeOfTransport": "string",
    "noIndex": "number",
    "notePo": "string",
    "numberPo": "string",
    "oldPo": "string",
    "priceTotal": "number",
    "quotationDate": "string",
    "quotationNumber": "string",
    "shipping": "string",
    "statusPo": "string",
    "term": "string",
    "total": "number",
    "typePo": "string",
    "updatedAt": "string",
    "validasi": "number",
    "vat": "number"
};

const AmimsPurPrDtoFields = {
    "createdAt": "string",
    "dateAcc": "string",
    "datePr": "string",
    "description": "string",
    "idAircraft": "string",
    "idPosition": "string",
    "idPurPr": "string",
    "idSite": "string",
    "idUser": "string",
    "idUserAcc": "string",
    "isDeleted": "number",
    "keyword": "string",
    "noIndex": "number",
    "notePr": "string",
    "numberPr": "string",
    "oldPr": "string",
    "statusPr": "string",
    "typePr": "string",
    "updatedAt": "string",
    "validasi": "number"
};

const AmimsPurPrItemDtoFields = {
    "createdAt": "string",
    "idMpart": "string",
    "idMpcPiroItem": "string",
    "idPurPr": "string",
    "idPurPrItem": "string",
    "isDeleted": "number",
    "notePrItem": "string",
    "oldPrItem": "string",
    "priority": "string",
    "qtyPr": "number",
    "qtyStock": "number",
    "statusItem": "string",
    "updatedAt": "string"
};

const AmimsPurPrItemReportDtoFields = {
    "createdAt": "string",
    "idMpart": "string",
    "idMpcPiroItem": "string",
    "idPurPr": "string",
    "idPurPrItem": "string",
    "isDeleted": "number",
    "mpart": "string",
    "notePrItem": "string",
    "oldPrItem": "string",
    "priority": "string",
    "qtyPr": "number",
    "qtyStock": "number",
    "statusItem": "string",
    "updatedAt": "string"
};

const AmimsPurPrItemWidgetDtoFields = {
    "createdAt": "string",
    "idMpart": "string",
    "idMpcPiroItem": "string",
    "idPurPr": "string",
    "idPurPrItem": "string",
    "isDeleted": "number",
    "notePrItem": "string",
    "oldPrItem": "string",
    "priority": "string",
    "qtyPr": "number",
    "qtyStock": "number",
    "statusItem": "string",
    "total": "number",
    "updatedAt": "string"
};

const AmimsPurPrReportDtoFields = {
    "aircraft": "string",
    "createdAt": "string",
    "dateAcc": "string",
    "datePr": "string",
    "description": "string",
    "idAircraft": "string",
    "idPosition": "string",
    "idPurPr": "string",
    "idSite": "string",
    "idUser": "string",
    "idUserAcc": "string",
    "isDeleted": "number",
    "keyword": "string",
    "noIndex": "number",
    "notePr": "string",
    "numberPr": "string",
    "oldPr": "string",
    "position": "string",
    "site": "string",
    "statusPr": "string",
    "typePr": "string",
    "updatedAt": "string",
    "validasi": "number"
};

const AmimsPurPrWidgetDtoFields = {
    "createdAt": "string",
    "dateAcc": "string",
    "datePr": "string",
    "description": "string",
    "idAircraft": "string",
    "idPosition": "string",
    "idPurPr": "string",
    "idSite": "string",
    "idUser": "string",
    "idUserAcc": "string",
    "isDeleted": "number",
    "keyword": "string",
    "noIndex": "number",
    "notePr": "string",
    "numberPr": "string",
    "oldPr": "string",
    "statusPr": "string",
    "total": "number",
    "typePr": "string",
    "updatedAt": "string",
    "validasi": "number"
};

const AmimsPurPrclDtoFields = {
    "airworthiness": "string",
    "certificationNo": "string",
    "createdAt": "string",
    "datePcrl": "string",
    "datePur": "string",
    "dateQa": "string",
    "description": "string",
    "draftBin": "string",
    "idConditionMonitoring": "string",
    "idCurrency": "string",
    "idInternalGrnItem": "string",
    "idLifeTimeLimit": "string",
    "idMpart": "string",
    "idPart": "string",
    "idPartCondition": "string",
    "idPurGrn": "string",
    "idPurGrnItem": "string",
    "idPurPrcl": "string",
    "idPurVendor": "string",
    "idUserPu": "string",
    "idUserQa": "string",
    "isServiceable": "number",
    "lifeLimitCycle": "number",
    "lifeLimitHours": "number",
    "lifeLimitVal": "number",
    "lifeLimitVar": "string",
    "loopIndex": "number",
    "manufacture": "string",
    "manufactureDate": "string",
    "notePcrl": "string",
    "partCheckingPur": "string",
    "partCheckingQa": "string",
    "prclParent": "string",
    "price": "number",
    "qtyCheck": "number",
    "qtyPrcl": "number",
    "qtyReturn": "number",
    "qualityCheck": "string",
    "refDate": "string",
    "refId": "string",
    "refNumber": "string",
    "service": "string",
    "sn": "string",
    "statusPrcl": "string",
    "tboCycle": "number",
    "tboHours": "number",
    "tboVal": "number",
    "tboVar": "string",
    "tsnCycle": "number",
    "tsnHours": "number",
    "tsnVal": "number",
    "tsnVar": "string",
    "tsoCycle": "number",
    "tsoHours": "number",
    "tsoVal": "number",
    "tsoVar": "string",
    "typePrcl": "string",
    "updatedAt": "string",
    "validasi": "number",
    "warrantyCycle": "number",
    "warrantyDays": "number",
    "warrantyHours": "number",
    "warrantyMonths": "number",
    "warrantyStartCycle": "number",
    "warrantyStartDate": "string"
};

const AmimsPurPrclReportDtoFields = {
    "airworthiness": "string",
    "certificationNo": "string",
    "createdAt": "string",
    "currency": "string",
    "datePcrl": "string",
    "datePur": "string",
    "dateQa": "string",
    "description": "string",
    "draftBin": "string",
    "idConditionMonitoring": "string",
    "idCurrency": "string",
    "idInternalGrnItem": "string",
    "idLifeTimeLimit": "string",
    "idMpart": "string",
    "idPart": "string",
    "idPartCondition": "string",
    "idPurGrn": "string",
    "idPurGrnItem": "string",
    "idPurPrcl": "string",
    "idPurVendor": "string",
    "idUserPu": "string",
    "idUserQa": "string",
    "isServiceable": "number",
    "lifeLimitCycle": "number",
    "lifeLimitHours": "number",
    "lifeLimitVal": "number",
    "lifeLimitVar": "string",
    "loopIndex": "number",
    "manufacture": "string",
    "manufactureDate": "string",
    "mpart": "string",
    "notePcrl": "string",
    "part": "string",
    "partCheckingPur": "string",
    "partCheckingQa": "string",
    "prclParent": "string",
    "price": "number",
    "qtyCheck": "number",
    "qtyPrcl": "number",
    "qtyReturn": "number",
    "qualityCheck": "string",
    "refDate": "string",
    "refId": "string",
    "refNumber": "string",
    "service": "string",
    "sn": "string",
    "statusPrcl": "string",
    "tboCycle": "number",
    "tboHours": "number",
    "tboVal": "number",
    "tboVar": "string",
    "tsnCycle": "number",
    "tsnHours": "number",
    "tsnVal": "number",
    "tsnVar": "string",
    "tsoCycle": "number",
    "tsoHours": "number",
    "tsoVal": "number",
    "tsoVar": "string",
    "typePrcl": "string",
    "updatedAt": "string",
    "validasi": "number",
    "warrantyCycle": "number",
    "warrantyDays": "number",
    "warrantyHours": "number",
    "warrantyMonths": "number",
    "warrantyStartCycle": "number",
    "warrantyStartDate": "string"
};

const AmimsPurPrclWidgetDtoFields = {
    "airworthiness": "string",
    "certificationNo": "string",
    "createdAt": "string",
    "datePcrl": "string",
    "datePur": "string",
    "dateQa": "string",
    "description": "string",
    "draftBin": "string",
    "idConditionMonitoring": "string",
    "idCurrency": "string",
    "idInternalGrnItem": "string",
    "idLifeTimeLimit": "string",
    "idMpart": "string",
    "idPart": "string",
    "idPartCondition": "string",
    "idPurGrn": "string",
    "idPurGrnItem": "string",
    "idPurPrcl": "string",
    "idPurVendor": "string",
    "idUserPu": "string",
    "idUserQa": "string",
    "isServiceable": "number",
    "lifeLimitCycle": "number",
    "lifeLimitHours": "number",
    "lifeLimitVal": "number",
    "lifeLimitVar": "string",
    "loopIndex": "number",
    "manufacture": "string",
    "manufactureDate": "string",
    "notePcrl": "string",
    "partCheckingPur": "string",
    "partCheckingQa": "string",
    "prclParent": "string",
    "price": "number",
    "qtyCheck": "number",
    "qtyPrcl": "number",
    "qtyReturn": "number",
    "qualityCheck": "string",
    "refDate": "string",
    "refId": "string",
    "refNumber": "string",
    "service": "string",
    "sn": "string",
    "statusPrcl": "string",
    "tboCycle": "number",
    "tboHours": "number",
    "tboVal": "number",
    "tboVar": "string",
    "total": "number",
    "tsnCycle": "number",
    "tsnHours": "number",
    "tsnVal": "number",
    "tsnVar": "string",
    "tsoCycle": "number",
    "tsoHours": "number",
    "tsoVal": "number",
    "tsoVar": "string",
    "typePrcl": "string",
    "updatedAt": "string",
    "validasi": "number",
    "warrantyCycle": "number",
    "warrantyDays": "number",
    "warrantyHours": "number",
    "warrantyMonths": "number",
    "warrantyStartCycle": "number",
    "warrantyStartDate": "string"
};

const AmimsPurReturnDtoFields = {
    "createdAt": "string",
    "dateDeadlineReturn": "string",
    "dateReturn": "string",
    "idPurPo": "string",
    "idPurReturn": "string",
    "idPurVendor": "string",
    "idUser": "string",
    "isDeleted": "number",
    "noteReturn": "string",
    "numberReturn": "string",
    "statusReturn": "string",
    "updatedAt": "string",
    "validasi": "number"
};

const AmimsPurReturnItemDtoFields = {
    "idMpart": "string",
    "idPurGrnItem": "string",
    "idPurPoItem": "string",
    "idPurReturn": "string",
    "idPurReturnItem": "string",
    "noteReturnItem": "string",
    "qtyReturn": "number",
    "statusItem": "number"
};

const AmimsPurReturnItemReportDtoFields = {
    "idMpart": "string",
    "idPurGrnItem": "string",
    "idPurPoItem": "string",
    "idPurReturn": "string",
    "idPurReturnItem": "string",
    "mpart": "string",
    "noteReturnItem": "string",
    "qtyReturn": "number",
    "statusItem": "number"
};

const AmimsPurReturnItemWidgetDtoFields = {
    "idMpart": "string",
    "idPurGrnItem": "string",
    "idPurPoItem": "string",
    "idPurReturn": "string",
    "idPurReturnItem": "string",
    "noteReturnItem": "string",
    "qtyReturn": "number",
    "statusItem": "number",
    "total": "number"
};

const AmimsPurReturnReportDtoFields = {
    "createdAt": "string",
    "dateDeadlineReturn": "string",
    "dateReturn": "string",
    "idPurPo": "string",
    "idPurReturn": "string",
    "idPurVendor": "string",
    "idUser": "string",
    "isDeleted": "number",
    "noteReturn": "string",
    "numberReturn": "string",
    "statusReturn": "string",
    "updatedAt": "string",
    "validasi": "number"
};

const AmimsPurReturnWidgetDtoFields = {
    "createdAt": "string",
    "dateDeadlineReturn": "string",
    "dateReturn": "string",
    "idPurPo": "string",
    "idPurReturn": "string",
    "idPurVendor": "string",
    "idUser": "string",
    "isDeleted": "number",
    "noteReturn": "string",
    "numberReturn": "string",
    "statusReturn": "string",
    "total": "number",
    "updatedAt": "string",
    "validasi": "number"
};

const AmimsPurVendorContactDtoFields = {
    "address": "string",
    "city": "string",
    "country": "string",
    "createdAt": "string",
    "email": "string",
    "fax": "string",
    "idPurVendor": "string",
    "idPurVendorContact": "string",
    "linePhone": "string",
    "oldId": "string",
    "phone": "string",
    "pic": "string",
    "postcode": "string",
    "state": "string",
    "updatedAt": "string"
};

const AmimsPurVendorContactReportDtoFields = {
    "address": "string",
    "city": "string",
    "country": "string",
    "createdAt": "string",
    "email": "string",
    "fax": "string",
    "idPurVendor": "string",
    "idPurVendorContact": "string",
    "linePhone": "string",
    "oldId": "string",
    "phone": "string",
    "pic": "string",
    "postcode": "string",
    "state": "string",
    "updatedAt": "string"
};

const AmimsPurVendorContactWidgetDtoFields = {
    "address": "string",
    "city": "string",
    "country": "string",
    "createdAt": "string",
    "email": "string",
    "fax": "string",
    "idPurVendor": "string",
    "idPurVendorContact": "string",
    "linePhone": "string",
    "oldId": "string",
    "phone": "string",
    "pic": "string",
    "postcode": "string",
    "state": "string",
    "total": "number",
    "updatedAt": "string"
};

const AmimsPurVendorDtoFields = {
    "address": "string",
    "code": "string",
    "column1": "string",
    "country": "string",
    "createdAt": "string",
    "defaultCurrency": "string",
    "deliveryTime": "number",
    "email": "string",
    "fax": "string",
    "idMcurrency": "string",
    "idPurVendor": "string",
    "idUser": "string",
    "isDeleted": "number",
    "isManufacture": "string",
    "isRepairer": "string",
    "isShipper": "string",
    "isVendor": "string",
    "isWorkshop": "string",
    "keyword": "string",
    "nameVendor": "string",
    "oldId": "string",
    "pic": "string",
    "postcode": "string",
    "rating": "string",
    "services": "string",
    "status": "string",
    "telephone": "string",
    "timezone": "string",
    "tremPayment": "number",
    "updatedAt": "string",
    "validasi": "number"
};

const AmimsPurVendorItemDtoFields = {
    "createdAt": "string",
    "idMpart": "string",
    "idPurVendor": "string",
    "idPurVendorItem": "string",
    "isDeleted": "number",
    "manufacture": "string",
    "minOrder": "number",
    "note": "string",
    "price": "number",
    "responseTime": "number",
    "updatedAt": "string"
};

const AmimsPurVendorItemReportDtoFields = {
    "createdAt": "string",
    "idMpart": "string",
    "idPurVendor": "string",
    "idPurVendorItem": "string",
    "isDeleted": "number",
    "manufacture": "string",
    "minOrder": "number",
    "mpart": "string",
    "note": "string",
    "price": "number",
    "responseTime": "number",
    "updatedAt": "string"
};

const AmimsPurVendorItemWidgetDtoFields = {
    "createdAt": "string",
    "idMpart": "string",
    "idPurVendor": "string",
    "idPurVendorItem": "string",
    "isDeleted": "number",
    "manufacture": "string",
    "minOrder": "number",
    "note": "string",
    "price": "number",
    "responseTime": "number",
    "total": "number",
    "updatedAt": "string"
};

const AmimsPurVendorReportDtoFields = {
    "address": "string",
    "code": "string",
    "column1": "string",
    "country": "string",
    "createdAt": "string",
    "defaultCurrency": "string",
    "deliveryTime": "number",
    "email": "string",
    "fax": "string",
    "idMcurrency": "string",
    "idPurVendor": "string",
    "idUser": "string",
    "isDeleted": "number",
    "isManufacture": "string",
    "isRepairer": "string",
    "isShipper": "string",
    "isVendor": "string",
    "isWorkshop": "string",
    "keyword": "string",
    "mcurrency": "string",
    "nameVendor": "string",
    "oldId": "string",
    "pic": "string",
    "postcode": "string",
    "rating": "string",
    "services": "string",
    "status": "string",
    "telephone": "string",
    "timezone": "string",
    "tremPayment": "number",
    "updatedAt": "string",
    "validasi": "number"
};

const AmimsPurVendorWidgetDtoFields = {
    "address": "string",
    "code": "string",
    "column1": "string",
    "country": "string",
    "createdAt": "string",
    "defaultCurrency": "string",
    "deliveryTime": "number",
    "email": "string",
    "fax": "string",
    "idMcurrency": "string",
    "idPurVendor": "string",
    "idUser": "string",
    "isDeleted": "number",
    "isManufacture": "string",
    "isRepairer": "string",
    "isShipper": "string",
    "isVendor": "string",
    "isWorkshop": "string",
    "keyword": "string",
    "nameVendor": "string",
    "oldId": "string",
    "pic": "string",
    "postcode": "string",
    "rating": "string",
    "services": "string",
    "status": "string",
    "telephone": "string",
    "timezone": "string",
    "total": "number",
    "tremPayment": "number",
    "updatedAt": "string",
    "validasi": "number"
};

const AmimsQaRpdDispotitionDtoFields = {
    "codeDispotition": "string",
    "color": "string",
    "dispotition": "string",
    "idQaRpdDispotition": "string",
    "printTag": "string",
    "toPosition": "string"
};

const AmimsQaRpdDispotitionReportDtoFields = {
    "codeDispotition": "string",
    "color": "string",
    "dispotition": "string",
    "idQaRpdDispotition": "string",
    "printTag": "string",
    "toPosition": "string"
};

const AmimsQaRpdDispotitionWidgetDtoFields = {
    "codeDispotition": "string",
    "color": "string",
    "dispotition": "string",
    "idQaRpdDispotition": "string",
    "printTag": "string",
    "toPosition": "string",
    "total": "number"
};

const AmimsQaRpdDtoFields = {
    "createdAt": "string",
    "dateRpd": "string",
    "idQaRpd": "string",
    "idUserQa": "string",
    "numberRpd": "string",
    "statusRpd": "string",
    "tipe": "string",
    "updatedAt": "string"
};

const AmimsQaRpdReportDtoFields = {
    "createdAt": "string",
    "dateRpd": "string",
    "idQaRpd": "string",
    "idUserQa": "string",
    "numberRpd": "string",
    "statusRpd": "string",
    "tipe": "string",
    "updatedAt": "string"
};

const AmimsQaRpdWidgetDtoFields = {
    "createdAt": "string",
    "dateRpd": "string",
    "idQaRpd": "string",
    "idUserQa": "string",
    "numberRpd": "string",
    "statusRpd": "string",
    "tipe": "string",
    "total": "number",
    "updatedAt": "string"
};

const AmimsQaTransferDtoFields = {
    "createdAt": "string",
    "dateReceived": "string",
    "dateTransfer": "string",
    "idQaTransfer": "string",
    "idSite": "string",
    "idUser": "string",
    "idUserReceived": "string",
    "noIndex": "number",
    "noteTransfer": "string",
    "numberTransfer": "string",
    "statusTransfer": "string",
    "toSite": "number",
    "typeTransfer": "string",
    "updatedAt": "string",
    "validasi": "number"
};

const AmimsQaTransferItemDtoFields = {
    "idMpcSelfMaintenance": "string",
    "idPurPrcl": "string",
    "idQaTransfer": "string",
    "idQaTransferItem": "string"
};

const AmimsQaTransferItemReportDtoFields = {
    "idMpcSelfMaintenance": "string",
    "idPurPrcl": "string",
    "idQaTransfer": "string",
    "idQaTransferItem": "string"
};

const AmimsQaTransferItemWidgetDtoFields = {
    "idMpcSelfMaintenance": "string",
    "idPurPrcl": "string",
    "idQaTransfer": "string",
    "idQaTransferItem": "string",
    "total": "number"
};

const AmimsQaTransferReportDtoFields = {
    "createdAt": "string",
    "dateReceived": "string",
    "dateTransfer": "string",
    "idQaTransfer": "string",
    "idSite": "string",
    "idUser": "string",
    "idUserReceived": "string",
    "noIndex": "number",
    "noteTransfer": "string",
    "numberTransfer": "string",
    "site": "string",
    "statusTransfer": "string",
    "toSite": "number",
    "typeTransfer": "string",
    "updatedAt": "string",
    "validasi": "number"
};

const AmimsQaTransferWidgetDtoFields = {
    "createdAt": "string",
    "dateReceived": "string",
    "dateTransfer": "string",
    "idQaTransfer": "string",
    "idSite": "string",
    "idUser": "string",
    "idUserReceived": "string",
    "noIndex": "number",
    "noteTransfer": "string",
    "numberTransfer": "string",
    "statusTransfer": "string",
    "toSite": "number",
    "total": "number",
    "typeTransfer": "string",
    "updatedAt": "string",
    "validasi": "number"
};

const AmimsRotaryFactorDtoFields = {
    "adj1": "number",
    "adj2": "number",
    "adj3": "number",
    "dateCycle": "string",
    "dateHours": "string",
    "factor1": "number",
    "factor2": "number",
    "factor3": "number",
    "hoistLeft": "number",
    "hoistRight": "number",
    "idMpart": "string",
    "idRotaryFactor": "string",
    "noteHours": "string",
    "noteRotaryFactor": "string",
    "revisionCycle": "string",
    "revisionHours": "string",
    "rumusCycle": "string",
    "rumusHours": "string"
};

const AmimsRotaryFactorReportDtoFields = {
    "adj1": "number",
    "adj2": "number",
    "adj3": "number",
    "dateCycle": "string",
    "dateHours": "string",
    "factor1": "number",
    "factor2": "number",
    "factor3": "number",
    "hoistLeft": "number",
    "hoistRight": "number",
    "idMpart": "string",
    "idRotaryFactor": "string",
    "mpart": "string",
    "noteHours": "string",
    "noteRotaryFactor": "string",
    "revisionCycle": "string",
    "revisionHours": "string",
    "rumusCycle": "string",
    "rumusHours": "string"
};

const AmimsRotaryFactorWidgetDtoFields = {
    "adj1": "number",
    "adj2": "number",
    "adj3": "number",
    "dateCycle": "string",
    "dateHours": "string",
    "factor1": "number",
    "factor2": "number",
    "factor3": "number",
    "hoistLeft": "number",
    "hoistRight": "number",
    "idMpart": "string",
    "idRotaryFactor": "string",
    "noteHours": "string",
    "noteRotaryFactor": "string",
    "revisionCycle": "string",
    "revisionHours": "string",
    "rumusCycle": "string",
    "rumusHours": "string",
    "total": "number"
};

const AmimsShippingDtoFields = {
    "createdAt": "string",
    "idShipping": "string",
    "line0": "string",
    "line1": "string",
    "line2": "string",
    "line3": "string",
    "line4": "string",
    "line5": "string",
    "line6": "string",
    "line7": "string",
    "line8": "string",
    "statusShipping": "string",
    "updatedAt": "string"
};

const AmimsShippingReportDtoFields = {
    "createdAt": "string",
    "idShipping": "string",
    "line0": "string",
    "line1": "string",
    "line2": "string",
    "line3": "string",
    "line4": "string",
    "line5": "string",
    "line6": "string",
    "line7": "string",
    "line8": "string",
    "statusShipping": "string",
    "updatedAt": "string"
};

const AmimsShippingWidgetDtoFields = {
    "createdAt": "string",
    "idShipping": "string",
    "line0": "string",
    "line1": "string",
    "line2": "string",
    "line3": "string",
    "line4": "string",
    "line5": "string",
    "line6": "string",
    "line7": "string",
    "line8": "string",
    "statusShipping": "string",
    "total": "number",
    "updatedAt": "string"
};

const AmimsSiteDtoFields = {
    "address": "string",
    "city": "string",
    "codeSite": "string",
    "contactname": "string",
    "country": "string",
    "createdAt": "string",
    "emailaddress": "string",
    "fax": "string",
    "idNewSite": "string",
    "idSite": "string",
    "idUser": "string",
    "isDeleted": "number",
    "isMain": "number",
    "isStore": "string",
    "logoSite": "string",
    "mobile": "string",
    "oldId": "string",
    "parentSite": "number",
    "site": "string",
    "statusSite": "number",
    "telephone": "string",
    "typeSite": "string",
    "updatedAt": "string",
    "validation": "number"
};

const AmimsSiteReportDtoFields = {
    "address": "string",
    "city": "string",
    "codeSite": "string",
    "contactname": "string",
    "country": "string",
    "createdAt": "string",
    "emailaddress": "string",
    "fax": "string",
    "idNewSite": "string",
    "idSite": "string",
    "idUser": "string",
    "isDeleted": "number",
    "isMain": "number",
    "isStore": "string",
    "logoSite": "string",
    "mobile": "string",
    "oldId": "string",
    "parentSite": "number",
    "site": "string",
    "statusSite": "number",
    "telephone": "string",
    "typeSite": "string",
    "updatedAt": "string",
    "validation": "number"
};

const AmimsSiteWidgetDtoFields = {
    "address": "string",
    "city": "string",
    "codeSite": "string",
    "contactname": "string",
    "country": "string",
    "createdAt": "string",
    "emailaddress": "string",
    "fax": "string",
    "idNewSite": "string",
    "idSite": "string",
    "idUser": "string",
    "isDeleted": "number",
    "isMain": "number",
    "isStore": "string",
    "logoSite": "string",
    "mobile": "string",
    "oldId": "string",
    "parentSite": "number",
    "site": "string",
    "statusSite": "number",
    "telephone": "string",
    "total": "number",
    "typeSite": "string",
    "updatedAt": "string",
    "validation": "number"
};

const AmimsStockDtoFields = {
    "bin": "string",
    "codeAta": "string",
    "idMpart": "string",
    "keyword": "string",
    "mfigureIndex": "string",
    "mitemIndex": "string",
    "partNumber": "string",
    "partid": "string",
    "qty": "number",
    "statusOnInventory": "string",
    "unit": "string"
};

const AmimsStockReportDtoFields = {
    "bin": "string",
    "codeAta": "string",
    "idMpart": "string",
    "keyword": "string",
    "mfigureIndex": "string",
    "mitemIndex": "string",
    "mpart": "string",
    "partNumber": "string",
    "partid": "string",
    "qty": "number",
    "statusOnInventory": "string",
    "unit": "string"
};

const AmimsStockWidgetDtoFields = {
    "bin": "string",
    "codeAta": "string",
    "idMpart": "string",
    "keyword": "string",
    "mfigureIndex": "string",
    "mitemIndex": "string",
    "partNumber": "string",
    "partid": "string",
    "qty": "number",
    "statusOnInventory": "string",
    "total": "number",
    "unit": "string"
};

const AmimsStoreDestroyDtoFields = {
    "createdAt": "string",
    "dateDestroy": "string",
    "idPart": "string",
    "idSite": "string",
    "idStoreDestroy": "string",
    "idUser": "string",
    "noteDestroy": "string",
    "numberDestroy": "string",
    "refRti": "string",
    "updatedAt": "string"
};

const AmimsStoreDestroyReportDtoFields = {
    "createdAt": "string",
    "dateDestroy": "string",
    "idPart": "string",
    "idSite": "string",
    "idStoreDestroy": "string",
    "idUser": "string",
    "noteDestroy": "string",
    "numberDestroy": "string",
    "part": "string",
    "refRti": "string",
    "site": "string",
    "updatedAt": "string"
};

const AmimsStoreDestroyWidgetDtoFields = {
    "createdAt": "string",
    "dateDestroy": "string",
    "idPart": "string",
    "idSite": "string",
    "idStoreDestroy": "string",
    "idUser": "string",
    "noteDestroy": "string",
    "numberDestroy": "string",
    "refRti": "string",
    "total": "number",
    "updatedAt": "string"
};

const AmimsStoreTransferDtoFields = {
    "createdAt": "string",
    "dateReceived": "string",
    "dateTransfer": "string",
    "dimention": "string",
    "idEngineerPmtr": "string",
    "idStoreTransfer": "string",
    "idUserReceived": "string",
    "idUserTransfer": "string",
    "isDeleted": "number",
    "noIndex": "number",
    "noOfBox": "string",
    "noteTransfer": "string",
    "numberTransfer": "string",
    "sheet": "string",
    "shippingVia": "string",
    "statusTransfer": "string",
    "updatedAt": "string",
    "validasi": "number",
    "weight": "string"
};

const AmimsStoreTransferItemDtoFields = {
    "createdAt": "string",
    "idEngineerPmtrItem": "string",
    "idPart": "string",
    "idStoreTransfer": "string",
    "idStoreTransferItem": "string",
    "newBin": "string",
    "noteItemTransfer": "string",
    "oldIdPart": "string",
    "qtyTransfer": "number",
    "statusItem": "string",
    "updatedAt": "string"
};

const AmimsStoreTransferItemReportDtoFields = {
    "createdAt": "string",
    "idEngineerPmtrItem": "string",
    "idPart": "string",
    "idStoreTransfer": "string",
    "idStoreTransferItem": "string",
    "newBin": "string",
    "noteItemTransfer": "string",
    "oldIdPart": "string",
    "part": "string",
    "qtyTransfer": "number",
    "statusItem": "string",
    "updatedAt": "string"
};

const AmimsStoreTransferItemWidgetDtoFields = {
    "createdAt": "string",
    "idEngineerPmtrItem": "string",
    "idPart": "string",
    "idStoreTransfer": "string",
    "idStoreTransferItem": "string",
    "newBin": "string",
    "noteItemTransfer": "string",
    "oldIdPart": "string",
    "qtyTransfer": "number",
    "statusItem": "string",
    "total": "number",
    "updatedAt": "string"
};

const AmimsStoreTransferReportDtoFields = {
    "createdAt": "string",
    "dateReceived": "string",
    "dateTransfer": "string",
    "dimention": "string",
    "idEngineerPmtr": "string",
    "idStoreTransfer": "string",
    "idUserReceived": "string",
    "idUserTransfer": "string",
    "isDeleted": "number",
    "noIndex": "number",
    "noOfBox": "string",
    "noteTransfer": "string",
    "numberTransfer": "string",
    "sheet": "string",
    "shippingVia": "string",
    "statusTransfer": "string",
    "updatedAt": "string",
    "validasi": "number",
    "weight": "string"
};

const AmimsStoreTransferWidgetDtoFields = {
    "createdAt": "string",
    "dateReceived": "string",
    "dateTransfer": "string",
    "dimention": "string",
    "idEngineerPmtr": "string",
    "idStoreTransfer": "string",
    "idUserReceived": "string",
    "idUserTransfer": "string",
    "isDeleted": "number",
    "noIndex": "number",
    "noOfBox": "string",
    "noteTransfer": "string",
    "numberTransfer": "string",
    "sheet": "string",
    "shippingVia": "string",
    "statusTransfer": "string",
    "total": "number",
    "updatedAt": "string",
    "validasi": "number",
    "weight": "string"
};

const AmimsTdDetailAcDtoFields = {
    "complianceC": "number",
    "complianceD": "string",
    "complianceH": "number",
    "compliteC": "number",
    "compliteD": "string",
    "compliteH": "number",
    "compliteUser": "string",
    "engineer": "string",
    "idAircraft": "string",
    "idTdDetail": "string",
    "idTdDetailAc": "string",
    "idTechLog": "string",
    "isActive": "string",
    "noteClose": "string",
    "noteDetail": "string",
    "updatedAt": "string"
};

const AmimsTdDetailAcReportDtoFields = {
    "aircraft": "string",
    "complianceC": "number",
    "complianceD": "string",
    "complianceH": "number",
    "compliteC": "number",
    "compliteD": "string",
    "compliteH": "number",
    "compliteUser": "string",
    "engineer": "string",
    "idAircraft": "string",
    "idTdDetail": "string",
    "idTdDetailAc": "string",
    "idTechLog": "string",
    "isActive": "string",
    "noteClose": "string",
    "noteDetail": "string",
    "updatedAt": "string"
};

const AmimsTdDetailAcWidgetDtoFields = {
    "complianceC": "number",
    "complianceD": "string",
    "complianceH": "number",
    "compliteC": "number",
    "compliteD": "string",
    "compliteH": "number",
    "compliteUser": "string",
    "engineer": "string",
    "idAircraft": "string",
    "idTdDetail": "string",
    "idTdDetailAc": "string",
    "idTechLog": "string",
    "isActive": "string",
    "noteClose": "string",
    "noteDetail": "string",
    "total": "number",
    "updatedAt": "string"
};

const AmimsTdDetailDtoFields = {
    "applicable": "string",
    "createdAt": "string",
    "dateAcc": "string",
    "dateAccQa": "string",
    "dateDetail": "string",
    "fileDetail": "string",
    "idAcc": "string",
    "idAccQa": "string",
    "idActype": "string",
    "idTd": "string",
    "idTdDetail": "string",
    "isEngineer": "string",
    "isPilot": "string",
    "isQc": "string",
    "method": "string",
    "noteDetail": "string",
    "numberDetail": "string",
    "priority": "string",
    "statusTdDetail": "string",
    "subject": "string",
    "typeDetail": "string",
    "updatedAt": "string",
    "validasi": "number"
};

const AmimsTdDetailReportDtoFields = {
    "actype": "string",
    "applicable": "string",
    "createdAt": "string",
    "dateAcc": "string",
    "dateAccQa": "string",
    "dateDetail": "string",
    "fileDetail": "string",
    "idAcc": "string",
    "idAccQa": "string",
    "idActype": "string",
    "idTd": "string",
    "idTdDetail": "string",
    "isEngineer": "string",
    "isPilot": "string",
    "isQc": "string",
    "method": "string",
    "noteDetail": "string",
    "numberDetail": "string",
    "priority": "string",
    "statusTdDetail": "string",
    "subject": "string",
    "td": "string",
    "typeDetail": "string",
    "updatedAt": "string",
    "validasi": "number"
};

const AmimsTdDetailWidgetDtoFields = {
    "applicable": "string",
    "createdAt": "string",
    "dateAcc": "string",
    "dateAccQa": "string",
    "dateDetail": "string",
    "fileDetail": "string",
    "idAcc": "string",
    "idAccQa": "string",
    "idActype": "string",
    "idTd": "string",
    "idTdDetail": "string",
    "isEngineer": "string",
    "isPilot": "string",
    "isQc": "string",
    "method": "string",
    "noteDetail": "string",
    "numberDetail": "string",
    "priority": "string",
    "statusTdDetail": "string",
    "subject": "string",
    "total": "number",
    "typeDetail": "string",
    "updatedAt": "string",
    "validasi": "number"
};

const AmimsTdDtoFields = {
    "applicable": "string",
    "createdAt": "string",
    "docNumber": "string",
    "effectiveDate": "string",
    "fileTd": "string",
    "idDoctype": "string",
    "idTd": "string",
    "idUser": "string",
    "noteDoc": "string",
    "oldId": "string",
    "rev": "string",
    "tdParent": "string",
    "title": "string",
    "updatedAt": "string",
    "validasi": "number"
};

const AmimsTdRefDtoFields = {
    "idTd": "string",
    "idTdLain": "string",
    "idTdRef": "string",
    "noTdLain": "string"
};

const AmimsTdRefReportDtoFields = {
    "idTd": "string",
    "idTdLain": "string",
    "idTdRef": "string",
    "noTdLain": "string",
    "td": "string"
};

const AmimsTdRefWidgetDtoFields = {
    "idTd": "string",
    "idTdLain": "string",
    "idTdRef": "string",
    "noTdLain": "string",
    "total": "number"
};

const AmimsTdReportDtoFields = {
    "applicable": "string",
    "createdAt": "string",
    "docNumber": "string",
    "doctype": "string",
    "effectiveDate": "string",
    "fileTd": "string",
    "idDoctype": "string",
    "idTd": "string",
    "idUser": "string",
    "noteDoc": "string",
    "oldId": "string",
    "rev": "string",
    "tdParent": "string",
    "title": "string",
    "updatedAt": "string",
    "validasi": "number"
};

const AmimsTdTypeDtoFields = {
    "descriptionTdType": "string",
    "idTdType": "string",
    "tdType": "string"
};

const AmimsTdTypeReportDtoFields = {
    "descriptionTdType": "string",
    "idTdType": "string",
    "tdType": "string"
};

const AmimsTdTypeWidgetDtoFields = {
    "descriptionTdType": "string",
    "idTdType": "string",
    "tdType": "string",
    "total": "number"
};

const AmimsTdWidgetDtoFields = {
    "applicable": "string",
    "createdAt": "string",
    "docNumber": "string",
    "effectiveDate": "string",
    "fileTd": "string",
    "idDoctype": "string",
    "idTd": "string",
    "idUser": "string",
    "noteDoc": "string",
    "oldId": "string",
    "rev": "string",
    "tdParent": "string",
    "title": "string",
    "total": "number",
    "updatedAt": "string",
    "validasi": "number"
};

const AmimsTechDefectDtoFields = {
    "createdAt": "string",
    "dateDefect": "string",
    "doneCycle": "number",
    "doneDate": "string",
    "doneHours": "number",
    "idAircraft": "string",
    "idEngineerRti": "string",
    "idPart": "string",
    "idPartInstall": "string",
    "idTechDefect": "string",
    "idTechLog": "string",
    "noteDefect": "string",
    "statusDefect": "string",
    "updatedAt": "string",
    "userSign": "string"
};

const AmimsTechDefectReportDtoFields = {
    "aircraft": "string",
    "createdAt": "string",
    "dateDefect": "string",
    "doneCycle": "number",
    "doneDate": "string",
    "doneHours": "number",
    "idAircraft": "string",
    "idEngineerRti": "string",
    "idPart": "string",
    "idPartInstall": "string",
    "idTechDefect": "string",
    "idTechLog": "string",
    "noteDefect": "string",
    "part": "string",
    "statusDefect": "string",
    "updatedAt": "string",
    "userSign": "string"
};

const AmimsTechDefectWidgetDtoFields = {
    "createdAt": "string",
    "dateDefect": "string",
    "doneCycle": "number",
    "doneDate": "string",
    "doneHours": "number",
    "idAircraft": "string",
    "idEngineerRti": "string",
    "idPart": "string",
    "idPartInstall": "string",
    "idTechDefect": "string",
    "idTechLog": "string",
    "noteDefect": "string",
    "statusDefect": "string",
    "total": "number",
    "updatedAt": "string",
    "userSign": "string"
};

const AmimsTechDiscrepanciesDtoFields = {
    "createdAt": "string",
    "dateDiscrepancies": "string",
    "idPart": "string",
    "idTechDiscrepancies": "string",
    "idTechLog": "string",
    "isDiscrepancies": "string",
    "noteDiscrepancies": "string",
    "updatedAt": "string"
};

const AmimsTechDiscrepanciesReportDtoFields = {
    "createdAt": "string",
    "dateDiscrepancies": "string",
    "idPart": "string",
    "idTechDiscrepancies": "string",
    "idTechLog": "string",
    "isDiscrepancies": "string",
    "noteDiscrepancies": "string",
    "part": "string",
    "updatedAt": "string"
};

const AmimsTechDiscrepanciesWidgetDtoFields = {
    "createdAt": "string",
    "dateDiscrepancies": "string",
    "idPart": "string",
    "idTechDiscrepancies": "string",
    "idTechLog": "string",
    "isDiscrepancies": "string",
    "noteDiscrepancies": "string",
    "total": "number",
    "updatedAt": "string"
};

const AmimsTechLogDtoFields = {
    "authoRized": "number",
    "createdAt": "string",
    "cycleBf": "number",
    "cycleCf": "number",
    "cycleFlight": "number",
    "dateInspection": "string",
    "hoursBf": "number",
    "hoursCf": "number",
    "hoursFlight": "number",
    "idAircraft": "string",
    "idTechLog": "string",
    "idUserAcc": "string",
    "idUserInspection": "string",
    "idUserLog": "string",
    "isDeleted": "number",
    "isEdit": "number",
    "lastUpdate": "number",
    "noteLog": "string",
    "numberLog": "string",
    "numberNext": "number",
    "oldId": "string",
    "pesan": "string",
    "place": "number",
    "techLogDate": "string",
    "totalCycle": "number",
    "totalFlight": "number",
    "totalFuel": "number",
    "updatedAt": "string",
    "validasi": "number",
    "xycleInput": "number"
};

const AmimsTechLogEngineCheckDtoFields = {
    "alt": "number",
    "idTechLog": "string",
    "idTechLogEngine": "string",
    "idTechLogEngineCheck": "string",
    "itt": "number",
    "n1": "number",
    "n2": "number",
    "nr": "number",
    "oat": "number",
    "oilPress": "number",
    "oilTemp": "number",
    "powerMargin": "number",
    "speed": "number",
    "t5": "number",
    "torque": "number"
};

const AmimsTechLogEngineCheckReportDtoFields = {
    "alt": "number",
    "idTechLog": "string",
    "idTechLogEngine": "string",
    "idTechLogEngineCheck": "string",
    "itt": "number",
    "n1": "number",
    "n2": "number",
    "nr": "number",
    "oat": "number",
    "oilPress": "number",
    "oilTemp": "number",
    "powerMargin": "number",
    "speed": "number",
    "t5": "number",
    "torque": "number"
};

const AmimsTechLogEngineCheckWidgetDtoFields = {
    "alt": "number",
    "idTechLog": "string",
    "idTechLogEngine": "string",
    "idTechLogEngineCheck": "string",
    "itt": "number",
    "n1": "number",
    "n2": "number",
    "nr": "number",
    "oat": "number",
    "oilPress": "number",
    "oilTemp": "number",
    "powerMargin": "number",
    "speed": "number",
    "t5": "number",
    "torque": "number",
    "total": "number"
};

const AmimsTechLogEngineDtoFields = {
    "cycleBf": "number",
    "cycleCf": "number",
    "cycleFlight": "number",
    "fullCycleBf": "number",
    "fullCycleFlt": "number",
    "hoursBf": "number",
    "hoursCf": "number",
    "hoursFlight": "number",
    "idPart": "string",
    "idTechLog": "string",
    "idTechLogEngine": "string",
    "n1": "number",
    "n2": "number",
    "oil": "string",
    "oilAdd": "number",
    "oilTotal": "number",
    "oldId": "string",
    "partCycleBf": "number",
    "partCycleFlt": "number",
    "sn": "string",
    "timeAboveBf": "number",
    "timeAboveFlt": "number",
    "validasi": "number"
};

const AmimsTechLogEngineReportDtoFields = {
    "cycleBf": "number",
    "cycleCf": "number",
    "cycleFlight": "number",
    "fullCycleBf": "number",
    "fullCycleFlt": "number",
    "hoursBf": "number",
    "hoursCf": "number",
    "hoursFlight": "number",
    "idPart": "string",
    "idTechLog": "string",
    "idTechLogEngine": "string",
    "n1": "number",
    "n2": "number",
    "oil": "string",
    "oilAdd": "number",
    "oilTotal": "number",
    "oldId": "string",
    "part": "string",
    "partCycleBf": "number",
    "partCycleFlt": "number",
    "sn": "string",
    "timeAboveBf": "number",
    "timeAboveFlt": "number",
    "validasi": "number"
};

const AmimsTechLogEngineWidgetDtoFields = {
    "cycleBf": "number",
    "cycleCf": "number",
    "cycleFlight": "number",
    "fullCycleBf": "number",
    "fullCycleFlt": "number",
    "hoursBf": "number",
    "hoursCf": "number",
    "hoursFlight": "number",
    "idPart": "string",
    "idTechLog": "string",
    "idTechLogEngine": "string",
    "n1": "number",
    "n2": "number",
    "oil": "string",
    "oilAdd": "number",
    "oilTotal": "number",
    "oldId": "string",
    "partCycleBf": "number",
    "partCycleFlt": "number",
    "sn": "string",
    "timeAboveBf": "number",
    "timeAboveFlt": "number",
    "total": "number",
    "validasi": "number"
};

const AmimsTechLogItemDtoFields = {
    "apuStart": "number",
    "cgPenalty": "string",
    "cocaCaptain": "string",
    "cycles": "number",
    "flightFrom": "string",
    "flightHours": "number",
    "flightTo": "string",
    "hoistOperation": "string",
    "hoistUsage": "number",
    "idCaptain": "string",
    "idTechLog": "string",
    "idTechLogItem": "string",
    "landingTime": "string",
    "landings": "number",
    "noteTechLogItem": "string",
    "slingReleased": "number",
    "takeofTime": "string"
};

const AmimsTechLogItemReportDtoFields = {
    "apuStart": "number",
    "cgPenalty": "string",
    "cocaCaptain": "string",
    "cycles": "number",
    "flightFrom": "string",
    "flightHours": "number",
    "flightTo": "string",
    "hoistOperation": "string",
    "hoistUsage": "number",
    "idCaptain": "string",
    "idTechLog": "string",
    "idTechLogItem": "string",
    "landingTime": "string",
    "landings": "number",
    "noteTechLogItem": "string",
    "slingReleased": "number",
    "takeofTime": "string"
};

const AmimsTechLogItemWidgetDtoFields = {
    "apuStart": "number",
    "cgPenalty": "string",
    "cocaCaptain": "string",
    "cycles": "number",
    "flightFrom": "string",
    "flightHours": "number",
    "flightTo": "string",
    "hoistOperation": "string",
    "hoistUsage": "number",
    "idCaptain": "string",
    "idTechLog": "string",
    "idTechLogItem": "string",
    "landingTime": "string",
    "landings": "number",
    "noteTechLogItem": "string",
    "slingReleased": "number",
    "takeofTime": "string",
    "total": "number"
};

const AmimsTechLogJoDtoFields = {
    "createdAt": "string",
    "dateClose": "string",
    "idMpcJo": "string",
    "idPart": "string",
    "idTechLog": "string",
    "idTechLogClose": "string",
    "idTechLogJo": "string",
    "isContinue": "string",
    "timeClose": "string",
    "updatedAt": "string"
};

const AmimsTechLogJoReportDtoFields = {
    "createdAt": "string",
    "dateClose": "string",
    "idMpcJo": "string",
    "idPart": "string",
    "idTechLog": "string",
    "idTechLogClose": "string",
    "idTechLogJo": "string",
    "isContinue": "string",
    "part": "string",
    "timeClose": "string",
    "updatedAt": "string"
};

const AmimsTechLogJoWidgetDtoFields = {
    "createdAt": "string",
    "dateClose": "string",
    "idMpcJo": "string",
    "idPart": "string",
    "idTechLog": "string",
    "idTechLogClose": "string",
    "idTechLogJo": "string",
    "isContinue": "string",
    "timeClose": "string",
    "total": "number",
    "updatedAt": "string"
};

const AmimsTechLogReportDtoFields = {
    "aircraft": "string",
    "authoRized": "number",
    "createdAt": "string",
    "cycleBf": "number",
    "cycleCf": "number",
    "cycleFlight": "number",
    "dateInspection": "string",
    "hoursBf": "number",
    "hoursCf": "number",
    "hoursFlight": "number",
    "idAircraft": "string",
    "idTechLog": "string",
    "idUserAcc": "string",
    "idUserInspection": "string",
    "idUserLog": "string",
    "isDeleted": "number",
    "isEdit": "number",
    "lastUpdate": "number",
    "noteLog": "string",
    "numberLog": "string",
    "numberNext": "number",
    "oldId": "string",
    "pesan": "string",
    "place": "number",
    "techLogDate": "string",
    "totalCycle": "number",
    "totalFlight": "number",
    "totalFuel": "number",
    "updatedAt": "string",
    "validasi": "number",
    "xycleInput": "number"
};

const AmimsTechLogWidgetDtoFields = {
    "authoRized": "number",
    "createdAt": "string",
    "cycleBf": "number",
    "cycleCf": "number",
    "cycleFlight": "number",
    "dateInspection": "string",
    "hoursBf": "number",
    "hoursCf": "number",
    "hoursFlight": "number",
    "idAircraft": "string",
    "idTechLog": "string",
    "idUserAcc": "string",
    "idUserInspection": "string",
    "idUserLog": "string",
    "isDeleted": "number",
    "isEdit": "number",
    "lastUpdate": "number",
    "noteLog": "string",
    "numberLog": "string",
    "numberNext": "number",
    "oldId": "string",
    "pesan": "string",
    "place": "number",
    "techLogDate": "string",
    "total": "number",
    "totalCycle": "number",
    "totalFlight": "number",
    "totalFuel": "number",
    "updatedAt": "string",
    "validasi": "number",
    "xycleInput": "number"
};

const AmimsTypeOfworkDtoFields = {
    "childnameTypeOfwork": "string",
    "code": "string",
    "idTypeOfwork": "string",
    "isDeleted": "number",
    "typeOfwork": "string"
};

const AmimsTypeOfworkReportDtoFields = {
    "childnameTypeOfwork": "string",
    "code": "string",
    "idTypeOfwork": "string",
    "isDeleted": "number",
    "typeOfwork": "string"
};

const AmimsTypeOfworkWidgetDtoFields = {
    "childnameTypeOfwork": "string",
    "code": "string",
    "idTypeOfwork": "string",
    "isDeleted": "number",
    "total": "number",
    "typeOfwork": "string"
};

const AmimsUnscheduleMaintenanceDtoFields = {
    "abortStatus": "string",
    "actionCode": "string",
    "aircraftGrounded": "string",
    "airframeSn": "string",
    "amlNumber": "string",
    "ataCode": "string",
    "complianceLastPerformedBy": "string",
    "createdAt": "string",
    "delayStatus": "string",
    "description": "string",
    "discoveredBy": "string",
    "discoveryPoint": "string",
    "hiddenDamageRequired": "string",
    "idAircraft": "string",
    "idPart": "string",
    "idTechLog": "string",
    "idUnscheduleMaintenance": "string",
    "idUser": "string",
    "inspectionDate": "string",
    "inspectionRequired": "string",
    "inspector": "string",
    "isOptional": "string",
    "lastUpdatedBy": "string",
    "nextDueDate": "string",
    "nextDueHours": "string",
    "nextDueLandings": "number",
    "nextDueParam": "string",
    "notes": "string",
    "preliminaryNote": "string",
    "refNumber": "string",
    "reference": "string",
    "reportedDate": "string",
    "reportedHours": "string",
    "reportedLandings": "number",
    "resolvedDate": "string",
    "resolvedHours": "string",
    "resolvedLandings": "string",
    "status": "string",
    "type": "string",
    "updatedAt": "string"
};

const AmimsUnscheduleMaintenanceReportDtoFields = {
    "abortStatus": "string",
    "actionCode": "string",
    "aircraft": "string",
    "aircraftGrounded": "string",
    "airframeSn": "string",
    "amlNumber": "string",
    "ataCode": "string",
    "complianceLastPerformedBy": "string",
    "createdAt": "string",
    "delayStatus": "string",
    "description": "string",
    "discoveredBy": "string",
    "discoveryPoint": "string",
    "hiddenDamageRequired": "string",
    "idAircraft": "string",
    "idPart": "string",
    "idTechLog": "string",
    "idUnscheduleMaintenance": "string",
    "idUser": "string",
    "inspectionDate": "string",
    "inspectionRequired": "string",
    "inspector": "string",
    "isOptional": "string",
    "lastUpdatedBy": "string",
    "nextDueDate": "string",
    "nextDueHours": "string",
    "nextDueLandings": "number",
    "nextDueParam": "string",
    "notes": "string",
    "part": "string",
    "preliminaryNote": "string",
    "refNumber": "string",
    "reference": "string",
    "reportedDate": "string",
    "reportedHours": "string",
    "reportedLandings": "number",
    "resolvedDate": "string",
    "resolvedHours": "string",
    "resolvedLandings": "string",
    "status": "string",
    "type": "string",
    "updatedAt": "string"
};

const AmimsUnscheduleMaintenanceWidgetDtoFields = {
    "abortStatus": "string",
    "actionCode": "string",
    "aircraftGrounded": "string",
    "airframeSn": "string",
    "amlNumber": "string",
    "ataCode": "string",
    "complianceLastPerformedBy": "string",
    "createdAt": "string",
    "delayStatus": "string",
    "description": "string",
    "discoveredBy": "string",
    "discoveryPoint": "string",
    "hiddenDamageRequired": "string",
    "idAircraft": "string",
    "idPart": "string",
    "idTechLog": "string",
    "idUnscheduleMaintenance": "string",
    "idUser": "string",
    "inspectionDate": "string",
    "inspectionRequired": "string",
    "inspector": "string",
    "isOptional": "string",
    "lastUpdatedBy": "string",
    "nextDueDate": "string",
    "nextDueHours": "string",
    "nextDueLandings": "number",
    "nextDueParam": "string",
    "notes": "string",
    "preliminaryNote": "string",
    "refNumber": "string",
    "reference": "string",
    "reportedDate": "string",
    "reportedHours": "string",
    "reportedLandings": "number",
    "resolvedDate": "string",
    "resolvedHours": "string",
    "resolvedLandings": "string",
    "status": "string",
    "total": "number",
    "type": "string",
    "updatedAt": "string"
};

const AmimsVDueListOutputDtoFields = {
    "atInstallCy": "string",
    "atInstallDy": "string",
    "atInstallHr": "string",
    "ata": "string",
    "code": "string",
    "createdAt": "string",
    "dueAtCy": "string",
    "dueAtDy": "string",
    "dueAtHr": "string",
    "idAircraft": "string",
    "idDueListOutput": "string",
    "idMpart": "string",
    "idPart": "string",
    "keyword": "string",
    "lastPrice": "number",
    "lastPriceCurrency": "string",
    "noteDue": "string",
    "partNumber": "string",
    "partPrice": "number",
    "peruntukan": "string",
    "remainingCy": "number",
    "remainingDy": "number",
    "remainingHr": "number",
    "sn": "string",
    "toDueCy": "number",
    "toDueDy": "number",
    "toDueHr": "number",
    "typeDue": "string",
    "typeOfwork": "string",
    "variabel": "string"
};

const AmimsVDueListOutputReportDtoFields = {
    "aircraft": "string",
    "atInstallCy": "string",
    "atInstallDy": "string",
    "atInstallHr": "string",
    "ata": "string",
    "code": "string",
    "createdAt": "string",
    "dueAtCy": "string",
    "dueAtDy": "string",
    "dueAtHr": "string",
    "idAircraft": "string",
    "idDueListOutput": "string",
    "idMpart": "string",
    "idPart": "string",
    "keyword": "string",
    "lastPrice": "number",
    "lastPriceCurrency": "string",
    "mpart": "string",
    "noteDue": "string",
    "part": "string",
    "partNumber": "string",
    "partPrice": "number",
    "peruntukan": "string",
    "remainingCy": "number",
    "remainingDy": "number",
    "remainingHr": "number",
    "sn": "string",
    "toDueCy": "number",
    "toDueDy": "number",
    "toDueHr": "number",
    "typeDue": "string",
    "typeOfwork": "string",
    "variabel": "string"
};

const AmimsVDueListOutputWidgetDtoFields = {
    "atInstallCy": "string",
    "atInstallDy": "string",
    "atInstallHr": "string",
    "ata": "string",
    "code": "string",
    "createdAt": "string",
    "dueAtCy": "string",
    "dueAtDy": "string",
    "dueAtHr": "string",
    "idAircraft": "string",
    "idDueListOutput": "string",
    "idMpart": "string",
    "idPart": "string",
    "keyword": "string",
    "lastPrice": "number",
    "lastPriceCurrency": "string",
    "noteDue": "string",
    "partNumber": "string",
    "partPrice": "number",
    "peruntukan": "string",
    "remainingCy": "number",
    "remainingDy": "number",
    "remainingHr": "number",
    "sn": "string",
    "toDueCy": "number",
    "toDueDy": "number",
    "toDueHr": "number",
    "total": "number",
    "typeDue": "string",
    "typeOfwork": "string",
    "variabel": "string"
};

const AmimsWarrantyDtoFields = {
    "createdAt": "string",
    "cycle": "number",
    "days": "number",
    "effectiveDate": "string",
    "expairedDate": "string",
    "hours": "number",
    "idPart": "string",
    "idVendor": "string",
    "idWarranty": "string",
    "note": "string",
    "type": "string",
    "updatedAt": "string"
};

const AuthResponseDtoFields = {
    "access_token": "string",
    "refresh_token": "string",
    "user": "string"
};

const BaseWidgetQueryDtoFields = {
    "filter": "string",
    "groupBy": "string",
    "joinWhere": "string",
    "select": "string",
    "sortKey": "string",
    "sortValue": "string"
};

const CurrentUserResponseDtoFields = {
    "pegawai": "string",
    "role": "string",
    "user": "string"
};

const DocumentDocumentDtoFields = {
    "createdAt": "string",
    "enableDownload": "string",
    "fileExt": "string",
    "fileLocation": "string",
    "fileName": "string",
    "forModule": "string",
    "forModuleId": "string",
    "forTable": "string",
    "idDocument": "string",
    "idUsers": "string",
    "name": "string",
    "nomor": "string",
    "revisi": "string",
    "tanggal": "string",
    "updatedAt": "string"
};

const LoginDtoFields = {
    "email": "string",
    "password": "string"
};

const PelangganClientContactDtoFields = {
    "catatan": "string",
    "createdAt": "string",
    "divisi": "string",
    "email": "string",
    "idClient": "string",
    "idClientContact": "string",
    "isPrimary": "boolean",
    "jabatan": "string",
    "jenisContact": "string",
    "namaContact": "string",
    "telepon": "string",
    "updatedAt": "string"
};

const PelangganClientDtoFields = {
    "alamat": "string",
    "catatan": "string",
    "createdAt": "string",
    "emailPerusahaan": "string",
    "idClient": "string",
    "isAktif": "boolean",
    "jenisClient": "string",
    "kodeClient": "string",
    "kodePos": "string",
    "kota": "string",
    "logoUrl": "string",
    "namaFamiliar": "string",
    "namaResmi": "string",
    "npwp": "string",
    "primaryPic": "string",
    "provinsi": "string",
    "telepon": "string",
    "updatedAt": "string",
    "website": "string"
};

const PelangganClientReportDtoFields = {
    "alamat": "string",
    "catatan": "string",
    "createdAt": "string",
    "emailPerusahaan": "string",
    "idClient": "string",
    "isAktif": "boolean",
    "jenisClient": "string",
    "kodeClient": "string",
    "kodePos": "string",
    "kota": "string",
    "logoUrl": "string",
    "namaFamiliar": "string",
    "namaResmi": "string",
    "npwp": "string",
    "primaryPic": "string",
    "provinsi": "string",
    "telepon": "string",
    "updatedAt": "string",
    "website": "string"
};

const PelangganClientSiteDtoFields = {
    "alamat": "string",
    "catatan": "string",
    "createdAt": "string",
    "idClient": "string",
    "idClientSite": "string",
    "idKantor": "string",
    "isAktif": "boolean",
    "kategoriSite": "string",
    "kodePos": "string",
    "kota": "string",
    "latitude": "number",
    "longitude": "number",
    "namaSite": "string",
    "provinsi": "string",
    "tagSite": "string",
    "updatedAt": "string"
};

const PelangganClientWidgetDtoFields = {
    "alamat": "string",
    "catatan": "string",
    "createdAt": "string",
    "emailPerusahaan": "string",
    "idClient": "string",
    "isAktif": "boolean",
    "jenisClient": "string",
    "kodeClient": "string",
    "kodePos": "string",
    "kota": "string",
    "logoUrl": "string",
    "namaFamiliar": "string",
    "namaResmi": "string",
    "npwp": "string",
    "primaryPic": "string",
    "provinsi": "string",
    "telepon": "string",
    "total": "number",
    "updatedAt": "string",
    "website": "string"
};

const PelangganContractDtoFields = {
    "catatanKontrak": "string",
    "createdAt": "string",
    "dokumenUrl": "string",
    "durasiBulan": "number",
    "feeSales": "number",
    "idClient": "string",
    "idContract": "string",
    "idContractJenis": "string",
    "idDocument": "string",
    "idKantor": "string",
    "isAutoInvoice": "boolean",
    "namaSales": "string",
    "nilaiAkhir": "number",
    "nilaiBulanan": "number",
    "nilaiDiawal": "number",
    "nilaiKontrak": "number",
    "nomorKontrak": "string",
    "presentaseFee": "number",
    "refKontrakSebelumnya": "string",
    "statusContract": "string",
    "tanggalAkhir": "string",
    "tanggalKontrak": "string",
    "tanggalMulai": "string",
    "updatedAt": "string"
};

const PelangganContractJenisDtoFields = {
    "createdAt": "string",
    "idContractJenis": "string",
    "keterangan": "string",
    "namaContractJenis": "string",
    "role": "string",
    "statusContractJenis": "string",
    "updatedAt": "string"
};

const PelangganContractReportDtoFields = {
    "catatanKontrak": "string",
    "client": "string",
    "createdAt": "string",
    "dokumenUrl": "string",
    "durasiBulan": "number",
    "feeSales": "number",
    "idClient": "string",
    "idContract": "string",
    "idContractJenis": "string",
    "idDocument": "string",
    "idKantor": "string",
    "isAutoInvoice": "boolean",
    "kantor": "string",
    "namaSales": "string",
    "nilaiAkhir": "number",
    "nilaiBulanan": "number",
    "nilaiDiawal": "number",
    "nilaiKontrak": "number",
    "nomorKontrak": "string",
    "presentaseFee": "number",
    "refKontrakSebelumnya": "string",
    "statusContract": "string",
    "tanggalAkhir": "string",
    "tanggalKontrak": "string",
    "tanggalMulai": "string",
    "updatedAt": "string"
};

const PelangganContractSiteDtoFields = {
    "biayaAkhir": "number",
    "biayaBulanan": "number",
    "biayaDiawal": "number",
    "catatan": "string",
    "createdAt": "string",
    "idClientSite": "string",
    "idContract": "string",
    "idContractSite": "string",
    "jumlahJadwalPerBulan": "number",
    "statusContractSite": "string",
    "updatedAt": "string"
};

const PelangganContractSiteReportDtoFields = {
    "biayaAkhir": "number",
    "biayaBulanan": "number",
    "biayaDiawal": "number",
    "catatan": "string",
    "contract": "string",
    "createdAt": "string",
    "idClientSite": "string",
    "idContract": "string",
    "idContractSite": "string",
    "jumlahJadwalPerBulan": "number",
    "statusContractSite": "string",
    "updatedAt": "string"
};

const PelangganContractSiteWidgetDtoFields = {
    "biayaAkhir": "number",
    "biayaBulanan": "number",
    "biayaDiawal": "number",
    "catatan": "string",
    "createdAt": "string",
    "idClientSite": "string",
    "idContract": "string",
    "idContractSite": "string",
    "jumlahJadwalPerBulan": "number",
    "statusContractSite": "string",
    "total": "number",
    "updatedAt": "string"
};

const PelangganContractWidgetDtoFields = {
    "catatanKontrak": "string",
    "createdAt": "string",
    "dokumenUrl": "string",
    "durasiBulan": "number",
    "feeSales": "number",
    "idClient": "string",
    "idContract": "string",
    "idContractJenis": "string",
    "idDocument": "string",
    "idKantor": "string",
    "isAutoInvoice": "boolean",
    "namaSales": "string",
    "nilaiAkhir": "number",
    "nilaiBulanan": "number",
    "nilaiDiawal": "number",
    "nilaiKontrak": "number",
    "nomorKontrak": "string",
    "presentaseFee": "number",
    "refKontrakSebelumnya": "string",
    "statusContract": "string",
    "tanggalAkhir": "string",
    "tanggalKontrak": "string",
    "tanggalMulai": "string",
    "total": "number",
    "updatedAt": "string"
};

const PelangganInvoiceDtoFields = {
    "alamatPenagihan": "string",
    "catatan": "string",
    "createdAt": "string",
    "createdBy": "string",
    "dpp": "number",
    "idContract": "string",
    "idInvoice": "string",
    "jenisInvoice": "string",
    "metodePembayaran": "string",
    "nilaiInvoice": "number",
    "nomorInvoice": "string",
    "npwp": "string",
    "periode": "string",
    "picPenagihan": "string",
    "ppn": "number",
    "statusInvoice": "string",
    "tanggalDibayar": "string",
    "tanggalJatuhTempo": "string",
    "tanggalTerbit": "string",
    "updatedAt": "string",
    "updatedBy": "string"
};

const PelangganInvoiceReportDtoFields = {
    "alamatPenagihan": "string",
    "catatan": "string",
    "contract": "string",
    "createdAt": "string",
    "createdBy": "string",
    "dpp": "number",
    "idContract": "string",
    "idInvoice": "string",
    "jenisInvoice": "string",
    "metodePembayaran": "string",
    "nilaiInvoice": "number",
    "nomorInvoice": "string",
    "npwp": "string",
    "periode": "string",
    "picPenagihan": "string",
    "ppn": "number",
    "statusInvoice": "string",
    "tanggalDibayar": "string",
    "tanggalJatuhTempo": "string",
    "tanggalTerbit": "string",
    "updatedAt": "string",
    "updatedBy": "string"
};

const PelangganInvoiceWidgetDtoFields = {
    "alamatPenagihan": "string",
    "catatan": "string",
    "createdAt": "string",
    "createdBy": "string",
    "dpp": "number",
    "idContract": "string",
    "idInvoice": "string",
    "jenisInvoice": "string",
    "metodePembayaran": "string",
    "nilaiInvoice": "number",
    "nomorInvoice": "string",
    "npwp": "string",
    "periode": "string",
    "picPenagihan": "string",
    "ppn": "number",
    "statusInvoice": "string",
    "tanggalDibayar": "string",
    "tanggalJatuhTempo": "string",
    "tanggalTerbit": "string",
    "total": "number",
    "updatedAt": "string",
    "updatedBy": "string"
};

const PelangganKantorDtoFields = {
    "alamat": "string",
    "catatan": "string",
    "createdAt": "string",
    "idKantor": "string",
    "isAktif": "boolean",
    "isPusat": "boolean",
    "kodeKantor": "string",
    "kota": "string",
    "namaKantor": "string",
    "provinsi": "string",
    "updatedAt": "string"
};

const RefreshTokenDtoFields = {};

const ResetPasswordDtoFields = {};

const SelectFieldDtoFields = {
    "alias": "string",
    "field": "string",
    "type": "string"
};

const SimpleMessageDtoFields = {
    "message": "string"
};

const TokenOnlyResponseDtoFields = {
    "access_token": "string",
    "refresh_token": "string"
};

const ToolsCustomFieldDtoFields = {
    "catatan": "string",
    "createdAt": "string",
    "defaultValue": "string",
    "idCustomField": "string",
    "idCustomFieldGroup": "string",
    "isFilterable": "boolean",
    "isRequired": "boolean",
    "kodeField": "string",
    "labelField": "string",
    "opsiSelect": "string",
    "prefixField": "string",
    "tipeField": "string",
    "updatedAt": "string",
    "urutan": "number",
    "validasi": "string"
};

const ToolsCustomFieldGroupDtoFields = {
    "createdAt": "string",
    "deskripsi": "string",
    "forKantor": "string",
    "forRole": "string",
    "idCustomFieldGroup": "string",
    "isRepeatable": "boolean",
    "modul": "string",
    "namaGroup": "string",
    "tableName": "string",
    "tipeRender": "string",
    "updatedAt": "string",
    "urutan": "number",
    "visibilityRule": "string"
};

const ToolsCustomFieldGroupReportDtoFields = {
    "createdAt": "string",
    "deskripsi": "string",
    "forKantor": "string",
    "forRole": "string",
    "idCustomFieldGroup": "string",
    "isRepeatable": "boolean",
    "modul": "string",
    "namaGroup": "string",
    "tableName": "string",
    "tipeRender": "string",
    "updatedAt": "string",
    "urutan": "number",
    "visibilityRule": "string"
};

const ToolsCustomFieldGroupWidgetDtoFields = {
    "createdAt": "string",
    "deskripsi": "string",
    "forKantor": "string",
    "forRole": "string",
    "idCustomFieldGroup": "string",
    "isRepeatable": "boolean",
    "modul": "string",
    "namaGroup": "string",
    "tableName": "string",
    "tipeRender": "string",
    "total": "number",
    "updatedAt": "string",
    "urutan": "number",
    "visibilityRule": "string"
};

const ToolsCustomFieldValueDtoFields = {
    "createdAt": "string",
    "idCustomField": "string",
    "idCustomFieldGroup": "string",
    "idCustomFieldValue": "string",
    "kodeField": "string",
    "labelField": "string",
    "modul": "string",
    "modulId": "string",
    "nilai": "string",
    "nilaiJson": "string",
    "tableName": "string",
    "updatedAt": "string"
};

const ToolsCustomFieldValueReportDtoFields = {
    "createdAt": "string",
    "idCustomField": "string",
    "idCustomFieldGroup": "string",
    "idCustomFieldValue": "string",
    "kodeField": "string",
    "labelField": "string",
    "modul": "string",
    "modulId": "string",
    "nilai": "string",
    "nilaiJson": "string",
    "tableName": "string",
    "updatedAt": "string"
};

const ToolsCustomFieldValueWidgetDtoFields = {
    "createdAt": "string",
    "idCustomField": "string",
    "idCustomFieldGroup": "string",
    "idCustomFieldValue": "string",
    "kodeField": "string",
    "labelField": "string",
    "modul": "string",
    "modulId": "string",
    "nilai": "string",
    "nilaiJson": "string",
    "tableName": "string",
    "total": "number",
    "updatedAt": "string"
};

const ToolsDocumentNumberingCounterDtoFields = {
    "bulan": "number",
    "createdAt": "string",
    "forModule": "string",
    "forModuleId": "string",
    "idDocumentNumbering": "string",
    "idDocumentNumberingCounter": "string",
    "idKantor": "string",
    "lastNumber": "number",
    "tahun": "number",
    "targetColumn": "string",
    "updatedAt": "string"
};

const ToolsDocumentNumberingDtoFields = {
    "allowManualEntry": "boolean",
    "allowedRoles": "string",
    "createdAt": "string",
    "digitNomor": "number",
    "forModule": "string",
    "formatNomor": "string",
    "idDocumentNumbering": "string",
    "isActive": "boolean",
    "label": "string",
    "resetPeriode": "string",
    "targetColumn": "string",
    "targetTable": "string",
    "triggerStage": "string",
    "updatedAt": "string"
};

const ToolsWorkflowAggregatorDtoFields = {
    "createdAt": "string",
    "fromModule": "string",
    "fromModuleId": "string",
    "idWorkflow": "string",
    "idWorkflowAggregator": "string",
    "lastApprovalDate": "string",
    "lastApprovalNote": "string",
    "lastApprovalStatus": "string",
    "lastApprovalUser": "string",
    "lastWorkflowStep": "string",
    "updatedAt": "string"
};

const ToolsWorkflowDtoFields = {
    "createdAt": "string",
    "forModule": "string",
    "idKantor": "string",
    "idWorkflow": "string",
    "isDefault": "boolean",
    "keterangan": "string",
    "namaWorkflow": "string",
    "statusField": "string",
    "statusWorkflow": "string",
    "targetDb": "string",
    "targetTable": "string",
    "updatedAt": "string"
};

const ToolsWorkflowLogDtoFields = {
    "approvedAt": "string",
    "approvedBy": "string",
    "catatan": "string",
    "forModule": "string",
    "fromModuleId": "string",
    "idUsers": "string",
    "idWorkflow": "string",
    "idWorkflowLog": "string",
    "idWorkflowStep": "string",
    "namaUser": "string",
    "statusAfter": "string",
    "statusBefore": "string"
};

const ToolsWorkflowLogReportDtoFields = {
    "approvedAt": "string",
    "approvedBy": "string",
    "catatan": "string",
    "forModule": "string",
    "fromModuleId": "string",
    "idUsers": "string",
    "idWorkflow": "string",
    "idWorkflowLog": "string",
    "idWorkflowStep": "string",
    "namaUser": "string",
    "statusAfter": "string",
    "statusBefore": "string",
    "workflow": "string"
};

const ToolsWorkflowLogWidgetDtoFields = {
    "approvedAt": "string",
    "approvedBy": "string",
    "catatan": "string",
    "forModule": "string",
    "fromModuleId": "string",
    "idUsers": "string",
    "idWorkflow": "string",
    "idWorkflowLog": "string",
    "idWorkflowStep": "string",
    "namaUser": "string",
    "statusAfter": "string",
    "statusBefore": "string",
    "total": "number"
};

const ToolsWorkflowReportDtoFields = {
    "createdAt": "string",
    "forModule": "string",
    "idKantor": "string",
    "idWorkflow": "string",
    "isDefault": "boolean",
    "keterangan": "string",
    "namaWorkflow": "string",
    "statusField": "string",
    "statusWorkflow": "string",
    "targetDb": "string",
    "targetTable": "string",
    "updatedAt": "string"
};

const ToolsWorkflowStepDtoFields = {
    "allowRoles": "string",
    "allowUserIds": "string",
    "createdAt": "string",
    "customCheckSql": "string",
    "idWorkflow": "string",
    "idWorkflowStep": "string",
    "messageBefore": "string",
    "ruleJson": "string",
    "statusFrom": "string",
    "statusRejectTo": "number",
    "statusTo": "string",
    "triggerJson": "string",
    "updatedAt": "string",
    "urutan": "number"
};

const ToolsWorkflowStepReportDtoFields = {
    "allowRoles": "string",
    "allowUserIds": "string",
    "createdAt": "string",
    "customCheckSql": "string",
    "idWorkflow": "string",
    "idWorkflowStep": "string",
    "messageBefore": "string",
    "ruleJson": "string",
    "statusFrom": "string",
    "statusRejectTo": "number",
    "statusTo": "string",
    "triggerJson": "string",
    "updatedAt": "string",
    "urutan": "number",
    "workflow": "string"
};

const ToolsWorkflowStepWidgetDtoFields = {
    "allowRoles": "string",
    "allowUserIds": "string",
    "createdAt": "string",
    "customCheckSql": "string",
    "idWorkflow": "string",
    "idWorkflowStep": "string",
    "messageBefore": "string",
    "ruleJson": "string",
    "statusFrom": "string",
    "statusRejectTo": "number",
    "statusTo": "string",
    "total": "number",
    "triggerJson": "string",
    "updatedAt": "string",
    "urutan": "number"
};

const ToolsWorkflowWidgetDtoFields = {
    "createdAt": "string",
    "forModule": "string",
    "idKantor": "string",
    "idWorkflow": "string",
    "isDefault": "boolean",
    "keterangan": "string",
    "namaWorkflow": "string",
    "statusField": "string",
    "statusWorkflow": "string",
    "targetDb": "string",
    "targetTable": "string",
    "total": "number",
    "updatedAt": "string"
};

const WorkflowApplyDtoFields = {
    "catatan": "string",
    "from_module": "string",
    "from_module_id": "string",
    "status": "string",
    "user_id": "string"
};

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

/**
 * Generated bundle index. Do not edit.
 */

export { AclModuleDtoFields, AclModuleFormSchema, AclUserGroupDtoFields, AclUserGroupFormSchema, AclUserTokensDtoFields, AclUserTokensFormSchema, AclUsersDtoFields, AclUsersFormSchema, AclUsersReportDtoFields, AclUsersReportFormSchema, AclUsersWidgetDtoFields, AclUsersWidgetFormSchema, ActypeReportService, ActypeService, ActypeWidgetService, AircraftDetailReportService, AircraftDetailService, AircraftDetailWidgetService, AircraftReportService, AircraftService, AircraftWidgetService, AmimsActypeDtoFields, AmimsActypeFormSchema, AmimsActypeReportDtoFields, AmimsActypeReportFormSchema, AmimsActypeWidgetDtoFields, AmimsActypeWidgetFormSchema, AmimsAircraftDetailDtoFields, AmimsAircraftDetailFormSchema, AmimsAircraftDetailReportDtoFields, AmimsAircraftDetailReportFormSchema, AmimsAircraftDetailWidgetDtoFields, AmimsAircraftDetailWidgetFormSchema, AmimsAircraftDtoFields, AmimsAircraftFormSchema, AmimsAircraftReportDtoFields, AmimsAircraftReportFormSchema, AmimsAircraftWidgetDtoFields, AmimsAircraftWidgetFormSchema, AmimsAtaDtoFields, AmimsAtaFormSchema, AmimsBinDtoFields, AmimsBinFormSchema, AmimsBinReportDtoFields, AmimsBinReportFormSchema, AmimsBinWidgetDtoFields, AmimsBinWidgetFormSchema, AmimsCompanyDtoFields, AmimsCompanyFormSchema, AmimsConditionMonitoringDtoFields, AmimsConditionMonitoringFormSchema, AmimsConditionMonitoringReportDtoFields, AmimsConditionMonitoringReportFormSchema, AmimsConditionMonitoringWidgetDtoFields, AmimsConditionMonitoringWidgetFormSchema, AmimsCurrencyDtoFields, AmimsCurrencyFormSchema, AmimsCurrencyReportDtoFields, AmimsCurrencyReportFormSchema, AmimsCurrencyWidgetDtoFields, AmimsCurrencyWidgetFormSchema, AmimsDoctypeDtoFields, AmimsDoctypeFormSchema, AmimsDueListDtoFields, AmimsDueListFormSchema, AmimsDueListOutputDtoFields, AmimsDueListOutputFormSchema, AmimsDueListOutputReportDtoFields, AmimsDueListOutputReportFormSchema, AmimsDueListOutputWidgetDtoFields, AmimsDueListOutputWidgetFormSchema, AmimsDueListReportDtoFields, AmimsDueListReportFormSchema, AmimsDueListWidgetDtoFields, AmimsDueListWidgetFormSchema, AmimsEngineerPmtrDtoFields, AmimsEngineerPmtrFormSchema, AmimsEngineerPmtrItemDtoFields, AmimsEngineerPmtrItemFormSchema, AmimsEngineerPmtrItemReportDtoFields, AmimsEngineerPmtrItemReportFormSchema, AmimsEngineerPmtrItemWidgetDtoFields, AmimsEngineerPmtrItemWidgetFormSchema, AmimsEngineerPmtrReportDtoFields, AmimsEngineerPmtrReportFormSchema, AmimsEngineerPmtrWidgetDtoFields, AmimsEngineerPmtrWidgetFormSchema, AmimsEngineerPrisDtoFields, AmimsEngineerPrisFormSchema, AmimsEngineerPrisItemDtoFields, AmimsEngineerPrisItemFormSchema, AmimsEngineerPrisItemReportDtoFields, AmimsEngineerPrisItemReportFormSchema, AmimsEngineerPrisItemWidgetDtoFields, AmimsEngineerPrisItemWidgetFormSchema, AmimsEngineerPrisReportDtoFields, AmimsEngineerPrisReportFormSchema, AmimsEngineerPrisReturnDtoFields, AmimsEngineerPrisReturnFormSchema, AmimsEngineerPrisReturnItemDtoFields, AmimsEngineerPrisReturnItemFormSchema, AmimsEngineerPrisReturnItemReportDtoFields, AmimsEngineerPrisReturnItemReportFormSchema, AmimsEngineerPrisReturnItemWidgetDtoFields, AmimsEngineerPrisReturnItemWidgetFormSchema, AmimsEngineerPrisReturnReportDtoFields, AmimsEngineerPrisReturnReportFormSchema, AmimsEngineerPrisReturnWidgetDtoFields, AmimsEngineerPrisReturnWidgetFormSchema, AmimsEngineerPrisWidgetDtoFields, AmimsEngineerPrisWidgetFormSchema, AmimsEngineerRtiDtoFields, AmimsEngineerRtiFormSchema, AmimsEngineerRtiIdentifyDtoFields, AmimsEngineerRtiIdentifyFormSchema, AmimsEngineerRtiIdentifyReportDtoFields, AmimsEngineerRtiIdentifyReportFormSchema, AmimsEngineerRtiIdentifyWidgetDtoFields, AmimsEngineerRtiIdentifyWidgetFormSchema, AmimsEngineerRtiPartDtoFields, AmimsEngineerRtiPartFormSchema, AmimsEngineerRtiPartReportDtoFields, AmimsEngineerRtiPartReportFormSchema, AmimsEngineerRtiPartWidgetDtoFields, AmimsEngineerRtiPartWidgetFormSchema, AmimsEngineerRtiReportDtoFields, AmimsEngineerRtiReportFormSchema, AmimsEngineerRtiWidgetDtoFields, AmimsEngineerRtiWidgetFormSchema, AmimsFigureIndexDtoFields, AmimsFigureIndexFormSchema, AmimsInspectionDtoFields, AmimsInspectionFormSchema, AmimsInspectionReportDtoFields, AmimsInspectionReportFormSchema, AmimsInspectionWidgetDtoFields, AmimsInspectionWidgetFormSchema, AmimsInternalGrnDtoFields, AmimsInternalGrnFormSchema, AmimsInternalGrnItemDtoFields, AmimsInternalGrnItemFormSchema, AmimsInternalGrnItemReportDtoFields, AmimsInternalGrnItemReportFormSchema, AmimsInternalGrnItemWidgetDtoFields, AmimsInternalGrnItemWidgetFormSchema, AmimsInternalGrnReportDtoFields, AmimsInternalGrnReportFormSchema, AmimsInternalGrnWidgetDtoFields, AmimsInternalGrnWidgetFormSchema, AmimsLastMaintenanceDtoFields, AmimsLastMaintenanceFormSchema, AmimsLastMaintenanceReportDtoFields, AmimsLastMaintenanceReportFormSchema, AmimsLastMaintenanceWidgetDtoFields, AmimsLastMaintenanceWidgetFormSchema, AmimsLibFormIssuedDtoFields, AmimsLibFormIssuedFormSchema, AmimsLibReferenceDtoFields, AmimsLibReferenceFormSchema, AmimsLibUploadDtoFields, AmimsLibUploadFormSchema, AmimsLifeTimeLimitDtoFields, AmimsLifeTimeLimitFormSchema, AmimsLifeTimeLimitReportDtoFields, AmimsLifeTimeLimitReportFormSchema, AmimsLifeTimeLimitWidgetDtoFields, AmimsLifeTimeLimitWidgetFormSchema, AmimsLocationFlightDtoFields, AmimsLocationFlightFormSchema, AmimsLocationFlightReportDtoFields, AmimsLocationFlightReportFormSchema, AmimsLocationFlightWidgetDtoFields, AmimsLocationFlightWidgetFormSchema, AmimsLogProcessDtoFields, AmimsLogProcessFormSchema, AmimsLogProcessReportDtoFields, AmimsLogProcessReportFormSchema, AmimsLogProcessWidgetDtoFields, AmimsLogProcessWidgetFormSchema, AmimsLogSpDtoFields, AmimsLogSpFormSchema, AmimsLogSpReportDtoFields, AmimsLogSpReportFormSchema, AmimsLogSpWidgetDtoFields, AmimsLogSpWidgetFormSchema, AmimsLogTransferDtoFields, AmimsLogTransferFormSchema, AmimsLogTransferReportDtoFields, AmimsLogTransferReportFormSchema, AmimsLogTransferWidgetDtoFields, AmimsLogTransferWidgetFormSchema, AmimsLogTsnTsoDtoFields, AmimsLogTsnTsoFormSchema, AmimsLogTsnTsoReportDtoFields, AmimsLogTsnTsoReportFormSchema, AmimsLogTsnTsoWidgetDtoFields, AmimsLogTsnTsoWidgetFormSchema, AmimsLogUserDtoFields, AmimsLogUserFormSchema, AmimsMaintenanceCodeDtoFields, AmimsMaintenanceCodeFormIssuedDtoFields, AmimsMaintenanceCodeFormIssuedFormSchema, AmimsMaintenanceCodeFormSchema, AmimsMaintenanceCodeReferenceDtoFields, AmimsMaintenanceCodeReferenceFormSchema, AmimsMaintenanceCodeReportDtoFields, AmimsMaintenanceCodeReportFormSchema, AmimsMaintenanceCodeWidgetDtoFields, AmimsMaintenanceCodeWidgetFormSchema, AmimsMaintenanceDocumentDtoFields, AmimsMaintenanceDocumentFormSchema, AmimsMaintenanceDtoFields, AmimsMaintenanceFormSchema, AmimsMaintenanceMaterialDtoFields, AmimsMaintenanceMaterialFormSchema, AmimsMaintenanceReportDtoFields, AmimsMaintenanceReportFormSchema, AmimsMaintenanceWidgetDtoFields, AmimsMaintenanceWidgetFormSchema, AmimsMcurrencyDtoFields, AmimsMcurrencyFormSchema, AmimsMelDtoFields, AmimsMelFormSchema, AmimsMpartDtoFields, AmimsMpartFormSchema, AmimsMpartReportDtoFields, AmimsMpartReportFormSchema, AmimsMpartWidgetDtoFields, AmimsMpartWidgetFormSchema, AmimsMpcGseDtoFields, AmimsMpcGseFormSchema, AmimsMpcGseReportDtoFields, AmimsMpcGseReportFormSchema, AmimsMpcGseWidgetDtoFields, AmimsMpcGseWidgetFormSchema, AmimsMpcJoDtoFields, AmimsMpcJoFormSchema, AmimsMpcJoOperatorDtoFields, AmimsMpcJoOperatorFormSchema, AmimsMpcJoOperatorReportDtoFields, AmimsMpcJoOperatorReportFormSchema, AmimsMpcJoOperatorWidgetDtoFields, AmimsMpcJoOperatorWidgetFormSchema, AmimsMpcJoReportDtoFields, AmimsMpcJoReportFormSchema, AmimsMpcJoWidgetDtoFields, AmimsMpcJoWidgetFormSchema, AmimsMpcPiroDtoFields, AmimsMpcPiroFormSchema, AmimsMpcPiroItemDtoFields, AmimsMpcPiroItemFormSchema, AmimsMpcPiroItemReportDtoFields, AmimsMpcPiroItemReportFormSchema, AmimsMpcPiroItemWidgetDtoFields, AmimsMpcPiroItemWidgetFormSchema, AmimsMpcPiroReportDtoFields, AmimsMpcPiroReportFormSchema, AmimsMpcPiroWidgetDtoFields, AmimsMpcPiroWidgetFormSchema, AmimsMpcSelfMaintenanceDtoFields, AmimsMpcSelfMaintenanceFormSchema, AmimsMpcSelfMaintenanceReportDtoFields, AmimsMpcSelfMaintenanceReportFormSchema, AmimsMpcSelfMaintenanceWidgetDtoFields, AmimsMpcSelfMaintenanceWidgetFormSchema, AmimsMpcWpDtoFields, AmimsMpcWpFormSchema, AmimsMpcWpReportDtoFields, AmimsMpcWpReportFormSchema, AmimsMpcWpWidgetDtoFields, AmimsMpcWpWidgetFormSchema, AmimsPartActypeDtoFields, AmimsPartActypeFormSchema, AmimsPartActypeReportDtoFields, AmimsPartActypeReportFormSchema, AmimsPartActypeWidgetDtoFields, AmimsPartActypeWidgetFormSchema, AmimsPartAlternativeDtoFields, AmimsPartAlternativeFormSchema, AmimsPartAlternativeReportDtoFields, AmimsPartAlternativeReportFormSchema, AmimsPartAlternativeWidgetDtoFields, AmimsPartAlternativeWidgetFormSchema, AmimsPartAtaDtoFields, AmimsPartAtaFormSchema, AmimsPartAtaReportDtoFields, AmimsPartAtaReportFormSchema, AmimsPartAtaWidgetDtoFields, AmimsPartAtaWidgetFormSchema, AmimsPartCategoryDtoFields, AmimsPartCategoryFormSchema, AmimsPartCategoryReportDtoFields, AmimsPartCategoryReportFormSchema, AmimsPartCategoryWidgetDtoFields, AmimsPartCategoryWidgetFormSchema, AmimsPartConditionDtoFields, AmimsPartConditionFormSchema, AmimsPartConditionReportDtoFields, AmimsPartConditionReportFormSchema, AmimsPartConditionWidgetDtoFields, AmimsPartConditionWidgetFormSchema, AmimsPartDtoFields, AmimsPartFigureIndexDtoFields, AmimsPartFigureIndexFormSchema, AmimsPartFigureIndexReportDtoFields, AmimsPartFigureIndexReportFormSchema, AmimsPartFigureIndexWidgetDtoFields, AmimsPartFigureIndexWidgetFormSchema, AmimsPartFormSchema, AmimsPartInstallDtoFields, AmimsPartInstallFormSchema, AmimsPartInstallOldDtoFields, AmimsPartInstallOldFormSchema, AmimsPartInstallOldReportDtoFields, AmimsPartInstallOldReportFormSchema, AmimsPartInstallOldWidgetDtoFields, AmimsPartInstallOldWidgetFormSchema, AmimsPartInstallReportDtoFields, AmimsPartInstallReportFormSchema, AmimsPartInstallWidgetDtoFields, AmimsPartInstallWidgetFormSchema, AmimsPartLogDtoFields, AmimsPartLogFormSchema, AmimsPartLogReportDtoFields, AmimsPartLogReportFormSchema, AmimsPartLogWidgetDtoFields, AmimsPartLogWidgetFormSchema, AmimsPartReportDtoFields, AmimsPartReportFormSchema, AmimsPartWidgetDtoFields, AmimsPartWidgetFormSchema, AmimsPartidDtoFields, AmimsPartidFormSchema, AmimsPartidReportDtoFields, AmimsPartidReportFormSchema, AmimsPartidWidgetDtoFields, AmimsPartidWidgetFormSchema, AmimsPilotDtoFields, AmimsPilotFormSchema, AmimsPilotReportDtoFields, AmimsPilotReportFormSchema, AmimsPilotWidgetDtoFields, AmimsPilotWidgetFormSchema, AmimsPositionDtoFields, AmimsPositionFormSchema, AmimsPositionReportDtoFields, AmimsPositionReportFormSchema, AmimsPositionWidgetDtoFields, AmimsPositionWidgetFormSchema, AmimsPurGrnDtoFields, AmimsPurGrnFormSchema, AmimsPurGrnItemDtoFields, AmimsPurGrnItemFormSchema, AmimsPurGrnItemReportDtoFields, AmimsPurGrnItemReportFormSchema, AmimsPurGrnItemWidgetDtoFields, AmimsPurGrnItemWidgetFormSchema, AmimsPurGrnReportDtoFields, AmimsPurGrnReportFormSchema, AmimsPurGrnWidgetDtoFields, AmimsPurGrnWidgetFormSchema, AmimsPurPoDtoFields, AmimsPurPoFormSchema, AmimsPurPoItemDtoFields, AmimsPurPoItemFormSchema, AmimsPurPoItemReportDtoFields, AmimsPurPoItemReportFormSchema, AmimsPurPoItemWidgetDtoFields, AmimsPurPoItemWidgetFormSchema, AmimsPurPoReportDtoFields, AmimsPurPoReportFormSchema, AmimsPurPoWidgetDtoFields, AmimsPurPoWidgetFormSchema, AmimsPurPrDtoFields, AmimsPurPrFormSchema, AmimsPurPrItemDtoFields, AmimsPurPrItemFormSchema, AmimsPurPrItemReportDtoFields, AmimsPurPrItemReportFormSchema, AmimsPurPrItemWidgetDtoFields, AmimsPurPrItemWidgetFormSchema, AmimsPurPrReportDtoFields, AmimsPurPrReportFormSchema, AmimsPurPrWidgetDtoFields, AmimsPurPrWidgetFormSchema, AmimsPurPrclDtoFields, AmimsPurPrclFormSchema, AmimsPurPrclReportDtoFields, AmimsPurPrclReportFormSchema, AmimsPurPrclWidgetDtoFields, AmimsPurPrclWidgetFormSchema, AmimsPurReturnDtoFields, AmimsPurReturnFormSchema, AmimsPurReturnItemDtoFields, AmimsPurReturnItemFormSchema, AmimsPurReturnItemReportDtoFields, AmimsPurReturnItemReportFormSchema, AmimsPurReturnItemWidgetDtoFields, AmimsPurReturnItemWidgetFormSchema, AmimsPurReturnReportDtoFields, AmimsPurReturnReportFormSchema, AmimsPurReturnWidgetDtoFields, AmimsPurReturnWidgetFormSchema, AmimsPurVendorContactDtoFields, AmimsPurVendorContactFormSchema, AmimsPurVendorContactReportDtoFields, AmimsPurVendorContactReportFormSchema, AmimsPurVendorContactWidgetDtoFields, AmimsPurVendorContactWidgetFormSchema, AmimsPurVendorDtoFields, AmimsPurVendorFormSchema, AmimsPurVendorItemDtoFields, AmimsPurVendorItemFormSchema, AmimsPurVendorItemReportDtoFields, AmimsPurVendorItemReportFormSchema, AmimsPurVendorItemWidgetDtoFields, AmimsPurVendorItemWidgetFormSchema, AmimsPurVendorReportDtoFields, AmimsPurVendorReportFormSchema, AmimsPurVendorWidgetDtoFields, AmimsPurVendorWidgetFormSchema, AmimsQaRpdDispotitionDtoFields, AmimsQaRpdDispotitionFormSchema, AmimsQaRpdDispotitionReportDtoFields, AmimsQaRpdDispotitionReportFormSchema, AmimsQaRpdDispotitionWidgetDtoFields, AmimsQaRpdDispotitionWidgetFormSchema, AmimsQaRpdDtoFields, AmimsQaRpdFormSchema, AmimsQaRpdReportDtoFields, AmimsQaRpdReportFormSchema, AmimsQaRpdWidgetDtoFields, AmimsQaRpdWidgetFormSchema, AmimsQaTransferDtoFields, AmimsQaTransferFormSchema, AmimsQaTransferItemDtoFields, AmimsQaTransferItemFormSchema, AmimsQaTransferItemReportDtoFields, AmimsQaTransferItemReportFormSchema, AmimsQaTransferItemWidgetDtoFields, AmimsQaTransferItemWidgetFormSchema, AmimsQaTransferReportDtoFields, AmimsQaTransferReportFormSchema, AmimsQaTransferWidgetDtoFields, AmimsQaTransferWidgetFormSchema, AmimsRotaryFactorDtoFields, AmimsRotaryFactorFormSchema, AmimsRotaryFactorReportDtoFields, AmimsRotaryFactorReportFormSchema, AmimsRotaryFactorWidgetDtoFields, AmimsRotaryFactorWidgetFormSchema, AmimsShippingDtoFields, AmimsShippingFormSchema, AmimsShippingReportDtoFields, AmimsShippingReportFormSchema, AmimsShippingWidgetDtoFields, AmimsShippingWidgetFormSchema, AmimsSiteDtoFields, AmimsSiteFormSchema, AmimsSiteReportDtoFields, AmimsSiteReportFormSchema, AmimsSiteWidgetDtoFields, AmimsSiteWidgetFormSchema, AmimsStockDtoFields, AmimsStockFormSchema, AmimsStockReportDtoFields, AmimsStockReportFormSchema, AmimsStockWidgetDtoFields, AmimsStockWidgetFormSchema, AmimsStoreDestroyDtoFields, AmimsStoreDestroyFormSchema, AmimsStoreDestroyReportDtoFields, AmimsStoreDestroyReportFormSchema, AmimsStoreDestroyWidgetDtoFields, AmimsStoreDestroyWidgetFormSchema, AmimsStoreTransferDtoFields, AmimsStoreTransferFormSchema, AmimsStoreTransferItemDtoFields, AmimsStoreTransferItemFormSchema, AmimsStoreTransferItemReportDtoFields, AmimsStoreTransferItemReportFormSchema, AmimsStoreTransferItemWidgetDtoFields, AmimsStoreTransferItemWidgetFormSchema, AmimsStoreTransferReportDtoFields, AmimsStoreTransferReportFormSchema, AmimsStoreTransferWidgetDtoFields, AmimsStoreTransferWidgetFormSchema, AmimsTdDetailAcDtoFields, AmimsTdDetailAcFormSchema, AmimsTdDetailAcReportDtoFields, AmimsTdDetailAcReportFormSchema, AmimsTdDetailAcWidgetDtoFields, AmimsTdDetailAcWidgetFormSchema, AmimsTdDetailDtoFields, AmimsTdDetailFormSchema, AmimsTdDetailReportDtoFields, AmimsTdDetailReportFormSchema, AmimsTdDetailWidgetDtoFields, AmimsTdDetailWidgetFormSchema, AmimsTdDtoFields, AmimsTdFormSchema, AmimsTdRefDtoFields, AmimsTdRefFormSchema, AmimsTdRefReportDtoFields, AmimsTdRefReportFormSchema, AmimsTdRefWidgetDtoFields, AmimsTdRefWidgetFormSchema, AmimsTdReportDtoFields, AmimsTdReportFormSchema, AmimsTdTypeDtoFields, AmimsTdTypeFormSchema, AmimsTdTypeReportDtoFields, AmimsTdTypeReportFormSchema, AmimsTdTypeWidgetDtoFields, AmimsTdTypeWidgetFormSchema, AmimsTdWidgetDtoFields, AmimsTdWidgetFormSchema, AmimsTechDefectDtoFields, AmimsTechDefectFormSchema, AmimsTechDefectReportDtoFields, AmimsTechDefectReportFormSchema, AmimsTechDefectWidgetDtoFields, AmimsTechDefectWidgetFormSchema, AmimsTechDiscrepanciesDtoFields, AmimsTechDiscrepanciesFormSchema, AmimsTechDiscrepanciesReportDtoFields, AmimsTechDiscrepanciesReportFormSchema, AmimsTechDiscrepanciesWidgetDtoFields, AmimsTechDiscrepanciesWidgetFormSchema, AmimsTechLogDtoFields, AmimsTechLogEngineCheckDtoFields, AmimsTechLogEngineCheckFormSchema, AmimsTechLogEngineCheckReportDtoFields, AmimsTechLogEngineCheckReportFormSchema, AmimsTechLogEngineCheckWidgetDtoFields, AmimsTechLogEngineCheckWidgetFormSchema, AmimsTechLogEngineDtoFields, AmimsTechLogEngineFormSchema, AmimsTechLogEngineReportDtoFields, AmimsTechLogEngineReportFormSchema, AmimsTechLogEngineWidgetDtoFields, AmimsTechLogEngineWidgetFormSchema, AmimsTechLogFormSchema, AmimsTechLogItemDtoFields, AmimsTechLogItemFormSchema, AmimsTechLogItemReportDtoFields, AmimsTechLogItemReportFormSchema, AmimsTechLogItemWidgetDtoFields, AmimsTechLogItemWidgetFormSchema, AmimsTechLogJoDtoFields, AmimsTechLogJoFormSchema, AmimsTechLogJoReportDtoFields, AmimsTechLogJoReportFormSchema, AmimsTechLogJoWidgetDtoFields, AmimsTechLogJoWidgetFormSchema, AmimsTechLogReportDtoFields, AmimsTechLogReportFormSchema, AmimsTechLogWidgetDtoFields, AmimsTechLogWidgetFormSchema, AmimsTypeOfworkDtoFields, AmimsTypeOfworkFormSchema, AmimsTypeOfworkReportDtoFields, AmimsTypeOfworkReportFormSchema, AmimsTypeOfworkWidgetDtoFields, AmimsTypeOfworkWidgetFormSchema, AmimsUnscheduleMaintenanceDtoFields, AmimsUnscheduleMaintenanceFormSchema, AmimsUnscheduleMaintenanceReportDtoFields, AmimsUnscheduleMaintenanceReportFormSchema, AmimsUnscheduleMaintenanceWidgetDtoFields, AmimsUnscheduleMaintenanceWidgetFormSchema, AmimsVDueListOutputDtoFields, AmimsVDueListOutputFormSchema, AmimsVDueListOutputReportDtoFields, AmimsVDueListOutputReportFormSchema, AmimsVDueListOutputWidgetDtoFields, AmimsVDueListOutputWidgetFormSchema, AmimsWarrantyDtoFields, AmimsWarrantyFormSchema, ApiModule, AppService, AtaService, AuthProtectService, AuthPublicService, AuthResponseDtoFields, AuthResponseFormSchema, BaseWidgetQueryDtoFields, BaseWidgetQueryFormSchema, BinReportService, BinService, BinWidgetService, CompanyService, ConditionMonitoringReportService, ConditionMonitoringService, ConditionMonitoringWidgetService, CurrencyReportService, CurrencyService, CurrencyWidgetService, CurrentUserResponseDtoFields, CurrentUserResponseFormSchema, CustomFieldGroupReportService, CustomFieldGroupService, CustomFieldGroupWidgetService, CustomFieldService, CustomFieldValueReportService, CustomFieldValueService, CustomFieldValueWidgetService, DoctypeService, DocumentDocumentDtoFields, DocumentDocumentFormSchema, DocumentNumberingCounterService, DocumentNumberingService, DocumentService, DueListOutputReportService, DueListOutputService, DueListOutputWidgetService, EngineerPmtrItemReportService, EngineerPmtrItemService, EngineerPmtrItemWidgetService, EngineerPmtrReportService, EngineerPmtrService, EngineerPmtrWidgetService, EngineerPrisItemReportService, EngineerPrisItemService, EngineerPrisItemWidgetService, EngineerPrisReportService, EngineerPrisReturnItemReportService, EngineerPrisReturnItemService, EngineerPrisReturnItemWidgetService, EngineerPrisReturnReportService, EngineerPrisReturnService, EngineerPrisReturnWidgetService, EngineerPrisService, EngineerPrisWidgetService, EngineerRtiIdentifyReportService, EngineerRtiIdentifyService, EngineerRtiIdentifyWidgetService, EngineerRtiPartReportService, EngineerRtiPartService, EngineerRtiPartWidgetService, EngineerRtiReportService, EngineerRtiService, EngineerRtiWidgetService, FigureIndexService, InspectionReportService, InspectionService, InspectionWidgetService, InternalGrnItemReportService, InternalGrnItemService, InternalGrnItemWidgetService, InternalGrnReportService, InternalGrnService, InternalGrnWidgetService, LastMaintenanceReportService, LastMaintenanceService, LastMaintenanceWidgetService, LibUploadService, LifeTimeLimitReportService, LifeTimeLimitService, LifeTimeLimitWidgetService, LocationFlightReportService, LocationFlightService, LocationFlightWidgetService, LogProcessReportService, LogProcessService, LogProcessWidgetService, LogSpReportService, LogSpService, LogSpWidgetService, LogTransferReportService, LogTransferService, LogTransferWidgetService, LogTsnTsoReportService, LogTsnTsoService, LogTsnTsoWidgetService, LogUserService, LoginDtoFields, LoginFormSchema, MaintenanceCodeReportService, MaintenanceCodeService, MaintenanceCodeWidgetService, MaintenanceDocumentService, MaintenanceMaterialService, MaintenanceReportService, MaintenanceService, MaintenanceWidgetService, McurrencyService, MelService, ModuleService, MpartReportService, MpartService, MpartWidgetService, MpcGseReportService, MpcGseService, MpcGseWidgetService, MpcJoOperatorReportService, MpcJoOperatorService, MpcJoOperatorWidgetService, MpcJoReportService, MpcJoService, MpcJoWidgetService, MpcPiroItemReportService, MpcPiroItemService, MpcPiroItemWidgetService, MpcPiroReportService, MpcPiroService, MpcPiroWidgetService, MpcSelfMaintenanceReportService, MpcSelfMaintenanceService, MpcSelfMaintenanceWidgetService, MpcWpReportService, MpcWpService, MpcWpWidgetService, PartActypeReportService, PartActypeService, PartActypeWidgetService, PartAlternativeReportService, PartAlternativeService, PartAlternativeWidgetService, PartAtaReportService, PartAtaService, PartAtaWidgetService, PartCategoryReportService, PartCategoryService, PartCategoryWidgetService, PartConditionReportService, PartConditionService, PartConditionWidgetService, PartFigureIndexReportService, PartFigureIndexService, PartFigureIndexWidgetService, PartInstallOldReportService, PartInstallOldService, PartInstallOldWidgetService, PartInstallReportService, PartInstallService, PartInstallWidgetService, PartLogReportService, PartLogService, PartLogWidgetService, PartReportService, PartService, PartWidgetService, PartidReportService, PartidService, PartidWidgetService, PelangganClientContactDtoFields, PelangganClientContactFormSchema, PelangganClientDtoFields, PelangganClientFormSchema, PelangganClientReportDtoFields, PelangganClientReportFormSchema, PelangganClientSiteDtoFields, PelangganClientSiteFormSchema, PelangganClientWidgetDtoFields, PelangganClientWidgetFormSchema, PelangganContractDtoFields, PelangganContractFormSchema, PelangganContractJenisDtoFields, PelangganContractJenisFormSchema, PelangganContractReportDtoFields, PelangganContractReportFormSchema, PelangganContractSiteDtoFields, PelangganContractSiteFormSchema, PelangganContractSiteReportDtoFields, PelangganContractSiteReportFormSchema, PelangganContractSiteWidgetDtoFields, PelangganContractSiteWidgetFormSchema, PelangganContractWidgetDtoFields, PelangganContractWidgetFormSchema, PelangganInvoiceDtoFields, PelangganInvoiceFormSchema, PelangganInvoiceReportDtoFields, PelangganInvoiceReportFormSchema, PelangganInvoiceWidgetDtoFields, PelangganInvoiceWidgetFormSchema, PelangganKantorDtoFields, PelangganKantorFormSchema, PilotReportService, PilotService, PilotWidgetService, PositionReportService, PositionService, PositionWidgetService, PurGrnItemReportService, PurGrnItemService, PurGrnItemWidgetService, PurGrnReportService, PurGrnService, PurGrnWidgetService, PurPoItemReportService, PurPoItemService, PurPoItemWidgetService, PurPoReportService, PurPoService, PurPoWidgetService, PurPrItemReportService, PurPrItemService, PurPrItemWidgetService, PurPrReportService, PurPrService, PurPrWidgetService, PurPrclReportService, PurPrclService, PurPrclWidgetService, PurReturnItemReportService, PurReturnItemService, PurReturnItemWidgetService, PurReturnReportService, PurReturnService, PurReturnWidgetService, PurVendorContactReportService, PurVendorContactService, PurVendorContactWidgetService, PurVendorItemReportService, PurVendorItemService, PurVendorItemWidgetService, PurVendorReportService, PurVendorService, PurVendorWidgetService, QaRpdDispotitionReportService, QaRpdDispotitionService, QaRpdDispotitionWidgetService, QaRpdReportService, QaRpdService, QaRpdWidgetService, QaTransferItemReportService, QaTransferItemService, QaTransferItemWidgetService, QaTransferReportService, QaTransferService, QaTransferWidgetService, RefreshTokenDtoFields, RefreshTokenFormSchema, ResetPasswordDtoFields, ResetPasswordFormSchema, RotaryFactorReportService, RotaryFactorService, RotaryFactorWidgetService, SelectFieldDtoFields, SelectFieldFormSchema, ShippingReportService, ShippingService, ShippingWidgetService, SimpleMessageDtoFields, SimpleMessageFormSchema, SiteReportService, SiteService, SiteWidgetService, StockReportService, StockService, StockWidgetService, StoreDestroyReportService, StoreDestroyService, StoreDestroyWidgetService, StoreTransferItemReportService, StoreTransferItemService, StoreTransferItemWidgetService, StoreTransferReportService, StoreTransferService, StoreTransferWidgetService, TdDetailAcReportService, TdDetailAcService, TdDetailAcWidgetService, TdDetailReportService, TdDetailService, TdDetailWidgetService, TdRefReportService, TdRefService, TdRefWidgetService, TdReportService, TdService, TdTypeReportService, TdTypeService, TdTypeWidgetService, TdWidgetService, TechDefectReportService, TechDefectService, TechDefectWidgetService, TechDiscrepanciesReportService, TechDiscrepanciesService, TechDiscrepanciesWidgetService, TechLogEngineCheckReportService, TechLogEngineCheckService, TechLogEngineCheckWidgetService, TechLogEngineReportService, TechLogEngineService, TechLogEngineWidgetService, TechLogItemReportService, TechLogItemService, TechLogItemWidgetService, TechLogJoReportService, TechLogJoService, TechLogJoWidgetService, TechLogReportService, TechLogService, TechLogWidgetService, TokenOnlyResponseDtoFields, TokenOnlyResponseFormSchema, ToolsCustomFieldDtoFields, ToolsCustomFieldFormSchema, ToolsCustomFieldGroupDtoFields, ToolsCustomFieldGroupFormSchema, ToolsCustomFieldGroupReportDtoFields, ToolsCustomFieldGroupReportFormSchema, ToolsCustomFieldGroupWidgetDtoFields, ToolsCustomFieldGroupWidgetFormSchema, ToolsCustomFieldValueDtoFields, ToolsCustomFieldValueFormSchema, ToolsCustomFieldValueReportDtoFields, ToolsCustomFieldValueReportFormSchema, ToolsCustomFieldValueWidgetDtoFields, ToolsCustomFieldValueWidgetFormSchema, ToolsDocumentNumberingCounterDtoFields, ToolsDocumentNumberingCounterFormSchema, ToolsDocumentNumberingDtoFields, ToolsDocumentNumberingFormSchema, ToolsWorkflowAggregatorDtoFields, ToolsWorkflowAggregatorFormSchema, ToolsWorkflowDtoFields, ToolsWorkflowFormSchema, ToolsWorkflowLogDtoFields, ToolsWorkflowLogFormSchema, ToolsWorkflowLogReportDtoFields, ToolsWorkflowLogReportFormSchema, ToolsWorkflowLogWidgetDtoFields, ToolsWorkflowLogWidgetFormSchema, ToolsWorkflowReportDtoFields, ToolsWorkflowReportFormSchema, ToolsWorkflowStepDtoFields, ToolsWorkflowStepFormSchema, ToolsWorkflowStepReportDtoFields, ToolsWorkflowStepReportFormSchema, ToolsWorkflowStepWidgetDtoFields, ToolsWorkflowStepWidgetFormSchema, ToolsWorkflowWidgetDtoFields, ToolsWorkflowWidgetFormSchema, TypeOfworkReportService, TypeOfworkService, TypeOfworkWidgetService, UnscheduleMaintenanceReportService, UnscheduleMaintenanceService, UnscheduleMaintenanceWidgetService, UserGroupService, UserTokensService, UsersReportService, UsersService, UsersWidgetService, VDueListOutputReportService, VDueListOutputService, VDueListOutputWidgetService, WarrantyService, WorkflowAggregatorService, WorkflowApplyDtoFields, WorkflowApplyFormSchema, WorkflowApplyService, WorkflowLogReportService, WorkflowLogService, WorkflowLogWidgetService, WorkflowReportService, WorkflowService, WorkflowStepReportService, WorkflowStepService, WorkflowStepWidgetService, WorkflowWidgetService };
//# sourceMappingURL=de-sdk-core.mjs.map

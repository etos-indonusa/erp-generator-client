/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { ToolsWorkflowStepDto } from '../models/tools-workflow-step-dto';
import { workflowStepControllerCreate } from '../fn/workflow-step/workflow-step-controller-create';
import { WorkflowStepControllerCreate$Params } from '../fn/workflow-step/workflow-step-controller-create';
import { workflowStepControllerFindAll } from '../fn/workflow-step/workflow-step-controller-find-all';
import { WorkflowStepControllerFindAll$Params } from '../fn/workflow-step/workflow-step-controller-find-all';
import { workflowStepControllerFindOne } from '../fn/workflow-step/workflow-step-controller-find-one';
import { WorkflowStepControllerFindOne$Params } from '../fn/workflow-step/workflow-step-controller-find-one';
import { workflowStepControllerRemove } from '../fn/workflow-step/workflow-step-controller-remove';
import { WorkflowStepControllerRemove$Params } from '../fn/workflow-step/workflow-step-controller-remove';
import { workflowStepControllerUpdate } from '../fn/workflow-step/workflow-step-controller-update';
import { WorkflowStepControllerUpdate$Params } from '../fn/workflow-step/workflow-step-controller-update';

@Injectable({ providedIn: 'root' })
export class WorkflowStepService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `workflowStepControllerFindAll()` */
  static readonly WorkflowStepControllerFindAllPath = '/auth/workflow_step/workflow_step';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `workflowStepControllerFindAll()` instead.
   *
   * This method doesn't expect any request body.
   */
  workflowStepControllerFindAll$Response(params?: WorkflowStepControllerFindAll$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: Array<ToolsWorkflowStepDto>;
'total'?: number;
}>> {
    return workflowStepControllerFindAll(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `workflowStepControllerFindAll$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  workflowStepControllerFindAll(params?: WorkflowStepControllerFindAll$Params, context?: HttpContext): Observable<{
'code'?: number;
'pesan'?: string;
'data'?: Array<ToolsWorkflowStepDto>;
'total'?: number;
}> {
    return this.workflowStepControllerFindAll$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: Array<ToolsWorkflowStepDto>;
'total'?: number;
}>): {
'code'?: number;
'pesan'?: string;
'data'?: Array<ToolsWorkflowStepDto>;
'total'?: number;
} => r.body)
    );
  }

  /** Path part for operation `workflowStepControllerCreate()` */
  static readonly WorkflowStepControllerCreatePath = '/auth/workflow_step/workflow_step';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `workflowStepControllerCreate()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  workflowStepControllerCreate$Response(params: WorkflowStepControllerCreate$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: ToolsWorkflowStepDto;
}>> {
    return workflowStepControllerCreate(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `workflowStepControllerCreate$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  workflowStepControllerCreate(params: WorkflowStepControllerCreate$Params, context?: HttpContext): Observable<{
'code'?: number;
'pesan'?: string;
'data'?: ToolsWorkflowStepDto;
}> {
    return this.workflowStepControllerCreate$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: ToolsWorkflowStepDto;
}>): {
'code'?: number;
'pesan'?: string;
'data'?: ToolsWorkflowStepDto;
} => r.body)
    );
  }

  /** Path part for operation `workflowStepControllerFindOne()` */
  static readonly WorkflowStepControllerFindOnePath = '/auth/workflow_step/workflow_step/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `workflowStepControllerFindOne()` instead.
   *
   * This method doesn't expect any request body.
   */
  workflowStepControllerFindOne$Response(params: WorkflowStepControllerFindOne$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: ToolsWorkflowStepDto;
}>> {
    return workflowStepControllerFindOne(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `workflowStepControllerFindOne$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  workflowStepControllerFindOne(params: WorkflowStepControllerFindOne$Params, context?: HttpContext): Observable<{
'code'?: number;
'pesan'?: string;
'data'?: ToolsWorkflowStepDto;
}> {
    return this.workflowStepControllerFindOne$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: ToolsWorkflowStepDto;
}>): {
'code'?: number;
'pesan'?: string;
'data'?: ToolsWorkflowStepDto;
} => r.body)
    );
  }

  /** Path part for operation `workflowStepControllerUpdate()` */
  static readonly WorkflowStepControllerUpdatePath = '/auth/workflow_step/workflow_step/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `workflowStepControllerUpdate()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  workflowStepControllerUpdate$Response(params: WorkflowStepControllerUpdate$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: ToolsWorkflowStepDto;
}>> {
    return workflowStepControllerUpdate(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `workflowStepControllerUpdate$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  workflowStepControllerUpdate(params: WorkflowStepControllerUpdate$Params, context?: HttpContext): Observable<{
'code'?: number;
'pesan'?: string;
'data'?: ToolsWorkflowStepDto;
}> {
    return this.workflowStepControllerUpdate$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: ToolsWorkflowStepDto;
}>): {
'code'?: number;
'pesan'?: string;
'data'?: ToolsWorkflowStepDto;
} => r.body)
    );
  }

  /** Path part for operation `workflowStepControllerRemove()` */
  static readonly WorkflowStepControllerRemovePath = '/auth/workflow_step/workflow_step/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `workflowStepControllerRemove()` instead.
   *
   * This method doesn't expect any request body.
   */
  workflowStepControllerRemove$Response(params: WorkflowStepControllerRemove$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: ToolsWorkflowStepDto;
}>> {
    return workflowStepControllerRemove(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `workflowStepControllerRemove$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  workflowStepControllerRemove(params: WorkflowStepControllerRemove$Params, context?: HttpContext): Observable<{
'code'?: number;
'pesan'?: string;
'data'?: ToolsWorkflowStepDto;
}> {
    return this.workflowStepControllerRemove$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: ToolsWorkflowStepDto;
}>): {
'code'?: number;
'pesan'?: string;
'data'?: ToolsWorkflowStepDto;
} => r.body)
    );
  }

}

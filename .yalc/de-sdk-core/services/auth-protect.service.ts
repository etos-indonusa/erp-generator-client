/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { authProtectedControllerGetMe } from '../fn/auth-protect/auth-protected-controller-get-me';
import { AuthProtectedControllerGetMe$Params } from '../fn/auth-protect/auth-protected-controller-get-me';
import { authProtectedControllerLogout } from '../fn/auth-protect/auth-protected-controller-logout';
import { AuthProtectedControllerLogout$Params } from '../fn/auth-protect/auth-protected-controller-logout';
import { CurrentUserResponseDto } from '../models/current-user-response-dto';
import { SimpleMessageDto } from '../models/simple-message-dto';

@Injectable({ providedIn: 'root' })
export class AuthProtectService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `authProtectedControllerGetMe()` */
  static readonly AuthProtectedControllerGetMePath = '/auth/auth-protect/auth-protect/me';

  /**
   * Get current user.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `authProtectedControllerGetMe()` instead.
   *
   * This method doesn't expect any request body.
   */
  authProtectedControllerGetMe$Response(params?: AuthProtectedControllerGetMe$Params, context?: HttpContext): Observable<StrictHttpResponse<CurrentUserResponseDto>> {
    return authProtectedControllerGetMe(this.http, this.rootUrl, params, context);
  }

  /**
   * Get current user.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `authProtectedControllerGetMe$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  authProtectedControllerGetMe(params?: AuthProtectedControllerGetMe$Params, context?: HttpContext): Observable<CurrentUserResponseDto> {
    return this.authProtectedControllerGetMe$Response(params, context).pipe(
      map((r: StrictHttpResponse<CurrentUserResponseDto>): CurrentUserResponseDto => r.body)
    );
  }

  /** Path part for operation `authProtectedControllerLogout()` */
  static readonly AuthProtectedControllerLogoutPath = '/auth/auth-protect/auth-protect/logout';

  /**
   * Logout user.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `authProtectedControllerLogout()` instead.
   *
   * This method doesn't expect any request body.
   */
  authProtectedControllerLogout$Response(params?: AuthProtectedControllerLogout$Params, context?: HttpContext): Observable<StrictHttpResponse<SimpleMessageDto>> {
    return authProtectedControllerLogout(this.http, this.rootUrl, params, context);
  }

  /**
   * Logout user.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `authProtectedControllerLogout$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  authProtectedControllerLogout(params?: AuthProtectedControllerLogout$Params, context?: HttpContext): Observable<SimpleMessageDto> {
    return this.authProtectedControllerLogout$Response(params, context).pipe(
      map((r: StrictHttpResponse<SimpleMessageDto>): SimpleMessageDto => r.body)
    );
  }

}

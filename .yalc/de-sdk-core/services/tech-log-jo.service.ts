/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { AmimsTechLogJoDto } from '../models/amims-tech-log-jo-dto';
import { techLogJoControllerCreate } from '../fn/tech-log-jo/tech-log-jo-controller-create';
import { TechLogJoControllerCreate$Params } from '../fn/tech-log-jo/tech-log-jo-controller-create';
import { techLogJoControllerFindAll } from '../fn/tech-log-jo/tech-log-jo-controller-find-all';
import { TechLogJoControllerFindAll$Params } from '../fn/tech-log-jo/tech-log-jo-controller-find-all';
import { techLogJoControllerFindOne } from '../fn/tech-log-jo/tech-log-jo-controller-find-one';
import { TechLogJoControllerFindOne$Params } from '../fn/tech-log-jo/tech-log-jo-controller-find-one';
import { techLogJoControllerRemove } from '../fn/tech-log-jo/tech-log-jo-controller-remove';
import { TechLogJoControllerRemove$Params } from '../fn/tech-log-jo/tech-log-jo-controller-remove';
import { techLogJoControllerUpdate } from '../fn/tech-log-jo/tech-log-jo-controller-update';
import { TechLogJoControllerUpdate$Params } from '../fn/tech-log-jo/tech-log-jo-controller-update';

@Injectable({ providedIn: 'root' })
export class TechLogJoService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `techLogJoControllerFindAll()` */
  static readonly TechLogJoControllerFindAllPath = '/amims/tech_log_jo/tech_log_jo';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `techLogJoControllerFindAll()` instead.
   *
   * This method doesn't expect any request body.
   */
  techLogJoControllerFindAll$Response(params?: TechLogJoControllerFindAll$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: Array<AmimsTechLogJoDto>;
'total'?: number;
}>> {
    return techLogJoControllerFindAll(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `techLogJoControllerFindAll$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  techLogJoControllerFindAll(params?: TechLogJoControllerFindAll$Params, context?: HttpContext): Observable<{
'code'?: number;
'pesan'?: string;
'data'?: Array<AmimsTechLogJoDto>;
'total'?: number;
}> {
    return this.techLogJoControllerFindAll$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: Array<AmimsTechLogJoDto>;
'total'?: number;
}>): {
'code'?: number;
'pesan'?: string;
'data'?: Array<AmimsTechLogJoDto>;
'total'?: number;
} => r.body)
    );
  }

  /** Path part for operation `techLogJoControllerCreate()` */
  static readonly TechLogJoControllerCreatePath = '/amims/tech_log_jo/tech_log_jo';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `techLogJoControllerCreate()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  techLogJoControllerCreate$Response(params: TechLogJoControllerCreate$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsTechLogJoDto;
}>> {
    return techLogJoControllerCreate(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `techLogJoControllerCreate$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  techLogJoControllerCreate(params: TechLogJoControllerCreate$Params, context?: HttpContext): Observable<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsTechLogJoDto;
}> {
    return this.techLogJoControllerCreate$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsTechLogJoDto;
}>): {
'code'?: number;
'pesan'?: string;
'data'?: AmimsTechLogJoDto;
} => r.body)
    );
  }

  /** Path part for operation `techLogJoControllerFindOne()` */
  static readonly TechLogJoControllerFindOnePath = '/amims/tech_log_jo/tech_log_jo/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `techLogJoControllerFindOne()` instead.
   *
   * This method doesn't expect any request body.
   */
  techLogJoControllerFindOne$Response(params: TechLogJoControllerFindOne$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsTechLogJoDto;
}>> {
    return techLogJoControllerFindOne(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `techLogJoControllerFindOne$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  techLogJoControllerFindOne(params: TechLogJoControllerFindOne$Params, context?: HttpContext): Observable<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsTechLogJoDto;
}> {
    return this.techLogJoControllerFindOne$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsTechLogJoDto;
}>): {
'code'?: number;
'pesan'?: string;
'data'?: AmimsTechLogJoDto;
} => r.body)
    );
  }

  /** Path part for operation `techLogJoControllerUpdate()` */
  static readonly TechLogJoControllerUpdatePath = '/amims/tech_log_jo/tech_log_jo/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `techLogJoControllerUpdate()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  techLogJoControllerUpdate$Response(params: TechLogJoControllerUpdate$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsTechLogJoDto;
}>> {
    return techLogJoControllerUpdate(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `techLogJoControllerUpdate$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  techLogJoControllerUpdate(params: TechLogJoControllerUpdate$Params, context?: HttpContext): Observable<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsTechLogJoDto;
}> {
    return this.techLogJoControllerUpdate$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsTechLogJoDto;
}>): {
'code'?: number;
'pesan'?: string;
'data'?: AmimsTechLogJoDto;
} => r.body)
    );
  }

  /** Path part for operation `techLogJoControllerRemove()` */
  static readonly TechLogJoControllerRemovePath = '/amims/tech_log_jo/tech_log_jo/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `techLogJoControllerRemove()` instead.
   *
   * This method doesn't expect any request body.
   */
  techLogJoControllerRemove$Response(params: TechLogJoControllerRemove$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsTechLogJoDto;
}>> {
    return techLogJoControllerRemove(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `techLogJoControllerRemove$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  techLogJoControllerRemove(params: TechLogJoControllerRemove$Params, context?: HttpContext): Observable<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsTechLogJoDto;
}> {
    return this.techLogJoControllerRemove$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsTechLogJoDto;
}>): {
'code'?: number;
'pesan'?: string;
'data'?: AmimsTechLogJoDto;
} => r.body)
    );
  }

}

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { AclUserGroupDto } from '../models/acl-user-group-dto';
import { userGroupControllerCreate } from '../fn/user-group/user-group-controller-create';
import { UserGroupControllerCreate$Params } from '../fn/user-group/user-group-controller-create';
import { userGroupControllerFindAll } from '../fn/user-group/user-group-controller-find-all';
import { UserGroupControllerFindAll$Params } from '../fn/user-group/user-group-controller-find-all';
import { userGroupControllerFindOne } from '../fn/user-group/user-group-controller-find-one';
import { UserGroupControllerFindOne$Params } from '../fn/user-group/user-group-controller-find-one';
import { userGroupControllerRemove } from '../fn/user-group/user-group-controller-remove';
import { UserGroupControllerRemove$Params } from '../fn/user-group/user-group-controller-remove';
import { userGroupControllerUpdate } from '../fn/user-group/user-group-controller-update';
import { UserGroupControllerUpdate$Params } from '../fn/user-group/user-group-controller-update';

@Injectable({ providedIn: 'root' })
export class UserGroupService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `userGroupControllerFindAll()` */
  static readonly UserGroupControllerFindAllPath = '/auth/user_group/user_group';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `userGroupControllerFindAll()` instead.
   *
   * This method doesn't expect any request body.
   */
  userGroupControllerFindAll$Response(params?: UserGroupControllerFindAll$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: Array<AclUserGroupDto>;
'total'?: number;
}>> {
    return userGroupControllerFindAll(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `userGroupControllerFindAll$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  userGroupControllerFindAll(params?: UserGroupControllerFindAll$Params, context?: HttpContext): Observable<{
'code'?: number;
'pesan'?: string;
'data'?: Array<AclUserGroupDto>;
'total'?: number;
}> {
    return this.userGroupControllerFindAll$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: Array<AclUserGroupDto>;
'total'?: number;
}>): {
'code'?: number;
'pesan'?: string;
'data'?: Array<AclUserGroupDto>;
'total'?: number;
} => r.body)
    );
  }

  /** Path part for operation `userGroupControllerCreate()` */
  static readonly UserGroupControllerCreatePath = '/auth/user_group/user_group';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `userGroupControllerCreate()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  userGroupControllerCreate$Response(params: UserGroupControllerCreate$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AclUserGroupDto;
}>> {
    return userGroupControllerCreate(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `userGroupControllerCreate$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  userGroupControllerCreate(params: UserGroupControllerCreate$Params, context?: HttpContext): Observable<{
'code'?: number;
'pesan'?: string;
'data'?: AclUserGroupDto;
}> {
    return this.userGroupControllerCreate$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AclUserGroupDto;
}>): {
'code'?: number;
'pesan'?: string;
'data'?: AclUserGroupDto;
} => r.body)
    );
  }

  /** Path part for operation `userGroupControllerFindOne()` */
  static readonly UserGroupControllerFindOnePath = '/auth/user_group/user_group/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `userGroupControllerFindOne()` instead.
   *
   * This method doesn't expect any request body.
   */
  userGroupControllerFindOne$Response(params: UserGroupControllerFindOne$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AclUserGroupDto;
}>> {
    return userGroupControllerFindOne(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `userGroupControllerFindOne$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  userGroupControllerFindOne(params: UserGroupControllerFindOne$Params, context?: HttpContext): Observable<{
'code'?: number;
'pesan'?: string;
'data'?: AclUserGroupDto;
}> {
    return this.userGroupControllerFindOne$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AclUserGroupDto;
}>): {
'code'?: number;
'pesan'?: string;
'data'?: AclUserGroupDto;
} => r.body)
    );
  }

  /** Path part for operation `userGroupControllerUpdate()` */
  static readonly UserGroupControllerUpdatePath = '/auth/user_group/user_group/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `userGroupControllerUpdate()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  userGroupControllerUpdate$Response(params: UserGroupControllerUpdate$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AclUserGroupDto;
}>> {
    return userGroupControllerUpdate(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `userGroupControllerUpdate$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  userGroupControllerUpdate(params: UserGroupControllerUpdate$Params, context?: HttpContext): Observable<{
'code'?: number;
'pesan'?: string;
'data'?: AclUserGroupDto;
}> {
    return this.userGroupControllerUpdate$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AclUserGroupDto;
}>): {
'code'?: number;
'pesan'?: string;
'data'?: AclUserGroupDto;
} => r.body)
    );
  }

  /** Path part for operation `userGroupControllerRemove()` */
  static readonly UserGroupControllerRemovePath = '/auth/user_group/user_group/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `userGroupControllerRemove()` instead.
   *
   * This method doesn't expect any request body.
   */
  userGroupControllerRemove$Response(params: UserGroupControllerRemove$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AclUserGroupDto;
}>> {
    return userGroupControllerRemove(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `userGroupControllerRemove$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  userGroupControllerRemove(params: UserGroupControllerRemove$Params, context?: HttpContext): Observable<{
'code'?: number;
'pesan'?: string;
'data'?: AclUserGroupDto;
}> {
    return this.userGroupControllerRemove$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AclUserGroupDto;
}>): {
'code'?: number;
'pesan'?: string;
'data'?: AclUserGroupDto;
} => r.body)
    );
  }

}

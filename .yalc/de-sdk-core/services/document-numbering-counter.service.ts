/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { documentNumberingCounterControllerCreate } from '../fn/document-numbering-counter/document-numbering-counter-controller-create';
import { DocumentNumberingCounterControllerCreate$Params } from '../fn/document-numbering-counter/document-numbering-counter-controller-create';
import { documentNumberingCounterControllerFindAll } from '../fn/document-numbering-counter/document-numbering-counter-controller-find-all';
import { DocumentNumberingCounterControllerFindAll$Params } from '../fn/document-numbering-counter/document-numbering-counter-controller-find-all';
import { documentNumberingCounterControllerFindOne } from '../fn/document-numbering-counter/document-numbering-counter-controller-find-one';
import { DocumentNumberingCounterControllerFindOne$Params } from '../fn/document-numbering-counter/document-numbering-counter-controller-find-one';
import { documentNumberingCounterControllerRemove } from '../fn/document-numbering-counter/document-numbering-counter-controller-remove';
import { DocumentNumberingCounterControllerRemove$Params } from '../fn/document-numbering-counter/document-numbering-counter-controller-remove';
import { documentNumberingCounterControllerUpdate } from '../fn/document-numbering-counter/document-numbering-counter-controller-update';
import { DocumentNumberingCounterControllerUpdate$Params } from '../fn/document-numbering-counter/document-numbering-counter-controller-update';
import { ToolsDocumentNumberingCounterDto } from '../models/tools-document-numbering-counter-dto';

@Injectable({ providedIn: 'root' })
export class DocumentNumberingCounterService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `documentNumberingCounterControllerFindAll()` */
  static readonly DocumentNumberingCounterControllerFindAllPath = '/auth/document_numbering_counter/document_numbering_counter';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `documentNumberingCounterControllerFindAll()` instead.
   *
   * This method doesn't expect any request body.
   */
  documentNumberingCounterControllerFindAll$Response(params?: DocumentNumberingCounterControllerFindAll$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: Array<ToolsDocumentNumberingCounterDto>;
'total'?: number;
}>> {
    return documentNumberingCounterControllerFindAll(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `documentNumberingCounterControllerFindAll$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  documentNumberingCounterControllerFindAll(params?: DocumentNumberingCounterControllerFindAll$Params, context?: HttpContext): Observable<{
'code'?: number;
'pesan'?: string;
'data'?: Array<ToolsDocumentNumberingCounterDto>;
'total'?: number;
}> {
    return this.documentNumberingCounterControllerFindAll$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: Array<ToolsDocumentNumberingCounterDto>;
'total'?: number;
}>): {
'code'?: number;
'pesan'?: string;
'data'?: Array<ToolsDocumentNumberingCounterDto>;
'total'?: number;
} => r.body)
    );
  }

  /** Path part for operation `documentNumberingCounterControllerCreate()` */
  static readonly DocumentNumberingCounterControllerCreatePath = '/auth/document_numbering_counter/document_numbering_counter';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `documentNumberingCounterControllerCreate()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  documentNumberingCounterControllerCreate$Response(params: DocumentNumberingCounterControllerCreate$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: ToolsDocumentNumberingCounterDto;
}>> {
    return documentNumberingCounterControllerCreate(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `documentNumberingCounterControllerCreate$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  documentNumberingCounterControllerCreate(params: DocumentNumberingCounterControllerCreate$Params, context?: HttpContext): Observable<{
'code'?: number;
'pesan'?: string;
'data'?: ToolsDocumentNumberingCounterDto;
}> {
    return this.documentNumberingCounterControllerCreate$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: ToolsDocumentNumberingCounterDto;
}>): {
'code'?: number;
'pesan'?: string;
'data'?: ToolsDocumentNumberingCounterDto;
} => r.body)
    );
  }

  /** Path part for operation `documentNumberingCounterControllerFindOne()` */
  static readonly DocumentNumberingCounterControllerFindOnePath = '/auth/document_numbering_counter/document_numbering_counter/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `documentNumberingCounterControllerFindOne()` instead.
   *
   * This method doesn't expect any request body.
   */
  documentNumberingCounterControllerFindOne$Response(params: DocumentNumberingCounterControllerFindOne$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: ToolsDocumentNumberingCounterDto;
}>> {
    return documentNumberingCounterControllerFindOne(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `documentNumberingCounterControllerFindOne$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  documentNumberingCounterControllerFindOne(params: DocumentNumberingCounterControllerFindOne$Params, context?: HttpContext): Observable<{
'code'?: number;
'pesan'?: string;
'data'?: ToolsDocumentNumberingCounterDto;
}> {
    return this.documentNumberingCounterControllerFindOne$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: ToolsDocumentNumberingCounterDto;
}>): {
'code'?: number;
'pesan'?: string;
'data'?: ToolsDocumentNumberingCounterDto;
} => r.body)
    );
  }

  /** Path part for operation `documentNumberingCounterControllerUpdate()` */
  static readonly DocumentNumberingCounterControllerUpdatePath = '/auth/document_numbering_counter/document_numbering_counter/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `documentNumberingCounterControllerUpdate()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  documentNumberingCounterControllerUpdate$Response(params: DocumentNumberingCounterControllerUpdate$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: ToolsDocumentNumberingCounterDto;
}>> {
    return documentNumberingCounterControllerUpdate(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `documentNumberingCounterControllerUpdate$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  documentNumberingCounterControllerUpdate(params: DocumentNumberingCounterControllerUpdate$Params, context?: HttpContext): Observable<{
'code'?: number;
'pesan'?: string;
'data'?: ToolsDocumentNumberingCounterDto;
}> {
    return this.documentNumberingCounterControllerUpdate$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: ToolsDocumentNumberingCounterDto;
}>): {
'code'?: number;
'pesan'?: string;
'data'?: ToolsDocumentNumberingCounterDto;
} => r.body)
    );
  }

  /** Path part for operation `documentNumberingCounterControllerRemove()` */
  static readonly DocumentNumberingCounterControllerRemovePath = '/auth/document_numbering_counter/document_numbering_counter/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `documentNumberingCounterControllerRemove()` instead.
   *
   * This method doesn't expect any request body.
   */
  documentNumberingCounterControllerRemove$Response(params: DocumentNumberingCounterControllerRemove$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: ToolsDocumentNumberingCounterDto;
}>> {
    return documentNumberingCounterControllerRemove(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `documentNumberingCounterControllerRemove$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  documentNumberingCounterControllerRemove(params: DocumentNumberingCounterControllerRemove$Params, context?: HttpContext): Observable<{
'code'?: number;
'pesan'?: string;
'data'?: ToolsDocumentNumberingCounterDto;
}> {
    return this.documentNumberingCounterControllerRemove$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: ToolsDocumentNumberingCounterDto;
}>): {
'code'?: number;
'pesan'?: string;
'data'?: ToolsDocumentNumberingCounterDto;
} => r.body)
    );
  }

}

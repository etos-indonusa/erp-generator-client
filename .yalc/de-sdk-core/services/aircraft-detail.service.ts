/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { aircraftDetailControllerCreate } from '../fn/aircraft-detail/aircraft-detail-controller-create';
import { AircraftDetailControllerCreate$Params } from '../fn/aircraft-detail/aircraft-detail-controller-create';
import { aircraftDetailControllerFindAll } from '../fn/aircraft-detail/aircraft-detail-controller-find-all';
import { AircraftDetailControllerFindAll$Params } from '../fn/aircraft-detail/aircraft-detail-controller-find-all';
import { aircraftDetailControllerFindOne } from '../fn/aircraft-detail/aircraft-detail-controller-find-one';
import { AircraftDetailControllerFindOne$Params } from '../fn/aircraft-detail/aircraft-detail-controller-find-one';
import { aircraftDetailControllerRemove } from '../fn/aircraft-detail/aircraft-detail-controller-remove';
import { AircraftDetailControllerRemove$Params } from '../fn/aircraft-detail/aircraft-detail-controller-remove';
import { aircraftDetailControllerUpdate } from '../fn/aircraft-detail/aircraft-detail-controller-update';
import { AircraftDetailControllerUpdate$Params } from '../fn/aircraft-detail/aircraft-detail-controller-update';
import { AmimsAircraftDetailDto } from '../models/amims-aircraft-detail-dto';

@Injectable({ providedIn: 'root' })
export class AircraftDetailService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `aircraftDetailControllerFindAll()` */
  static readonly AircraftDetailControllerFindAllPath = '/amims/aircraft_detail/aircraft_detail';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `aircraftDetailControllerFindAll()` instead.
   *
   * This method doesn't expect any request body.
   */
  aircraftDetailControllerFindAll$Response(params?: AircraftDetailControllerFindAll$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: Array<AmimsAircraftDetailDto>;
'total'?: number;
}>> {
    return aircraftDetailControllerFindAll(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `aircraftDetailControllerFindAll$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  aircraftDetailControllerFindAll(params?: AircraftDetailControllerFindAll$Params, context?: HttpContext): Observable<{
'code'?: number;
'pesan'?: string;
'data'?: Array<AmimsAircraftDetailDto>;
'total'?: number;
}> {
    return this.aircraftDetailControllerFindAll$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: Array<AmimsAircraftDetailDto>;
'total'?: number;
}>): {
'code'?: number;
'pesan'?: string;
'data'?: Array<AmimsAircraftDetailDto>;
'total'?: number;
} => r.body)
    );
  }

  /** Path part for operation `aircraftDetailControllerCreate()` */
  static readonly AircraftDetailControllerCreatePath = '/amims/aircraft_detail/aircraft_detail';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `aircraftDetailControllerCreate()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  aircraftDetailControllerCreate$Response(params: AircraftDetailControllerCreate$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsAircraftDetailDto;
}>> {
    return aircraftDetailControllerCreate(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `aircraftDetailControllerCreate$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  aircraftDetailControllerCreate(params: AircraftDetailControllerCreate$Params, context?: HttpContext): Observable<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsAircraftDetailDto;
}> {
    return this.aircraftDetailControllerCreate$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsAircraftDetailDto;
}>): {
'code'?: number;
'pesan'?: string;
'data'?: AmimsAircraftDetailDto;
} => r.body)
    );
  }

  /** Path part for operation `aircraftDetailControllerFindOne()` */
  static readonly AircraftDetailControllerFindOnePath = '/amims/aircraft_detail/aircraft_detail/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `aircraftDetailControllerFindOne()` instead.
   *
   * This method doesn't expect any request body.
   */
  aircraftDetailControllerFindOne$Response(params: AircraftDetailControllerFindOne$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsAircraftDetailDto;
}>> {
    return aircraftDetailControllerFindOne(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `aircraftDetailControllerFindOne$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  aircraftDetailControllerFindOne(params: AircraftDetailControllerFindOne$Params, context?: HttpContext): Observable<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsAircraftDetailDto;
}> {
    return this.aircraftDetailControllerFindOne$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsAircraftDetailDto;
}>): {
'code'?: number;
'pesan'?: string;
'data'?: AmimsAircraftDetailDto;
} => r.body)
    );
  }

  /** Path part for operation `aircraftDetailControllerUpdate()` */
  static readonly AircraftDetailControllerUpdatePath = '/amims/aircraft_detail/aircraft_detail/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `aircraftDetailControllerUpdate()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  aircraftDetailControllerUpdate$Response(params: AircraftDetailControllerUpdate$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsAircraftDetailDto;
}>> {
    return aircraftDetailControllerUpdate(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `aircraftDetailControllerUpdate$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  aircraftDetailControllerUpdate(params: AircraftDetailControllerUpdate$Params, context?: HttpContext): Observable<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsAircraftDetailDto;
}> {
    return this.aircraftDetailControllerUpdate$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsAircraftDetailDto;
}>): {
'code'?: number;
'pesan'?: string;
'data'?: AmimsAircraftDetailDto;
} => r.body)
    );
  }

  /** Path part for operation `aircraftDetailControllerRemove()` */
  static readonly AircraftDetailControllerRemovePath = '/amims/aircraft_detail/aircraft_detail/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `aircraftDetailControllerRemove()` instead.
   *
   * This method doesn't expect any request body.
   */
  aircraftDetailControllerRemove$Response(params: AircraftDetailControllerRemove$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsAircraftDetailDto;
}>> {
    return aircraftDetailControllerRemove(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `aircraftDetailControllerRemove$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  aircraftDetailControllerRemove(params: AircraftDetailControllerRemove$Params, context?: HttpContext): Observable<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsAircraftDetailDto;
}> {
    return this.aircraftDetailControllerRemove$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsAircraftDetailDto;
}>): {
'code'?: number;
'pesan'?: string;
'data'?: AmimsAircraftDetailDto;
} => r.body)
    );
  }

}

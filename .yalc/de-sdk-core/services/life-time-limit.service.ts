/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { AmimsLifeTimeLimitDto } from '../models/amims-life-time-limit-dto';
import { lifeTimeLimitControllerCreate } from '../fn/life-time-limit/life-time-limit-controller-create';
import { LifeTimeLimitControllerCreate$Params } from '../fn/life-time-limit/life-time-limit-controller-create';
import { lifeTimeLimitControllerFindAll } from '../fn/life-time-limit/life-time-limit-controller-find-all';
import { LifeTimeLimitControllerFindAll$Params } from '../fn/life-time-limit/life-time-limit-controller-find-all';
import { lifeTimeLimitControllerFindOne } from '../fn/life-time-limit/life-time-limit-controller-find-one';
import { LifeTimeLimitControllerFindOne$Params } from '../fn/life-time-limit/life-time-limit-controller-find-one';
import { lifeTimeLimitControllerRemove } from '../fn/life-time-limit/life-time-limit-controller-remove';
import { LifeTimeLimitControllerRemove$Params } from '../fn/life-time-limit/life-time-limit-controller-remove';
import { lifeTimeLimitControllerUpdate } from '../fn/life-time-limit/life-time-limit-controller-update';
import { LifeTimeLimitControllerUpdate$Params } from '../fn/life-time-limit/life-time-limit-controller-update';

@Injectable({ providedIn: 'root' })
export class LifeTimeLimitService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `lifeTimeLimitControllerFindAll()` */
  static readonly LifeTimeLimitControllerFindAllPath = '/amims/life_time_limit/life_time_limit';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `lifeTimeLimitControllerFindAll()` instead.
   *
   * This method doesn't expect any request body.
   */
  lifeTimeLimitControllerFindAll$Response(params?: LifeTimeLimitControllerFindAll$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: Array<AmimsLifeTimeLimitDto>;
'total'?: number;
}>> {
    return lifeTimeLimitControllerFindAll(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `lifeTimeLimitControllerFindAll$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  lifeTimeLimitControllerFindAll(params?: LifeTimeLimitControllerFindAll$Params, context?: HttpContext): Observable<{
'code'?: number;
'pesan'?: string;
'data'?: Array<AmimsLifeTimeLimitDto>;
'total'?: number;
}> {
    return this.lifeTimeLimitControllerFindAll$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: Array<AmimsLifeTimeLimitDto>;
'total'?: number;
}>): {
'code'?: number;
'pesan'?: string;
'data'?: Array<AmimsLifeTimeLimitDto>;
'total'?: number;
} => r.body)
    );
  }

  /** Path part for operation `lifeTimeLimitControllerCreate()` */
  static readonly LifeTimeLimitControllerCreatePath = '/amims/life_time_limit/life_time_limit';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `lifeTimeLimitControllerCreate()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  lifeTimeLimitControllerCreate$Response(params: LifeTimeLimitControllerCreate$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsLifeTimeLimitDto;
}>> {
    return lifeTimeLimitControllerCreate(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `lifeTimeLimitControllerCreate$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  lifeTimeLimitControllerCreate(params: LifeTimeLimitControllerCreate$Params, context?: HttpContext): Observable<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsLifeTimeLimitDto;
}> {
    return this.lifeTimeLimitControllerCreate$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsLifeTimeLimitDto;
}>): {
'code'?: number;
'pesan'?: string;
'data'?: AmimsLifeTimeLimitDto;
} => r.body)
    );
  }

  /** Path part for operation `lifeTimeLimitControllerFindOne()` */
  static readonly LifeTimeLimitControllerFindOnePath = '/amims/life_time_limit/life_time_limit/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `lifeTimeLimitControllerFindOne()` instead.
   *
   * This method doesn't expect any request body.
   */
  lifeTimeLimitControllerFindOne$Response(params: LifeTimeLimitControllerFindOne$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsLifeTimeLimitDto;
}>> {
    return lifeTimeLimitControllerFindOne(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `lifeTimeLimitControllerFindOne$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  lifeTimeLimitControllerFindOne(params: LifeTimeLimitControllerFindOne$Params, context?: HttpContext): Observable<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsLifeTimeLimitDto;
}> {
    return this.lifeTimeLimitControllerFindOne$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsLifeTimeLimitDto;
}>): {
'code'?: number;
'pesan'?: string;
'data'?: AmimsLifeTimeLimitDto;
} => r.body)
    );
  }

  /** Path part for operation `lifeTimeLimitControllerUpdate()` */
  static readonly LifeTimeLimitControllerUpdatePath = '/amims/life_time_limit/life_time_limit/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `lifeTimeLimitControllerUpdate()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  lifeTimeLimitControllerUpdate$Response(params: LifeTimeLimitControllerUpdate$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsLifeTimeLimitDto;
}>> {
    return lifeTimeLimitControllerUpdate(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `lifeTimeLimitControllerUpdate$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  lifeTimeLimitControllerUpdate(params: LifeTimeLimitControllerUpdate$Params, context?: HttpContext): Observable<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsLifeTimeLimitDto;
}> {
    return this.lifeTimeLimitControllerUpdate$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsLifeTimeLimitDto;
}>): {
'code'?: number;
'pesan'?: string;
'data'?: AmimsLifeTimeLimitDto;
} => r.body)
    );
  }

  /** Path part for operation `lifeTimeLimitControllerRemove()` */
  static readonly LifeTimeLimitControllerRemovePath = '/amims/life_time_limit/life_time_limit/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `lifeTimeLimitControllerRemove()` instead.
   *
   * This method doesn't expect any request body.
   */
  lifeTimeLimitControllerRemove$Response(params: LifeTimeLimitControllerRemove$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsLifeTimeLimitDto;
}>> {
    return lifeTimeLimitControllerRemove(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `lifeTimeLimitControllerRemove$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  lifeTimeLimitControllerRemove(params: LifeTimeLimitControllerRemove$Params, context?: HttpContext): Observable<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsLifeTimeLimitDto;
}> {
    return this.lifeTimeLimitControllerRemove$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsLifeTimeLimitDto;
}>): {
'code'?: number;
'pesan'?: string;
'data'?: AmimsLifeTimeLimitDto;
} => r.body)
    );
  }

}

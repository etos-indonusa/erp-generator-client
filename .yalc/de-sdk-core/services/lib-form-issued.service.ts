/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { AmimsLibFormIssuedDto } from '../models/amims-lib-form-issued-dto';
import { libFormIssuedControllerCreate } from '../fn/lib-form-issued/lib-form-issued-controller-create';
import { LibFormIssuedControllerCreate$Params } from '../fn/lib-form-issued/lib-form-issued-controller-create';
import { libFormIssuedControllerFindAll } from '../fn/lib-form-issued/lib-form-issued-controller-find-all';
import { LibFormIssuedControllerFindAll$Params } from '../fn/lib-form-issued/lib-form-issued-controller-find-all';
import { libFormIssuedControllerFindOne } from '../fn/lib-form-issued/lib-form-issued-controller-find-one';
import { LibFormIssuedControllerFindOne$Params } from '../fn/lib-form-issued/lib-form-issued-controller-find-one';
import { libFormIssuedControllerRemove } from '../fn/lib-form-issued/lib-form-issued-controller-remove';
import { LibFormIssuedControllerRemove$Params } from '../fn/lib-form-issued/lib-form-issued-controller-remove';
import { libFormIssuedControllerUpdate } from '../fn/lib-form-issued/lib-form-issued-controller-update';
import { LibFormIssuedControllerUpdate$Params } from '../fn/lib-form-issued/lib-form-issued-controller-update';

@Injectable({ providedIn: 'root' })
export class LibFormIssuedService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `libFormIssuedControllerFindAll()` */
  static readonly LibFormIssuedControllerFindAllPath = '/amims/lib_form_issued/lib_form_issued';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `libFormIssuedControllerFindAll()` instead.
   *
   * This method doesn't expect any request body.
   */
  libFormIssuedControllerFindAll$Response(params?: LibFormIssuedControllerFindAll$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: Array<AmimsLibFormIssuedDto>;
'total'?: number;
}>> {
    return libFormIssuedControllerFindAll(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `libFormIssuedControllerFindAll$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  libFormIssuedControllerFindAll(params?: LibFormIssuedControllerFindAll$Params, context?: HttpContext): Observable<{
'code'?: number;
'pesan'?: string;
'data'?: Array<AmimsLibFormIssuedDto>;
'total'?: number;
}> {
    return this.libFormIssuedControllerFindAll$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: Array<AmimsLibFormIssuedDto>;
'total'?: number;
}>): {
'code'?: number;
'pesan'?: string;
'data'?: Array<AmimsLibFormIssuedDto>;
'total'?: number;
} => r.body)
    );
  }

  /** Path part for operation `libFormIssuedControllerCreate()` */
  static readonly LibFormIssuedControllerCreatePath = '/amims/lib_form_issued/lib_form_issued';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `libFormIssuedControllerCreate()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  libFormIssuedControllerCreate$Response(params: LibFormIssuedControllerCreate$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsLibFormIssuedDto;
}>> {
    return libFormIssuedControllerCreate(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `libFormIssuedControllerCreate$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  libFormIssuedControllerCreate(params: LibFormIssuedControllerCreate$Params, context?: HttpContext): Observable<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsLibFormIssuedDto;
}> {
    return this.libFormIssuedControllerCreate$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsLibFormIssuedDto;
}>): {
'code'?: number;
'pesan'?: string;
'data'?: AmimsLibFormIssuedDto;
} => r.body)
    );
  }

  /** Path part for operation `libFormIssuedControllerFindOne()` */
  static readonly LibFormIssuedControllerFindOnePath = '/amims/lib_form_issued/lib_form_issued/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `libFormIssuedControllerFindOne()` instead.
   *
   * This method doesn't expect any request body.
   */
  libFormIssuedControllerFindOne$Response(params: LibFormIssuedControllerFindOne$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsLibFormIssuedDto;
}>> {
    return libFormIssuedControllerFindOne(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `libFormIssuedControllerFindOne$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  libFormIssuedControllerFindOne(params: LibFormIssuedControllerFindOne$Params, context?: HttpContext): Observable<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsLibFormIssuedDto;
}> {
    return this.libFormIssuedControllerFindOne$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsLibFormIssuedDto;
}>): {
'code'?: number;
'pesan'?: string;
'data'?: AmimsLibFormIssuedDto;
} => r.body)
    );
  }

  /** Path part for operation `libFormIssuedControllerUpdate()` */
  static readonly LibFormIssuedControllerUpdatePath = '/amims/lib_form_issued/lib_form_issued/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `libFormIssuedControllerUpdate()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  libFormIssuedControllerUpdate$Response(params: LibFormIssuedControllerUpdate$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsLibFormIssuedDto;
}>> {
    return libFormIssuedControllerUpdate(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `libFormIssuedControllerUpdate$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  libFormIssuedControllerUpdate(params: LibFormIssuedControllerUpdate$Params, context?: HttpContext): Observable<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsLibFormIssuedDto;
}> {
    return this.libFormIssuedControllerUpdate$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsLibFormIssuedDto;
}>): {
'code'?: number;
'pesan'?: string;
'data'?: AmimsLibFormIssuedDto;
} => r.body)
    );
  }

  /** Path part for operation `libFormIssuedControllerRemove()` */
  static readonly LibFormIssuedControllerRemovePath = '/amims/lib_form_issued/lib_form_issued/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `libFormIssuedControllerRemove()` instead.
   *
   * This method doesn't expect any request body.
   */
  libFormIssuedControllerRemove$Response(params: LibFormIssuedControllerRemove$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsLibFormIssuedDto;
}>> {
    return libFormIssuedControllerRemove(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `libFormIssuedControllerRemove$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  libFormIssuedControllerRemove(params: LibFormIssuedControllerRemove$Params, context?: HttpContext): Observable<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsLibFormIssuedDto;
}> {
    return this.libFormIssuedControllerRemove$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsLibFormIssuedDto;
}>): {
'code'?: number;
'pesan'?: string;
'data'?: AmimsLibFormIssuedDto;
} => r.body)
    );
  }

}

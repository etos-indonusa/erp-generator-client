/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { AmimsPurPrItemDto } from '../models/amims-pur-pr-item-dto';
import { purPrItemControllerCreate } from '../fn/pur-pr-item/pur-pr-item-controller-create';
import { PurPrItemControllerCreate$Params } from '../fn/pur-pr-item/pur-pr-item-controller-create';
import { purPrItemControllerFindAll } from '../fn/pur-pr-item/pur-pr-item-controller-find-all';
import { PurPrItemControllerFindAll$Params } from '../fn/pur-pr-item/pur-pr-item-controller-find-all';
import { purPrItemControllerFindOne } from '../fn/pur-pr-item/pur-pr-item-controller-find-one';
import { PurPrItemControllerFindOne$Params } from '../fn/pur-pr-item/pur-pr-item-controller-find-one';
import { purPrItemControllerRemove } from '../fn/pur-pr-item/pur-pr-item-controller-remove';
import { PurPrItemControllerRemove$Params } from '../fn/pur-pr-item/pur-pr-item-controller-remove';
import { purPrItemControllerUpdate } from '../fn/pur-pr-item/pur-pr-item-controller-update';
import { PurPrItemControllerUpdate$Params } from '../fn/pur-pr-item/pur-pr-item-controller-update';

@Injectable({ providedIn: 'root' })
export class PurPrItemService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `purPrItemControllerFindAll()` */
  static readonly PurPrItemControllerFindAllPath = '/amims/pur_pr_item/pur_pr_item';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `purPrItemControllerFindAll()` instead.
   *
   * This method doesn't expect any request body.
   */
  purPrItemControllerFindAll$Response(params?: PurPrItemControllerFindAll$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: Array<AmimsPurPrItemDto>;
'total'?: number;
}>> {
    return purPrItemControllerFindAll(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `purPrItemControllerFindAll$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  purPrItemControllerFindAll(params?: PurPrItemControllerFindAll$Params, context?: HttpContext): Observable<{
'code'?: number;
'pesan'?: string;
'data'?: Array<AmimsPurPrItemDto>;
'total'?: number;
}> {
    return this.purPrItemControllerFindAll$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: Array<AmimsPurPrItemDto>;
'total'?: number;
}>): {
'code'?: number;
'pesan'?: string;
'data'?: Array<AmimsPurPrItemDto>;
'total'?: number;
} => r.body)
    );
  }

  /** Path part for operation `purPrItemControllerCreate()` */
  static readonly PurPrItemControllerCreatePath = '/amims/pur_pr_item/pur_pr_item';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `purPrItemControllerCreate()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  purPrItemControllerCreate$Response(params: PurPrItemControllerCreate$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsPurPrItemDto;
}>> {
    return purPrItemControllerCreate(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `purPrItemControllerCreate$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  purPrItemControllerCreate(params: PurPrItemControllerCreate$Params, context?: HttpContext): Observable<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsPurPrItemDto;
}> {
    return this.purPrItemControllerCreate$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsPurPrItemDto;
}>): {
'code'?: number;
'pesan'?: string;
'data'?: AmimsPurPrItemDto;
} => r.body)
    );
  }

  /** Path part for operation `purPrItemControllerFindOne()` */
  static readonly PurPrItemControllerFindOnePath = '/amims/pur_pr_item/pur_pr_item/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `purPrItemControllerFindOne()` instead.
   *
   * This method doesn't expect any request body.
   */
  purPrItemControllerFindOne$Response(params: PurPrItemControllerFindOne$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsPurPrItemDto;
}>> {
    return purPrItemControllerFindOne(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `purPrItemControllerFindOne$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  purPrItemControllerFindOne(params: PurPrItemControllerFindOne$Params, context?: HttpContext): Observable<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsPurPrItemDto;
}> {
    return this.purPrItemControllerFindOne$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsPurPrItemDto;
}>): {
'code'?: number;
'pesan'?: string;
'data'?: AmimsPurPrItemDto;
} => r.body)
    );
  }

  /** Path part for operation `purPrItemControllerUpdate()` */
  static readonly PurPrItemControllerUpdatePath = '/amims/pur_pr_item/pur_pr_item/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `purPrItemControllerUpdate()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  purPrItemControllerUpdate$Response(params: PurPrItemControllerUpdate$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsPurPrItemDto;
}>> {
    return purPrItemControllerUpdate(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `purPrItemControllerUpdate$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  purPrItemControllerUpdate(params: PurPrItemControllerUpdate$Params, context?: HttpContext): Observable<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsPurPrItemDto;
}> {
    return this.purPrItemControllerUpdate$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsPurPrItemDto;
}>): {
'code'?: number;
'pesan'?: string;
'data'?: AmimsPurPrItemDto;
} => r.body)
    );
  }

  /** Path part for operation `purPrItemControllerRemove()` */
  static readonly PurPrItemControllerRemovePath = '/amims/pur_pr_item/pur_pr_item/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `purPrItemControllerRemove()` instead.
   *
   * This method doesn't expect any request body.
   */
  purPrItemControllerRemove$Response(params: PurPrItemControllerRemove$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsPurPrItemDto;
}>> {
    return purPrItemControllerRemove(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `purPrItemControllerRemove$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  purPrItemControllerRemove(params: PurPrItemControllerRemove$Params, context?: HttpContext): Observable<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsPurPrItemDto;
}> {
    return this.purPrItemControllerRemove$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsPurPrItemDto;
}>): {
'code'?: number;
'pesan'?: string;
'data'?: AmimsPurPrItemDto;
} => r.body)
    );
  }

}

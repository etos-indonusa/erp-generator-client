/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { AmimsTechLogDto } from '../models/amims-tech-log-dto';
import { techLogControllerCreate } from '../fn/tech-log/tech-log-controller-create';
import { TechLogControllerCreate$Params } from '../fn/tech-log/tech-log-controller-create';
import { techLogControllerFindAll } from '../fn/tech-log/tech-log-controller-find-all';
import { TechLogControllerFindAll$Params } from '../fn/tech-log/tech-log-controller-find-all';
import { techLogControllerFindOne } from '../fn/tech-log/tech-log-controller-find-one';
import { TechLogControllerFindOne$Params } from '../fn/tech-log/tech-log-controller-find-one';
import { techLogControllerRemove } from '../fn/tech-log/tech-log-controller-remove';
import { TechLogControllerRemove$Params } from '../fn/tech-log/tech-log-controller-remove';
import { techLogControllerUpdate } from '../fn/tech-log/tech-log-controller-update';
import { TechLogControllerUpdate$Params } from '../fn/tech-log/tech-log-controller-update';

@Injectable({ providedIn: 'root' })
export class TechLogService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `techLogControllerFindAll()` */
  static readonly TechLogControllerFindAllPath = '/amims/tech_log/tech_log';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `techLogControllerFindAll()` instead.
   *
   * This method doesn't expect any request body.
   */
  techLogControllerFindAll$Response(params?: TechLogControllerFindAll$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: Array<AmimsTechLogDto>;
'total'?: number;
}>> {
    return techLogControllerFindAll(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `techLogControllerFindAll$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  techLogControllerFindAll(params?: TechLogControllerFindAll$Params, context?: HttpContext): Observable<{
'code'?: number;
'pesan'?: string;
'data'?: Array<AmimsTechLogDto>;
'total'?: number;
}> {
    return this.techLogControllerFindAll$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: Array<AmimsTechLogDto>;
'total'?: number;
}>): {
'code'?: number;
'pesan'?: string;
'data'?: Array<AmimsTechLogDto>;
'total'?: number;
} => r.body)
    );
  }

  /** Path part for operation `techLogControllerCreate()` */
  static readonly TechLogControllerCreatePath = '/amims/tech_log/tech_log';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `techLogControllerCreate()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  techLogControllerCreate$Response(params: TechLogControllerCreate$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsTechLogDto;
}>> {
    return techLogControllerCreate(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `techLogControllerCreate$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  techLogControllerCreate(params: TechLogControllerCreate$Params, context?: HttpContext): Observable<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsTechLogDto;
}> {
    return this.techLogControllerCreate$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsTechLogDto;
}>): {
'code'?: number;
'pesan'?: string;
'data'?: AmimsTechLogDto;
} => r.body)
    );
  }

  /** Path part for operation `techLogControllerFindOne()` */
  static readonly TechLogControllerFindOnePath = '/amims/tech_log/tech_log/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `techLogControllerFindOne()` instead.
   *
   * This method doesn't expect any request body.
   */
  techLogControllerFindOne$Response(params: TechLogControllerFindOne$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsTechLogDto;
}>> {
    return techLogControllerFindOne(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `techLogControllerFindOne$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  techLogControllerFindOne(params: TechLogControllerFindOne$Params, context?: HttpContext): Observable<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsTechLogDto;
}> {
    return this.techLogControllerFindOne$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsTechLogDto;
}>): {
'code'?: number;
'pesan'?: string;
'data'?: AmimsTechLogDto;
} => r.body)
    );
  }

  /** Path part for operation `techLogControllerUpdate()` */
  static readonly TechLogControllerUpdatePath = '/amims/tech_log/tech_log/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `techLogControllerUpdate()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  techLogControllerUpdate$Response(params: TechLogControllerUpdate$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsTechLogDto;
}>> {
    return techLogControllerUpdate(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `techLogControllerUpdate$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  techLogControllerUpdate(params: TechLogControllerUpdate$Params, context?: HttpContext): Observable<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsTechLogDto;
}> {
    return this.techLogControllerUpdate$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsTechLogDto;
}>): {
'code'?: number;
'pesan'?: string;
'data'?: AmimsTechLogDto;
} => r.body)
    );
  }

  /** Path part for operation `techLogControllerRemove()` */
  static readonly TechLogControllerRemovePath = '/amims/tech_log/tech_log/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `techLogControllerRemove()` instead.
   *
   * This method doesn't expect any request body.
   */
  techLogControllerRemove$Response(params: TechLogControllerRemove$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsTechLogDto;
}>> {
    return techLogControllerRemove(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `techLogControllerRemove$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  techLogControllerRemove(params: TechLogControllerRemove$Params, context?: HttpContext): Observable<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsTechLogDto;
}> {
    return this.techLogControllerRemove$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsTechLogDto;
}>): {
'code'?: number;
'pesan'?: string;
'data'?: AmimsTechLogDto;
} => r.body)
    );
  }

}

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { AmimsStoreTransferItemDto } from '../models/amims-store-transfer-item-dto';
import { storeTransferItemControllerCreate } from '../fn/store-transfer-item/store-transfer-item-controller-create';
import { StoreTransferItemControllerCreate$Params } from '../fn/store-transfer-item/store-transfer-item-controller-create';
import { storeTransferItemControllerFindAll } from '../fn/store-transfer-item/store-transfer-item-controller-find-all';
import { StoreTransferItemControllerFindAll$Params } from '../fn/store-transfer-item/store-transfer-item-controller-find-all';
import { storeTransferItemControllerFindOne } from '../fn/store-transfer-item/store-transfer-item-controller-find-one';
import { StoreTransferItemControllerFindOne$Params } from '../fn/store-transfer-item/store-transfer-item-controller-find-one';
import { storeTransferItemControllerRemove } from '../fn/store-transfer-item/store-transfer-item-controller-remove';
import { StoreTransferItemControllerRemove$Params } from '../fn/store-transfer-item/store-transfer-item-controller-remove';
import { storeTransferItemControllerUpdate } from '../fn/store-transfer-item/store-transfer-item-controller-update';
import { StoreTransferItemControllerUpdate$Params } from '../fn/store-transfer-item/store-transfer-item-controller-update';

@Injectable({ providedIn: 'root' })
export class StoreTransferItemService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `storeTransferItemControllerFindAll()` */
  static readonly StoreTransferItemControllerFindAllPath = '/amims/store_transfer_item/store_transfer_item';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `storeTransferItemControllerFindAll()` instead.
   *
   * This method doesn't expect any request body.
   */
  storeTransferItemControllerFindAll$Response(params?: StoreTransferItemControllerFindAll$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: Array<AmimsStoreTransferItemDto>;
'total'?: number;
}>> {
    return storeTransferItemControllerFindAll(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `storeTransferItemControllerFindAll$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  storeTransferItemControllerFindAll(params?: StoreTransferItemControllerFindAll$Params, context?: HttpContext): Observable<{
'code'?: number;
'pesan'?: string;
'data'?: Array<AmimsStoreTransferItemDto>;
'total'?: number;
}> {
    return this.storeTransferItemControllerFindAll$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: Array<AmimsStoreTransferItemDto>;
'total'?: number;
}>): {
'code'?: number;
'pesan'?: string;
'data'?: Array<AmimsStoreTransferItemDto>;
'total'?: number;
} => r.body)
    );
  }

  /** Path part for operation `storeTransferItemControllerCreate()` */
  static readonly StoreTransferItemControllerCreatePath = '/amims/store_transfer_item/store_transfer_item';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `storeTransferItemControllerCreate()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  storeTransferItemControllerCreate$Response(params: StoreTransferItemControllerCreate$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsStoreTransferItemDto;
}>> {
    return storeTransferItemControllerCreate(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `storeTransferItemControllerCreate$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  storeTransferItemControllerCreate(params: StoreTransferItemControllerCreate$Params, context?: HttpContext): Observable<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsStoreTransferItemDto;
}> {
    return this.storeTransferItemControllerCreate$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsStoreTransferItemDto;
}>): {
'code'?: number;
'pesan'?: string;
'data'?: AmimsStoreTransferItemDto;
} => r.body)
    );
  }

  /** Path part for operation `storeTransferItemControllerFindOne()` */
  static readonly StoreTransferItemControllerFindOnePath = '/amims/store_transfer_item/store_transfer_item/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `storeTransferItemControllerFindOne()` instead.
   *
   * This method doesn't expect any request body.
   */
  storeTransferItemControllerFindOne$Response(params: StoreTransferItemControllerFindOne$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsStoreTransferItemDto;
}>> {
    return storeTransferItemControllerFindOne(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `storeTransferItemControllerFindOne$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  storeTransferItemControllerFindOne(params: StoreTransferItemControllerFindOne$Params, context?: HttpContext): Observable<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsStoreTransferItemDto;
}> {
    return this.storeTransferItemControllerFindOne$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsStoreTransferItemDto;
}>): {
'code'?: number;
'pesan'?: string;
'data'?: AmimsStoreTransferItemDto;
} => r.body)
    );
  }

  /** Path part for operation `storeTransferItemControllerUpdate()` */
  static readonly StoreTransferItemControllerUpdatePath = '/amims/store_transfer_item/store_transfer_item/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `storeTransferItemControllerUpdate()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  storeTransferItemControllerUpdate$Response(params: StoreTransferItemControllerUpdate$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsStoreTransferItemDto;
}>> {
    return storeTransferItemControllerUpdate(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `storeTransferItemControllerUpdate$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  storeTransferItemControllerUpdate(params: StoreTransferItemControllerUpdate$Params, context?: HttpContext): Observable<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsStoreTransferItemDto;
}> {
    return this.storeTransferItemControllerUpdate$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsStoreTransferItemDto;
}>): {
'code'?: number;
'pesan'?: string;
'data'?: AmimsStoreTransferItemDto;
} => r.body)
    );
  }

  /** Path part for operation `storeTransferItemControllerRemove()` */
  static readonly StoreTransferItemControllerRemovePath = '/amims/store_transfer_item/store_transfer_item/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `storeTransferItemControllerRemove()` instead.
   *
   * This method doesn't expect any request body.
   */
  storeTransferItemControllerRemove$Response(params: StoreTransferItemControllerRemove$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsStoreTransferItemDto;
}>> {
    return storeTransferItemControllerRemove(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `storeTransferItemControllerRemove$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  storeTransferItemControllerRemove(params: StoreTransferItemControllerRemove$Params, context?: HttpContext): Observable<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsStoreTransferItemDto;
}> {
    return this.storeTransferItemControllerRemove$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsStoreTransferItemDto;
}>): {
'code'?: number;
'pesan'?: string;
'data'?: AmimsStoreTransferItemDto;
} => r.body)
    );
  }

}

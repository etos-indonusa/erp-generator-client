/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { AclUsersReportDto } from '../models/acl-users-report-dto';
import { usersReportControllerFindAll } from '../fn/users-report/users-report-controller-find-all';
import { UsersReportControllerFindAll$Params } from '../fn/users-report/users-report-controller-find-all';
import { usersReportControllerFindOne } from '../fn/users-report/users-report-controller-find-one';
import { UsersReportControllerFindOne$Params } from '../fn/users-report/users-report-controller-find-one';

@Injectable({ providedIn: 'root' })
export class UsersReportService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `usersReportControllerFindAll()` */
  static readonly UsersReportControllerFindAllPath = '/auth/users/users_report/list';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `usersReportControllerFindAll()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  usersReportControllerFindAll$Response(params: UsersReportControllerFindAll$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: Array<AclUsersReportDto>;
'total'?: number;
}>> {
    return usersReportControllerFindAll(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `usersReportControllerFindAll$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  usersReportControllerFindAll(params: UsersReportControllerFindAll$Params, context?: HttpContext): Observable<{
'code'?: number;
'pesan'?: string;
'data'?: Array<AclUsersReportDto>;
'total'?: number;
}> {
    return this.usersReportControllerFindAll$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: Array<AclUsersReportDto>;
'total'?: number;
}>): {
'code'?: number;
'pesan'?: string;
'data'?: Array<AclUsersReportDto>;
'total'?: number;
} => r.body)
    );
  }

  /** Path part for operation `usersReportControllerFindOne()` */
  static readonly UsersReportControllerFindOnePath = '/auth/users/users_report/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `usersReportControllerFindOne()` instead.
   *
   * This method doesn't expect any request body.
   */
  usersReportControllerFindOne$Response(params: UsersReportControllerFindOne$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AclUsersReportDto;
}>> {
    return usersReportControllerFindOne(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `usersReportControllerFindOne$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  usersReportControllerFindOne(params: UsersReportControllerFindOne$Params, context?: HttpContext): Observable<{
'code'?: number;
'pesan'?: string;
'data'?: AclUsersReportDto;
}> {
    return this.usersReportControllerFindOne$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AclUsersReportDto;
}>): {
'code'?: number;
'pesan'?: string;
'data'?: AclUsersReportDto;
} => r.body)
    );
  }

}

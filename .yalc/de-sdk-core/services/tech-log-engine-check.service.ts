/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { AmimsTechLogEngineCheckDto } from '../models/amims-tech-log-engine-check-dto';
import { techLogEngineCheckControllerCreate } from '../fn/tech-log-engine-check/tech-log-engine-check-controller-create';
import { TechLogEngineCheckControllerCreate$Params } from '../fn/tech-log-engine-check/tech-log-engine-check-controller-create';
import { techLogEngineCheckControllerFindAll } from '../fn/tech-log-engine-check/tech-log-engine-check-controller-find-all';
import { TechLogEngineCheckControllerFindAll$Params } from '../fn/tech-log-engine-check/tech-log-engine-check-controller-find-all';
import { techLogEngineCheckControllerFindOne } from '../fn/tech-log-engine-check/tech-log-engine-check-controller-find-one';
import { TechLogEngineCheckControllerFindOne$Params } from '../fn/tech-log-engine-check/tech-log-engine-check-controller-find-one';
import { techLogEngineCheckControllerRemove } from '../fn/tech-log-engine-check/tech-log-engine-check-controller-remove';
import { TechLogEngineCheckControllerRemove$Params } from '../fn/tech-log-engine-check/tech-log-engine-check-controller-remove';
import { techLogEngineCheckControllerUpdate } from '../fn/tech-log-engine-check/tech-log-engine-check-controller-update';
import { TechLogEngineCheckControllerUpdate$Params } from '../fn/tech-log-engine-check/tech-log-engine-check-controller-update';

@Injectable({ providedIn: 'root' })
export class TechLogEngineCheckService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `techLogEngineCheckControllerFindAll()` */
  static readonly TechLogEngineCheckControllerFindAllPath = '/amims/tech_log_engine_check/tech_log_engine_check';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `techLogEngineCheckControllerFindAll()` instead.
   *
   * This method doesn't expect any request body.
   */
  techLogEngineCheckControllerFindAll$Response(params?: TechLogEngineCheckControllerFindAll$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: Array<AmimsTechLogEngineCheckDto>;
'total'?: number;
}>> {
    return techLogEngineCheckControllerFindAll(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `techLogEngineCheckControllerFindAll$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  techLogEngineCheckControllerFindAll(params?: TechLogEngineCheckControllerFindAll$Params, context?: HttpContext): Observable<{
'code'?: number;
'pesan'?: string;
'data'?: Array<AmimsTechLogEngineCheckDto>;
'total'?: number;
}> {
    return this.techLogEngineCheckControllerFindAll$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: Array<AmimsTechLogEngineCheckDto>;
'total'?: number;
}>): {
'code'?: number;
'pesan'?: string;
'data'?: Array<AmimsTechLogEngineCheckDto>;
'total'?: number;
} => r.body)
    );
  }

  /** Path part for operation `techLogEngineCheckControllerCreate()` */
  static readonly TechLogEngineCheckControllerCreatePath = '/amims/tech_log_engine_check/tech_log_engine_check';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `techLogEngineCheckControllerCreate()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  techLogEngineCheckControllerCreate$Response(params: TechLogEngineCheckControllerCreate$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsTechLogEngineCheckDto;
}>> {
    return techLogEngineCheckControllerCreate(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `techLogEngineCheckControllerCreate$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  techLogEngineCheckControllerCreate(params: TechLogEngineCheckControllerCreate$Params, context?: HttpContext): Observable<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsTechLogEngineCheckDto;
}> {
    return this.techLogEngineCheckControllerCreate$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsTechLogEngineCheckDto;
}>): {
'code'?: number;
'pesan'?: string;
'data'?: AmimsTechLogEngineCheckDto;
} => r.body)
    );
  }

  /** Path part for operation `techLogEngineCheckControllerFindOne()` */
  static readonly TechLogEngineCheckControllerFindOnePath = '/amims/tech_log_engine_check/tech_log_engine_check/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `techLogEngineCheckControllerFindOne()` instead.
   *
   * This method doesn't expect any request body.
   */
  techLogEngineCheckControllerFindOne$Response(params: TechLogEngineCheckControllerFindOne$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsTechLogEngineCheckDto;
}>> {
    return techLogEngineCheckControllerFindOne(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `techLogEngineCheckControllerFindOne$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  techLogEngineCheckControllerFindOne(params: TechLogEngineCheckControllerFindOne$Params, context?: HttpContext): Observable<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsTechLogEngineCheckDto;
}> {
    return this.techLogEngineCheckControllerFindOne$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsTechLogEngineCheckDto;
}>): {
'code'?: number;
'pesan'?: string;
'data'?: AmimsTechLogEngineCheckDto;
} => r.body)
    );
  }

  /** Path part for operation `techLogEngineCheckControllerUpdate()` */
  static readonly TechLogEngineCheckControllerUpdatePath = '/amims/tech_log_engine_check/tech_log_engine_check/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `techLogEngineCheckControllerUpdate()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  techLogEngineCheckControllerUpdate$Response(params: TechLogEngineCheckControllerUpdate$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsTechLogEngineCheckDto;
}>> {
    return techLogEngineCheckControllerUpdate(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `techLogEngineCheckControllerUpdate$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  techLogEngineCheckControllerUpdate(params: TechLogEngineCheckControllerUpdate$Params, context?: HttpContext): Observable<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsTechLogEngineCheckDto;
}> {
    return this.techLogEngineCheckControllerUpdate$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsTechLogEngineCheckDto;
}>): {
'code'?: number;
'pesan'?: string;
'data'?: AmimsTechLogEngineCheckDto;
} => r.body)
    );
  }

  /** Path part for operation `techLogEngineCheckControllerRemove()` */
  static readonly TechLogEngineCheckControllerRemovePath = '/amims/tech_log_engine_check/tech_log_engine_check/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `techLogEngineCheckControllerRemove()` instead.
   *
   * This method doesn't expect any request body.
   */
  techLogEngineCheckControllerRemove$Response(params: TechLogEngineCheckControllerRemove$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsTechLogEngineCheckDto;
}>> {
    return techLogEngineCheckControllerRemove(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `techLogEngineCheckControllerRemove$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  techLogEngineCheckControllerRemove(params: TechLogEngineCheckControllerRemove$Params, context?: HttpContext): Observable<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsTechLogEngineCheckDto;
}> {
    return this.techLogEngineCheckControllerRemove$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsTechLogEngineCheckDto;
}>): {
'code'?: number;
'pesan'?: string;
'data'?: AmimsTechLogEngineCheckDto;
} => r.body)
    );
  }

}

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { AmimsLastMaintenanceDto } from '../models/amims-last-maintenance-dto';
import { lastMaintenanceControllerCreate } from '../fn/last-maintenance/last-maintenance-controller-create';
import { LastMaintenanceControllerCreate$Params } from '../fn/last-maintenance/last-maintenance-controller-create';
import { lastMaintenanceControllerFindAll } from '../fn/last-maintenance/last-maintenance-controller-find-all';
import { LastMaintenanceControllerFindAll$Params } from '../fn/last-maintenance/last-maintenance-controller-find-all';
import { lastMaintenanceControllerFindOne } from '../fn/last-maintenance/last-maintenance-controller-find-one';
import { LastMaintenanceControllerFindOne$Params } from '../fn/last-maintenance/last-maintenance-controller-find-one';
import { lastMaintenanceControllerRemove } from '../fn/last-maintenance/last-maintenance-controller-remove';
import { LastMaintenanceControllerRemove$Params } from '../fn/last-maintenance/last-maintenance-controller-remove';
import { lastMaintenanceControllerUpdate } from '../fn/last-maintenance/last-maintenance-controller-update';
import { LastMaintenanceControllerUpdate$Params } from '../fn/last-maintenance/last-maintenance-controller-update';

@Injectable({ providedIn: 'root' })
export class LastMaintenanceService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `lastMaintenanceControllerFindAll()` */
  static readonly LastMaintenanceControllerFindAllPath = '/amims/last_maintenance/last_maintenance';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `lastMaintenanceControllerFindAll()` instead.
   *
   * This method doesn't expect any request body.
   */
  lastMaintenanceControllerFindAll$Response(params?: LastMaintenanceControllerFindAll$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: Array<AmimsLastMaintenanceDto>;
'total'?: number;
}>> {
    return lastMaintenanceControllerFindAll(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `lastMaintenanceControllerFindAll$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  lastMaintenanceControllerFindAll(params?: LastMaintenanceControllerFindAll$Params, context?: HttpContext): Observable<{
'code'?: number;
'pesan'?: string;
'data'?: Array<AmimsLastMaintenanceDto>;
'total'?: number;
}> {
    return this.lastMaintenanceControllerFindAll$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: Array<AmimsLastMaintenanceDto>;
'total'?: number;
}>): {
'code'?: number;
'pesan'?: string;
'data'?: Array<AmimsLastMaintenanceDto>;
'total'?: number;
} => r.body)
    );
  }

  /** Path part for operation `lastMaintenanceControllerCreate()` */
  static readonly LastMaintenanceControllerCreatePath = '/amims/last_maintenance/last_maintenance';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `lastMaintenanceControllerCreate()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  lastMaintenanceControllerCreate$Response(params: LastMaintenanceControllerCreate$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsLastMaintenanceDto;
}>> {
    return lastMaintenanceControllerCreate(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `lastMaintenanceControllerCreate$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  lastMaintenanceControllerCreate(params: LastMaintenanceControllerCreate$Params, context?: HttpContext): Observable<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsLastMaintenanceDto;
}> {
    return this.lastMaintenanceControllerCreate$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsLastMaintenanceDto;
}>): {
'code'?: number;
'pesan'?: string;
'data'?: AmimsLastMaintenanceDto;
} => r.body)
    );
  }

  /** Path part for operation `lastMaintenanceControllerFindOne()` */
  static readonly LastMaintenanceControllerFindOnePath = '/amims/last_maintenance/last_maintenance/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `lastMaintenanceControllerFindOne()` instead.
   *
   * This method doesn't expect any request body.
   */
  lastMaintenanceControllerFindOne$Response(params: LastMaintenanceControllerFindOne$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsLastMaintenanceDto;
}>> {
    return lastMaintenanceControllerFindOne(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `lastMaintenanceControllerFindOne$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  lastMaintenanceControllerFindOne(params: LastMaintenanceControllerFindOne$Params, context?: HttpContext): Observable<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsLastMaintenanceDto;
}> {
    return this.lastMaintenanceControllerFindOne$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsLastMaintenanceDto;
}>): {
'code'?: number;
'pesan'?: string;
'data'?: AmimsLastMaintenanceDto;
} => r.body)
    );
  }

  /** Path part for operation `lastMaintenanceControllerUpdate()` */
  static readonly LastMaintenanceControllerUpdatePath = '/amims/last_maintenance/last_maintenance/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `lastMaintenanceControllerUpdate()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  lastMaintenanceControllerUpdate$Response(params: LastMaintenanceControllerUpdate$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsLastMaintenanceDto;
}>> {
    return lastMaintenanceControllerUpdate(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `lastMaintenanceControllerUpdate$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  lastMaintenanceControllerUpdate(params: LastMaintenanceControllerUpdate$Params, context?: HttpContext): Observable<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsLastMaintenanceDto;
}> {
    return this.lastMaintenanceControllerUpdate$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsLastMaintenanceDto;
}>): {
'code'?: number;
'pesan'?: string;
'data'?: AmimsLastMaintenanceDto;
} => r.body)
    );
  }

  /** Path part for operation `lastMaintenanceControllerRemove()` */
  static readonly LastMaintenanceControllerRemovePath = '/amims/last_maintenance/last_maintenance/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `lastMaintenanceControllerRemove()` instead.
   *
   * This method doesn't expect any request body.
   */
  lastMaintenanceControllerRemove$Response(params: LastMaintenanceControllerRemove$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsLastMaintenanceDto;
}>> {
    return lastMaintenanceControllerRemove(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `lastMaintenanceControllerRemove$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  lastMaintenanceControllerRemove(params: LastMaintenanceControllerRemove$Params, context?: HttpContext): Observable<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsLastMaintenanceDto;
}> {
    return this.lastMaintenanceControllerRemove$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsLastMaintenanceDto;
}>): {
'code'?: number;
'pesan'?: string;
'data'?: AmimsLastMaintenanceDto;
} => r.body)
    );
  }

}

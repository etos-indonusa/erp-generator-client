/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { AmimsTypeOfworkDto } from '../models/amims-type-ofwork-dto';
import { typeOfworkControllerCreate } from '../fn/type-ofwork/type-ofwork-controller-create';
import { TypeOfworkControllerCreate$Params } from '../fn/type-ofwork/type-ofwork-controller-create';
import { typeOfworkControllerFindAll } from '../fn/type-ofwork/type-ofwork-controller-find-all';
import { TypeOfworkControllerFindAll$Params } from '../fn/type-ofwork/type-ofwork-controller-find-all';
import { typeOfworkControllerFindOne } from '../fn/type-ofwork/type-ofwork-controller-find-one';
import { TypeOfworkControllerFindOne$Params } from '../fn/type-ofwork/type-ofwork-controller-find-one';
import { typeOfworkControllerRemove } from '../fn/type-ofwork/type-ofwork-controller-remove';
import { TypeOfworkControllerRemove$Params } from '../fn/type-ofwork/type-ofwork-controller-remove';
import { typeOfworkControllerUpdate } from '../fn/type-ofwork/type-ofwork-controller-update';
import { TypeOfworkControllerUpdate$Params } from '../fn/type-ofwork/type-ofwork-controller-update';

@Injectable({ providedIn: 'root' })
export class TypeOfworkService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `typeOfworkControllerFindAll()` */
  static readonly TypeOfworkControllerFindAllPath = '/amims/type_ofwork/type_ofwork';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `typeOfworkControllerFindAll()` instead.
   *
   * This method doesn't expect any request body.
   */
  typeOfworkControllerFindAll$Response(params?: TypeOfworkControllerFindAll$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: Array<AmimsTypeOfworkDto>;
'total'?: number;
}>> {
    return typeOfworkControllerFindAll(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `typeOfworkControllerFindAll$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  typeOfworkControllerFindAll(params?: TypeOfworkControllerFindAll$Params, context?: HttpContext): Observable<{
'code'?: number;
'pesan'?: string;
'data'?: Array<AmimsTypeOfworkDto>;
'total'?: number;
}> {
    return this.typeOfworkControllerFindAll$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: Array<AmimsTypeOfworkDto>;
'total'?: number;
}>): {
'code'?: number;
'pesan'?: string;
'data'?: Array<AmimsTypeOfworkDto>;
'total'?: number;
} => r.body)
    );
  }

  /** Path part for operation `typeOfworkControllerCreate()` */
  static readonly TypeOfworkControllerCreatePath = '/amims/type_ofwork/type_ofwork';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `typeOfworkControllerCreate()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  typeOfworkControllerCreate$Response(params: TypeOfworkControllerCreate$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsTypeOfworkDto;
}>> {
    return typeOfworkControllerCreate(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `typeOfworkControllerCreate$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  typeOfworkControllerCreate(params: TypeOfworkControllerCreate$Params, context?: HttpContext): Observable<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsTypeOfworkDto;
}> {
    return this.typeOfworkControllerCreate$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsTypeOfworkDto;
}>): {
'code'?: number;
'pesan'?: string;
'data'?: AmimsTypeOfworkDto;
} => r.body)
    );
  }

  /** Path part for operation `typeOfworkControllerFindOne()` */
  static readonly TypeOfworkControllerFindOnePath = '/amims/type_ofwork/type_ofwork/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `typeOfworkControllerFindOne()` instead.
   *
   * This method doesn't expect any request body.
   */
  typeOfworkControllerFindOne$Response(params: TypeOfworkControllerFindOne$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsTypeOfworkDto;
}>> {
    return typeOfworkControllerFindOne(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `typeOfworkControllerFindOne$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  typeOfworkControllerFindOne(params: TypeOfworkControllerFindOne$Params, context?: HttpContext): Observable<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsTypeOfworkDto;
}> {
    return this.typeOfworkControllerFindOne$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsTypeOfworkDto;
}>): {
'code'?: number;
'pesan'?: string;
'data'?: AmimsTypeOfworkDto;
} => r.body)
    );
  }

  /** Path part for operation `typeOfworkControllerUpdate()` */
  static readonly TypeOfworkControllerUpdatePath = '/amims/type_ofwork/type_ofwork/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `typeOfworkControllerUpdate()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  typeOfworkControllerUpdate$Response(params: TypeOfworkControllerUpdate$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsTypeOfworkDto;
}>> {
    return typeOfworkControllerUpdate(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `typeOfworkControllerUpdate$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  typeOfworkControllerUpdate(params: TypeOfworkControllerUpdate$Params, context?: HttpContext): Observable<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsTypeOfworkDto;
}> {
    return this.typeOfworkControllerUpdate$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsTypeOfworkDto;
}>): {
'code'?: number;
'pesan'?: string;
'data'?: AmimsTypeOfworkDto;
} => r.body)
    );
  }

  /** Path part for operation `typeOfworkControllerRemove()` */
  static readonly TypeOfworkControllerRemovePath = '/amims/type_ofwork/type_ofwork/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `typeOfworkControllerRemove()` instead.
   *
   * This method doesn't expect any request body.
   */
  typeOfworkControllerRemove$Response(params: TypeOfworkControllerRemove$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsTypeOfworkDto;
}>> {
    return typeOfworkControllerRemove(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `typeOfworkControllerRemove$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  typeOfworkControllerRemove(params: TypeOfworkControllerRemove$Params, context?: HttpContext): Observable<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsTypeOfworkDto;
}> {
    return this.typeOfworkControllerRemove$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsTypeOfworkDto;
}>): {
'code'?: number;
'pesan'?: string;
'data'?: AmimsTypeOfworkDto;
} => r.body)
    );
  }

}

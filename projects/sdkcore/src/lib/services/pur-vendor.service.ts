/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { AmimsPurVendorDto } from '../models/amims-pur-vendor-dto';
import { purVendorControllerCreate } from '../fn/pur-vendor/pur-vendor-controller-create';
import { PurVendorControllerCreate$Params } from '../fn/pur-vendor/pur-vendor-controller-create';
import { purVendorControllerFindAll } from '../fn/pur-vendor/pur-vendor-controller-find-all';
import { PurVendorControllerFindAll$Params } from '../fn/pur-vendor/pur-vendor-controller-find-all';
import { purVendorControllerFindOne } from '../fn/pur-vendor/pur-vendor-controller-find-one';
import { PurVendorControllerFindOne$Params } from '../fn/pur-vendor/pur-vendor-controller-find-one';
import { purVendorControllerRemove } from '../fn/pur-vendor/pur-vendor-controller-remove';
import { PurVendorControllerRemove$Params } from '../fn/pur-vendor/pur-vendor-controller-remove';
import { purVendorControllerUpdate } from '../fn/pur-vendor/pur-vendor-controller-update';
import { PurVendorControllerUpdate$Params } from '../fn/pur-vendor/pur-vendor-controller-update';

@Injectable({ providedIn: 'root' })
export class PurVendorService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `purVendorControllerFindAll()` */
  static readonly PurVendorControllerFindAllPath = '/amims/pur_vendor/pur_vendor';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `purVendorControllerFindAll()` instead.
   *
   * This method doesn't expect any request body.
   */
  purVendorControllerFindAll$Response(params?: PurVendorControllerFindAll$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: Array<AmimsPurVendorDto>;
'total'?: number;
}>> {
    return purVendorControllerFindAll(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `purVendorControllerFindAll$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  purVendorControllerFindAll(params?: PurVendorControllerFindAll$Params, context?: HttpContext): Observable<{
'code'?: number;
'pesan'?: string;
'data'?: Array<AmimsPurVendorDto>;
'total'?: number;
}> {
    return this.purVendorControllerFindAll$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: Array<AmimsPurVendorDto>;
'total'?: number;
}>): {
'code'?: number;
'pesan'?: string;
'data'?: Array<AmimsPurVendorDto>;
'total'?: number;
} => r.body)
    );
  }

  /** Path part for operation `purVendorControllerCreate()` */
  static readonly PurVendorControllerCreatePath = '/amims/pur_vendor/pur_vendor';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `purVendorControllerCreate()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  purVendorControllerCreate$Response(params: PurVendorControllerCreate$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsPurVendorDto;
}>> {
    return purVendorControllerCreate(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `purVendorControllerCreate$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  purVendorControllerCreate(params: PurVendorControllerCreate$Params, context?: HttpContext): Observable<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsPurVendorDto;
}> {
    return this.purVendorControllerCreate$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsPurVendorDto;
}>): {
'code'?: number;
'pesan'?: string;
'data'?: AmimsPurVendorDto;
} => r.body)
    );
  }

  /** Path part for operation `purVendorControllerFindOne()` */
  static readonly PurVendorControllerFindOnePath = '/amims/pur_vendor/pur_vendor/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `purVendorControllerFindOne()` instead.
   *
   * This method doesn't expect any request body.
   */
  purVendorControllerFindOne$Response(params: PurVendorControllerFindOne$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsPurVendorDto;
}>> {
    return purVendorControllerFindOne(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `purVendorControllerFindOne$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  purVendorControllerFindOne(params: PurVendorControllerFindOne$Params, context?: HttpContext): Observable<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsPurVendorDto;
}> {
    return this.purVendorControllerFindOne$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsPurVendorDto;
}>): {
'code'?: number;
'pesan'?: string;
'data'?: AmimsPurVendorDto;
} => r.body)
    );
  }

  /** Path part for operation `purVendorControllerUpdate()` */
  static readonly PurVendorControllerUpdatePath = '/amims/pur_vendor/pur_vendor/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `purVendorControllerUpdate()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  purVendorControllerUpdate$Response(params: PurVendorControllerUpdate$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsPurVendorDto;
}>> {
    return purVendorControllerUpdate(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `purVendorControllerUpdate$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  purVendorControllerUpdate(params: PurVendorControllerUpdate$Params, context?: HttpContext): Observable<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsPurVendorDto;
}> {
    return this.purVendorControllerUpdate$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsPurVendorDto;
}>): {
'code'?: number;
'pesan'?: string;
'data'?: AmimsPurVendorDto;
} => r.body)
    );
  }

  /** Path part for operation `purVendorControllerRemove()` */
  static readonly PurVendorControllerRemovePath = '/amims/pur_vendor/pur_vendor/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `purVendorControllerRemove()` instead.
   *
   * This method doesn't expect any request body.
   */
  purVendorControllerRemove$Response(params: PurVendorControllerRemove$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsPurVendorDto;
}>> {
    return purVendorControllerRemove(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `purVendorControllerRemove$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  purVendorControllerRemove(params: PurVendorControllerRemove$Params, context?: HttpContext): Observable<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsPurVendorDto;
}> {
    return this.purVendorControllerRemove$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsPurVendorDto;
}>): {
'code'?: number;
'pesan'?: string;
'data'?: AmimsPurVendorDto;
} => r.body)
    );
  }

}

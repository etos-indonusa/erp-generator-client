/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { AmimsMaintenanceProgramDto } from '../models/amims-maintenance-program-dto';
import { maintenanceProgramControllerCreate } from '../fn/maintenance-program/maintenance-program-controller-create';
import { MaintenanceProgramControllerCreate$Params } from '../fn/maintenance-program/maintenance-program-controller-create';
import { maintenanceProgramControllerFindAll } from '../fn/maintenance-program/maintenance-program-controller-find-all';
import { MaintenanceProgramControllerFindAll$Params } from '../fn/maintenance-program/maintenance-program-controller-find-all';
import { maintenanceProgramControllerFindOne } from '../fn/maintenance-program/maintenance-program-controller-find-one';
import { MaintenanceProgramControllerFindOne$Params } from '../fn/maintenance-program/maintenance-program-controller-find-one';
import { maintenanceProgramControllerRemove } from '../fn/maintenance-program/maintenance-program-controller-remove';
import { MaintenanceProgramControllerRemove$Params } from '../fn/maintenance-program/maintenance-program-controller-remove';
import { maintenanceProgramControllerUpdate } from '../fn/maintenance-program/maintenance-program-controller-update';
import { MaintenanceProgramControllerUpdate$Params } from '../fn/maintenance-program/maintenance-program-controller-update';

@Injectable({ providedIn: 'root' })
export class MaintenanceProgramService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `maintenanceProgramControllerFindAll()` */
  static readonly MaintenanceProgramControllerFindAllPath = '/amims/maintenance_program/maintenance_program';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `maintenanceProgramControllerFindAll()` instead.
   *
   * This method doesn't expect any request body.
   */
  maintenanceProgramControllerFindAll$Response(params?: MaintenanceProgramControllerFindAll$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: Array<AmimsMaintenanceProgramDto>;
'total'?: number;
}>> {
    return maintenanceProgramControllerFindAll(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `maintenanceProgramControllerFindAll$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  maintenanceProgramControllerFindAll(params?: MaintenanceProgramControllerFindAll$Params, context?: HttpContext): Observable<{
'code'?: number;
'pesan'?: string;
'data'?: Array<AmimsMaintenanceProgramDto>;
'total'?: number;
}> {
    return this.maintenanceProgramControllerFindAll$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: Array<AmimsMaintenanceProgramDto>;
'total'?: number;
}>): {
'code'?: number;
'pesan'?: string;
'data'?: Array<AmimsMaintenanceProgramDto>;
'total'?: number;
} => r.body)
    );
  }

  /** Path part for operation `maintenanceProgramControllerCreate()` */
  static readonly MaintenanceProgramControllerCreatePath = '/amims/maintenance_program/maintenance_program';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `maintenanceProgramControllerCreate()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  maintenanceProgramControllerCreate$Response(params: MaintenanceProgramControllerCreate$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsMaintenanceProgramDto;
}>> {
    return maintenanceProgramControllerCreate(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `maintenanceProgramControllerCreate$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  maintenanceProgramControllerCreate(params: MaintenanceProgramControllerCreate$Params, context?: HttpContext): Observable<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsMaintenanceProgramDto;
}> {
    return this.maintenanceProgramControllerCreate$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsMaintenanceProgramDto;
}>): {
'code'?: number;
'pesan'?: string;
'data'?: AmimsMaintenanceProgramDto;
} => r.body)
    );
  }

  /** Path part for operation `maintenanceProgramControllerFindOne()` */
  static readonly MaintenanceProgramControllerFindOnePath = '/amims/maintenance_program/maintenance_program/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `maintenanceProgramControllerFindOne()` instead.
   *
   * This method doesn't expect any request body.
   */
  maintenanceProgramControllerFindOne$Response(params: MaintenanceProgramControllerFindOne$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsMaintenanceProgramDto;
}>> {
    return maintenanceProgramControllerFindOne(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `maintenanceProgramControllerFindOne$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  maintenanceProgramControllerFindOne(params: MaintenanceProgramControllerFindOne$Params, context?: HttpContext): Observable<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsMaintenanceProgramDto;
}> {
    return this.maintenanceProgramControllerFindOne$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsMaintenanceProgramDto;
}>): {
'code'?: number;
'pesan'?: string;
'data'?: AmimsMaintenanceProgramDto;
} => r.body)
    );
  }

  /** Path part for operation `maintenanceProgramControllerUpdate()` */
  static readonly MaintenanceProgramControllerUpdatePath = '/amims/maintenance_program/maintenance_program/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `maintenanceProgramControllerUpdate()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  maintenanceProgramControllerUpdate$Response(params: MaintenanceProgramControllerUpdate$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsMaintenanceProgramDto;
}>> {
    return maintenanceProgramControllerUpdate(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `maintenanceProgramControllerUpdate$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  maintenanceProgramControllerUpdate(params: MaintenanceProgramControllerUpdate$Params, context?: HttpContext): Observable<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsMaintenanceProgramDto;
}> {
    return this.maintenanceProgramControllerUpdate$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsMaintenanceProgramDto;
}>): {
'code'?: number;
'pesan'?: string;
'data'?: AmimsMaintenanceProgramDto;
} => r.body)
    );
  }

  /** Path part for operation `maintenanceProgramControllerRemove()` */
  static readonly MaintenanceProgramControllerRemovePath = '/amims/maintenance_program/maintenance_program/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `maintenanceProgramControllerRemove()` instead.
   *
   * This method doesn't expect any request body.
   */
  maintenanceProgramControllerRemove$Response(params: MaintenanceProgramControllerRemove$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsMaintenanceProgramDto;
}>> {
    return maintenanceProgramControllerRemove(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `maintenanceProgramControllerRemove$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  maintenanceProgramControllerRemove(params: MaintenanceProgramControllerRemove$Params, context?: HttpContext): Observable<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsMaintenanceProgramDto;
}> {
    return this.maintenanceProgramControllerRemove$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsMaintenanceProgramDto;
}>): {
'code'?: number;
'pesan'?: string;
'data'?: AmimsMaintenanceProgramDto;
} => r.body)
    );
  }

}

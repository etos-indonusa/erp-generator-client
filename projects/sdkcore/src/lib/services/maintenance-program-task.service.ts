/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { AmimsMaintenanceProgramTaskDto } from '../models/amims-maintenance-program-task-dto';
import { maintenanceProgramTaskControllerCreate } from '../fn/maintenance-program-task/maintenance-program-task-controller-create';
import { MaintenanceProgramTaskControllerCreate$Params } from '../fn/maintenance-program-task/maintenance-program-task-controller-create';
import { maintenanceProgramTaskControllerFindAll } from '../fn/maintenance-program-task/maintenance-program-task-controller-find-all';
import { MaintenanceProgramTaskControllerFindAll$Params } from '../fn/maintenance-program-task/maintenance-program-task-controller-find-all';
import { maintenanceProgramTaskControllerFindOne } from '../fn/maintenance-program-task/maintenance-program-task-controller-find-one';
import { MaintenanceProgramTaskControllerFindOne$Params } from '../fn/maintenance-program-task/maintenance-program-task-controller-find-one';
import { maintenanceProgramTaskControllerRemove } from '../fn/maintenance-program-task/maintenance-program-task-controller-remove';
import { MaintenanceProgramTaskControllerRemove$Params } from '../fn/maintenance-program-task/maintenance-program-task-controller-remove';
import { maintenanceProgramTaskControllerUpdate } from '../fn/maintenance-program-task/maintenance-program-task-controller-update';
import { MaintenanceProgramTaskControllerUpdate$Params } from '../fn/maintenance-program-task/maintenance-program-task-controller-update';

@Injectable({ providedIn: 'root' })
export class MaintenanceProgramTaskService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `maintenanceProgramTaskControllerFindAll()` */
  static readonly MaintenanceProgramTaskControllerFindAllPath = '/amims/maintenance_program_task/maintenance_program_task';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `maintenanceProgramTaskControllerFindAll()` instead.
   *
   * This method doesn't expect any request body.
   */
  maintenanceProgramTaskControllerFindAll$Response(params?: MaintenanceProgramTaskControllerFindAll$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: Array<AmimsMaintenanceProgramTaskDto>;
'total'?: number;
}>> {
    return maintenanceProgramTaskControllerFindAll(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `maintenanceProgramTaskControllerFindAll$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  maintenanceProgramTaskControllerFindAll(params?: MaintenanceProgramTaskControllerFindAll$Params, context?: HttpContext): Observable<{
'code'?: number;
'pesan'?: string;
'data'?: Array<AmimsMaintenanceProgramTaskDto>;
'total'?: number;
}> {
    return this.maintenanceProgramTaskControllerFindAll$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: Array<AmimsMaintenanceProgramTaskDto>;
'total'?: number;
}>): {
'code'?: number;
'pesan'?: string;
'data'?: Array<AmimsMaintenanceProgramTaskDto>;
'total'?: number;
} => r.body)
    );
  }

  /** Path part for operation `maintenanceProgramTaskControllerCreate()` */
  static readonly MaintenanceProgramTaskControllerCreatePath = '/amims/maintenance_program_task/maintenance_program_task';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `maintenanceProgramTaskControllerCreate()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  maintenanceProgramTaskControllerCreate$Response(params: MaintenanceProgramTaskControllerCreate$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsMaintenanceProgramTaskDto;
}>> {
    return maintenanceProgramTaskControllerCreate(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `maintenanceProgramTaskControllerCreate$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  maintenanceProgramTaskControllerCreate(params: MaintenanceProgramTaskControllerCreate$Params, context?: HttpContext): Observable<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsMaintenanceProgramTaskDto;
}> {
    return this.maintenanceProgramTaskControllerCreate$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsMaintenanceProgramTaskDto;
}>): {
'code'?: number;
'pesan'?: string;
'data'?: AmimsMaintenanceProgramTaskDto;
} => r.body)
    );
  }

  /** Path part for operation `maintenanceProgramTaskControllerFindOne()` */
  static readonly MaintenanceProgramTaskControllerFindOnePath = '/amims/maintenance_program_task/maintenance_program_task/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `maintenanceProgramTaskControllerFindOne()` instead.
   *
   * This method doesn't expect any request body.
   */
  maintenanceProgramTaskControllerFindOne$Response(params: MaintenanceProgramTaskControllerFindOne$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsMaintenanceProgramTaskDto;
}>> {
    return maintenanceProgramTaskControllerFindOne(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `maintenanceProgramTaskControllerFindOne$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  maintenanceProgramTaskControllerFindOne(params: MaintenanceProgramTaskControllerFindOne$Params, context?: HttpContext): Observable<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsMaintenanceProgramTaskDto;
}> {
    return this.maintenanceProgramTaskControllerFindOne$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsMaintenanceProgramTaskDto;
}>): {
'code'?: number;
'pesan'?: string;
'data'?: AmimsMaintenanceProgramTaskDto;
} => r.body)
    );
  }

  /** Path part for operation `maintenanceProgramTaskControllerUpdate()` */
  static readonly MaintenanceProgramTaskControllerUpdatePath = '/amims/maintenance_program_task/maintenance_program_task/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `maintenanceProgramTaskControllerUpdate()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  maintenanceProgramTaskControllerUpdate$Response(params: MaintenanceProgramTaskControllerUpdate$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsMaintenanceProgramTaskDto;
}>> {
    return maintenanceProgramTaskControllerUpdate(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `maintenanceProgramTaskControllerUpdate$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  maintenanceProgramTaskControllerUpdate(params: MaintenanceProgramTaskControllerUpdate$Params, context?: HttpContext): Observable<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsMaintenanceProgramTaskDto;
}> {
    return this.maintenanceProgramTaskControllerUpdate$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsMaintenanceProgramTaskDto;
}>): {
'code'?: number;
'pesan'?: string;
'data'?: AmimsMaintenanceProgramTaskDto;
} => r.body)
    );
  }

  /** Path part for operation `maintenanceProgramTaskControllerRemove()` */
  static readonly MaintenanceProgramTaskControllerRemovePath = '/amims/maintenance_program_task/maintenance_program_task/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `maintenanceProgramTaskControllerRemove()` instead.
   *
   * This method doesn't expect any request body.
   */
  maintenanceProgramTaskControllerRemove$Response(params: MaintenanceProgramTaskControllerRemove$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsMaintenanceProgramTaskDto;
}>> {
    return maintenanceProgramTaskControllerRemove(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `maintenanceProgramTaskControllerRemove$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  maintenanceProgramTaskControllerRemove(params: MaintenanceProgramTaskControllerRemove$Params, context?: HttpContext): Observable<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsMaintenanceProgramTaskDto;
}> {
    return this.maintenanceProgramTaskControllerRemove$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsMaintenanceProgramTaskDto;
}>): {
'code'?: number;
'pesan'?: string;
'data'?: AmimsMaintenanceProgramTaskDto;
} => r.body)
    );
  }

}

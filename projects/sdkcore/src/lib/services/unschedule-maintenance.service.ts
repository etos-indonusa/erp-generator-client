/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { AmimsUnscheduleMaintenanceDto } from '../models/amims-unschedule-maintenance-dto';
import { unscheduleMaintenanceControllerCreate } from '../fn/unschedule-maintenance/unschedule-maintenance-controller-create';
import { UnscheduleMaintenanceControllerCreate$Params } from '../fn/unschedule-maintenance/unschedule-maintenance-controller-create';
import { unscheduleMaintenanceControllerFindAll } from '../fn/unschedule-maintenance/unschedule-maintenance-controller-find-all';
import { UnscheduleMaintenanceControllerFindAll$Params } from '../fn/unschedule-maintenance/unschedule-maintenance-controller-find-all';
import { unscheduleMaintenanceControllerFindOne } from '../fn/unschedule-maintenance/unschedule-maintenance-controller-find-one';
import { UnscheduleMaintenanceControllerFindOne$Params } from '../fn/unschedule-maintenance/unschedule-maintenance-controller-find-one';
import { unscheduleMaintenanceControllerRemove } from '../fn/unschedule-maintenance/unschedule-maintenance-controller-remove';
import { UnscheduleMaintenanceControllerRemove$Params } from '../fn/unschedule-maintenance/unschedule-maintenance-controller-remove';
import { unscheduleMaintenanceControllerUpdate } from '../fn/unschedule-maintenance/unschedule-maintenance-controller-update';
import { UnscheduleMaintenanceControllerUpdate$Params } from '../fn/unschedule-maintenance/unschedule-maintenance-controller-update';

@Injectable({ providedIn: 'root' })
export class UnscheduleMaintenanceService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `unscheduleMaintenanceControllerFindAll()` */
  static readonly UnscheduleMaintenanceControllerFindAllPath = '/amims/unschedule_maintenance/unschedule_maintenance';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `unscheduleMaintenanceControllerFindAll()` instead.
   *
   * This method doesn't expect any request body.
   */
  unscheduleMaintenanceControllerFindAll$Response(params?: UnscheduleMaintenanceControllerFindAll$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: Array<AmimsUnscheduleMaintenanceDto>;
'total'?: number;
}>> {
    return unscheduleMaintenanceControllerFindAll(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `unscheduleMaintenanceControllerFindAll$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  unscheduleMaintenanceControllerFindAll(params?: UnscheduleMaintenanceControllerFindAll$Params, context?: HttpContext): Observable<{
'code'?: number;
'pesan'?: string;
'data'?: Array<AmimsUnscheduleMaintenanceDto>;
'total'?: number;
}> {
    return this.unscheduleMaintenanceControllerFindAll$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: Array<AmimsUnscheduleMaintenanceDto>;
'total'?: number;
}>): {
'code'?: number;
'pesan'?: string;
'data'?: Array<AmimsUnscheduleMaintenanceDto>;
'total'?: number;
} => r.body)
    );
  }

  /** Path part for operation `unscheduleMaintenanceControllerCreate()` */
  static readonly UnscheduleMaintenanceControllerCreatePath = '/amims/unschedule_maintenance/unschedule_maintenance';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `unscheduleMaintenanceControllerCreate()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  unscheduleMaintenanceControllerCreate$Response(params: UnscheduleMaintenanceControllerCreate$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsUnscheduleMaintenanceDto;
}>> {
    return unscheduleMaintenanceControllerCreate(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `unscheduleMaintenanceControllerCreate$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  unscheduleMaintenanceControllerCreate(params: UnscheduleMaintenanceControllerCreate$Params, context?: HttpContext): Observable<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsUnscheduleMaintenanceDto;
}> {
    return this.unscheduleMaintenanceControllerCreate$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsUnscheduleMaintenanceDto;
}>): {
'code'?: number;
'pesan'?: string;
'data'?: AmimsUnscheduleMaintenanceDto;
} => r.body)
    );
  }

  /** Path part for operation `unscheduleMaintenanceControllerFindOne()` */
  static readonly UnscheduleMaintenanceControllerFindOnePath = '/amims/unschedule_maintenance/unschedule_maintenance/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `unscheduleMaintenanceControllerFindOne()` instead.
   *
   * This method doesn't expect any request body.
   */
  unscheduleMaintenanceControllerFindOne$Response(params: UnscheduleMaintenanceControllerFindOne$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsUnscheduleMaintenanceDto;
}>> {
    return unscheduleMaintenanceControllerFindOne(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `unscheduleMaintenanceControllerFindOne$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  unscheduleMaintenanceControllerFindOne(params: UnscheduleMaintenanceControllerFindOne$Params, context?: HttpContext): Observable<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsUnscheduleMaintenanceDto;
}> {
    return this.unscheduleMaintenanceControllerFindOne$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsUnscheduleMaintenanceDto;
}>): {
'code'?: number;
'pesan'?: string;
'data'?: AmimsUnscheduleMaintenanceDto;
} => r.body)
    );
  }

  /** Path part for operation `unscheduleMaintenanceControllerUpdate()` */
  static readonly UnscheduleMaintenanceControllerUpdatePath = '/amims/unschedule_maintenance/unschedule_maintenance/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `unscheduleMaintenanceControllerUpdate()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  unscheduleMaintenanceControllerUpdate$Response(params: UnscheduleMaintenanceControllerUpdate$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsUnscheduleMaintenanceDto;
}>> {
    return unscheduleMaintenanceControllerUpdate(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `unscheduleMaintenanceControllerUpdate$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  unscheduleMaintenanceControllerUpdate(params: UnscheduleMaintenanceControllerUpdate$Params, context?: HttpContext): Observable<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsUnscheduleMaintenanceDto;
}> {
    return this.unscheduleMaintenanceControllerUpdate$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsUnscheduleMaintenanceDto;
}>): {
'code'?: number;
'pesan'?: string;
'data'?: AmimsUnscheduleMaintenanceDto;
} => r.body)
    );
  }

  /** Path part for operation `unscheduleMaintenanceControllerRemove()` */
  static readonly UnscheduleMaintenanceControllerRemovePath = '/amims/unschedule_maintenance/unschedule_maintenance/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `unscheduleMaintenanceControllerRemove()` instead.
   *
   * This method doesn't expect any request body.
   */
  unscheduleMaintenanceControllerRemove$Response(params: UnscheduleMaintenanceControllerRemove$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsUnscheduleMaintenanceDto;
}>> {
    return unscheduleMaintenanceControllerRemove(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `unscheduleMaintenanceControllerRemove$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  unscheduleMaintenanceControllerRemove(params: UnscheduleMaintenanceControllerRemove$Params, context?: HttpContext): Observable<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsUnscheduleMaintenanceDto;
}> {
    return this.unscheduleMaintenanceControllerRemove$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsUnscheduleMaintenanceDto;
}>): {
'code'?: number;
'pesan'?: string;
'data'?: AmimsUnscheduleMaintenanceDto;
} => r.body)
    );
  }

}

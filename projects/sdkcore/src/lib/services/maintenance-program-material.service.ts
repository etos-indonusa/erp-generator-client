/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { AmimsMaintenanceProgramMaterialDto } from '../models/amims-maintenance-program-material-dto';
import { maintenanceProgramMaterialControllerCreate } from '../fn/maintenance-program-material/maintenance-program-material-controller-create';
import { MaintenanceProgramMaterialControllerCreate$Params } from '../fn/maintenance-program-material/maintenance-program-material-controller-create';
import { maintenanceProgramMaterialControllerFindAll } from '../fn/maintenance-program-material/maintenance-program-material-controller-find-all';
import { MaintenanceProgramMaterialControllerFindAll$Params } from '../fn/maintenance-program-material/maintenance-program-material-controller-find-all';
import { maintenanceProgramMaterialControllerFindOne } from '../fn/maintenance-program-material/maintenance-program-material-controller-find-one';
import { MaintenanceProgramMaterialControllerFindOne$Params } from '../fn/maintenance-program-material/maintenance-program-material-controller-find-one';
import { maintenanceProgramMaterialControllerRemove } from '../fn/maintenance-program-material/maintenance-program-material-controller-remove';
import { MaintenanceProgramMaterialControllerRemove$Params } from '../fn/maintenance-program-material/maintenance-program-material-controller-remove';
import { maintenanceProgramMaterialControllerUpdate } from '../fn/maintenance-program-material/maintenance-program-material-controller-update';
import { MaintenanceProgramMaterialControllerUpdate$Params } from '../fn/maintenance-program-material/maintenance-program-material-controller-update';

@Injectable({ providedIn: 'root' })
export class MaintenanceProgramMaterialService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `maintenanceProgramMaterialControllerFindAll()` */
  static readonly MaintenanceProgramMaterialControllerFindAllPath = '/amims/maintenance_program_material/maintenance_program_material';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `maintenanceProgramMaterialControllerFindAll()` instead.
   *
   * This method doesn't expect any request body.
   */
  maintenanceProgramMaterialControllerFindAll$Response(params?: MaintenanceProgramMaterialControllerFindAll$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: Array<AmimsMaintenanceProgramMaterialDto>;
'total'?: number;
}>> {
    return maintenanceProgramMaterialControllerFindAll(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `maintenanceProgramMaterialControllerFindAll$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  maintenanceProgramMaterialControllerFindAll(params?: MaintenanceProgramMaterialControllerFindAll$Params, context?: HttpContext): Observable<{
'code'?: number;
'pesan'?: string;
'data'?: Array<AmimsMaintenanceProgramMaterialDto>;
'total'?: number;
}> {
    return this.maintenanceProgramMaterialControllerFindAll$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: Array<AmimsMaintenanceProgramMaterialDto>;
'total'?: number;
}>): {
'code'?: number;
'pesan'?: string;
'data'?: Array<AmimsMaintenanceProgramMaterialDto>;
'total'?: number;
} => r.body)
    );
  }

  /** Path part for operation `maintenanceProgramMaterialControllerCreate()` */
  static readonly MaintenanceProgramMaterialControllerCreatePath = '/amims/maintenance_program_material/maintenance_program_material';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `maintenanceProgramMaterialControllerCreate()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  maintenanceProgramMaterialControllerCreate$Response(params: MaintenanceProgramMaterialControllerCreate$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsMaintenanceProgramMaterialDto;
}>> {
    return maintenanceProgramMaterialControllerCreate(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `maintenanceProgramMaterialControllerCreate$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  maintenanceProgramMaterialControllerCreate(params: MaintenanceProgramMaterialControllerCreate$Params, context?: HttpContext): Observable<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsMaintenanceProgramMaterialDto;
}> {
    return this.maintenanceProgramMaterialControllerCreate$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsMaintenanceProgramMaterialDto;
}>): {
'code'?: number;
'pesan'?: string;
'data'?: AmimsMaintenanceProgramMaterialDto;
} => r.body)
    );
  }

  /** Path part for operation `maintenanceProgramMaterialControllerFindOne()` */
  static readonly MaintenanceProgramMaterialControllerFindOnePath = '/amims/maintenance_program_material/maintenance_program_material/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `maintenanceProgramMaterialControllerFindOne()` instead.
   *
   * This method doesn't expect any request body.
   */
  maintenanceProgramMaterialControllerFindOne$Response(params: MaintenanceProgramMaterialControllerFindOne$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsMaintenanceProgramMaterialDto;
}>> {
    return maintenanceProgramMaterialControllerFindOne(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `maintenanceProgramMaterialControllerFindOne$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  maintenanceProgramMaterialControllerFindOne(params: MaintenanceProgramMaterialControllerFindOne$Params, context?: HttpContext): Observable<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsMaintenanceProgramMaterialDto;
}> {
    return this.maintenanceProgramMaterialControllerFindOne$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsMaintenanceProgramMaterialDto;
}>): {
'code'?: number;
'pesan'?: string;
'data'?: AmimsMaintenanceProgramMaterialDto;
} => r.body)
    );
  }

  /** Path part for operation `maintenanceProgramMaterialControllerUpdate()` */
  static readonly MaintenanceProgramMaterialControllerUpdatePath = '/amims/maintenance_program_material/maintenance_program_material/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `maintenanceProgramMaterialControllerUpdate()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  maintenanceProgramMaterialControllerUpdate$Response(params: MaintenanceProgramMaterialControllerUpdate$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsMaintenanceProgramMaterialDto;
}>> {
    return maintenanceProgramMaterialControllerUpdate(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `maintenanceProgramMaterialControllerUpdate$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  maintenanceProgramMaterialControllerUpdate(params: MaintenanceProgramMaterialControllerUpdate$Params, context?: HttpContext): Observable<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsMaintenanceProgramMaterialDto;
}> {
    return this.maintenanceProgramMaterialControllerUpdate$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsMaintenanceProgramMaterialDto;
}>): {
'code'?: number;
'pesan'?: string;
'data'?: AmimsMaintenanceProgramMaterialDto;
} => r.body)
    );
  }

  /** Path part for operation `maintenanceProgramMaterialControllerRemove()` */
  static readonly MaintenanceProgramMaterialControllerRemovePath = '/amims/maintenance_program_material/maintenance_program_material/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `maintenanceProgramMaterialControllerRemove()` instead.
   *
   * This method doesn't expect any request body.
   */
  maintenanceProgramMaterialControllerRemove$Response(params: MaintenanceProgramMaterialControllerRemove$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsMaintenanceProgramMaterialDto;
}>> {
    return maintenanceProgramMaterialControllerRemove(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `maintenanceProgramMaterialControllerRemove$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  maintenanceProgramMaterialControllerRemove(params: MaintenanceProgramMaterialControllerRemove$Params, context?: HttpContext): Observable<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsMaintenanceProgramMaterialDto;
}> {
    return this.maintenanceProgramMaterialControllerRemove$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsMaintenanceProgramMaterialDto;
}>): {
'code'?: number;
'pesan'?: string;
'data'?: AmimsMaintenanceProgramMaterialDto;
} => r.body)
    );
  }

}

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { aircraftControllerCreate } from '../fn/aircraft/aircraft-controller-create';
import { AircraftControllerCreate$Params } from '../fn/aircraft/aircraft-controller-create';
import { aircraftControllerFindAll } from '../fn/aircraft/aircraft-controller-find-all';
import { AircraftControllerFindAll$Params } from '../fn/aircraft/aircraft-controller-find-all';
import { aircraftControllerFindOne } from '../fn/aircraft/aircraft-controller-find-one';
import { AircraftControllerFindOne$Params } from '../fn/aircraft/aircraft-controller-find-one';
import { aircraftControllerRemove } from '../fn/aircraft/aircraft-controller-remove';
import { AircraftControllerRemove$Params } from '../fn/aircraft/aircraft-controller-remove';
import { aircraftControllerUpdate } from '../fn/aircraft/aircraft-controller-update';
import { AircraftControllerUpdate$Params } from '../fn/aircraft/aircraft-controller-update';
import { AmimsAircraftDto } from '../models/amims-aircraft-dto';

@Injectable({ providedIn: 'root' })
export class AircraftService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `aircraftControllerFindAll()` */
  static readonly AircraftControllerFindAllPath = '/amims/aircraft/aircraft';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `aircraftControllerFindAll()` instead.
   *
   * This method doesn't expect any request body.
   */
  aircraftControllerFindAll$Response(params?: AircraftControllerFindAll$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: Array<AmimsAircraftDto>;
'total'?: number;
}>> {
    return aircraftControllerFindAll(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `aircraftControllerFindAll$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  aircraftControllerFindAll(params?: AircraftControllerFindAll$Params, context?: HttpContext): Observable<{
'code'?: number;
'pesan'?: string;
'data'?: Array<AmimsAircraftDto>;
'total'?: number;
}> {
    return this.aircraftControllerFindAll$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: Array<AmimsAircraftDto>;
'total'?: number;
}>): {
'code'?: number;
'pesan'?: string;
'data'?: Array<AmimsAircraftDto>;
'total'?: number;
} => r.body)
    );
  }

  /** Path part for operation `aircraftControllerCreate()` */
  static readonly AircraftControllerCreatePath = '/amims/aircraft/aircraft';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `aircraftControllerCreate()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  aircraftControllerCreate$Response(params: AircraftControllerCreate$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsAircraftDto;
}>> {
    return aircraftControllerCreate(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `aircraftControllerCreate$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  aircraftControllerCreate(params: AircraftControllerCreate$Params, context?: HttpContext): Observable<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsAircraftDto;
}> {
    return this.aircraftControllerCreate$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsAircraftDto;
}>): {
'code'?: number;
'pesan'?: string;
'data'?: AmimsAircraftDto;
} => r.body)
    );
  }

  /** Path part for operation `aircraftControllerFindOne()` */
  static readonly AircraftControllerFindOnePath = '/amims/aircraft/aircraft/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `aircraftControllerFindOne()` instead.
   *
   * This method doesn't expect any request body.
   */
  aircraftControllerFindOne$Response(params: AircraftControllerFindOne$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsAircraftDto;
}>> {
    return aircraftControllerFindOne(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `aircraftControllerFindOne$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  aircraftControllerFindOne(params: AircraftControllerFindOne$Params, context?: HttpContext): Observable<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsAircraftDto;
}> {
    return this.aircraftControllerFindOne$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsAircraftDto;
}>): {
'code'?: number;
'pesan'?: string;
'data'?: AmimsAircraftDto;
} => r.body)
    );
  }

  /** Path part for operation `aircraftControllerUpdate()` */
  static readonly AircraftControllerUpdatePath = '/amims/aircraft/aircraft/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `aircraftControllerUpdate()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  aircraftControllerUpdate$Response(params: AircraftControllerUpdate$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsAircraftDto;
}>> {
    return aircraftControllerUpdate(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `aircraftControllerUpdate$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  aircraftControllerUpdate(params: AircraftControllerUpdate$Params, context?: HttpContext): Observable<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsAircraftDto;
}> {
    return this.aircraftControllerUpdate$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsAircraftDto;
}>): {
'code'?: number;
'pesan'?: string;
'data'?: AmimsAircraftDto;
} => r.body)
    );
  }

  /** Path part for operation `aircraftControllerRemove()` */
  static readonly AircraftControllerRemovePath = '/amims/aircraft/aircraft/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `aircraftControllerRemove()` instead.
   *
   * This method doesn't expect any request body.
   */
  aircraftControllerRemove$Response(params: AircraftControllerRemove$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsAircraftDto;
}>> {
    return aircraftControllerRemove(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `aircraftControllerRemove$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  aircraftControllerRemove(params: AircraftControllerRemove$Params, context?: HttpContext): Observable<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsAircraftDto;
}> {
    return this.aircraftControllerRemove$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsAircraftDto;
}>): {
'code'?: number;
'pesan'?: string;
'data'?: AmimsAircraftDto;
} => r.body)
    );
  }

}

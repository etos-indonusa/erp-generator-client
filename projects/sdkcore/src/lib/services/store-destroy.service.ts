/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { AmimsStoreDestroyDto } from '../models/amims-store-destroy-dto';
import { storeDestroyControllerCreate } from '../fn/store-destroy/store-destroy-controller-create';
import { StoreDestroyControllerCreate$Params } from '../fn/store-destroy/store-destroy-controller-create';
import { storeDestroyControllerFindAll } from '../fn/store-destroy/store-destroy-controller-find-all';
import { StoreDestroyControllerFindAll$Params } from '../fn/store-destroy/store-destroy-controller-find-all';
import { storeDestroyControllerFindOne } from '../fn/store-destroy/store-destroy-controller-find-one';
import { StoreDestroyControllerFindOne$Params } from '../fn/store-destroy/store-destroy-controller-find-one';
import { storeDestroyControllerRemove } from '../fn/store-destroy/store-destroy-controller-remove';
import { StoreDestroyControllerRemove$Params } from '../fn/store-destroy/store-destroy-controller-remove';
import { storeDestroyControllerUpdate } from '../fn/store-destroy/store-destroy-controller-update';
import { StoreDestroyControllerUpdate$Params } from '../fn/store-destroy/store-destroy-controller-update';

@Injectable({ providedIn: 'root' })
export class StoreDestroyService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `storeDestroyControllerFindAll()` */
  static readonly StoreDestroyControllerFindAllPath = '/amims/store_destroy/store_destroy';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `storeDestroyControllerFindAll()` instead.
   *
   * This method doesn't expect any request body.
   */
  storeDestroyControllerFindAll$Response(params?: StoreDestroyControllerFindAll$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: Array<AmimsStoreDestroyDto>;
'total'?: number;
}>> {
    return storeDestroyControllerFindAll(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `storeDestroyControllerFindAll$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  storeDestroyControllerFindAll(params?: StoreDestroyControllerFindAll$Params, context?: HttpContext): Observable<{
'code'?: number;
'pesan'?: string;
'data'?: Array<AmimsStoreDestroyDto>;
'total'?: number;
}> {
    return this.storeDestroyControllerFindAll$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: Array<AmimsStoreDestroyDto>;
'total'?: number;
}>): {
'code'?: number;
'pesan'?: string;
'data'?: Array<AmimsStoreDestroyDto>;
'total'?: number;
} => r.body)
    );
  }

  /** Path part for operation `storeDestroyControllerCreate()` */
  static readonly StoreDestroyControllerCreatePath = '/amims/store_destroy/store_destroy';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `storeDestroyControllerCreate()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  storeDestroyControllerCreate$Response(params: StoreDestroyControllerCreate$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsStoreDestroyDto;
}>> {
    return storeDestroyControllerCreate(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `storeDestroyControllerCreate$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  storeDestroyControllerCreate(params: StoreDestroyControllerCreate$Params, context?: HttpContext): Observable<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsStoreDestroyDto;
}> {
    return this.storeDestroyControllerCreate$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsStoreDestroyDto;
}>): {
'code'?: number;
'pesan'?: string;
'data'?: AmimsStoreDestroyDto;
} => r.body)
    );
  }

  /** Path part for operation `storeDestroyControllerFindOne()` */
  static readonly StoreDestroyControllerFindOnePath = '/amims/store_destroy/store_destroy/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `storeDestroyControllerFindOne()` instead.
   *
   * This method doesn't expect any request body.
   */
  storeDestroyControllerFindOne$Response(params: StoreDestroyControllerFindOne$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsStoreDestroyDto;
}>> {
    return storeDestroyControllerFindOne(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `storeDestroyControllerFindOne$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  storeDestroyControllerFindOne(params: StoreDestroyControllerFindOne$Params, context?: HttpContext): Observable<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsStoreDestroyDto;
}> {
    return this.storeDestroyControllerFindOne$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsStoreDestroyDto;
}>): {
'code'?: number;
'pesan'?: string;
'data'?: AmimsStoreDestroyDto;
} => r.body)
    );
  }

  /** Path part for operation `storeDestroyControllerUpdate()` */
  static readonly StoreDestroyControllerUpdatePath = '/amims/store_destroy/store_destroy/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `storeDestroyControllerUpdate()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  storeDestroyControllerUpdate$Response(params: StoreDestroyControllerUpdate$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsStoreDestroyDto;
}>> {
    return storeDestroyControllerUpdate(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `storeDestroyControllerUpdate$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  storeDestroyControllerUpdate(params: StoreDestroyControllerUpdate$Params, context?: HttpContext): Observable<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsStoreDestroyDto;
}> {
    return this.storeDestroyControllerUpdate$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsStoreDestroyDto;
}>): {
'code'?: number;
'pesan'?: string;
'data'?: AmimsStoreDestroyDto;
} => r.body)
    );
  }

  /** Path part for operation `storeDestroyControllerRemove()` */
  static readonly StoreDestroyControllerRemovePath = '/amims/store_destroy/store_destroy/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `storeDestroyControllerRemove()` instead.
   *
   * This method doesn't expect any request body.
   */
  storeDestroyControllerRemove$Response(params: StoreDestroyControllerRemove$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsStoreDestroyDto;
}>> {
    return storeDestroyControllerRemove(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `storeDestroyControllerRemove$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  storeDestroyControllerRemove(params: StoreDestroyControllerRemove$Params, context?: HttpContext): Observable<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsStoreDestroyDto;
}> {
    return this.storeDestroyControllerRemove$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsStoreDestroyDto;
}>): {
'code'?: number;
'pesan'?: string;
'data'?: AmimsStoreDestroyDto;
} => r.body)
    );
  }

}

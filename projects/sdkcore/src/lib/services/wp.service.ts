/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { AmimsWpDto } from '../models/amims-wp-dto';
import { wpControllerCreate } from '../fn/wp/wp-controller-create';
import { WpControllerCreate$Params } from '../fn/wp/wp-controller-create';
import { wpControllerFindAll } from '../fn/wp/wp-controller-find-all';
import { WpControllerFindAll$Params } from '../fn/wp/wp-controller-find-all';
import { wpControllerFindOne } from '../fn/wp/wp-controller-find-one';
import { WpControllerFindOne$Params } from '../fn/wp/wp-controller-find-one';
import { wpControllerRemove } from '../fn/wp/wp-controller-remove';
import { WpControllerRemove$Params } from '../fn/wp/wp-controller-remove';
import { wpControllerUpdate } from '../fn/wp/wp-controller-update';
import { WpControllerUpdate$Params } from '../fn/wp/wp-controller-update';

@Injectable({ providedIn: 'root' })
export class WpService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `wpControllerFindAll()` */
  static readonly WpControllerFindAllPath = '/amims/wp/wp';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `wpControllerFindAll()` instead.
   *
   * This method doesn't expect any request body.
   */
  wpControllerFindAll$Response(params?: WpControllerFindAll$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: Array<AmimsWpDto>;
'total'?: number;
}>> {
    return wpControllerFindAll(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `wpControllerFindAll$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  wpControllerFindAll(params?: WpControllerFindAll$Params, context?: HttpContext): Observable<{
'code'?: number;
'pesan'?: string;
'data'?: Array<AmimsWpDto>;
'total'?: number;
}> {
    return this.wpControllerFindAll$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: Array<AmimsWpDto>;
'total'?: number;
}>): {
'code'?: number;
'pesan'?: string;
'data'?: Array<AmimsWpDto>;
'total'?: number;
} => r.body)
    );
  }

  /** Path part for operation `wpControllerCreate()` */
  static readonly WpControllerCreatePath = '/amims/wp/wp';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `wpControllerCreate()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  wpControllerCreate$Response(params: WpControllerCreate$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsWpDto;
}>> {
    return wpControllerCreate(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `wpControllerCreate$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  wpControllerCreate(params: WpControllerCreate$Params, context?: HttpContext): Observable<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsWpDto;
}> {
    return this.wpControllerCreate$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsWpDto;
}>): {
'code'?: number;
'pesan'?: string;
'data'?: AmimsWpDto;
} => r.body)
    );
  }

  /** Path part for operation `wpControllerFindOne()` */
  static readonly WpControllerFindOnePath = '/amims/wp/wp/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `wpControllerFindOne()` instead.
   *
   * This method doesn't expect any request body.
   */
  wpControllerFindOne$Response(params: WpControllerFindOne$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsWpDto;
}>> {
    return wpControllerFindOne(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `wpControllerFindOne$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  wpControllerFindOne(params: WpControllerFindOne$Params, context?: HttpContext): Observable<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsWpDto;
}> {
    return this.wpControllerFindOne$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsWpDto;
}>): {
'code'?: number;
'pesan'?: string;
'data'?: AmimsWpDto;
} => r.body)
    );
  }

  /** Path part for operation `wpControllerUpdate()` */
  static readonly WpControllerUpdatePath = '/amims/wp/wp/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `wpControllerUpdate()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  wpControllerUpdate$Response(params: WpControllerUpdate$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsWpDto;
}>> {
    return wpControllerUpdate(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `wpControllerUpdate$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  wpControllerUpdate(params: WpControllerUpdate$Params, context?: HttpContext): Observable<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsWpDto;
}> {
    return this.wpControllerUpdate$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsWpDto;
}>): {
'code'?: number;
'pesan'?: string;
'data'?: AmimsWpDto;
} => r.body)
    );
  }

  /** Path part for operation `wpControllerRemove()` */
  static readonly WpControllerRemovePath = '/amims/wp/wp/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `wpControllerRemove()` instead.
   *
   * This method doesn't expect any request body.
   */
  wpControllerRemove$Response(params: WpControllerRemove$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsWpDto;
}>> {
    return wpControllerRemove(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `wpControllerRemove$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  wpControllerRemove(params: WpControllerRemove$Params, context?: HttpContext): Observable<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsWpDto;
}> {
    return this.wpControllerRemove$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsWpDto;
}>): {
'code'?: number;
'pesan'?: string;
'data'?: AmimsWpDto;
} => r.body)
    );
  }

}

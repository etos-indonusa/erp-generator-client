/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { AmimsWorkCompletedDto } from '../models/amims-work-completed-dto';
import { workCompletedControllerCreate } from '../fn/work-completed/work-completed-controller-create';
import { WorkCompletedControllerCreate$Params } from '../fn/work-completed/work-completed-controller-create';
import { workCompletedControllerFindAll } from '../fn/work-completed/work-completed-controller-find-all';
import { WorkCompletedControllerFindAll$Params } from '../fn/work-completed/work-completed-controller-find-all';
import { workCompletedControllerFindOne } from '../fn/work-completed/work-completed-controller-find-one';
import { WorkCompletedControllerFindOne$Params } from '../fn/work-completed/work-completed-controller-find-one';
import { workCompletedControllerRemove } from '../fn/work-completed/work-completed-controller-remove';
import { WorkCompletedControllerRemove$Params } from '../fn/work-completed/work-completed-controller-remove';
import { workCompletedControllerUpdate } from '../fn/work-completed/work-completed-controller-update';
import { WorkCompletedControllerUpdate$Params } from '../fn/work-completed/work-completed-controller-update';

@Injectable({ providedIn: 'root' })
export class WorkCompletedService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `workCompletedControllerFindAll()` */
  static readonly WorkCompletedControllerFindAllPath = '/amims/work_completed/work_completed';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `workCompletedControllerFindAll()` instead.
   *
   * This method doesn't expect any request body.
   */
  workCompletedControllerFindAll$Response(params?: WorkCompletedControllerFindAll$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: Array<AmimsWorkCompletedDto>;
'total'?: number;
}>> {
    return workCompletedControllerFindAll(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `workCompletedControllerFindAll$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  workCompletedControllerFindAll(params?: WorkCompletedControllerFindAll$Params, context?: HttpContext): Observable<{
'code'?: number;
'pesan'?: string;
'data'?: Array<AmimsWorkCompletedDto>;
'total'?: number;
}> {
    return this.workCompletedControllerFindAll$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: Array<AmimsWorkCompletedDto>;
'total'?: number;
}>): {
'code'?: number;
'pesan'?: string;
'data'?: Array<AmimsWorkCompletedDto>;
'total'?: number;
} => r.body)
    );
  }

  /** Path part for operation `workCompletedControllerCreate()` */
  static readonly WorkCompletedControllerCreatePath = '/amims/work_completed/work_completed';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `workCompletedControllerCreate()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  workCompletedControllerCreate$Response(params: WorkCompletedControllerCreate$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsWorkCompletedDto;
}>> {
    return workCompletedControllerCreate(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `workCompletedControllerCreate$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  workCompletedControllerCreate(params: WorkCompletedControllerCreate$Params, context?: HttpContext): Observable<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsWorkCompletedDto;
}> {
    return this.workCompletedControllerCreate$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsWorkCompletedDto;
}>): {
'code'?: number;
'pesan'?: string;
'data'?: AmimsWorkCompletedDto;
} => r.body)
    );
  }

  /** Path part for operation `workCompletedControllerFindOne()` */
  static readonly WorkCompletedControllerFindOnePath = '/amims/work_completed/work_completed/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `workCompletedControllerFindOne()` instead.
   *
   * This method doesn't expect any request body.
   */
  workCompletedControllerFindOne$Response(params: WorkCompletedControllerFindOne$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsWorkCompletedDto;
}>> {
    return workCompletedControllerFindOne(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `workCompletedControllerFindOne$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  workCompletedControllerFindOne(params: WorkCompletedControllerFindOne$Params, context?: HttpContext): Observable<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsWorkCompletedDto;
}> {
    return this.workCompletedControllerFindOne$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsWorkCompletedDto;
}>): {
'code'?: number;
'pesan'?: string;
'data'?: AmimsWorkCompletedDto;
} => r.body)
    );
  }

  /** Path part for operation `workCompletedControllerUpdate()` */
  static readonly WorkCompletedControllerUpdatePath = '/amims/work_completed/work_completed/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `workCompletedControllerUpdate()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  workCompletedControllerUpdate$Response(params: WorkCompletedControllerUpdate$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsWorkCompletedDto;
}>> {
    return workCompletedControllerUpdate(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `workCompletedControllerUpdate$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  workCompletedControllerUpdate(params: WorkCompletedControllerUpdate$Params, context?: HttpContext): Observable<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsWorkCompletedDto;
}> {
    return this.workCompletedControllerUpdate$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsWorkCompletedDto;
}>): {
'code'?: number;
'pesan'?: string;
'data'?: AmimsWorkCompletedDto;
} => r.body)
    );
  }

  /** Path part for operation `workCompletedControllerRemove()` */
  static readonly WorkCompletedControllerRemovePath = '/amims/work_completed/work_completed/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `workCompletedControllerRemove()` instead.
   *
   * This method doesn't expect any request body.
   */
  workCompletedControllerRemove$Response(params: WorkCompletedControllerRemove$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsWorkCompletedDto;
}>> {
    return workCompletedControllerRemove(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `workCompletedControllerRemove$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  workCompletedControllerRemove(params: WorkCompletedControllerRemove$Params, context?: HttpContext): Observable<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsWorkCompletedDto;
}> {
    return this.workCompletedControllerRemove$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsWorkCompletedDto;
}>): {
'code'?: number;
'pesan'?: string;
'data'?: AmimsWorkCompletedDto;
} => r.body)
    );
  }

}

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { AmimsPartAtaDto } from '../models/amims-part-ata-dto';
import { partAtaControllerCreate } from '../fn/part-ata/part-ata-controller-create';
import { PartAtaControllerCreate$Params } from '../fn/part-ata/part-ata-controller-create';
import { partAtaControllerFindAll } from '../fn/part-ata/part-ata-controller-find-all';
import { PartAtaControllerFindAll$Params } from '../fn/part-ata/part-ata-controller-find-all';
import { partAtaControllerFindOne } from '../fn/part-ata/part-ata-controller-find-one';
import { PartAtaControllerFindOne$Params } from '../fn/part-ata/part-ata-controller-find-one';
import { partAtaControllerRemove } from '../fn/part-ata/part-ata-controller-remove';
import { PartAtaControllerRemove$Params } from '../fn/part-ata/part-ata-controller-remove';
import { partAtaControllerUpdate } from '../fn/part-ata/part-ata-controller-update';
import { PartAtaControllerUpdate$Params } from '../fn/part-ata/part-ata-controller-update';

@Injectable({ providedIn: 'root' })
export class PartAtaService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `partAtaControllerFindAll()` */
  static readonly PartAtaControllerFindAllPath = '/amims/part_ata/part_ata';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `partAtaControllerFindAll()` instead.
   *
   * This method doesn't expect any request body.
   */
  partAtaControllerFindAll$Response(params?: PartAtaControllerFindAll$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: Array<AmimsPartAtaDto>;
'total'?: number;
}>> {
    return partAtaControllerFindAll(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `partAtaControllerFindAll$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  partAtaControllerFindAll(params?: PartAtaControllerFindAll$Params, context?: HttpContext): Observable<{
'code'?: number;
'pesan'?: string;
'data'?: Array<AmimsPartAtaDto>;
'total'?: number;
}> {
    return this.partAtaControllerFindAll$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: Array<AmimsPartAtaDto>;
'total'?: number;
}>): {
'code'?: number;
'pesan'?: string;
'data'?: Array<AmimsPartAtaDto>;
'total'?: number;
} => r.body)
    );
  }

  /** Path part for operation `partAtaControllerCreate()` */
  static readonly PartAtaControllerCreatePath = '/amims/part_ata/part_ata';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `partAtaControllerCreate()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  partAtaControllerCreate$Response(params: PartAtaControllerCreate$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsPartAtaDto;
}>> {
    return partAtaControllerCreate(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `partAtaControllerCreate$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  partAtaControllerCreate(params: PartAtaControllerCreate$Params, context?: HttpContext): Observable<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsPartAtaDto;
}> {
    return this.partAtaControllerCreate$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsPartAtaDto;
}>): {
'code'?: number;
'pesan'?: string;
'data'?: AmimsPartAtaDto;
} => r.body)
    );
  }

  /** Path part for operation `partAtaControllerFindOne()` */
  static readonly PartAtaControllerFindOnePath = '/amims/part_ata/part_ata/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `partAtaControllerFindOne()` instead.
   *
   * This method doesn't expect any request body.
   */
  partAtaControllerFindOne$Response(params: PartAtaControllerFindOne$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsPartAtaDto;
}>> {
    return partAtaControllerFindOne(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `partAtaControllerFindOne$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  partAtaControllerFindOne(params: PartAtaControllerFindOne$Params, context?: HttpContext): Observable<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsPartAtaDto;
}> {
    return this.partAtaControllerFindOne$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsPartAtaDto;
}>): {
'code'?: number;
'pesan'?: string;
'data'?: AmimsPartAtaDto;
} => r.body)
    );
  }

  /** Path part for operation `partAtaControllerUpdate()` */
  static readonly PartAtaControllerUpdatePath = '/amims/part_ata/part_ata/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `partAtaControllerUpdate()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  partAtaControllerUpdate$Response(params: PartAtaControllerUpdate$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsPartAtaDto;
}>> {
    return partAtaControllerUpdate(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `partAtaControllerUpdate$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  partAtaControllerUpdate(params: PartAtaControllerUpdate$Params, context?: HttpContext): Observable<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsPartAtaDto;
}> {
    return this.partAtaControllerUpdate$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsPartAtaDto;
}>): {
'code'?: number;
'pesan'?: string;
'data'?: AmimsPartAtaDto;
} => r.body)
    );
  }

  /** Path part for operation `partAtaControllerRemove()` */
  static readonly PartAtaControllerRemovePath = '/amims/part_ata/part_ata/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `partAtaControllerRemove()` instead.
   *
   * This method doesn't expect any request body.
   */
  partAtaControllerRemove$Response(params: PartAtaControllerRemove$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsPartAtaDto;
}>> {
    return partAtaControllerRemove(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `partAtaControllerRemove$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  partAtaControllerRemove(params: PartAtaControllerRemove$Params, context?: HttpContext): Observable<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsPartAtaDto;
}> {
    return this.partAtaControllerRemove$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsPartAtaDto;
}>): {
'code'?: number;
'pesan'?: string;
'data'?: AmimsPartAtaDto;
} => r.body)
    );
  }

}

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { AmimsMaintenanceMaterialDto } from '../models/amims-maintenance-material-dto';
import { maintenanceMaterialControllerCreate } from '../fn/maintenance-material/maintenance-material-controller-create';
import { MaintenanceMaterialControllerCreate$Params } from '../fn/maintenance-material/maintenance-material-controller-create';
import { maintenanceMaterialControllerFindAll } from '../fn/maintenance-material/maintenance-material-controller-find-all';
import { MaintenanceMaterialControllerFindAll$Params } from '../fn/maintenance-material/maintenance-material-controller-find-all';
import { maintenanceMaterialControllerFindOne } from '../fn/maintenance-material/maintenance-material-controller-find-one';
import { MaintenanceMaterialControllerFindOne$Params } from '../fn/maintenance-material/maintenance-material-controller-find-one';
import { maintenanceMaterialControllerRemove } from '../fn/maintenance-material/maintenance-material-controller-remove';
import { MaintenanceMaterialControllerRemove$Params } from '../fn/maintenance-material/maintenance-material-controller-remove';
import { maintenanceMaterialControllerUpdate } from '../fn/maintenance-material/maintenance-material-controller-update';
import { MaintenanceMaterialControllerUpdate$Params } from '../fn/maintenance-material/maintenance-material-controller-update';

@Injectable({ providedIn: 'root' })
export class MaintenanceMaterialService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `maintenanceMaterialControllerFindAll()` */
  static readonly MaintenanceMaterialControllerFindAllPath = '/amims/maintenance_material/maintenance_material';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `maintenanceMaterialControllerFindAll()` instead.
   *
   * This method doesn't expect any request body.
   */
  maintenanceMaterialControllerFindAll$Response(params?: MaintenanceMaterialControllerFindAll$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: Array<AmimsMaintenanceMaterialDto>;
'total'?: number;
}>> {
    return maintenanceMaterialControllerFindAll(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `maintenanceMaterialControllerFindAll$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  maintenanceMaterialControllerFindAll(params?: MaintenanceMaterialControllerFindAll$Params, context?: HttpContext): Observable<{
'code'?: number;
'pesan'?: string;
'data'?: Array<AmimsMaintenanceMaterialDto>;
'total'?: number;
}> {
    return this.maintenanceMaterialControllerFindAll$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: Array<AmimsMaintenanceMaterialDto>;
'total'?: number;
}>): {
'code'?: number;
'pesan'?: string;
'data'?: Array<AmimsMaintenanceMaterialDto>;
'total'?: number;
} => r.body)
    );
  }

  /** Path part for operation `maintenanceMaterialControllerCreate()` */
  static readonly MaintenanceMaterialControllerCreatePath = '/amims/maintenance_material/maintenance_material';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `maintenanceMaterialControllerCreate()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  maintenanceMaterialControllerCreate$Response(params: MaintenanceMaterialControllerCreate$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsMaintenanceMaterialDto;
}>> {
    return maintenanceMaterialControllerCreate(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `maintenanceMaterialControllerCreate$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  maintenanceMaterialControllerCreate(params: MaintenanceMaterialControllerCreate$Params, context?: HttpContext): Observable<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsMaintenanceMaterialDto;
}> {
    return this.maintenanceMaterialControllerCreate$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsMaintenanceMaterialDto;
}>): {
'code'?: number;
'pesan'?: string;
'data'?: AmimsMaintenanceMaterialDto;
} => r.body)
    );
  }

  /** Path part for operation `maintenanceMaterialControllerFindOne()` */
  static readonly MaintenanceMaterialControllerFindOnePath = '/amims/maintenance_material/maintenance_material/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `maintenanceMaterialControllerFindOne()` instead.
   *
   * This method doesn't expect any request body.
   */
  maintenanceMaterialControllerFindOne$Response(params: MaintenanceMaterialControllerFindOne$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsMaintenanceMaterialDto;
}>> {
    return maintenanceMaterialControllerFindOne(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `maintenanceMaterialControllerFindOne$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  maintenanceMaterialControllerFindOne(params: MaintenanceMaterialControllerFindOne$Params, context?: HttpContext): Observable<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsMaintenanceMaterialDto;
}> {
    return this.maintenanceMaterialControllerFindOne$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsMaintenanceMaterialDto;
}>): {
'code'?: number;
'pesan'?: string;
'data'?: AmimsMaintenanceMaterialDto;
} => r.body)
    );
  }

  /** Path part for operation `maintenanceMaterialControllerUpdate()` */
  static readonly MaintenanceMaterialControllerUpdatePath = '/amims/maintenance_material/maintenance_material/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `maintenanceMaterialControllerUpdate()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  maintenanceMaterialControllerUpdate$Response(params: MaintenanceMaterialControllerUpdate$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsMaintenanceMaterialDto;
}>> {
    return maintenanceMaterialControllerUpdate(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `maintenanceMaterialControllerUpdate$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  maintenanceMaterialControllerUpdate(params: MaintenanceMaterialControllerUpdate$Params, context?: HttpContext): Observable<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsMaintenanceMaterialDto;
}> {
    return this.maintenanceMaterialControllerUpdate$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsMaintenanceMaterialDto;
}>): {
'code'?: number;
'pesan'?: string;
'data'?: AmimsMaintenanceMaterialDto;
} => r.body)
    );
  }

  /** Path part for operation `maintenanceMaterialControllerRemove()` */
  static readonly MaintenanceMaterialControllerRemovePath = '/amims/maintenance_material/maintenance_material/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `maintenanceMaterialControllerRemove()` instead.
   *
   * This method doesn't expect any request body.
   */
  maintenanceMaterialControllerRemove$Response(params: MaintenanceMaterialControllerRemove$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsMaintenanceMaterialDto;
}>> {
    return maintenanceMaterialControllerRemove(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `maintenanceMaterialControllerRemove$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  maintenanceMaterialControllerRemove(params: MaintenanceMaterialControllerRemove$Params, context?: HttpContext): Observable<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsMaintenanceMaterialDto;
}> {
    return this.maintenanceMaterialControllerRemove$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsMaintenanceMaterialDto;
}>): {
'code'?: number;
'pesan'?: string;
'data'?: AmimsMaintenanceMaterialDto;
} => r.body)
    );
  }

}

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { AmimsPartDto } from '../models/amims-part-dto';
import { partControllerCreate } from '../fn/part/part-controller-create';
import { PartControllerCreate$Params } from '../fn/part/part-controller-create';
import { partControllerFindAll } from '../fn/part/part-controller-find-all';
import { PartControllerFindAll$Params } from '../fn/part/part-controller-find-all';
import { partControllerFindOne } from '../fn/part/part-controller-find-one';
import { PartControllerFindOne$Params } from '../fn/part/part-controller-find-one';
import { partControllerRemove } from '../fn/part/part-controller-remove';
import { PartControllerRemove$Params } from '../fn/part/part-controller-remove';
import { partControllerUpdate } from '../fn/part/part-controller-update';
import { PartControllerUpdate$Params } from '../fn/part/part-controller-update';

@Injectable({ providedIn: 'root' })
export class PartService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `partControllerFindAll()` */
  static readonly PartControllerFindAllPath = '/amims/part/part';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `partControllerFindAll()` instead.
   *
   * This method doesn't expect any request body.
   */
  partControllerFindAll$Response(params?: PartControllerFindAll$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: Array<AmimsPartDto>;
'total'?: number;
}>> {
    return partControllerFindAll(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `partControllerFindAll$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  partControllerFindAll(params?: PartControllerFindAll$Params, context?: HttpContext): Observable<{
'code'?: number;
'pesan'?: string;
'data'?: Array<AmimsPartDto>;
'total'?: number;
}> {
    return this.partControllerFindAll$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: Array<AmimsPartDto>;
'total'?: number;
}>): {
'code'?: number;
'pesan'?: string;
'data'?: Array<AmimsPartDto>;
'total'?: number;
} => r.body)
    );
  }

  /** Path part for operation `partControllerCreate()` */
  static readonly PartControllerCreatePath = '/amims/part/part';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `partControllerCreate()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  partControllerCreate$Response(params: PartControllerCreate$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsPartDto;
}>> {
    return partControllerCreate(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `partControllerCreate$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  partControllerCreate(params: PartControllerCreate$Params, context?: HttpContext): Observable<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsPartDto;
}> {
    return this.partControllerCreate$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsPartDto;
}>): {
'code'?: number;
'pesan'?: string;
'data'?: AmimsPartDto;
} => r.body)
    );
  }

  /** Path part for operation `partControllerFindOne()` */
  static readonly PartControllerFindOnePath = '/amims/part/part/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `partControllerFindOne()` instead.
   *
   * This method doesn't expect any request body.
   */
  partControllerFindOne$Response(params: PartControllerFindOne$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsPartDto;
}>> {
    return partControllerFindOne(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `partControllerFindOne$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  partControllerFindOne(params: PartControllerFindOne$Params, context?: HttpContext): Observable<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsPartDto;
}> {
    return this.partControllerFindOne$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsPartDto;
}>): {
'code'?: number;
'pesan'?: string;
'data'?: AmimsPartDto;
} => r.body)
    );
  }

  /** Path part for operation `partControllerUpdate()` */
  static readonly PartControllerUpdatePath = '/amims/part/part/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `partControllerUpdate()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  partControllerUpdate$Response(params: PartControllerUpdate$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsPartDto;
}>> {
    return partControllerUpdate(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `partControllerUpdate$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  partControllerUpdate(params: PartControllerUpdate$Params, context?: HttpContext): Observable<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsPartDto;
}> {
    return this.partControllerUpdate$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsPartDto;
}>): {
'code'?: number;
'pesan'?: string;
'data'?: AmimsPartDto;
} => r.body)
    );
  }

  /** Path part for operation `partControllerRemove()` */
  static readonly PartControllerRemovePath = '/amims/part/part/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `partControllerRemove()` instead.
   *
   * This method doesn't expect any request body.
   */
  partControllerRemove$Response(params: PartControllerRemove$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsPartDto;
}>> {
    return partControllerRemove(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `partControllerRemove$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  partControllerRemove(params: PartControllerRemove$Params, context?: HttpContext): Observable<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsPartDto;
}> {
    return this.partControllerRemove$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsPartDto;
}>): {
'code'?: number;
'pesan'?: string;
'data'?: AmimsPartDto;
} => r.body)
    );
  }

}

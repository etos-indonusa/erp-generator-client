/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { AmimsPurPrDto } from '../models/amims-pur-pr-dto';
import { purPrControllerCreate } from '../fn/pur-pr/pur-pr-controller-create';
import { PurPrControllerCreate$Params } from '../fn/pur-pr/pur-pr-controller-create';
import { purPrControllerFindAll } from '../fn/pur-pr/pur-pr-controller-find-all';
import { PurPrControllerFindAll$Params } from '../fn/pur-pr/pur-pr-controller-find-all';
import { purPrControllerFindOne } from '../fn/pur-pr/pur-pr-controller-find-one';
import { PurPrControllerFindOne$Params } from '../fn/pur-pr/pur-pr-controller-find-one';
import { purPrControllerRemove } from '../fn/pur-pr/pur-pr-controller-remove';
import { PurPrControllerRemove$Params } from '../fn/pur-pr/pur-pr-controller-remove';
import { purPrControllerUpdate } from '../fn/pur-pr/pur-pr-controller-update';
import { PurPrControllerUpdate$Params } from '../fn/pur-pr/pur-pr-controller-update';

@Injectable({ providedIn: 'root' })
export class PurPrService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `purPrControllerFindAll()` */
  static readonly PurPrControllerFindAllPath = '/amims/pur_pr/pur_pr';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `purPrControllerFindAll()` instead.
   *
   * This method doesn't expect any request body.
   */
  purPrControllerFindAll$Response(params?: PurPrControllerFindAll$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: Array<AmimsPurPrDto>;
'total'?: number;
}>> {
    return purPrControllerFindAll(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `purPrControllerFindAll$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  purPrControllerFindAll(params?: PurPrControllerFindAll$Params, context?: HttpContext): Observable<{
'code'?: number;
'pesan'?: string;
'data'?: Array<AmimsPurPrDto>;
'total'?: number;
}> {
    return this.purPrControllerFindAll$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: Array<AmimsPurPrDto>;
'total'?: number;
}>): {
'code'?: number;
'pesan'?: string;
'data'?: Array<AmimsPurPrDto>;
'total'?: number;
} => r.body)
    );
  }

  /** Path part for operation `purPrControllerCreate()` */
  static readonly PurPrControllerCreatePath = '/amims/pur_pr/pur_pr';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `purPrControllerCreate()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  purPrControllerCreate$Response(params: PurPrControllerCreate$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsPurPrDto;
}>> {
    return purPrControllerCreate(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `purPrControllerCreate$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  purPrControllerCreate(params: PurPrControllerCreate$Params, context?: HttpContext): Observable<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsPurPrDto;
}> {
    return this.purPrControllerCreate$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsPurPrDto;
}>): {
'code'?: number;
'pesan'?: string;
'data'?: AmimsPurPrDto;
} => r.body)
    );
  }

  /** Path part for operation `purPrControllerFindOne()` */
  static readonly PurPrControllerFindOnePath = '/amims/pur_pr/pur_pr/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `purPrControllerFindOne()` instead.
   *
   * This method doesn't expect any request body.
   */
  purPrControllerFindOne$Response(params: PurPrControllerFindOne$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsPurPrDto;
}>> {
    return purPrControllerFindOne(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `purPrControllerFindOne$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  purPrControllerFindOne(params: PurPrControllerFindOne$Params, context?: HttpContext): Observable<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsPurPrDto;
}> {
    return this.purPrControllerFindOne$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsPurPrDto;
}>): {
'code'?: number;
'pesan'?: string;
'data'?: AmimsPurPrDto;
} => r.body)
    );
  }

  /** Path part for operation `purPrControllerUpdate()` */
  static readonly PurPrControllerUpdatePath = '/amims/pur_pr/pur_pr/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `purPrControllerUpdate()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  purPrControllerUpdate$Response(params: PurPrControllerUpdate$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsPurPrDto;
}>> {
    return purPrControllerUpdate(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `purPrControllerUpdate$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  purPrControllerUpdate(params: PurPrControllerUpdate$Params, context?: HttpContext): Observable<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsPurPrDto;
}> {
    return this.purPrControllerUpdate$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsPurPrDto;
}>): {
'code'?: number;
'pesan'?: string;
'data'?: AmimsPurPrDto;
} => r.body)
    );
  }

  /** Path part for operation `purPrControllerRemove()` */
  static readonly PurPrControllerRemovePath = '/amims/pur_pr/pur_pr/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `purPrControllerRemove()` instead.
   *
   * This method doesn't expect any request body.
   */
  purPrControllerRemove$Response(params: PurPrControllerRemove$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsPurPrDto;
}>> {
    return purPrControllerRemove(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `purPrControllerRemove$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  purPrControllerRemove(params: PurPrControllerRemove$Params, context?: HttpContext): Observable<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsPurPrDto;
}> {
    return this.purPrControllerRemove$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsPurPrDto;
}>): {
'code'?: number;
'pesan'?: string;
'data'?: AmimsPurPrDto;
} => r.body)
    );
  }

}

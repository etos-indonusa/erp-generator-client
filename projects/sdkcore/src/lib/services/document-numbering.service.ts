/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { documentNumberingControllerCreate } from '../fn/document-numbering/document-numbering-controller-create';
import { DocumentNumberingControllerCreate$Params } from '../fn/document-numbering/document-numbering-controller-create';
import { documentNumberingControllerFindAll } from '../fn/document-numbering/document-numbering-controller-find-all';
import { DocumentNumberingControllerFindAll$Params } from '../fn/document-numbering/document-numbering-controller-find-all';
import { documentNumberingControllerFindOne } from '../fn/document-numbering/document-numbering-controller-find-one';
import { DocumentNumberingControllerFindOne$Params } from '../fn/document-numbering/document-numbering-controller-find-one';
import { documentNumberingControllerRemove } from '../fn/document-numbering/document-numbering-controller-remove';
import { DocumentNumberingControllerRemove$Params } from '../fn/document-numbering/document-numbering-controller-remove';
import { documentNumberingControllerUpdate } from '../fn/document-numbering/document-numbering-controller-update';
import { DocumentNumberingControllerUpdate$Params } from '../fn/document-numbering/document-numbering-controller-update';
import { ToolsDocumentNumberingDto } from '../models/tools-document-numbering-dto';

@Injectable({ providedIn: 'root' })
export class DocumentNumberingService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `documentNumberingControllerFindAll()` */
  static readonly DocumentNumberingControllerFindAllPath = '/auth/document_numbering/document_numbering';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `documentNumberingControllerFindAll()` instead.
   *
   * This method doesn't expect any request body.
   */
  documentNumberingControllerFindAll$Response(params?: DocumentNumberingControllerFindAll$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: Array<ToolsDocumentNumberingDto>;
'total'?: number;
}>> {
    return documentNumberingControllerFindAll(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `documentNumberingControllerFindAll$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  documentNumberingControllerFindAll(params?: DocumentNumberingControllerFindAll$Params, context?: HttpContext): Observable<{
'code'?: number;
'pesan'?: string;
'data'?: Array<ToolsDocumentNumberingDto>;
'total'?: number;
}> {
    return this.documentNumberingControllerFindAll$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: Array<ToolsDocumentNumberingDto>;
'total'?: number;
}>): {
'code'?: number;
'pesan'?: string;
'data'?: Array<ToolsDocumentNumberingDto>;
'total'?: number;
} => r.body)
    );
  }

  /** Path part for operation `documentNumberingControllerCreate()` */
  static readonly DocumentNumberingControllerCreatePath = '/auth/document_numbering/document_numbering';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `documentNumberingControllerCreate()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  documentNumberingControllerCreate$Response(params: DocumentNumberingControllerCreate$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: ToolsDocumentNumberingDto;
}>> {
    return documentNumberingControllerCreate(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `documentNumberingControllerCreate$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  documentNumberingControllerCreate(params: DocumentNumberingControllerCreate$Params, context?: HttpContext): Observable<{
'code'?: number;
'pesan'?: string;
'data'?: ToolsDocumentNumberingDto;
}> {
    return this.documentNumberingControllerCreate$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: ToolsDocumentNumberingDto;
}>): {
'code'?: number;
'pesan'?: string;
'data'?: ToolsDocumentNumberingDto;
} => r.body)
    );
  }

  /** Path part for operation `documentNumberingControllerFindOne()` */
  static readonly DocumentNumberingControllerFindOnePath = '/auth/document_numbering/document_numbering/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `documentNumberingControllerFindOne()` instead.
   *
   * This method doesn't expect any request body.
   */
  documentNumberingControllerFindOne$Response(params: DocumentNumberingControllerFindOne$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: ToolsDocumentNumberingDto;
}>> {
    return documentNumberingControllerFindOne(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `documentNumberingControllerFindOne$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  documentNumberingControllerFindOne(params: DocumentNumberingControllerFindOne$Params, context?: HttpContext): Observable<{
'code'?: number;
'pesan'?: string;
'data'?: ToolsDocumentNumberingDto;
}> {
    return this.documentNumberingControllerFindOne$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: ToolsDocumentNumberingDto;
}>): {
'code'?: number;
'pesan'?: string;
'data'?: ToolsDocumentNumberingDto;
} => r.body)
    );
  }

  /** Path part for operation `documentNumberingControllerUpdate()` */
  static readonly DocumentNumberingControllerUpdatePath = '/auth/document_numbering/document_numbering/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `documentNumberingControllerUpdate()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  documentNumberingControllerUpdate$Response(params: DocumentNumberingControllerUpdate$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: ToolsDocumentNumberingDto;
}>> {
    return documentNumberingControllerUpdate(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `documentNumberingControllerUpdate$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  documentNumberingControllerUpdate(params: DocumentNumberingControllerUpdate$Params, context?: HttpContext): Observable<{
'code'?: number;
'pesan'?: string;
'data'?: ToolsDocumentNumberingDto;
}> {
    return this.documentNumberingControllerUpdate$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: ToolsDocumentNumberingDto;
}>): {
'code'?: number;
'pesan'?: string;
'data'?: ToolsDocumentNumberingDto;
} => r.body)
    );
  }

  /** Path part for operation `documentNumberingControllerRemove()` */
  static readonly DocumentNumberingControllerRemovePath = '/auth/document_numbering/document_numbering/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `documentNumberingControllerRemove()` instead.
   *
   * This method doesn't expect any request body.
   */
  documentNumberingControllerRemove$Response(params: DocumentNumberingControllerRemove$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: ToolsDocumentNumberingDto;
}>> {
    return documentNumberingControllerRemove(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `documentNumberingControllerRemove$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  documentNumberingControllerRemove(params: DocumentNumberingControllerRemove$Params, context?: HttpContext): Observable<{
'code'?: number;
'pesan'?: string;
'data'?: ToolsDocumentNumberingDto;
}> {
    return this.documentNumberingControllerRemove$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: ToolsDocumentNumberingDto;
}>): {
'code'?: number;
'pesan'?: string;
'data'?: ToolsDocumentNumberingDto;
} => r.body)
    );
  }

}

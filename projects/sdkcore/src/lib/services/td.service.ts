/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { AmimsTdDto } from '../models/amims-td-dto';
import { tdControllerCreate } from '../fn/td/td-controller-create';
import { TdControllerCreate$Params } from '../fn/td/td-controller-create';
import { tdControllerFindAll } from '../fn/td/td-controller-find-all';
import { TdControllerFindAll$Params } from '../fn/td/td-controller-find-all';
import { tdControllerFindOne } from '../fn/td/td-controller-find-one';
import { TdControllerFindOne$Params } from '../fn/td/td-controller-find-one';
import { tdControllerRemove } from '../fn/td/td-controller-remove';
import { TdControllerRemove$Params } from '../fn/td/td-controller-remove';
import { tdControllerUpdate } from '../fn/td/td-controller-update';
import { TdControllerUpdate$Params } from '../fn/td/td-controller-update';

@Injectable({ providedIn: 'root' })
export class TdService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `tdControllerFindAll()` */
  static readonly TdControllerFindAllPath = '/amims/td/td';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `tdControllerFindAll()` instead.
   *
   * This method doesn't expect any request body.
   */
  tdControllerFindAll$Response(params?: TdControllerFindAll$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: Array<AmimsTdDto>;
'total'?: number;
}>> {
    return tdControllerFindAll(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `tdControllerFindAll$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  tdControllerFindAll(params?: TdControllerFindAll$Params, context?: HttpContext): Observable<{
'code'?: number;
'pesan'?: string;
'data'?: Array<AmimsTdDto>;
'total'?: number;
}> {
    return this.tdControllerFindAll$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: Array<AmimsTdDto>;
'total'?: number;
}>): {
'code'?: number;
'pesan'?: string;
'data'?: Array<AmimsTdDto>;
'total'?: number;
} => r.body)
    );
  }

  /** Path part for operation `tdControllerCreate()` */
  static readonly TdControllerCreatePath = '/amims/td/td';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `tdControllerCreate()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  tdControllerCreate$Response(params: TdControllerCreate$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsTdDto;
}>> {
    return tdControllerCreate(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `tdControllerCreate$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  tdControllerCreate(params: TdControllerCreate$Params, context?: HttpContext): Observable<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsTdDto;
}> {
    return this.tdControllerCreate$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsTdDto;
}>): {
'code'?: number;
'pesan'?: string;
'data'?: AmimsTdDto;
} => r.body)
    );
  }

  /** Path part for operation `tdControllerFindOne()` */
  static readonly TdControllerFindOnePath = '/amims/td/td/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `tdControllerFindOne()` instead.
   *
   * This method doesn't expect any request body.
   */
  tdControllerFindOne$Response(params: TdControllerFindOne$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsTdDto;
}>> {
    return tdControllerFindOne(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `tdControllerFindOne$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  tdControllerFindOne(params: TdControllerFindOne$Params, context?: HttpContext): Observable<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsTdDto;
}> {
    return this.tdControllerFindOne$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsTdDto;
}>): {
'code'?: number;
'pesan'?: string;
'data'?: AmimsTdDto;
} => r.body)
    );
  }

  /** Path part for operation `tdControllerUpdate()` */
  static readonly TdControllerUpdatePath = '/amims/td/td/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `tdControllerUpdate()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  tdControllerUpdate$Response(params: TdControllerUpdate$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsTdDto;
}>> {
    return tdControllerUpdate(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `tdControllerUpdate$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  tdControllerUpdate(params: TdControllerUpdate$Params, context?: HttpContext): Observable<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsTdDto;
}> {
    return this.tdControllerUpdate$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsTdDto;
}>): {
'code'?: number;
'pesan'?: string;
'data'?: AmimsTdDto;
} => r.body)
    );
  }

  /** Path part for operation `tdControllerRemove()` */
  static readonly TdControllerRemovePath = '/amims/td/td/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `tdControllerRemove()` instead.
   *
   * This method doesn't expect any request body.
   */
  tdControllerRemove$Response(params: TdControllerRemove$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsTdDto;
}>> {
    return tdControllerRemove(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `tdControllerRemove$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  tdControllerRemove(params: TdControllerRemove$Params, context?: HttpContext): Observable<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsTdDto;
}> {
    return this.tdControllerRemove$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsTdDto;
}>): {
'code'?: number;
'pesan'?: string;
'data'?: AmimsTdDto;
} => r.body)
    );
  }

}

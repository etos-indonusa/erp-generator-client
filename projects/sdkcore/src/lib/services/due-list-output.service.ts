/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { AmimsDueListOutputDto } from '../models/amims-due-list-output-dto';
import { dueListOutputControllerCreate } from '../fn/due-list-output/due-list-output-controller-create';
import { DueListOutputControllerCreate$Params } from '../fn/due-list-output/due-list-output-controller-create';
import { dueListOutputControllerFindAll } from '../fn/due-list-output/due-list-output-controller-find-all';
import { DueListOutputControllerFindAll$Params } from '../fn/due-list-output/due-list-output-controller-find-all';
import { dueListOutputControllerFindOne } from '../fn/due-list-output/due-list-output-controller-find-one';
import { DueListOutputControllerFindOne$Params } from '../fn/due-list-output/due-list-output-controller-find-one';
import { dueListOutputControllerRemove } from '../fn/due-list-output/due-list-output-controller-remove';
import { DueListOutputControllerRemove$Params } from '../fn/due-list-output/due-list-output-controller-remove';
import { dueListOutputControllerUpdate } from '../fn/due-list-output/due-list-output-controller-update';
import { DueListOutputControllerUpdate$Params } from '../fn/due-list-output/due-list-output-controller-update';

@Injectable({ providedIn: 'root' })
export class DueListOutputService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `dueListOutputControllerFindAll()` */
  static readonly DueListOutputControllerFindAllPath = '/amims/due_list_output/due_list_output';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `dueListOutputControllerFindAll()` instead.
   *
   * This method doesn't expect any request body.
   */
  dueListOutputControllerFindAll$Response(params?: DueListOutputControllerFindAll$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: Array<AmimsDueListOutputDto>;
'total'?: number;
}>> {
    return dueListOutputControllerFindAll(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `dueListOutputControllerFindAll$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  dueListOutputControllerFindAll(params?: DueListOutputControllerFindAll$Params, context?: HttpContext): Observable<{
'code'?: number;
'pesan'?: string;
'data'?: Array<AmimsDueListOutputDto>;
'total'?: number;
}> {
    return this.dueListOutputControllerFindAll$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: Array<AmimsDueListOutputDto>;
'total'?: number;
}>): {
'code'?: number;
'pesan'?: string;
'data'?: Array<AmimsDueListOutputDto>;
'total'?: number;
} => r.body)
    );
  }

  /** Path part for operation `dueListOutputControllerCreate()` */
  static readonly DueListOutputControllerCreatePath = '/amims/due_list_output/due_list_output';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `dueListOutputControllerCreate()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  dueListOutputControllerCreate$Response(params: DueListOutputControllerCreate$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsDueListOutputDto;
}>> {
    return dueListOutputControllerCreate(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `dueListOutputControllerCreate$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  dueListOutputControllerCreate(params: DueListOutputControllerCreate$Params, context?: HttpContext): Observable<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsDueListOutputDto;
}> {
    return this.dueListOutputControllerCreate$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsDueListOutputDto;
}>): {
'code'?: number;
'pesan'?: string;
'data'?: AmimsDueListOutputDto;
} => r.body)
    );
  }

  /** Path part for operation `dueListOutputControllerFindOne()` */
  static readonly DueListOutputControllerFindOnePath = '/amims/due_list_output/due_list_output/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `dueListOutputControllerFindOne()` instead.
   *
   * This method doesn't expect any request body.
   */
  dueListOutputControllerFindOne$Response(params: DueListOutputControllerFindOne$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsDueListOutputDto;
}>> {
    return dueListOutputControllerFindOne(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `dueListOutputControllerFindOne$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  dueListOutputControllerFindOne(params: DueListOutputControllerFindOne$Params, context?: HttpContext): Observable<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsDueListOutputDto;
}> {
    return this.dueListOutputControllerFindOne$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsDueListOutputDto;
}>): {
'code'?: number;
'pesan'?: string;
'data'?: AmimsDueListOutputDto;
} => r.body)
    );
  }

  /** Path part for operation `dueListOutputControllerUpdate()` */
  static readonly DueListOutputControllerUpdatePath = '/amims/due_list_output/due_list_output/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `dueListOutputControllerUpdate()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  dueListOutputControllerUpdate$Response(params: DueListOutputControllerUpdate$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsDueListOutputDto;
}>> {
    return dueListOutputControllerUpdate(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `dueListOutputControllerUpdate$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  dueListOutputControllerUpdate(params: DueListOutputControllerUpdate$Params, context?: HttpContext): Observable<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsDueListOutputDto;
}> {
    return this.dueListOutputControllerUpdate$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsDueListOutputDto;
}>): {
'code'?: number;
'pesan'?: string;
'data'?: AmimsDueListOutputDto;
} => r.body)
    );
  }

  /** Path part for operation `dueListOutputControllerRemove()` */
  static readonly DueListOutputControllerRemovePath = '/amims/due_list_output/due_list_output/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `dueListOutputControllerRemove()` instead.
   *
   * This method doesn't expect any request body.
   */
  dueListOutputControllerRemove$Response(params: DueListOutputControllerRemove$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsDueListOutputDto;
}>> {
    return dueListOutputControllerRemove(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `dueListOutputControllerRemove$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  dueListOutputControllerRemove(params: DueListOutputControllerRemove$Params, context?: HttpContext): Observable<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsDueListOutputDto;
}> {
    return this.dueListOutputControllerRemove$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsDueListOutputDto;
}>): {
'code'?: number;
'pesan'?: string;
'data'?: AmimsDueListOutputDto;
} => r.body)
    );
  }

}

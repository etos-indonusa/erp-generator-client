/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { AclModuleDto } from '../models/acl-module-dto';
import { moduleControllerCreate } from '../fn/module/module-controller-create';
import { ModuleControllerCreate$Params } from '../fn/module/module-controller-create';
import { moduleControllerFindAll } from '../fn/module/module-controller-find-all';
import { ModuleControllerFindAll$Params } from '../fn/module/module-controller-find-all';
import { moduleControllerFindOne } from '../fn/module/module-controller-find-one';
import { ModuleControllerFindOne$Params } from '../fn/module/module-controller-find-one';
import { moduleControllerRemove } from '../fn/module/module-controller-remove';
import { ModuleControllerRemove$Params } from '../fn/module/module-controller-remove';
import { moduleControllerUpdate } from '../fn/module/module-controller-update';
import { ModuleControllerUpdate$Params } from '../fn/module/module-controller-update';

@Injectable({ providedIn: 'root' })
export class ModuleService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `moduleControllerFindAll()` */
  static readonly ModuleControllerFindAllPath = '/auth/module/module';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `moduleControllerFindAll()` instead.
   *
   * This method doesn't expect any request body.
   */
  moduleControllerFindAll$Response(params?: ModuleControllerFindAll$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: Array<AclModuleDto>;
'total'?: number;
}>> {
    return moduleControllerFindAll(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `moduleControllerFindAll$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  moduleControllerFindAll(params?: ModuleControllerFindAll$Params, context?: HttpContext): Observable<{
'code'?: number;
'pesan'?: string;
'data'?: Array<AclModuleDto>;
'total'?: number;
}> {
    return this.moduleControllerFindAll$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: Array<AclModuleDto>;
'total'?: number;
}>): {
'code'?: number;
'pesan'?: string;
'data'?: Array<AclModuleDto>;
'total'?: number;
} => r.body)
    );
  }

  /** Path part for operation `moduleControllerCreate()` */
  static readonly ModuleControllerCreatePath = '/auth/module/module';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `moduleControllerCreate()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  moduleControllerCreate$Response(params: ModuleControllerCreate$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AclModuleDto;
}>> {
    return moduleControllerCreate(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `moduleControllerCreate$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  moduleControllerCreate(params: ModuleControllerCreate$Params, context?: HttpContext): Observable<{
'code'?: number;
'pesan'?: string;
'data'?: AclModuleDto;
}> {
    return this.moduleControllerCreate$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AclModuleDto;
}>): {
'code'?: number;
'pesan'?: string;
'data'?: AclModuleDto;
} => r.body)
    );
  }

  /** Path part for operation `moduleControllerFindOne()` */
  static readonly ModuleControllerFindOnePath = '/auth/module/module/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `moduleControllerFindOne()` instead.
   *
   * This method doesn't expect any request body.
   */
  moduleControllerFindOne$Response(params: ModuleControllerFindOne$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AclModuleDto;
}>> {
    return moduleControllerFindOne(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `moduleControllerFindOne$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  moduleControllerFindOne(params: ModuleControllerFindOne$Params, context?: HttpContext): Observable<{
'code'?: number;
'pesan'?: string;
'data'?: AclModuleDto;
}> {
    return this.moduleControllerFindOne$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AclModuleDto;
}>): {
'code'?: number;
'pesan'?: string;
'data'?: AclModuleDto;
} => r.body)
    );
  }

  /** Path part for operation `moduleControllerUpdate()` */
  static readonly ModuleControllerUpdatePath = '/auth/module/module/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `moduleControllerUpdate()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  moduleControllerUpdate$Response(params: ModuleControllerUpdate$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AclModuleDto;
}>> {
    return moduleControllerUpdate(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `moduleControllerUpdate$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  moduleControllerUpdate(params: ModuleControllerUpdate$Params, context?: HttpContext): Observable<{
'code'?: number;
'pesan'?: string;
'data'?: AclModuleDto;
}> {
    return this.moduleControllerUpdate$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AclModuleDto;
}>): {
'code'?: number;
'pesan'?: string;
'data'?: AclModuleDto;
} => r.body)
    );
  }

  /** Path part for operation `moduleControllerRemove()` */
  static readonly ModuleControllerRemovePath = '/auth/module/module/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `moduleControllerRemove()` instead.
   *
   * This method doesn't expect any request body.
   */
  moduleControllerRemove$Response(params: ModuleControllerRemove$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AclModuleDto;
}>> {
    return moduleControllerRemove(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `moduleControllerRemove$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  moduleControllerRemove(params: ModuleControllerRemove$Params, context?: HttpContext): Observable<{
'code'?: number;
'pesan'?: string;
'data'?: AclModuleDto;
}> {
    return this.moduleControllerRemove$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AclModuleDto;
}>): {
'code'?: number;
'pesan'?: string;
'data'?: AclModuleDto;
} => r.body)
    );
  }

}

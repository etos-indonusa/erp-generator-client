/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { AmimsMcurrencyDto } from '../models/amims-mcurrency-dto';
import { mcurrencyControllerCreate } from '../fn/mcurrency/mcurrency-controller-create';
import { McurrencyControllerCreate$Params } from '../fn/mcurrency/mcurrency-controller-create';
import { mcurrencyControllerFindAll } from '../fn/mcurrency/mcurrency-controller-find-all';
import { McurrencyControllerFindAll$Params } from '../fn/mcurrency/mcurrency-controller-find-all';
import { mcurrencyControllerFindOne } from '../fn/mcurrency/mcurrency-controller-find-one';
import { McurrencyControllerFindOne$Params } from '../fn/mcurrency/mcurrency-controller-find-one';
import { mcurrencyControllerRemove } from '../fn/mcurrency/mcurrency-controller-remove';
import { McurrencyControllerRemove$Params } from '../fn/mcurrency/mcurrency-controller-remove';
import { mcurrencyControllerUpdate } from '../fn/mcurrency/mcurrency-controller-update';
import { McurrencyControllerUpdate$Params } from '../fn/mcurrency/mcurrency-controller-update';

@Injectable({ providedIn: 'root' })
export class McurrencyService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `mcurrencyControllerFindAll()` */
  static readonly McurrencyControllerFindAllPath = '/amims/mcurrency/mcurrency';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `mcurrencyControllerFindAll()` instead.
   *
   * This method doesn't expect any request body.
   */
  mcurrencyControllerFindAll$Response(params?: McurrencyControllerFindAll$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: Array<AmimsMcurrencyDto>;
'total'?: number;
}>> {
    return mcurrencyControllerFindAll(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `mcurrencyControllerFindAll$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  mcurrencyControllerFindAll(params?: McurrencyControllerFindAll$Params, context?: HttpContext): Observable<{
'code'?: number;
'pesan'?: string;
'data'?: Array<AmimsMcurrencyDto>;
'total'?: number;
}> {
    return this.mcurrencyControllerFindAll$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: Array<AmimsMcurrencyDto>;
'total'?: number;
}>): {
'code'?: number;
'pesan'?: string;
'data'?: Array<AmimsMcurrencyDto>;
'total'?: number;
} => r.body)
    );
  }

  /** Path part for operation `mcurrencyControllerCreate()` */
  static readonly McurrencyControllerCreatePath = '/amims/mcurrency/mcurrency';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `mcurrencyControllerCreate()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  mcurrencyControllerCreate$Response(params: McurrencyControllerCreate$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsMcurrencyDto;
}>> {
    return mcurrencyControllerCreate(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `mcurrencyControllerCreate$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  mcurrencyControllerCreate(params: McurrencyControllerCreate$Params, context?: HttpContext): Observable<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsMcurrencyDto;
}> {
    return this.mcurrencyControllerCreate$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsMcurrencyDto;
}>): {
'code'?: number;
'pesan'?: string;
'data'?: AmimsMcurrencyDto;
} => r.body)
    );
  }

  /** Path part for operation `mcurrencyControllerFindOne()` */
  static readonly McurrencyControllerFindOnePath = '/amims/mcurrency/mcurrency/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `mcurrencyControllerFindOne()` instead.
   *
   * This method doesn't expect any request body.
   */
  mcurrencyControllerFindOne$Response(params: McurrencyControllerFindOne$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsMcurrencyDto;
}>> {
    return mcurrencyControllerFindOne(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `mcurrencyControllerFindOne$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  mcurrencyControllerFindOne(params: McurrencyControllerFindOne$Params, context?: HttpContext): Observable<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsMcurrencyDto;
}> {
    return this.mcurrencyControllerFindOne$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsMcurrencyDto;
}>): {
'code'?: number;
'pesan'?: string;
'data'?: AmimsMcurrencyDto;
} => r.body)
    );
  }

  /** Path part for operation `mcurrencyControllerUpdate()` */
  static readonly McurrencyControllerUpdatePath = '/amims/mcurrency/mcurrency/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `mcurrencyControllerUpdate()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  mcurrencyControllerUpdate$Response(params: McurrencyControllerUpdate$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsMcurrencyDto;
}>> {
    return mcurrencyControllerUpdate(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `mcurrencyControllerUpdate$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  mcurrencyControllerUpdate(params: McurrencyControllerUpdate$Params, context?: HttpContext): Observable<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsMcurrencyDto;
}> {
    return this.mcurrencyControllerUpdate$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsMcurrencyDto;
}>): {
'code'?: number;
'pesan'?: string;
'data'?: AmimsMcurrencyDto;
} => r.body)
    );
  }

  /** Path part for operation `mcurrencyControllerRemove()` */
  static readonly McurrencyControllerRemovePath = '/amims/mcurrency/mcurrency/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `mcurrencyControllerRemove()` instead.
   *
   * This method doesn't expect any request body.
   */
  mcurrencyControllerRemove$Response(params: McurrencyControllerRemove$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsMcurrencyDto;
}>> {
    return mcurrencyControllerRemove(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `mcurrencyControllerRemove$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  mcurrencyControllerRemove(params: McurrencyControllerRemove$Params, context?: HttpContext): Observable<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsMcurrencyDto;
}> {
    return this.mcurrencyControllerRemove$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsMcurrencyDto;
}>): {
'code'?: number;
'pesan'?: string;
'data'?: AmimsMcurrencyDto;
} => r.body)
    );
  }

}

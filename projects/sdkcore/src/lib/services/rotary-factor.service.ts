/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { AmimsRotaryFactorDto } from '../models/amims-rotary-factor-dto';
import { rotaryFactorControllerCreate } from '../fn/rotary-factor/rotary-factor-controller-create';
import { RotaryFactorControllerCreate$Params } from '../fn/rotary-factor/rotary-factor-controller-create';
import { rotaryFactorControllerFindAll } from '../fn/rotary-factor/rotary-factor-controller-find-all';
import { RotaryFactorControllerFindAll$Params } from '../fn/rotary-factor/rotary-factor-controller-find-all';
import { rotaryFactorControllerFindOne } from '../fn/rotary-factor/rotary-factor-controller-find-one';
import { RotaryFactorControllerFindOne$Params } from '../fn/rotary-factor/rotary-factor-controller-find-one';
import { rotaryFactorControllerRemove } from '../fn/rotary-factor/rotary-factor-controller-remove';
import { RotaryFactorControllerRemove$Params } from '../fn/rotary-factor/rotary-factor-controller-remove';
import { rotaryFactorControllerUpdate } from '../fn/rotary-factor/rotary-factor-controller-update';
import { RotaryFactorControllerUpdate$Params } from '../fn/rotary-factor/rotary-factor-controller-update';

@Injectable({ providedIn: 'root' })
export class RotaryFactorService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `rotaryFactorControllerFindAll()` */
  static readonly RotaryFactorControllerFindAllPath = '/amims/rotary_factor/rotary_factor';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `rotaryFactorControllerFindAll()` instead.
   *
   * This method doesn't expect any request body.
   */
  rotaryFactorControllerFindAll$Response(params?: RotaryFactorControllerFindAll$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: Array<AmimsRotaryFactorDto>;
'total'?: number;
}>> {
    return rotaryFactorControllerFindAll(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `rotaryFactorControllerFindAll$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  rotaryFactorControllerFindAll(params?: RotaryFactorControllerFindAll$Params, context?: HttpContext): Observable<{
'code'?: number;
'pesan'?: string;
'data'?: Array<AmimsRotaryFactorDto>;
'total'?: number;
}> {
    return this.rotaryFactorControllerFindAll$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: Array<AmimsRotaryFactorDto>;
'total'?: number;
}>): {
'code'?: number;
'pesan'?: string;
'data'?: Array<AmimsRotaryFactorDto>;
'total'?: number;
} => r.body)
    );
  }

  /** Path part for operation `rotaryFactorControllerCreate()` */
  static readonly RotaryFactorControllerCreatePath = '/amims/rotary_factor/rotary_factor';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `rotaryFactorControllerCreate()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  rotaryFactorControllerCreate$Response(params: RotaryFactorControllerCreate$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsRotaryFactorDto;
}>> {
    return rotaryFactorControllerCreate(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `rotaryFactorControllerCreate$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  rotaryFactorControllerCreate(params: RotaryFactorControllerCreate$Params, context?: HttpContext): Observable<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsRotaryFactorDto;
}> {
    return this.rotaryFactorControllerCreate$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsRotaryFactorDto;
}>): {
'code'?: number;
'pesan'?: string;
'data'?: AmimsRotaryFactorDto;
} => r.body)
    );
  }

  /** Path part for operation `rotaryFactorControllerFindOne()` */
  static readonly RotaryFactorControllerFindOnePath = '/amims/rotary_factor/rotary_factor/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `rotaryFactorControllerFindOne()` instead.
   *
   * This method doesn't expect any request body.
   */
  rotaryFactorControllerFindOne$Response(params: RotaryFactorControllerFindOne$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsRotaryFactorDto;
}>> {
    return rotaryFactorControllerFindOne(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `rotaryFactorControllerFindOne$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  rotaryFactorControllerFindOne(params: RotaryFactorControllerFindOne$Params, context?: HttpContext): Observable<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsRotaryFactorDto;
}> {
    return this.rotaryFactorControllerFindOne$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsRotaryFactorDto;
}>): {
'code'?: number;
'pesan'?: string;
'data'?: AmimsRotaryFactorDto;
} => r.body)
    );
  }

  /** Path part for operation `rotaryFactorControllerUpdate()` */
  static readonly RotaryFactorControllerUpdatePath = '/amims/rotary_factor/rotary_factor/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `rotaryFactorControllerUpdate()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  rotaryFactorControllerUpdate$Response(params: RotaryFactorControllerUpdate$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsRotaryFactorDto;
}>> {
    return rotaryFactorControllerUpdate(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `rotaryFactorControllerUpdate$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  rotaryFactorControllerUpdate(params: RotaryFactorControllerUpdate$Params, context?: HttpContext): Observable<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsRotaryFactorDto;
}> {
    return this.rotaryFactorControllerUpdate$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsRotaryFactorDto;
}>): {
'code'?: number;
'pesan'?: string;
'data'?: AmimsRotaryFactorDto;
} => r.body)
    );
  }

  /** Path part for operation `rotaryFactorControllerRemove()` */
  static readonly RotaryFactorControllerRemovePath = '/amims/rotary_factor/rotary_factor/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `rotaryFactorControllerRemove()` instead.
   *
   * This method doesn't expect any request body.
   */
  rotaryFactorControllerRemove$Response(params: RotaryFactorControllerRemove$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsRotaryFactorDto;
}>> {
    return rotaryFactorControllerRemove(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `rotaryFactorControllerRemove$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  rotaryFactorControllerRemove(params: RotaryFactorControllerRemove$Params, context?: HttpContext): Observable<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsRotaryFactorDto;
}> {
    return this.rotaryFactorControllerRemove$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsRotaryFactorDto;
}>): {
'code'?: number;
'pesan'?: string;
'data'?: AmimsRotaryFactorDto;
} => r.body)
    );
  }

}

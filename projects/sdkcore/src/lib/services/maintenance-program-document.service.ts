/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { AmimsMaintenanceProgramDocumentDto } from '../models/amims-maintenance-program-document-dto';
import { maintenanceProgramDocumentControllerCreate } from '../fn/maintenance-program-document/maintenance-program-document-controller-create';
import { MaintenanceProgramDocumentControllerCreate$Params } from '../fn/maintenance-program-document/maintenance-program-document-controller-create';
import { maintenanceProgramDocumentControllerFindAll } from '../fn/maintenance-program-document/maintenance-program-document-controller-find-all';
import { MaintenanceProgramDocumentControllerFindAll$Params } from '../fn/maintenance-program-document/maintenance-program-document-controller-find-all';
import { maintenanceProgramDocumentControllerFindOne } from '../fn/maintenance-program-document/maintenance-program-document-controller-find-one';
import { MaintenanceProgramDocumentControllerFindOne$Params } from '../fn/maintenance-program-document/maintenance-program-document-controller-find-one';
import { maintenanceProgramDocumentControllerRemove } from '../fn/maintenance-program-document/maintenance-program-document-controller-remove';
import { MaintenanceProgramDocumentControllerRemove$Params } from '../fn/maintenance-program-document/maintenance-program-document-controller-remove';
import { maintenanceProgramDocumentControllerUpdate } from '../fn/maintenance-program-document/maintenance-program-document-controller-update';
import { MaintenanceProgramDocumentControllerUpdate$Params } from '../fn/maintenance-program-document/maintenance-program-document-controller-update';

@Injectable({ providedIn: 'root' })
export class MaintenanceProgramDocumentService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `maintenanceProgramDocumentControllerFindAll()` */
  static readonly MaintenanceProgramDocumentControllerFindAllPath = '/amims/maintenance_program_document/maintenance_program_document';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `maintenanceProgramDocumentControllerFindAll()` instead.
   *
   * This method doesn't expect any request body.
   */
  maintenanceProgramDocumentControllerFindAll$Response(params?: MaintenanceProgramDocumentControllerFindAll$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: Array<AmimsMaintenanceProgramDocumentDto>;
'total'?: number;
}>> {
    return maintenanceProgramDocumentControllerFindAll(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `maintenanceProgramDocumentControllerFindAll$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  maintenanceProgramDocumentControllerFindAll(params?: MaintenanceProgramDocumentControllerFindAll$Params, context?: HttpContext): Observable<{
'code'?: number;
'pesan'?: string;
'data'?: Array<AmimsMaintenanceProgramDocumentDto>;
'total'?: number;
}> {
    return this.maintenanceProgramDocumentControllerFindAll$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: Array<AmimsMaintenanceProgramDocumentDto>;
'total'?: number;
}>): {
'code'?: number;
'pesan'?: string;
'data'?: Array<AmimsMaintenanceProgramDocumentDto>;
'total'?: number;
} => r.body)
    );
  }

  /** Path part for operation `maintenanceProgramDocumentControllerCreate()` */
  static readonly MaintenanceProgramDocumentControllerCreatePath = '/amims/maintenance_program_document/maintenance_program_document';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `maintenanceProgramDocumentControllerCreate()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  maintenanceProgramDocumentControllerCreate$Response(params: MaintenanceProgramDocumentControllerCreate$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsMaintenanceProgramDocumentDto;
}>> {
    return maintenanceProgramDocumentControllerCreate(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `maintenanceProgramDocumentControllerCreate$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  maintenanceProgramDocumentControllerCreate(params: MaintenanceProgramDocumentControllerCreate$Params, context?: HttpContext): Observable<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsMaintenanceProgramDocumentDto;
}> {
    return this.maintenanceProgramDocumentControllerCreate$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsMaintenanceProgramDocumentDto;
}>): {
'code'?: number;
'pesan'?: string;
'data'?: AmimsMaintenanceProgramDocumentDto;
} => r.body)
    );
  }

  /** Path part for operation `maintenanceProgramDocumentControllerFindOne()` */
  static readonly MaintenanceProgramDocumentControllerFindOnePath = '/amims/maintenance_program_document/maintenance_program_document/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `maintenanceProgramDocumentControllerFindOne()` instead.
   *
   * This method doesn't expect any request body.
   */
  maintenanceProgramDocumentControllerFindOne$Response(params: MaintenanceProgramDocumentControllerFindOne$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsMaintenanceProgramDocumentDto;
}>> {
    return maintenanceProgramDocumentControllerFindOne(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `maintenanceProgramDocumentControllerFindOne$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  maintenanceProgramDocumentControllerFindOne(params: MaintenanceProgramDocumentControllerFindOne$Params, context?: HttpContext): Observable<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsMaintenanceProgramDocumentDto;
}> {
    return this.maintenanceProgramDocumentControllerFindOne$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsMaintenanceProgramDocumentDto;
}>): {
'code'?: number;
'pesan'?: string;
'data'?: AmimsMaintenanceProgramDocumentDto;
} => r.body)
    );
  }

  /** Path part for operation `maintenanceProgramDocumentControllerUpdate()` */
  static readonly MaintenanceProgramDocumentControllerUpdatePath = '/amims/maintenance_program_document/maintenance_program_document/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `maintenanceProgramDocumentControllerUpdate()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  maintenanceProgramDocumentControllerUpdate$Response(params: MaintenanceProgramDocumentControllerUpdate$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsMaintenanceProgramDocumentDto;
}>> {
    return maintenanceProgramDocumentControllerUpdate(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `maintenanceProgramDocumentControllerUpdate$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  maintenanceProgramDocumentControllerUpdate(params: MaintenanceProgramDocumentControllerUpdate$Params, context?: HttpContext): Observable<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsMaintenanceProgramDocumentDto;
}> {
    return this.maintenanceProgramDocumentControllerUpdate$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsMaintenanceProgramDocumentDto;
}>): {
'code'?: number;
'pesan'?: string;
'data'?: AmimsMaintenanceProgramDocumentDto;
} => r.body)
    );
  }

  /** Path part for operation `maintenanceProgramDocumentControllerRemove()` */
  static readonly MaintenanceProgramDocumentControllerRemovePath = '/amims/maintenance_program_document/maintenance_program_document/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `maintenanceProgramDocumentControllerRemove()` instead.
   *
   * This method doesn't expect any request body.
   */
  maintenanceProgramDocumentControllerRemove$Response(params: MaintenanceProgramDocumentControllerRemove$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsMaintenanceProgramDocumentDto;
}>> {
    return maintenanceProgramDocumentControllerRemove(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `maintenanceProgramDocumentControllerRemove$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  maintenanceProgramDocumentControllerRemove(params: MaintenanceProgramDocumentControllerRemove$Params, context?: HttpContext): Observable<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsMaintenanceProgramDocumentDto;
}> {
    return this.maintenanceProgramDocumentControllerRemove$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsMaintenanceProgramDocumentDto;
}>): {
'code'?: number;
'pesan'?: string;
'data'?: AmimsMaintenanceProgramDocumentDto;
} => r.body)
    );
  }

}

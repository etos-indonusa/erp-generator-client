/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { AmimsWpJoDto } from '../models/amims-wp-jo-dto';
import { wpJoControllerCreate } from '../fn/wp-jo/wp-jo-controller-create';
import { WpJoControllerCreate$Params } from '../fn/wp-jo/wp-jo-controller-create';
import { wpJoControllerFindAll } from '../fn/wp-jo/wp-jo-controller-find-all';
import { WpJoControllerFindAll$Params } from '../fn/wp-jo/wp-jo-controller-find-all';
import { wpJoControllerFindOne } from '../fn/wp-jo/wp-jo-controller-find-one';
import { WpJoControllerFindOne$Params } from '../fn/wp-jo/wp-jo-controller-find-one';
import { wpJoControllerRemove } from '../fn/wp-jo/wp-jo-controller-remove';
import { WpJoControllerRemove$Params } from '../fn/wp-jo/wp-jo-controller-remove';
import { wpJoControllerUpdate } from '../fn/wp-jo/wp-jo-controller-update';
import { WpJoControllerUpdate$Params } from '../fn/wp-jo/wp-jo-controller-update';

@Injectable({ providedIn: 'root' })
export class WpJoService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `wpJoControllerFindAll()` */
  static readonly WpJoControllerFindAllPath = '/amims/wp_jo/wp_jo';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `wpJoControllerFindAll()` instead.
   *
   * This method doesn't expect any request body.
   */
  wpJoControllerFindAll$Response(params?: WpJoControllerFindAll$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: Array<AmimsWpJoDto>;
'total'?: number;
}>> {
    return wpJoControllerFindAll(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `wpJoControllerFindAll$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  wpJoControllerFindAll(params?: WpJoControllerFindAll$Params, context?: HttpContext): Observable<{
'code'?: number;
'pesan'?: string;
'data'?: Array<AmimsWpJoDto>;
'total'?: number;
}> {
    return this.wpJoControllerFindAll$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: Array<AmimsWpJoDto>;
'total'?: number;
}>): {
'code'?: number;
'pesan'?: string;
'data'?: Array<AmimsWpJoDto>;
'total'?: number;
} => r.body)
    );
  }

  /** Path part for operation `wpJoControllerCreate()` */
  static readonly WpJoControllerCreatePath = '/amims/wp_jo/wp_jo';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `wpJoControllerCreate()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  wpJoControllerCreate$Response(params: WpJoControllerCreate$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsWpJoDto;
}>> {
    return wpJoControllerCreate(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `wpJoControllerCreate$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  wpJoControllerCreate(params: WpJoControllerCreate$Params, context?: HttpContext): Observable<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsWpJoDto;
}> {
    return this.wpJoControllerCreate$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsWpJoDto;
}>): {
'code'?: number;
'pesan'?: string;
'data'?: AmimsWpJoDto;
} => r.body)
    );
  }

  /** Path part for operation `wpJoControllerFindOne()` */
  static readonly WpJoControllerFindOnePath = '/amims/wp_jo/wp_jo/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `wpJoControllerFindOne()` instead.
   *
   * This method doesn't expect any request body.
   */
  wpJoControllerFindOne$Response(params: WpJoControllerFindOne$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsWpJoDto;
}>> {
    return wpJoControllerFindOne(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `wpJoControllerFindOne$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  wpJoControllerFindOne(params: WpJoControllerFindOne$Params, context?: HttpContext): Observable<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsWpJoDto;
}> {
    return this.wpJoControllerFindOne$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsWpJoDto;
}>): {
'code'?: number;
'pesan'?: string;
'data'?: AmimsWpJoDto;
} => r.body)
    );
  }

  /** Path part for operation `wpJoControllerUpdate()` */
  static readonly WpJoControllerUpdatePath = '/amims/wp_jo/wp_jo/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `wpJoControllerUpdate()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  wpJoControllerUpdate$Response(params: WpJoControllerUpdate$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsWpJoDto;
}>> {
    return wpJoControllerUpdate(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `wpJoControllerUpdate$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  wpJoControllerUpdate(params: WpJoControllerUpdate$Params, context?: HttpContext): Observable<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsWpJoDto;
}> {
    return this.wpJoControllerUpdate$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsWpJoDto;
}>): {
'code'?: number;
'pesan'?: string;
'data'?: AmimsWpJoDto;
} => r.body)
    );
  }

  /** Path part for operation `wpJoControllerRemove()` */
  static readonly WpJoControllerRemovePath = '/amims/wp_jo/wp_jo/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `wpJoControllerRemove()` instead.
   *
   * This method doesn't expect any request body.
   */
  wpJoControllerRemove$Response(params: WpJoControllerRemove$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsWpJoDto;
}>> {
    return wpJoControllerRemove(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `wpJoControllerRemove$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  wpJoControllerRemove(params: WpJoControllerRemove$Params, context?: HttpContext): Observable<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsWpJoDto;
}> {
    return this.wpJoControllerRemove$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsWpJoDto;
}>): {
'code'?: number;
'pesan'?: string;
'data'?: AmimsWpJoDto;
} => r.body)
    );
  }

}

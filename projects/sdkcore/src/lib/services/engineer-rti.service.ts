/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { AmimsEngineerRtiDto } from '../models/amims-engineer-rti-dto';
import { engineerRtiControllerCreate } from '../fn/engineer-rti/engineer-rti-controller-create';
import { EngineerRtiControllerCreate$Params } from '../fn/engineer-rti/engineer-rti-controller-create';
import { engineerRtiControllerFindAll } from '../fn/engineer-rti/engineer-rti-controller-find-all';
import { EngineerRtiControllerFindAll$Params } from '../fn/engineer-rti/engineer-rti-controller-find-all';
import { engineerRtiControllerFindOne } from '../fn/engineer-rti/engineer-rti-controller-find-one';
import { EngineerRtiControllerFindOne$Params } from '../fn/engineer-rti/engineer-rti-controller-find-one';
import { engineerRtiControllerRemove } from '../fn/engineer-rti/engineer-rti-controller-remove';
import { EngineerRtiControllerRemove$Params } from '../fn/engineer-rti/engineer-rti-controller-remove';
import { engineerRtiControllerUpdate } from '../fn/engineer-rti/engineer-rti-controller-update';
import { EngineerRtiControllerUpdate$Params } from '../fn/engineer-rti/engineer-rti-controller-update';

@Injectable({ providedIn: 'root' })
export class EngineerRtiService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `engineerRtiControllerFindAll()` */
  static readonly EngineerRtiControllerFindAllPath = '/amims/engineer_rti/engineer_rti';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `engineerRtiControllerFindAll()` instead.
   *
   * This method doesn't expect any request body.
   */
  engineerRtiControllerFindAll$Response(params?: EngineerRtiControllerFindAll$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: Array<AmimsEngineerRtiDto>;
'total'?: number;
}>> {
    return engineerRtiControllerFindAll(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `engineerRtiControllerFindAll$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  engineerRtiControllerFindAll(params?: EngineerRtiControllerFindAll$Params, context?: HttpContext): Observable<{
'code'?: number;
'pesan'?: string;
'data'?: Array<AmimsEngineerRtiDto>;
'total'?: number;
}> {
    return this.engineerRtiControllerFindAll$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: Array<AmimsEngineerRtiDto>;
'total'?: number;
}>): {
'code'?: number;
'pesan'?: string;
'data'?: Array<AmimsEngineerRtiDto>;
'total'?: number;
} => r.body)
    );
  }

  /** Path part for operation `engineerRtiControllerCreate()` */
  static readonly EngineerRtiControllerCreatePath = '/amims/engineer_rti/engineer_rti';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `engineerRtiControllerCreate()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  engineerRtiControllerCreate$Response(params: EngineerRtiControllerCreate$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsEngineerRtiDto;
}>> {
    return engineerRtiControllerCreate(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `engineerRtiControllerCreate$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  engineerRtiControllerCreate(params: EngineerRtiControllerCreate$Params, context?: HttpContext): Observable<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsEngineerRtiDto;
}> {
    return this.engineerRtiControllerCreate$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsEngineerRtiDto;
}>): {
'code'?: number;
'pesan'?: string;
'data'?: AmimsEngineerRtiDto;
} => r.body)
    );
  }

  /** Path part for operation `engineerRtiControllerFindOne()` */
  static readonly EngineerRtiControllerFindOnePath = '/amims/engineer_rti/engineer_rti/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `engineerRtiControllerFindOne()` instead.
   *
   * This method doesn't expect any request body.
   */
  engineerRtiControllerFindOne$Response(params: EngineerRtiControllerFindOne$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsEngineerRtiDto;
}>> {
    return engineerRtiControllerFindOne(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `engineerRtiControllerFindOne$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  engineerRtiControllerFindOne(params: EngineerRtiControllerFindOne$Params, context?: HttpContext): Observable<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsEngineerRtiDto;
}> {
    return this.engineerRtiControllerFindOne$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsEngineerRtiDto;
}>): {
'code'?: number;
'pesan'?: string;
'data'?: AmimsEngineerRtiDto;
} => r.body)
    );
  }

  /** Path part for operation `engineerRtiControllerUpdate()` */
  static readonly EngineerRtiControllerUpdatePath = '/amims/engineer_rti/engineer_rti/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `engineerRtiControllerUpdate()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  engineerRtiControllerUpdate$Response(params: EngineerRtiControllerUpdate$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsEngineerRtiDto;
}>> {
    return engineerRtiControllerUpdate(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `engineerRtiControllerUpdate$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  engineerRtiControllerUpdate(params: EngineerRtiControllerUpdate$Params, context?: HttpContext): Observable<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsEngineerRtiDto;
}> {
    return this.engineerRtiControllerUpdate$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsEngineerRtiDto;
}>): {
'code'?: number;
'pesan'?: string;
'data'?: AmimsEngineerRtiDto;
} => r.body)
    );
  }

  /** Path part for operation `engineerRtiControllerRemove()` */
  static readonly EngineerRtiControllerRemovePath = '/amims/engineer_rti/engineer_rti/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `engineerRtiControllerRemove()` instead.
   *
   * This method doesn't expect any request body.
   */
  engineerRtiControllerRemove$Response(params: EngineerRtiControllerRemove$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsEngineerRtiDto;
}>> {
    return engineerRtiControllerRemove(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `engineerRtiControllerRemove$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  engineerRtiControllerRemove(params: EngineerRtiControllerRemove$Params, context?: HttpContext): Observable<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsEngineerRtiDto;
}> {
    return this.engineerRtiControllerRemove$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsEngineerRtiDto;
}>): {
'code'?: number;
'pesan'?: string;
'data'?: AmimsEngineerRtiDto;
} => r.body)
    );
  }

}

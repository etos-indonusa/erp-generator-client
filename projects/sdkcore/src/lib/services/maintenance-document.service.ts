/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { AmimsMaintenanceDocumentDto } from '../models/amims-maintenance-document-dto';
import { maintenanceDocumentControllerCreate } from '../fn/maintenance-document/maintenance-document-controller-create';
import { MaintenanceDocumentControllerCreate$Params } from '../fn/maintenance-document/maintenance-document-controller-create';
import { maintenanceDocumentControllerFindAll } from '../fn/maintenance-document/maintenance-document-controller-find-all';
import { MaintenanceDocumentControllerFindAll$Params } from '../fn/maintenance-document/maintenance-document-controller-find-all';
import { maintenanceDocumentControllerFindOne } from '../fn/maintenance-document/maintenance-document-controller-find-one';
import { MaintenanceDocumentControllerFindOne$Params } from '../fn/maintenance-document/maintenance-document-controller-find-one';
import { maintenanceDocumentControllerRemove } from '../fn/maintenance-document/maintenance-document-controller-remove';
import { MaintenanceDocumentControllerRemove$Params } from '../fn/maintenance-document/maintenance-document-controller-remove';
import { maintenanceDocumentControllerUpdate } from '../fn/maintenance-document/maintenance-document-controller-update';
import { MaintenanceDocumentControllerUpdate$Params } from '../fn/maintenance-document/maintenance-document-controller-update';

@Injectable({ providedIn: 'root' })
export class MaintenanceDocumentService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `maintenanceDocumentControllerFindAll()` */
  static readonly MaintenanceDocumentControllerFindAllPath = '/amims/maintenance_document/maintenance_document';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `maintenanceDocumentControllerFindAll()` instead.
   *
   * This method doesn't expect any request body.
   */
  maintenanceDocumentControllerFindAll$Response(params?: MaintenanceDocumentControllerFindAll$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: Array<AmimsMaintenanceDocumentDto>;
'total'?: number;
}>> {
    return maintenanceDocumentControllerFindAll(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `maintenanceDocumentControllerFindAll$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  maintenanceDocumentControllerFindAll(params?: MaintenanceDocumentControllerFindAll$Params, context?: HttpContext): Observable<{
'code'?: number;
'pesan'?: string;
'data'?: Array<AmimsMaintenanceDocumentDto>;
'total'?: number;
}> {
    return this.maintenanceDocumentControllerFindAll$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: Array<AmimsMaintenanceDocumentDto>;
'total'?: number;
}>): {
'code'?: number;
'pesan'?: string;
'data'?: Array<AmimsMaintenanceDocumentDto>;
'total'?: number;
} => r.body)
    );
  }

  /** Path part for operation `maintenanceDocumentControllerCreate()` */
  static readonly MaintenanceDocumentControllerCreatePath = '/amims/maintenance_document/maintenance_document';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `maintenanceDocumentControllerCreate()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  maintenanceDocumentControllerCreate$Response(params: MaintenanceDocumentControllerCreate$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsMaintenanceDocumentDto;
}>> {
    return maintenanceDocumentControllerCreate(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `maintenanceDocumentControllerCreate$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  maintenanceDocumentControllerCreate(params: MaintenanceDocumentControllerCreate$Params, context?: HttpContext): Observable<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsMaintenanceDocumentDto;
}> {
    return this.maintenanceDocumentControllerCreate$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsMaintenanceDocumentDto;
}>): {
'code'?: number;
'pesan'?: string;
'data'?: AmimsMaintenanceDocumentDto;
} => r.body)
    );
  }

  /** Path part for operation `maintenanceDocumentControllerFindOne()` */
  static readonly MaintenanceDocumentControllerFindOnePath = '/amims/maintenance_document/maintenance_document/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `maintenanceDocumentControllerFindOne()` instead.
   *
   * This method doesn't expect any request body.
   */
  maintenanceDocumentControllerFindOne$Response(params: MaintenanceDocumentControllerFindOne$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsMaintenanceDocumentDto;
}>> {
    return maintenanceDocumentControllerFindOne(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `maintenanceDocumentControllerFindOne$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  maintenanceDocumentControllerFindOne(params: MaintenanceDocumentControllerFindOne$Params, context?: HttpContext): Observable<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsMaintenanceDocumentDto;
}> {
    return this.maintenanceDocumentControllerFindOne$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsMaintenanceDocumentDto;
}>): {
'code'?: number;
'pesan'?: string;
'data'?: AmimsMaintenanceDocumentDto;
} => r.body)
    );
  }

  /** Path part for operation `maintenanceDocumentControllerUpdate()` */
  static readonly MaintenanceDocumentControllerUpdatePath = '/amims/maintenance_document/maintenance_document/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `maintenanceDocumentControllerUpdate()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  maintenanceDocumentControllerUpdate$Response(params: MaintenanceDocumentControllerUpdate$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsMaintenanceDocumentDto;
}>> {
    return maintenanceDocumentControllerUpdate(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `maintenanceDocumentControllerUpdate$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  maintenanceDocumentControllerUpdate(params: MaintenanceDocumentControllerUpdate$Params, context?: HttpContext): Observable<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsMaintenanceDocumentDto;
}> {
    return this.maintenanceDocumentControllerUpdate$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsMaintenanceDocumentDto;
}>): {
'code'?: number;
'pesan'?: string;
'data'?: AmimsMaintenanceDocumentDto;
} => r.body)
    );
  }

  /** Path part for operation `maintenanceDocumentControllerRemove()` */
  static readonly MaintenanceDocumentControllerRemovePath = '/amims/maintenance_document/maintenance_document/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `maintenanceDocumentControllerRemove()` instead.
   *
   * This method doesn't expect any request body.
   */
  maintenanceDocumentControllerRemove$Response(params: MaintenanceDocumentControllerRemove$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsMaintenanceDocumentDto;
}>> {
    return maintenanceDocumentControllerRemove(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `maintenanceDocumentControllerRemove$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  maintenanceDocumentControllerRemove(params: MaintenanceDocumentControllerRemove$Params, context?: HttpContext): Observable<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsMaintenanceDocumentDto;
}> {
    return this.maintenanceDocumentControllerRemove$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'code'?: number;
'pesan'?: string;
'data'?: AmimsMaintenanceDocumentDto;
}>): {
'code'?: number;
'pesan'?: string;
'data'?: AmimsMaintenanceDocumentDto;
} => r.body)
    );
  }

}
